
src/md5sum:     file format elf32-i386


Disassembly of section .init:

080490b4 <_init>:
 80490b4:	53                   	push   %ebx
 80490b5:	83 ec 08             	sub    $0x8,%esp
 80490b8:	e8 33 cf 00 00       	call   8055ff0 <__x86.get_pc_thunk.bx>
 80490bd:	81 c3 4f 20 02 00    	add    $0x2204f,%ebx
 80490c3:	8b 83 f8 ff ff ff    	mov    -0x8(%ebx),%eax
 80490c9:	85 c0                	test   %eax,%eax
 80490cb:	74 05                	je     80490d2 <_init+0x1e>
 80490cd:	e8 1e 02 00 00       	call   80492f0 <__gmon_start__@plt>
 80490d2:	83 c4 08             	add    $0x8,%esp
 80490d5:	5b                   	pop    %ebx
 80490d6:	c3                   	ret    

Disassembly of section .plt:

080490e0 <strcmp@plt-0x10>:
 80490e0:	ff 35 10 b1 06 08    	pushl  0x806b110
 80490e6:	ff 25 14 b1 06 08    	jmp    *0x806b114
 80490ec:	00 00                	add    %al,(%eax)
	...

080490f0 <strcmp@plt>:
 80490f0:	ff 25 18 b1 06 08    	jmp    *0x806b118
 80490f6:	68 00 00 00 00       	push   $0x0
 80490fb:	e9 e0 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049100 <open64@plt>:
 8049100:	ff 25 1c b1 06 08    	jmp    *0x806b11c
 8049106:	68 08 00 00 00       	push   $0x8
 804910b:	e9 d0 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049110 <getline@plt>:
 8049110:	ff 25 20 b1 06 08    	jmp    *0x806b120
 8049116:	68 10 00 00 00       	push   $0x10
 804911b:	e9 c0 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049120 <read@plt>:
 8049120:	ff 25 24 b1 06 08    	jmp    *0x806b124
 8049126:	68 18 00 00 00       	push   $0x18
 804912b:	e9 b0 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049130 <printf@plt>:
 8049130:	ff 25 28 b1 06 08    	jmp    *0x806b128
 8049136:	68 20 00 00 00       	push   $0x20
 804913b:	e9 a0 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049140 <fflush@plt>:
 8049140:	ff 25 2c b1 06 08    	jmp    *0x806b12c
 8049146:	68 28 00 00 00       	push   $0x28
 804914b:	e9 90 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049150 <_exit@plt>:
 8049150:	ff 25 30 b1 06 08    	jmp    *0x806b130
 8049156:	68 30 00 00 00       	push   $0x30
 804915b:	e9 80 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049160 <free@plt>:
 8049160:	ff 25 34 b1 06 08    	jmp    *0x806b134
 8049166:	68 38 00 00 00       	push   $0x38
 804916b:	e9 70 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049170 <memcpy@plt>:
 8049170:	ff 25 38 b1 06 08    	jmp    *0x806b138
 8049176:	68 40 00 00 00       	push   $0x40
 804917b:	e9 60 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049180 <mbsinit@plt>:
 8049180:	ff 25 3c b1 06 08    	jmp    *0x806b13c
 8049186:	68 48 00 00 00       	push   $0x48
 804918b:	e9 50 ff ff ff       	jmp    80490e0 <_init+0x2c>

08049190 <fclose@plt>:
 8049190:	ff 25 40 b1 06 08    	jmp    *0x806b140
 8049196:	68 50 00 00 00       	push   $0x50
 804919b:	e9 40 ff ff ff       	jmp    80490e0 <_init+0x2c>

080491a0 <fseeko64@plt>:
 80491a0:	ff 25 44 b1 06 08    	jmp    *0x806b144
 80491a6:	68 58 00 00 00       	push   $0x58
 80491ab:	e9 30 ff ff ff       	jmp    80490e0 <_init+0x2c>

080491b0 <memcmp@plt>:
 80491b0:	ff 25 48 b1 06 08    	jmp    *0x806b148
 80491b6:	68 60 00 00 00       	push   $0x60
 80491bb:	e9 20 ff ff ff       	jmp    80490e0 <_init+0x2c>

080491c0 <dprintf@plt>:
 80491c0:	ff 25 4c b1 06 08    	jmp    *0x806b14c
 80491c6:	68 68 00 00 00       	push   $0x68
 80491cb:	e9 10 ff ff ff       	jmp    80490e0 <_init+0x2c>

080491d0 <dcgettext@plt>:
 80491d0:	ff 25 50 b1 06 08    	jmp    *0x806b150
 80491d6:	68 70 00 00 00       	push   $0x70
 80491db:	e9 00 ff ff ff       	jmp    80490e0 <_init+0x2c>

080491e0 <shmat@plt>:
 80491e0:	ff 25 54 b1 06 08    	jmp    *0x806b154
 80491e6:	68 78 00 00 00       	push   $0x78
 80491eb:	e9 f0 fe ff ff       	jmp    80490e0 <_init+0x2c>

080491f0 <textdomain@plt>:
 80491f0:	ff 25 58 b1 06 08    	jmp    *0x806b158
 80491f6:	68 80 00 00 00       	push   $0x80
 80491fb:	e9 e0 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049200 <iswprint@plt>:
 8049200:	ff 25 5c b1 06 08    	jmp    *0x806b15c
 8049206:	68 88 00 00 00       	push   $0x88
 804920b:	e9 d0 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049210 <fopen64@plt>:
 8049210:	ff 25 60 b1 06 08    	jmp    *0x806b160
 8049216:	68 90 00 00 00       	push   $0x90
 804921b:	e9 c0 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049220 <fwrite@plt>:
 8049220:	ff 25 64 b1 06 08    	jmp    *0x806b164
 8049226:	68 98 00 00 00       	push   $0x98
 804922b:	e9 b0 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049230 <__ctype_get_mb_cur_max@plt>:
 8049230:	ff 25 68 b1 06 08    	jmp    *0x806b168
 8049236:	68 a0 00 00 00       	push   $0xa0
 804923b:	e9 a0 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049240 <waitpid@plt>:
 8049240:	ff 25 6c b1 06 08    	jmp    *0x806b16c
 8049246:	68 a8 00 00 00       	push   $0xa8
 804924b:	e9 90 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049250 <strcpy@plt>:
 8049250:	ff 25 70 b1 06 08    	jmp    *0x806b170
 8049256:	68 b0 00 00 00       	push   $0xb0
 804925b:	e9 80 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049260 <__fpending@plt>:
 8049260:	ff 25 74 b1 06 08    	jmp    *0x806b174
 8049266:	68 b8 00 00 00       	push   $0xb8
 804926b:	e9 70 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049270 <mbrtowc@plt>:
 8049270:	ff 25 78 b1 06 08    	jmp    *0x806b178
 8049276:	68 c0 00 00 00       	push   $0xc0
 804927b:	e9 60 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049280 <__cxa_atexit@plt>:
 8049280:	ff 25 7c b1 06 08    	jmp    *0x806b17c
 8049286:	68 c8 00 00 00       	push   $0xc8
 804928b:	e9 50 fe ff ff       	jmp    80490e0 <_init+0x2c>

08049290 <error@plt>:
 8049290:	ff 25 80 b1 06 08    	jmp    *0x806b180
 8049296:	68 d0 00 00 00       	push   $0xd0
 804929b:	e9 40 fe ff ff       	jmp    80490e0 <_init+0x2c>

080492a0 <fread_unlocked@plt>:
 80492a0:	ff 25 84 b1 06 08    	jmp    *0x806b184
 80492a6:	68 d8 00 00 00       	push   $0xd8
 80492ab:	e9 30 fe ff ff       	jmp    80490e0 <_init+0x2c>

080492b0 <getenv@plt>:
 80492b0:	ff 25 88 b1 06 08    	jmp    *0x806b188
 80492b6:	68 e0 00 00 00       	push   $0xe0
 80492bb:	e9 20 fe ff ff       	jmp    80490e0 <_init+0x2c>

080492c0 <realloc@plt>:
 80492c0:	ff 25 8c b1 06 08    	jmp    *0x806b18c
 80492c6:	68 e8 00 00 00       	push   $0xe8
 80492cb:	e9 10 fe ff ff       	jmp    80490e0 <_init+0x2c>

080492d0 <malloc@plt>:
 80492d0:	ff 25 90 b1 06 08    	jmp    *0x806b190
 80492d6:	68 f0 00 00 00       	push   $0xf0
 80492db:	e9 00 fe ff ff       	jmp    80490e0 <_init+0x2c>

080492e0 <__freading@plt>:
 80492e0:	ff 25 94 b1 06 08    	jmp    *0x806b194
 80492e6:	68 f8 00 00 00       	push   $0xf8
 80492eb:	e9 f0 fd ff ff       	jmp    80490e0 <_init+0x2c>

080492f0 <__gmon_start__@plt>:
 80492f0:	ff 25 98 b1 06 08    	jmp    *0x806b198
 80492f6:	68 00 01 00 00       	push   $0x100
 80492fb:	e9 e0 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049300 <exit@plt>:
 8049300:	ff 25 9c b1 06 08    	jmp    *0x806b19c
 8049306:	68 08 01 00 00       	push   $0x108
 804930b:	e9 d0 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049310 <fdopen@plt>:
 8049310:	ff 25 a0 b1 06 08    	jmp    *0x806b1a0
 8049316:	68 10 01 00 00       	push   $0x110
 804931b:	e9 c0 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049320 <fputs_unlocked@plt>:
 8049320:	ff 25 a4 b1 06 08    	jmp    *0x806b1a4
 8049326:	68 18 01 00 00       	push   $0x118
 804932b:	e9 b0 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049330 <getopt_long@plt>:
 8049330:	ff 25 a8 b1 06 08    	jmp    *0x806b1a8
 8049336:	68 20 01 00 00       	push   $0x120
 804933b:	e9 a0 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049340 <strchr@plt>:
 8049340:	ff 25 ac b1 06 08    	jmp    *0x806b1ac
 8049346:	68 28 01 00 00       	push   $0x128
 804934b:	e9 90 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049350 <fscanf@plt>:
 8049350:	ff 25 b0 b1 06 08    	jmp    *0x806b1b0
 8049356:	68 30 01 00 00       	push   $0x130
 804935b:	e9 80 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049360 <strlen@plt>:
 8049360:	ff 25 b4 b1 06 08    	jmp    *0x806b1b4
 8049366:	68 38 01 00 00       	push   $0x138
 804936b:	e9 70 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049370 <__libc_start_main@plt>:
 8049370:	ff 25 b8 b1 06 08    	jmp    *0x806b1b8
 8049376:	68 40 01 00 00       	push   $0x140
 804937b:	e9 60 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049380 <fprintf@plt>:
 8049380:	ff 25 bc b1 06 08    	jmp    *0x806b1bc
 8049386:	68 48 01 00 00       	push   $0x148
 804938b:	e9 50 fd ff ff       	jmp    80490e0 <_init+0x2c>

08049390 <write@plt>:
 8049390:	ff 25 c0 b1 06 08    	jmp    *0x806b1c0
 8049396:	68 50 01 00 00       	push   $0x150
 804939b:	e9 40 fd ff ff       	jmp    80490e0 <_init+0x2c>

080493a0 <fcntl@plt>:
 80493a0:	ff 25 c4 b1 06 08    	jmp    *0x806b1c4
 80493a6:	68 58 01 00 00       	push   $0x158
 80493ab:	e9 30 fd ff ff       	jmp    80490e0 <_init+0x2c>

080493b0 <setvbuf@plt>:
 80493b0:	ff 25 c8 b1 06 08    	jmp    *0x806b1c8
 80493b6:	68 60 01 00 00       	push   $0x160
 80493bb:	e9 20 fd ff ff       	jmp    80490e0 <_init+0x2c>

080493c0 <memset@plt>:
 80493c0:	ff 25 cc b1 06 08    	jmp    *0x806b1cc
 80493c6:	68 68 01 00 00       	push   $0x168
 80493cb:	e9 10 fd ff ff       	jmp    80490e0 <_init+0x2c>

080493d0 <ungetc@plt>:
 80493d0:	ff 25 d0 b1 06 08    	jmp    *0x806b1d0
 80493d6:	68 70 01 00 00       	push   $0x170
 80493db:	e9 00 fd ff ff       	jmp    80490e0 <_init+0x2c>

080493e0 <__errno_location@plt>:
 80493e0:	ff 25 d4 b1 06 08    	jmp    *0x806b1d4
 80493e6:	68 78 01 00 00       	push   $0x178
 80493eb:	e9 f0 fc ff ff       	jmp    80490e0 <_init+0x2c>

080493f0 <fileno@plt>:
 80493f0:	ff 25 d8 b1 06 08    	jmp    *0x806b1d8
 80493f6:	68 80 01 00 00       	push   $0x180
 80493fb:	e9 e0 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049400 <fwrite_unlocked@plt>:
 8049400:	ff 25 dc b1 06 08    	jmp    *0x806b1dc
 8049406:	68 88 01 00 00       	push   $0x188
 804940b:	e9 d0 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049410 <__printf_chk@plt>:
 8049410:	ff 25 e0 b1 06 08    	jmp    *0x806b1e0
 8049416:	68 90 01 00 00       	push   $0x190
 804941b:	e9 c0 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049420 <fork@plt>:
 8049420:	ff 25 e4 b1 06 08    	jmp    *0x806b1e4
 8049426:	68 98 01 00 00       	push   $0x198
 804942b:	e9 b0 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049430 <__uflow@plt>:
 8049430:	ff 25 e8 b1 06 08    	jmp    *0x806b1e8
 8049436:	68 a0 01 00 00       	push   $0x1a0
 804943b:	e9 a0 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049440 <nl_langinfo@plt>:
 8049440:	ff 25 ec b1 06 08    	jmp    *0x806b1ec
 8049446:	68 a8 01 00 00       	push   $0x1a8
 804944b:	e9 90 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049450 <setlocale@plt>:
 8049450:	ff 25 f0 b1 06 08    	jmp    *0x806b1f0
 8049456:	68 b0 01 00 00       	push   $0x1b0
 804945b:	e9 80 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049460 <strrchr@plt>:
 8049460:	ff 25 f4 b1 06 08    	jmp    *0x806b1f4
 8049466:	68 b8 01 00 00       	push   $0x1b8
 804946b:	e9 70 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049470 <__overflow@plt>:
 8049470:	ff 25 f8 b1 06 08    	jmp    *0x806b1f8
 8049476:	68 c0 01 00 00       	push   $0x1c0
 804947b:	e9 60 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049480 <atoi@plt>:
 8049480:	ff 25 fc b1 06 08    	jmp    *0x806b1fc
 8049486:	68 c8 01 00 00       	push   $0x1c8
 804948b:	e9 50 fc ff ff       	jmp    80490e0 <_init+0x2c>

08049490 <lseek64@plt>:
 8049490:	ff 25 00 b2 06 08    	jmp    *0x806b200
 8049496:	68 d0 01 00 00       	push   $0x1d0
 804949b:	e9 40 fc ff ff       	jmp    80490e0 <_init+0x2c>

080494a0 <__fprintf_chk@plt>:
 80494a0:	ff 25 04 b2 06 08    	jmp    *0x806b204
 80494a6:	68 d8 01 00 00       	push   $0x1d8
 80494ab:	e9 30 fc ff ff       	jmp    80490e0 <_init+0x2c>

080494b0 <bindtextdomain@plt>:
 80494b0:	ff 25 08 b2 06 08    	jmp    *0x806b208
 80494b6:	68 e0 01 00 00       	push   $0x1e0
 80494bb:	e9 20 fc ff ff       	jmp    80490e0 <_init+0x2c>

080494c0 <posix_fadvise64@plt>:
 80494c0:	ff 25 0c b2 06 08    	jmp    *0x806b20c
 80494c6:	68 e8 01 00 00       	push   $0x1e8
 80494cb:	e9 10 fc ff ff       	jmp    80490e0 <_init+0x2c>

080494d0 <strncmp@plt>:
 80494d0:	ff 25 10 b2 06 08    	jmp    *0x806b210
 80494d6:	68 f0 01 00 00       	push   $0x1f0
 80494db:	e9 00 fc ff ff       	jmp    80490e0 <_init+0x2c>

080494e0 <abort@plt>:
 80494e0:	ff 25 14 b2 06 08    	jmp    *0x806b214
 80494e6:	68 f8 01 00 00       	push   $0x1f8
 80494eb:	e9 f0 fb ff ff       	jmp    80490e0 <_init+0x2c>

080494f0 <dcngettext@plt>:
 80494f0:	ff 25 18 b2 06 08    	jmp    *0x806b218
 80494f6:	68 00 02 00 00       	push   $0x200
 80494fb:	e9 e0 fb ff ff       	jmp    80490e0 <_init+0x2c>

08049500 <close@plt>:
 8049500:	ff 25 1c b2 06 08    	jmp    *0x806b21c
 8049506:	68 08 02 00 00       	push   $0x208
 804950b:	e9 d0 fb ff ff       	jmp    80490e0 <_init+0x2c>

08049510 <__ctype_tolower_loc@plt>:
 8049510:	ff 25 20 b2 06 08    	jmp    *0x806b220
 8049516:	68 10 02 00 00       	push   $0x210
 804951b:	e9 c0 fb ff ff       	jmp    80490e0 <_init+0x2c>

08049520 <__ctype_b_loc@plt>:
 8049520:	ff 25 24 b2 06 08    	jmp    *0x806b224
 8049526:	68 18 02 00 00       	push   $0x218
 804952b:	e9 b0 fb ff ff       	jmp    80490e0 <_init+0x2c>

08049530 <calloc@plt>:
 8049530:	ff 25 28 b2 06 08    	jmp    *0x806b228
 8049536:	68 20 02 00 00       	push   $0x220
 804953b:	e9 a0 fb ff ff       	jmp    80490e0 <_init+0x2c>

Disassembly of section .text:

08049540 <main>:

}

int
main (int argc, char **argv)
{
 8049540:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049544:	89 3c 24             	mov    %edi,(%esp)
 8049547:	89 54 24 04          	mov    %edx,0x4(%esp)
 804954b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804954f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049553:	b9 be 02 00 00       	mov    $0x2be,%ecx
 8049558:	e8 fb f1 00 00       	call   8058758 <__afl_maybe_log>
 804955d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049561:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049565:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049569:	8b 3c 24             	mov    (%esp),%edi
 804956c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049570:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8049574:	83 e4 f0             	and    $0xfffffff0,%esp
 8049577:	ff 71 fc             	pushl  -0x4(%ecx)
 804957a:	55                   	push   %ebp
 804957b:	89 e5                	mov    %esp,%ebp
 804957d:	57                   	push   %edi
 804957e:	56                   	push   %esi
 804957f:	53                   	push   %ebx
 8049580:	51                   	push   %ecx
 8049581:	81 ec c4 00 00 00    	sub    $0xc4,%esp
 8049587:	8b 51 04             	mov    0x4(%ecx),%edx
 804958a:	8b 01                	mov    (%ecx),%eax
  int binary = -1;
  bool prefix_tag = false;

  /* Setting values of global variables.  */
  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
 804958c:	ff 32                	pushl  (%edx)

}

int
main (int argc, char **argv)
{
 804958e:	89 45 94             	mov    %eax,-0x6c(%ebp)
 8049591:	89 55 90             	mov    %edx,-0x70(%ebp)
  int binary = -1;
  bool prefix_tag = false;

  /* Setting values of global variables.  */
  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
 8049594:	e8 a7 25 01 00       	call   805bb40 <set_program_name>
  setlocale (LC_ALL, "");
 8049599:	58                   	pop    %eax
 804959a:	5a                   	pop    %edx
 804959b:	68 bd 80 06 08       	push   $0x80680bd
 80495a0:	6a 06                	push   $0x6
 80495a2:	e8 a9 fe ff ff       	call   8049450 <setlocale@plt>
  bindtextdomain (PACKAGE, LOCALEDIR);
 80495a7:	59                   	pop    %ecx
 80495a8:	5b                   	pop    %ebx
 80495a9:	68 7e 71 06 08       	push   $0x806717e
 80495ae:	68 70 71 06 08       	push   $0x8067170
 80495b3:	e8 f8 fe ff ff       	call   80494b0 <bindtextdomain@plt>
  textdomain (PACKAGE);
 80495b8:	c7 04 24 70 71 06 08 	movl   $0x8067170,(%esp)
 80495bf:	e8 2c fc ff ff       	call   80491f0 <textdomain@plt>

  atexit (close_stdout);
 80495c4:	c7 04 24 20 89 05 08 	movl   $0x8058920,(%esp)
 80495cb:	e8 80 da 01 00       	call   8067050 <atexit>
  
// ABS Label 437
if(stdout < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 437);
}
setvbuf (stdout, NULL, _IOLBF, 0);
 80495d0:	6a 00                	push   $0x0
 80495d2:	6a 01                	push   $0x1
 80495d4:	6a 00                	push   $0x0
 80495d6:	ff 35 d8 b2 06 08    	pushl  0x806b2d8
 80495dc:	e8 cf fd ff ff       	call   80493b0 <setvbuf@plt>
 80495e1:	83 c4 20             	add    $0x20,%esp
  unsigned char *bin_buffer = ptr_align (bin_buffer_unaligned, DIGEST_ALIGN);
  bool do_check = false;
  int opt;
  bool ok = true;
  int binary = -1;
  bool prefix_tag = false;
 80495e4:	c6 85 7e ff ff ff 00 	movb   $0x0,-0x82(%ebp)
  /* Make sure bin_buffer is properly aligned. */
  unsigned char *bin_buffer = ptr_align (bin_buffer_unaligned, DIGEST_ALIGN);
  bool do_check = false;
  int opt;
  bool ok = true;
  int binary = -1;
 80495eb:	c7 85 74 ff ff ff ff 	movl   $0xffffffff,-0x8c(%ebp)
 80495f2:	ff ff ff 
main (int argc, char **argv)
{
  unsigned char bin_buffer_unaligned[DIGEST_BIN_BYTES + DIGEST_ALIGN];
  /* Make sure bin_buffer is properly aligned. */
  unsigned char *bin_buffer = ptr_align (bin_buffer_unaligned, DIGEST_ALIGN);
  bool do_check = false;
 80495f5:	c6 85 7f ff ff ff 00 	movb   $0x0,-0x81(%ebp)
setvbuf (stdout, NULL, _IOLBF, 0);

  while (1)
    {
        {
            int temp_1 = !((opt = getopt_long(argc, argv, "bctw", long_options, ((void *)0))) != -1);
 80495fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049600:	89 3c 24             	mov    %edi,(%esp)
 8049603:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049607:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804960b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804960f:	b9 dd 69 00 00       	mov    $0x69dd,%ecx
 8049614:	e8 3f f1 00 00       	call   8058758 <__afl_maybe_log>
 8049619:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804961d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049621:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049625:	8b 3c 24             	mov    (%esp),%edi
 8049628:	8d 64 24 10          	lea    0x10(%esp),%esp
 804962c:	83 ec 0c             	sub    $0xc,%esp
 804962f:	6a 00                	push   $0x0
 8049631:	68 80 7b 06 08       	push   $0x8067b80
 8049636:	68 96 71 06 08       	push   $0x8067196
 804963b:	ff 75 90             	pushl  -0x70(%ebp)
 804963e:	ff 75 94             	pushl  -0x6c(%ebp)
 8049641:	e8 ea fc ff ff       	call   8049330 <getopt_long@plt>
            
// ABS Label 438
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 438);
}
if (temp_1)
 8049646:	83 c4 20             	add    $0x20,%esp
 8049649:	83 f8 ff             	cmp    $0xffffffff,%eax
 804964c:	0f 84 ad 05 00 00    	je     8049bff <main+0x6bf>
 8049652:	66 90                	xchg   %ax,%ax
 8049654:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049658:	89 3c 24             	mov    %edi,(%esp)
 804965b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804965f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049663:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049667:	b9 1e 79 00 00       	mov    $0x791e,%ecx
 804966c:	e8 e7 f0 00 00       	call   8058758 <__afl_maybe_log>
 8049671:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049675:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049679:	8b 54 24 04          	mov    0x4(%esp),%edx
 804967d:	8b 3c 24             	mov    (%esp),%edi
 8049680:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        switch (opt) {
 8049684:	83 f8 74             	cmp    $0x74,%eax
 8049687:	0f 84 31 05 00 00    	je     8049bbe <main+0x67e>
 804968d:	8d 76 00             	lea    0x0(%esi),%esi
 8049690:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049694:	89 3c 24             	mov    %edi,(%esp)
 8049697:	89 54 24 04          	mov    %edx,0x4(%esp)
 804969b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804969f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80496a3:	b9 fd b2 00 00       	mov    $0xb2fd,%ecx
 80496a8:	e8 ab f0 00 00       	call   8058758 <__afl_maybe_log>
 80496ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80496b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80496b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80496b9:	8b 3c 24             	mov    (%esp),%edi
 80496bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80496c0:	0f 8e 3a 01 00 00    	jle    8049800 <main+0x2c0>
 80496c6:	66 90                	xchg   %ax,%ax
 80496c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80496cc:	89 3c 24             	mov    %edi,(%esp)
 80496cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80496d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80496d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80496db:	b9 02 ea 00 00       	mov    $0xea02,%ecx
 80496e0:	e8 73 f0 00 00       	call   8058758 <__afl_maybe_log>
 80496e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80496e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80496ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80496f1:	8b 3c 24             	mov    (%esp),%edi
 80496f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80496f8:	3d 81 00 00 00       	cmp    $0x81,%eax
 80496fd:	0f 84 f7 03 00 00    	je     8049afa <main+0x5ba>
 8049703:	90                   	nop
 8049704:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049708:	89 3c 24             	mov    %edi,(%esp)
 804970b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804970f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049713:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049717:	b9 8e e0 00 00       	mov    $0xe08e,%ecx
 804971c:	e8 37 f0 00 00       	call   8058758 <__afl_maybe_log>
 8049721:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049725:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049729:	8b 54 24 04          	mov    0x4(%esp),%edx
 804972d:	8b 3c 24             	mov    (%esp),%edi
 8049730:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049734:	0f 8f c6 01 00 00    	jg     8049900 <main+0x3c0>
 804973a:	66 90                	xchg   %ax,%ax
 804973c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049740:	89 3c 24             	mov    %edi,(%esp)
 8049743:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049747:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804974b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804974f:	b9 70 dd 00 00       	mov    $0xdd70,%ecx
 8049754:	e8 ff ef 00 00       	call   8058758 <__afl_maybe_log>
 8049759:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804975d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049761:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049765:	8b 3c 24             	mov    (%esp),%edi
 8049768:	8d 64 24 10          	lea    0x10(%esp),%esp
 804976c:	83 f8 77             	cmp    $0x77,%eax
 804976f:	0f 84 96 02 00 00    	je     8049a0b <main+0x4cb>
 8049775:	8d 76 00             	lea    0x0(%esi),%esi
 8049778:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804977c:	89 3c 24             	mov    %edi,(%esp)
 804977f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049783:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049787:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804978b:	b9 9b 59 00 00       	mov    $0x599b,%ecx
 8049790:	e8 c3 ef 00 00       	call   8058758 <__afl_maybe_log>
 8049795:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049799:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804979d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80497a1:	8b 3c 24             	mov    (%esp),%edi
 80497a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80497a8:	83 c0 80             	add    $0xffffff80,%eax
 80497ab:	0f 85 d1 03 00 00    	jne    8049b82 <main+0x642>
 80497b1:	8d 76 00             	lea    0x0(%esi),%esi
 80497b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80497b8:	89 3c 24             	mov    %edi,(%esp)
 80497bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80497bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80497c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80497c7:	b9 d7 a8 00 00       	mov    $0xa8d7,%ecx
 80497cc:	e8 87 ef 00 00       	call   8058758 <__afl_maybe_log>
 80497d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80497d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80497d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80497dd:	8b 3c 24             	mov    (%esp),%edi
 80497e0:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
          case 'c':
            do_check = 1;
            break;
          case STATUS_OPTION:
            status_only = 1;
 80497e4:	c6 05 03 b3 06 08 01 	movb   $0x1,0x806b303
            warn = 0;
 80497eb:	c6 05 02 b3 06 08 00 	movb   $0x0,0x806b302
            quiet = 0;
 80497f2:	c6 05 01 b3 06 08 00 	movb   $0x0,0x806b301
            break;
 80497f9:	e9 fe fd ff ff       	jmp    80495fc <main+0xbc>
 80497fe:	66 90                	xchg   %ax,%ax
	report_label_coverage("ABS", 438);
}
if (temp_1)
                break;
        }
        switch (opt) {
 8049800:	3d 7e ff ff ff       	cmp    $0xffffff7e,%eax
 8049805:	0f 84 3b 03 00 00    	je     8049b46 <main+0x606>
 804980b:	90                   	nop
 804980c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049810:	89 3c 24             	mov    %edi,(%esp)
 8049813:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049817:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804981b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804981f:	b9 18 a4 00 00       	mov    $0xa418,%ecx
 8049824:	e8 2f ef 00 00       	call   8058758 <__afl_maybe_log>
 8049829:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804982d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049831:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049835:	8b 3c 24             	mov    (%esp),%edi
 8049838:	8d 64 24 10          	lea    0x10(%esp),%esp
 804983c:	0f 8e 14 02 00 00    	jle    8049a56 <main+0x516>
 8049842:	66 90                	xchg   %ax,%ax
 8049844:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049848:	89 3c 24             	mov    %edi,(%esp)
 804984b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804984f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049853:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049857:	b9 67 e2 00 00       	mov    $0xe267,%ecx
 804985c:	e8 f7 ee 00 00       	call   8058758 <__afl_maybe_log>
 8049861:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049865:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049869:	8b 54 24 04          	mov    0x4(%esp),%edx
 804986d:	8b 3c 24             	mov    (%esp),%edi
 8049870:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049874:	83 f8 62             	cmp    $0x62,%eax
 8049877:	0f 84 4f 01 00 00    	je     80499cc <main+0x48c>
 804987d:	8d 76 00             	lea    0x0(%esi),%esi
 8049880:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049884:	89 3c 24             	mov    %edi,(%esp)
 8049887:	89 54 24 04          	mov    %edx,0x4(%esp)
 804988b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804988f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049893:	b9 78 1a 00 00       	mov    $0x1a78,%ecx
 8049898:	e8 bb ee 00 00       	call   8058758 <__afl_maybe_log>
 804989d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80498a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80498a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80498a9:	8b 3c 24             	mov    (%esp),%edi
 80498ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80498b0:	83 f8 63             	cmp    $0x63,%eax
 80498b3:	0f 85 c9 02 00 00    	jne    8049b82 <main+0x642>
 80498b9:	8d 76 00             	lea    0x0(%esi),%esi
 80498bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80498c0:	89 3c 24             	mov    %edi,(%esp)
 80498c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80498c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80498cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80498cf:	b9 0c 67 00 00       	mov    $0x670c,%ecx
 80498d4:	e8 7f ee 00 00       	call   8058758 <__afl_maybe_log>
 80498d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80498dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80498e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80498e5:	8b 3c 24             	mov    (%esp),%edi
 80498e8:	8d 64 24 10          	lea    0x10(%esp),%esp
          case 'b':
            binary = 1;
            break;
          case 'c':
            do_check = 1;
 80498ec:	c6 85 7f ff ff ff 01 	movb   $0x1,-0x81(%ebp)
 80498f3:	e9 04 fd ff ff       	jmp    80495fc <main+0xbc>
 80498f8:	90                   	nop
 80498f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	report_label_coverage("ABS", 438);
}
if (temp_1)
                break;
        }
        switch (opt) {
 8049900:	3d 82 00 00 00       	cmp    $0x82,%eax
 8049905:	0f 84 83 00 00 00    	je     804998e <main+0x44e>
 804990b:	90                   	nop
 804990c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049910:	89 3c 24             	mov    %edi,(%esp)
 8049913:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804991b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804991f:	b9 8b 91 00 00       	mov    $0x918b,%ecx
 8049924:	e8 2f ee 00 00       	call   8058758 <__afl_maybe_log>
 8049929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804992d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049931:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049935:	8b 3c 24             	mov    (%esp),%edi
 8049938:	8d 64 24 10          	lea    0x10(%esp),%esp
 804993c:	3d 83 00 00 00       	cmp    $0x83,%eax
 8049941:	0f 85 3b 02 00 00    	jne    8049b82 <main+0x642>
 8049947:	90                   	nop
 8049948:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804994c:	89 3c 24             	mov    %edi,(%esp)
 804994f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049953:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049957:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804995b:	b9 f5 0c 00 00       	mov    $0xcf5,%ecx
 8049960:	e8 f3 ed 00 00       	call   8058758 <__afl_maybe_log>
 8049965:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049969:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804996d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049971:	8b 3c 24             	mov    (%esp),%edi
 8049974:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
          case STRICT_OPTION:
            strict = 1;
            break;
          case TAG_OPTION:
            prefix_tag = 1;
 8049978:	c6 85 7e ff ff ff 01 	movb   $0x1,-0x82(%ebp)
            binary = 1;
 804997f:	c7 85 74 ff ff ff 01 	movl   $0x1,-0x8c(%ebp)
 8049986:	00 00 00 
            break;
 8049989:	e9 6e fc ff ff       	jmp    80495fc <main+0xbc>
 804998e:	66 90                	xchg   %ax,%ax
            status_only = 0;
            warn = 0;
            quiet = 1;
            break;
          case STRICT_OPTION:
            strict = 1;
 8049990:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049994:	89 3c 24             	mov    %edi,(%esp)
 8049997:	89 54 24 04          	mov    %edx,0x4(%esp)
 804999b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804999f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80499a3:	b9 b8 0a 00 00       	mov    $0xab8,%ecx
 80499a8:	e8 ab ed 00 00       	call   8058758 <__afl_maybe_log>
 80499ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80499b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80499b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80499b9:	8b 3c 24             	mov    (%esp),%edi
 80499bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80499c0:	c6 05 00 b3 06 08 01 	movb   $0x1,0x806b300
            break;
 80499c7:	e9 30 fc ff ff       	jmp    80495fc <main+0xbc>
if (temp_1)
                break;
        }
        switch (opt) {
          case 'b':
            binary = 1;
 80499cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80499d0:	89 3c 24             	mov    %edi,(%esp)
 80499d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80499d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80499db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80499df:	b9 8e 21 00 00       	mov    $0x218e,%ecx
 80499e4:	e8 6f ed 00 00       	call   8058758 <__afl_maybe_log>
 80499e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80499ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80499f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80499f5:	8b 3c 24             	mov    (%esp),%edi
 80499f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80499fc:	c7 85 74 ff ff ff 01 	movl   $0x1,-0x8c(%ebp)
 8049a03:	00 00 00 
 8049a06:	e9 f1 fb ff ff       	jmp    80495fc <main+0xbc>
 8049a0b:	90                   	nop
            break;
          case 't':
            binary = 0;
            break;
          case 'w':
            status_only = 0;
 8049a0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049a10:	89 3c 24             	mov    %edi,(%esp)
 8049a13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049a17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049a1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049a1f:	b9 b2 e1 00 00       	mov    $0xe1b2,%ecx
 8049a24:	e8 2f ed 00 00       	call   8058758 <__afl_maybe_log>
 8049a29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049a2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049a31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049a35:	8b 3c 24             	mov    (%esp),%edi
 8049a38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049a3c:	c6 05 03 b3 06 08 00 	movb   $0x0,0x806b303
            warn = 1;
 8049a43:	c6 05 02 b3 06 08 01 	movb   $0x1,0x806b302
            quiet = 0;
 8049a4a:	c6 05 01 b3 06 08 00 	movb   $0x0,0x806b301
            break;
 8049a51:	e9 a6 fb ff ff       	jmp    80495fc <main+0xbc>
 8049a56:	66 90                	xchg   %ax,%ax
	report_label_coverage("ABS", 438);
}
if (temp_1)
                break;
        }
        switch (opt) {
 8049a58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049a5c:	89 3c 24             	mov    %edi,(%esp)
 8049a5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049a63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049a67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049a6b:	b9 f3 ff 00 00       	mov    $0xfff3,%ecx
 8049a70:	e8 e3 ec 00 00       	call   8058758 <__afl_maybe_log>
 8049a75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049a79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049a7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049a81:	8b 3c 24             	mov    (%esp),%edi
 8049a84:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049a88:	3d 7d ff ff ff       	cmp    $0xffffff7d,%eax
 8049a8d:	0f 85 ef 00 00 00    	jne    8049b82 <main+0x642>
 8049a93:	90                   	nop
 8049a94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049a98:	89 3c 24             	mov    %edi,(%esp)
 8049a9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049a9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049aa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049aa7:	b9 62 37 00 00       	mov    $0x3762,%ecx
 8049aac:	e8 a7 ec 00 00       	call   8058758 <__afl_maybe_log>
 8049ab1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ab5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ab9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049abd:	8b 3c 24             	mov    (%esp),%edi
 8049ac0:	8d 64 24 10          	lea    0x10(%esp),%esp
          case TAG_OPTION:
            prefix_tag = 1;
            binary = 1;
            break;
          case_GETOPT_HELP_CHAR;
      	  case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
 8049ac4:	6a 00                	push   $0x0
 8049ac6:	68 9b 71 06 08       	push   $0x806719b
 8049acb:	68 a8 71 06 08       	push   $0x80671a8
 8049ad0:	68 b5 71 06 08       	push   $0x80671b5
 8049ad5:	ff 35 4c b2 06 08    	pushl  0x806b24c
 8049adb:	68 6c 71 06 08       	push   $0x806716c
 8049ae0:	68 e4 70 06 08       	push   $0x80670e4
 8049ae5:	ff 35 d8 b2 06 08    	pushl  0x806b2d8
 8049aeb:	e8 90 95 01 00       	call   8063080 <version_etc>
 8049af0:	83 c4 14             	add    $0x14,%esp
 8049af3:	6a 00                	push   $0x0
 8049af5:	e8 06 f8 ff ff       	call   8049300 <exit@plt>
 8049afa:	66 90                	xchg   %ax,%ax
            status_only = 0;
            warn = 1;
            quiet = 0;
            break;
          case QUIET_OPTION:
            status_only = 0;
 8049afc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049b00:	89 3c 24             	mov    %edi,(%esp)
 8049b03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049b07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049b0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049b0f:	b9 73 c1 00 00       	mov    $0xc173,%ecx
 8049b14:	e8 3f ec 00 00       	call   8058758 <__afl_maybe_log>
 8049b19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049b1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049b21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049b25:	8b 3c 24             	mov    (%esp),%edi
 8049b28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049b2c:	c6 05 03 b3 06 08 00 	movb   $0x0,0x806b303
            warn = 0;
 8049b33:	c6 05 02 b3 06 08 00 	movb   $0x0,0x806b302
            quiet = 1;
 8049b3a:	c6 05 01 b3 06 08 01 	movb   $0x1,0x806b301
            break;
 8049b41:	e9 b6 fa ff ff       	jmp    80495fc <main+0xbc>
 8049b46:	66 90                	xchg   %ax,%ax
            break;
          case TAG_OPTION:
            prefix_tag = 1;
            binary = 1;
            break;
          case_GETOPT_HELP_CHAR;
 8049b48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049b4c:	89 3c 24             	mov    %edi,(%esp)
 8049b4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049b53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049b57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049b5b:	b9 32 c4 00 00       	mov    $0xc432,%ecx
 8049b60:	e8 f3 eb 00 00       	call   8058758 <__afl_maybe_log>
 8049b65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049b69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049b6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049b71:	8b 3c 24             	mov    (%esp),%edi
 8049b74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049b78:	83 ec 0c             	sub    $0xc,%esp
 8049b7b:	6a 00                	push   $0x0
 8049b7d:	e8 4e e2 00 00       	call   8057dd0 <usage>
 8049b82:	66 90                	xchg   %ax,%ax
      	  case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
          default:
            usage(1);
 8049b84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049b88:	89 3c 24             	mov    %edi,(%esp)
 8049b8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049b8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049b93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049b97:	b9 e5 fa 00 00       	mov    $0xfae5,%ecx
 8049b9c:	e8 b7 eb 00 00       	call   8058758 <__afl_maybe_log>
 8049ba1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ba5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ba9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049bad:	8b 3c 24             	mov    (%esp),%edi
 8049bb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049bb4:	83 ec 0c             	sub    $0xc,%esp
 8049bb7:	6a 01                	push   $0x1
 8049bb9:	e8 12 e2 00 00       	call   8057dd0 <usage>
 8049bbe:	66 90                	xchg   %ax,%ax
            status_only = 1;
            warn = 0;
            quiet = 0;
            break;
          case 't':
            binary = 0;
 8049bc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049bc4:	89 3c 24             	mov    %edi,(%esp)
 8049bc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049bcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049bcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049bd3:	b9 ae b4 00 00       	mov    $0xb4ae,%ecx
 8049bd8:	e8 7b eb 00 00       	call   8058758 <__afl_maybe_log>
 8049bdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049be1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049be5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049be9:	8b 3c 24             	mov    (%esp),%edi
 8049bec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049bf0:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%ebp)
 8049bf7:	00 00 00 
            break;
 8049bfa:	e9 fd f9 ff ff       	jmp    80495fc <main+0xbc>
 8049bff:	90                   	nop
  min_digest_line_length = MIN_DIGEST_LINE_LENGTH;
  digest_hex_bytes = DIGEST_HEX_BYTES;

  
// COR Label 439
if((prefix_tag || !binary) != (prefix_tag && !binary))  {asm volatile (""::: "memory");
 8049c00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049c04:	89 3c 24             	mov    %edi,(%esp)
 8049c07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049c0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049c0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049c13:	b9 22 11 00 00       	mov    $0x1122,%ecx
 8049c18:	e8 3b eb 00 00       	call   8058758 <__afl_maybe_log>
 8049c1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049c21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049c25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049c29:	8b 3c 24             	mov    (%esp),%edi
 8049c2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049c30:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%ebp)
 8049c37:	0f b6 8d 7e ff ff ff 	movzbl -0x82(%ebp),%ecx
            usage(1);
        }
    };


  min_digest_line_length = MIN_DIGEST_LINE_LENGTH;
 8049c3e:	c7 05 08 b3 06 08 22 	movl   $0x22,0x806b308
 8049c45:	00 00 00 
  digest_hex_bytes = DIGEST_HEX_BYTES;
 8049c48:	c7 05 04 b3 06 08 20 	movl   $0x20,0x806b304
 8049c4f:	00 00 00 

  
// COR Label 439
if((prefix_tag || !binary) != (prefix_tag && !binary))  {asm volatile (""::: "memory");
 8049c52:	0f 94 c3             	sete   %bl
 8049c55:	89 de                	mov    %ebx,%esi
 8049c57:	89 cb                	mov    %ecx,%ebx
 8049c59:	21 f3                	and    %esi,%ebx
 8049c5b:	09 f1                	or     %esi,%ecx
 8049c5d:	38 d9                	cmp    %bl,%cl
 8049c5f:	74 47                	je     8049ca8 <main+0x768>
 8049c61:	8d 76 00             	lea    0x0(%esi),%esi
 8049c64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049c68:	89 3c 24             	mov    %edi,(%esp)
 8049c6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049c6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049c73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049c77:	b9 91 2c 00 00       	mov    $0x2c91,%ecx
 8049c7c:	e8 d7 ea 00 00       	call   8058758 <__afl_maybe_log>
 8049c81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049c85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049c89:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049c8d:	8b 3c 24             	mov    (%esp),%edi
 8049c90:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 439);
 8049c94:	50                   	push   %eax
 8049c95:	50                   	push   %eax
 8049c96:	68 b7 01 00 00       	push   $0x1b7
 8049c9b:	68 da 70 06 08       	push   $0x80670da
 8049ca0:	e8 1b c4 00 00       	call   80560c0 <report_label_coverage>
 8049ca5:	83 c4 10             	add    $0x10,%esp
}

// MCC Label 440
if(prefix_tag && !binary ) {asm volatile (""::: "memory");
 8049ca8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049cac:	89 3c 24             	mov    %edi,(%esp)
 8049caf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049cb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049cb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049cbb:	b9 4b 46 00 00       	mov    $0x464b,%ecx
 8049cc0:	e8 93 ea 00 00       	call   8058758 <__afl_maybe_log>
 8049cc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049cc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ccd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049cd1:	8b 3c 24             	mov    (%esp),%edi
 8049cd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049cd8:	84 db                	test   %bl,%bl
 8049cda:	0f 85 15 b0 00 00    	jne    8054cf5 <main+0xb7b5>
 8049ce0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ce4:	89 3c 24             	mov    %edi,(%esp)
 8049ce7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049ceb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049cef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049cf3:	b9 ec e0 00 00       	mov    $0xe0ec,%ecx
 8049cf8:	e8 5b ea 00 00       	call   8058758 <__afl_maybe_log>
 8049cfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049d01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049d05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049d09:	8b 3c 24             	mov    (%esp),%edi
 8049d0c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 440);
}
// MCC Label 441
if(prefix_tag && !(!binary) ) {asm volatile (""::: "memory");
 8049d10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049d14:	89 3c 24             	mov    %edi,(%esp)
 8049d17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049d1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049d1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049d23:	b9 c5 8c 00 00       	mov    $0x8cc5,%ecx
 8049d28:	e8 2b ea 00 00       	call   8058758 <__afl_maybe_log>
 8049d2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049d31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049d35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049d39:	8b 3c 24             	mov    (%esp),%edi
 8049d3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049d40:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%ebp)
 8049d47:	0f 95 c0             	setne  %al
 8049d4a:	74 70                	je     8049dbc <main+0x87c>
 8049d4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049d50:	89 3c 24             	mov    %edi,(%esp)
 8049d53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049d57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049d5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049d5f:	b9 4a 69 00 00       	mov    $0x694a,%ecx
 8049d64:	e8 ef e9 00 00       	call   8058758 <__afl_maybe_log>
 8049d69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049d6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049d71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049d75:	8b 3c 24             	mov    (%esp),%edi
 8049d78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049d7c:	80 bd 7e ff ff ff 00 	cmpb   $0x0,-0x82(%ebp)
 8049d83:	0f 85 08 27 00 00    	jne    804c491 <main+0x2f51>
 8049d89:	8d 76 00             	lea    0x0(%esi),%esi
 8049d8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049d90:	89 3c 24             	mov    %edi,(%esp)
 8049d93:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049d97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049d9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049d9f:	b9 c0 06 00 00       	mov    $0x6c0,%ecx
 8049da4:	e8 af e9 00 00       	call   8058758 <__afl_maybe_log>
 8049da9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049dad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049db1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049db5:	8b 3c 24             	mov    (%esp),%edi
 8049db8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 441);
}
// MCC Label 442
if(!(prefix_tag) && !binary ) {asm volatile (""::: "memory");
 8049dbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049dc0:	89 3c 24             	mov    %edi,(%esp)
 8049dc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049dc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049dcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049dcf:	b9 8d 10 00 00       	mov    $0x108d,%ecx
 8049dd4:	e8 7f e9 00 00       	call   8058758 <__afl_maybe_log>
 8049dd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ddd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049de1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049de5:	8b 3c 24             	mov    (%esp),%edi
 8049de8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049dec:	89 f2                	mov    %esi,%edx
 8049dee:	3a 95 7e ff ff ff    	cmp    -0x82(%ebp),%dl
 8049df4:	0f 87 2f 27 00 00    	ja     804c529 <main+0x2fe9>
 8049dfa:	66 90                	xchg   %ax,%ax
 8049dfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049e00:	89 3c 24             	mov    %edi,(%esp)
 8049e03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049e07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049e0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049e0f:	b9 da f7 00 00       	mov    $0xf7da,%ecx
 8049e14:	e8 3f e9 00 00       	call   8058758 <__afl_maybe_log>
 8049e19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049e1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049e21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049e25:	8b 3c 24             	mov    (%esp),%edi
 8049e28:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 442);
}
// MCC Label 443
if(!(prefix_tag) && !(!binary) ) {asm volatile (""::: "memory");
 8049e2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049e30:	89 3c 24             	mov    %edi,(%esp)
 8049e33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049e37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049e3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049e3f:	b9 da fc 00 00       	mov    $0xfcda,%ecx
 8049e44:	e8 0f e9 00 00       	call   8058758 <__afl_maybe_log>
 8049e49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049e4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049e51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049e55:	8b 3c 24             	mov    (%esp),%edi
 8049e58:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049e5c:	3a 85 7e ff ff ff    	cmp    -0x82(%ebp),%al
 8049e62:	0f 87 75 26 00 00    	ja     804c4dd <main+0x2f9d>
 8049e68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049e6c:	89 3c 24             	mov    %edi,(%esp)
 8049e6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049e73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049e77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049e7b:	b9 f3 bd 00 00       	mov    $0xbdf3,%ecx
 8049e80:	e8 d3 e8 00 00       	call   8058758 <__afl_maybe_log>
 8049e85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049e89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049e8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049e91:	8b 3c 24             	mov    (%esp),%edi
 8049e94:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 443);
}
if (prefix_tag && !binary)
 8049e98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049e9c:	89 3c 24             	mov    %edi,(%esp)
 8049e9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049ea3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049ea7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049eab:	b9 4f d8 00 00       	mov    $0xd84f,%ecx
 8049eb0:	e8 a3 e8 00 00       	call   8058758 <__afl_maybe_log>
 8049eb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049eb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ebd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049ec1:	8b 3c 24             	mov    (%esp),%edi
 8049ec4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049ec8:	84 db                	test   %bl,%bl
 8049eca:	0f 85 75 c0 00 00    	jne    8055f45 <main+0xca05>
 8049ed0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ed4:	89 3c 24             	mov    %edi,(%esp)
 8049ed7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049edb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049edf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049ee3:	b9 0f 49 00 00       	mov    $0x490f,%ecx
 8049ee8:	e8 6b e8 00 00       	call   8058758 <__afl_maybe_log>
 8049eed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ef1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ef5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049ef9:	8b 3c 24             	mov    (%esp),%edi
 8049efc:	8d 64 24 10          	lea    0x10(%esp),%esp
     usage (EXIT_FAILURE);
   }

  
// COR Label 444
if((prefix_tag || do_check) != (prefix_tag && do_check))  {asm volatile (""::: "memory");
 8049f00:	0f b6 95 7f ff ff ff 	movzbl -0x81(%ebp),%edx
 8049f07:	0f b6 8d 7e ff ff ff 	movzbl -0x82(%ebp),%ecx
 8049f0e:	89 d3                	mov    %edx,%ebx
 8049f10:	09 ca                	or     %ecx,%edx
 8049f12:	21 cb                	and    %ecx,%ebx
 8049f14:	38 da                	cmp    %bl,%dl
 8049f16:	74 44                	je     8049f5c <main+0xa1c>
 8049f18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049f1c:	89 3c 24             	mov    %edi,(%esp)
 8049f1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049f23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049f27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049f2b:	b9 76 9a 00 00       	mov    $0x9a76,%ecx
 8049f30:	e8 23 e8 00 00       	call   8058758 <__afl_maybe_log>
 8049f35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049f39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049f3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f41:	8b 3c 24             	mov    (%esp),%edi
 8049f44:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 444);
 8049f48:	51                   	push   %ecx
 8049f49:	51                   	push   %ecx
 8049f4a:	68 bc 01 00 00       	push   $0x1bc
 8049f4f:	68 da 70 06 08       	push   $0x80670da
 8049f54:	e8 67 c1 00 00       	call   80560c0 <report_label_coverage>
 8049f59:	83 c4 10             	add    $0x10,%esp
}

// MCC Label 445
if(prefix_tag && do_check ) {asm volatile (""::: "memory");
 8049f5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049f60:	89 3c 24             	mov    %edi,(%esp)
 8049f63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049f67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049f6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049f6f:	b9 8b 09 00 00       	mov    $0x98b,%ecx
 8049f74:	e8 df e7 00 00       	call   8058758 <__afl_maybe_log>
 8049f79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049f7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049f81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f85:	8b 3c 24             	mov    (%esp),%edi
 8049f88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049f8c:	84 db                	test   %bl,%bl
 8049f8e:	0f 85 15 ad 00 00    	jne    8054ca9 <main+0xb769>
 8049f94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049f98:	89 3c 24             	mov    %edi,(%esp)
 8049f9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049f9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049fa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049fa7:	b9 1e 8e 00 00       	mov    $0x8e1e,%ecx
 8049fac:	e8 a7 e7 00 00       	call   8058758 <__afl_maybe_log>
 8049fb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049fb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049fb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049fbd:	8b 3c 24             	mov    (%esp),%edi
 8049fc0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 445);
}
// MCC Label 446
if(prefix_tag && !(do_check) ) {asm volatile (""::: "memory");
 8049fc4:	0f b6 85 7f ff ff ff 	movzbl -0x81(%ebp),%eax
 8049fcb:	38 85 7e ff ff ff    	cmp    %al,-0x82(%ebp)
 8049fd1:	0f 87 6e 24 00 00    	ja     804c445 <main+0x2f05>
 8049fd7:	90                   	nop
 8049fd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049fdc:	89 3c 24             	mov    %edi,(%esp)
 8049fdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049fe3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049fe7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049feb:	b9 f7 7a 00 00       	mov    $0x7af7,%ecx
 8049ff0:	e8 63 e7 00 00       	call   8058758 <__afl_maybe_log>
 8049ff5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ff9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ffd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a001:	8b 3c 24             	mov    (%esp),%edi
 804a004:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 446);
}
// MCC Label 447
if(!(prefix_tag) && do_check ) {asm volatile (""::: "memory");
 804a008:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a00c:	89 3c 24             	mov    %edi,(%esp)
 804a00f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a013:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a017:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a01b:	b9 8c 94 00 00       	mov    $0x948c,%ecx
 804a020:	e8 33 e7 00 00       	call   8058758 <__afl_maybe_log>
 804a025:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a029:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a02d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a031:	8b 3c 24             	mov    (%esp),%edi
 804a034:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a038:	0f b6 95 7f ff ff ff 	movzbl -0x81(%ebp),%edx
 804a03f:	38 95 7e ff ff ff    	cmp    %dl,-0x82(%ebp)
 804a045:	0f 82 ae 23 00 00    	jb     804c3f9 <main+0x2eb9>
 804a04b:	90                   	nop
 804a04c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a050:	89 3c 24             	mov    %edi,(%esp)
 804a053:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a057:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a05b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a05f:	b9 bf 65 00 00       	mov    $0x65bf,%ecx
 804a064:	e8 ef e6 00 00       	call   8058758 <__afl_maybe_log>
 804a069:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a06d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a071:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a075:	8b 3c 24             	mov    (%esp),%edi
 804a078:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 447);
}
// MCC Label 448
if(!(prefix_tag) && !(do_check) ) {asm volatile (""::: "memory");
 804a07c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a080:	89 3c 24             	mov    %edi,(%esp)
 804a083:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a087:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a08b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a08f:	b9 52 bd 00 00       	mov    $0xbd52,%ecx
 804a094:	e8 bf e6 00 00       	call   8058758 <__afl_maybe_log>
 804a099:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a09d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a0a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a0a5:	8b 3c 24             	mov    (%esp),%edi
 804a0a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a0ac:	0f b6 b5 7f ff ff ff 	movzbl -0x81(%ebp),%esi
 804a0b3:	83 f6 01             	xor    $0x1,%esi
 804a0b6:	89 f1                	mov    %esi,%ecx
 804a0b8:	3a 8d 7e ff ff ff    	cmp    -0x82(%ebp),%cl
 804a0be:	0f 87 7d ac 00 00    	ja     8054d41 <main+0xb801>
 804a0c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a0c8:	89 3c 24             	mov    %edi,(%esp)
 804a0cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a0cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a0d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a0d7:	b9 ef e7 00 00       	mov    $0xe7ef,%ecx
 804a0dc:	e8 77 e6 00 00       	call   8058758 <__afl_maybe_log>
 804a0e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a0e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a0e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a0ed:	8b 3c 24             	mov    (%esp),%edi
 804a0f0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 448);
}
if (prefix_tag && do_check)
 804a0f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a0f8:	89 3c 24             	mov    %edi,(%esp)
 804a0fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a0ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a103:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a107:	b9 3f 8c 00 00       	mov    $0x8c3f,%ecx
 804a10c:	e8 47 e6 00 00       	call   8058758 <__afl_maybe_log>
 804a111:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a115:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a119:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a11d:	8b 3c 24             	mov    (%esp),%edi
 804a120:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a124:	84 db                	test   %bl,%bl
 804a126:	0f 85 41 bd 00 00    	jne    8055e6d <main+0xc92d>
 804a12c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a130:	89 3c 24             	mov    %edi,(%esp)
 804a133:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a137:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a13b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a13f:	b9 9f 9a 00 00       	mov    $0x9a9f,%ecx
 804a144:	e8 0f e6 00 00       	call   8058758 <__afl_maybe_log>
 804a149:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a14d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a151:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a155:	8b 3c 24             	mov    (%esp),%edi
 804a158:	8d 64 24 10          	lea    0x10(%esp),%esp
      usage (EXIT_FAILURE);
    }

  
// ABS Label 449
if(binary < 0)  {asm volatile (""::: "memory");
 804a15c:	83 bd 74 ff ff ff ff 	cmpl   $0xffffffff,-0x8c(%ebp)
 804a163:	0f 84 50 b8 00 00    	je     80559b9 <main+0xc479>
 804a169:	8d 76 00             	lea    0x0(%esi),%esi
 804a16c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a170:	89 3c 24             	mov    %edi,(%esp)
 804a173:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a177:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a17b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a17f:	b9 fe 16 00 00       	mov    $0x16fe,%ecx
 804a184:	e8 cf e5 00 00       	call   8058758 <__afl_maybe_log>
 804a189:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a18d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a191:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a195:	8b 3c 24             	mov    (%esp),%edi
 804a198:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 449);
}

// COR Label 450
if((0 <= binary || do_check) != (0 <= binary && do_check))  {asm volatile (""::: "memory");
 804a19c:	80 bd 7f ff ff ff 01 	cmpb   $0x1,-0x81(%ebp)
 804a1a3:	0f 84 10 22 00 00    	je     804c3b9 <main+0x2e79>
 804a1a9:	8d 76 00             	lea    0x0(%esi),%esi
 804a1ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a1b0:	89 3c 24             	mov    %edi,(%esp)
 804a1b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a1b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a1bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a1bf:	b9 0b 8f 00 00       	mov    $0x8f0b,%ecx
 804a1c4:	e8 8f e5 00 00       	call   8058758 <__afl_maybe_log>
 804a1c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a1cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a1d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a1d5:	8b 3c 24             	mov    (%esp),%edi
 804a1d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a1dc:	c6 45 a4 01          	movb   $0x1,-0x5c(%ebp)
	report_label_coverage("COR", 450);
 804a1e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a1e4:	89 3c 24             	mov    %edi,(%esp)
 804a1e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a1eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a1ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a1f3:	b9 47 8a 00 00       	mov    $0x8a47,%ecx
 804a1f8:	e8 5b e5 00 00       	call   8058758 <__afl_maybe_log>
 804a1fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a201:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a205:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a209:	8b 3c 24             	mov    (%esp),%edi
 804a20c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a210:	50                   	push   %eax
 804a211:	50                   	push   %eax
 804a212:	68 c2 01 00 00       	push   $0x1c2
 804a217:	68 da 70 06 08       	push   $0x80670da
 804a21c:	e8 9f be 00 00       	call   80560c0 <report_label_coverage>
 804a221:	83 c4 10             	add    $0x10,%esp
 804a224:	c6 45 9c 00          	movb   $0x0,-0x64(%ebp)
}

// ROR Label 451
if((0 < binary) != (0 <= binary))  {asm volatile (""::: "memory");
 804a228:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a22c:	89 3c 24             	mov    %edi,(%esp)
 804a22f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a233:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a237:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a23b:	b9 15 48 00 00       	mov    $0x4815,%ecx
 804a240:	e8 13 e5 00 00       	call   8058758 <__afl_maybe_log>
 804a245:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a249:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a24d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a251:	8b 3c 24             	mov    (%esp),%edi
 804a254:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a258:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%ebp)
 804a25f:	0f 9f c3             	setg   %bl
 804a262:	38 5d a4             	cmp    %bl,-0x5c(%ebp)
 804a265:	74 45                	je     804a2ac <main+0xd6c>
 804a267:	90                   	nop
 804a268:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a26c:	89 3c 24             	mov    %edi,(%esp)
 804a26f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a273:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a277:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a27b:	b9 65 cc 00 00       	mov    $0xcc65,%ecx
 804a280:	e8 d3 e4 00 00       	call   8058758 <__afl_maybe_log>
 804a285:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a289:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a28d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a291:	8b 3c 24             	mov    (%esp),%edi
 804a294:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 451);
 804a298:	57                   	push   %edi
 804a299:	57                   	push   %edi
 804a29a:	68 c3 01 00 00       	push   $0x1c3
 804a29f:	68 c8 70 06 08       	push   $0x80670c8
 804a2a4:	e8 17 be 00 00       	call   80560c0 <report_label_coverage>
 804a2a9:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 452
if((0 > binary) != (0 <= binary))  {asm volatile (""::: "memory");
 804a2ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a2b0:	89 3c 24             	mov    %edi,(%esp)
 804a2b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a2b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a2bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a2bf:	b9 18 ff 00 00       	mov    $0xff18,%ecx
 804a2c4:	e8 8f e4 00 00       	call   8058758 <__afl_maybe_log>
 804a2c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a2cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a2d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a2d5:	8b 3c 24             	mov    (%esp),%edi
 804a2d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a2dc:	8b 95 74 ff ff ff    	mov    -0x8c(%ebp),%edx
 804a2e2:	c1 ea 1f             	shr    $0x1f,%edx
 804a2e5:	38 55 a4             	cmp    %dl,-0x5c(%ebp)
 804a2e8:	89 d7                	mov    %edx,%edi
 804a2ea:	74 74                	je     804a360 <main+0xe20>
 804a2ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a2f0:	89 3c 24             	mov    %edi,(%esp)
 804a2f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a2f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a2fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a2ff:	b9 19 d5 00 00       	mov    $0xd519,%ecx
 804a304:	e8 4f e4 00 00       	call   8058758 <__afl_maybe_log>
 804a309:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a30d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a311:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a315:	8b 3c 24             	mov    (%esp),%edi
 804a318:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 452);
 804a31c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a320:	89 3c 24             	mov    %edi,(%esp)
 804a323:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a327:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a32b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a32f:	b9 ff b5 00 00       	mov    $0xb5ff,%ecx
 804a334:	e8 1f e4 00 00       	call   8058758 <__afl_maybe_log>
 804a339:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a33d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a341:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a345:	8b 3c 24             	mov    (%esp),%edi
 804a348:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a34c:	51                   	push   %ecx
 804a34d:	51                   	push   %ecx
 804a34e:	68 c4 01 00 00       	push   $0x1c4
 804a353:	68 c8 70 06 08       	push   $0x80670c8
 804a358:	e8 63 bd 00 00       	call   80560c0 <report_label_coverage>
 804a35d:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 453
if((0 >= binary) != (0 <= binary))  {asm volatile (""::: "memory");
 804a360:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a364:	89 3c 24             	mov    %edi,(%esp)
 804a367:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a36b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a36f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a373:	b9 50 23 00 00       	mov    $0x2350,%ecx
 804a378:	e8 db e3 00 00       	call   8058758 <__afl_maybe_log>
 804a37d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a381:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a385:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a389:	8b 3c 24             	mov    (%esp),%edi
 804a38c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a390:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%ebp)
 804a397:	0f 9e 45 a0          	setle  -0x60(%ebp)
 804a39b:	0f b6 4d a0          	movzbl -0x60(%ebp),%ecx
 804a39f:	38 4d a4             	cmp    %cl,-0x5c(%ebp)
 804a3a2:	74 44                	je     804a3e8 <main+0xea8>
 804a3a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a3a8:	89 3c 24             	mov    %edi,(%esp)
 804a3ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a3af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a3b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a3b7:	b9 e6 1d 00 00       	mov    $0x1de6,%ecx
 804a3bc:	e8 97 e3 00 00       	call   8058758 <__afl_maybe_log>
 804a3c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a3c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a3c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a3cd:	8b 3c 24             	mov    (%esp),%edi
 804a3d0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 453);
 804a3d4:	52                   	push   %edx
 804a3d5:	52                   	push   %edx
 804a3d6:	68 c5 01 00 00       	push   $0x1c5
 804a3db:	68 c8 70 06 08       	push   $0x80670c8
 804a3e0:	e8 db bc 00 00       	call   80560c0 <report_label_coverage>
 804a3e5:	83 c4 10             	add    $0x10,%esp
}

// MCC Label 454
if(0 <= binary && do_check ) {asm volatile (""::: "memory");
 804a3e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a3ec:	89 3c 24             	mov    %edi,(%esp)
 804a3ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a3f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a3f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a3fb:	b9 38 f2 00 00       	mov    $0xf238,%ecx
 804a400:	e8 53 e3 00 00       	call   8058758 <__afl_maybe_log>
 804a405:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a409:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a40d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a411:	8b 3c 24             	mov    (%esp),%edi
 804a414:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a418:	80 7d 9c 00          	cmpb   $0x0,-0x64(%ebp)
 804a41c:	0f 85 83 ac 00 00    	jne    80550a5 <main+0xbb65>
 804a422:	66 90                	xchg   %ax,%ax
 804a424:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a428:	89 3c 24             	mov    %edi,(%esp)
 804a42b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a42f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a433:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a437:	b9 55 2d 00 00       	mov    $0x2d55,%ecx
 804a43c:	e8 17 e3 00 00       	call   8058758 <__afl_maybe_log>
 804a441:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a445:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a449:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a44d:	8b 3c 24             	mov    (%esp),%edi
 804a450:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 454);
}
// MCC Label 455
if(0 <= binary && !(do_check) ) {asm volatile (""::: "memory");
 804a454:	0f b6 85 7f ff ff ff 	movzbl -0x81(%ebp),%eax
 804a45b:	38 45 a4             	cmp    %al,-0x5c(%ebp)
 804a45e:	76 44                	jbe    804a4a4 <main+0xf64>
 804a460:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a464:	89 3c 24             	mov    %edi,(%esp)
 804a467:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a46b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a46f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a473:	b9 2a 76 00 00       	mov    $0x762a,%ecx
 804a478:	e8 db e2 00 00       	call   8058758 <__afl_maybe_log>
 804a47d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a481:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a485:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a489:	8b 3c 24             	mov    (%esp),%edi
 804a48c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 455);
 804a490:	50                   	push   %eax
 804a491:	50                   	push   %eax
 804a492:	68 c7 01 00 00       	push   $0x1c7
 804a497:	68 de 70 06 08       	push   $0x80670de
 804a49c:	e8 1f bc 00 00       	call   80560c0 <report_label_coverage>
 804a4a1:	83 c4 10             	add    $0x10,%esp
}
// MCC Label 456
if(!(0 <= binary) && do_check ) {asm volatile (""::: "memory");
 804a4a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a4a8:	89 3c 24             	mov    %edi,(%esp)
 804a4ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a4af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a4b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a4b7:	b9 27 d6 00 00       	mov    $0xd627,%ecx
 804a4bc:	e8 97 e2 00 00       	call   8058758 <__afl_maybe_log>
 804a4c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a4c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a4c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a4cd:	8b 3c 24             	mov    (%esp),%edi
 804a4d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a4d4:	89 fa                	mov    %edi,%edx
 804a4d6:	84 d2                	test   %dl,%dl
 804a4d8:	0f 84 be 00 00 00    	je     804a59c <main+0x105c>
 804a4de:	66 90                	xchg   %ax,%ax
 804a4e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a4e4:	89 3c 24             	mov    %edi,(%esp)
 804a4e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a4eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a4ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a4f3:	b9 f4 03 00 00       	mov    $0x3f4,%ecx
 804a4f8:	e8 5b e2 00 00       	call   8058758 <__afl_maybe_log>
 804a4fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a501:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a505:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a509:	8b 3c 24             	mov    (%esp),%edi
 804a50c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a510:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 804a517:	0f 85 3c ab 00 00    	jne    8055059 <main+0xbb19>
 804a51d:	8d 76 00             	lea    0x0(%esi),%esi
 804a520:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a524:	89 3c 24             	mov    %edi,(%esp)
 804a527:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a52b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a52f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a533:	b9 35 9f 00 00       	mov    $0x9f35,%ecx
 804a538:	e8 1b e2 00 00       	call   8058758 <__afl_maybe_log>
 804a53d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a541:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a545:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a549:	8b 3c 24             	mov    (%esp),%edi
 804a54c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 456);
}
// MCC Label 457
if(!(0 <= binary) && !(do_check) ) {asm volatile (""::: "memory");
 804a550:	80 fa 00             	cmp    $0x0,%dl
 804a553:	76 47                	jbe    804a59c <main+0x105c>
 804a555:	8d 76 00             	lea    0x0(%esi),%esi
 804a558:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a55c:	89 3c 24             	mov    %edi,(%esp)
 804a55f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a563:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a567:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a56b:	b9 40 03 00 00       	mov    $0x340,%ecx
 804a570:	e8 e3 e1 00 00       	call   8058758 <__afl_maybe_log>
 804a575:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a579:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a57d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a581:	8b 3c 24             	mov    (%esp),%edi
 804a584:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 457);
 804a588:	50                   	push   %eax
 804a589:	50                   	push   %eax
 804a58a:	68 c9 01 00 00       	push   $0x1c9
 804a58f:	68 de 70 06 08       	push   $0x80670de
 804a594:	e8 27 bb 00 00       	call   80560c0 <report_label_coverage>
 804a599:	83 c4 10             	add    $0x10,%esp
}
if (0 <= binary && do_check)
 804a59c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a5a0:	89 3c 24             	mov    %edi,(%esp)
 804a5a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a5a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a5ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a5af:	b9 ca 2e 00 00       	mov    $0x2eca,%ecx
 804a5b4:	e8 9f e1 00 00       	call   8058758 <__afl_maybe_log>
 804a5b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a5bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a5c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a5c5:	8b 3c 24             	mov    (%esp),%edi
 804a5c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a5cc:	80 7d 9c 00          	cmpb   $0x0,-0x64(%ebp)
 804a5d0:	0f 85 4f b7 00 00    	jne    8055d25 <main+0xc7e5>
 804a5d6:	66 90                	xchg   %ax,%ax
 804a5d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a5dc:	89 3c 24             	mov    %edi,(%esp)
 804a5df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a5e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a5e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a5eb:	b9 3e 7b 00 00       	mov    $0x7b3e,%ecx
 804a5f0:	e8 63 e1 00 00       	call   8058758 <__afl_maybe_log>
 804a5f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a5f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a5fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a601:	8b 3c 24             	mov    (%esp),%edi
 804a604:	8d 64 24 10          	lea    0x10(%esp),%esp
      usage (EXIT_FAILURE);
    }

  
// COR Label 458
if((status_only || !do_check) != (status_only && !do_check))  {asm volatile (""::: "memory");
 804a608:	80 3d 03 b3 06 08 00 	cmpb   $0x0,0x806b303
 804a60f:	0f 85 64 a0 00 00    	jne    8054679 <main+0xb139>
 804a615:	8d 76 00             	lea    0x0(%esi),%esi
 804a618:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a61c:	89 3c 24             	mov    %edi,(%esp)
 804a61f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a623:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a627:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a62b:	b9 1d f0 00 00       	mov    $0xf01d,%ecx
 804a630:	e8 23 e1 00 00       	call   8058758 <__afl_maybe_log>
 804a635:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a639:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a63d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a641:	8b 3c 24             	mov    (%esp),%edi
 804a644:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a648:	89 f0                	mov    %esi,%eax
 804a64a:	84 c0                	test   %al,%al
 804a64c:	0f 85 77 a9 00 00    	jne    8054fc9 <main+0xba89>
 804a652:	66 90                	xchg   %ax,%ax
 804a654:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a658:	89 3c 24             	mov    %edi,(%esp)
 804a65b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a65f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a663:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a667:	b9 05 08 00 00       	mov    $0x805,%ecx
 804a66c:	e8 e7 e0 00 00       	call   8058758 <__afl_maybe_log>
 804a671:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a675:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a679:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a67d:	8b 3c 24             	mov    (%esp),%edi
 804a680:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 459
if(status_only && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 459);
}
// MCC Label 460
if(status_only && !(!do_check) ) {asm volatile (""::: "memory");
 804a684:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a688:	89 3c 24             	mov    %edi,(%esp)
 804a68b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a68f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a693:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a697:	b9 7f ae 00 00       	mov    $0xae7f,%ecx
 804a69c:	e8 b7 e0 00 00       	call   8058758 <__afl_maybe_log>
 804a6a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a6a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a6a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a6ad:	8b 3c 24             	mov    (%esp),%edi
 804a6b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a6b4:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 804a6bb:	0f 84 f8 9b 00 00    	je     80542b9 <main+0xad79>
 804a6c1:	8d 76 00             	lea    0x0(%esi),%esi
 804a6c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a6c8:	89 3c 24             	mov    %edi,(%esp)
 804a6cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a6cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a6d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a6d7:	b9 d8 f7 00 00       	mov    $0xf7d8,%ecx
 804a6dc:	e8 77 e0 00 00       	call   8058758 <__afl_maybe_log>
 804a6e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a6e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a6e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a6ed:	8b 3c 24             	mov    (%esp),%edi
 804a6f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a6f4:	80 3d 03 b3 06 08 00 	cmpb   $0x0,0x806b303
 804a6fb:	0f 85 20 af 00 00    	jne    8055621 <main+0xc0e1>
 804a701:	8d 76 00             	lea    0x0(%esi),%esi
 804a704:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a708:	89 3c 24             	mov    %edi,(%esp)
 804a70b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a70f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a713:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a717:	b9 56 40 00 00       	mov    $0x4056,%ecx
 804a71c:	e8 37 e0 00 00       	call   8058758 <__afl_maybe_log>
 804a721:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a725:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a729:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a72d:	8b 3c 24             	mov    (%esp),%edi
 804a730:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 460);
}
// MCC Label 461
if(!(status_only) && !do_check ) {asm volatile (""::: "memory");
 804a734:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a738:	89 3c 24             	mov    %edi,(%esp)
 804a73b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a73f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a743:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a747:	b9 75 95 00 00       	mov    $0x9575,%ecx
 804a74c:	e8 07 e0 00 00       	call   8058758 <__afl_maybe_log>
 804a751:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a755:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a759:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a75d:	8b 3c 24             	mov    (%esp),%edi
 804a760:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a764:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 804a76b:	0f 84 48 9b 00 00    	je     80542b9 <main+0xad79>
 804a771:	8d 76 00             	lea    0x0(%esi),%esi
 804a774:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a778:	89 3c 24             	mov    %edi,(%esp)
 804a77b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a77f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a783:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a787:	b9 05 d3 00 00       	mov    $0xd305,%ecx
 804a78c:	e8 c7 df 00 00       	call   8058758 <__afl_maybe_log>
 804a791:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a795:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a799:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a79d:	8b 3c 24             	mov    (%esp),%edi
 804a7a0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 461);
}
// MCC Label 462
if(!(status_only) && !(!do_check) ) {asm volatile (""::: "memory");
 804a7a4:	0f b6 8d 7f ff ff ff 	movzbl -0x81(%ebp),%ecx
 804a7ab:	38 0d 03 b3 06 08    	cmp    %cl,0x806b303
 804a7b1:	0f 82 1e ae 00 00    	jb     80555d5 <main+0xc095>
 804a7b7:	90                   	nop
 804a7b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a7bc:	89 3c 24             	mov    %edi,(%esp)
 804a7bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a7c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a7c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a7cb:	b9 e2 e1 00 00       	mov    $0xe1e2,%ecx
 804a7d0:	e8 83 df 00 00       	call   8058758 <__afl_maybe_log>
 804a7d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a7d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a7dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a7e1:	8b 3c 24             	mov    (%esp),%edi
 804a7e4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 462);
}
if (status_only && !do_check)
 804a7e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a7ec:	89 3c 24             	mov    %edi,(%esp)
 804a7ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a7f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a7f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a7fb:	b9 38 37 00 00       	mov    $0x3738,%ecx
 804a800:	e8 53 df 00 00       	call   8058758 <__afl_maybe_log>
 804a805:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a809:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a80d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a811:	8b 3c 24             	mov    (%esp),%edi
 804a814:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a818:	0f b6 85 7f ff ff ff 	movzbl -0x81(%ebp),%eax
 804a81f:	38 05 03 b3 06 08    	cmp    %al,0x806b303
 804a825:	0f 87 85 b5 00 00    	ja     8055db0 <main+0xc870>
 804a82b:	90                   	nop
 804a82c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a830:	89 3c 24             	mov    %edi,(%esp)
 804a833:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a837:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a83b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a83f:	b9 9e 15 00 00       	mov    $0x159e,%ecx
 804a844:	e8 0f df 00 00       	call   8058758 <__afl_maybe_log>
 804a849:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a84d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a851:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a855:	8b 3c 24             	mov    (%esp),%edi
 804a858:	8d 64 24 10          	lea    0x10(%esp),%esp
      usage (EXIT_FAILURE);
    }

  
// COR Label 463
if((warn || !do_check) != (warn && !do_check))  {asm volatile (""::: "memory");
 804a85c:	80 3d 02 b3 06 08 00 	cmpb   $0x0,0x806b302
 804a863:	0f 85 cc 9e 00 00    	jne    8054735 <main+0xb1f5>
 804a869:	8d 76 00             	lea    0x0(%esi),%esi
 804a86c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a870:	89 3c 24             	mov    %edi,(%esp)
 804a873:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a87b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a87f:	b9 75 5a 00 00       	mov    $0x5a75,%ecx
 804a884:	e8 cf de 00 00       	call   8058758 <__afl_maybe_log>
 804a889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a88d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a891:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a895:	8b 3c 24             	mov    (%esp),%edi
 804a898:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a89c:	89 f2                	mov    %esi,%edx
 804a89e:	84 d2                	test   %dl,%dl
 804a8a0:	0f 85 95 a6 00 00    	jne    8054f3b <main+0xb9fb>
 804a8a6:	66 90                	xchg   %ax,%ax
 804a8a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a8ac:	89 3c 24             	mov    %edi,(%esp)
 804a8af:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a8b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a8b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a8bb:	b9 26 7e 00 00       	mov    $0x7e26,%ecx
 804a8c0:	e8 93 de 00 00       	call   8058758 <__afl_maybe_log>
 804a8c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a8c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a8cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a8d1:	8b 3c 24             	mov    (%esp),%edi
 804a8d4:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 464
if(warn && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 464);
}
// MCC Label 465
if(warn && !(!do_check) ) {asm volatile (""::: "memory");
 804a8d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a8dc:	89 3c 24             	mov    %edi,(%esp)
 804a8df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a8e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a8e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a8eb:	b9 84 34 00 00       	mov    $0x3484,%ecx
 804a8f0:	e8 63 de 00 00       	call   8058758 <__afl_maybe_log>
 804a8f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a8f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a8fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a901:	8b 3c 24             	mov    (%esp),%edi
 804a904:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a908:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 804a90f:	0f 84 18 99 00 00    	je     805422d <main+0xaced>
 804a915:	8d 76 00             	lea    0x0(%esi),%esi
 804a918:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a91c:	89 3c 24             	mov    %edi,(%esp)
 804a91f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a923:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a927:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a92b:	b9 ea 27 00 00       	mov    $0x27ea,%ecx
 804a930:	e8 23 de 00 00       	call   8058758 <__afl_maybe_log>
 804a935:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a939:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a93d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a941:	8b 3c 24             	mov    (%esp),%edi
 804a944:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a948:	80 3d 02 b3 06 08 00 	cmpb   $0x0,0x806b302
 804a94f:	0f 85 48 ae 00 00    	jne    805579d <main+0xc25d>
 804a955:	8d 76 00             	lea    0x0(%esi),%esi
 804a958:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a95c:	89 3c 24             	mov    %edi,(%esp)
 804a95f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a963:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a967:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a96b:	b9 ed 0e 00 00       	mov    $0xeed,%ecx
 804a970:	e8 e3 dd 00 00       	call   8058758 <__afl_maybe_log>
 804a975:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a979:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a97d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a981:	8b 3c 24             	mov    (%esp),%edi
 804a984:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 465);
}
// MCC Label 466
if(!(warn) && !do_check ) {asm volatile (""::: "memory");
 804a988:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a98c:	89 3c 24             	mov    %edi,(%esp)
 804a98f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a993:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a997:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a99b:	b9 2f da 00 00       	mov    $0xda2f,%ecx
 804a9a0:	e8 b3 dd 00 00       	call   8058758 <__afl_maybe_log>
 804a9a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a9a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a9ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a9b1:	8b 3c 24             	mov    (%esp),%edi
 804a9b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a9b8:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 804a9bf:	0f 84 68 98 00 00    	je     805422d <main+0xaced>
 804a9c5:	8d 76 00             	lea    0x0(%esi),%esi
 804a9c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a9cc:	89 3c 24             	mov    %edi,(%esp)
 804a9cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a9d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a9d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a9db:	b9 cc ea 00 00       	mov    $0xeacc,%ecx
 804a9e0:	e8 73 dd 00 00       	call   8058758 <__afl_maybe_log>
 804a9e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a9e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a9ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a9f1:	8b 3c 24             	mov    (%esp),%edi
 804a9f4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 466);
}
// MCC Label 467
if(!(warn) && !(!do_check) ) {asm volatile (""::: "memory");
 804a9f8:	0f b6 85 7f ff ff ff 	movzbl -0x81(%ebp),%eax
 804a9ff:	38 05 02 b3 06 08    	cmp    %al,0x806b302
 804aa05:	0f 82 46 ad 00 00    	jb     8055751 <main+0xc211>
 804aa0b:	90                   	nop
 804aa0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aa10:	89 3c 24             	mov    %edi,(%esp)
 804aa13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aa17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aa1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aa1f:	b9 40 ee 00 00       	mov    $0xee40,%ecx
 804aa24:	e8 2f dd 00 00       	call   8058758 <__afl_maybe_log>
 804aa29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aa2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aa31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aa35:	8b 3c 24             	mov    (%esp),%edi
 804aa38:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 467);
}
if (warn && !do_check)
 804aa3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aa40:	89 3c 24             	mov    %edi,(%esp)
 804aa43:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aa47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aa4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aa4f:	b9 52 bf 00 00       	mov    $0xbf52,%ecx
 804aa54:	e8 ff dc 00 00       	call   8058758 <__afl_maybe_log>
 804aa59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aa5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aa61:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aa65:	8b 3c 24             	mov    (%esp),%edi
 804aa68:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aa6c:	0f b6 95 7f ff ff ff 	movzbl -0x81(%ebp),%edx
 804aa73:	38 15 02 b3 06 08    	cmp    %dl,0x806b302
 804aa79:	0f 87 6e b3 00 00    	ja     8055ded <main+0xc8ad>
 804aa7f:	90                   	nop
 804aa80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aa84:	89 3c 24             	mov    %edi,(%esp)
 804aa87:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aa8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aa8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aa93:	b9 cb fd 00 00       	mov    $0xfdcb,%ecx
 804aa98:	e8 bb dc 00 00       	call   8058758 <__afl_maybe_log>
 804aa9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aaa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aaa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aaa9:	8b 3c 24             	mov    (%esp),%edi
 804aaac:	8d 64 24 10          	lea    0x10(%esp),%esp
      usage (EXIT_FAILURE);
    }

  
// COR Label 468
if((quiet || !do_check) != (quiet && !do_check))  {asm volatile (""::: "memory");
 804aab0:	80 3d 01 b3 06 08 00 	cmpb   $0x0,0x806b301
 804aab7:	0f 85 34 9d 00 00    	jne    80547f1 <main+0xb2b1>
 804aabd:	8d 76 00             	lea    0x0(%esi),%esi
 804aac0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aac4:	89 3c 24             	mov    %edi,(%esp)
 804aac7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aacb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aacf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aad3:	b9 41 01 00 00       	mov    $0x141,%ecx
 804aad8:	e8 7b dc 00 00       	call   8058758 <__afl_maybe_log>
 804aadd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aae1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aae5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aae9:	8b 3c 24             	mov    (%esp),%edi
 804aaec:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aaf0:	89 f1                	mov    %esi,%ecx
 804aaf2:	84 c9                	test   %cl,%cl
 804aaf4:	0f 85 f7 a5 00 00    	jne    80550f1 <main+0xbbb1>
 804aafa:	66 90                	xchg   %ax,%ax
 804aafc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ab00:	89 3c 24             	mov    %edi,(%esp)
 804ab03:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ab07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ab0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ab0f:	b9 e5 5d 00 00       	mov    $0x5de5,%ecx
 804ab14:	e8 3f dc 00 00       	call   8058758 <__afl_maybe_log>
 804ab19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ab1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ab21:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ab25:	8b 3c 24             	mov    (%esp),%edi
 804ab28:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 469
if(quiet && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 469);
}
// MCC Label 470
if(quiet && !(!do_check) ) {asm volatile (""::: "memory");
 804ab2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ab30:	89 3c 24             	mov    %edi,(%esp)
 804ab33:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ab37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ab3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ab3f:	b9 ee 1a 00 00       	mov    $0x1aee,%ecx
 804ab44:	e8 0f dc 00 00       	call   8058758 <__afl_maybe_log>
 804ab49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ab4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ab51:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ab55:	8b 3c 24             	mov    (%esp),%edi
 804ab58:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ab5c:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 804ab63:	0f 84 38 96 00 00    	je     80541a1 <main+0xac61>
 804ab69:	8d 76 00             	lea    0x0(%esi),%esi
 804ab6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ab70:	89 3c 24             	mov    %edi,(%esp)
 804ab73:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ab77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ab7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ab7f:	b9 a0 d4 00 00       	mov    $0xd4a0,%ecx
 804ab84:	e8 cf db 00 00       	call   8058758 <__afl_maybe_log>
 804ab89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ab8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ab91:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ab95:	8b 3c 24             	mov    (%esp),%edi
 804ab98:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ab9c:	80 3d 01 b3 06 08 00 	cmpb   $0x0,0x806b301
 804aba3:	0f 85 5c ab 00 00    	jne    8055705 <main+0xc1c5>
 804aba9:	8d 76 00             	lea    0x0(%esi),%esi
 804abac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804abb0:	89 3c 24             	mov    %edi,(%esp)
 804abb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804abb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804abbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804abbf:	b9 d3 97 00 00       	mov    $0x97d3,%ecx
 804abc4:	e8 8f db 00 00       	call   8058758 <__afl_maybe_log>
 804abc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804abcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804abd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804abd5:	8b 3c 24             	mov    (%esp),%edi
 804abd8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 470);
}
// MCC Label 471
if(!(quiet) && !do_check ) {asm volatile (""::: "memory");
 804abdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804abe0:	89 3c 24             	mov    %edi,(%esp)
 804abe3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804abe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804abeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804abef:	b9 86 5f 00 00       	mov    $0x5f86,%ecx
 804abf4:	e8 5f db 00 00       	call   8058758 <__afl_maybe_log>
 804abf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804abfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ac01:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ac05:	8b 3c 24             	mov    (%esp),%edi
 804ac08:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ac0c:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 804ac13:	0f 84 88 95 00 00    	je     80541a1 <main+0xac61>
 804ac19:	8d 76 00             	lea    0x0(%esi),%esi
 804ac1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ac20:	89 3c 24             	mov    %edi,(%esp)
 804ac23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ac27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ac2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ac2f:	b9 d1 03 00 00       	mov    $0x3d1,%ecx
 804ac34:	e8 1f db 00 00       	call   8058758 <__afl_maybe_log>
 804ac39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ac3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ac41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ac45:	8b 3c 24             	mov    (%esp),%edi
 804ac48:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 471);
}
// MCC Label 472
if(!(quiet) && !(!do_check) ) {asm volatile (""::: "memory");
 804ac4c:	0f b6 95 7f ff ff ff 	movzbl -0x81(%ebp),%edx
 804ac53:	38 15 01 b3 06 08    	cmp    %dl,0x806b301
 804ac59:	0f 82 5a aa 00 00    	jb     80556b9 <main+0xc179>
 804ac5f:	90                   	nop
 804ac60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ac64:	89 3c 24             	mov    %edi,(%esp)
 804ac67:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ac6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ac6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ac73:	b9 f2 eb 00 00       	mov    $0xebf2,%ecx
 804ac78:	e8 db da 00 00       	call   8058758 <__afl_maybe_log>
 804ac7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ac81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ac85:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ac89:	8b 3c 24             	mov    (%esp),%edi
 804ac8c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 472);
}
if (quiet && !do_check)
 804ac90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ac94:	89 3c 24             	mov    %edi,(%esp)
 804ac97:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ac9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ac9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aca3:	b9 12 5f 00 00       	mov    $0x5f12,%ecx
 804aca8:	e8 ab da 00 00       	call   8058758 <__afl_maybe_log>
 804acad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804acb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804acb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804acb9:	8b 3c 24             	mov    (%esp),%edi
 804acbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804acc0:	0f b6 8d 7f ff ff ff 	movzbl -0x81(%ebp),%ecx
 804acc7:	38 0d 01 b3 06 08    	cmp    %cl,0x806b301
 804accd:	0f 87 b2 b2 00 00    	ja     8055f85 <main+0xca45>
 804acd3:	90                   	nop
 804acd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804acd8:	89 3c 24             	mov    %edi,(%esp)
 804acdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804acdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ace3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ace7:	b9 a4 9b 00 00       	mov    $0x9ba4,%ecx
 804acec:	e8 67 da 00 00       	call   8058758 <__afl_maybe_log>
 804acf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804acf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804acf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804acfd:	8b 3c 24             	mov    (%esp),%edi
 804ad00:	8d 64 24 10          	lea    0x10(%esp),%esp
      usage (EXIT_FAILURE);
    }

  
// AOR Label 473
if(strict | !do_check != strict & !do_check)  {asm volatile (""::: "memory");
 804ad04:	0f b6 05 00 b3 06 08 	movzbl 0x806b300,%eax
 804ad0b:	89 f2                	mov    %esi,%edx
 804ad0d:	89 f1                	mov    %esi,%ecx
 804ad0f:	31 c2                	xor    %eax,%edx
 804ad11:	84 ca                	test   %cl,%dl
 804ad13:	0f 85 68 a4 00 00    	jne    8055181 <main+0xbc41>
 804ad19:	8d 76 00             	lea    0x0(%esi),%esi
 804ad1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ad20:	89 3c 24             	mov    %edi,(%esp)
 804ad23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ad27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ad2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ad2f:	b9 04 b7 00 00       	mov    $0xb704,%ecx
 804ad34:	e8 1f da 00 00       	call   8058758 <__afl_maybe_log>
 804ad39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ad3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ad41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ad45:	8b 3c 24             	mov    (%esp),%edi
 804ad48:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ad4c:	84 c0                	test   %al,%al
 804ad4e:	0f 85 2d a4 00 00    	jne    8055181 <main+0xbc41>
 804ad54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ad58:	89 3c 24             	mov    %edi,(%esp)
 804ad5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ad5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ad63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ad67:	b9 0a 6d 00 00       	mov    $0x6d0a,%ecx
 804ad6c:	e8 e7 d9 00 00       	call   8058758 <__afl_maybe_log>
 804ad71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ad75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ad79:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ad7d:	8b 3c 24             	mov    (%esp),%edi
 804ad80:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 473);
}
// AOR Label 474
if(strict ^ !do_check != strict & !do_check)  {asm volatile (""::: "memory");
 804ad84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ad88:	89 3c 24             	mov    %edi,(%esp)
 804ad8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ad8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ad93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ad97:	b9 07 58 00 00       	mov    $0x5807,%ecx
 804ad9c:	e8 b7 d9 00 00       	call   8058758 <__afl_maybe_log>
 804ada1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ada5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ada9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804adad:	8b 3c 24             	mov    (%esp),%edi
 804adb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804adb4:	89 f2                	mov    %esi,%edx
 804adb6:	31 c2                	xor    %eax,%edx
 804adb8:	21 f2                	and    %esi,%edx
 804adba:	38 c2                	cmp    %al,%dl
 804adbc:	74 46                	je     804ae04 <main+0x18c4>
 804adbe:	66 90                	xchg   %ax,%ax
 804adc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804adc4:	89 3c 24             	mov    %edi,(%esp)
 804adc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804adcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804adcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804add3:	b9 1d 3b 00 00       	mov    $0x3b1d,%ecx
 804add8:	e8 7b d9 00 00       	call   8058758 <__afl_maybe_log>
 804addd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ade1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ade5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ade9:	8b 3c 24             	mov    (%esp),%edi
 804adec:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 474);
 804adf0:	50                   	push   %eax
 804adf1:	50                   	push   %eax
 804adf2:	68 da 01 00 00       	push   $0x1da
 804adf7:	68 cc 70 06 08       	push   $0x80670cc
 804adfc:	e8 bf b2 00 00       	call   80560c0 <report_label_coverage>
 804ae01:	83 c4 10             	add    $0x10,%esp
}
if (strict & !do_check)
 804ae04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ae08:	89 3c 24             	mov    %edi,(%esp)
 804ae0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ae13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ae17:	b9 62 41 00 00       	mov    $0x4162,%ecx
 804ae1c:	e8 37 d9 00 00       	call   8058758 <__afl_maybe_log>
 804ae21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ae25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ae29:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ae2d:	8b 3c 24             	mov    (%esp),%edi
 804ae30:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ae34:	0f b6 8d 7f ff ff ff 	movzbl -0x81(%ebp),%ecx
 804ae3b:	38 0d 00 b3 06 08    	cmp    %cl,0x806b300
 804ae41:	0f 87 e6 af 00 00    	ja     8055e2d <main+0xc8ed>
 804ae47:	90                   	nop
 804ae48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ae4c:	89 3c 24             	mov    %edi,(%esp)
 804ae4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ae57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ae5b:	b9 02 17 00 00       	mov    $0x1702,%ecx
 804ae60:	e8 f3 d8 00 00       	call   8058758 <__afl_maybe_log>
 804ae65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ae69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ae6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ae71:	8b 3c 24             	mov    (%esp),%edi
 804ae74:	8d 64 24 10          	lea    0x10(%esp),%esp
     usage (EXIT_FAILURE);
   }

  
// ABS Label 475
if(binary < 0)  {asm volatile (""::: "memory");
 804ae78:	83 bd 74 ff ff ff ff 	cmpl   $0xffffffff,-0x8c(%ebp)
 804ae7f:	0f 84 ea aa 00 00    	je     805596f <main+0xc42f>
 804ae85:	8d 76 00             	lea    0x0(%esi),%esi
 804ae88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ae8c:	89 3c 24             	mov    %edi,(%esp)
 804ae8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ae97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ae9b:	b9 28 cc 00 00       	mov    $0xcc28,%ecx
 804aea0:	e8 b3 d8 00 00       	call   8058758 <__afl_maybe_log>
 804aea5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aea9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aead:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aeb1:	8b 3c 24             	mov    (%esp),%edi
 804aeb4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 475);
}

// COR Label 476
if((!0 || binary < 0) != (!0 && binary < 0))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 476);
 804aeb8:	50                   	push   %eax
 804aeb9:	50                   	push   %eax
 804aeba:	68 dc 01 00 00       	push   $0x1dc
 804aebf:	68 da 70 06 08       	push   $0x80670da
 804aec4:	e8 f7 b1 00 00       	call   80560c0 <report_label_coverage>
 804aec9:	83 c4 10             	add    $0x10,%esp
}

// ROR Label 477
if((binary <= 0) != (binary < 0))  {asm volatile (""::: "memory");
 804aecc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aed0:	89 3c 24             	mov    %edi,(%esp)
 804aed3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aed7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aedb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aedf:	b9 e9 16 00 00       	mov    $0x16e9,%ecx
 804aee4:	e8 6f d8 00 00       	call   8058758 <__afl_maybe_log>
 804aee9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aeed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aef1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aef5:	8b 3c 24             	mov    (%esp),%edi
 804aef8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aefc:	89 f8                	mov    %edi,%eax
 804aefe:	3a 45 a0             	cmp    -0x60(%ebp),%al
 804af01:	74 45                	je     804af48 <main+0x1a08>
 804af03:	90                   	nop
 804af04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804af08:	89 3c 24             	mov    %edi,(%esp)
 804af0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804af17:	b9 ae b4 00 00       	mov    $0xb4ae,%ecx
 804af1c:	e8 37 d8 00 00       	call   8058758 <__afl_maybe_log>
 804af21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804af25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804af29:	8b 54 24 04          	mov    0x4(%esp),%edx
 804af2d:	8b 3c 24             	mov    (%esp),%edi
 804af30:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 477);
 804af34:	50                   	push   %eax
 804af35:	50                   	push   %eax
 804af36:	68 dd 01 00 00       	push   $0x1dd
 804af3b:	68 c8 70 06 08       	push   $0x80670c8
 804af40:	e8 7b b1 00 00       	call   80560c0 <report_label_coverage>
 804af45:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 478
if((binary > 0) != (binary < 0))  {asm volatile (""::: "memory");
 804af48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804af4c:	89 3c 24             	mov    %edi,(%esp)
 804af4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804af5b:	b9 3e 39 00 00       	mov    $0x393e,%ecx
 804af60:	e8 f3 d7 00 00       	call   8058758 <__afl_maybe_log>
 804af65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804af69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804af6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804af71:	8b 3c 24             	mov    (%esp),%edi
 804af74:	8d 64 24 10          	lea    0x10(%esp),%esp
 804af78:	89 fa                	mov    %edi,%edx
 804af7a:	38 d3                	cmp    %dl,%bl
 804af7c:	74 46                	je     804afc4 <main+0x1a84>
 804af7e:	66 90                	xchg   %ax,%ax
 804af80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804af84:	89 3c 24             	mov    %edi,(%esp)
 804af87:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804af93:	b9 c8 d5 00 00       	mov    $0xd5c8,%ecx
 804af98:	e8 bb d7 00 00       	call   8058758 <__afl_maybe_log>
 804af9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804afa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804afa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804afa9:	8b 3c 24             	mov    (%esp),%edi
 804afac:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 478);
 804afb0:	50                   	push   %eax
 804afb1:	50                   	push   %eax
 804afb2:	68 de 01 00 00       	push   $0x1de
 804afb7:	68 c8 70 06 08       	push   $0x80670c8
 804afbc:	e8 ff b0 00 00       	call   80560c0 <report_label_coverage>
 804afc1:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 479
if((binary >= 0) != (binary < 0))  {asm volatile (""::: "memory");
 804afc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804afc8:	89 3c 24             	mov    %edi,(%esp)
 804afcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804afcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804afd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804afd7:	b9 c9 3e 00 00       	mov    $0x3ec9,%ecx
 804afdc:	e8 77 d7 00 00       	call   8058758 <__afl_maybe_log>
 804afe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804afe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804afe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804afed:	8b 3c 24             	mov    (%esp),%edi
 804aff0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aff4:	89 fb                	mov    %edi,%ebx
 804aff6:	38 5d a4             	cmp    %bl,-0x5c(%ebp)
 804aff9:	74 45                	je     804b040 <main+0x1b00>
 804affb:	90                   	nop
 804affc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b000:	89 3c 24             	mov    %edi,(%esp)
 804b003:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b007:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b00b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b00f:	b9 71 76 00 00       	mov    $0x7671,%ecx
 804b014:	e8 3f d7 00 00       	call   8058758 <__afl_maybe_log>
 804b019:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b01d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b021:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b025:	8b 3c 24             	mov    (%esp),%edi
 804b028:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 479);
 804b02c:	50                   	push   %eax
 804b02d:	50                   	push   %eax
 804b02e:	68 df 01 00 00       	push   $0x1df
 804b033:	68 c8 70 06 08       	push   $0x80670c8
 804b038:	e8 83 b0 00 00       	call   80560c0 <report_label_coverage>
 804b03d:	83 c4 10             	add    $0x10,%esp
}

// MCC Label 480
if(!0 && binary < 0 ) {asm volatile (""::: "memory");
 804b040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b044:	89 3c 24             	mov    %edi,(%esp)
 804b047:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b04b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b04f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b053:	b9 ee 11 00 00       	mov    $0x11ee,%ecx
 804b058:	e8 fb d6 00 00       	call   8058758 <__afl_maybe_log>
 804b05d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b065:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b069:	8b 3c 24             	mov    (%esp),%edi
 804b06c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b070:	83 bd 74 ff ff ff ff 	cmpl   $0xffffffff,-0x8c(%ebp)
 804b077:	0f 84 9c a8 00 00    	je     8055919 <main+0xc3d9>
 804b07d:	8d 76 00             	lea    0x0(%esi),%esi
 804b080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b084:	89 3c 24             	mov    %edi,(%esp)
 804b087:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b08b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b08f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b093:	b9 97 3e 00 00       	mov    $0x3e97,%ecx
 804b098:	e8 bb d6 00 00       	call   8058758 <__afl_maybe_log>
 804b09d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b0a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b0a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b0a9:	8b 3c 24             	mov    (%esp),%edi
 804b0ac:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 480);
}
// MCC Label 481
if(!0 && !(binary < 0) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 481);
 804b0b0:	57                   	push   %edi
 804b0b1:	57                   	push   %edi
 804b0b2:	68 e1 01 00 00       	push   $0x1e1
 804b0b7:	68 de 70 06 08       	push   $0x80670de
 804b0bc:	e8 ff af 00 00       	call   80560c0 <report_label_coverage>
 804b0c1:	83 c4 10             	add    $0x10,%esp
if (!O_BINARY && binary < 0)
    binary = 0;

  
// ABS Label 484
if(argc < 0)  {asm volatile (""::: "memory");
 804b0c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b0c8:	89 3c 24             	mov    %edi,(%esp)
 804b0cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b0cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b0d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b0d7:	b9 83 43 00 00       	mov    $0x4383,%ecx
 804b0dc:	e8 77 d6 00 00       	call   8058758 <__afl_maybe_log>
 804b0e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b0e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b0e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b0ed:	8b 3c 24             	mov    (%esp),%edi
 804b0f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b0f4:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
 804b0f8:	0f 88 cf a7 00 00    	js     80558cd <main+0xc38d>
 804b0fe:	66 90                	xchg   %ax,%ax
 804b100:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b104:	89 3c 24             	mov    %edi,(%esp)
 804b107:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b10b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b10f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b113:	b9 66 23 00 00       	mov    $0x2366,%ecx
 804b118:	e8 3b d6 00 00       	call   8058758 <__afl_maybe_log>
 804b11d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b121:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b125:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b129:	8b 3c 24             	mov    (%esp),%edi
 804b12c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 484);
}
// ABS Label 485
if(optind < 0)  {asm volatile (""::: "memory");
 804b130:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b134:	89 3c 24             	mov    %edi,(%esp)
 804b137:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b13b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b13f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b143:	b9 6d 97 00 00       	mov    $0x976d,%ecx
 804b148:	e8 0b d6 00 00       	call   8058758 <__afl_maybe_log>
 804b14d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b151:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b155:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b159:	8b 3c 24             	mov    (%esp),%edi
 804b15c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b160:	83 3d cc b2 06 08 00 	cmpl   $0x0,0x806b2cc
 804b167:	0f 88 7c a6 00 00    	js     80557e9 <main+0xc2a9>
 804b16d:	8d 76 00             	lea    0x0(%esi),%esi
 804b170:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b174:	89 3c 24             	mov    %edi,(%esp)
 804b177:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b17b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b17f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b183:	b9 d7 0b 00 00       	mov    $0xbd7,%ecx
 804b188:	e8 cb d5 00 00       	call   8058758 <__afl_maybe_log>
 804b18d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b191:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b195:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b199:	8b 3c 24             	mov    (%esp),%edi
 804b19c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 485);
}

// ROR Label 486
if((optind != argc) != (optind == argc))  {asm volatile (""::: "memory");
 804b1a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b1a4:	89 3c 24             	mov    %edi,(%esp)
 804b1a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b1ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b1af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b1b3:	b9 c8 92 00 00       	mov    $0x92c8,%ecx
 804b1b8:	e8 9b d5 00 00       	call   8058758 <__afl_maybe_log>
 804b1bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b1c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b1c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b1c9:	8b 3c 24             	mov    (%esp),%edi
 804b1cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b1d0:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804b1d5:	8b 75 94             	mov    -0x6c(%ebp),%esi
 804b1d8:	39 f0                	cmp    %esi,%eax
 804b1da:	0f 95 c1             	setne  %cl
 804b1dd:	39 c6                	cmp    %eax,%esi
 804b1df:	0f 94 c2             	sete   %dl
 804b1e2:	38 d1                	cmp    %dl,%cl
 804b1e4:	74 4b                	je     804b231 <main+0x1cf1>
 804b1e6:	66 90                	xchg   %ax,%ax
 804b1e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b1ec:	89 3c 24             	mov    %edi,(%esp)
 804b1ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b1f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b1f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b1fb:	b9 72 0b 00 00       	mov    $0xb72,%ecx
 804b200:	e8 53 d5 00 00       	call   8058758 <__afl_maybe_log>
 804b205:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b209:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b20d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b211:	8b 3c 24             	mov    (%esp),%edi
 804b214:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 486);
 804b218:	51                   	push   %ecx
 804b219:	51                   	push   %ecx
 804b21a:	68 e6 01 00 00       	push   $0x1e6
 804b21f:	68 c8 70 06 08       	push   $0x80670c8
 804b224:	e8 97 ae 00 00       	call   80560c0 <report_label_coverage>
 804b229:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804b22e:	83 c4 10             	add    $0x10,%esp
 804b231:	8d 76 00             	lea    0x0(%esi),%esi
}
if (optind == argc)
 804b234:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b238:	89 3c 24             	mov    %edi,(%esp)
 804b23b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b23f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b243:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b247:	b9 dd 8f 00 00       	mov    $0x8fdd,%ecx
 804b24c:	e8 07 d5 00 00       	call   8058758 <__afl_maybe_log>
 804b251:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b255:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b259:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b25d:	8b 3c 24             	mov    (%esp),%edi
 804b260:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b264:	3b 45 94             	cmp    -0x6c(%ebp),%eax
 804b267:	0f 84 67 9f 00 00    	je     80551d4 <main+0xbc94>
 804b26d:	8d 76 00             	lea    0x0(%esi),%esi
 804b270:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b274:	89 3c 24             	mov    %edi,(%esp)
 804b277:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b27b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b27f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b283:	b9 b2 1e 00 00       	mov    $0x1eb2,%ecx
 804b288:	e8 cb d4 00 00       	call   8058758 <__afl_maybe_log>
 804b28d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b291:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b295:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b299:	8b 3c 24             	mov    (%esp),%edi
 804b29c:	8d 64 24 10          	lea    0x10(%esp),%esp
    argv[argc++] = bad_cast ("-");

  
// ABS Label 487
if(argc < 0)  {asm volatile (""::: "memory");
 804b2a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b2a4:	89 3c 24             	mov    %edi,(%esp)
 804b2a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b2ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b2af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b2b3:	b9 b1 be 00 00       	mov    $0xbeb1,%ecx
 804b2b8:	e8 9b d4 00 00       	call   8058758 <__afl_maybe_log>
 804b2bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b2c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b2c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b2c9:	8b 3c 24             	mov    (%esp),%edi
 804b2cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b2d0:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
 804b2d4:	0f 88 a7 a5 00 00    	js     8055881 <main+0xc341>
 804b2da:	66 90                	xchg   %ax,%ax
 804b2dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b2e0:	89 3c 24             	mov    %edi,(%esp)
 804b2e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b2e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b2eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b2ef:	b9 50 92 00 00       	mov    $0x9250,%ecx
 804b2f4:	e8 5f d4 00 00       	call   8058758 <__afl_maybe_log>
 804b2f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b2fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b301:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b305:	8b 3c 24             	mov    (%esp),%edi
 804b308:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 487);
}
// ABS Label 488
if(optind < 0)  {asm volatile (""::: "memory");
 804b30c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b310:	89 3c 24             	mov    %edi,(%esp)
 804b313:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b317:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b31b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b31f:	b9 e2 1f 00 00       	mov    $0x1fe2,%ecx
 804b324:	e8 2f d4 00 00       	call   8058758 <__afl_maybe_log>
 804b329:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b32d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b331:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b335:	8b 3c 24             	mov    (%esp),%edi
 804b338:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b33c:	83 3d cc b2 06 08 00 	cmpl   $0x0,0x806b2cc
 804b343:	0f 88 ec a4 00 00    	js     8055835 <main+0xc2f5>
 804b349:	8d 76 00             	lea    0x0(%esi),%esi
 804b34c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b350:	89 3c 24             	mov    %edi,(%esp)
 804b353:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b357:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b35b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b35f:	b9 b4 90 00 00       	mov    $0x90b4,%ecx
 804b364:	e8 ef d3 00 00       	call   8058758 <__afl_maybe_log>
 804b369:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b36d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b371:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b375:	8b 3c 24             	mov    (%esp),%edi
 804b378:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 488);
}

// ROR Label 489
if((optind <= argc) != (optind < argc))  {asm volatile (""::: "memory");
 804b37c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b380:	89 3c 24             	mov    %edi,(%esp)
 804b383:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b387:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b38b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b38f:	b9 b1 41 00 00       	mov    $0x41b1,%ecx
 804b394:	e8 bf d3 00 00       	call   8058758 <__afl_maybe_log>
 804b399:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b39d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b3a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b3a5:	8b 3c 24             	mov    (%esp),%edi
 804b3a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b3ac:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804b3b1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
 804b3b4:	39 d8                	cmp    %ebx,%eax
 804b3b6:	0f 9e c1             	setle  %cl
 804b3b9:	39 c3                	cmp    %eax,%ebx
 804b3bb:	0f 9f c2             	setg   %dl
 804b3be:	38 d1                	cmp    %dl,%cl
 804b3c0:	74 4b                	je     804b40d <main+0x1ecd>
 804b3c2:	66 90                	xchg   %ax,%ax
 804b3c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b3c8:	89 3c 24             	mov    %edi,(%esp)
 804b3cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b3cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b3d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b3d7:	b9 67 89 00 00       	mov    $0x8967,%ecx
 804b3dc:	e8 77 d3 00 00       	call   8058758 <__afl_maybe_log>
 804b3e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b3e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b3e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b3ed:	8b 3c 24             	mov    (%esp),%edi
 804b3f0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 489);
 804b3f4:	50                   	push   %eax
 804b3f5:	50                   	push   %eax
 804b3f6:	68 e9 01 00 00       	push   $0x1e9
 804b3fb:	68 c8 70 06 08       	push   $0x80670c8
 804b400:	e8 bb ac 00 00       	call   80560c0 <report_label_coverage>
 804b405:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804b40a:	83 c4 10             	add    $0x10,%esp
 804b40d:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 490
if((optind > argc) != (optind < argc))  {asm volatile (""::: "memory");
 804b410:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b414:	89 3c 24             	mov    %edi,(%esp)
 804b417:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b41b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b41f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b423:	b9 a8 dc 00 00       	mov    $0xdca8,%ecx
 804b428:	e8 2b d3 00 00       	call   8058758 <__afl_maybe_log>
 804b42d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b431:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b435:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b439:	8b 3c 24             	mov    (%esp),%edi
 804b43c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b440:	8b 75 94             	mov    -0x6c(%ebp),%esi
 804b443:	39 f0                	cmp    %esi,%eax
 804b445:	0f 9f c3             	setg   %bl
 804b448:	39 c6                	cmp    %eax,%esi
 804b44a:	0f 9f c1             	setg   %cl
 804b44d:	38 cb                	cmp    %cl,%bl
 804b44f:	74 4c                	je     804b49d <main+0x1f5d>
 804b451:	8d 76 00             	lea    0x0(%esi),%esi
 804b454:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b458:	89 3c 24             	mov    %edi,(%esp)
 804b45b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b45f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b463:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b467:	b9 32 01 00 00       	mov    $0x132,%ecx
 804b46c:	e8 e7 d2 00 00       	call   8058758 <__afl_maybe_log>
 804b471:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b475:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b479:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b47d:	8b 3c 24             	mov    (%esp),%edi
 804b480:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 490);
 804b484:	50                   	push   %eax
 804b485:	50                   	push   %eax
 804b486:	68 ea 01 00 00       	push   $0x1ea
 804b48b:	68 c8 70 06 08       	push   $0x80670c8
 804b490:	e8 2b ac 00 00       	call   80560c0 <report_label_coverage>
 804b495:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804b49a:	83 c4 10             	add    $0x10,%esp
 804b49d:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 491
if((optind >= argc) != (optind < argc))  {asm volatile (""::: "memory");
 804b4a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b4a4:	89 3c 24             	mov    %edi,(%esp)
 804b4a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b4ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b4af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b4b3:	b9 9a bd 00 00       	mov    $0xbd9a,%ecx
 804b4b8:	e8 9b d2 00 00       	call   8058758 <__afl_maybe_log>
 804b4bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b4c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b4c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b4c9:	8b 3c 24             	mov    (%esp),%edi
 804b4cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b4d0:	8b 7d 94             	mov    -0x6c(%ebp),%edi
 804b4d3:	39 f8                	cmp    %edi,%eax
 804b4d5:	0f 9d c3             	setge  %bl
 804b4d8:	39 c7                	cmp    %eax,%edi
 804b4da:	0f 9f c2             	setg   %dl
 804b4dd:	38 d3                	cmp    %dl,%bl
 804b4df:	74 4c                	je     804b52d <main+0x1fed>
 804b4e1:	8d 76 00             	lea    0x0(%esi),%esi
 804b4e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b4e8:	89 3c 24             	mov    %edi,(%esp)
 804b4eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b4ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b4f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b4f7:	b9 b8 d0 00 00       	mov    $0xd0b8,%ecx
 804b4fc:	e8 57 d2 00 00       	call   8058758 <__afl_maybe_log>
 804b501:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b505:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b509:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b50d:	8b 3c 24             	mov    (%esp),%edi
 804b510:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 491);
 804b514:	50                   	push   %eax
 804b515:	50                   	push   %eax
 804b516:	68 eb 01 00 00       	push   $0x1eb
 804b51b:	68 c8 70 06 08       	push   $0x80670c8
 804b520:	e8 9b ab 00 00       	call   80560c0 <report_label_coverage>
 804b525:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804b52a:	83 c4 10             	add    $0x10,%esp
 804b52d:	8d 76 00             	lea    0x0(%esi),%esi
}
for (; optind < argc; ++optind)
 804b530:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b534:	89 3c 24             	mov    %edi,(%esp)
 804b537:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b53b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b53f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b543:	b9 07 a0 00 00       	mov    $0xa007,%ecx
 804b548:	e8 0b d2 00 00       	call   8058758 <__afl_maybe_log>
 804b54d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b551:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b555:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b559:	8b 3c 24             	mov    (%esp),%edi
 804b55c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b560:	39 45 94             	cmp    %eax,-0x6c(%ebp)
static inline void *
ptr_align (void const *ptr, size_t alignment)
{
  char const *p0 = ptr;
  char const *p1 = p0 + alignment - 1;
  return (void *) (p1 - (size_t) p1 % alignment);
 804b563:	c6 85 62 ff ff ff 01 	movb   $0x1,-0x9e(%ebp)
 804b56a:	0f 8e 08 0b 00 00    	jle    804c078 <main+0x2b38>
 804b570:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b574:	89 3c 24             	mov    %edi,(%esp)
 804b577:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b57b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b57f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b583:	b9 91 27 00 00       	mov    $0x2791,%ecx
 804b588:	e8 cb d1 00 00       	call   8058758 <__afl_maybe_log>
 804b58d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b591:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b595:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b599:	8b 3c 24             	mov    (%esp),%edi
 804b59c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b5a0:	8d 75 d7             	lea    -0x29(%ebp),%esi
 804b5a3:	83 e6 03             	and    $0x3,%esi
 804b5a6:	89 b5 3c ff ff ff    	mov    %esi,-0xc4(%ebp)
 804b5ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
// ABS Label 497
if(argv[optind] < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 497);
}
// ABS Label 498
if(optind < 0)  {asm volatile (""::: "memory");
 804b5b0:	85 c0                	test   %eax,%eax
 804b5b2:	0f 88 83 7b 00 00    	js     805313b <main+0x9bfb>
 804b5b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b5bc:	89 3c 24             	mov    %edi,(%esp)
 804b5bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b5c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b5c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b5cb:	b9 03 33 00 00       	mov    $0x3303,%ecx
 804b5d0:	e8 83 d1 00 00       	call   8058758 <__afl_maybe_log>
 804b5d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b5d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b5dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b5e1:	8b 3c 24             	mov    (%esp),%edi
 804b5e4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 498);
}
char *file = argv[optind];
 804b5e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b5ec:	89 3c 24             	mov    %edi,(%esp)
 804b5ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b5f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b5f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b5fb:	b9 a6 b9 00 00       	mov    $0xb9a6,%ecx
 804b600:	e8 53 d1 00 00       	call   8058758 <__afl_maybe_log>
 804b605:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b609:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b60d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b611:	8b 3c 24             	mov    (%esp),%edi
 804b614:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b618:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804b61d:	8b 4d 90             	mov    -0x70(%ebp),%ecx
      
// ABS Label 499
if(do_check < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 499);
}
if (do_check)
 804b620:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
}
// ABS Label 498
if(optind < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 498);
}
char *file = argv[optind];
 804b627:	8b 3c 81             	mov    (%ecx,%eax,4),%edi
 804b62a:	89 7d 80             	mov    %edi,-0x80(%ebp)
      
// ABS Label 499
if(do_check < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 499);
}
if (do_check)
 804b62d:	0f 85 85 0f 00 00    	jne    804c5b8 <main+0x3078>
 804b633:	90                   	nop
 804b634:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b638:	89 3c 24             	mov    %edi,(%esp)
 804b63b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b63f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b643:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b647:	b9 4b fb 00 00       	mov    $0xfb4b,%ecx
 804b64c:	e8 07 d1 00 00       	call   8058758 <__afl_maybe_log>
 804b651:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b655:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b659:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b65d:	8b 3c 24             	mov    (%esp),%edi
 804b660:	8d 64 24 10          	lea    0x10(%esp),%esp
          
// ABS Label 500
if(binary < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 500);
}
int file_is_binary = binary;
 804b664:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx

          {
    int temp_1 = !digest_file(file, &file_is_binary, bin_buffer);
 804b66a:	8b 45 80             	mov    -0x80(%ebp),%eax
 804b66d:	8d 4d c0             	lea    -0x40(%ebp),%ecx
 804b670:	8d 55 d4             	lea    -0x2c(%ebp),%edx
          
// ABS Label 500
if(binary < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 500);
}
int file_is_binary = binary;
 804b673:	89 5d d4             	mov    %ebx,-0x2c(%ebp)

          {
    int temp_1 = !digest_file(file, &file_is_binary, bin_buffer);
 804b676:	e8 55 bd 00 00       	call   80573d0 <digest_file>
    
// ABS Label 501
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 501);
}
if (temp_1)
 804b67b:	84 c0                	test   %al,%al
 804b67d:	0f 84 f9 0e 00 00    	je     804c57c <main+0x303c>
 804b683:	90                   	nop
 804b684:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b688:	89 3c 24             	mov    %edi,(%esp)
 804b68b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b68f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b693:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b697:	b9 4f c9 00 00       	mov    $0xc94f,%ecx
 804b69c:	e8 b7 d0 00 00       	call   8058758 <__afl_maybe_log>
 804b6a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b6a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b6a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b6ad:	8b 3c 24             	mov    (%esp),%edi
 804b6b0:	8d 64 24 10          	lea    0x10(%esp),%esp
        ok = 0;
    else {
        _Bool needs_escape = strchr(file, '\\') || strchr(file, '\n');
 804b6b4:	53                   	push   %ebx
 804b6b5:	53                   	push   %ebx
 804b6b6:	6a 5c                	push   $0x5c
 804b6b8:	ff 75 80             	pushl  -0x80(%ebp)
 804b6bb:	e8 80 dc ff ff       	call   8049340 <strchr@plt>
 804b6c0:	83 c4 10             	add    $0x10,%esp
 804b6c3:	85 c0                	test   %eax,%eax
 804b6c5:	0f 84 77 8e 00 00    	je     8054542 <main+0xb002>
 804b6cb:	90                   	nop
 804b6cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b6d0:	89 3c 24             	mov    %edi,(%esp)
 804b6d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b6d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b6db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b6df:	b9 bc f2 00 00       	mov    $0xf2bc,%ecx
 804b6e4:	e8 6f d0 00 00       	call   8058758 <__afl_maybe_log>
 804b6e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b6ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b6f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b6f5:	8b 3c 24             	mov    (%esp),%edi
 804b6f8:	8d 64 24 10          	lea    0x10(%esp),%esp
        
// ABS Label 502
if(prefix_tag < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 502);
}
if (prefix_tag) {
 804b6fc:	80 bd 7e ff ff ff 00 	cmpb   $0x0,-0x82(%ebp)
	report_label_coverage("ABS", 501);
}
if (temp_1)
        ok = 0;
    else {
        _Bool needs_escape = strchr(file, '\\') || strchr(file, '\n');
 804b703:	bb 01 00 00 00       	mov    $0x1,%ebx
 804b708:	be 01 00 00 00       	mov    $0x1,%esi
        
// ABS Label 502
if(prefix_tag < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 502);
}
if (prefix_tag) {
 804b70d:	0f 84 5e 89 00 00    	je     8054071 <main+0xab31>
 804b713:	90                   	nop
 804b714:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b718:	89 3c 24             	mov    %edi,(%esp)
 804b71b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b71f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b723:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b727:	b9 8e ee 00 00       	mov    $0xee8e,%ecx
 804b72c:	e8 27 d0 00 00       	call   8058758 <__afl_maybe_log>
 804b731:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b735:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b739:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b73d:	8b 3c 24             	mov    (%esp),%edi
 804b740:	8d 64 24 10          	lea    0x10(%esp),%esp

/* This is defined in POSIX.1:1996.  */
__STDIO_INLINE int
putchar_unlocked (int __c)
{
  return _IO_putc_unlocked (__c, stdout);
 804b744:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b748:	89 3c 24             	mov    %edi,(%esp)
 804b74b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b74f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b753:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b757:	b9 f3 51 00 00       	mov    $0x51f3,%ecx
 804b75c:	e8 f7 cf 00 00       	call   8058758 <__afl_maybe_log>
 804b761:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b765:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b769:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b76d:	8b 3c 24             	mov    (%esp),%edi
 804b770:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b774:	a1 d8 b2 06 08       	mov    0x806b2d8,%eax
 804b779:	8b 50 14             	mov    0x14(%eax),%edx
 804b77c:	3b 50 18             	cmp    0x18(%eax),%edx
 804b77f:	0f 83 d8 a3 00 00    	jae    8055b5d <main+0xc61d>
 804b785:	8d 76 00             	lea    0x0(%esi),%esi
 804b788:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b78c:	89 3c 24             	mov    %edi,(%esp)
 804b78f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b793:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b797:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b79b:	b9 85 9c 00 00       	mov    $0x9c85,%ecx
 804b7a0:	e8 b3 cf 00 00       	call   8058758 <__afl_maybe_log>
 804b7a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b7a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b7ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b7b1:	8b 3c 24             	mov    (%esp),%edi
 804b7b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b7b8:	8d 4a 01             	lea    0x1(%edx),%ecx
 804b7bb:	be 01 00 00 00       	mov    $0x1,%esi
 804b7c0:	89 48 14             	mov    %ecx,0x14(%eax)
 804b7c3:	c6 02 5c             	movb   $0x5c,(%edx)
 804b7c6:	66 90                	xchg   %ax,%ax
if(needs_escape < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 506);
}
if (needs_escape)
                putchar_unlocked('\\');
            fputs_unlocked(DIGEST_TYPE_STRING, stdout);
 804b7c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b7cc:	89 3c 24             	mov    %edi,(%esp)
 804b7cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b7d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b7d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b7db:	b9 a0 d6 00 00       	mov    $0xd6a0,%ecx
 804b7e0:	e8 73 cf 00 00       	call   8058758 <__afl_maybe_log>
 804b7e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b7e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b7ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b7f1:	8b 3c 24             	mov    (%esp),%edi
 804b7f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b7f8:	ff 35 d8 b2 06 08    	pushl  0x806b2d8
 804b7fe:	6a 03                	push   $0x3
 804b800:	6a 01                	push   $0x1
 804b802:	68 eb 70 06 08       	push   $0x80670eb
 804b807:	e8 f4 db ff ff       	call   8049400 <fwrite_unlocked@plt>
            
// ABS Label 503
if(stdout < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 503);
}
fputs_unlocked(" (", stdout);
 804b80c:	ff 35 d8 b2 06 08    	pushl  0x806b2d8
 804b812:	6a 02                	push   $0x2
 804b814:	6a 01                	push   $0x1
 804b816:	68 29 72 06 08       	push   $0x8067229
 804b81b:	e8 e0 db ff ff       	call   8049400 <fwrite_unlocked@plt>
            
// ABS Label 504
if(needs_escape < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 504);
}
print_filename(file, needs_escape);
 804b820:	8b 45 80             	mov    -0x80(%ebp),%eax
 804b823:	83 c4 20             	add    $0x20,%esp
 804b826:	89 f2                	mov    %esi,%edx
 804b828:	e8 03 b1 00 00       	call   8056930 <print_filename>
            
// ABS Label 505
if(stdout < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 505);
}
fputs_unlocked(") = ", stdout);
 804b82d:	ff 35 d8 b2 06 08    	pushl  0x806b2d8
 804b833:	6a 04                	push   $0x4
 804b835:	6a 01                	push   $0x1
 804b837:	68 2c 72 06 08       	push   $0x806722c
 804b83c:	e8 bf db ff ff       	call   8049400 <fwrite_unlocked@plt>
        }
        size_t i;
        
// COR Label 507
if((!prefix_tag || needs_escape) != (!prefix_tag && needs_escape))  {asm volatile (""::: "memory");
 804b841:	0f b6 85 7e ff ff ff 	movzbl -0x82(%ebp),%eax
 804b848:	89 da                	mov    %ebx,%edx
 804b84a:	83 c4 10             	add    $0x10,%esp
 804b84d:	83 f0 01             	xor    $0x1,%eax
 804b850:	09 c2                	or     %eax,%edx
 804b852:	21 d8                	and    %ebx,%eax
 804b854:	38 c2                	cmp    %al,%dl
 804b856:	0f 84 e0 00 00 00    	je     804b93c <main+0x23fc>
 804b85c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b860:	89 3c 24             	mov    %edi,(%esp)
 804b863:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b867:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b86b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b86f:	b9 c0 35 00 00       	mov    $0x35c0,%ecx
 804b874:	e8 df ce 00 00       	call   8058758 <__afl_maybe_log>
 804b879:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b87d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b881:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b885:	8b 3c 24             	mov    (%esp),%edi
 804b888:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 507);
 804b88c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b890:	89 3c 24             	mov    %edi,(%esp)
 804b893:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b897:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b89b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b89f:	b9 57 f1 00 00       	mov    $0xf157,%ecx
 804b8a4:	e8 af ce 00 00       	call   8058758 <__afl_maybe_log>
 804b8a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b8ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b8b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b8b5:	8b 3c 24             	mov    (%esp),%edi
 804b8b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b8bc:	50                   	push   %eax
 804b8bd:	50                   	push   %eax
 804b8be:	68 fb 01 00 00       	push   $0x1fb
 804b8c3:	68 da 70 06 08       	push   $0x80670da
 804b8c8:	e8 f3 a7 00 00       	call   80560c0 <report_label_coverage>
 804b8cd:	83 c4 10             	add    $0x10,%esp
}

// MCC Label 508
if(!prefix_tag && needs_escape ) {asm volatile (""::: "memory");
 804b8d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b8d4:	89 3c 24             	mov    %edi,(%esp)
 804b8d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b8db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b8df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b8e3:	b9 39 5c 00 00       	mov    $0x5c39,%ecx
 804b8e8:	e8 6b ce 00 00       	call   8058758 <__afl_maybe_log>
 804b8ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b8f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b8f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b8f9:	8b 3c 24             	mov    (%esp),%edi
 804b8fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b900:	3a 9d 7e ff ff ff    	cmp    -0x82(%ebp),%bl
 804b906:	0f 87 65 87 00 00    	ja     8054071 <main+0xab31>
 804b90c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b910:	89 3c 24             	mov    %edi,(%esp)
 804b913:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b91b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b91f:	b9 a4 26 00 00       	mov    $0x26a4,%ecx
 804b924:	e8 2f ce 00 00       	call   8058758 <__afl_maybe_log>
 804b929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b92d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b931:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b935:	8b 3c 24             	mov    (%esp),%edi
 804b938:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 508);
}
// MCC Label 509
if(!prefix_tag && !(needs_escape) ) {asm volatile (""::: "memory");
 804b93c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b940:	89 3c 24             	mov    %edi,(%esp)
 804b943:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b947:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b94b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b94f:	b9 f7 b5 00 00       	mov    $0xb5f7,%ecx
 804b954:	e8 ff cd 00 00       	call   8058758 <__afl_maybe_log>
 804b959:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b95d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b961:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b965:	8b 3c 24             	mov    (%esp),%edi
 804b968:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b96c:	89 d9                	mov    %ebx,%ecx
 804b96e:	83 f1 01             	xor    $0x1,%ecx
 804b971:	3a 8d 7e ff ff ff    	cmp    -0x82(%ebp),%cl
 804b977:	0f 87 a8 86 00 00    	ja     8054025 <main+0xaae5>
 804b97d:	8d 76 00             	lea    0x0(%esi),%esi
 804b980:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b984:	89 3c 24             	mov    %edi,(%esp)
 804b987:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b98b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b98f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b993:	b9 d2 d8 00 00       	mov    $0xd8d2,%ecx
 804b998:	e8 bb cd 00 00       	call   8058758 <__afl_maybe_log>
 804b99d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b9a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b9a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b9a9:	8b 3c 24             	mov    (%esp),%edi
 804b9ac:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 509);
}
// MCC Label 510
if(!(!prefix_tag) && needs_escape ) {asm volatile (""::: "memory");
 804b9b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b9b4:	89 3c 24             	mov    %edi,(%esp)
 804b9b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b9bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b9bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b9c3:	b9 fd 2c 00 00       	mov    $0x2cfd,%ecx
 804b9c8:	e8 8b cd 00 00       	call   8058758 <__afl_maybe_log>
 804b9cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b9d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b9d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b9d9:	8b 3c 24             	mov    (%esp),%edi
 804b9dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b9e0:	84 db                	test   %bl,%bl
 804b9e2:	0f 84 fd 70 00 00    	je     8052ae5 <main+0x95a5>
 804b9e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b9ec:	89 3c 24             	mov    %edi,(%esp)
 804b9ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b9f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b9f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b9fb:	b9 60 c5 00 00       	mov    $0xc560,%ecx
 804ba00:	e8 53 cd 00 00       	call   8058758 <__afl_maybe_log>
 804ba05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ba09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ba0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ba11:	8b 3c 24             	mov    (%esp),%edi
 804ba14:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ba18:	80 bd 7e ff ff ff 00 	cmpb   $0x0,-0x82(%ebp)
 804ba1f:	0f 85 b4 85 00 00    	jne    8053fd9 <main+0xaa99>
 804ba25:	8d 76 00             	lea    0x0(%esi),%esi
 804ba28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ba2c:	89 3c 24             	mov    %edi,(%esp)
 804ba2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ba33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ba37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ba3b:	b9 74 16 00 00       	mov    $0x1674,%ecx
 804ba40:	e8 13 cd 00 00       	call   8058758 <__afl_maybe_log>
 804ba45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ba49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ba4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ba51:	8b 3c 24             	mov    (%esp),%edi
 804ba54:	8d 64 24 10          	lea    0x10(%esp),%esp
}
// MCC Label 511
if(!(!prefix_tag) && !(needs_escape) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 511);
}
if (!prefix_tag && needs_escape)
 804ba58:	80 fb 00             	cmp    $0x0,%bl
 804ba5b:	0f 86 80 00 00 00    	jbe    804bae1 <main+0x25a1>
 804ba61:	8d 76 00             	lea    0x0(%esi),%esi
 804ba64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ba68:	89 3c 24             	mov    %edi,(%esp)
 804ba6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ba6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ba73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ba77:	b9 0f 47 00 00       	mov    $0x470f,%ecx
 804ba7c:	e8 d7 cc 00 00       	call   8058758 <__afl_maybe_log>
 804ba81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ba85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ba89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ba8d:	8b 3c 24             	mov    (%esp),%edi
 804ba90:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ba94:	8b 3d d8 b2 06 08    	mov    0x806b2d8,%edi
 804ba9a:	8b 5f 14             	mov    0x14(%edi),%ebx
 804ba9d:	3b 5f 18             	cmp    0x18(%edi),%ebx
 804baa0:	0f 83 8b 98 00 00    	jae    8055331 <main+0xbdf1>
 804baa6:	66 90                	xchg   %ax,%ax
 804baa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804baac:	89 3c 24             	mov    %edi,(%esp)
 804baaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bab3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bab7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804babb:	b9 57 8f 00 00       	mov    $0x8f57,%ecx
 804bac0:	e8 93 cc 00 00       	call   8058758 <__afl_maybe_log>
 804bac5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bac9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bacd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bad1:	8b 3c 24             	mov    (%esp),%edi
 804bad4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bad8:	8d 43 01             	lea    0x1(%ebx),%eax
 804badb:	89 47 14             	mov    %eax,0x14(%edi)
 804bade:	c6 03 5c             	movb   $0x5c,(%ebx)
 804bae1:	8d 76 00             	lea    0x0(%esi),%esi
if(i < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 512);
}

// ROR Label 513
if((i <= (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
 804bae4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bae8:	89 3c 24             	mov    %edi,(%esp)
 804baeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804baef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804baf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804baf7:	b9 02 a1 00 00       	mov    $0xa102,%ecx
 804bafc:	e8 57 cc 00 00       	call   8058758 <__afl_maybe_log>
 804bb01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bb05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bb09:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bb0d:	8b 3c 24             	mov    (%esp),%edi
 804bb10:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bb14:	83 3d 04 b3 06 08 01 	cmpl   $0x1,0x806b304
 804bb1b:	0f 86 64 76 00 00    	jbe    8053185 <main+0x9c45>
 804bb21:	8d 76 00             	lea    0x0(%esi),%esi
 804bb24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bb28:	89 3c 24             	mov    %edi,(%esp)
 804bb2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bb2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bb33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bb37:	b9 a0 94 00 00       	mov    $0x94a0,%ecx
 804bb3c:	e8 17 cc 00 00       	call   8058758 <__afl_maybe_log>
 804bb41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bb45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bb49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bb4d:	8b 3c 24             	mov    (%esp),%edi
 804bb50:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 513);
}
// ROR Label 514
if((i > (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 514);
 804bb54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bb58:	89 3c 24             	mov    %edi,(%esp)
 804bb5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bb5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bb63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bb67:	b9 1f cb 00 00       	mov    $0xcb1f,%ecx
 804bb6c:	e8 e7 cb 00 00       	call   8058758 <__afl_maybe_log>
 804bb71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bb75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bb79:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bb7d:	8b 3c 24             	mov    (%esp),%edi
 804bb80:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bb84:	50                   	push   %eax
 804bb85:	50                   	push   %eax
 804bb86:	68 02 02 00 00       	push   $0x202
 804bb8b:	68 c8 70 06 08       	push   $0x80670c8
 804bb90:	e8 2b a5 00 00       	call   80560c0 <report_label_coverage>
}
// ROR Label 515
if((i >= (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
 804bb95:	8b 3d 04 b3 06 08    	mov    0x806b304,%edi
 804bb9b:	83 c4 10             	add    $0x10,%esp
 804bb9e:	83 ff 01             	cmp    $0x1,%edi
 804bba1:	0f 96 c1             	setbe  %cl
 804bba4:	0f 97 c2             	seta   %dl
 804bba7:	38 d1                	cmp    %dl,%cl
 804bba9:	0f 85 5d 76 00 00    	jne    805320c <main+0x9ccc>
 804bbaf:	90                   	nop
 804bbb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bbb4:	89 3c 24             	mov    %edi,(%esp)
 804bbb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bbbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bbbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bbc3:	b9 0d 4c 00 00       	mov    $0x4c0d,%ecx
 804bbc8:	e8 8b cb 00 00       	call   8058758 <__afl_maybe_log>
 804bbcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bbd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bbd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bbd9:	8b 3c 24             	mov    (%esp),%edi
 804bbdc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 515);
}
for (; i < (digest_hex_bytes / 2); ++i)
 804bbe0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bbe4:	89 3c 24             	mov    %edi,(%esp)
 804bbe7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bbeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bbef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bbf3:	b9 4b 21 00 00       	mov    $0x214b,%ecx
 804bbf8:	e8 5b cb 00 00       	call   8058758 <__afl_maybe_log>
 804bbfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bc01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bc05:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bc09:	8b 3c 24             	mov    (%esp),%edi
 804bc0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bc10:	31 db                	xor    %ebx,%ebx
 804bc12:	d1 ef                	shr    %edi
 804bc14:	0f 84 70 72 00 00    	je     8052e8a <main+0x994a>
 804bc1a:	66 90                	xchg   %ax,%ax
 804bc1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bc20:	89 3c 24             	mov    %edi,(%esp)
 804bc23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bc27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bc2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bc2f:	b9 5e 40 00 00       	mov    $0x405e,%ecx
 804bc34:	e8 1f cb 00 00       	call   8058758 <__afl_maybe_log>
 804bc39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bc3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bc41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bc45:	8b 3c 24             	mov    (%esp),%edi
 804bc48:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bc4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
            printf("%02x", bin_buffer[i]);
 804bc50:	0f b6 44 1d c0       	movzbl -0x40(%ebp,%ebx,1),%eax
 804bc55:	83 ec 08             	sub    $0x8,%esp
}
// ROR Label 515
if((i >= (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 515);
}
for (; i < (digest_hex_bytes / 2); ++i)
 804bc58:	83 c3 01             	add    $0x1,%ebx
            printf("%02x", bin_buffer[i]);
 804bc5b:	50                   	push   %eax
 804bc5c:	68 31 72 06 08       	push   $0x8067231
 804bc61:	e8 ca d4 ff ff       	call   8049130 <printf@plt>
}
// ROR Label 515
if((i >= (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 515);
}
for (; i < (digest_hex_bytes / 2); ++i)
 804bc66:	a1 04 b3 06 08       	mov    0x806b304,%eax
 804bc6b:	83 c4 10             	add    $0x10,%esp
 804bc6e:	89 c1                	mov    %eax,%ecx
 804bc70:	d1 e9                	shr    %ecx
 804bc72:	39 d9                	cmp    %ebx,%ecx
 804bc74:	77 da                	ja     804bc50 <main+0x2710>
 804bc76:	66 90                	xchg   %ax,%ax
 804bc78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bc7c:	89 3c 24             	mov    %edi,(%esp)
 804bc7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bc83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bc87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bc8b:	b9 98 9c 00 00       	mov    $0x9c98,%ecx
 804bc90:	e8 c3 ca 00 00       	call   8058758 <__afl_maybe_log>
 804bc95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bc99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bc9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bca1:	8b 3c 24             	mov    (%esp),%edi
 804bca4:	8d 64 24 10          	lea    0x10(%esp),%esp
if(i < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 516);
}

// ROR Label 517
if((i <= (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
 804bca8:	39 cb                	cmp    %ecx,%ebx
 804bcaa:	0f 96 c1             	setbe  %cl
 804bcad:	0f 92 c2             	setb   %dl
 804bcb0:	38 d1                	cmp    %dl,%cl
 804bcb2:	0f 85 d2 71 00 00    	jne    8052e8a <main+0x994a>
 804bcb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bcbc:	89 3c 24             	mov    %edi,(%esp)
 804bcbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bcc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bcc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bccb:	b9 5e fe 00 00       	mov    $0xfe5e,%ecx
 804bcd0:	e8 83 ca 00 00       	call   8058758 <__afl_maybe_log>
 804bcd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bcd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bcdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bce1:	8b 3c 24             	mov    (%esp),%edi
 804bce4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 517);
}
// ROR Label 518
if((i > (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
 804bce8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bcec:	89 3c 24             	mov    %edi,(%esp)
 804bcef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bcf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bcf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bcfb:	b9 8a de 00 00       	mov    $0xde8a,%ecx
 804bd00:	e8 53 ca 00 00       	call   8058758 <__afl_maybe_log>
 804bd05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bd09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bd0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bd11:	8b 3c 24             	mov    (%esp),%edi
 804bd14:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bd18:	89 c7                	mov    %eax,%edi
 804bd1a:	d1 ef                	shr    %edi
 804bd1c:	39 df                	cmp    %ebx,%edi
 804bd1e:	0f 92 c1             	setb   %cl
 804bd21:	39 fb                	cmp    %edi,%ebx
 804bd23:	0f 92 c2             	setb   %dl
 804bd26:	38 d1                	cmp    %dl,%cl
 804bd28:	74 4b                	je     804bd75 <main+0x2835>
 804bd2a:	66 90                	xchg   %ax,%ax
 804bd2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bd30:	89 3c 24             	mov    %edi,(%esp)
 804bd33:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bd37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bd3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bd3f:	b9 ab 26 00 00       	mov    $0x26ab,%ecx
 804bd44:	e8 0f ca 00 00       	call   8058758 <__afl_maybe_log>
 804bd49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bd4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bd51:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bd55:	8b 3c 24             	mov    (%esp),%edi
 804bd58:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 518);
 804bd5c:	50                   	push   %eax
 804bd5d:	50                   	push   %eax
 804bd5e:	68 06 02 00 00       	push   $0x206
 804bd63:	68 c8 70 06 08       	push   $0x80670c8
 804bd68:	e8 53 a3 00 00       	call   80560c0 <report_label_coverage>
 804bd6d:	a1 04 b3 06 08       	mov    0x806b304,%eax
 804bd72:	83 c4 10             	add    $0x10,%esp
 804bd75:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 519
if((i >= (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
 804bd78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bd7c:	89 3c 24             	mov    %edi,(%esp)
 804bd7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bd83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bd87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bd8b:	b9 8f 2e 00 00       	mov    $0x2e8f,%ecx
 804bd90:	e8 c3 c9 00 00       	call   8058758 <__afl_maybe_log>
 804bd95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bd99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bd9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bda1:	8b 3c 24             	mov    (%esp),%edi
 804bda4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bda8:	d1 e8                	shr    %eax
 804bdaa:	39 d8                	cmp    %ebx,%eax
 804bdac:	0f 96 c1             	setbe  %cl
 804bdaf:	39 c3                	cmp    %eax,%ebx
 804bdb1:	0f 92 c3             	setb   %bl
 804bdb4:	38 d9                	cmp    %bl,%cl
 804bdb6:	74 44                	je     804bdfc <main+0x28bc>
 804bdb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bdbc:	89 3c 24             	mov    %edi,(%esp)
 804bdbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bdc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bdc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bdcb:	b9 b1 8c 00 00       	mov    $0x8cb1,%ecx
 804bdd0:	e8 83 c9 00 00       	call   8058758 <__afl_maybe_log>
 804bdd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bdd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bddd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bde1:	8b 3c 24             	mov    (%esp),%edi
 804bde4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 519);
 804bde8:	57                   	push   %edi
 804bde9:	57                   	push   %edi
 804bdea:	68 07 02 00 00       	push   $0x207
 804bdef:	68 c8 70 06 08       	push   $0x80670c8
 804bdf4:	e8 c7 a2 00 00       	call   80560c0 <report_label_coverage>
 804bdf9:	83 c4 10             	add    $0x10,%esp
}
;
        if (!prefix_tag) {
 804bdfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804be00:	89 3c 24             	mov    %edi,(%esp)
 804be03:	89 54 24 04          	mov    %edx,0x4(%esp)
 804be07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804be0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804be0f:	b9 f5 48 00 00       	mov    $0x48f5,%ecx
 804be14:	e8 3f c9 00 00       	call   8058758 <__afl_maybe_log>
 804be19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804be1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804be21:	8b 54 24 04          	mov    0x4(%esp),%edx
 804be25:	8b 3c 24             	mov    (%esp),%edi
 804be28:	8d 64 24 10          	lea    0x10(%esp),%esp
 804be2c:	80 bd 7e ff ff ff 00 	cmpb   $0x0,-0x82(%ebp)
 804be33:	0f 85 45 01 00 00    	jne    804bf7e <main+0x2a3e>
 804be39:	8d 76 00             	lea    0x0(%esi),%esi
 804be3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804be40:	89 3c 24             	mov    %edi,(%esp)
 804be43:	89 54 24 04          	mov    %edx,0x4(%esp)
 804be47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804be4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804be4f:	b9 42 5c 00 00       	mov    $0x5c42,%ecx
 804be54:	e8 ff c8 00 00       	call   8058758 <__afl_maybe_log>
 804be59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804be5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804be61:	8b 54 24 04          	mov    0x4(%esp),%edx
 804be65:	8b 3c 24             	mov    (%esp),%edi
 804be68:	8d 64 24 10          	lea    0x10(%esp),%esp
 804be6c:	8b 3d d8 b2 06 08    	mov    0x806b2d8,%edi
 804be72:	8b 57 14             	mov    0x14(%edi),%edx
 804be75:	3b 57 18             	cmp    0x18(%edi),%edx
 804be78:	0f 83 db 93 00 00    	jae    8055259 <main+0xbd19>
 804be7e:	66 90                	xchg   %ax,%ax
 804be80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804be84:	89 3c 24             	mov    %edi,(%esp)
 804be87:	89 54 24 04          	mov    %edx,0x4(%esp)
 804be8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804be8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804be93:	b9 b4 dc 00 00       	mov    $0xdcb4,%ecx
 804be98:	e8 bb c8 00 00       	call   8058758 <__afl_maybe_log>
 804be9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bea1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bea5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bea9:	8b 3c 24             	mov    (%esp),%edi
 804beac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804beb0:	8d 42 01             	lea    0x1(%edx),%eax
 804beb3:	89 47 14             	mov    %eax,0x14(%edi)
 804beb6:	c6 02 20             	movb   $0x20,(%edx)
 804beb9:	8d 76 00             	lea    0x0(%esi),%esi
            putchar_unlocked(' ');
            putchar_unlocked(file_is_binary ? '*' : ' ');
 804bebc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bec0:	89 3c 24             	mov    %edi,(%esp)
 804bec3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bec7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804becb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804becf:	b9 bb c9 00 00       	mov    $0xc9bb,%ecx
 804bed4:	e8 7f c8 00 00       	call   8058758 <__afl_maybe_log>
 804bed9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bedd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bee1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bee5:	8b 3c 24             	mov    (%esp),%edi
 804bee8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804beec:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
 804bef0:	8b 3d d8 b2 06 08    	mov    0x806b2d8,%edi
 804bef6:	8b 4f 14             	mov    0x14(%edi),%ecx
 804bef9:	19 c0                	sbb    %eax,%eax
 804befb:	83 e0 f6             	and    $0xfffffff6,%eax
 804befe:	83 c0 2a             	add    $0x2a,%eax
 804bf01:	3b 4f 18             	cmp    0x18(%edi),%ecx
 804bf04:	0f 83 0d 93 00 00    	jae    8055217 <main+0xbcd7>
 804bf0a:	66 90                	xchg   %ax,%ax
 804bf0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bf10:	89 3c 24             	mov    %edi,(%esp)
 804bf13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bf17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bf1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bf1f:	b9 ae 2a 00 00       	mov    $0x2aae,%ecx
 804bf24:	e8 2f c8 00 00       	call   8058758 <__afl_maybe_log>
 804bf29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bf2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bf31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bf35:	8b 3c 24             	mov    (%esp),%edi
 804bf38:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bf3c:	8d 59 01             	lea    0x1(%ecx),%ebx
 804bf3f:	89 5f 14             	mov    %ebx,0x14(%edi)
 804bf42:	88 01                	mov    %al,(%ecx)
            
// ABS Label 520
if(needs_escape < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 520);
}
print_filename(file, needs_escape);
 804bf44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bf48:	89 3c 24             	mov    %edi,(%esp)
 804bf4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bf4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bf53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bf57:	b9 b8 25 00 00       	mov    $0x25b8,%ecx
 804bf5c:	e8 f7 c7 00 00       	call   8058758 <__afl_maybe_log>
 804bf61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bf65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bf69:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bf6d:	8b 3c 24             	mov    (%esp),%edi
 804bf70:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bf74:	8b 45 80             	mov    -0x80(%ebp),%eax
 804bf77:	89 f2                	mov    %esi,%edx
 804bf79:	e8 b2 a9 00 00       	call   8056930 <print_filename>
 804bf7e:	66 90                	xchg   %ax,%ax
 804bf80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bf84:	89 3c 24             	mov    %edi,(%esp)
 804bf87:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bf8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bf8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bf93:	b9 be 08 00 00       	mov    $0x8be,%ecx
 804bf98:	e8 bb c7 00 00       	call   8058758 <__afl_maybe_log>
 804bf9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bfa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bfa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bfa9:	8b 3c 24             	mov    (%esp),%edi
 804bfac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bfb0:	8b 35 d8 b2 06 08    	mov    0x806b2d8,%esi
 804bfb6:	8b 56 14             	mov    0x14(%esi),%edx
 804bfb9:	3b 56 18             	cmp    0x18(%esi),%edx
 804bfbc:	0f 83 57 8c 00 00    	jae    8054c19 <main+0xb6d9>
 804bfc2:	66 90                	xchg   %ax,%ax
 804bfc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bfc8:	89 3c 24             	mov    %edi,(%esp)
 804bfcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bfcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bfd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bfd7:	b9 1f 7d 00 00       	mov    $0x7d1f,%ecx
 804bfdc:	e8 77 c7 00 00       	call   8058758 <__afl_maybe_log>
 804bfe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bfe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bfe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bfed:	8b 3c 24             	mov    (%esp),%edi
 804bff0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bff4:	8d 42 01             	lea    0x1(%edx),%eax
 804bff7:	89 46 14             	mov    %eax,0x14(%esi)
 804bffa:	c6 02 0a             	movb   $0xa,(%edx)
 804bffd:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 491
if((optind >= argc) != (optind < argc))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 491);
}
for (; optind < argc; ++optind)
 804c000:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c004:	89 3c 24             	mov    %edi,(%esp)
 804c007:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c00b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c00f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c013:	b9 d6 07 00 00       	mov    $0x7d6,%ecx
 804c018:	e8 3b c7 00 00       	call   8058758 <__afl_maybe_log>
 804c01d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c021:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c025:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c029:	8b 3c 24             	mov    (%esp),%edi
 804c02c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c030:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804c035:	83 c0 01             	add    $0x1,%eax
 804c038:	39 45 94             	cmp    %eax,-0x6c(%ebp)
 804c03b:	a3 cc b2 06 08       	mov    %eax,0x806b2cc
 804c040:	0f 8f 6a f5 ff ff    	jg     804b5b0 <main+0x2070>
 804c046:	66 90                	xchg   %ax,%ax
 804c048:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c04c:	89 3c 24             	mov    %edi,(%esp)
 804c04f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c053:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c057:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c05b:	b9 46 62 00 00       	mov    $0x6246,%ecx
 804c060:	e8 f3 c6 00 00       	call   8058758 <__afl_maybe_log>
 804c065:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c069:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c06d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c071:	8b 3c 24             	mov    (%esp),%edi
 804c074:	8d 64 24 10          	lea    0x10(%esp),%esp
}

        }
    };
// ABS Label 492
if(argc < 0)  {asm volatile (""::: "memory");
 804c078:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c07c:	89 3c 24             	mov    %edi,(%esp)
 804c07f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c083:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c087:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c08b:	b9 55 b8 00 00       	mov    $0xb855,%ecx
 804c090:	e8 c3 c6 00 00       	call   8058758 <__afl_maybe_log>
 804c095:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c099:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c09d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c0a1:	8b 3c 24             	mov    (%esp),%edi
 804c0a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c0a8:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
 804c0ac:	0f 88 d7 94 00 00    	js     8055589 <main+0xc049>
 804c0b2:	66 90                	xchg   %ax,%ax
 804c0b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c0b8:	89 3c 24             	mov    %edi,(%esp)
 804c0bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c0bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c0c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c0c7:	b9 47 f2 00 00       	mov    $0xf247,%ecx
 804c0cc:	e8 87 c6 00 00       	call   8058758 <__afl_maybe_log>
 804c0d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c0d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c0d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c0dd:	8b 3c 24             	mov    (%esp),%edi
 804c0e0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 492);
}
// ABS Label 493
if(optind < 0)  {asm volatile (""::: "memory");
 804c0e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c0e8:	89 3c 24             	mov    %edi,(%esp)
 804c0eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c0ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c0f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c0f7:	b9 37 62 00 00       	mov    $0x6237,%ecx
 804c0fc:	e8 57 c6 00 00       	call   8058758 <__afl_maybe_log>
 804c101:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c105:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c109:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c10d:	8b 3c 24             	mov    (%esp),%edi
 804c110:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c114:	83 3d cc b2 06 08 00 	cmpl   $0x0,0x806b2cc
 804c11b:	0f 88 4c 95 00 00    	js     805566d <main+0xc12d>
 804c121:	8d 76 00             	lea    0x0(%esi),%esi
 804c124:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c128:	89 3c 24             	mov    %edi,(%esp)
 804c12b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c12f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c133:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c137:	b9 30 5e 00 00       	mov    $0x5e30,%ecx
 804c13c:	e8 17 c6 00 00       	call   8058758 <__afl_maybe_log>
 804c141:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c145:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c149:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c14d:	8b 3c 24             	mov    (%esp),%edi
 804c150:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 493);
}

// ROR Label 494
if((optind <= argc) != (optind < argc))  {asm volatile (""::: "memory");
 804c154:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c158:	89 3c 24             	mov    %edi,(%esp)
 804c15b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c15f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c163:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c167:	b9 74 4b 00 00       	mov    $0x4b74,%ecx
 804c16c:	e8 e7 c5 00 00       	call   8058758 <__afl_maybe_log>
 804c171:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c175:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c179:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c17d:	8b 3c 24             	mov    (%esp),%edi
 804c180:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c184:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804c189:	8b 55 94             	mov    -0x6c(%ebp),%edx
 804c18c:	39 d0                	cmp    %edx,%eax
 804c18e:	0f 9e c3             	setle  %bl
 804c191:	39 c2                	cmp    %eax,%edx
 804c193:	0f 9f c1             	setg   %cl
 804c196:	38 cb                	cmp    %cl,%bl
 804c198:	74 4b                	je     804c1e5 <main+0x2ca5>
 804c19a:	66 90                	xchg   %ax,%ax
 804c19c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c1a0:	89 3c 24             	mov    %edi,(%esp)
 804c1a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c1a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c1ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c1af:	b9 f9 a5 00 00       	mov    $0xa5f9,%ecx
 804c1b4:	e8 9f c5 00 00       	call   8058758 <__afl_maybe_log>
 804c1b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c1bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c1c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c1c5:	8b 3c 24             	mov    (%esp),%edi
 804c1c8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 494);
 804c1cc:	51                   	push   %ecx
 804c1cd:	51                   	push   %ecx
 804c1ce:	68 ee 01 00 00       	push   $0x1ee
 804c1d3:	68 c8 70 06 08       	push   $0x80670c8
 804c1d8:	e8 e3 9e 00 00       	call   80560c0 <report_label_coverage>
 804c1dd:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804c1e2:	83 c4 10             	add    $0x10,%esp
 804c1e5:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 495
if((optind > argc) != (optind < argc))  {asm volatile (""::: "memory");
 804c1e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c1ec:	89 3c 24             	mov    %edi,(%esp)
 804c1ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c1f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c1f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c1fb:	b9 3e 38 00 00       	mov    $0x383e,%ecx
 804c200:	e8 53 c5 00 00       	call   8058758 <__afl_maybe_log>
 804c205:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c209:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c20d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c211:	8b 3c 24             	mov    (%esp),%edi
 804c214:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c218:	8b 75 94             	mov    -0x6c(%ebp),%esi
 804c21b:	39 f0                	cmp    %esi,%eax
 804c21d:	0f 9f c3             	setg   %bl
 804c220:	39 c6                	cmp    %eax,%esi
 804c222:	0f 9f c2             	setg   %dl
 804c225:	38 d3                	cmp    %dl,%bl
 804c227:	74 4c                	je     804c275 <main+0x2d35>
 804c229:	8d 76 00             	lea    0x0(%esi),%esi
 804c22c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c230:	89 3c 24             	mov    %edi,(%esp)
 804c233:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c237:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c23b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c23f:	b9 23 bd 00 00       	mov    $0xbd23,%ecx
 804c244:	e8 0f c5 00 00       	call   8058758 <__afl_maybe_log>
 804c249:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c24d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c251:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c255:	8b 3c 24             	mov    (%esp),%edi
 804c258:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 495);
 804c25c:	52                   	push   %edx
 804c25d:	52                   	push   %edx
 804c25e:	68 ef 01 00 00       	push   $0x1ef
 804c263:	68 c8 70 06 08       	push   $0x80670c8
 804c268:	e8 53 9e 00 00       	call   80560c0 <report_label_coverage>
 804c26d:	a1 cc b2 06 08       	mov    0x806b2cc,%eax
 804c272:	83 c4 10             	add    $0x10,%esp
 804c275:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 496
if((optind >= argc) != (optind < argc))  {asm volatile (""::: "memory");
 804c278:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c27c:	89 3c 24             	mov    %edi,(%esp)
 804c27f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c283:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c287:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c28b:	b9 49 98 00 00       	mov    $0x9849,%ecx
 804c290:	e8 c3 c4 00 00       	call   8058758 <__afl_maybe_log>
 804c295:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c299:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c29d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c2a1:	8b 3c 24             	mov    (%esp),%edi
 804c2a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c2a8:	8b 7d 94             	mov    -0x6c(%ebp),%edi
 804c2ab:	39 f8                	cmp    %edi,%eax
 804c2ad:	0f 9d c1             	setge  %cl
 804c2b0:	39 c7                	cmp    %eax,%edi
 804c2b2:	0f 9f c3             	setg   %bl
 804c2b5:	38 d9                	cmp    %bl,%cl
 804c2b7:	74 47                	je     804c300 <main+0x2dc0>
 804c2b9:	8d 76 00             	lea    0x0(%esi),%esi
 804c2bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c2c0:	89 3c 24             	mov    %edi,(%esp)
 804c2c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c2c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c2cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c2cf:	b9 8b 6f 00 00       	mov    $0x6f8b,%ecx
 804c2d4:	e8 7f c4 00 00       	call   8058758 <__afl_maybe_log>
 804c2d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c2dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c2e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c2e5:	8b 3c 24             	mov    (%esp),%edi
 804c2e8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 496);
 804c2ec:	50                   	push   %eax
 804c2ed:	50                   	push   %eax
 804c2ee:	68 f0 01 00 00       	push   $0x1f0
 804c2f3:	68 c8 70 06 08       	push   $0x80670c8
 804c2f8:	e8 c3 9d 00 00       	call   80560c0 <report_label_coverage>
 804c2fd:	83 c4 10             	add    $0x10,%esp
  
// ABS Label 521
if(have_read_stdin < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 521);
}
if (have_read_stdin) {
 804c300:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c304:	89 3c 24             	mov    %edi,(%esp)
 804c307:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c30b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c30f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c313:	b9 8f 43 00 00       	mov    $0x438f,%ecx
 804c318:	e8 3b c4 00 00       	call   8058758 <__afl_maybe_log>
 804c31d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c321:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c325:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c329:	8b 3c 24             	mov    (%esp),%edi
 804c32c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c330:	80 3d 0c b3 06 08 00 	cmpb   $0x0,0x806b30c
 804c337:	0f 85 50 8a 00 00    	jne    8054d8d <main+0xb84d>
 804c33d:	8d 76 00             	lea    0x0(%esi),%esi
 804c340:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c344:	89 3c 24             	mov    %edi,(%esp)
 804c347:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c34b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c34f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c353:	b9 cc 1e 00 00       	mov    $0x1ecc,%ecx
 804c358:	e8 fb c3 00 00       	call   8058758 <__afl_maybe_log>
 804c35d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c361:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c365:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c369:	8b 3c 24             	mov    (%esp),%edi
 804c36c:	8d 64 24 10          	lea    0x10(%esp),%esp
if (temp_1 == temp_2)
        error(1, (*__errno_location()), gettext("standard input"));
}
;

  return ok ? EXIT_SUCCESS : EXIT_FAILURE;
 804c370:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c374:	89 3c 24             	mov    %edi,(%esp)
 804c377:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c37b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c37f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c383:	b9 bc 5c 00 00       	mov    $0x5cbc,%ecx
 804c388:	e8 cb c3 00 00       	call   8058758 <__afl_maybe_log>
 804c38d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c391:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c395:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c399:	8b 3c 24             	mov    (%esp),%edi
 804c39c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c3a0:	0f b6 95 62 ff ff ff 	movzbl -0x9e(%ebp),%edx
}
 804c3a7:	8d 65 f0             	lea    -0x10(%ebp),%esp
 804c3aa:	59                   	pop    %ecx
 804c3ab:	5b                   	pop    %ebx
if (temp_1 == temp_2)
        error(1, (*__errno_location()), gettext("standard input"));
}
;

  return ok ? EXIT_SUCCESS : EXIT_FAILURE;
 804c3ac:	83 f2 01             	xor    $0x1,%edx
}
 804c3af:	5e                   	pop    %esi
if (temp_1 == temp_2)
        error(1, (*__errno_location()), gettext("standard input"));
}
;

  return ok ? EXIT_SUCCESS : EXIT_FAILURE;
 804c3b0:	0f b6 c2             	movzbl %dl,%eax
}
 804c3b3:	5f                   	pop    %edi
 804c3b4:	5d                   	pop    %ebp
 804c3b5:	8d 61 fc             	lea    -0x4(%ecx),%esp
 804c3b8:	c3                   	ret    
 804c3b9:	8d 76 00             	lea    0x0(%esi),%esi
 804c3bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c3c0:	89 3c 24             	mov    %edi,(%esp)
 804c3c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c3c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c3cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c3cf:	b9 da d6 00 00       	mov    $0xd6da,%ecx
 804c3d4:	e8 7f c3 00 00       	call   8058758 <__afl_maybe_log>
 804c3d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c3dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c3e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c3e5:	8b 3c 24             	mov    (%esp),%edi
 804c3e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c3ec:	c6 45 9c 01          	movb   $0x1,-0x64(%ebp)
if(binary < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 449);
}

// COR Label 450
if((0 <= binary || do_check) != (0 <= binary && do_check))  {asm volatile (""::: "memory");
 804c3f0:	c6 45 a4 01          	movb   $0x1,-0x5c(%ebp)
 804c3f4:	e9 2f de ff ff       	jmp    804a228 <main+0xce8>
 804c3f9:	8d 76 00             	lea    0x0(%esi),%esi
if(prefix_tag && !(do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 446);
}
// MCC Label 447
if(!(prefix_tag) && do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 447);
 804c3fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c400:	89 3c 24             	mov    %edi,(%esp)
 804c403:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c407:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c40b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c40f:	b9 ae 2b 00 00       	mov    $0x2bae,%ecx
 804c414:	e8 3f c3 00 00       	call   8058758 <__afl_maybe_log>
 804c419:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c41d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c421:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c425:	8b 3c 24             	mov    (%esp),%edi
 804c428:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c42c:	50                   	push   %eax
 804c42d:	50                   	push   %eax
 804c42e:	68 bf 01 00 00       	push   $0x1bf
 804c433:	68 de 70 06 08       	push   $0x80670de
 804c438:	e8 83 9c 00 00       	call   80560c0 <report_label_coverage>
 804c43d:	83 c4 10             	add    $0x10,%esp
 804c440:	e9 37 dc ff ff       	jmp    804a07c <main+0xb3c>
 804c445:	8d 76 00             	lea    0x0(%esi),%esi
if(prefix_tag && do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 445);
}
// MCC Label 446
if(prefix_tag && !(do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 446);
 804c448:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c44c:	89 3c 24             	mov    %edi,(%esp)
 804c44f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c453:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c457:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c45b:	b9 01 09 00 00       	mov    $0x901,%ecx
 804c460:	e8 f3 c2 00 00       	call   8058758 <__afl_maybe_log>
 804c465:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c469:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c46d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c471:	8b 3c 24             	mov    (%esp),%edi
 804c474:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c478:	50                   	push   %eax
 804c479:	50                   	push   %eax
 804c47a:	68 be 01 00 00       	push   $0x1be
 804c47f:	68 de 70 06 08       	push   $0x80670de
 804c484:	e8 37 9c 00 00       	call   80560c0 <report_label_coverage>
 804c489:	83 c4 10             	add    $0x10,%esp
 804c48c:	e9 77 db ff ff       	jmp    804a008 <main+0xac8>
 804c491:	8d 76 00             	lea    0x0(%esi),%esi
if(prefix_tag && !binary ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 440);
}
// MCC Label 441
if(prefix_tag && !(!binary) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 441);
 804c494:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c498:	89 3c 24             	mov    %edi,(%esp)
 804c49b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c49f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c4a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c4a7:	b9 c6 99 00 00       	mov    $0x99c6,%ecx
 804c4ac:	e8 a7 c2 00 00       	call   8058758 <__afl_maybe_log>
 804c4b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c4b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c4b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c4bd:	8b 3c 24             	mov    (%esp),%edi
 804c4c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c4c4:	50                   	push   %eax
 804c4c5:	50                   	push   %eax
 804c4c6:	68 b9 01 00 00       	push   $0x1b9
 804c4cb:	68 de 70 06 08       	push   $0x80670de
 804c4d0:	e8 eb 9b 00 00       	call   80560c0 <report_label_coverage>
 804c4d5:	83 c4 10             	add    $0x10,%esp
 804c4d8:	e9 bb d9 ff ff       	jmp    8049e98 <main+0x958>
 804c4dd:	8d 76 00             	lea    0x0(%esi),%esi
if(!(prefix_tag) && !binary ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 442);
}
// MCC Label 443
if(!(prefix_tag) && !(!binary) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 443);
 804c4e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c4e4:	89 3c 24             	mov    %edi,(%esp)
 804c4e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c4eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c4ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c4f3:	b9 e2 7a 00 00       	mov    $0x7ae2,%ecx
 804c4f8:	e8 5b c2 00 00       	call   8058758 <__afl_maybe_log>
 804c4fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c501:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c505:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c509:	8b 3c 24             	mov    (%esp),%edi
 804c50c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c510:	56                   	push   %esi
 804c511:	56                   	push   %esi
 804c512:	68 bb 01 00 00       	push   $0x1bb
 804c517:	68 de 70 06 08       	push   $0x80670de
 804c51c:	e8 9f 9b 00 00       	call   80560c0 <report_label_coverage>
 804c521:	83 c4 10             	add    $0x10,%esp
 804c524:	e9 6f d9 ff ff       	jmp    8049e98 <main+0x958>
 804c529:	8d 76 00             	lea    0x0(%esi),%esi
 804c52c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c530:	89 3c 24             	mov    %edi,(%esp)
 804c533:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c537:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c53b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c53f:	b9 3b 14 00 00       	mov    $0x143b,%ecx
 804c544:	e8 0f c2 00 00       	call   8058758 <__afl_maybe_log>
 804c549:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c54d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c551:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c555:	8b 3c 24             	mov    (%esp),%edi
 804c558:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c55c:	88 45 a4             	mov    %al,-0x5c(%ebp)
if(prefix_tag && !(!binary) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 441);
}
// MCC Label 442
if(!(prefix_tag) && !binary ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 442);
 804c55f:	57                   	push   %edi
 804c560:	57                   	push   %edi
 804c561:	68 ba 01 00 00       	push   $0x1ba
 804c566:	68 de 70 06 08       	push   $0x80670de
 804c56b:	e8 50 9b 00 00       	call   80560c0 <report_label_coverage>
 804c570:	83 c4 10             	add    $0x10,%esp
 804c573:	0f b6 45 a4          	movzbl -0x5c(%ebp),%eax
 804c577:	e9 b0 d8 ff ff       	jmp    8049e2c <main+0x8ec>
// ABS Label 501
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 501);
}
if (temp_1)
        ok = 0;
 804c57c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c580:	89 3c 24             	mov    %edi,(%esp)
 804c583:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c587:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c58b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c58f:	b9 c4 8c 00 00       	mov    $0x8cc4,%ecx
 804c594:	e8 bf c1 00 00       	call   8058758 <__afl_maybe_log>
 804c599:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c59d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c5a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c5a5:	8b 3c 24             	mov    (%esp),%edi
 804c5a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c5ac:	c6 85 62 ff ff ff 00 	movb   $0x0,-0x9e(%ebp)
 804c5b3:	e9 45 fa ff ff       	jmp    804bffd <main+0x2abd>
  /* Make sure bin_buffer is properly aligned. */
  unsigned char *bin_buffer = ptr_align (bin_buffer_unaligned, DIGEST_ALIGN);
  uintmax_t line_number;
  char *line;
  size_t line_chars_allocated;
  bool is_stdin = STREQ (checkfile_name, "-");
 804c5b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c5bc:	89 3c 24             	mov    %edi,(%esp)
 804c5bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c5c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c5c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c5cb:	b9 f4 c3 00 00       	mov    $0xc3f4,%ecx
 804c5d0:	e8 83 c1 00 00       	call   8058758 <__afl_maybe_log>
 804c5d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c5d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c5dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c5e1:	8b 3c 24             	mov    (%esp),%edi
 804c5e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c5e8:	8b 4d 80             	mov    -0x80(%ebp),%ecx
 804c5eb:	8d 7d d7             	lea    -0x29(%ebp),%edi
 804c5ee:	2b bd 3c ff ff ff    	sub    -0xc4(%ebp),%edi
 804c5f4:	80 39 2d             	cmpb   $0x2d,(%ecx)
 804c5f7:	89 7d 98             	mov    %edi,-0x68(%ebp)
 804c5fa:	0f 85 a5 69 00 00    	jne    8052fa5 <main+0x9a65>
 804c600:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c604:	89 3c 24             	mov    %edi,(%esp)
 804c607:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c60b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c60f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c613:	b9 1a f4 00 00       	mov    $0xf41a,%ecx
 804c618:	e8 3b c1 00 00       	call   8058758 <__afl_maybe_log>
 804c61d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c621:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c625:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c629:	8b 3c 24             	mov    (%esp),%edi
 804c62c:	8d 64 24 10          	lea    0x10(%esp),%esp
  
// ABS Label 321
if(is_stdin < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 321);
}
if (is_stdin)
 804c630:	80 79 01 00          	cmpb   $0x0,0x1(%ecx)
 804c634:	0f 85 6b 69 00 00    	jne    8052fa5 <main+0x9a65>
 804c63a:	66 90                	xchg   %ax,%ax
 804c63c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c640:	89 3c 24             	mov    %edi,(%esp)
 804c643:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c647:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c64b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c64f:	b9 f9 34 00 00       	mov    $0x34f9,%ecx
 804c654:	e8 ff c0 00 00       	call   8058758 <__afl_maybe_log>
 804c659:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c65d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c661:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c665:	8b 3c 24             	mov    (%esp),%edi
 804c668:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      have_read_stdin = true;
      checkfile_name = _("standard input");
 804c66c:	50                   	push   %eax
 804c66d:	6a 05                	push   $0x5
 804c66f:	68 c4 71 06 08       	push   $0x80671c4
 804c674:	6a 00                	push   $0x0
if(is_stdin < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 321);
}
if (is_stdin)
    {
      have_read_stdin = true;
 804c676:	c6 05 0c b3 06 08 01 	movb   $0x1,0x806b30c
      checkfile_name = _("standard input");
 804c67d:	e8 4e cb ff ff       	call   80491d0 <dcgettext@plt>
      checkfile_stream = stdin;
 804c682:	8b 35 d0 b2 06 08    	mov    0x806b2d0,%esi
	report_label_coverage("ABS", 321);
}
if (is_stdin)
    {
      have_read_stdin = true;
      checkfile_name = _("standard input");
 804c688:	89 45 80             	mov    %eax,-0x80(%ebp)
      checkfile_stream = stdin;
 804c68b:	83 c4 10             	add    $0x10,%esp
  /* Make sure bin_buffer is properly aligned. */
  unsigned char *bin_buffer = ptr_align (bin_buffer_unaligned, DIGEST_ALIGN);
  uintmax_t line_number;
  char *line;
  size_t line_chars_allocated;
  bool is_stdin = STREQ (checkfile_name, "-");
 804c68e:	c6 85 63 ff ff ff 01 	movb   $0x1,-0x9d(%ebp)
}
if (is_stdin)
    {
      have_read_stdin = true;
      checkfile_name = _("standard input");
      checkfile_stream = stdin;
 804c695:	89 75 84             	mov    %esi,-0x7c(%ebp)
          return false;
        }
    }

  line_number = 0;
  line = NULL;
 804c698:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c69c:	89 3c 24             	mov    %edi,(%esp)
 804c69f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c6a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c6a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c6ab:	b9 24 11 00 00       	mov    $0x1124,%ecx
 804c6b0:	e8 a3 c0 00 00       	call   8058758 <__afl_maybe_log>
 804c6b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c6b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c6bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c6c1:	8b 3c 24             	mov    (%esp),%edi
 804c6c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c6c8:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
  line_chars_allocated = 0;
 804c6cf:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
error (0, errno, "%s", checkfile_name);
          return false;
        }
    }

  line_number = 0;
 804c6d6:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%ebp)
 804c6dd:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%ebp)
  FILE *checkfile_stream;
  uintmax_t n_misformatted_lines = 0;
  uintmax_t n_properly_formatted_lines = 0;
  uintmax_t n_improperly_formatted_lines = 0;
  uintmax_t n_mismatched_checksums = 0;
  uintmax_t n_open_or_read_failures = 0;
 804c6e4:	c7 85 48 ff ff ff 00 	movl   $0x0,-0xb8(%ebp)
 804c6eb:	00 00 00 
 804c6ee:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
 804c6f5:	00 00 00 
{
  FILE *checkfile_stream;
  uintmax_t n_misformatted_lines = 0;
  uintmax_t n_properly_formatted_lines = 0;
  uintmax_t n_improperly_formatted_lines = 0;
  uintmax_t n_mismatched_checksums = 0;
 804c6f8:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
 804c6ff:	00 00 00 
 804c702:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%ebp)
 804c709:	00 00 00 
digest_check (const char *checkfile_name)
{
  FILE *checkfile_stream;
  uintmax_t n_misformatted_lines = 0;
  uintmax_t n_properly_formatted_lines = 0;
  uintmax_t n_improperly_formatted_lines = 0;
 804c70c:	c7 85 50 ff ff ff 00 	movl   $0x0,-0xb0(%ebp)
 804c713:	00 00 00 
 804c716:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%ebp)
 804c71d:	00 00 00 
static bool
digest_check (const char *checkfile_name)
{
  FILE *checkfile_stream;
  uintmax_t n_misformatted_lines = 0;
  uintmax_t n_properly_formatted_lines = 0;
 804c720:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%ebp)
 804c727:	00 00 00 
 804c72a:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%ebp)
 804c731:	00 00 00 

static bool
digest_check (const char *checkfile_name)
{
  FILE *checkfile_stream;
  uintmax_t n_misformatted_lines = 0;
 804c734:	c7 85 58 ff ff ff 00 	movl   $0x0,-0xa8(%ebp)
 804c73b:	00 00 00 
 804c73e:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%ebp)
 804c745:	00 00 00 
 804c748:	90                   	nop
 804c749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    {
        char *filename;
        int binary;
        unsigned char *hex_digest;
        ssize_t line_length;
        ++line_number;
 804c750:	83 45 88 01          	addl   $0x1,-0x78(%ebp)
 804c754:	83 55 8c 00          	adcl   $0x0,-0x74(%ebp)
if(line_number < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 326);
}

// ROR Label 327
if((line_number != 0) != (line_number == 0))  {asm volatile (""::: "memory");
 804c758:	8b 45 88             	mov    -0x78(%ebp),%eax
 804c75b:	8b 7d 8c             	mov    -0x74(%ebp),%edi
 804c75e:	89 c1                	mov    %eax,%ecx
 804c760:	09 f9                	or     %edi,%ecx
 804c762:	0f 94 c3             	sete   %bl
 804c765:	0f 95 c2             	setne  %dl
 804c768:	38 da                	cmp    %bl,%dl
 804c76a:	74 45                	je     804c7b1 <main+0x3271>
 804c76c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c770:	89 3c 24             	mov    %edi,(%esp)
 804c773:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c777:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c77b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c77f:	b9 b0 80 00 00       	mov    $0x80b0,%ecx
 804c784:	e8 cf bf 00 00       	call   8058758 <__afl_maybe_log>
 804c789:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c78d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c791:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c795:	8b 3c 24             	mov    (%esp),%edi
 804c798:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 327);
 804c79c:	83 ec 08             	sub    $0x8,%esp
 804c79f:	68 47 01 00 00       	push   $0x147
 804c7a4:	68 c8 70 06 08       	push   $0x80670c8
 804c7a9:	e8 12 99 00 00       	call   80560c0 <report_label_coverage>
 804c7ae:	83 c4 10             	add    $0x10,%esp
 804c7b1:	8d 76 00             	lea    0x0(%esi),%esi
}
if (line_number == 0)
 804c7b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c7b8:	89 3c 24             	mov    %edi,(%esp)
 804c7bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c7bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c7c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c7c7:	b9 ab 7b 00 00       	mov    $0x7bab,%ecx
 804c7cc:	e8 87 bf 00 00       	call   8058758 <__afl_maybe_log>
 804c7d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c7d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c7d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c7dd:	8b 3c 24             	mov    (%esp),%edi
 804c7e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c7e4:	84 db                	test   %bl,%bl
 804c7e6:	0f 85 24 36 00 00    	jne    804fe10 <main+0x68d0>
 804c7ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c7f0:	89 3c 24             	mov    %edi,(%esp)
 804c7f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c7f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c7fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c7ff:	b9 07 af 00 00       	mov    $0xaf07,%ecx
 804c804:	e8 4f bf 00 00       	call   8058758 <__afl_maybe_log>
 804c809:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c80d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c811:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c815:	8b 3c 24             	mov    (%esp),%edi
 804c818:	8d 64 24 10          	lea    0x10(%esp),%esp
if((((line)) || ((line))) != (((line)) && ((line))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 329);
}

// MCC Label 330
if(((line)) && ((line)) ) {asm volatile (""::: "memory");
 804c81c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c820:	89 3c 24             	mov    %edi,(%esp)
 804c823:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c827:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c82b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c82f:	b9 b0 72 00 00       	mov    $0x72b0,%ecx
 804c834:	e8 1f bf 00 00       	call   8058758 <__afl_maybe_log>
 804c839:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c83d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c841:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c845:	8b 3c 24             	mov    (%esp),%edi
 804c848:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c84c:	8b 75 ac             	mov    -0x54(%ebp),%esi
 804c84f:	85 f6                	test   %esi,%esi
 804c851:	0f 84 61 35 00 00    	je     804fdb8 <main+0x6878>
 804c857:	90                   	nop
 804c858:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c85c:	89 3c 24             	mov    %edi,(%esp)
 804c85f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c863:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c867:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c86b:	b9 d3 9e 00 00       	mov    $0x9ed3,%ecx
 804c870:	e8 e3 be 00 00       	call   8058758 <__afl_maybe_log>
 804c875:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c879:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c87d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c881:	8b 3c 24             	mov    (%esp),%edi
 804c884:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 330);
 804c888:	83 ec 08             	sub    $0x8,%esp
 804c88b:	68 4a 01 00 00       	push   $0x14a
 804c890:	68 de 70 06 08       	push   $0x80670de
 804c895:	e8 26 98 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 332
if(!(((line))) && ((line)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 332);
}
// MCC Label 333
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
 804c89a:	8b 7d ac             	mov    -0x54(%ebp),%edi
 804c89d:	83 c4 10             	add    $0x10,%esp
 804c8a0:	85 ff                	test   %edi,%edi
 804c8a2:	0f 84 10 35 00 00    	je     804fdb8 <main+0x6878>
 804c8a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c8ac:	89 3c 24             	mov    %edi,(%esp)
 804c8af:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c8b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c8b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c8bb:	b9 a1 76 00 00       	mov    $0x76a1,%ecx
 804c8c0:	e8 93 be 00 00       	call   8058758 <__afl_maybe_log>
 804c8c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c8c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c8cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c8d1:	8b 3c 24             	mov    (%esp),%edi
 804c8d4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 333);
}
if (((line)) && ((line))) {
                int lava_549 = 0;
                lava_549 |= ((unsigned char *)(line))[0] << (0 * 8);
                lava_549 |= ((unsigned char *)(line))[1] << (1 * 8);
 804c8d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c8dc:	89 3c 24             	mov    %edi,(%esp)
 804c8df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c8e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c8e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c8eb:	b9 43 e0 00 00       	mov    $0xe043,%ecx
 804c8f0:	e8 63 be 00 00       	call   8058758 <__afl_maybe_log>
 804c8f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c8f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c8fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c901:	8b 3c 24             	mov    (%esp),%edi
 804c904:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c908:	0f b6 47 01          	movzbl 0x1(%edi),%eax
                lava_549 |= ((unsigned char *)(line))[2] << (2 * 8);
 804c90c:	0f b6 5f 02          	movzbl 0x2(%edi),%ebx
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 333);
}
if (((line)) && ((line))) {
                int lava_549 = 0;
                lava_549 |= ((unsigned char *)(line))[0] << (0 * 8);
 804c910:	0f b6 17             	movzbl (%edi),%edx
                lava_549 |= ((unsigned char *)(line))[1] << (1 * 8);
                lava_549 |= ((unsigned char *)(line))[2] << (2 * 8);
                lava_549 |= ((unsigned char *)(line))[3] << (3 * 8);
 804c913:	0f b6 77 03          	movzbl 0x3(%edi),%esi
	report_label_coverage("MCC", 333);
}
if (((line)) && ((line))) {
                int lava_549 = 0;
                lava_549 |= ((unsigned char *)(line))[0] << (0 * 8);
                lava_549 |= ((unsigned char *)(line))[1] << (1 * 8);
 804c917:	c1 e0 08             	shl    $0x8,%eax
                lava_549 |= ((unsigned char *)(line))[2] << (2 * 8);
 804c91a:	c1 e3 10             	shl    $0x10,%ebx
 804c91d:	09 c3                	or     %eax,%ebx
                lava_549 |= ((unsigned char *)(line))[3] << (3 * 8);
 804c91f:	c1 e6 18             	shl    $0x18,%esi
}
if (((line)) && ((line))) {
                int lava_549 = 0;
                lava_549 |= ((unsigned char *)(line))[0] << (0 * 8);
                lava_549 |= ((unsigned char *)(line))[1] << (1 * 8);
                lava_549 |= ((unsigned char *)(line))[2] << (2 * 8);
 804c922:	09 d3                	or     %edx,%ebx
                lava_549 |= ((unsigned char *)(line))[3] << (3 * 8);
 804c924:	09 f3                	or     %esi,%ebx
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804c926:	89 1d d4 bb 06 08    	mov    %ebx,0x806bbd4
 804c92c:	89 1d 14 bc 06 08    	mov    %ebx,0x806bc14
 804c932:	89 1d 28 b8 06 08    	mov    %ebx,0x806b828
 804c938:	89 1d 34 b8 06 08    	mov    %ebx,0x806b834
 804c93e:	89 1d 4c b8 06 08    	mov    %ebx,0x806b84c
 804c944:	89 1d 58 b8 06 08    	mov    %ebx,0x806b858
 804c94a:	89 1d 0c b9 06 08    	mov    %ebx,0x806b90c
 804c950:	89 1d 18 b9 06 08    	mov    %ebx,0x806b918
 804c956:	89 1d dc b8 06 08    	mov    %ebx,0x806b8dc
 804c95c:	89 1d d0 b8 06 08    	mov    %ebx,0x806b8d0
 804c962:	89 1d e8 b8 06 08    	mov    %ebx,0x806b8e8
 804c968:	89 1d f4 b8 06 08    	mov    %ebx,0x806b8f4
 804c96e:	89 1d 00 b9 06 08    	mov    %ebx,0x806b900
 804c974:	89 1d ac b8 06 08    	mov    %ebx,0x806b8ac
 804c97a:	89 1d c4 b8 06 08    	mov    %ebx,0x806b8c4
 804c980:	89 1d 70 b8 06 08    	mov    %ebx,0x806b870
 804c986:	89 1d 30 b9 06 08    	mov    %ebx,0x806b930
 804c98c:	89 1d 7c b8 06 08    	mov    %ebx,0x806b87c
 804c992:	89 1d 94 b8 06 08    	mov    %ebx,0x806b894
 804c998:	89 1d 40 b8 06 08    	mov    %ebx,0x806b840
 804c99e:	89 1d 78 b7 06 08    	mov    %ebx,0x806b778
 804c9a4:	89 1d a4 b7 06 08    	mov    %ebx,0x806b7a4
 804c9aa:	89 1d fc b7 06 08    	mov    %ebx,0x806b7fc
                lava_303 |= ((unsigned char *)(line))[1] << (1 * 8);
                lava_303 |= ((unsigned char *)(line))[2] << (2 * 8);
                lava_303 |= ((unsigned char *)(line))[3] << (3 * 8);
                lava_set(303, lava_303);
            }
            __ssize_t kbcieiubweuhc1540383426 = getline(&line + (lava_get(268)) * (1818326357 == (lava_get(268)) || 1433756012 == (lava_get(268))) + (lava_get(271)) * (1818326354 == (lava_get(271)) || 1383424364 == (lava_get(271))) + (lava_get(273)) * (1818326352 == (lava_get(273)) || 1349869932 == (lava_get(273))) + (lava_get(277)) * (1818326348 == (lava_get(277)) || 1282761068 == (lava_get(277))), &line_chars_allocated + (lava_get(269)) * (1818326356 == (lava_get(269)) || 1416978796 == (lava_get(269))) + (lava_get(272)) * (1818326353 == (lava_get(272)) || 1366647148 == (lava_get(272))) + (lava_get(274)) * (1818326351 == (lava_get(274)) || 1333092716 == (lava_get(274))), checkfile_stream + (lava_get(270)) * (1818326355 == (lava_get(270)) || 1400201580 == (lava_get(270))) + (lava_get(387)) * (1818326238 == (lava_get(387)) || 3732169068U == (lava_get(387))) + (lava_get(276)) * (1818326349 == (lava_get(276)) || 1299538284 == (lava_get(276))));
 804c9b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c9b4:	89 3c 24             	mov    %edi,(%esp)
 804c9b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c9bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c9bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c9c3:	b9 ba 71 00 00       	mov    $0x71ba,%ecx
 804c9c8:	e8 8b bd 00 00       	call   8058758 <__afl_maybe_log>
 804c9cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c9d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c9d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c9d9:	8b 3c 24             	mov    (%esp),%edi
 804c9dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c9e0:	83 ec 0c             	sub    $0xc,%esp
 804c9e3:	68 0e 01 00 00       	push   $0x10e
 804c9e8:	e8 73 a2 00 00       	call   8056c60 <lava_get>
 804c9ed:	c7 04 24 0e 01 00 00 	movl   $0x10e,(%esp)
 804c9f4:	89 c3                	mov    %eax,%ebx
 804c9f6:	e8 65 a2 00 00       	call   8056c60 <lava_get>
 804c9fb:	83 c4 10             	add    $0x10,%esp
 804c9fe:	3d 53 75 61 6c       	cmp    $0x6c617553,%eax
 804ca03:	b9 01 00 00 00       	mov    $0x1,%ecx
 804ca08:	74 4c                	je     804ca56 <main+0x3516>
 804ca0a:	66 90                	xchg   %ax,%ax
 804ca0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ca10:	89 3c 24             	mov    %edi,(%esp)
 804ca13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ca17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ca1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ca1f:	b9 87 d5 00 00       	mov    $0xd587,%ecx
 804ca24:	e8 2f bd 00 00       	call   8058758 <__afl_maybe_log>
 804ca29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ca2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ca31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ca35:	8b 3c 24             	mov    (%esp),%edi
 804ca38:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ca3c:	83 ec 0c             	sub    $0xc,%esp
 804ca3f:	68 0e 01 00 00       	push   $0x10e
 804ca44:	e8 17 a2 00 00       	call   8056c60 <lava_get>
 804ca49:	31 c9                	xor    %ecx,%ecx
 804ca4b:	83 c4 10             	add    $0x10,%esp
 804ca4e:	3d 6c 61 75 53       	cmp    $0x5375616c,%eax
 804ca53:	0f 94 c1             	sete   %cl
 804ca56:	66 90                	xchg   %ax,%ax
 804ca58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ca5c:	89 3c 24             	mov    %edi,(%esp)
 804ca5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ca63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ca67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ca6b:	b9 c7 ef 00 00       	mov    $0xefc7,%ecx
 804ca70:	e8 e3 bc 00 00       	call   8058758 <__afl_maybe_log>
 804ca75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ca79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ca7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ca81:	8b 3c 24             	mov    (%esp),%edi
 804ca84:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ca88:	83 ec 0c             	sub    $0xc,%esp
 804ca8b:	89 cf                	mov    %ecx,%edi
 804ca8d:	68 83 01 00 00       	push   $0x183
 804ca92:	0f af fb             	imul   %ebx,%edi
 804ca95:	e8 c6 a1 00 00       	call   8056c60 <lava_get>
 804ca9a:	c7 04 24 83 01 00 00 	movl   $0x183,(%esp)
 804caa1:	89 c6                	mov    %eax,%esi
 804caa3:	e8 b8 a1 00 00       	call   8056c60 <lava_get>
 804caa8:	83 c4 10             	add    $0x10,%esp
 804caab:	3d de 74 61 6c       	cmp    $0x6c6174de,%eax
 804cab0:	ba 01 00 00 00       	mov    $0x1,%edx
 804cab5:	74 4b                	je     804cb02 <main+0x35c2>
 804cab7:	90                   	nop
 804cab8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cabc:	89 3c 24             	mov    %edi,(%esp)
 804cabf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cac3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cac7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cacb:	b9 7c fa 00 00       	mov    $0xfa7c,%ecx
 804cad0:	e8 83 bc 00 00       	call   8058758 <__afl_maybe_log>
 804cad5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cad9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cadd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cae1:	8b 3c 24             	mov    (%esp),%edi
 804cae4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cae8:	83 ec 0c             	sub    $0xc,%esp
 804caeb:	68 83 01 00 00       	push   $0x183
 804caf0:	e8 6b a1 00 00       	call   8056c60 <lava_get>
 804caf5:	31 d2                	xor    %edx,%edx
 804caf7:	83 c4 10             	add    $0x10,%esp
 804cafa:	3d 6c 61 74 de       	cmp    $0xde74616c,%eax
 804caff:	0f 94 c2             	sete   %dl
 804cb02:	66 90                	xchg   %ax,%ax
 804cb04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cb08:	89 3c 24             	mov    %edi,(%esp)
 804cb0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cb0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cb13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cb17:	b9 8e 72 00 00       	mov    $0x728e,%ecx
 804cb1c:	e8 37 bc 00 00       	call   8058758 <__afl_maybe_log>
 804cb21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cb25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cb29:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cb2d:	8b 3c 24             	mov    (%esp),%edi
 804cb30:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cb34:	83 ec 0c             	sub    $0xc,%esp
 804cb37:	0f af f2             	imul   %edx,%esi
 804cb3a:	68 14 01 00 00       	push   $0x114
 804cb3f:	e8 1c a1 00 00       	call   8056c60 <lava_get>
 804cb44:	c7 04 24 14 01 00 00 	movl   $0x114,(%esp)
 804cb4b:	89 c3                	mov    %eax,%ebx
 804cb4d:	8d 3c 3e             	lea    (%esi,%edi,1),%edi
 804cb50:	e8 0b a1 00 00       	call   8056c60 <lava_get>
 804cb55:	83 c4 10             	add    $0x10,%esp
 804cb58:	3d 4d 75 61 6c       	cmp    $0x6c61754d,%eax
 804cb5d:	b9 01 00 00 00       	mov    $0x1,%ecx
 804cb62:	74 4a                	je     804cbae <main+0x366e>
 804cb64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cb68:	89 3c 24             	mov    %edi,(%esp)
 804cb6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cb6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cb73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cb77:	b9 91 43 00 00       	mov    $0x4391,%ecx
 804cb7c:	e8 d7 bb 00 00       	call   8058758 <__afl_maybe_log>
 804cb81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cb85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cb89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cb8d:	8b 3c 24             	mov    (%esp),%edi
 804cb90:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cb94:	83 ec 0c             	sub    $0xc,%esp
 804cb97:	68 14 01 00 00       	push   $0x114
 804cb9c:	e8 bf a0 00 00       	call   8056c60 <lava_get>
 804cba1:	31 c9                	xor    %ecx,%ecx
 804cba3:	83 c4 10             	add    $0x10,%esp
 804cba6:	3d 6c 61 75 4d       	cmp    $0x4d75616c,%eax
 804cbab:	0f 94 c1             	sete   %cl
 804cbae:	66 90                	xchg   %ax,%ax
 804cbb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cbb4:	89 3c 24             	mov    %edi,(%esp)
 804cbb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cbbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cbbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cbc3:	b9 34 62 00 00       	mov    $0x6234,%ecx
 804cbc8:	e8 8b bb 00 00       	call   8058758 <__afl_maybe_log>
 804cbcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cbd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cbd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cbd9:	8b 3c 24             	mov    (%esp),%edi
 804cbdc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cbe0:	0f af d9             	imul   %ecx,%ebx
 804cbe3:	83 ec 0c             	sub    $0xc,%esp
 804cbe6:	68 0d 01 00 00       	push   $0x10d
 804cbeb:	01 fb                	add    %edi,%ebx
 804cbed:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
 804cbf3:	03 45 84             	add    -0x7c(%ebp),%eax
 804cbf6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804cbf9:	e8 62 a0 00 00       	call   8056c60 <lava_get>
 804cbfe:	c7 04 24 0d 01 00 00 	movl   $0x10d,(%esp)
 804cc05:	89 c3                	mov    %eax,%ebx
 804cc07:	e8 54 a0 00 00       	call   8056c60 <lava_get>
 804cc0c:	83 c4 10             	add    $0x10,%esp
 804cc0f:	3d 54 75 61 6c       	cmp    $0x6c617554,%eax
 804cc14:	ba 01 00 00 00       	mov    $0x1,%edx
 804cc19:	74 4b                	je     804cc66 <main+0x3726>
 804cc1b:	90                   	nop
 804cc1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cc20:	89 3c 24             	mov    %edi,(%esp)
 804cc23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cc27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cc2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cc2f:	b9 e5 7f 00 00       	mov    $0x7fe5,%ecx
 804cc34:	e8 1f bb 00 00       	call   8058758 <__afl_maybe_log>
 804cc39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cc3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cc41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cc45:	8b 3c 24             	mov    (%esp),%edi
 804cc48:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cc4c:	83 ec 0c             	sub    $0xc,%esp
 804cc4f:	68 0d 01 00 00       	push   $0x10d
 804cc54:	e8 07 a0 00 00       	call   8056c60 <lava_get>
 804cc59:	31 d2                	xor    %edx,%edx
 804cc5b:	83 c4 10             	add    $0x10,%esp
 804cc5e:	3d 6c 61 75 54       	cmp    $0x5475616c,%eax
 804cc63:	0f 94 c2             	sete   %dl
 804cc66:	66 90                	xchg   %ax,%ax
 804cc68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cc6c:	89 3c 24             	mov    %edi,(%esp)
 804cc6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cc73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cc77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cc7b:	b9 ea 2c 00 00       	mov    $0x2cea,%ecx
 804cc80:	e8 d3 ba 00 00       	call   8058758 <__afl_maybe_log>
 804cc85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cc89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cc8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cc91:	8b 3c 24             	mov    (%esp),%edi
 804cc94:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cc98:	83 ec 0c             	sub    $0xc,%esp
 804cc9b:	68 10 01 00 00       	push   $0x110
 804cca0:	0f af da             	imul   %edx,%ebx
 804cca3:	e8 b8 9f 00 00       	call   8056c60 <lava_get>
 804cca8:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
 804ccaf:	89 c7                	mov    %eax,%edi
 804ccb1:	e8 aa 9f 00 00       	call   8056c60 <lava_get>
 804ccb6:	83 c4 10             	add    $0x10,%esp
 804ccb9:	3d 51 75 61 6c       	cmp    $0x6c617551,%eax
 804ccbe:	b9 01 00 00 00       	mov    $0x1,%ecx
 804ccc3:	74 4d                	je     804cd12 <main+0x37d2>
 804ccc5:	8d 76 00             	lea    0x0(%esi),%esi
 804ccc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cccc:	89 3c 24             	mov    %edi,(%esp)
 804cccf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ccd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ccd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ccdb:	b9 b2 bf 00 00       	mov    $0xbfb2,%ecx
 804cce0:	e8 73 ba 00 00       	call   8058758 <__afl_maybe_log>
 804cce5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cce9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cced:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ccf1:	8b 3c 24             	mov    (%esp),%edi
 804ccf4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ccf8:	83 ec 0c             	sub    $0xc,%esp
 804ccfb:	68 10 01 00 00       	push   $0x110
 804cd00:	e8 5b 9f 00 00       	call   8056c60 <lava_get>
 804cd05:	31 c9                	xor    %ecx,%ecx
 804cd07:	83 c4 10             	add    $0x10,%esp
 804cd0a:	3d 6c 61 75 51       	cmp    $0x5175616c,%eax
 804cd0f:	0f 94 c1             	sete   %cl
 804cd12:	66 90                	xchg   %ax,%ax
 804cd14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cd18:	89 3c 24             	mov    %edi,(%esp)
 804cd1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cd1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cd23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cd27:	b9 89 16 00 00       	mov    $0x1689,%ecx
 804cd2c:	e8 27 ba 00 00       	call   8058758 <__afl_maybe_log>
 804cd31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cd35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cd39:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cd3d:	8b 3c 24             	mov    (%esp),%edi
 804cd40:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cd44:	89 ce                	mov    %ecx,%esi
 804cd46:	83 ec 0c             	sub    $0xc,%esp
 804cd49:	0f af f7             	imul   %edi,%esi
 804cd4c:	68 12 01 00 00       	push   $0x112
 804cd51:	e8 0a 9f 00 00       	call   8056c60 <lava_get>
 804cd56:	01 de                	add    %ebx,%esi
 804cd58:	c7 04 24 12 01 00 00 	movl   $0x112,(%esp)
 804cd5f:	89 c3                	mov    %eax,%ebx
 804cd61:	e8 fa 9e 00 00       	call   8056c60 <lava_get>
 804cd66:	83 c4 10             	add    $0x10,%esp
 804cd69:	3d 4f 75 61 6c       	cmp    $0x6c61754f,%eax
 804cd6e:	ba 01 00 00 00       	mov    $0x1,%edx
 804cd73:	74 4d                	je     804cdc2 <main+0x3882>
 804cd75:	8d 76 00             	lea    0x0(%esi),%esi
 804cd78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cd7c:	89 3c 24             	mov    %edi,(%esp)
 804cd7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cd83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cd87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cd8b:	b9 8e 70 00 00       	mov    $0x708e,%ecx
 804cd90:	e8 c3 b9 00 00       	call   8058758 <__afl_maybe_log>
 804cd95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cd99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cd9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cda1:	8b 3c 24             	mov    (%esp),%edi
 804cda4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cda8:	83 ec 0c             	sub    $0xc,%esp
 804cdab:	68 12 01 00 00       	push   $0x112
 804cdb0:	e8 ab 9e 00 00       	call   8056c60 <lava_get>
 804cdb5:	31 d2                	xor    %edx,%edx
 804cdb7:	83 c4 10             	add    $0x10,%esp
 804cdba:	3d 6c 61 75 4f       	cmp    $0x4f75616c,%eax
 804cdbf:	0f 94 c2             	sete   %dl
 804cdc2:	66 90                	xchg   %ax,%ax
 804cdc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cdc8:	89 3c 24             	mov    %edi,(%esp)
 804cdcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cdcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cdd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cdd7:	b9 ad b9 00 00       	mov    $0xb9ad,%ecx
 804cddc:	e8 77 b9 00 00       	call   8058758 <__afl_maybe_log>
 804cde1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cde5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cde9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cded:	8b 3c 24             	mov    (%esp),%edi
 804cdf0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cdf4:	83 ec 0c             	sub    $0xc,%esp
 804cdf7:	0f af da             	imul   %edx,%ebx
 804cdfa:	68 0c 01 00 00       	push   $0x10c
 804cdff:	e8 5c 9e 00 00       	call   8056c60 <lava_get>
 804ce04:	01 de                	add    %ebx,%esi
 804ce06:	c7 04 24 0c 01 00 00 	movl   $0x10c,(%esp)
 804ce0d:	89 c3                	mov    %eax,%ebx
 804ce0f:	e8 4c 9e 00 00       	call   8056c60 <lava_get>
 804ce14:	83 c4 10             	add    $0x10,%esp
 804ce17:	3d 55 75 61 6c       	cmp    $0x6c617555,%eax
 804ce1c:	8d 7c b5 b0          	lea    -0x50(%ebp,%esi,4),%edi
 804ce20:	b9 01 00 00 00       	mov    $0x1,%ecx
 804ce25:	74 4b                	je     804ce72 <main+0x3932>
 804ce27:	90                   	nop
 804ce28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ce2c:	89 3c 24             	mov    %edi,(%esp)
 804ce2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ce33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ce37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ce3b:	b9 7c 60 00 00       	mov    $0x607c,%ecx
 804ce40:	e8 13 b9 00 00       	call   8058758 <__afl_maybe_log>
 804ce45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ce49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ce4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ce51:	8b 3c 24             	mov    (%esp),%edi
 804ce54:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ce58:	83 ec 0c             	sub    $0xc,%esp
 804ce5b:	68 0c 01 00 00       	push   $0x10c
 804ce60:	e8 fb 9d 00 00       	call   8056c60 <lava_get>
 804ce65:	31 c9                	xor    %ecx,%ecx
 804ce67:	83 c4 10             	add    $0x10,%esp
 804ce6a:	3d 6c 61 75 55       	cmp    $0x5575616c,%eax
 804ce6f:	0f 94 c1             	sete   %cl
 804ce72:	66 90                	xchg   %ax,%ax
 804ce74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ce78:	89 3c 24             	mov    %edi,(%esp)
 804ce7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ce7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ce83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ce87:	b9 56 e7 00 00       	mov    $0xe756,%ecx
 804ce8c:	e8 c7 b8 00 00       	call   8058758 <__afl_maybe_log>
 804ce91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ce95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ce99:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ce9d:	8b 3c 24             	mov    (%esp),%edi
 804cea0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cea4:	83 ec 0c             	sub    $0xc,%esp
 804cea7:	68 0f 01 00 00       	push   $0x10f
 804ceac:	0f af d9             	imul   %ecx,%ebx
 804ceaf:	e8 ac 9d 00 00       	call   8056c60 <lava_get>
 804ceb4:	c7 04 24 0f 01 00 00 	movl   $0x10f,(%esp)
 804cebb:	89 c6                	mov    %eax,%esi
 804cebd:	e8 9e 9d 00 00       	call   8056c60 <lava_get>
 804cec2:	83 c4 10             	add    $0x10,%esp
 804cec5:	3d 52 75 61 6c       	cmp    $0x6c617552,%eax
 804ceca:	ba 01 00 00 00       	mov    $0x1,%edx
 804cecf:	74 4d                	je     804cf1e <main+0x39de>
 804ced1:	8d 76 00             	lea    0x0(%esi),%esi
 804ced4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ced8:	89 3c 24             	mov    %edi,(%esp)
 804cedb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cedf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cee3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cee7:	b9 f3 8a 00 00       	mov    $0x8af3,%ecx
 804ceec:	e8 67 b8 00 00       	call   8058758 <__afl_maybe_log>
 804cef1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cef5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cef9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cefd:	8b 3c 24             	mov    (%esp),%edi
 804cf00:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cf04:	83 ec 0c             	sub    $0xc,%esp
 804cf07:	68 0f 01 00 00       	push   $0x10f
 804cf0c:	e8 4f 9d 00 00       	call   8056c60 <lava_get>
 804cf11:	31 d2                	xor    %edx,%edx
 804cf13:	83 c4 10             	add    $0x10,%esp
 804cf16:	3d 6c 61 75 52       	cmp    $0x5275616c,%eax
 804cf1b:	0f 94 c2             	sete   %dl
 804cf1e:	66 90                	xchg   %ax,%ax
 804cf20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cf24:	89 3c 24             	mov    %edi,(%esp)
 804cf27:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cf2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cf2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cf33:	b9 4b 1c 00 00       	mov    $0x1c4b,%ecx
 804cf38:	e8 1b b8 00 00       	call   8058758 <__afl_maybe_log>
 804cf3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cf41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cf45:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cf49:	8b 3c 24             	mov    (%esp),%edi
 804cf4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cf50:	0f af f2             	imul   %edx,%esi
 804cf53:	83 ec 0c             	sub    $0xc,%esp
 804cf56:	68 15 01 00 00       	push   $0x115
 804cf5b:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
 804cf5e:	89 45 a0             	mov    %eax,-0x60(%ebp)
 804cf61:	e8 fa 9c 00 00       	call   8056c60 <lava_get>
 804cf66:	c7 04 24 15 01 00 00 	movl   $0x115,(%esp)
 804cf6d:	89 c3                	mov    %eax,%ebx
 804cf6f:	e8 ec 9c 00 00       	call   8056c60 <lava_get>
 804cf74:	83 c4 10             	add    $0x10,%esp
 804cf77:	3d 4c 75 61 6c       	cmp    $0x6c61754c,%eax
 804cf7c:	b9 01 00 00 00       	mov    $0x1,%ecx
 804cf81:	74 4b                	je     804cfce <main+0x3a8e>
 804cf83:	90                   	nop
 804cf84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cf88:	89 3c 24             	mov    %edi,(%esp)
 804cf8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cf8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cf93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cf97:	b9 c8 c6 00 00       	mov    $0xc6c8,%ecx
 804cf9c:	e8 b7 b7 00 00       	call   8058758 <__afl_maybe_log>
 804cfa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cfa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cfa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cfad:	8b 3c 24             	mov    (%esp),%edi
 804cfb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cfb4:	83 ec 0c             	sub    $0xc,%esp
 804cfb7:	68 15 01 00 00       	push   $0x115
 804cfbc:	e8 9f 9c 00 00       	call   8056c60 <lava_get>
 804cfc1:	31 c9                	xor    %ecx,%ecx
 804cfc3:	83 c4 10             	add    $0x10,%esp
 804cfc6:	3d 6c 61 75 4c       	cmp    $0x4c75616c,%eax
 804cfcb:	0f 94 c1             	sete   %cl
 804cfce:	66 90                	xchg   %ax,%ax
 804cfd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cfd4:	89 3c 24             	mov    %edi,(%esp)
 804cfd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cfdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cfdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cfe3:	b9 14 0f 00 00       	mov    $0xf14,%ecx
 804cfe8:	e8 6b b7 00 00       	call   8058758 <__afl_maybe_log>
 804cfed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cff1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cff5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cff9:	8b 3c 24             	mov    (%esp),%edi
 804cffc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d000:	83 ec 0c             	sub    $0xc,%esp
 804d003:	89 ce                	mov    %ecx,%esi
 804d005:	68 11 01 00 00       	push   $0x111
 804d00a:	0f af f3             	imul   %ebx,%esi
 804d00d:	e8 4e 9c 00 00       	call   8056c60 <lava_get>
 804d012:	c7 04 24 11 01 00 00 	movl   $0x111,(%esp)
 804d019:	89 c3                	mov    %eax,%ebx
 804d01b:	e8 40 9c 00 00       	call   8056c60 <lava_get>
 804d020:	83 c4 10             	add    $0x10,%esp
 804d023:	3d 50 75 61 6c       	cmp    $0x6c617550,%eax
 804d028:	ba 01 00 00 00       	mov    $0x1,%edx
 804d02d:	74 4b                	je     804d07a <main+0x3b3a>
 804d02f:	90                   	nop
 804d030:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d034:	89 3c 24             	mov    %edi,(%esp)
 804d037:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d03b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d03f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d043:	b9 8a 5b 00 00       	mov    $0x5b8a,%ecx
 804d048:	e8 0b b7 00 00       	call   8058758 <__afl_maybe_log>
 804d04d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d051:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d055:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d059:	8b 3c 24             	mov    (%esp),%edi
 804d05c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d060:	83 ec 0c             	sub    $0xc,%esp
 804d063:	68 11 01 00 00       	push   $0x111
 804d068:	e8 f3 9b 00 00       	call   8056c60 <lava_get>
 804d06d:	31 d2                	xor    %edx,%edx
 804d06f:	83 c4 10             	add    $0x10,%esp
 804d072:	3d 6c 61 75 50       	cmp    $0x5075616c,%eax
 804d077:	0f 94 c2             	sete   %dl
 804d07a:	66 90                	xchg   %ax,%ax
 804d07c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d080:	89 3c 24             	mov    %edi,(%esp)
 804d083:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d087:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d08b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d08f:	b9 7f ee 00 00       	mov    $0xee7f,%ecx
 804d094:	e8 bf b6 00 00       	call   8058758 <__afl_maybe_log>
 804d099:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d09d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d0a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d0a5:	8b 3c 24             	mov    (%esp),%edi
 804d0a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d0ac:	03 75 a0             	add    -0x60(%ebp),%esi
 804d0af:	83 ec 04             	sub    $0x4,%esp
 804d0b2:	ff 75 a4             	pushl  -0x5c(%ebp)
 804d0b5:	0f af da             	imul   %edx,%ebx
 804d0b8:	57                   	push   %edi
 804d0b9:	01 de                	add    %ebx,%esi
 804d0bb:	8d 7c b5 ac          	lea    -0x54(%ebp,%esi,4),%edi
 804d0bf:	57                   	push   %edi
 804d0c0:	e8 4b c0 ff ff       	call   8049110 <getline@plt>
 804d0c5:	89 c3                	mov    %eax,%ebx
if((((line)) || ((line))) != (((line)) && ((line))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 335);
}

// MCC Label 336
if(((line)) && ((line)) ) {asm volatile (""::: "memory");
 804d0c7:	8b 45 ac             	mov    -0x54(%ebp),%eax
 804d0ca:	83 c4 10             	add    $0x10,%esp
 804d0cd:	85 c0                	test   %eax,%eax
 804d0cf:	0f 84 8b 2c 00 00    	je     804fd60 <main+0x6820>
 804d0d5:	8d 76 00             	lea    0x0(%esi),%esi
 804d0d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d0dc:	89 3c 24             	mov    %edi,(%esp)
 804d0df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d0e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d0e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d0eb:	b9 63 f0 00 00       	mov    $0xf063,%ecx
 804d0f0:	e8 63 b6 00 00       	call   8058758 <__afl_maybe_log>
 804d0f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d0f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d0fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d101:	8b 3c 24             	mov    (%esp),%edi
 804d104:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 336);
 804d108:	83 ec 08             	sub    $0x8,%esp
 804d10b:	68 50 01 00 00       	push   $0x150
 804d110:	68 de 70 06 08       	push   $0x80670de
 804d115:	e8 a6 8f 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 338
if(!(((line))) && ((line)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 338);
}
// MCC Label 339
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
 804d11a:	8b 75 ac             	mov    -0x54(%ebp),%esi
 804d11d:	83 c4 10             	add    $0x10,%esp
 804d120:	85 f6                	test   %esi,%esi
 804d122:	0f 84 38 2c 00 00    	je     804fd60 <main+0x6820>
 804d128:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d12c:	89 3c 24             	mov    %edi,(%esp)
 804d12f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d133:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d137:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d13b:	b9 ea 93 00 00       	mov    $0x93ea,%ecx
 804d140:	e8 13 b6 00 00       	call   8058758 <__afl_maybe_log>
 804d145:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d149:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d14d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d151:	8b 3c 24             	mov    (%esp),%edi
 804d154:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 339);
}
if (((line)) && ((line))) {
                int lava_271 = 0;
                lava_271 |= ((unsigned char *)(line))[0] << (0 * 8);
                lava_271 |= ((unsigned char *)(line))[1] << (1 * 8);
 804d158:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d15c:	89 3c 24             	mov    %edi,(%esp)
 804d15f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d163:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d167:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d16b:	b9 2a 80 00 00       	mov    $0x802a,%ecx
 804d170:	e8 e3 b5 00 00       	call   8058758 <__afl_maybe_log>
 804d175:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d179:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d17d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d181:	8b 3c 24             	mov    (%esp),%edi
 804d184:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d188:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
                lava_271 |= ((unsigned char *)(line))[2] << (2 * 8);
 804d18c:	0f b6 7e 02          	movzbl 0x2(%esi),%edi
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 339);
}
if (((line)) && ((line))) {
                int lava_271 = 0;
                lava_271 |= ((unsigned char *)(line))[0] << (0 * 8);
 804d190:	0f b6 06             	movzbl (%esi),%eax
                lava_271 |= ((unsigned char *)(line))[1] << (1 * 8);
                lava_271 |= ((unsigned char *)(line))[2] << (2 * 8);
                lava_271 |= ((unsigned char *)(line))[3] << (3 * 8);
 804d193:	0f b6 76 03          	movzbl 0x3(%esi),%esi
	report_label_coverage("MCC", 339);
}
if (((line)) && ((line))) {
                int lava_271 = 0;
                lava_271 |= ((unsigned char *)(line))[0] << (0 * 8);
                lava_271 |= ((unsigned char *)(line))[1] << (1 * 8);
 804d197:	c1 e1 08             	shl    $0x8,%ecx
                lava_271 |= ((unsigned char *)(line))[2] << (2 * 8);
 804d19a:	c1 e7 10             	shl    $0x10,%edi
 804d19d:	09 cf                	or     %ecx,%edi
                lava_271 |= ((unsigned char *)(line))[3] << (3 * 8);
 804d19f:	c1 e6 18             	shl    $0x18,%esi
}
if (((line)) && ((line))) {
                int lava_271 = 0;
                lava_271 |= ((unsigned char *)(line))[0] << (0 * 8);
                lava_271 |= ((unsigned char *)(line))[1] << (1 * 8);
                lava_271 |= ((unsigned char *)(line))[2] << (2 * 8);
 804d1a2:	09 c7                	or     %eax,%edi
                lava_271 |= ((unsigned char *)(line))[3] << (3 * 8);
 804d1a4:	09 f7                	or     %esi,%edi
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804d1a6:	89 3d 7c b7 06 08    	mov    %edi,0x806b77c
 804d1ac:	89 3d 44 b3 06 08    	mov    %edi,0x806b344
 804d1b2:	89 3d 54 b3 06 08    	mov    %edi,0x806b354
            }
            kbcieiubweuhc1540383426;
        });
        
// ABS Label 340
if(line_length < 0)  {asm volatile (""::: "memory");
 804d1b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d1bc:	89 3c 24             	mov    %edi,(%esp)
 804d1bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d1c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d1c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d1cb:	b9 de 70 00 00       	mov    $0x70de,%ecx
 804d1d0:	e8 83 b5 00 00       	call   8058758 <__afl_maybe_log>
 804d1d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d1d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d1dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d1e1:	8b 3c 24             	mov    (%esp),%edi
 804d1e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d1e8:	83 fb 00             	cmp    $0x0,%ebx
 804d1eb:	0f 8c f3 52 00 00    	jl     80524e4 <main+0x8fa4>
 804d1f1:	8d 76 00             	lea    0x0(%esi),%esi
 804d1f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d1f8:	89 3c 24             	mov    %edi,(%esp)
 804d1fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d1ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d203:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d207:	b9 69 69 00 00       	mov    $0x6969,%ecx
 804d20c:	e8 47 b5 00 00       	call   8058758 <__afl_maybe_log>
 804d211:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d215:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d219:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d21d:	8b 3c 24             	mov    (%esp),%edi
 804d220:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 340);
}

// ROR Label 341
if((line_length < 0) != (line_length <= 0))  {asm volatile (""::: "memory");
 804d224:	0f 8f ae 2a 00 00    	jg     804fcd8 <main+0x6798>
 804d22a:	66 90                	xchg   %ax,%ax
 804d22c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d230:	89 3c 24             	mov    %edi,(%esp)
 804d233:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d237:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d23b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d23f:	b9 96 ae 00 00       	mov    $0xae96,%ecx
 804d244:	e8 0f b5 00 00       	call   8058758 <__afl_maybe_log>
 804d249:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d24d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d251:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d255:	8b 3c 24             	mov    (%esp),%edi
 804d258:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 341);
 804d25c:	83 ec 08             	sub    $0x8,%esp
 804d25f:	68 55 01 00 00       	push   $0x155
 804d264:	68 c8 70 06 08       	push   $0x80670c8
 804d269:	e8 52 8e 00 00       	call   80560c0 <report_label_coverage>
}
// ROR Label 342
if((line_length > 0) != (line_length <= 0))  {asm volatile (""::: "memory");
 804d26e:	83 c4 10             	add    $0x10,%esp
if(line_length < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 340);
}

// ROR Label 341
if((line_length < 0) != (line_length <= 0))  {asm volatile (""::: "memory");
 804d271:	c6 45 a0 01          	movb   $0x1,-0x60(%ebp)
 804d275:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ROR", 341);
}
// ROR Label 342
if((line_length > 0) != (line_length <= 0))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 342);
 804d278:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d27c:	89 3c 24             	mov    %edi,(%esp)
 804d27f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d283:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d287:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d28b:	b9 a1 10 00 00       	mov    $0x10a1,%ecx
 804d290:	e8 c3 b4 00 00       	call   8058758 <__afl_maybe_log>
 804d295:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d299:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d29d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d2a1:	8b 3c 24             	mov    (%esp),%edi
 804d2a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d2a8:	83 ec 08             	sub    $0x8,%esp
 804d2ab:	68 56 01 00 00       	push   $0x156
 804d2b0:	68 c8 70 06 08       	push   $0x80670c8
 804d2b5:	e8 06 8e 00 00       	call   80560c0 <report_label_coverage>
}
// ROR Label 343
if((line_length >= 0) != (line_length <= 0))  {asm volatile (""::: "memory");
 804d2ba:	89 da                	mov    %ebx,%edx
 804d2bc:	83 c4 10             	add    $0x10,%esp
 804d2bf:	f7 d2                	not    %edx
 804d2c1:	c1 ea 1f             	shr    $0x1f,%edx
 804d2c4:	38 55 a0             	cmp    %dl,-0x60(%ebp)
 804d2c7:	74 78                	je     804d341 <main+0x3e01>
 804d2c9:	8d 76 00             	lea    0x0(%esi),%esi
 804d2cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d2d0:	89 3c 24             	mov    %edi,(%esp)
 804d2d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d2d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d2db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d2df:	b9 59 e9 00 00       	mov    $0xe959,%ecx
 804d2e4:	e8 6f b4 00 00       	call   8058758 <__afl_maybe_log>
 804d2e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d2ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d2f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d2f5:	8b 3c 24             	mov    (%esp),%edi
 804d2f8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 343);
 804d2fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d300:	89 3c 24             	mov    %edi,(%esp)
 804d303:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d307:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d30b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d30f:	b9 91 98 00 00       	mov    $0x9891,%ecx
 804d314:	e8 3f b4 00 00       	call   8058758 <__afl_maybe_log>
 804d319:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d31d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d321:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d325:	8b 3c 24             	mov    (%esp),%edi
 804d328:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d32c:	83 ec 08             	sub    $0x8,%esp
 804d32f:	68 57 01 00 00       	push   $0x157
 804d334:	68 c8 70 06 08       	push   $0x80670c8
 804d339:	e8 82 8d 00 00       	call   80560c0 <report_label_coverage>
 804d33e:	83 c4 10             	add    $0x10,%esp
 804d341:	8d 76 00             	lea    0x0(%esi),%esi
}
if (line_length <= 0)
 804d344:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d348:	89 3c 24             	mov    %edi,(%esp)
 804d34b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d34f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d353:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d357:	b9 dd b1 00 00       	mov    $0xb1dd,%ecx
 804d35c:	e8 f7 b3 00 00       	call   8058758 <__afl_maybe_log>
 804d361:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d365:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d369:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d36d:	8b 3c 24             	mov    (%esp),%edi
 804d370:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d374:	80 7d a0 00          	cmpb   $0x0,-0x60(%ebp)
 804d378:	0f 85 a2 1a 00 00    	jne    804ee20 <main+0x58e0>
 804d37e:	66 90                	xchg   %ax,%ax
 804d380:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d384:	89 3c 24             	mov    %edi,(%esp)
 804d387:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d38b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d38f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d393:	b9 bf 29 00 00       	mov    $0x29bf,%ecx
 804d398:	e8 bb b3 00 00       	call   8058758 <__afl_maybe_log>
 804d39d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d3a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d3a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d3a9:	8b 3c 24             	mov    (%esp),%edi
 804d3ac:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
        
// ROR Label 344
if((line[0] != '#') != (line[0] == '#'))  {asm volatile (""::: "memory");
 804d3b0:	8b 7d ac             	mov    -0x54(%ebp),%edi
 804d3b3:	0f b6 17             	movzbl (%edi),%edx
 804d3b6:	89 7d a4             	mov    %edi,-0x5c(%ebp)
 804d3b9:	80 fa 23             	cmp    $0x23,%dl
 804d3bc:	0f 95 c0             	setne  %al
 804d3bf:	0f 94 c1             	sete   %cl
 804d3c2:	38 c8                	cmp    %cl,%al
 804d3c4:	74 50                	je     804d416 <main+0x3ed6>
 804d3c6:	66 90                	xchg   %ax,%ax
 804d3c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d3cc:	89 3c 24             	mov    %edi,(%esp)
 804d3cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d3d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d3d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d3db:	b9 fe 83 00 00       	mov    $0x83fe,%ecx
 804d3e0:	e8 73 b3 00 00       	call   8058758 <__afl_maybe_log>
 804d3e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d3e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d3ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d3f1:	8b 3c 24             	mov    (%esp),%edi
 804d3f4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 344);
 804d3f8:	83 ec 08             	sub    $0x8,%esp
 804d3fb:	68 58 01 00 00       	push   $0x158
 804d400:	68 c8 70 06 08       	push   $0x80670c8
 804d405:	e8 b6 8c 00 00       	call   80560c0 <report_label_coverage>
 804d40a:	8b 55 ac             	mov    -0x54(%ebp),%edx
 804d40d:	83 c4 10             	add    $0x10,%esp
 804d410:	89 55 a4             	mov    %edx,-0x5c(%ebp)
 804d413:	0f b6 12             	movzbl (%edx),%edx
 804d416:	66 90                	xchg   %ax,%ax
}
if (line[0] == '#')
 804d418:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d41c:	89 3c 24             	mov    %edi,(%esp)
 804d41f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d423:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d427:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d42b:	b9 3b da 00 00       	mov    $0xda3b,%ecx
 804d430:	e8 23 b3 00 00       	call   8058758 <__afl_maybe_log>
 804d435:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d439:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d43d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d441:	8b 3c 24             	mov    (%esp),%edi
 804d444:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d448:	80 fa 23             	cmp    $0x23,%dl
 804d44b:	0f 84 ff f2 ff ff    	je     804c750 <main+0x3210>
 804d451:	8d 76 00             	lea    0x0(%esi),%esi
 804d454:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d458:	89 3c 24             	mov    %edi,(%esp)
 804d45b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d45f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d463:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d467:	b9 cd b1 00 00       	mov    $0xb1cd,%ecx
 804d46c:	e8 e7 b2 00 00       	call   8058758 <__afl_maybe_log>
 804d471:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d475:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d479:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d47d:	8b 3c 24             	mov    (%esp),%edi
 804d480:	8d 64 24 10          	lea    0x10(%esp),%esp
            continue;
        
// ROR Label 345
if((line[line_length - 1] != '\n') != (line[line_length - 1] == '\n'))  {asm volatile (""::: "memory");
 804d484:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 804d487:	8d 7b ff             	lea    -0x1(%ebx),%edi
 804d48a:	0f b6 54 1e ff       	movzbl -0x1(%esi,%ebx,1),%edx
 804d48f:	80 fa 0a             	cmp    $0xa,%dl
 804d492:	0f 95 c0             	setne  %al
 804d495:	0f 94 c1             	sete   %cl
 804d498:	38 c8                	cmp    %cl,%al
 804d49a:	74 50                	je     804d4ec <main+0x3fac>
 804d49c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d4a0:	89 3c 24             	mov    %edi,(%esp)
 804d4a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d4a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d4ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d4af:	b9 b5 14 00 00       	mov    $0x14b5,%ecx
 804d4b4:	e8 9f b2 00 00       	call   8058758 <__afl_maybe_log>
 804d4b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d4bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d4c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d4c5:	8b 3c 24             	mov    (%esp),%edi
 804d4c8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 345);
 804d4cc:	83 ec 08             	sub    $0x8,%esp
 804d4cf:	68 59 01 00 00       	push   $0x159
 804d4d4:	68 c8 70 06 08       	push   $0x80670c8
 804d4d9:	e8 e2 8b 00 00       	call   80560c0 <report_label_coverage>
 804d4de:	8b 55 ac             	mov    -0x54(%ebp),%edx
 804d4e1:	83 c4 10             	add    $0x10,%esp
 804d4e4:	89 55 a4             	mov    %edx,-0x5c(%ebp)
 804d4e7:	0f b6 54 1a ff       	movzbl -0x1(%edx,%ebx,1),%edx
}
if (line[line_length - 1] == '\n')
 804d4ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d4f0:	89 3c 24             	mov    %edi,(%esp)
 804d4f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d4f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d4fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d4ff:	b9 e2 d4 00 00       	mov    $0xd4e2,%ecx
 804d504:	e8 4f b2 00 00       	call   8058758 <__afl_maybe_log>
 804d509:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d50d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d511:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d515:	8b 3c 24             	mov    (%esp),%edi
 804d518:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d51c:	80 fa 0a             	cmp    $0xa,%dl
 804d51f:	89 de                	mov    %ebx,%esi
 804d521:	0f 84 72 44 00 00    	je     8051999 <main+0x8459>
 804d527:	90                   	nop
 804d528:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d52c:	89 3c 24             	mov    %edi,(%esp)
 804d52f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d533:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d537:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d53b:	b9 00 f1 00 00       	mov    $0xf100,%ecx
 804d540:	e8 13 b2 00 00       	call   8058758 <__afl_maybe_log>
 804d545:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d549:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d54d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d551:	8b 3c 24             	mov    (%esp),%edi
 804d554:	8d 64 24 10          	lea    0x10(%esp),%esp
if((((hex_digest)) || ((hex_digest))) != (((hex_digest)) && ((hex_digest))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 347);
}

// MCC Label 348
if(((hex_digest)) && ((hex_digest)) ) {asm volatile (""::: "memory");
 804d558:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d55c:	89 3c 24             	mov    %edi,(%esp)
 804d55f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d563:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d567:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d56b:	b9 61 75 00 00       	mov    $0x7561,%ecx
 804d570:	e8 e3 b1 00 00       	call   8058758 <__afl_maybe_log>
 804d575:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d579:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d57d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d581:	8b 3c 24             	mov    (%esp),%edi
 804d584:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d588:	8b 5d bc             	mov    -0x44(%ebp),%ebx
 804d58b:	85 db                	test   %ebx,%ebx
 804d58d:	0f 84 7e 43 00 00    	je     8051911 <main+0x83d1>
 804d593:	90                   	nop
 804d594:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d598:	89 3c 24             	mov    %edi,(%esp)
 804d59b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d59f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d5a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d5a7:	b9 a1 29 00 00       	mov    $0x29a1,%ecx
 804d5ac:	e8 a7 b1 00 00       	call   8058758 <__afl_maybe_log>
 804d5b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d5b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d5b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d5bd:	8b 3c 24             	mov    (%esp),%edi
 804d5c0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 348);
 804d5c4:	83 ec 08             	sub    $0x8,%esp
 804d5c7:	68 5c 01 00 00       	push   $0x15c
 804d5cc:	68 de 70 06 08       	push   $0x80670de
 804d5d1:	e8 ea 8a 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 350
if(!(((hex_digest))) && ((hex_digest)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 350);
}
// MCC Label 351
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
 804d5d6:	8b 7d bc             	mov    -0x44(%ebp),%edi
 804d5d9:	83 c4 10             	add    $0x10,%esp
 804d5dc:	85 ff                	test   %edi,%edi
 804d5de:	0f 84 2d 43 00 00    	je     8051911 <main+0x83d1>
 804d5e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d5e8:	89 3c 24             	mov    %edi,(%esp)
 804d5eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d5ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d5f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d5f7:	b9 07 b1 00 00       	mov    $0xb107,%ecx
 804d5fc:	e8 57 b1 00 00       	call   8058758 <__afl_maybe_log>
 804d601:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d605:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d609:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d60d:	8b 3c 24             	mov    (%esp),%edi
 804d610:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 351);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_387 = 0;
                    lava_387 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_387 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
 804d614:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d618:	89 3c 24             	mov    %edi,(%esp)
 804d61b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d61f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d623:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d627:	b9 a8 6d 00 00       	mov    $0x6da8,%ecx
 804d62c:	e8 27 b1 00 00       	call   8058758 <__afl_maybe_log>
 804d631:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d635:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d639:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d63d:	8b 3c 24             	mov    (%esp),%edi
 804d640:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d644:	0f b6 47 01          	movzbl 0x1(%edi),%eax
                    lava_387 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 804d648:	0f b6 5f 02          	movzbl 0x2(%edi),%ebx
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 351);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_387 = 0;
                    lava_387 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
 804d64c:	0f b6 17             	movzbl (%edi),%edx
                    lava_387 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_387 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
                    lava_387 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 804d64f:	0f b6 7f 03          	movzbl 0x3(%edi),%edi
	report_label_coverage("MCC", 351);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_387 = 0;
                    lava_387 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_387 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
 804d653:	c1 e0 08             	shl    $0x8,%eax
                    lava_387 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 804d656:	c1 e3 10             	shl    $0x10,%ebx
 804d659:	09 c3                	or     %eax,%ebx
                    lava_387 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 804d65b:	c1 e7 18             	shl    $0x18,%edi
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_387 = 0;
                    lava_387 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_387 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_387 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 804d65e:	09 d3                	or     %edx,%ebx
                    lava_387 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 804d660:	09 fb                	or     %edi,%ebx
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804d662:	89 1d 4c b9 06 08    	mov    %ebx,0x806b94c
 804d668:	89 1d 04 b8 06 08    	mov    %ebx,0x806b804
 804d66e:	89 1d ec bb 06 08    	mov    %ebx,0x806bbec
 804d674:	89 1d 2c bc 06 08    	mov    %ebx,0x806bc2c
 804d67a:	66 90                	xchg   %ax,%ax
if((((line)) || ((line))) != (((line)) && ((line))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 353);
}

// MCC Label 354
if(((line)) && ((line)) ) {asm volatile (""::: "memory");
 804d67c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d680:	89 3c 24             	mov    %edi,(%esp)
 804d683:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d687:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d68b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d68f:	b9 02 6d 00 00       	mov    $0x6d02,%ecx
 804d694:	e8 bf b0 00 00       	call   8058758 <__afl_maybe_log>
 804d699:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d69d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d6a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d6a5:	8b 3c 24             	mov    (%esp),%edi
 804d6a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d6ac:	8b 45 ac             	mov    -0x54(%ebp),%eax
 804d6af:	85 c0                	test   %eax,%eax
 804d6b1:	0f 84 d2 41 00 00    	je     8051889 <main+0x8349>
 804d6b7:	90                   	nop
 804d6b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d6bc:	89 3c 24             	mov    %edi,(%esp)
 804d6bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d6c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d6c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d6cb:	b9 e0 c7 00 00       	mov    $0xc7e0,%ecx
 804d6d0:	e8 83 b0 00 00       	call   8058758 <__afl_maybe_log>
 804d6d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d6d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d6dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d6e1:	8b 3c 24             	mov    (%esp),%edi
 804d6e4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 354);
 804d6e8:	83 ec 08             	sub    $0x8,%esp
 804d6eb:	68 62 01 00 00       	push   $0x162
 804d6f0:	68 de 70 06 08       	push   $0x80670de
 804d6f5:	e8 c6 89 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 356
if(!(((line))) && ((line)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 356);
}
// MCC Label 357
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
 804d6fa:	8b 5d ac             	mov    -0x54(%ebp),%ebx
 804d6fd:	83 c4 10             	add    $0x10,%esp
 804d700:	85 db                	test   %ebx,%ebx
 804d702:	0f 84 81 41 00 00    	je     8051889 <main+0x8349>
 804d708:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d70c:	89 3c 24             	mov    %edi,(%esp)
 804d70f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d713:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d717:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d71b:	b9 67 ef 00 00       	mov    $0xef67,%ecx
 804d720:	e8 33 b0 00 00       	call   8058758 <__afl_maybe_log>
 804d725:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d729:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d72d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d731:	8b 3c 24             	mov    (%esp),%edi
 804d734:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 357);
}
if (((line)) && ((line))) {
                    int lava_273 = 0;
                    lava_273 |= ((unsigned char *)(line))[0] << (0 * 8);
                    lava_273 |= ((unsigned char *)(line))[1] << (1 * 8);
 804d738:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d73c:	89 3c 24             	mov    %edi,(%esp)
 804d73f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d743:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d747:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d74b:	b9 0a 27 00 00       	mov    $0x270a,%ecx
 804d750:	e8 03 b0 00 00       	call   8058758 <__afl_maybe_log>
 804d755:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d759:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d75d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d761:	8b 3c 24             	mov    (%esp),%edi
 804d764:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d768:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
                    lava_273 |= ((unsigned char *)(line))[2] << (2 * 8);
 804d76c:	0f b6 7b 02          	movzbl 0x2(%ebx),%edi
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 357);
}
if (((line)) && ((line))) {
                    int lava_273 = 0;
                    lava_273 |= ((unsigned char *)(line))[0] << (0 * 8);
 804d770:	0f b6 03             	movzbl (%ebx),%eax
                    lava_273 |= ((unsigned char *)(line))[1] << (1 * 8);
                    lava_273 |= ((unsigned char *)(line))[2] << (2 * 8);
                    lava_273 |= ((unsigned char *)(line))[3] << (3 * 8);
 804d773:	0f b6 5b 03          	movzbl 0x3(%ebx),%ebx
	report_label_coverage("MCC", 357);
}
if (((line)) && ((line))) {
                    int lava_273 = 0;
                    lava_273 |= ((unsigned char *)(line))[0] << (0 * 8);
                    lava_273 |= ((unsigned char *)(line))[1] << (1 * 8);
 804d777:	c1 e1 08             	shl    $0x8,%ecx
                    lava_273 |= ((unsigned char *)(line))[2] << (2 * 8);
 804d77a:	c1 e7 10             	shl    $0x10,%edi
 804d77d:	09 cf                	or     %ecx,%edi
                    lava_273 |= ((unsigned char *)(line))[3] << (3 * 8);
 804d77f:	c1 e3 18             	shl    $0x18,%ebx
}
if (((line)) && ((line))) {
                    int lava_273 = 0;
                    lava_273 |= ((unsigned char *)(line))[0] << (0 * 8);
                    lava_273 |= ((unsigned char *)(line))[1] << (1 * 8);
                    lava_273 |= ((unsigned char *)(line))[2] << (2 * 8);
 804d782:	09 c7                	or     %eax,%edi
                    lava_273 |= ((unsigned char *)(line))[3] << (3 * 8);
 804d784:	09 df                	or     %ebx,%edi
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804d786:	89 3d 84 b7 06 08    	mov    %edi,0x806b784
 804d78c:	89 3d 48 b3 06 08    	mov    %edi,0x806b348
 804d792:	89 3d 5c b3 06 08    	mov    %edi,0x806b35c
                    lava_7 |= ((unsigned char *)(line))[1] << (1 * 8);
                    lava_7 |= ((unsigned char *)(line))[2] << (2 * 8);
                    lava_7 |= ((unsigned char *)(line))[3] << (3 * 8);
                    lava_set(7, lava_7);
                }
                _Bool kbcieiubweuhc304089172 = split_3(line + (lava_get(279)) * (1818326346 == (lava_get(279)) || 1249206636 == (lava_get(279))) + (lava_get(284)) * (1818326341 == (lava_get(284)) || 1165320556 == (lava_get(284))), line_length + (lava_get(281)) * (1818326344 == (lava_get(281)) || 1215652204 == (lava_get(281))) + (lava_get(287)) * (1818326338 == (lava_get(287)) || 1114988908 == (lava_get(287))), &hex_digest + (lava_get(1)) * (1818326624 == (lava_get(1)) || 1618370924 == (lava_get(1))) + (lava_get(289)) * (1818326336 == (lava_get(289)) || 1081434476 == (lava_get(289))), &binary + (lava_get(286)) * (1818326339 == (lava_get(286)) || 1131766124 == (lava_get(286))), &filename + (lava_get(2)) * (1818326623 == (lava_get(2)) || 1601593708 == (lava_get(2))));
 804d798:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d79c:	89 3c 24             	mov    %edi,(%esp)
 804d79f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d7a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d7a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d7ab:	b9 f6 83 00 00       	mov    $0x83f6,%ecx
 804d7b0:	e8 a3 af 00 00       	call   8058758 <__afl_maybe_log>
 804d7b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d7b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d7bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d7c1:	8b 3c 24             	mov    (%esp),%edi
 804d7c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d7c8:	83 ec 0c             	sub    $0xc,%esp
 804d7cb:	6a 02                	push   $0x2
 804d7cd:	e8 8e 94 00 00       	call   8056c60 <lava_get>
 804d7d2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
 804d7d9:	89 c7                	mov    %eax,%edi
 804d7db:	e8 80 94 00 00       	call   8056c60 <lava_get>
 804d7e0:	83 c4 10             	add    $0x10,%esp
 804d7e3:	3d 5f 76 61 6c       	cmp    $0x6c61765f,%eax
 804d7e8:	b9 01 00 00 00       	mov    $0x1,%ecx
 804d7ed:	74 48                	je     804d837 <main+0x42f7>
 804d7ef:	90                   	nop
 804d7f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d7f4:	89 3c 24             	mov    %edi,(%esp)
 804d7f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d7fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d7ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d803:	b9 6c 6f 00 00       	mov    $0x6f6c,%ecx
 804d808:	e8 4b af 00 00       	call   8058758 <__afl_maybe_log>
 804d80d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d811:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d815:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d819:	8b 3c 24             	mov    (%esp),%edi
 804d81c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d820:	83 ec 0c             	sub    $0xc,%esp
 804d823:	6a 02                	push   $0x2
 804d825:	e8 36 94 00 00       	call   8056c60 <lava_get>
 804d82a:	31 c9                	xor    %ecx,%ecx
 804d82c:	83 c4 10             	add    $0x10,%esp
 804d82f:	3d 6c 61 76 5f       	cmp    $0x5f76616c,%eax
 804d834:	0f 94 c1             	sete   %cl
 804d837:	90                   	nop
 804d838:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d83c:	89 3c 24             	mov    %edi,(%esp)
 804d83f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d843:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d847:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d84b:	b9 51 41 00 00       	mov    $0x4151,%ecx
 804d850:	e8 03 af 00 00       	call   8058758 <__afl_maybe_log>
 804d855:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d859:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d85d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d861:	8b 3c 24             	mov    (%esp),%edi
 804d864:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d868:	c1 e7 02             	shl    $0x2,%edi
 804d86b:	83 ec 0c             	sub    $0xc,%esp
 804d86e:	8d 55 b4             	lea    -0x4c(%ebp),%edx
 804d871:	0f af cf             	imul   %edi,%ecx
 804d874:	68 1e 01 00 00       	push   $0x11e
 804d879:	01 ca                	add    %ecx,%edx
 804d87b:	89 95 70 ff ff ff    	mov    %edx,-0x90(%ebp)
 804d881:	e8 da 93 00 00       	call   8056c60 <lava_get>
 804d886:	c7 04 24 1e 01 00 00 	movl   $0x11e,(%esp)
 804d88d:	89 c3                	mov    %eax,%ebx
 804d88f:	e8 cc 93 00 00       	call   8056c60 <lava_get>
 804d894:	83 c4 10             	add    $0x10,%esp
 804d897:	3d 43 75 61 6c       	cmp    $0x6c617543,%eax
 804d89c:	b9 01 00 00 00       	mov    $0x1,%ecx
 804d8a1:	74 4b                	je     804d8ee <main+0x43ae>
 804d8a3:	90                   	nop
 804d8a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d8a8:	89 3c 24             	mov    %edi,(%esp)
 804d8ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d8af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d8b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d8b7:	b9 07 9b 00 00       	mov    $0x9b07,%ecx
 804d8bc:	e8 97 ae 00 00       	call   8058758 <__afl_maybe_log>
 804d8c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d8c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d8c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d8cd:	8b 3c 24             	mov    (%esp),%edi
 804d8d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d8d4:	83 ec 0c             	sub    $0xc,%esp
 804d8d7:	68 1e 01 00 00       	push   $0x11e
 804d8dc:	e8 7f 93 00 00       	call   8056c60 <lava_get>
 804d8e1:	31 c9                	xor    %ecx,%ecx
 804d8e3:	83 c4 10             	add    $0x10,%esp
 804d8e6:	3d 6c 61 75 43       	cmp    $0x4375616c,%eax
 804d8eb:	0f 94 c1             	sete   %cl
 804d8ee:	66 90                	xchg   %ax,%ax
 804d8f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d8f4:	89 3c 24             	mov    %edi,(%esp)
 804d8f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d8fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d8ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d903:	b9 6e 7f 00 00       	mov    $0x7f6e,%ecx
 804d908:	e8 4b ae 00 00       	call   8058758 <__afl_maybe_log>
 804d90d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d911:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d915:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d919:	8b 3c 24             	mov    (%esp),%edi
 804d91c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d920:	c1 e3 02             	shl    $0x2,%ebx
 804d923:	83 ec 0c             	sub    $0xc,%esp
 804d926:	8d 45 b8             	lea    -0x48(%ebp),%eax
 804d929:	0f af cb             	imul   %ebx,%ecx
 804d92c:	6a 01                	push   $0x1
 804d92e:	01 c8                	add    %ecx,%eax
 804d930:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
 804d936:	e8 25 93 00 00       	call   8056c60 <lava_get>
 804d93b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804d942:	89 c3                	mov    %eax,%ebx
 804d944:	e8 17 93 00 00       	call   8056c60 <lava_get>
 804d949:	83 c4 10             	add    $0x10,%esp
 804d94c:	3d 60 76 61 6c       	cmp    $0x6c617660,%eax
 804d951:	ba 01 00 00 00       	mov    $0x1,%edx
 804d956:	74 47                	je     804d99f <main+0x445f>
 804d958:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d95c:	89 3c 24             	mov    %edi,(%esp)
 804d95f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d963:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d967:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d96b:	b9 6b 93 00 00       	mov    $0x936b,%ecx
 804d970:	e8 e3 ad 00 00       	call   8058758 <__afl_maybe_log>
 804d975:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d979:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d97d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d981:	8b 3c 24             	mov    (%esp),%edi
 804d984:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d988:	83 ec 0c             	sub    $0xc,%esp
 804d98b:	6a 01                	push   $0x1
 804d98d:	e8 ce 92 00 00       	call   8056c60 <lava_get>
 804d992:	31 d2                	xor    %edx,%edx
 804d994:	83 c4 10             	add    $0x10,%esp
 804d997:	3d 6c 61 76 60       	cmp    $0x6076616c,%eax
 804d99c:	0f 94 c2             	sete   %dl
 804d99f:	90                   	nop
 804d9a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d9a4:	89 3c 24             	mov    %edi,(%esp)
 804d9a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d9ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d9af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d9b3:	b9 d4 b4 00 00       	mov    $0xb4d4,%ecx
 804d9b8:	e8 9b ad 00 00       	call   8058758 <__afl_maybe_log>
 804d9bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d9c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d9c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d9c9:	8b 3c 24             	mov    (%esp),%edi
 804d9cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d9d0:	83 ec 0c             	sub    $0xc,%esp
 804d9d3:	68 21 01 00 00       	push   $0x121
 804d9d8:	0f af da             	imul   %edx,%ebx
 804d9db:	e8 80 92 00 00       	call   8056c60 <lava_get>
 804d9e0:	c7 04 24 21 01 00 00 	movl   $0x121,(%esp)
 804d9e7:	89 c7                	mov    %eax,%edi
 804d9e9:	e8 72 92 00 00       	call   8056c60 <lava_get>
 804d9ee:	83 c4 10             	add    $0x10,%esp
 804d9f1:	3d 40 75 61 6c       	cmp    $0x6c617540,%eax
 804d9f6:	b9 01 00 00 00       	mov    $0x1,%ecx
 804d9fb:	74 4d                	je     804da4a <main+0x450a>
 804d9fd:	8d 76 00             	lea    0x0(%esi),%esi
 804da00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804da04:	89 3c 24             	mov    %edi,(%esp)
 804da07:	89 54 24 04          	mov    %edx,0x4(%esp)
 804da0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804da0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804da13:	b9 1c bd 00 00       	mov    $0xbd1c,%ecx
 804da18:	e8 3b ad 00 00       	call   8058758 <__afl_maybe_log>
 804da1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804da21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804da25:	8b 54 24 04          	mov    0x4(%esp),%edx
 804da29:	8b 3c 24             	mov    (%esp),%edi
 804da2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804da30:	83 ec 0c             	sub    $0xc,%esp
 804da33:	68 21 01 00 00       	push   $0x121
 804da38:	e8 23 92 00 00       	call   8056c60 <lava_get>
 804da3d:	31 c9                	xor    %ecx,%ecx
 804da3f:	83 c4 10             	add    $0x10,%esp
 804da42:	3d 6c 61 75 40       	cmp    $0x4075616c,%eax
 804da47:	0f 94 c1             	sete   %cl
 804da4a:	66 90                	xchg   %ax,%ax
 804da4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804da50:	89 3c 24             	mov    %edi,(%esp)
 804da53:	89 54 24 04          	mov    %edx,0x4(%esp)
 804da57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804da5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804da5f:	b9 95 f5 00 00       	mov    $0xf595,%ecx
 804da64:	e8 ef ac 00 00       	call   8058758 <__afl_maybe_log>
 804da69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804da6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804da71:	8b 54 24 04          	mov    0x4(%esp),%edx
 804da75:	8b 3c 24             	mov    (%esp),%edi
 804da78:	8d 64 24 10          	lea    0x10(%esp),%esp
 804da7c:	0f af f9             	imul   %ecx,%edi
 804da7f:	83 ec 0c             	sub    $0xc,%esp
 804da82:	68 19 01 00 00       	push   $0x119
 804da87:	01 fb                	add    %edi,%ebx
 804da89:	8d 44 9d bc          	lea    -0x44(%ebp,%ebx,4),%eax
 804da8d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
 804da93:	e8 c8 91 00 00       	call   8056c60 <lava_get>
 804da98:	c7 04 24 19 01 00 00 	movl   $0x119,(%esp)
 804da9f:	89 c3                	mov    %eax,%ebx
 804daa1:	e8 ba 91 00 00       	call   8056c60 <lava_get>
 804daa6:	83 c4 10             	add    $0x10,%esp
 804daa9:	3d 48 75 61 6c       	cmp    $0x6c617548,%eax
 804daae:	ba 01 00 00 00       	mov    $0x1,%edx
 804dab3:	74 4d                	je     804db02 <main+0x45c2>
 804dab5:	8d 76 00             	lea    0x0(%esi),%esi
 804dab8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dabc:	89 3c 24             	mov    %edi,(%esp)
 804dabf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dac3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dac7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dacb:	b9 76 10 00 00       	mov    $0x1076,%ecx
 804dad0:	e8 83 ac 00 00       	call   8058758 <__afl_maybe_log>
 804dad5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dad9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dadd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dae1:	8b 3c 24             	mov    (%esp),%edi
 804dae4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dae8:	83 ec 0c             	sub    $0xc,%esp
 804daeb:	68 19 01 00 00       	push   $0x119
 804daf0:	e8 6b 91 00 00       	call   8056c60 <lava_get>
 804daf5:	31 d2                	xor    %edx,%edx
 804daf7:	83 c4 10             	add    $0x10,%esp
 804dafa:	3d 6c 61 75 48       	cmp    $0x4875616c,%eax
 804daff:	0f 94 c2             	sete   %dl
 804db02:	66 90                	xchg   %ax,%ax
 804db04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804db08:	89 3c 24             	mov    %edi,(%esp)
 804db0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804db0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804db13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804db17:	b9 c8 79 00 00       	mov    $0x79c8,%ecx
 804db1c:	e8 37 ac 00 00       	call   8058758 <__afl_maybe_log>
 804db21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804db25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804db29:	8b 54 24 04          	mov    0x4(%esp),%edx
 804db2d:	8b 3c 24             	mov    (%esp),%edi
 804db30:	8d 64 24 10          	lea    0x10(%esp),%esp
 804db34:	83 ec 0c             	sub    $0xc,%esp
 804db37:	89 d7                	mov    %edx,%edi
 804db39:	68 1f 01 00 00       	push   $0x11f
 804db3e:	0f af fb             	imul   %ebx,%edi
 804db41:	e8 1a 91 00 00       	call   8056c60 <lava_get>
 804db46:	c7 04 24 1f 01 00 00 	movl   $0x11f,(%esp)
 804db4d:	89 c3                	mov    %eax,%ebx
 804db4f:	e8 0c 91 00 00       	call   8056c60 <lava_get>
 804db54:	83 c4 10             	add    $0x10,%esp
 804db57:	3d 42 75 61 6c       	cmp    $0x6c617542,%eax
 804db5c:	b9 01 00 00 00       	mov    $0x1,%ecx
 804db61:	74 4b                	je     804dbae <main+0x466e>
 804db63:	90                   	nop
 804db64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804db68:	89 3c 24             	mov    %edi,(%esp)
 804db6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804db6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804db73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804db77:	b9 39 06 00 00       	mov    $0x639,%ecx
 804db7c:	e8 d7 ab 00 00       	call   8058758 <__afl_maybe_log>
 804db81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804db85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804db89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804db8d:	8b 3c 24             	mov    (%esp),%edi
 804db90:	8d 64 24 10          	lea    0x10(%esp),%esp
 804db94:	83 ec 0c             	sub    $0xc,%esp
 804db97:	68 1f 01 00 00       	push   $0x11f
 804db9c:	e8 bf 90 00 00       	call   8056c60 <lava_get>
 804dba1:	31 c9                	xor    %ecx,%ecx
 804dba3:	83 c4 10             	add    $0x10,%esp
 804dba6:	3d 6c 61 75 42       	cmp    $0x4275616c,%eax
 804dbab:	0f 94 c1             	sete   %cl
 804dbae:	66 90                	xchg   %ax,%ax
 804dbb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dbb4:	89 3c 24             	mov    %edi,(%esp)
 804dbb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dbbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dbbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dbc3:	b9 67 fc 00 00       	mov    $0xfc67,%ecx
 804dbc8:	e8 8b ab 00 00       	call   8058758 <__afl_maybe_log>
 804dbcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dbd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dbd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dbd9:	8b 3c 24             	mov    (%esp),%edi
 804dbdc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dbe0:	0f af d9             	imul   %ecx,%ebx
 804dbe3:	83 ec 0c             	sub    $0xc,%esp
 804dbe6:	01 fe                	add    %edi,%esi
 804dbe8:	68 17 01 00 00       	push   $0x117
 804dbed:	8b 7d ac             	mov    -0x54(%ebp),%edi
 804dbf0:	8d 34 1e             	lea    (%esi,%ebx,1),%esi
 804dbf3:	89 75 9c             	mov    %esi,-0x64(%ebp)
 804dbf6:	e8 65 90 00 00       	call   8056c60 <lava_get>
 804dbfb:	c7 04 24 17 01 00 00 	movl   $0x117,(%esp)
 804dc02:	89 c3                	mov    %eax,%ebx
 804dc04:	e8 57 90 00 00       	call   8056c60 <lava_get>
 804dc09:	83 c4 10             	add    $0x10,%esp
 804dc0c:	3d 4a 75 61 6c       	cmp    $0x6c61754a,%eax
 804dc11:	ba 01 00 00 00       	mov    $0x1,%edx
 804dc16:	74 4a                	je     804dc62 <main+0x4722>
 804dc18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dc1c:	89 3c 24             	mov    %edi,(%esp)
 804dc1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dc27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dc2b:	b9 25 3d 00 00       	mov    $0x3d25,%ecx
 804dc30:	e8 23 ab 00 00       	call   8058758 <__afl_maybe_log>
 804dc35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dc39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dc3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dc41:	8b 3c 24             	mov    (%esp),%edi
 804dc44:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dc48:	83 ec 0c             	sub    $0xc,%esp
 804dc4b:	68 17 01 00 00       	push   $0x117
 804dc50:	e8 0b 90 00 00       	call   8056c60 <lava_get>
 804dc55:	31 d2                	xor    %edx,%edx
 804dc57:	83 c4 10             	add    $0x10,%esp
 804dc5a:	3d 6c 61 75 4a       	cmp    $0x4a75616c,%eax
 804dc5f:	0f 94 c2             	sete   %dl
 804dc62:	66 90                	xchg   %ax,%ax
 804dc64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dc68:	89 3c 24             	mov    %edi,(%esp)
 804dc6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dc73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dc77:	b9 8b 2e 00 00       	mov    $0x2e8b,%ecx
 804dc7c:	e8 d7 aa 00 00       	call   8058758 <__afl_maybe_log>
 804dc81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dc85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dc89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dc8d:	8b 3c 24             	mov    (%esp),%edi
 804dc90:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dc94:	83 ec 0c             	sub    $0xc,%esp
 804dc97:	68 1c 01 00 00       	push   $0x11c
 804dc9c:	0f af da             	imul   %edx,%ebx
 804dc9f:	e8 bc 8f 00 00       	call   8056c60 <lava_get>
 804dca4:	c7 04 24 1c 01 00 00 	movl   $0x11c,(%esp)
 804dcab:	89 c6                	mov    %eax,%esi
 804dcad:	e8 ae 8f 00 00       	call   8056c60 <lava_get>
 804dcb2:	83 c4 10             	add    $0x10,%esp
 804dcb5:	3d 45 75 61 6c       	cmp    $0x6c617545,%eax
 804dcba:	b9 01 00 00 00       	mov    $0x1,%ecx
 804dcbf:	74 4d                	je     804dd0e <main+0x47ce>
 804dcc1:	8d 76 00             	lea    0x0(%esi),%esi
 804dcc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dcc8:	89 3c 24             	mov    %edi,(%esp)
 804dccb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dccf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dcd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dcd7:	b9 12 8d 00 00       	mov    $0x8d12,%ecx
 804dcdc:	e8 77 aa 00 00       	call   8058758 <__afl_maybe_log>
 804dce1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dce5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dce9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dced:	8b 3c 24             	mov    (%esp),%edi
 804dcf0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dcf4:	83 ec 0c             	sub    $0xc,%esp
 804dcf7:	68 1c 01 00 00       	push   $0x11c
 804dcfc:	e8 5f 8f 00 00       	call   8056c60 <lava_get>
 804dd01:	31 c9                	xor    %ecx,%ecx
 804dd03:	83 c4 10             	add    $0x10,%esp
 804dd06:	3d 6c 61 75 45       	cmp    $0x4575616c,%eax
 804dd0b:	0f 94 c1             	sete   %cl
 804dd0e:	66 90                	xchg   %ax,%ax
 804dd10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dd14:	89 3c 24             	mov    %edi,(%esp)
 804dd17:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dd1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dd1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dd23:	b9 f8 b4 00 00       	mov    $0xb4f8,%ecx
 804dd28:	e8 2b aa 00 00       	call   8058758 <__afl_maybe_log>
 804dd2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dd31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dd35:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dd39:	8b 3c 24             	mov    (%esp),%edi
 804dd3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dd40:	0f af f1             	imul   %ecx,%esi
 804dd43:	01 f3                	add    %esi,%ebx
 804dd45:	8d 04 1f             	lea    (%edi,%ebx,1),%eax
// MCC Label 244
if(( (s[i]) == ' ' && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 244);
}
// MCC Label 245
if(( (s[i]) == ' ' && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 804dd48:	0f b6 10             	movzbl (%eax),%edx
                    lava_7 |= ((unsigned char *)(line))[1] << (1 * 8);
                    lava_7 |= ((unsigned char *)(line))[2] << (2 * 8);
                    lava_7 |= ((unsigned char *)(line))[3] << (3 * 8);
                    lava_set(7, lava_7);
                }
                _Bool kbcieiubweuhc304089172 = split_3(line + (lava_get(279)) * (1818326346 == (lava_get(279)) || 1249206636 == (lava_get(279))) + (lava_get(284)) * (1818326341 == (lava_get(284)) || 1165320556 == (lava_get(284))), line_length + (lava_get(281)) * (1818326344 == (lava_get(281)) || 1215652204 == (lava_get(281))) + (lava_get(287)) * (1818326338 == (lava_get(287)) || 1114988908 == (lava_get(287))), &hex_digest + (lava_get(1)) * (1818326624 == (lava_get(1)) || 1618370924 == (lava_get(1))) + (lava_get(289)) * (1818326336 == (lava_get(289)) || 1081434476 == (lava_get(289))), &binary + (lava_get(286)) * (1818326339 == (lava_get(286)) || 1131766124 == (lava_get(286))), &filename + (lava_get(2)) * (1818326623 == (lava_get(2)) || 1601593708 == (lava_get(2))));
 804dd4b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
// MCC Label 244
if(( (s[i]) == ' ' && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 244);
}
// MCC Label 245
if(( (s[i]) == ' ' && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 804dd4e:	80 fa 20             	cmp    $0x20,%dl
 804dd51:	0f 84 95 49 00 00    	je     80526ec <main+0x91ac>
 804dd57:	90                   	nop
 804dd58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dd5c:	89 3c 24             	mov    %edi,(%esp)
 804dd5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dd63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dd67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dd6b:	b9 75 ba 00 00       	mov    $0xba75,%ecx
 804dd70:	e8 e3 a9 00 00       	call   8058758 <__afl_maybe_log>
 804dd75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dd79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dd7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dd81:	8b 3c 24             	mov    (%esp),%edi
 804dd84:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 245);
}
// MCC Label 246
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
 804dd88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dd8c:	89 3c 24             	mov    %edi,(%esp)
 804dd8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dd93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dd97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dd9b:	b9 27 46 00 00       	mov    $0x4627,%ecx
 804dda0:	e8 b3 a9 00 00       	call   8058758 <__afl_maybe_log>
 804dda5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dda9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ddad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ddb1:	8b 3c 24             	mov    (%esp),%edi
 804ddb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ddb8:	80 fa 09             	cmp    $0x9,%dl
 804ddbb:	0f 84 7a 49 00 00    	je     805273b <main+0x91fb>
 804ddc1:	8d 76 00             	lea    0x0(%esi),%esi
 804ddc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ddc8:	89 3c 24             	mov    %edi,(%esp)
 804ddcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ddcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ddd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ddd7:	b9 68 e9 00 00       	mov    $0xe968,%ecx
 804dddc:	e8 77 a9 00 00       	call   8058758 <__afl_maybe_log>
 804dde1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dde5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dde9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dded:	8b 3c 24             	mov    (%esp),%edi
 804ddf0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 246);
}
// MCC Label 247
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 804ddf4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ddf8:	89 3c 24             	mov    %edi,(%esp)
 804ddfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ddff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804de03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804de07:	b9 38 05 00 00       	mov    $0x538,%ecx
 804de0c:	e8 47 a9 00 00       	call   8058758 <__afl_maybe_log>
 804de11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804de15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804de19:	8b 54 24 04          	mov    0x4(%esp),%edx
 804de1d:	8b 3c 24             	mov    (%esp),%edi
 804de20:	8d 64 24 10          	lea    0x10(%esp),%esp
 804de24:	80 fa 09             	cmp    $0x9,%dl
 804de27:	0f 84 85 00 00 00    	je     804deb2 <main+0x4972>
 804de2d:	8d 76 00             	lea    0x0(%esi),%esi
 804de30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804de34:	89 3c 24             	mov    %edi,(%esp)
 804de37:	89 54 24 04          	mov    %edx,0x4(%esp)
 804de3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804de3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804de43:	b9 e5 19 00 00       	mov    $0x19e5,%ecx
 804de48:	e8 0b a9 00 00       	call   8058758 <__afl_maybe_log>
 804de4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804de51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804de55:	8b 54 24 04          	mov    0x4(%esp),%edx
 804de59:	8b 3c 24             	mov    (%esp),%edi
 804de5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804de60:	80 fa 20             	cmp    $0x20,%dl
 804de63:	74 4d                	je     804deb2 <main+0x4972>
 804de65:	8d 76 00             	lea    0x0(%esi),%esi
 804de68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804de6c:	89 3c 24             	mov    %edi,(%esp)
 804de6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804de73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804de77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804de7b:	b9 3e 01 00 00       	mov    $0x13e,%ecx
 804de80:	e8 d3 a8 00 00       	call   8058758 <__afl_maybe_log>
 804de85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804de89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804de8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804de91:	8b 3c 24             	mov    (%esp),%edi
 804de94:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 247);
 804de98:	53                   	push   %ebx
 804de99:	53                   	push   %ebx
 804de9a:	68 f7 00 00 00       	push   $0xf7
 804de9f:	68 de 70 06 08       	push   $0x80670de
 804dea4:	e8 17 82 00 00       	call   80560c0 <report_label_coverage>
 804dea9:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 804deac:	83 c4 10             	add    $0x10,%esp
 804deaf:	0f b6 12             	movzbl (%edx),%edx
 804deb2:	66 90                	xchg   %ax,%ax
}
while (ISWHITE (s[i]))
 804deb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804deb8:	89 3c 24             	mov    %edi,(%esp)
 804debb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804debf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dec3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dec7:	b9 43 e4 00 00       	mov    $0xe443,%ecx
 804decc:	e8 87 a8 00 00       	call   8058758 <__afl_maybe_log>
 804ded1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ded5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ded9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dedd:	8b 3c 24             	mov    (%esp),%edi
 804dee0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dee4:	80 fa 09             	cmp    $0x9,%dl
 804dee7:	74 6f                	je     804df58 <main+0x4a18>
 804dee9:	8d 76 00             	lea    0x0(%esi),%esi
 804deec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804def0:	89 3c 24             	mov    %edi,(%esp)
 804def3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804def7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804defb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804deff:	b9 bf bd 00 00       	mov    $0xbdbf,%ecx
 804df04:	e8 4f a8 00 00       	call   8058758 <__afl_maybe_log>
 804df09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804df0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804df11:	8b 54 24 04          	mov    0x4(%esp),%edx
 804df15:	8b 3c 24             	mov    (%esp),%edi
 804df18:	8d 64 24 10          	lea    0x10(%esp),%esp
 804df1c:	80 fa 20             	cmp    $0x20,%dl
 804df1f:	0f 85 29 4f 00 00    	jne    8052e4e <main+0x990e>
 804df25:	8d 76 00             	lea    0x0(%esi),%esi
 804df28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804df2c:	89 3c 24             	mov    %edi,(%esp)
 804df2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804df33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804df37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804df3b:	b9 70 9d 00 00       	mov    $0x9d70,%ecx
 804df40:	e8 13 a8 00 00       	call   8058758 <__afl_maybe_log>
 804df45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804df49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804df4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804df51:	8b 3c 24             	mov    (%esp),%edi
 804df54:	8d 64 24 10          	lea    0x10(%esp),%esp
 804df58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804df5c:	89 3c 24             	mov    %edi,(%esp)
 804df5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804df63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804df67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804df6b:	b9 d7 72 00 00       	mov    $0x72d7,%ecx
 804df70:	e8 e3 a7 00 00       	call   8058758 <__afl_maybe_log>
 804df75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804df79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804df7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804df81:	8b 3c 24             	mov    (%esp),%edi
 804df84:	8d 64 24 10          	lea    0x10(%esp),%esp
 804df88:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
 804df8b:	31 db                	xor    %ebx,%ebx
 804df8d:	83 c1 01             	add    $0x1,%ecx
 804df90:	0f b6 11             	movzbl (%ecx),%edx
    ++i;
 804df93:	83 c3 01             	add    $0x1,%ebx
}
// MCC Label 247
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 247);
}
while (ISWHITE (s[i]))
 804df96:	89 ce                	mov    %ecx,%esi
 804df98:	83 c1 01             	add    $0x1,%ecx
 804df9b:	80 fa 09             	cmp    $0x9,%dl
 804df9e:	74 f0                	je     804df90 <main+0x4a50>
 804dfa0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dfa4:	89 3c 24             	mov    %edi,(%esp)
 804dfa7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dfab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dfaf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dfb3:	b9 3e 6f 00 00       	mov    $0x6f3e,%ecx
 804dfb8:	e8 9b a7 00 00       	call   8058758 <__afl_maybe_log>
 804dfbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dfc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dfc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dfc9:	8b 3c 24             	mov    (%esp),%edi
 804dfcc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dfd0:	80 fa 20             	cmp    $0x20,%dl
 804dfd3:	74 bb                	je     804df90 <main+0x4a50>
 804dfd5:	8d 76 00             	lea    0x0(%esi),%esi
 804dfd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dfdc:	89 3c 24             	mov    %edi,(%esp)
 804dfdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dfe3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dfe7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dfeb:	b9 76 5b 00 00       	mov    $0x5b76,%ecx
 804dff0:	e8 63 a7 00 00       	call   8058758 <__afl_maybe_log>
 804dff5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dff9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dffd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e001:	8b 3c 24             	mov    (%esp),%edi
 804e004:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 250
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 250);
}
// MCC Label 251
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 804e008:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e00c:	89 3c 24             	mov    %edi,(%esp)
 804e00f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e013:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e017:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e01b:	b9 4e a0 00 00       	mov    $0xa04e,%ecx
 804e020:	e8 33 a7 00 00       	call   8058758 <__afl_maybe_log>
 804e025:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e029:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e02d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e031:	8b 3c 24             	mov    (%esp),%edi
 804e034:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e038:	80 fa 09             	cmp    $0x9,%dl
 804e03b:	0f 84 82 00 00 00    	je     804e0c3 <main+0x4b83>
 804e041:	8d 76 00             	lea    0x0(%esi),%esi
 804e044:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e048:	89 3c 24             	mov    %edi,(%esp)
 804e04b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e04f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e053:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e057:	b9 1f e8 00 00       	mov    $0xe81f,%ecx
 804e05c:	e8 f7 a6 00 00       	call   8058758 <__afl_maybe_log>
 804e061:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e065:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e069:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e06d:	8b 3c 24             	mov    (%esp),%edi
 804e070:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e074:	80 fa 20             	cmp    $0x20,%dl
 804e077:	74 4a                	je     804e0c3 <main+0x4b83>
 804e079:	8d 76 00             	lea    0x0(%esi),%esi
 804e07c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e080:	89 3c 24             	mov    %edi,(%esp)
 804e083:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e087:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e08b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e08f:	b9 9d 74 00 00       	mov    $0x749d,%ecx
 804e094:	e8 bf a6 00 00       	call   8058758 <__afl_maybe_log>
 804e099:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e09d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e0a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e0a5:	8b 3c 24             	mov    (%esp),%edi
 804e0a8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 251);
 804e0ac:	51                   	push   %ecx
 804e0ad:	51                   	push   %ecx
 804e0ae:	68 fb 00 00 00       	push   $0xfb
 804e0b3:	68 de 70 06 08       	push   $0x80670de
 804e0b8:	e8 03 80 00 00       	call   80560c0 <report_label_coverage>
 804e0bd:	0f b6 16             	movzbl (%esi),%edx
 804e0c0:	83 c4 10             	add    $0x10,%esp
 804e0c3:	90                   	nop
}
;

  
// ROR Label 252
if((s[i] != '\\') != (s[i] == '\\'))  {asm volatile (""::: "memory");
 804e0c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e0c8:	89 3c 24             	mov    %edi,(%esp)
 804e0cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e0cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e0d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e0d7:	b9 45 0d 00 00       	mov    $0xd45,%ecx
 804e0dc:	e8 77 a6 00 00       	call   8058758 <__afl_maybe_log>
 804e0e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e0e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e0e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e0ed:	8b 3c 24             	mov    (%esp),%edi
 804e0f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e0f4:	80 fa 5c             	cmp    $0x5c,%dl
 804e0f7:	0f 95 c1             	setne  %cl
 804e0fa:	0f 94 c0             	sete   %al
 804e0fd:	38 c1                	cmp    %al,%cl
 804e0ff:	74 4b                	je     804e14c <main+0x4c0c>
 804e101:	8d 76 00             	lea    0x0(%esi),%esi
 804e104:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e108:	89 3c 24             	mov    %edi,(%esp)
 804e10b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e10f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e113:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e117:	b9 c5 2a 00 00       	mov    $0x2ac5,%ecx
 804e11c:	e8 37 a6 00 00       	call   8058758 <__afl_maybe_log>
 804e121:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e125:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e129:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e12d:	8b 3c 24             	mov    (%esp),%edi
 804e130:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 252);
 804e134:	83 ec 08             	sub    $0x8,%esp
 804e137:	68 fc 00 00 00       	push   $0xfc
 804e13c:	68 c8 70 06 08       	push   $0x80670c8
 804e141:	e8 7a 7f 00 00       	call   80560c0 <report_label_coverage>
 804e146:	0f b6 16             	movzbl (%esi),%edx
 804e149:	83 c4 10             	add    $0x10,%esp
}
if (s[i] == '\\')
 804e14c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e150:	89 3c 24             	mov    %edi,(%esp)
 804e153:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e15b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e15f:	b9 50 54 00 00       	mov    $0x5450,%ecx
 804e164:	e8 ef a5 00 00       	call   8058758 <__afl_maybe_log>
 804e169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e16d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e171:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e175:	8b 3c 24             	mov    (%esp),%edi
 804e178:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e17c:	80 fa 5c             	cmp    $0x5c,%dl

static bool
split_3 (char *s, size_t s_len,
         unsigned char **hex_digest, int *binary, char **file_name)
{
  bool escaped_filename = false;
 804e17f:	c6 85 7d ff ff ff 00 	movb   $0x0,-0x83(%ebp)
  
// ROR Label 252
if((s[i] != '\\') != (s[i] == '\\'))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 252);
}
if (s[i] == '\\')
 804e186:	0f 84 4f 38 00 00    	je     80519db <main+0x849b>
 804e18c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e190:	89 3c 24             	mov    %edi,(%esp)
 804e193:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e197:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e19b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e19f:	b9 fa 67 00 00       	mov    $0x67fa,%ecx
 804e1a4:	e8 af a5 00 00       	call   8058758 <__afl_maybe_log>
 804e1a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e1ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e1b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e1b5:	8b 3c 24             	mov    (%esp),%edi
 804e1b8:	8d 64 24 10          	lea    0x10(%esp),%esp
    }

  /* Check for BSD-style checksum line. */

  algo_name_len = strlen (DIGEST_TYPE_STRING);
  if (STREQ_LEN (s + i, DIGEST_TYPE_STRING, algo_name_len))
 804e1bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e1c0:	89 3c 24             	mov    %edi,(%esp)
 804e1c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e1c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e1cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e1cf:	b9 3f 0a 00 00       	mov    $0xa3f,%ecx
 804e1d4:	e8 7f a5 00 00       	call   8058758 <__afl_maybe_log>
 804e1d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e1dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e1e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e1e5:	8b 3c 24             	mov    (%esp),%edi
 804e1e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e1ec:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 804e1ef:	b9 03 00 00 00       	mov    $0x3,%ecx
 804e1f4:	bf eb 70 06 08       	mov    $0x80670eb,%edi
 804e1f9:	01 da                	add    %ebx,%edx
 804e1fb:	89 d6                	mov    %edx,%esi
 804e1fd:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 804e1ff:	0f 85 53 1b 00 00    	jne    804fd58 <main+0x6818>
 804e205:	8d 76 00             	lea    0x0(%esi),%esi
 804e208:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e20c:	89 3c 24             	mov    %edi,(%esp)
 804e20f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e213:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e217:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e21b:	b9 62 d2 00 00       	mov    $0xd262,%ecx
 804e220:	e8 33 a5 00 00       	call   8058758 <__afl_maybe_log>
 804e225:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e229:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e22d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e231:	8b 3c 24             	mov    (%esp),%edi
 804e234:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      
// ROR Label 253
if((s[i + algo_name_len] != ' ') != (s[i + algo_name_len] == ' '))  {asm volatile (""::: "memory");
 804e238:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 804e23b:	8d 7b 03             	lea    0x3(%ebx),%edi
 804e23e:	8d 34 38             	lea    (%eax,%edi,1),%esi
 804e241:	0f b6 06             	movzbl (%esi),%eax
 804e244:	3c 20                	cmp    $0x20,%al
 804e246:	0f 95 c1             	setne  %cl
 804e249:	0f 94 c2             	sete   %dl
 804e24c:	38 d1                	cmp    %dl,%cl
 804e24e:	74 47                	je     804e297 <main+0x4d57>
 804e250:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e254:	89 3c 24             	mov    %edi,(%esp)
 804e257:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e25b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e25f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e263:	b9 4a 06 00 00       	mov    $0x64a,%ecx
 804e268:	e8 eb a4 00 00       	call   8058758 <__afl_maybe_log>
 804e26d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e271:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e275:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e279:	8b 3c 24             	mov    (%esp),%edi
 804e27c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 253);
 804e280:	52                   	push   %edx
 804e281:	52                   	push   %edx
 804e282:	68 fd 00 00 00       	push   $0xfd
 804e287:	68 c8 70 06 08       	push   $0x80670c8
 804e28c:	e8 2f 7e 00 00       	call   80560c0 <report_label_coverage>
 804e291:	0f b6 06             	movzbl (%esi),%eax
 804e294:	83 c4 10             	add    $0x10,%esp
 804e297:	90                   	nop
}
if (s[i + algo_name_len] == ' ')
 804e298:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e29c:	89 3c 24             	mov    %edi,(%esp)
 804e29f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e2a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e2a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e2ab:	b9 00 9f 00 00       	mov    $0x9f00,%ecx
 804e2b0:	e8 a3 a4 00 00       	call   8058758 <__afl_maybe_log>
 804e2b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e2b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e2bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e2c1:	8b 3c 24             	mov    (%esp),%edi
 804e2c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e2c8:	3c 20                	cmp    $0x20,%al
 804e2ca:	0f 84 d7 43 00 00    	je     80526a7 <main+0x9167>
 804e2d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e2d4:	89 3c 24             	mov    %edi,(%esp)
 804e2d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e2db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e2df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e2e3:	b9 a6 66 00 00       	mov    $0x66a6,%ecx
 804e2e8:	e8 6b a4 00 00       	call   8058758 <__afl_maybe_log>
 804e2ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e2f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e2f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e2f9:	8b 3c 24             	mov    (%esp),%edi
 804e2fc:	8d 64 24 10          	lea    0x10(%esp),%esp
        ++i;
      
// ROR Label 254
if((s[i + algo_name_len] != '(') != (s[i + algo_name_len] == '('))  {asm volatile (""::: "memory");
 804e300:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e304:	89 3c 24             	mov    %edi,(%esp)
 804e307:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e30b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e30f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e313:	b9 da 6d 00 00       	mov    $0x6dda,%ecx
 804e318:	e8 3b a4 00 00       	call   8058758 <__afl_maybe_log>
 804e31d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e321:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e325:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e329:	8b 3c 24             	mov    (%esp),%edi
 804e32c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e330:	3c 28                	cmp    $0x28,%al
 804e332:	0f 95 c1             	setne  %cl
 804e335:	0f 94 c2             	sete   %dl
 804e338:	38 d1                	cmp    %dl,%cl
 804e33a:	74 44                	je     804e380 <main+0x4e40>
 804e33c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e340:	89 3c 24             	mov    %edi,(%esp)
 804e343:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e347:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e34b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e34f:	b9 d8 f4 00 00       	mov    $0xf4d8,%ecx
 804e354:	e8 ff a3 00 00       	call   8058758 <__afl_maybe_log>
 804e359:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e35d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e361:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e365:	8b 3c 24             	mov    (%esp),%edi
 804e368:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 254);
 804e36c:	50                   	push   %eax
 804e36d:	50                   	push   %eax
 804e36e:	68 fe 00 00 00       	push   $0xfe
 804e373:	68 c8 70 06 08       	push   $0x80670c8
 804e378:	e8 43 7d 00 00       	call   80560c0 <report_label_coverage>
 804e37d:	83 c4 10             	add    $0x10,%esp
}
if (s[i + algo_name_len] == '(')
 804e380:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e384:	89 3c 24             	mov    %edi,(%esp)
 804e387:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e38b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e38f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e393:	b9 14 7c 00 00       	mov    $0x7c14,%ecx
 804e398:	e8 bb a3 00 00       	call   8058758 <__afl_maybe_log>
 804e39d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e3a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e3a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e3a9:	8b 3c 24             	mov    (%esp),%edi
 804e3ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e3b0:	80 3e 28             	cmpb   $0x28,(%esi)
 804e3b3:	0f 84 a2 4e 00 00    	je     805325b <main+0x9d1b>
 804e3b9:	8d 76 00             	lea    0x0(%esi),%esi
 804e3bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e3c0:	89 3c 24             	mov    %edi,(%esp)
 804e3c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e3c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e3cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e3cf:	b9 25 38 00 00       	mov    $0x3825,%ecx
 804e3d4:	e8 7f a3 00 00       	call   8058758 <__afl_maybe_log>
 804e3d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e3dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e3e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e3e5:	8b 3c 24             	mov    (%esp),%edi
 804e3e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e3ec:	8b 7d a4             	mov    -0x5c(%ebp),%edi
 804e3ef:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
 804e3f2:	66 90                	xchg   %ax,%ax
// AOR Label 258
/* Manually Commented (Floating point exception) if(s_len / i != s_len - i)  {asm volatile (""::: "memory");
	report_label_coverage("AOR", 258);
}*/
// AOR Label 259
if(s_len + i != s_len - i)  {asm volatile (""::: "memory");
 804e3f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e3f8:	89 3c 24             	mov    %edi,(%esp)
 804e3fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e3ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e403:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e407:	b9 f3 0f 00 00       	mov    $0xff3,%ecx
 804e40c:	e8 47 a3 00 00       	call   8058758 <__afl_maybe_log>
 804e411:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e415:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e419:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e41d:	8b 3c 24             	mov    (%esp),%edi
 804e420:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e424:	8b 45 9c             	mov    -0x64(%ebp),%eax
 804e427:	89 c7                	mov    %eax,%edi
 804e429:	01 d8                	add    %ebx,%eax
 804e42b:	29 df                	sub    %ebx,%edi
 804e42d:	39 f8                	cmp    %edi,%eax
 804e42f:	74 48                	je     804e479 <main+0x4f39>
 804e431:	8d 76 00             	lea    0x0(%esi),%esi
 804e434:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e438:	89 3c 24             	mov    %edi,(%esp)
 804e43b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e43f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e443:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e447:	b9 32 6f 00 00       	mov    $0x6f32,%ecx
 804e44c:	e8 07 a3 00 00       	call   8058758 <__afl_maybe_log>
 804e451:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e455:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e459:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e45d:	8b 3c 24             	mov    (%esp),%edi
 804e460:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 259);
 804e464:	83 ec 08             	sub    $0x8,%esp
 804e467:	68 03 01 00 00       	push   $0x103
 804e46c:	68 cc 70 06 08       	push   $0x80670cc
 804e471:	e8 4a 7c 00 00       	call   80560c0 <report_label_coverage>
 804e476:	83 c4 10             	add    $0x10,%esp
 804e479:	8d 76 00             	lea    0x0(%esi),%esi
}
// AOR Label 260
if(s_len * i != s_len - i)  {asm volatile (""::: "memory");
 804e47c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e480:	89 3c 24             	mov    %edi,(%esp)
 804e483:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e487:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e48b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e48f:	b9 e3 04 00 00       	mov    $0x4e3,%ecx
 804e494:	e8 bf a2 00 00       	call   8058758 <__afl_maybe_log>
 804e499:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e49d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e4a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e4a5:	8b 3c 24             	mov    (%esp),%edi
 804e4a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e4ac:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
 804e4af:	0f af cb             	imul   %ebx,%ecx
 804e4b2:	39 cf                	cmp    %ecx,%edi
 804e4b4:	74 47                	je     804e4fd <main+0x4fbd>
 804e4b6:	66 90                	xchg   %ax,%ax
 804e4b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e4bc:	89 3c 24             	mov    %edi,(%esp)
 804e4bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e4c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e4c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e4cb:	b9 78 ef 00 00       	mov    $0xef78,%ecx
 804e4d0:	e8 83 a2 00 00       	call   8058758 <__afl_maybe_log>
 804e4d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e4d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e4dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e4e1:	8b 3c 24             	mov    (%esp),%edi
 804e4e4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 260);
 804e4e8:	83 ec 08             	sub    $0x8,%esp
 804e4eb:	68 04 01 00 00       	push   $0x104
 804e4f0:	68 cc 70 06 08       	push   $0x80670cc
 804e4f5:	e8 c6 7b 00 00       	call   80560c0 <report_label_coverage>
 804e4fa:	83 c4 10             	add    $0x10,%esp
 804e4fd:	8d 76 00             	lea    0x0(%esi),%esi
}
// AOR Label 261
if(min_digest_line_length - (s[i] == '\\') != min_digest_line_length + (s[i] == '\\'))  {asm volatile (""::: "memory");
 804e500:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e504:	89 3c 24             	mov    %edi,(%esp)
 804e507:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e50b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e50f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e513:	b9 38 df 00 00       	mov    $0xdf38,%ecx
 804e518:	e8 3b a2 00 00       	call   8058758 <__afl_maybe_log>
 804e51d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e521:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e525:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e529:	8b 3c 24             	mov    (%esp),%edi
 804e52c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e530:	31 c9                	xor    %ecx,%ecx
 804e532:	80 3e 5c             	cmpb   $0x5c,(%esi)
 804e535:	a1 08 b3 06 08       	mov    0x806b308,%eax
 804e53a:	0f 94 c1             	sete   %cl
 804e53d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
 804e540:	29 c8                	sub    %ecx,%eax
 804e542:	39 d0                	cmp    %edx,%eax
 804e544:	74 55                	je     804e59b <main+0x505b>
 804e546:	66 90                	xchg   %ax,%ax
 804e548:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e54c:	89 3c 24             	mov    %edi,(%esp)
 804e54f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e553:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e557:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e55b:	b9 03 20 00 00       	mov    $0x2003,%ecx
 804e560:	e8 f3 a1 00 00       	call   8058758 <__afl_maybe_log>
 804e565:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e569:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e56d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e571:	8b 3c 24             	mov    (%esp),%edi
 804e574:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 261);
 804e578:	83 ec 08             	sub    $0x8,%esp
 804e57b:	68 05 01 00 00       	push   $0x105
 804e580:	68 cc 70 06 08       	push   $0x80670cc
 804e585:	e8 36 7b 00 00       	call   80560c0 <report_label_coverage>
 804e58a:	31 d2                	xor    %edx,%edx
 804e58c:	83 c4 10             	add    $0x10,%esp
 804e58f:	80 3e 5c             	cmpb   $0x5c,(%esi)
 804e592:	0f 94 c2             	sete   %dl
 804e595:	03 15 08 b3 06 08    	add    0x806b308,%edx
 804e59b:	90                   	nop
	report_label_coverage("AOR", 263);
}
*/

// ROR Label 264
if((s_len - i <= min_digest_line_length + (s[i] == '\\')) != (s_len - i < min_digest_line_length + (s[i] == '\\')))  {asm volatile (""::: "memory");
 804e59c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e5a0:	89 3c 24             	mov    %edi,(%esp)
 804e5a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e5a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e5ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e5af:	b9 eb 14 00 00       	mov    $0x14eb,%ecx
 804e5b4:	e8 9f a1 00 00       	call   8058758 <__afl_maybe_log>
 804e5b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e5bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e5c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e5c5:	8b 3c 24             	mov    (%esp),%edi
 804e5c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e5cc:	39 d7                	cmp    %edx,%edi
 804e5ce:	0f 92 c0             	setb   %al
 804e5d1:	0f 96 c1             	setbe  %cl
 804e5d4:	38 c1                	cmp    %al,%cl
 804e5d6:	74 58                	je     804e630 <main+0x50f0>
 804e5d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e5dc:	89 3c 24             	mov    %edi,(%esp)
 804e5df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e5e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e5e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e5eb:	b9 39 69 00 00       	mov    $0x6939,%ecx
 804e5f0:	e8 63 a1 00 00       	call   8058758 <__afl_maybe_log>
 804e5f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e5f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e5fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e601:	8b 3c 24             	mov    (%esp),%edi
 804e604:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 264);
 804e608:	83 ec 08             	sub    $0x8,%esp
 804e60b:	68 08 01 00 00       	push   $0x108
 804e610:	68 c8 70 06 08       	push   $0x80670c8
 804e615:	e8 a6 7a 00 00       	call   80560c0 <report_label_coverage>
 804e61a:	31 d2                	xor    %edx,%edx
 804e61c:	83 c4 10             	add    $0x10,%esp
 804e61f:	80 3e 5c             	cmpb   $0x5c,(%esi)
 804e622:	0f 94 c2             	sete   %dl
 804e625:	03 15 08 b3 06 08    	add    0x806b308,%edx
 804e62b:	39 d7                	cmp    %edx,%edi
 804e62d:	0f 92 c0             	setb   %al
}
// ROR Label 265
if((s_len - i > min_digest_line_length + (s[i] == '\\')) != (s_len - i < min_digest_line_length + (s[i] == '\\')))  {asm volatile (""::: "memory");
 804e630:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e634:	89 3c 24             	mov    %edi,(%esp)
 804e637:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e63b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e63f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e643:	b9 84 0b 00 00       	mov    $0xb84,%ecx
 804e648:	e8 0b a1 00 00       	call   8058758 <__afl_maybe_log>
 804e64d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e651:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e655:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e659:	8b 3c 24             	mov    (%esp),%edi
 804e65c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e660:	39 d7                	cmp    %edx,%edi
 804e662:	0f 97 c1             	seta   %cl
 804e665:	38 c1                	cmp    %al,%cl
 804e667:	74 5b                	je     804e6c4 <main+0x5184>
 804e669:	8d 76 00             	lea    0x0(%esi),%esi
 804e66c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e670:	89 3c 24             	mov    %edi,(%esp)
 804e673:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e677:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e67b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e67f:	b9 83 b0 00 00       	mov    $0xb083,%ecx
 804e684:	e8 cf a0 00 00       	call   8058758 <__afl_maybe_log>
 804e689:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e68d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e691:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e695:	8b 3c 24             	mov    (%esp),%edi
 804e698:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 265);
 804e69c:	83 ec 08             	sub    $0x8,%esp
 804e69f:	68 09 01 00 00       	push   $0x109
 804e6a4:	68 c8 70 06 08       	push   $0x80670c8
 804e6a9:	e8 12 7a 00 00       	call   80560c0 <report_label_coverage>
 804e6ae:	31 d2                	xor    %edx,%edx
 804e6b0:	83 c4 10             	add    $0x10,%esp
 804e6b3:	80 3e 5c             	cmpb   $0x5c,(%esi)
 804e6b6:	0f 94 c2             	sete   %dl
 804e6b9:	03 15 08 b3 06 08    	add    0x806b308,%edx
 804e6bf:	39 d7                	cmp    %edx,%edi
 804e6c1:	0f 92 c0             	setb   %al
}
// ROR Label 266
if((s_len - i >= min_digest_line_length + (s[i] == '\\')) != (s_len - i < min_digest_line_length + (s[i] == '\\')))  {asm volatile (""::: "memory");
 804e6c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e6c8:	89 3c 24             	mov    %edi,(%esp)
 804e6cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e6cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e6d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e6d7:	b9 86 6a 00 00       	mov    $0x6a86,%ecx
 804e6dc:	e8 77 a0 00 00       	call   8058758 <__afl_maybe_log>
 804e6e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e6e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e6e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e6ed:	8b 3c 24             	mov    (%esp),%edi
 804e6f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e6f4:	39 d7                	cmp    %edx,%edi
 804e6f6:	0f 93 c1             	setae  %cl
 804e6f9:	38 c1                	cmp    %al,%cl
 804e6fb:	74 56                	je     804e753 <main+0x5213>
 804e6fd:	8d 76 00             	lea    0x0(%esi),%esi
 804e700:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e704:	89 3c 24             	mov    %edi,(%esp)
 804e707:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e70b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e70f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e713:	b9 0b 81 00 00       	mov    $0x810b,%ecx
 804e718:	e8 3b a0 00 00       	call   8058758 <__afl_maybe_log>
 804e71d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e721:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e725:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e729:	8b 3c 24             	mov    (%esp),%edi
 804e72c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 266);
 804e730:	83 ec 08             	sub    $0x8,%esp
 804e733:	68 0a 01 00 00       	push   $0x10a
 804e738:	68 c8 70 06 08       	push   $0x80670c8
 804e73d:	e8 7e 79 00 00       	call   80560c0 <report_label_coverage>
 804e742:	31 d2                	xor    %edx,%edx
 804e744:	83 c4 10             	add    $0x10,%esp
 804e747:	80 3e 5c             	cmpb   $0x5c,(%esi)
 804e74a:	0f 94 c2             	sete   %dl
 804e74d:	03 15 08 b3 06 08    	add    0x806b308,%edx
 804e753:	90                   	nop
}
if (s_len - i < min_digest_line_length + (s[i] == '\\'))
 804e754:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e758:	89 3c 24             	mov    %edi,(%esp)
 804e75b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e75f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e763:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e767:	b9 7a 21 00 00       	mov    $0x217a,%ecx
 804e76c:	e8 e7 9f 00 00       	call   8058758 <__afl_maybe_log>
 804e771:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e775:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e779:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e77d:	8b 3c 24             	mov    (%esp),%edi
 804e780:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e784:	39 d7                	cmp    %edx,%edi
 804e786:	0f 82 b8 00 00 00    	jb     804e844 <main+0x5304>
 804e78c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e790:	89 3c 24             	mov    %edi,(%esp)
 804e793:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e797:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e79b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e79f:	b9 79 b5 00 00       	mov    $0xb579,%ecx
 804e7a4:	e8 af 9f 00 00       	call   8058758 <__afl_maybe_log>
 804e7a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e7ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e7b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e7b5:	8b 3c 24             	mov    (%esp),%edi
 804e7b8:	8d 64 24 10          	lea    0x10(%esp),%esp
    return false;

  *hex_digest = (unsigned char *) &s[i];
 804e7bc:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi

  /* The first field has to be the n-character hexadecimal
     representation of the message digest.  If it is not followed
     immediately by a white space it's an error.  */
  i += digest_hex_bytes;
 804e7c2:	03 1d 04 b3 06 08    	add    0x806b304,%ebx
	report_label_coverage("ROR", 266);
}
if (s_len - i < min_digest_line_length + (s[i] == '\\'))
    return false;

  *hex_digest = (unsigned char *) &s[i];
 804e7c8:	89 37                	mov    %esi,(%edi)

  /* The first field has to be the n-character hexadecimal
     representation of the message digest.  If it is not followed
     immediately by a white space it's an error.  */
  i += digest_hex_bytes;
  if (!ISWHITE (s[i]))
 804e7ca:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 804e7cd:	8d 0c 1e             	lea    (%esi,%ebx,1),%ecx
 804e7d0:	0f b6 01             	movzbl (%ecx),%eax
 804e7d3:	3c 09                	cmp    $0x9,%al
 804e7d5:	0f 84 a5 0f 00 00    	je     804f780 <main+0x6240>
 804e7db:	90                   	nop
 804e7dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e7e0:	89 3c 24             	mov    %edi,(%esp)
 804e7e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e7e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e7eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e7ef:	b9 31 c6 00 00       	mov    $0xc631,%ecx
 804e7f4:	e8 5f 9f 00 00       	call   8058758 <__afl_maybe_log>
 804e7f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e7fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e801:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e805:	8b 3c 24             	mov    (%esp),%edi
 804e808:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e80c:	3c 20                	cmp    $0x20,%al
 804e80e:	0f 84 6c 0f 00 00    	je     804f780 <main+0x6240>
 804e814:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e818:	89 3c 24             	mov    %edi,(%esp)
 804e81b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e81f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e823:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e827:	b9 f1 b9 00 00       	mov    $0xb9f1,%ecx
 804e82c:	e8 27 9f 00 00       	call   8058758 <__afl_maybe_log>
 804e831:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e835:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e839:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e83d:	8b 3c 24             	mov    (%esp),%edi
 804e840:	8d 64 24 10          	lea    0x10(%esp),%esp
// ROR Label 208
if((s_len != 0) != (s_len == 0))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 208);
}
if (s_len == 0)
    return false;
 804e844:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e848:	89 3c 24             	mov    %edi,(%esp)
 804e84b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e84f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e853:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e857:	b9 e3 0d 00 00       	mov    $0xde3,%ecx
 804e85c:	e8 f7 9e 00 00       	call   8058758 <__afl_maybe_log>
 804e861:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e865:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e869:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e86d:	8b 3c 24             	mov    (%esp),%edi
 804e870:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e874:	31 db                	xor    %ebx,%ebx
 804e876:	66 90                	xchg   %ax,%ax
if((((filename)) || ((filename))) != (((filename)) && ((filename))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 359);
}

// MCC Label 360
if(((filename)) && ((filename)) ) {asm volatile (""::: "memory");
 804e878:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e87c:	89 3c 24             	mov    %edi,(%esp)
 804e87f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e883:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e887:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e88b:	b9 b4 5a 00 00       	mov    $0x5ab4,%ecx
 804e890:	e8 c3 9e 00 00       	call   8058758 <__afl_maybe_log>
 804e895:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e899:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e89d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e8a1:	8b 3c 24             	mov    (%esp),%edi
 804e8a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e8a8:	8b 7d b4             	mov    -0x4c(%ebp),%edi
 804e8ab:	85 ff                	test   %edi,%edi
 804e8ad:	0f 84 4e 2f 00 00    	je     8051801 <main+0x82c1>
 804e8b3:	90                   	nop
 804e8b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e8b8:	89 3c 24             	mov    %edi,(%esp)
 804e8bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e8bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e8c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e8c7:	b9 9a a5 00 00       	mov    $0xa59a,%ecx
 804e8cc:	e8 87 9e 00 00       	call   8058758 <__afl_maybe_log>
 804e8d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e8d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e8d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e8dd:	8b 3c 24             	mov    (%esp),%edi
 804e8e0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 360);
 804e8e4:	83 ec 08             	sub    $0x8,%esp
 804e8e7:	68 68 01 00 00       	push   $0x168
 804e8ec:	68 de 70 06 08       	push   $0x80670de
 804e8f1:	e8 ca 77 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 362
if(!(((filename))) && ((filename)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 362);
}
// MCC Label 363
if(!(((filename))) && !(((filename))) ) {asm volatile (""::: "memory");
 804e8f6:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 804e8f9:	83 c4 10             	add    $0x10,%esp
 804e8fc:	85 d2                	test   %edx,%edx
 804e8fe:	0f 84 fd 2e 00 00    	je     8051801 <main+0x82c1>
 804e904:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e908:	89 3c 24             	mov    %edi,(%esp)
 804e90b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e90f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e913:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e917:	b9 70 42 00 00       	mov    $0x4270,%ecx
 804e91c:	e8 37 9e 00 00       	call   8058758 <__afl_maybe_log>
 804e921:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e925:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e929:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e92d:	8b 3c 24             	mov    (%esp),%edi
 804e930:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 363);
}
if (((filename)) && ((filename))) {
                    int lava_272 = 0;
                    lava_272 |= ((unsigned char *)(filename))[0] << (0 * 8);
                    lava_272 |= ((unsigned char *)(filename))[1] << (1 * 8);
 804e934:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e938:	89 3c 24             	mov    %edi,(%esp)
 804e93b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e93f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e943:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e947:	b9 f4 8d 00 00       	mov    $0x8df4,%ecx
 804e94c:	e8 07 9e 00 00       	call   8058758 <__afl_maybe_log>
 804e951:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e955:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e959:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e95d:	8b 3c 24             	mov    (%esp),%edi
 804e960:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e964:	0f b6 4a 01          	movzbl 0x1(%edx),%ecx
                    lava_272 |= ((unsigned char *)(filename))[2] << (2 * 8);
 804e968:	0f b6 42 02          	movzbl 0x2(%edx),%eax
if(!(((filename))) && !(((filename))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 363);
}
if (((filename)) && ((filename))) {
                    int lava_272 = 0;
                    lava_272 |= ((unsigned char *)(filename))[0] << (0 * 8);
 804e96c:	0f b6 3a             	movzbl (%edx),%edi
                    lava_272 |= ((unsigned char *)(filename))[1] << (1 * 8);
                    lava_272 |= ((unsigned char *)(filename))[2] << (2 * 8);
                    lava_272 |= ((unsigned char *)(filename))[3] << (3 * 8);
 804e96f:	0f b6 52 03          	movzbl 0x3(%edx),%edx
	report_label_coverage("MCC", 363);
}
if (((filename)) && ((filename))) {
                    int lava_272 = 0;
                    lava_272 |= ((unsigned char *)(filename))[0] << (0 * 8);
                    lava_272 |= ((unsigned char *)(filename))[1] << (1 * 8);
 804e973:	c1 e1 08             	shl    $0x8,%ecx
                    lava_272 |= ((unsigned char *)(filename))[2] << (2 * 8);
 804e976:	c1 e0 10             	shl    $0x10,%eax
 804e979:	09 c8                	or     %ecx,%eax
                    lava_272 |= ((unsigned char *)(filename))[3] << (3 * 8);
 804e97b:	c1 e2 18             	shl    $0x18,%edx
}
if (((filename)) && ((filename))) {
                    int lava_272 = 0;
                    lava_272 |= ((unsigned char *)(filename))[0] << (0 * 8);
                    lava_272 |= ((unsigned char *)(filename))[1] << (1 * 8);
                    lava_272 |= ((unsigned char *)(filename))[2] << (2 * 8);
 804e97e:	09 f8                	or     %edi,%eax
                    lava_272 |= ((unsigned char *)(filename))[3] << (3 * 8);
 804e980:	09 d0                	or     %edx,%eax
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804e982:	a3 80 b7 06 08       	mov    %eax,0x806b780
 804e987:	a3 58 b3 06 08       	mov    %eax,0x806b358
if((((hex_digest)) || ((hex_digest))) != (((hex_digest)) && ((hex_digest))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 365);
}

// MCC Label 366
if(((hex_digest)) && ((hex_digest)) ) {asm volatile (""::: "memory");
 804e98c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e990:	89 3c 24             	mov    %edi,(%esp)
 804e993:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e997:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e99b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e99f:	b9 05 cc 00 00       	mov    $0xcc05,%ecx
 804e9a4:	e8 af 9d 00 00       	call   8058758 <__afl_maybe_log>
 804e9a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e9ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e9b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e9b5:	8b 3c 24             	mov    (%esp),%edi
 804e9b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e9bc:	8b 4d bc             	mov    -0x44(%ebp),%ecx
 804e9bf:	85 c9                	test   %ecx,%ecx
 804e9c1:	0f 84 b2 2d 00 00    	je     8051779 <main+0x8239>
 804e9c7:	90                   	nop
 804e9c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e9cc:	89 3c 24             	mov    %edi,(%esp)
 804e9cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e9d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e9d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e9db:	b9 b6 8c 00 00       	mov    $0x8cb6,%ecx
 804e9e0:	e8 73 9d 00 00       	call   8058758 <__afl_maybe_log>
 804e9e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e9e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e9ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e9f1:	8b 3c 24             	mov    (%esp),%edi
 804e9f4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 366);
 804e9f8:	83 ec 08             	sub    $0x8,%esp
 804e9fb:	68 6e 01 00 00       	push   $0x16e
 804ea00:	68 de 70 06 08       	push   $0x80670de
 804ea05:	e8 b6 76 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 368
if(!(((hex_digest))) && ((hex_digest)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 368);
}
// MCC Label 369
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
 804ea0a:	8b 75 bc             	mov    -0x44(%ebp),%esi
 804ea0d:	83 c4 10             	add    $0x10,%esp
 804ea10:	85 f6                	test   %esi,%esi
 804ea12:	0f 84 61 2d 00 00    	je     8051779 <main+0x8239>
 804ea18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ea1c:	89 3c 24             	mov    %edi,(%esp)
 804ea1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ea27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ea2b:	b9 2d 8a 00 00       	mov    $0x8a2d,%ecx
 804ea30:	e8 23 9d 00 00       	call   8058758 <__afl_maybe_log>
 804ea35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ea39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ea3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ea41:	8b 3c 24             	mov    (%esp),%edi
 804ea44:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 369);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_556 = 0;
                    lava_556 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_556 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
 804ea48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ea4c:	89 3c 24             	mov    %edi,(%esp)
 804ea4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ea57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ea5b:	b9 c2 a4 00 00       	mov    $0xa4c2,%ecx
 804ea60:	e8 f3 9c 00 00       	call   8058758 <__afl_maybe_log>
 804ea65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ea69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ea6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ea71:	8b 3c 24             	mov    (%esp),%edi
 804ea74:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ea78:	0f b6 46 01          	movzbl 0x1(%esi),%eax
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 369);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_556 = 0;
                    lava_556 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
 804ea7c:	0f b6 16             	movzbl (%esi),%edx
                    lava_556 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_556 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
                    lava_556 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 804ea7f:	0f b6 4e 03          	movzbl 0x3(%esi),%ecx
	report_label_coverage("MCC", 369);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_556 = 0;
                    lava_556 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_556 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
 804ea83:	c1 e0 08             	shl    $0x8,%eax
 804ea86:	89 c7                	mov    %eax,%edi
                    lava_556 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 804ea88:	0f b6 46 02          	movzbl 0x2(%esi),%eax
                    lava_556 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 804ea8c:	c1 e1 18             	shl    $0x18,%ecx
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_556 = 0;
                    lava_556 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_556 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_556 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 804ea8f:	c1 e0 10             	shl    $0x10,%eax
 804ea92:	09 f8                	or     %edi,%eax
 804ea94:	09 d0                	or     %edx,%eax
                    lava_556 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 804ea96:	09 c8                	or     %ecx,%eax
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804ea98:	a3 f0 bb 06 08       	mov    %eax,0x806bbf0
 804ea9d:	a3 30 bc 06 08       	mov    %eax,0x806bc30
 804eaa2:	a3 b8 b7 06 08       	mov    %eax,0x806b7b8
 804eaa7:	a3 64 b3 06 08       	mov    %eax,0x806b364
if((((line)) || ((line))) != (((line)) && ((line))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 371);
}

// MCC Label 372
if(((line)) && ((line)) ) {asm volatile (""::: "memory");
 804eaac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eab0:	89 3c 24             	mov    %edi,(%esp)
 804eab3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eab7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eabb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eabf:	b9 be 42 00 00       	mov    $0x42be,%ecx
 804eac4:	e8 8f 9c 00 00       	call   8058758 <__afl_maybe_log>
 804eac9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eacd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ead1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ead5:	8b 3c 24             	mov    (%esp),%edi
 804ead8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eadc:	8b 75 ac             	mov    -0x54(%ebp),%esi
 804eadf:	85 f6                	test   %esi,%esi
 804eae1:	0f 84 0a 2c 00 00    	je     80516f1 <main+0x81b1>
 804eae7:	90                   	nop
 804eae8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eaec:	89 3c 24             	mov    %edi,(%esp)
 804eaef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eaf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eaf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eafb:	b9 db 51 00 00       	mov    $0x51db,%ecx
 804eb00:	e8 53 9c 00 00       	call   8058758 <__afl_maybe_log>
 804eb05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eb09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eb0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eb11:	8b 3c 24             	mov    (%esp),%edi
 804eb14:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 372);
 804eb18:	83 ec 08             	sub    $0x8,%esp
 804eb1b:	68 74 01 00 00       	push   $0x174
 804eb20:	68 de 70 06 08       	push   $0x80670de
 804eb25:	e8 96 75 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 374
if(!(((line))) && ((line)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 374);
}
// MCC Label 375
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
 804eb2a:	8b 7d ac             	mov    -0x54(%ebp),%edi
 804eb2d:	83 c4 10             	add    $0x10,%esp
 804eb30:	85 ff                	test   %edi,%edi
 804eb32:	0f 84 b9 2b 00 00    	je     80516f1 <main+0x81b1>
 804eb38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eb3c:	89 3c 24             	mov    %edi,(%esp)
 804eb3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eb43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eb47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eb4b:	b9 a9 e7 00 00       	mov    $0xe7a9,%ecx
 804eb50:	e8 03 9c 00 00       	call   8058758 <__afl_maybe_log>
 804eb55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eb59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eb5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eb61:	8b 3c 24             	mov    (%esp),%edi
 804eb64:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 375);
}
if (((line)) && ((line))) {
                    int lava_554 = 0;
                    lava_554 |= ((unsigned char *)(line))[0] << (0 * 8);
                    lava_554 |= ((unsigned char *)(line))[1] << (1 * 8);
 804eb68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eb6c:	89 3c 24             	mov    %edi,(%esp)
 804eb6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eb73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eb77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eb7b:	b9 ac 39 00 00       	mov    $0x39ac,%ecx
 804eb80:	e8 d3 9b 00 00       	call   8058758 <__afl_maybe_log>
 804eb85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eb89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eb8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eb91:	8b 3c 24             	mov    (%esp),%edi
 804eb94:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eb98:	0f b6 47 01          	movzbl 0x1(%edi),%eax
                    lava_554 |= ((unsigned char *)(line))[2] << (2 * 8);
 804eb9c:	0f b6 77 02          	movzbl 0x2(%edi),%esi
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 375);
}
if (((line)) && ((line))) {
                    int lava_554 = 0;
                    lava_554 |= ((unsigned char *)(line))[0] << (0 * 8);
 804eba0:	0f b6 0f             	movzbl (%edi),%ecx
                    lava_554 |= ((unsigned char *)(line))[1] << (1 * 8);
                    lava_554 |= ((unsigned char *)(line))[2] << (2 * 8);
                    lava_554 |= ((unsigned char *)(line))[3] << (3 * 8);
 804eba3:	0f b6 7f 03          	movzbl 0x3(%edi),%edi
	report_label_coverage("MCC", 375);
}
if (((line)) && ((line))) {
                    int lava_554 = 0;
                    lava_554 |= ((unsigned char *)(line))[0] << (0 * 8);
                    lava_554 |= ((unsigned char *)(line))[1] << (1 * 8);
 804eba7:	c1 e0 08             	shl    $0x8,%eax
                    lava_554 |= ((unsigned char *)(line))[2] << (2 * 8);
 804ebaa:	c1 e6 10             	shl    $0x10,%esi
 804ebad:	09 c6                	or     %eax,%esi
                    lava_554 |= ((unsigned char *)(line))[3] << (3 * 8);
 804ebaf:	c1 e7 18             	shl    $0x18,%edi
}
if (((line)) && ((line))) {
                    int lava_554 = 0;
                    lava_554 |= ((unsigned char *)(line))[0] << (0 * 8);
                    lava_554 |= ((unsigned char *)(line))[1] << (1 * 8);
                    lava_554 |= ((unsigned char *)(line))[2] << (2 * 8);
 804ebb2:	09 ce                	or     %ecx,%esi
                    lava_554 |= ((unsigned char *)(line))[3] << (3 * 8);
 804ebb4:	09 fe                	or     %edi,%esi
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804ebb6:	89 35 e8 bb 06 08    	mov    %esi,0x806bbe8
 804ebbc:	89 35 88 b7 06 08    	mov    %esi,0x806b788
 804ebc2:	89 35 b0 b7 06 08    	mov    %esi,0x806b7b0
 804ebc8:	89 35 60 b3 06 08    	mov    %esi,0x806b360
 804ebce:	66 90                	xchg   %ax,%ax
	report_label_coverage("ROR", 345);
}
if (line[line_length - 1] == '\n')
            line[--line_length] = '\x00';
        {
            int temp_2 = !(({
 804ebd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ebd4:	89 3c 24             	mov    %edi,(%esp)
 804ebd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ebdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ebdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ebe3:	b9 e4 10 00 00       	mov    $0x10e4,%ecx
 804ebe8:	e8 6b 9b 00 00       	call   8058758 <__afl_maybe_log>
 804ebed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ebf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ebf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ebf9:	8b 3c 24             	mov    (%esp),%edi
 804ebfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ec00:	84 db                	test   %bl,%bl
 804ec02:	0f 84 e8 00 00 00    	je     804ecf0 <main+0x57b0>
 804ec08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ec0c:	89 3c 24             	mov    %edi,(%esp)
 804ec0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ec13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ec17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ec1b:	b9 c0 8a 00 00       	mov    $0x8ac0,%ecx
 804ec20:	e8 33 9b 00 00       	call   8058758 <__afl_maybe_log>
 804ec25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ec29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ec2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ec31:	8b 3c 24             	mov    (%esp),%edi
 804ec34:	8d 64 24 10          	lea    0x10(%esp),%esp
                    lava_8 |= ((unsigned char *)(line))[2] << (2 * 8);
                    lava_8 |= ((unsigned char *)(line))[3] << (3 * 8);
                    lava_set(8, lava_8);
                }
                kbcieiubweuhc304089172;
            }) && !(is_stdin && (strcmp(filename, "-") == 0)) && ({
 804ec38:	80 bd 63 ff ff ff 00 	cmpb   $0x0,-0x9d(%ebp)
 804ec3f:	0f 84 fb 11 00 00    	je     804fe40 <main+0x6900>
 804ec45:	8d 76 00             	lea    0x0(%esi),%esi
 804ec48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ec4c:	89 3c 24             	mov    %edi,(%esp)
 804ec4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ec53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ec57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ec5b:	b9 01 d6 00 00       	mov    $0xd601,%ecx
 804ec60:	e8 f3 9a 00 00       	call   8058758 <__afl_maybe_log>
 804ec65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ec69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ec6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ec71:	8b 3c 24             	mov    (%esp),%edi
 804ec74:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ec78:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
 804ec7b:	80 3b 2d             	cmpb   $0x2d,(%ebx)
 804ec7e:	0f 85 bc 11 00 00    	jne    804fe40 <main+0x6900>
 804ec84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ec88:	89 3c 24             	mov    %edi,(%esp)
 804ec8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ec8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ec93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ec97:	b9 f8 f3 00 00       	mov    $0xf3f8,%ecx
 804ec9c:	e8 b7 9a 00 00       	call   8058758 <__afl_maybe_log>
 804eca1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eca5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eca9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ecad:	8b 3c 24             	mov    (%esp),%edi
 804ecb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ecb4:	80 7b 01 00          	cmpb   $0x0,0x1(%ebx)
 804ecb8:	0f 85 82 11 00 00    	jne    804fe40 <main+0x6900>
 804ecbe:	66 90                	xchg   %ax,%ax
 804ecc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ecc4:	89 3c 24             	mov    %edi,(%esp)
 804ecc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eccb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eccf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ecd3:	b9 6b ab 00 00       	mov    $0xab6b,%ecx
 804ecd8:	e8 7b 9a 00 00       	call   8058758 <__afl_maybe_log>
 804ecdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ece1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ece5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ece9:	8b 3c 24             	mov    (%esp),%edi
 804ecec:	8d 64 24 10          	lea    0x10(%esp),%esp
// ABS Label 388
if(temp_2 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 388);
}
if (temp_2) {
                ++n_misformatted_lines;
 804ecf0:	83 85 58 ff ff ff 01 	addl   $0x1,-0xa8(%ebp)
 804ecf7:	83 95 5c ff ff ff 00 	adcl   $0x0,-0xa4(%ebp)
                
// ABS Label 389
if(warn < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 389);
}
if (warn) {
 804ecfe:	80 3d 02 b3 06 08 00 	cmpb   $0x0,0x806b302
 804ed05:	0f 85 64 38 00 00    	jne    805256f <main+0x902f>
 804ed0b:	90                   	nop
 804ed0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ed10:	89 3c 24             	mov    %edi,(%esp)
 804ed13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ed17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ed1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ed1f:	b9 db ed 00 00       	mov    $0xeddb,%ecx
 804ed24:	e8 2f 9a 00 00       	call   8058758 <__afl_maybe_log>
 804ed29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ed2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ed31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ed35:	8b 3c 24             	mov    (%esp),%edi
 804ed38:	8d 64 24 10          	lea    0x10(%esp),%esp
                    error(0, 0, gettext("%s: %lu: improperly formatted %s checksum line"), checkfile_name, line_number, DIGEST_TYPE_STRING);
                }
                ++n_improperly_formatted_lines;
 804ed3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ed40:	89 3c 24             	mov    %edi,(%esp)
 804ed43:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ed47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ed4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ed4f:	b9 d7 08 00 00       	mov    $0x8d7,%ecx
 804ed54:	e8 ff 99 00 00       	call   8058758 <__afl_maybe_log>
 804ed59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ed5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ed61:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ed65:	8b 3c 24             	mov    (%esp),%edi
 804ed68:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ed6c:	83 85 50 ff ff ff 01 	addl   $0x1,-0xb0(%ebp)
 804ed73:	83 95 54 ff ff ff 00 	adcl   $0x0,-0xac(%ebp)
 804ed7a:	66 90                	xchg   %ax,%ax
 804ed7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ed80:	89 3c 24             	mov    %edi,(%esp)
 804ed83:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ed87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ed8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ed8f:	b9 69 ea 00 00       	mov    $0xea69,%ecx
 804ed94:	e8 bf 99 00 00       	call   8058758 <__afl_maybe_log>
 804ed99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ed9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eda1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eda5:	8b 3c 24             	mov    (%esp),%edi
 804eda8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804edac:	8b 7d 84             	mov    -0x7c(%ebp),%edi
 804edaf:	8b 07                	mov    (%edi),%eax
                }
            }
        }
    }
    {
        int temp_1 = !(!feof_unlocked(checkfile_stream) && !ferror_unlocked(checkfile_stream));
 804edb1:	a8 10                	test   $0x10,%al
 804edb3:	75 6b                	jne    804ee20 <main+0x58e0>
 804edb5:	8d 76 00             	lea    0x0(%esi),%esi
 804edb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804edbc:	89 3c 24             	mov    %edi,(%esp)
 804edbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804edc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804edc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804edcb:	b9 05 dd 00 00       	mov    $0xdd05,%ecx
 804edd0:	e8 83 99 00 00       	call   8058758 <__afl_maybe_log>
 804edd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804edd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eddd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ede1:	8b 3c 24             	mov    (%esp),%edi
 804ede4:	8d 64 24 10          	lea    0x10(%esp),%esp
        
// ABS Label 418
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 418);
}
if (temp_1)
 804ede8:	a8 20                	test   $0x20,%al
 804edea:	0f 84 60 d9 ff ff    	je     804c750 <main+0x3210>
 804edf0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804edf4:	89 3c 24             	mov    %edi,(%esp)
 804edf7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804edfb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804edff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ee03:	b9 e4 35 00 00       	mov    $0x35e4,%ecx
 804ee08:	e8 4b 99 00 00       	call   8058758 <__afl_maybe_log>
 804ee0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ee11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ee15:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ee19:	8b 3c 24             	mov    (%esp),%edi
 804ee1c:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
    }
} while (1);;
;

  free (line);
 804ee20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ee24:	89 3c 24             	mov    %edi,(%esp)
 804ee27:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ee2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ee2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ee33:	b9 6a c4 00 00       	mov    $0xc46a,%ecx
 804ee38:	e8 1b 99 00 00       	call   8058758 <__afl_maybe_log>
 804ee3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ee41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ee45:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ee49:	8b 3c 24             	mov    (%esp),%edi
 804ee4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ee50:	83 ec 0c             	sub    $0xc,%esp
 804ee53:	ff 75 ac             	pushl  -0x54(%ebp)
 804ee56:	e8 05 a3 ff ff       	call   8049160 <free@plt>

/* Faster versions when locking is not required.  */
__STDIO_INLINE int
__NTH (ferror_unlocked (FILE *__stream))
{
  return _IO_ferror_unlocked (__stream);
 804ee5b:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
    
// ABS Label 419
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 419);
}
if (temp_1) {
 804ee5e:	83 c4 10             	add    $0x10,%esp
 804ee61:	8b 31                	mov    (%ecx),%esi
 804ee63:	89 f7                	mov    %esi,%edi
 804ee65:	89 75 a4             	mov    %esi,-0x5c(%ebp)
 804ee68:	83 e7 20             	and    $0x20,%edi
 804ee6b:	0f 85 28 56 00 00    	jne    8054499 <main+0xaf59>
 804ee71:	8d 76 00             	lea    0x0(%esi),%esi
 804ee74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ee78:	89 3c 24             	mov    %edi,(%esp)
 804ee7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ee7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ee83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ee87:	b9 fe b7 00 00       	mov    $0xb7fe,%ecx
 804ee8c:	e8 c7 98 00 00       	call   8058758 <__afl_maybe_log>
 804ee91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ee95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ee99:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ee9d:	8b 3c 24             	mov    (%esp),%edi
 804eea0:	8d 64 24 10          	lea    0x10(%esp),%esp
        return 0;
    }
}


  if (!is_stdin) {
 804eea4:	80 bd 63 ff ff ff 00 	cmpb   $0x0,-0x9d(%ebp)
 804eeab:	0f 84 94 54 00 00    	je     8054345 <main+0xae05>
 804eeb1:	8d 76 00             	lea    0x0(%esi),%esi
 804eeb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eeb8:	89 3c 24             	mov    %edi,(%esp)
 804eebb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eebf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eec3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eec7:	b9 70 c2 00 00       	mov    $0xc270,%ecx
 804eecc:	e8 87 98 00 00       	call   8058758 <__afl_maybe_log>
 804eed1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eed5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eed9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eedd:	8b 3c 24             	mov    (%esp),%edi
 804eee0:	8d 64 24 10          	lea    0x10(%esp),%esp
if(n_properly_formatted_lines < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 425);
}

// ROR Label 426
if((n_properly_formatted_lines != 0) != (n_properly_formatted_lines == 0))  {asm volatile (""::: "memory");
 804eee4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eee8:	89 3c 24             	mov    %edi,(%esp)
 804eeeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eeef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eef3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eef7:	b9 5b bb 00 00       	mov    $0xbb5b,%ecx
 804eefc:	e8 57 98 00 00       	call   8058758 <__afl_maybe_log>
 804ef01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ef05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ef09:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ef0d:	8b 3c 24             	mov    (%esp),%edi
 804ef10:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ef14:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
 804ef1a:	8b 8d 6c ff ff ff    	mov    -0x94(%ebp),%ecx
 804ef20:	89 d0                	mov    %edx,%eax
 804ef22:	09 c8                	or     %ecx,%eax
 804ef24:	0f 95 c3             	setne  %bl
 804ef27:	0f 94 c2             	sete   %dl
 804ef2a:	38 d3                	cmp    %dl,%bl
 804ef2c:	74 4d                	je     804ef7b <main+0x5a3b>
 804ef2e:	66 90                	xchg   %ax,%ax
 804ef30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ef34:	89 3c 24             	mov    %edi,(%esp)
 804ef37:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ef3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ef3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ef43:	b9 74 b5 00 00       	mov    $0xb574,%ecx
 804ef48:	e8 0b 98 00 00       	call   8058758 <__afl_maybe_log>
 804ef4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ef51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ef55:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ef59:	8b 3c 24             	mov    (%esp),%edi
 804ef5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ef60:	88 55 a4             	mov    %dl,-0x5c(%ebp)
	report_label_coverage("ROR", 426);
 804ef63:	50                   	push   %eax
 804ef64:	50                   	push   %eax
 804ef65:	68 aa 01 00 00       	push   $0x1aa
 804ef6a:	68 c8 70 06 08       	push   $0x80670c8
 804ef6f:	e8 4c 71 00 00       	call   80560c0 <report_label_coverage>
 804ef74:	0f b6 55 a4          	movzbl -0x5c(%ebp),%edx
 804ef78:	83 c4 10             	add    $0x10,%esp
 804ef7b:	90                   	nop
}
if (n_properly_formatted_lines == 0)
 804ef7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ef80:	89 3c 24             	mov    %edi,(%esp)
 804ef83:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ef87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ef8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ef8f:	b9 aa 46 00 00       	mov    $0x46aa,%ecx
 804ef94:	e8 bf 97 00 00       	call   8058758 <__afl_maybe_log>
 804ef99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ef9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804efa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804efa5:	8b 3c 24             	mov    (%esp),%edi
 804efa8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804efac:	84 d2                	test   %dl,%dl
 804efae:	0f 85 3e 55 00 00    	jne    80544f2 <main+0xafb2>
 804efb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804efb8:	89 3c 24             	mov    %edi,(%esp)
 804efbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804efbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804efc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804efc7:	b9 3e e3 00 00       	mov    $0xe33e,%ecx
 804efcc:	e8 87 97 00 00       	call   8058758 <__afl_maybe_log>
 804efd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804efd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804efd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804efdd:	8b 3c 24             	mov    (%esp),%edi
 804efe0:	8d 64 24 10          	lea    0x10(%esp),%esp
      error (0, 0, _("%s: no properly formatted %s checksum lines found"),
             checkfile_name, DIGEST_TYPE_STRING);
    }
  else
    {
      if (!status_only)
 804efe4:	80 3d 03 b3 06 08 00 	cmpb   $0x0,0x806b303
 804efeb:	0f 85 30 06 00 00    	jne    804f621 <main+0x60e1>
 804eff1:	8d 76 00             	lea    0x0(%esi),%esi
 804eff4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eff8:	89 3c 24             	mov    %edi,(%esp)
 804effb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804efff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f003:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f007:	b9 53 8b 00 00       	mov    $0x8b53,%ecx
 804f00c:	e8 47 97 00 00       	call   8058758 <__afl_maybe_log>
 804f011:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f015:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f019:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f01d:	8b 3c 24             	mov    (%esp),%edi
 804f020:	8d 64 24 10          	lea    0x10(%esp),%esp
if(n_misformatted_lines < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 427);
}

// ROR Label 428
if((n_misformatted_lines == 0) != (n_misformatted_lines != 0))  {asm volatile (""::: "memory");
 804f024:	8b b5 58 ff ff ff    	mov    -0xa8(%ebp),%esi
 804f02a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
 804f030:	89 f1                	mov    %esi,%ecx
 804f032:	09 c1                	or     %eax,%ecx
 804f034:	0f 95 c0             	setne  %al
 804f037:	0f 94 c2             	sete   %dl
 804f03a:	38 c2                	cmp    %al,%dl
 804f03c:	74 4d                	je     804f08b <main+0x5b4b>
 804f03e:	66 90                	xchg   %ax,%ax
 804f040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f044:	89 3c 24             	mov    %edi,(%esp)
 804f047:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f04b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f04f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f053:	b9 77 05 00 00       	mov    $0x577,%ecx
 804f058:	e8 fb 96 00 00       	call   8058758 <__afl_maybe_log>
 804f05d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f065:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f069:	8b 3c 24             	mov    (%esp),%edi
 804f06c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f070:	88 45 a4             	mov    %al,-0x5c(%ebp)
	report_label_coverage("ROR", 428);
 804f073:	50                   	push   %eax
 804f074:	50                   	push   %eax
 804f075:	68 ac 01 00 00       	push   $0x1ac
 804f07a:	68 c8 70 06 08       	push   $0x80670c8
 804f07f:	e8 3c 70 00 00       	call   80560c0 <report_label_coverage>
 804f084:	0f b6 45 a4          	movzbl -0x5c(%ebp),%eax
 804f088:	83 c4 10             	add    $0x10,%esp
 804f08b:	90                   	nop
}
if (n_misformatted_lines != 0)
 804f08c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f090:	89 3c 24             	mov    %edi,(%esp)
 804f093:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f097:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f09b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f09f:	b9 4d 27 00 00       	mov    $0x274d,%ecx
 804f0a4:	e8 af 96 00 00       	call   8058758 <__afl_maybe_log>
 804f0a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f0ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f0b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f0b5:	8b 3c 24             	mov    (%esp),%edi
 804f0b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f0bc:	84 c0                	test   %al,%al
 804f0be:	0f 84 f3 00 00 00    	je     804f1b7 <main+0x5c77>
 804f0c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f0c8:	89 3c 24             	mov    %edi,(%esp)
 804f0cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f0cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f0d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f0d7:	b9 eb 36 00 00       	mov    $0x36eb,%ecx
 804f0dc:	e8 77 96 00 00       	call   8058758 <__afl_maybe_log>
 804f0e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f0e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f0e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f0ed:	8b 3c 24             	mov    (%esp),%edi
 804f0f0:	8d 64 24 10          	lea    0x10(%esp),%esp
select_plural (uintmax_t n)
{
  /* Reduce by a power of ten, but keep it away from zero.  The
     gettext manual says 1000000 should be safe.  */
  enum { PLURAL_REDUCER = 1000000 };
  return (n <= ULONG_MAX ? n : n % PLURAL_REDUCER + PLURAL_REDUCER);
 804f0f4:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%ebp)
 804f0fb:	0f 86 ee 62 00 00    	jbe    80553ef <main+0xbeaf>
 804f101:	8d 76 00             	lea    0x0(%esi),%esi
 804f104:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f108:	89 3c 24             	mov    %edi,(%esp)
 804f10b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f10f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f113:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f117:	b9 6d bd 00 00       	mov    $0xbd6d,%ecx
 804f11c:	e8 37 96 00 00       	call   8058758 <__afl_maybe_log>
 804f121:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f125:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f129:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f12d:	8b 3c 24             	mov    (%esp),%edi
 804f130:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f134:	6a 00                	push   $0x0
 804f136:	68 40 42 0f 00       	push   $0xf4240
 804f13b:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
 804f141:	ff b5 58 ff ff ff    	pushl  -0xa8(%ebp)
 804f147:	e8 04 7d 01 00       	call   8066e50 <__umoddi3>
 804f14c:	83 c4 10             	add    $0x10,%esp
 804f14f:	05 40 42 0f 00       	add    $0xf4240,%eax
            error (0, 0,
                   (ngettext
 804f154:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f158:	89 3c 24             	mov    %edi,(%esp)
 804f15b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f15f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f163:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f167:	b9 76 65 00 00       	mov    $0x6576,%ecx
 804f16c:	e8 e7 95 00 00       	call   8058758 <__afl_maybe_log>
 804f171:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f175:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f179:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f17d:	8b 3c 24             	mov    (%esp),%edi
 804f180:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f184:	83 ec 0c             	sub    $0xc,%esp
 804f187:	6a 05                	push   $0x5
 804f189:	50                   	push   %eax
 804f18a:	68 00 7a 06 08       	push   $0x8067a00
 804f18f:	68 30 7a 06 08       	push   $0x8067a30
 804f194:	6a 00                	push   $0x0
 804f196:	e8 55 a3 ff ff       	call   80494f0 <dcngettext@plt>
// ROR Label 428
if((n_misformatted_lines == 0) != (n_misformatted_lines != 0))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 428);
}
if (n_misformatted_lines != 0)
            error (0, 0,
 804f19b:	83 c4 14             	add    $0x14,%esp
 804f19e:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
 804f1a4:	ff b5 58 ff ff ff    	pushl  -0xa8(%ebp)
 804f1aa:	50                   	push   %eax
 804f1ab:	6a 00                	push   $0x0
 804f1ad:	6a 00                	push   $0x0
 804f1af:	e8 dc a0 ff ff       	call   8049290 <error@plt>
 804f1b4:	83 c4 20             	add    $0x20,%esp
 804f1b7:	90                   	nop
if(n_open_or_read_failures < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 429);
}

// ROR Label 430
if((n_open_or_read_failures == 0) != (n_open_or_read_failures != 0))  {asm volatile (""::: "memory");
 804f1b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f1bc:	89 3c 24             	mov    %edi,(%esp)
 804f1bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f1c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f1c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f1cb:	b9 79 eb 00 00       	mov    $0xeb79,%ecx
 804f1d0:	e8 83 95 00 00       	call   8058758 <__afl_maybe_log>
 804f1d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f1d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f1dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f1e1:	8b 3c 24             	mov    (%esp),%edi
 804f1e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f1e8:	8b b5 48 ff ff ff    	mov    -0xb8(%ebp),%esi
 804f1ee:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
 804f1f4:	89 f1                	mov    %esi,%ecx
 804f1f6:	09 d1                	or     %edx,%ecx
 804f1f8:	0f 95 c0             	setne  %al
 804f1fb:	0f 94 c2             	sete   %dl
 804f1fe:	38 c2                	cmp    %al,%dl
 804f200:	74 4d                	je     804f24f <main+0x5d0f>
 804f202:	66 90                	xchg   %ax,%ax
 804f204:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f208:	89 3c 24             	mov    %edi,(%esp)
 804f20b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f20f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f213:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f217:	b9 7f c7 00 00       	mov    $0xc77f,%ecx
 804f21c:	e8 37 95 00 00       	call   8058758 <__afl_maybe_log>
 804f221:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f225:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f229:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f22d:	8b 3c 24             	mov    (%esp),%edi
 804f230:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f234:	88 45 a4             	mov    %al,-0x5c(%ebp)
	report_label_coverage("ROR", 430);
 804f237:	50                   	push   %eax
 804f238:	50                   	push   %eax
 804f239:	68 ae 01 00 00       	push   $0x1ae
 804f23e:	68 c8 70 06 08       	push   $0x80670c8
 804f243:	e8 78 6e 00 00       	call   80560c0 <report_label_coverage>
 804f248:	0f b6 45 a4          	movzbl -0x5c(%ebp),%eax
 804f24c:	83 c4 10             	add    $0x10,%esp
 804f24f:	90                   	nop
}
if (n_open_or_read_failures != 0)
 804f250:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f254:	89 3c 24             	mov    %edi,(%esp)
 804f257:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f25b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f25f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f263:	b9 bb b7 00 00       	mov    $0xb7bb,%ecx
 804f268:	e8 eb 94 00 00       	call   8058758 <__afl_maybe_log>
 804f26d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f271:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f275:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f279:	8b 3c 24             	mov    (%esp),%edi
 804f27c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f280:	84 c0                	test   %al,%al
 804f282:	0f 84 a1 01 00 00    	je     804f429 <main+0x5ee9>
 804f288:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f28c:	89 3c 24             	mov    %edi,(%esp)
 804f28f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f293:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f297:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f29b:	b9 f3 91 00 00       	mov    $0x91f3,%ecx
 804f2a0:	e8 b3 94 00 00       	call   8058758 <__afl_maybe_log>
 804f2a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f2a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f2ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f2b1:	8b 3c 24             	mov    (%esp),%edi
 804f2b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f2b8:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%ebp)
 804f2bf:	0f 86 ee 60 00 00    	jbe    80553b3 <main+0xbe73>
 804f2c5:	8d 76 00             	lea    0x0(%esi),%esi
 804f2c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f2cc:	89 3c 24             	mov    %edi,(%esp)
 804f2cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f2d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f2d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f2db:	b9 9b 5f 00 00       	mov    $0x5f9b,%ecx
 804f2e0:	e8 73 94 00 00       	call   8058758 <__afl_maybe_log>
 804f2e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f2e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f2ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f2f1:	8b 3c 24             	mov    (%esp),%edi
 804f2f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f2f8:	6a 00                	push   $0x0
 804f2fa:	68 40 42 0f 00       	push   $0xf4240
 804f2ff:	ff b5 4c ff ff ff    	pushl  -0xb4(%ebp)
 804f305:	ff b5 48 ff ff ff    	pushl  -0xb8(%ebp)
 804f30b:	e8 40 7b 01 00       	call   8066e50 <__umoddi3>
 804f310:	83 c4 10             	add    $0x10,%esp
 804f313:	05 40 42 0f 00       	add    $0xf4240,%eax
            error (0+(lava_get(499))*(0x6c61746e==(lava_get(499))||0x6e74616c==(lava_get(499))), 0,
                   (ngettext
 804f318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f31c:	89 3c 24             	mov    %edi,(%esp)
 804f31f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f32b:	b9 80 eb 00 00       	mov    $0xeb80,%ecx
 804f330:	e8 23 94 00 00       	call   8058758 <__afl_maybe_log>
 804f335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f33d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f341:	8b 3c 24             	mov    (%esp),%edi
 804f344:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f348:	83 ec 0c             	sub    $0xc,%esp
 804f34b:	6a 05                	push   $0x5
 804f34d:	50                   	push   %eax
 804f34e:	68 5c 7a 06 08       	push   $0x8067a5c
 804f353:	68 8c 7a 06 08       	push   $0x8067a8c
 804f358:	6a 00                	push   $0x0
 804f35a:	e8 91 a1 ff ff       	call   80494f0 <dcngettext@plt>
// ROR Label 430
if((n_open_or_read_failures == 0) != (n_open_or_read_failures != 0))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 430);
}
if (n_open_or_read_failures != 0)
            error (0+(lava_get(499))*(0x6c61746e==(lava_get(499))||0x6e74616c==(lava_get(499))), 0,
 804f35f:	83 c4 14             	add    $0x14,%esp
                   (ngettext
 804f362:	89 c6                	mov    %eax,%esi
// ROR Label 430
if((n_open_or_read_failures == 0) != (n_open_or_read_failures != 0))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 430);
}
if (n_open_or_read_failures != 0)
            error (0+(lava_get(499))*(0x6c61746e==(lava_get(499))||0x6e74616c==(lava_get(499))), 0,
 804f364:	68 f3 01 00 00       	push   $0x1f3
 804f369:	e8 f2 78 00 00       	call   8056c60 <lava_get>
 804f36e:	c7 04 24 f3 01 00 00 	movl   $0x1f3,(%esp)
 804f375:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 804f378:	e8 e3 78 00 00       	call   8056c60 <lava_get>
 804f37d:	83 c4 10             	add    $0x10,%esp
 804f380:	3d 6e 74 61 6c       	cmp    $0x6c61746e,%eax
 804f385:	b9 01 00 00 00       	mov    $0x1,%ecx
 804f38a:	74 4a                	je     804f3d6 <main+0x5e96>
 804f38c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f390:	89 3c 24             	mov    %edi,(%esp)
 804f393:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f397:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f39b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f39f:	b9 2a 8a 00 00       	mov    $0x8a2a,%ecx
 804f3a4:	e8 af 93 00 00       	call   8058758 <__afl_maybe_log>
 804f3a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f3ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f3b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f3b5:	8b 3c 24             	mov    (%esp),%edi
 804f3b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f3bc:	83 ec 0c             	sub    $0xc,%esp
 804f3bf:	68 f3 01 00 00       	push   $0x1f3
 804f3c4:	e8 97 78 00 00       	call   8056c60 <lava_get>
 804f3c9:	31 c9                	xor    %ecx,%ecx
 804f3cb:	83 c4 10             	add    $0x10,%esp
 804f3ce:	3d 6c 61 74 6e       	cmp    $0x6e74616c,%eax
 804f3d3:	0f 94 c1             	sete   %cl
 804f3d6:	66 90                	xchg   %ax,%ax
 804f3d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f3dc:	89 3c 24             	mov    %edi,(%esp)
 804f3df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f3e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f3e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f3eb:	b9 74 73 00 00       	mov    $0x7374,%ecx
 804f3f0:	e8 63 93 00 00       	call   8058758 <__afl_maybe_log>
 804f3f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f3f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f3fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f401:	8b 3c 24             	mov    (%esp),%edi
 804f404:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f408:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 804f40b:	83 ec 0c             	sub    $0xc,%esp
 804f40e:	ff b5 4c ff ff ff    	pushl  -0xb4(%ebp)
 804f414:	ff b5 48 ff ff ff    	pushl  -0xb8(%ebp)
 804f41a:	56                   	push   %esi
 804f41b:	6a 00                	push   $0x0
 804f41d:	0f af d1             	imul   %ecx,%edx
 804f420:	52                   	push   %edx
 804f421:	e8 6a 9e ff ff       	call   8049290 <error@plt>
 804f426:	83 c4 20             	add    $0x20,%esp
 804f429:	8d 76 00             	lea    0x0(%esi),%esi
if(n_mismatched_checksums < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 431);
}

// ROR Label 432
if((n_mismatched_checksums == 0) != (n_mismatched_checksums != 0))  {asm volatile (""::: "memory");
 804f42c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f430:	89 3c 24             	mov    %edi,(%esp)
 804f433:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f437:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f43b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f43f:	b9 46 56 00 00       	mov    $0x5646,%ecx
 804f444:	e8 0f 93 00 00       	call   8058758 <__afl_maybe_log>
 804f449:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f44d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f451:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f455:	8b 3c 24             	mov    (%esp),%edi
 804f458:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f45c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 804f462:	8b b5 44 ff ff ff    	mov    -0xbc(%ebp),%esi
 804f468:	89 c1                	mov    %eax,%ecx
 804f46a:	09 f1                	or     %esi,%ecx
 804f46c:	0f 95 c0             	setne  %al
 804f46f:	0f 94 c2             	sete   %dl
 804f472:	38 c2                	cmp    %al,%dl
 804f474:	74 4d                	je     804f4c3 <main+0x5f83>
 804f476:	66 90                	xchg   %ax,%ax
 804f478:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f47c:	89 3c 24             	mov    %edi,(%esp)
 804f47f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f483:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f487:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f48b:	b9 53 e2 00 00       	mov    $0xe253,%ecx
 804f490:	e8 c3 92 00 00       	call   8058758 <__afl_maybe_log>
 804f495:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f499:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f49d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f4a1:	8b 3c 24             	mov    (%esp),%edi
 804f4a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f4a8:	88 45 a4             	mov    %al,-0x5c(%ebp)
	report_label_coverage("ROR", 432);
 804f4ab:	56                   	push   %esi
 804f4ac:	56                   	push   %esi
 804f4ad:	68 b0 01 00 00       	push   $0x1b0
 804f4b2:	68 c8 70 06 08       	push   $0x80670c8
 804f4b7:	e8 04 6c 00 00       	call   80560c0 <report_label_coverage>
 804f4bc:	0f b6 45 a4          	movzbl -0x5c(%ebp),%eax
 804f4c0:	83 c4 10             	add    $0x10,%esp
 804f4c3:	90                   	nop
}
if (n_mismatched_checksums != 0)
 804f4c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f4c8:	89 3c 24             	mov    %edi,(%esp)
 804f4cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f4cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f4d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f4d7:	b9 94 d2 00 00       	mov    $0xd294,%ecx
 804f4dc:	e8 77 92 00 00       	call   8058758 <__afl_maybe_log>
 804f4e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f4e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f4e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f4ed:	8b 3c 24             	mov    (%esp),%edi
 804f4f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f4f4:	84 c0                	test   %al,%al
 804f4f6:	0f 84 25 01 00 00    	je     804f621 <main+0x60e1>
 804f4fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f500:	89 3c 24             	mov    %edi,(%esp)
 804f503:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f507:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f50b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f50f:	b9 a2 9d 00 00       	mov    $0x9da2,%ecx
 804f514:	e8 3f 92 00 00       	call   8058758 <__afl_maybe_log>
 804f519:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f51d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f521:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f525:	8b 3c 24             	mov    (%esp),%edi
 804f528:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f52c:	83 bd 44 ff ff ff 00 	cmpl   $0x0,-0xbc(%ebp)
 804f533:	0f 86 3d 5e 00 00    	jbe    8055376 <main+0xbe36>
 804f539:	8d 76 00             	lea    0x0(%esi),%esi
 804f53c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f540:	89 3c 24             	mov    %edi,(%esp)
 804f543:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f547:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f54b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f54f:	b9 d3 86 00 00       	mov    $0x86d3,%ecx
 804f554:	e8 ff 91 00 00       	call   8058758 <__afl_maybe_log>
 804f559:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f55d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f561:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f565:	8b 3c 24             	mov    (%esp),%edi
 804f568:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f56c:	6a 00                	push   $0x0
 804f56e:	68 40 42 0f 00       	push   $0xf4240
 804f573:	ff b5 44 ff ff ff    	pushl  -0xbc(%ebp)
 804f579:	ff b5 40 ff ff ff    	pushl  -0xc0(%ebp)
 804f57f:	e8 cc 78 01 00       	call   8066e50 <__umoddi3>
 804f584:	83 c4 10             	add    $0x10,%esp
 804f587:	05 40 42 0f 00       	add    $0xf4240,%eax
            error (0, 0,
                   (ngettext
 804f58c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f590:	89 3c 24             	mov    %edi,(%esp)
 804f593:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f597:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f59b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f59f:	b9 09 0f 00 00       	mov    $0xf09,%ecx
 804f5a4:	e8 af 91 00 00       	call   8058758 <__afl_maybe_log>
 804f5a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f5ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f5b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f5b5:	8b 3c 24             	mov    (%esp),%edi
 804f5b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f5bc:	83 ec 0c             	sub    $0xc,%esp
 804f5bf:	6a 05                	push   $0x5
 804f5c1:	50                   	push   %eax
 804f5c2:	68 b8 7a 06 08       	push   $0x8067ab8
 804f5c7:	68 e8 7a 06 08       	push   $0x8067ae8
 804f5cc:	6a 00                	push   $0x0
 804f5ce:	e8 1d 9f ff ff       	call   80494f0 <dcngettext@plt>
// ROR Label 432
if((n_mismatched_checksums == 0) != (n_mismatched_checksums != 0))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 432);
}
if (n_mismatched_checksums != 0)
            error (0, 0,
 804f5d3:	83 c4 14             	add    $0x14,%esp
 804f5d6:	ff b5 44 ff ff ff    	pushl  -0xbc(%ebp)
 804f5dc:	ff b5 40 ff ff ff    	pushl  -0xc0(%ebp)
 804f5e2:	66 90                	xchg   %ax,%ax
 804f5e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f5e8:	89 3c 24             	mov    %edi,(%esp)
 804f5eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f5ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f5f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f5f7:	b9 50 14 00 00       	mov    $0x1450,%ecx
 804f5fc:	e8 57 91 00 00       	call   8058758 <__afl_maybe_log>
 804f601:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f605:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f609:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f60d:	8b 3c 24             	mov    (%esp),%edi
 804f610:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f614:	50                   	push   %eax
 804f615:	6a 00                	push   $0x0
 804f617:	6a 00                	push   $0x0
 804f619:	e8 72 9c ff ff       	call   8049290 <error@plt>
 804f61e:	83 c4 20             	add    $0x20,%esp
 804f621:	8d 76 00             	lea    0x0(%esi),%esi
                   n_mismatched_checksums);
        }
    }

  return (n_properly_formatted_lines != 0
          && n_mismatched_checksums == 0
 804f624:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f628:	89 3c 24             	mov    %edi,(%esp)
 804f62b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f62f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f633:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f637:	b9 17 ec 00 00       	mov    $0xec17,%ecx
 804f63c:	e8 17 91 00 00       	call   8058758 <__afl_maybe_log>
 804f641:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f645:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f649:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f64d:	8b 3c 24             	mov    (%esp),%edi
 804f650:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f654:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
 804f65a:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
 804f660:	89 f1                	mov    %esi,%ecx
 804f662:	09 d1                	or     %edx,%ecx
 804f664:	0f 94 c0             	sete   %al
          && n_open_or_read_failures == 0
 804f667:	84 d8                	test   %bl,%al
 804f669:	0f 84 96 00 00 00    	je     804f705 <main+0x61c5>
 804f66f:	90                   	nop
 804f670:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f674:	89 3c 24             	mov    %edi,(%esp)
 804f677:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f67b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f67f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f683:	b9 fb b6 00 00       	mov    $0xb6fb,%ecx
 804f688:	e8 cb 90 00 00       	call   8058758 <__afl_maybe_log>
 804f68d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f691:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f695:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f699:	8b 3c 24             	mov    (%esp),%edi
 804f69c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f6a0:	8b 9d 48 ff ff ff    	mov    -0xb8(%ebp),%ebx
 804f6a6:	8b b5 4c ff ff ff    	mov    -0xb4(%ebp),%esi
 804f6ac:	89 da                	mov    %ebx,%edx
 804f6ae:	09 f2                	or     %esi,%edx
 804f6b0:	75 53                	jne    804f705 <main+0x61c5>
 804f6b2:	66 90                	xchg   %ax,%ax
 804f6b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f6b8:	89 3c 24             	mov    %edi,(%esp)
 804f6bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f6bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f6c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f6c7:	b9 27 21 00 00       	mov    $0x2127,%ecx
 804f6cc:	e8 87 90 00 00       	call   8058758 <__afl_maybe_log>
 804f6d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f6d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f6d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f6dd:	8b 3c 24             	mov    (%esp),%edi
 804f6e0:	8d 64 24 10          	lea    0x10(%esp),%esp
          && (!strict || n_improperly_formatted_lines == 0));
 804f6e4:	8b bd 50 ff ff ff    	mov    -0xb0(%ebp),%edi
 804f6ea:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
 804f6f0:	89 f8                	mov    %edi,%eax
 804f6f2:	09 c8                	or     %ecx,%eax
 804f6f4:	0f 94 c3             	sete   %bl
 804f6f7:	3a 1d 00 b3 06 08    	cmp    0x806b300,%bl
 804f6fd:	0f 93 c2             	setae  %dl
 804f700:	0f b6 f2             	movzbl %dl,%esi
 804f703:	89 f7                	mov    %esi,%edi
 804f705:	8d 76 00             	lea    0x0(%esi),%esi
                     select_plural (n_mismatched_checksums))),
                   n_mismatched_checksums);
        }
    }

  return (n_properly_formatted_lines != 0
 804f708:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f70c:	89 3c 24             	mov    %edi,(%esp)
 804f70f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f713:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f717:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f71b:	b9 7f 3f 00 00       	mov    $0x3f7f,%ecx
 804f720:	e8 33 90 00 00       	call   8058758 <__afl_maybe_log>
 804f725:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f729:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f72d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f731:	8b 3c 24             	mov    (%esp),%edi
 804f734:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f738:	83 e7 01             	and    $0x1,%edi
 804f73b:	90                   	nop
// ABS Label 499
if(do_check < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 499);
}
if (do_check)
        ok &= digest_check (file);
 804f73c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f740:	89 3c 24             	mov    %edi,(%esp)
 804f743:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f747:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f74b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f74f:	b9 6f de 00 00       	mov    $0xde6f,%ecx
 804f754:	e8 ff 8f 00 00       	call   8058758 <__afl_maybe_log>
 804f759:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f75d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f761:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f765:	8b 3c 24             	mov    (%esp),%edi
 804f768:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f76c:	89 f9                	mov    %edi,%ecx
 804f76e:	20 8d 62 ff ff ff    	and    %cl,-0x9e(%ebp)
 804f774:	e9 84 c8 ff ff       	jmp    804bffd <main+0x2abd>
 804f779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  s[i++] = '\0';

  /* If "bsd reversed" format detected.  */
  
// COR Label 267
if(((s_len - i == 1) && (s[i] != ' ' && s[i] != '*')) != ((s_len - i == 1) || (s[i] != ' ' && s[i] != '*')))  {asm volatile (""::: "memory");
 804f780:	8b 75 9c             	mov    -0x64(%ebp),%esi
     immediately by a white space it's an error.  */
  i += digest_hex_bytes;
  if (!ISWHITE (s[i]))
    return false;

  s[i++] = '\0';
 804f783:	8d 7b 01             	lea    0x1(%ebx),%edi

  /* If "bsd reversed" format detected.  */
  
// COR Label 267
if(((s_len - i == 1) && (s[i] != ' ' && s[i] != '*')) != ((s_len - i == 1) || (s[i] != ' ' && s[i] != '*')))  {asm volatile (""::: "memory");
 804f786:	8b 55 a4             	mov    -0x5c(%ebp),%edx
     immediately by a white space it's an error.  */
  i += digest_hex_bytes;
  if (!ISWHITE (s[i]))
    return false;

  s[i++] = '\0';
 804f789:	c6 01 00             	movb   $0x0,(%ecx)

  /* If "bsd reversed" format detected.  */
  
// COR Label 267
if(((s_len - i == 1) && (s[i] != ' ' && s[i] != '*')) != ((s_len - i == 1) || (s[i] != ' ' && s[i] != '*')))  {asm volatile (""::: "memory");
 804f78c:	29 fe                	sub    %edi,%esi
 804f78e:	0f b6 4c 1a 01       	movzbl 0x1(%edx,%ebx,1),%ecx
 804f793:	83 fe 01             	cmp    $0x1,%esi
 804f796:	0f 84 d1 33 00 00    	je     8052b6d <main+0x962d>
 804f79c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f7a0:	89 3c 24             	mov    %edi,(%esp)
 804f7a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f7a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f7ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f7af:	b9 f0 c9 00 00       	mov    $0xc9f0,%ecx
 804f7b4:	e8 9f 8f 00 00       	call   8058758 <__afl_maybe_log>
 804f7b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f7bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f7c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f7c5:	8b 3c 24             	mov    (%esp),%edi
 804f7c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f7cc:	80 f9 2a             	cmp    $0x2a,%cl
 804f7cf:	0f 84 5c 2d 00 00    	je     8052531 <main+0x8ff1>
 804f7d5:	8d 76 00             	lea    0x0(%esi),%esi
 804f7d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f7dc:	89 3c 24             	mov    %edi,(%esp)
 804f7df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f7e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f7e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f7eb:	b9 a9 91 00 00       	mov    $0x91a9,%ecx
 804f7f0:	e8 63 8f 00 00       	call   8058758 <__afl_maybe_log>
 804f7f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f7f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f7fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f801:	8b 3c 24             	mov    (%esp),%edi
 804f804:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f808:	80 f9 20             	cmp    $0x20,%cl
 804f80b:	0f 84 20 2d 00 00    	je     8052531 <main+0x8ff1>
 804f811:	8d 76 00             	lea    0x0(%esi),%esi
 804f814:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f818:	89 3c 24             	mov    %edi,(%esp)
 804f81b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f81f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f823:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f827:	b9 86 2d 00 00       	mov    $0x2d86,%ecx
 804f82c:	e8 27 8f 00 00       	call   8058758 <__afl_maybe_log>
 804f831:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f835:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f839:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f83d:	8b 3c 24             	mov    (%esp),%edi
 804f840:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 267);
 804f844:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f848:	89 3c 24             	mov    %edi,(%esp)
 804f84b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f84f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f853:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f857:	b9 2a c1 00 00       	mov    $0xc12a,%ecx
 804f85c:	e8 f7 8e 00 00       	call   8058758 <__afl_maybe_log>
 804f861:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f865:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f869:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f86d:	8b 3c 24             	mov    (%esp),%edi
 804f870:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f874:	51                   	push   %ecx
 804f875:	51                   	push   %ecx
 804f876:	68 0b 01 00 00       	push   $0x10b
 804f87b:	68 da 70 06 08       	push   $0x80670da
 804f880:	e8 3b 68 00 00       	call   80560c0 <report_label_coverage>
}

// MCC Label 268
if(( s_len - i == 1 ) && ( s[i] != ' ' && s[i] != '*' ) ) {asm volatile (""::: "memory");
 804f885:	83 c4 10             	add    $0x10,%esp
 804f888:	83 ee 01             	sub    $0x1,%esi
 804f88b:	0f 84 87 33 00 00    	je     8052c18 <main+0x96d8>
 804f891:	8d 76 00             	lea    0x0(%esi),%esi
 804f894:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f898:	89 3c 24             	mov    %edi,(%esp)
 804f89b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f89f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f8a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f8a7:	b9 d0 44 00 00       	mov    $0x44d0,%ecx
 804f8ac:	e8 a7 8e 00 00       	call   8058758 <__afl_maybe_log>
 804f8b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f8b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f8b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f8bd:	8b 3c 24             	mov    (%esp),%edi
 804f8c0:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 271
if(( s_len - i == 1 ) && ( !(s[i] != ' ') && !(s[i] != '*') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 271);
}
// MCC Label 272
if(( !(s_len - i == 1) ) && ( s[i] != ' ' && s[i] != '*' ) ) {asm volatile (""::: "memory");
 804f8c4:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 804f8c7:	8d 34 3a             	lea    (%edx,%edi,1),%esi
 804f8ca:	0f b6 0e             	movzbl (%esi),%ecx
 804f8cd:	80 f9 2a             	cmp    $0x2a,%cl
 804f8d0:	74 7e                	je     804f950 <main+0x6410>
 804f8d2:	66 90                	xchg   %ax,%ax
 804f8d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f8d8:	89 3c 24             	mov    %edi,(%esp)
 804f8db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f8df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f8e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f8e7:	b9 cd 56 00 00       	mov    $0x56cd,%ecx
 804f8ec:	e8 67 8e 00 00       	call   8058758 <__afl_maybe_log>
 804f8f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f8f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f8f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f8fd:	8b 3c 24             	mov    (%esp),%edi
 804f900:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f904:	80 f9 20             	cmp    $0x20,%cl
 804f907:	74 47                	je     804f950 <main+0x6410>
 804f909:	8d 76 00             	lea    0x0(%esi),%esi
 804f90c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f910:	89 3c 24             	mov    %edi,(%esp)
 804f913:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f91b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f91f:	b9 65 40 00 00       	mov    $0x4065,%ecx
 804f924:	e8 2f 8e 00 00       	call   8058758 <__afl_maybe_log>
 804f929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f92d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f931:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f935:	8b 3c 24             	mov    (%esp),%edi
 804f938:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 272);
 804f93c:	50                   	push   %eax
 804f93d:	50                   	push   %eax
 804f93e:	68 10 01 00 00       	push   $0x110
 804f943:	68 de 70 06 08       	push   $0x80670de
 804f948:	e8 73 67 00 00       	call   80560c0 <report_label_coverage>
 804f94d:	83 c4 10             	add    $0x10,%esp
}
// MCC Label 273
if(( !(s_len - i == 1) ) && ( s[i] != ' ' && !(s[i] != '*') ) ) {asm volatile (""::: "memory");
 804f950:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f954:	89 3c 24             	mov    %edi,(%esp)
 804f957:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f95b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f95f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f963:	b9 6d b3 00 00       	mov    $0xb36d,%ecx
 804f968:	e8 eb 8d 00 00       	call   8058758 <__afl_maybe_log>
 804f96d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f971:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f975:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f979:	8b 3c 24             	mov    (%esp),%edi
 804f97c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f980:	80 3e 2a             	cmpb   $0x2a,(%esi)
 804f983:	0f 84 80 47 00 00    	je     8054109 <main+0xabc9>
 804f989:	8d 76 00             	lea    0x0(%esi),%esi
 804f98c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f990:	89 3c 24             	mov    %edi,(%esp)
 804f993:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f997:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f99b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f99f:	b9 b8 5f 00 00       	mov    $0x5fb8,%ecx
 804f9a4:	e8 af 8d 00 00       	call   8058758 <__afl_maybe_log>
 804f9a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f9ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f9b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f9b5:	8b 3c 24             	mov    (%esp),%edi
 804f9b8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 273);
}
// MCC Label 274
if(( !(s_len - i == 1) ) && ( !(s[i] != ' ') && s[i] != '*' ) ) {asm volatile (""::: "memory");
 804f9bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f9c0:	89 3c 24             	mov    %edi,(%esp)
 804f9c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f9c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f9cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f9cf:	b9 43 29 00 00       	mov    $0x2943,%ecx
 804f9d4:	e8 7f 8d 00 00       	call   8058758 <__afl_maybe_log>
 804f9d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f9dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f9e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f9e5:	8b 3c 24             	mov    (%esp),%edi
 804f9e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f9ec:	80 3e 20             	cmpb   $0x20,(%esi)
 804f9ef:	0f 84 c8 46 00 00    	je     80540bd <main+0xab7d>
 804f9f5:	8d 76 00             	lea    0x0(%esi),%esi
 804f9f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f9fc:	89 3c 24             	mov    %edi,(%esp)
 804f9ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fa03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fa07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fa0b:	b9 c5 e3 00 00       	mov    $0xe3c5,%ecx
 804fa10:	e8 43 8d 00 00       	call   8058758 <__afl_maybe_log>
 804fa15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fa19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fa1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fa21:	8b 3c 24             	mov    (%esp),%edi
 804fa24:	8d 64 24 10          	lea    0x10(%esp),%esp
}
// MCC Label 275
if(( !(s_len - i == 1) ) && ( !(s[i] != ' ') && !(s[i] != '*') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 275);
}
if ((s_len - i == 1) || (s[i] != ' ' && s[i] != '*'))
 804fa28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fa2c:	89 3c 24             	mov    %edi,(%esp)
 804fa2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fa33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fa37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fa3b:	b9 34 8b 00 00       	mov    $0x8b34,%ecx
 804fa40:	e8 13 8d 00 00       	call   8058758 <__afl_maybe_log>
 804fa45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fa49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fa4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fa51:	8b 3c 24             	mov    (%esp),%edi
 804fa54:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fa58:	0f b6 06             	movzbl (%esi),%eax
 804fa5b:	3c 2a                	cmp    $0x2a,%al
 804fa5d:	0f 84 de 2d 00 00    	je     8052841 <main+0x9301>
 804fa63:	90                   	nop
 804fa64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fa68:	89 3c 24             	mov    %edi,(%esp)
 804fa6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fa6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fa73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fa77:	b9 34 4a 00 00       	mov    $0x4a34,%ecx
 804fa7c:	e8 d7 8c 00 00       	call   8058758 <__afl_maybe_log>
 804fa81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fa85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fa89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fa8d:	8b 3c 24             	mov    (%esp),%edi
 804fa90:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fa94:	3c 20                	cmp    $0x20,%al
 804fa96:	0f 84 a5 2d 00 00    	je     8052841 <main+0x9301>
 804fa9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804faa0:	89 3c 24             	mov    %edi,(%esp)
 804faa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804faa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804faab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804faaf:	b9 db d6 00 00       	mov    $0xd6db,%ecx
 804fab4:	e8 9f 8c 00 00       	call   8058758 <__afl_maybe_log>
 804fab9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fabd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fac1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fac5:	8b 3c 24             	mov    (%esp),%edi
 804fac8:	8d 64 24 10          	lea    0x10(%esp),%esp
         This assumes that with bsd format checksums
         that the first file name does not have
         a leading ' ' or '*'.  */
      
// ABS Label 276
if(bsd_reversed < 0)  {asm volatile (""::: "memory");
 804facc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fad0:	89 3c 24             	mov    %edi,(%esp)
 804fad3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fad7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fadb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fadf:	b9 5a d8 00 00       	mov    $0xd85a,%ecx
 804fae4:	e8 6f 8c 00 00       	call   8058758 <__afl_maybe_log>
 804fae9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804faed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804faf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804faf5:	8b 3c 24             	mov    (%esp),%edi
 804faf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fafc:	83 3d 48 b2 06 08 00 	cmpl   $0x0,0x806b248
 804fb03:	0f 88 4c 46 00 00    	js     8054155 <main+0xac15>
 804fb09:	8d 76 00             	lea    0x0(%esi),%esi
 804fb0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fb10:	89 3c 24             	mov    %edi,(%esp)
 804fb13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fb17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fb1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fb1f:	b9 ce 04 00 00       	mov    $0x4ce,%ecx
 804fb24:	e8 2f 8c 00 00       	call   8058758 <__afl_maybe_log>
 804fb29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fb2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fb31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fb35:	8b 3c 24             	mov    (%esp),%edi
 804fb38:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 276);
}

// ROR Label 277
if((bsd_reversed != 0) != (bsd_reversed == 0))  {asm volatile (""::: "memory");
 804fb3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fb40:	89 3c 24             	mov    %edi,(%esp)
 804fb43:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fb47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fb4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fb4f:	b9 08 30 00 00       	mov    $0x3008,%ecx
 804fb54:	e8 ff 8b 00 00       	call   8058758 <__afl_maybe_log>
 804fb59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fb5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fb61:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fb65:	8b 3c 24             	mov    (%esp),%edi
 804fb68:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fb6c:	a1 48 b2 06 08       	mov    0x806b248,%eax
 804fb71:	85 c0                	test   %eax,%eax
 804fb73:	0f 95 c3             	setne  %bl
 804fb76:	0f 94 c2             	sete   %dl
 804fb79:	38 d3                	cmp    %dl,%bl
 804fb7b:	74 47                	je     804fbc4 <main+0x6684>
 804fb7d:	8d 76 00             	lea    0x0(%esi),%esi
 804fb80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fb84:	89 3c 24             	mov    %edi,(%esp)
 804fb87:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fb8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fb8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fb93:	b9 2e 0d 00 00       	mov    $0xd2e,%ecx
 804fb98:	e8 bb 8b 00 00       	call   8058758 <__afl_maybe_log>
 804fb9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fba1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fba5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fba9:	8b 3c 24             	mov    (%esp),%edi
 804fbac:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 277);
 804fbb0:	53                   	push   %ebx
 804fbb1:	53                   	push   %ebx
 804fbb2:	68 15 01 00 00       	push   $0x115
 804fbb7:	68 c8 70 06 08       	push   $0x80670c8
 804fbbc:	e8 ff 64 00 00       	call   80560c0 <report_label_coverage>
 804fbc1:	83 c4 10             	add    $0x10,%esp
}
if (bsd_reversed == 0)
 804fbc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fbc8:	89 3c 24             	mov    %edi,(%esp)
 804fbcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fbcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fbd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fbd7:	b9 f4 f8 00 00       	mov    $0xf8f4,%ecx
 804fbdc:	e8 77 8b 00 00       	call   8058758 <__afl_maybe_log>
 804fbe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fbe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fbe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fbed:	8b 3c 24             	mov    (%esp),%edi
 804fbf0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fbf4:	83 3d 48 b2 06 08 00 	cmpl   $0x0,0x806b248
 804fbfb:	0f 84 43 ec ff ff    	je     804e844 <main+0x5304>
 804fc01:	8d 76 00             	lea    0x0(%esi),%esi
 804fc04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fc08:	89 3c 24             	mov    %edi,(%esp)
 804fc0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fc0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fc13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fc17:	b9 c7 e1 00 00       	mov    $0xe1c7,%ecx
 804fc1c:	e8 37 8b 00 00       	call   8058758 <__afl_maybe_log>
 804fc21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fc25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fc29:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fc2d:	8b 3c 24             	mov    (%esp),%edi
 804fc30:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      bsd_reversed = 1;
 804fc34:	c7 05 48 b2 06 08 01 	movl   $0x1,0x806b248
 804fc3b:	00 00 00 
 804fc3e:	66 90                	xchg   %ax,%ax
  
// ABS Label 280
if(escaped_filename < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 280);
}
if (escaped_filename)
 804fc40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fc44:	89 3c 24             	mov    %edi,(%esp)
 804fc47:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fc4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fc4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fc53:	b9 1c 71 00 00       	mov    $0x711c,%ecx
 804fc58:	e8 fb 8a 00 00       	call   8058758 <__afl_maybe_log>
 804fc5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fc61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fc65:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fc69:	8b 3c 24             	mov    (%esp),%edi
 804fc6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fc70:	80 bd 7d ff ff ff 00 	cmpb   $0x0,-0x83(%ebp)
    };}


  /* All characters between the type indicator and end of line are
     significant -- that includes leading and trailing white space.  */
  *file_name = &s[i];
 804fc77:	8b 8d 70 ff ff ff    	mov    -0x90(%ebp),%ecx
	report_label_coverage("ABS", 280);
}
if (escaped_filename)
    return filename_unescape (&s[i], s_len - i) != NULL;

  return true;
 804fc7d:	bb 01 00 00 00       	mov    $0x1,%ebx
    };}


  /* All characters between the type indicator and end of line are
     significant -- that includes leading and trailing white space.  */
  *file_name = &s[i];
 804fc82:	89 31                	mov    %esi,(%ecx)
  
// ABS Label 280
if(escaped_filename < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 280);
}
if (escaped_filename)
 804fc84:	0f 84 ec eb ff ff    	je     804e876 <main+0x5336>
 804fc8a:	66 90                	xchg   %ax,%ax
 804fc8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fc90:	89 3c 24             	mov    %edi,(%esp)
 804fc93:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fc97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fc9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fc9f:	b9 5e 6a 00 00       	mov    $0x6a5e,%ecx
 804fca4:	e8 af 8a 00 00       	call   8058758 <__afl_maybe_log>
 804fca9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fcad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fcb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fcb5:	8b 3c 24             	mov    (%esp),%edi
 804fcb8:	8d 64 24 10          	lea    0x10(%esp),%esp
    return filename_unescape (&s[i], s_len - i) != NULL;
 804fcbc:	8b 55 9c             	mov    -0x64(%ebp),%edx
 804fcbf:	89 f0                	mov    %esi,%eax
 804fcc1:	29 fa                	sub    %edi,%edx
 804fcc3:	e8 38 64 00 00       	call   8056100 <filename_unescape>
 804fcc8:	85 c0                	test   %eax,%eax
 804fcca:	0f 95 c3             	setne  %bl
 804fccd:	e9 a4 eb ff ff       	jmp    804e876 <main+0x5336>
 804fcd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
if(line_length < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 340);
}

// ROR Label 341
if((line_length < 0) != (line_length <= 0))  {asm volatile (""::: "memory");
 804fcd8:	c6 45 a0 00          	movb   $0x0,-0x60(%ebp)
	report_label_coverage("ROR", 341);
}
// ROR Label 342
if((line_length > 0) != (line_length <= 0))  {asm volatile (""::: "memory");
 804fcdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fce0:	89 3c 24             	mov    %edi,(%esp)
 804fce3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fce7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fceb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fcef:	b9 cb 1d 00 00       	mov    $0x1dcb,%ecx
 804fcf4:	e8 5f 8a 00 00       	call   8058758 <__afl_maybe_log>
 804fcf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fcfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fd01:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fd05:	8b 3c 24             	mov    (%esp),%edi
 804fd08:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fd0c:	85 db                	test   %ebx,%ebx
 804fd0e:	0f 9f c1             	setg   %cl
 804fd11:	38 4d a0             	cmp    %cl,-0x60(%ebp)
 804fd14:	0f 85 5b d5 ff ff    	jne    804d275 <main+0x3d35>
 804fd1a:	66 90                	xchg   %ax,%ax
 804fd1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fd20:	89 3c 24             	mov    %edi,(%esp)
 804fd23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fd27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fd2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fd2f:	b9 fc e8 00 00       	mov    $0xe8fc,%ecx
 804fd34:	e8 1f 8a 00 00       	call   8058758 <__afl_maybe_log>
 804fd39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fd3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fd41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fd45:	8b 3c 24             	mov    (%esp),%edi
 804fd48:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fd4c:	e9 ab d5 ff ff       	jmp    804d2fc <main+0x3dbc>
 804fd51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    }

  /* Check for BSD-style checksum line. */

  algo_name_len = strlen (DIGEST_TYPE_STRING);
  if (STREQ_LEN (s + i, DIGEST_TYPE_STRING, algo_name_len))
 804fd58:	89 d6                	mov    %edx,%esi
 804fd5a:	e9 93 e6 ff ff       	jmp    804e3f2 <main+0x4eb2>
 804fd5f:	90                   	nop
if(!(((line))) && ((line)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 338);
}
// MCC Label 339
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 339);
 804fd60:	83 ec 08             	sub    $0x8,%esp
 804fd63:	68 53 01 00 00       	push   $0x153
 804fd68:	68 de 70 06 08       	push   $0x80670de
 804fd6d:	e8 4e 63 00 00       	call   80560c0 <report_label_coverage>
}
if (((line)) && ((line))) {
 804fd72:	8b 75 ac             	mov    -0x54(%ebp),%esi
 804fd75:	83 c4 10             	add    $0x10,%esp
 804fd78:	85 f6                	test   %esi,%esi
 804fd7a:	0f 85 d8 d3 ff ff    	jne    804d158 <main+0x3c18>
 804fd80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fd84:	89 3c 24             	mov    %edi,(%esp)
 804fd87:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fd8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fd8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fd93:	b9 3d f9 00 00       	mov    $0xf93d,%ecx
 804fd98:	e8 bb 89 00 00       	call   8058758 <__afl_maybe_log>
 804fd9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fda1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fda5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fda9:	8b 3c 24             	mov    (%esp),%edi
 804fdac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fdb0:	e9 03 d4 ff ff       	jmp    804d1b8 <main+0x3c78>
 804fdb5:	8d 76 00             	lea    0x0(%esi),%esi
if(!(((line))) && ((line)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 332);
}
// MCC Label 333
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 333);
 804fdb8:	83 ec 08             	sub    $0x8,%esp
 804fdbb:	68 4d 01 00 00       	push   $0x14d
 804fdc0:	68 de 70 06 08       	push   $0x80670de
 804fdc5:	e8 f6 62 00 00       	call   80560c0 <report_label_coverage>
}
if (((line)) && ((line))) {
 804fdca:	8b 7d ac             	mov    -0x54(%ebp),%edi
 804fdcd:	83 c4 10             	add    $0x10,%esp
 804fdd0:	85 ff                	test   %edi,%edi
 804fdd2:	0f 85 00 cb ff ff    	jne    804c8d8 <main+0x3398>
 804fdd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fddc:	89 3c 24             	mov    %edi,(%esp)
 804fddf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fde3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fde7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fdeb:	b9 99 90 00 00       	mov    $0x9099,%ecx
 804fdf0:	e8 63 89 00 00       	call   8058758 <__afl_maybe_log>
 804fdf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fdf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fdfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fe01:	8b 3c 24             	mov    (%esp),%edi
 804fe04:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fe08:	e9 a3 cb ff ff       	jmp    804c9b0 <main+0x3470>
 804fe0d:	8d 76 00             	lea    0x0(%esi),%esi
// ROR Label 327
if((line_number != 0) != (line_number == 0))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 327);
}
if (line_number == 0)
            error(1, 0, gettext("%s: too many checksum lines"), checkfile_name);
 804fe10:	83 ec 04             	sub    $0x4,%esp
 804fe13:	6a 05                	push   $0x5
 804fe15:	68 d3 71 06 08       	push   $0x80671d3
 804fe1a:	6a 00                	push   $0x0
 804fe1c:	e8 af 93 ff ff       	call   80491d0 <dcgettext@plt>
 804fe21:	ff 75 80             	pushl  -0x80(%ebp)
 804fe24:	50                   	push   %eax
 804fe25:	6a 00                	push   $0x0
 804fe27:	6a 01                	push   $0x1
 804fe29:	e8 62 94 ff ff       	call   8049290 <error@plt>
 804fe2e:	83 c4 20             	add    $0x20,%esp
 804fe31:	e9 e6 c9 ff ff       	jmp    804c81c <main+0x32dc>
 804fe36:	8d 76 00             	lea    0x0(%esi),%esi
 804fe39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
if((((hex_digest)) || ((hex_digest))) != (((hex_digest)) && ((hex_digest))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 377);
}

// MCC Label 378
if(((hex_digest)) && ((hex_digest)) ) {asm volatile (""::: "memory");
 804fe40:	8b 45 bc             	mov    -0x44(%ebp),%eax
 804fe43:	85 c0                	test   %eax,%eax
 804fe45:	0f 84 89 2b 00 00    	je     80529d4 <main+0x9494>
 804fe4b:	90                   	nop
 804fe4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fe50:	89 3c 24             	mov    %edi,(%esp)
 804fe53:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fe57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fe5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fe5f:	b9 47 60 00 00       	mov    $0x6047,%ecx
 804fe64:	e8 ef 88 00 00       	call   8058758 <__afl_maybe_log>
 804fe69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fe6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fe71:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fe75:	8b 3c 24             	mov    (%esp),%edi
 804fe78:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 378);
 804fe7c:	53                   	push   %ebx
 804fe7d:	53                   	push   %ebx
 804fe7e:	68 7a 01 00 00       	push   $0x17a
 804fe83:	68 de 70 06 08       	push   $0x80670de
 804fe88:	e8 33 62 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 380
if(!(((hex_digest))) && ((hex_digest)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 380);
}
// MCC Label 381
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
 804fe8d:	8b 55 bc             	mov    -0x44(%ebp),%edx
 804fe90:	83 c4 10             	add    $0x10,%esp
 804fe93:	85 d2                	test   %edx,%edx
 804fe95:	89 55 a4             	mov    %edx,-0x5c(%ebp)
 804fe98:	0f 84 36 2b 00 00    	je     80529d4 <main+0x9494>
 804fe9e:	66 90                	xchg   %ax,%ax
 804fea0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fea4:	89 3c 24             	mov    %edi,(%esp)
 804fea7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804feab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804feaf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804feb3:	b9 6a dd 00 00       	mov    $0xdd6a,%ecx
 804feb8:	e8 9b 88 00 00       	call   8058758 <__afl_maybe_log>
 804febd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fec1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fec5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fec9:	8b 3c 24             	mov    (%esp),%edi
 804fecc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 381);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_557 = 0;
                    lava_557 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_557 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
 804fed0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fed4:	89 3c 24             	mov    %edi,(%esp)
 804fed7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fedb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fedf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fee3:	b9 f7 bc 00 00       	mov    $0xbcf7,%ecx
 804fee8:	e8 6b 88 00 00       	call   8058758 <__afl_maybe_log>
 804feed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fef1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fef5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fef9:	8b 3c 24             	mov    (%esp),%edi
 804fefc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ff00:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
 804ff03:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
                    lava_557 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 804ff07:	0f b6 71 02          	movzbl 0x2(%ecx),%esi
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 381);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_557 = 0;
                    lava_557 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
 804ff0b:	0f b6 39             	movzbl (%ecx),%edi
                    lava_557 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_557 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
                    lava_557 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 804ff0e:	0f b6 49 03          	movzbl 0x3(%ecx),%ecx
	report_label_coverage("MCC", 381);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_557 = 0;
                    lava_557 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_557 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
 804ff12:	c1 e3 08             	shl    $0x8,%ebx
                    lava_557 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 804ff15:	c1 e6 10             	shl    $0x10,%esi
 804ff18:	09 de                	or     %ebx,%esi
                    lava_557 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 804ff1a:	c1 e1 18             	shl    $0x18,%ecx
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_557 = 0;
                    lava_557 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_557 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_557 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 804ff1d:	09 fe                	or     %edi,%esi
                    lava_557 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 804ff1f:	09 ce                	or     %ecx,%esi
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804ff21:	89 35 f4 bb 06 08    	mov    %esi,0x806bbf4
 804ff27:	89 35 34 bc 06 08    	mov    %esi,0x806bc34
 804ff2d:	89 35 90 b7 06 08    	mov    %esi,0x806b790
 804ff33:	89 35 bc b7 06 08    	mov    %esi,0x806b7bc
 804ff39:	89 35 68 b3 06 08    	mov    %esi,0x806b368
 804ff3f:	90                   	nop
                    lava_10 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_10 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
                    lava_10 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
                    lava_set(10, lava_10);
                }
                _Bool kbcieiubweuhc1303455736 = hex_digits(hex_digest + (lava_get(301)) * (1818326324 == (lava_get(301)) || 880107884 == (lava_get(301))) + (lava_get(302)) * (1818326323 == (lava_get(302)) || 863330668 == (lava_get(302))) + (lava_get(303)) * (1818326322 == (lava_get(303)) || 846553452 == (lava_get(303))) + (lava_get(5)) * (1818326620 == (lava_get(5)) || 1551262060 == (lava_get(5))) + (lava_get(6)) * (1818326619 == (lava_get(6)) || 1534484844 == (lava_get(6))) + (lava_get(305)) * (1818326320 == (lava_get(305)) || 812999020 == (lava_get(305))) + (lava_get(9)) * (1818326616 == (lava_get(9)) || 1484153196 == (lava_get(9))) + (lava_get(7)) * (1818326618 == (lava_get(7)) || 1517707628 == (lava_get(7))) + (lava_get(8)) * (1818326617 == (lava_get(8)) || 1500930412 == (lava_get(8))) + (lava_get(10)) * (1818326615 == (lava_get(10)) || 1467375980 == (lava_get(10))) + (lava_get(306)) * (1818326319 == (lava_get(306)) || 796221804 == (lava_get(306))) + (lava_get(307)) * (1818326318 == (lava_get(307)) || 779444588 == (lava_get(307))));
 804ff40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ff44:	89 3c 24             	mov    %edi,(%esp)
 804ff47:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ff4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ff4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ff53:	b9 8c fb 00 00       	mov    $0xfb8c,%ecx
 804ff58:	e8 fb 87 00 00       	call   8058758 <__afl_maybe_log>
 804ff5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ff61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ff65:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ff69:	8b 3c 24             	mov    (%esp),%edi
 804ff6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ff70:	83 ec 0c             	sub    $0xc,%esp
 804ff73:	68 2d 01 00 00       	push   $0x12d
 804ff78:	e8 e3 6c 00 00       	call   8056c60 <lava_get>
 804ff7d:	c7 04 24 2d 01 00 00 	movl   $0x12d,(%esp)
 804ff84:	89 c3                	mov    %eax,%ebx
 804ff86:	e8 d5 6c 00 00       	call   8056c60 <lava_get>
 804ff8b:	83 c4 10             	add    $0x10,%esp
 804ff8e:	3d 34 75 61 6c       	cmp    $0x6c617534,%eax
 804ff93:	ba 01 00 00 00       	mov    $0x1,%edx
 804ff98:	74 4c                	je     804ffe6 <main+0x6aa6>
 804ff9a:	66 90                	xchg   %ax,%ax
 804ff9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ffa0:	89 3c 24             	mov    %edi,(%esp)
 804ffa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ffa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ffab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ffaf:	b9 00 6b 00 00       	mov    $0x6b00,%ecx
 804ffb4:	e8 9f 87 00 00       	call   8058758 <__afl_maybe_log>
 804ffb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ffbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ffc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ffc5:	8b 3c 24             	mov    (%esp),%edi
 804ffc8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ffcc:	83 ec 0c             	sub    $0xc,%esp
 804ffcf:	68 2d 01 00 00       	push   $0x12d
 804ffd4:	e8 87 6c 00 00       	call   8056c60 <lava_get>
 804ffd9:	31 d2                	xor    %edx,%edx
 804ffdb:	83 c4 10             	add    $0x10,%esp
 804ffde:	3d 6c 61 75 34       	cmp    $0x3475616c,%eax
 804ffe3:	0f 94 c2             	sete   %dl
 804ffe6:	66 90                	xchg   %ax,%ax
 804ffe8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ffec:	89 3c 24             	mov    %edi,(%esp)
 804ffef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fff3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fff7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fffb:	b9 7f 98 00 00       	mov    $0x987f,%ecx
 8050000:	e8 53 87 00 00       	call   8058758 <__afl_maybe_log>
 8050005:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050009:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805000d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050011:	8b 3c 24             	mov    (%esp),%edi
 8050014:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050018:	83 ec 0c             	sub    $0xc,%esp
 805001b:	68 2e 01 00 00       	push   $0x12e
 8050020:	0f af da             	imul   %edx,%ebx
 8050023:	e8 38 6c 00 00       	call   8056c60 <lava_get>
 8050028:	c7 04 24 2e 01 00 00 	movl   $0x12e,(%esp)
 805002f:	89 c6                	mov    %eax,%esi
 8050031:	e8 2a 6c 00 00       	call   8056c60 <lava_get>
 8050036:	83 c4 10             	add    $0x10,%esp
 8050039:	3d 33 75 61 6c       	cmp    $0x6c617533,%eax
 805003e:	b9 01 00 00 00       	mov    $0x1,%ecx
 8050043:	74 4d                	je     8050092 <main+0x6b52>
 8050045:	8d 76 00             	lea    0x0(%esi),%esi
 8050048:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805004c:	89 3c 24             	mov    %edi,(%esp)
 805004f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050053:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050057:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805005b:	b9 44 32 00 00       	mov    $0x3244,%ecx
 8050060:	e8 f3 86 00 00       	call   8058758 <__afl_maybe_log>
 8050065:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050069:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805006d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050071:	8b 3c 24             	mov    (%esp),%edi
 8050074:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050078:	83 ec 0c             	sub    $0xc,%esp
 805007b:	68 2e 01 00 00       	push   $0x12e
 8050080:	e8 db 6b 00 00       	call   8056c60 <lava_get>
 8050085:	31 c9                	xor    %ecx,%ecx
 8050087:	83 c4 10             	add    $0x10,%esp
 805008a:	3d 6c 61 75 33       	cmp    $0x3375616c,%eax
 805008f:	0f 94 c1             	sete   %cl
 8050092:	66 90                	xchg   %ax,%ax
 8050094:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050098:	89 3c 24             	mov    %edi,(%esp)
 805009b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805009f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80500a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80500a7:	b9 5d 85 00 00       	mov    $0x855d,%ecx
 80500ac:	e8 a7 86 00 00       	call   8058758 <__afl_maybe_log>
 80500b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80500b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80500b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80500bd:	8b 3c 24             	mov    (%esp),%edi
 80500c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80500c4:	89 cf                	mov    %ecx,%edi
 80500c6:	83 ec 0c             	sub    $0xc,%esp
 80500c9:	0f af fe             	imul   %esi,%edi
 80500cc:	6a 05                	push   $0x5
 80500ce:	e8 8d 6b 00 00       	call   8056c60 <lava_get>
 80500d3:	01 df                	add    %ebx,%edi
 80500d5:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
 80500dc:	89 c3                	mov    %eax,%ebx
 80500de:	e8 7d 6b 00 00       	call   8056c60 <lava_get>
 80500e3:	83 c4 10             	add    $0x10,%esp
 80500e6:	3d 5c 76 61 6c       	cmp    $0x6c61765c,%eax
 80500eb:	ba 01 00 00 00       	mov    $0x1,%edx
 80500f0:	74 49                	je     805013b <main+0x6bfb>
 80500f2:	66 90                	xchg   %ax,%ax
 80500f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80500f8:	89 3c 24             	mov    %edi,(%esp)
 80500fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80500ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050103:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050107:	b9 1d bb 00 00       	mov    $0xbb1d,%ecx
 805010c:	e8 47 86 00 00       	call   8058758 <__afl_maybe_log>
 8050111:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050115:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050119:	8b 54 24 04          	mov    0x4(%esp),%edx
 805011d:	8b 3c 24             	mov    (%esp),%edi
 8050120:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050124:	83 ec 0c             	sub    $0xc,%esp
 8050127:	6a 05                	push   $0x5
 8050129:	e8 32 6b 00 00       	call   8056c60 <lava_get>
 805012e:	31 d2                	xor    %edx,%edx
 8050130:	83 c4 10             	add    $0x10,%esp
 8050133:	3d 6c 61 76 5c       	cmp    $0x5c76616c,%eax
 8050138:	0f 94 c2             	sete   %dl
 805013b:	90                   	nop
 805013c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050140:	89 3c 24             	mov    %edi,(%esp)
 8050143:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050147:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805014b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805014f:	b9 6d ba 00 00       	mov    $0xba6d,%ecx
 8050154:	e8 ff 85 00 00       	call   8058758 <__afl_maybe_log>
 8050159:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805015d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050161:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050165:	8b 3c 24             	mov    (%esp),%edi
 8050168:	8d 64 24 10          	lea    0x10(%esp),%esp
 805016c:	83 ec 0c             	sub    $0xc,%esp
 805016f:	68 2f 01 00 00       	push   $0x12f
 8050174:	0f af da             	imul   %edx,%ebx
 8050177:	e8 e4 6a 00 00       	call   8056c60 <lava_get>
 805017c:	c7 04 24 2f 01 00 00 	movl   $0x12f,(%esp)
 8050183:	89 c6                	mov    %eax,%esi
 8050185:	e8 d6 6a 00 00       	call   8056c60 <lava_get>
 805018a:	83 c4 10             	add    $0x10,%esp
 805018d:	3d 32 75 61 6c       	cmp    $0x6c617532,%eax
 8050192:	b9 01 00 00 00       	mov    $0x1,%ecx
 8050197:	74 4d                	je     80501e6 <main+0x6ca6>
 8050199:	8d 76 00             	lea    0x0(%esi),%esi
 805019c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80501a0:	89 3c 24             	mov    %edi,(%esp)
 80501a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80501a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80501ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80501af:	b9 9d f7 00 00       	mov    $0xf79d,%ecx
 80501b4:	e8 9f 85 00 00       	call   8058758 <__afl_maybe_log>
 80501b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80501bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80501c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80501c5:	8b 3c 24             	mov    (%esp),%edi
 80501c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80501cc:	83 ec 0c             	sub    $0xc,%esp
 80501cf:	68 2f 01 00 00       	push   $0x12f
 80501d4:	e8 87 6a 00 00       	call   8056c60 <lava_get>
 80501d9:	31 c9                	xor    %ecx,%ecx
 80501db:	83 c4 10             	add    $0x10,%esp
 80501de:	3d 6c 61 75 32       	cmp    $0x3275616c,%eax
 80501e3:	0f 94 c1             	sete   %cl
 80501e6:	66 90                	xchg   %ax,%ax
 80501e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80501ec:	89 3c 24             	mov    %edi,(%esp)
 80501ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80501f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80501f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80501fb:	b9 4a 71 00 00       	mov    $0x714a,%ecx
 8050200:	e8 53 85 00 00       	call   8058758 <__afl_maybe_log>
 8050205:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050209:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805020d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050211:	8b 3c 24             	mov    (%esp),%edi
 8050214:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050218:	83 ec 0c             	sub    $0xc,%esp
 805021b:	01 fb                	add    %edi,%ebx
 805021d:	0f af f1             	imul   %ecx,%esi
 8050220:	68 31 01 00 00       	push   $0x131
 8050225:	e8 36 6a 00 00       	call   8056c60 <lava_get>
 805022a:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
 805022d:	c7 04 24 31 01 00 00 	movl   $0x131,(%esp)
 8050234:	89 c3                	mov    %eax,%ebx
 8050236:	e8 25 6a 00 00       	call   8056c60 <lava_get>
 805023b:	83 c4 10             	add    $0x10,%esp
 805023e:	3d 30 75 61 6c       	cmp    $0x6c617530,%eax
 8050243:	ba 01 00 00 00       	mov    $0x1,%edx
 8050248:	74 4c                	je     8050296 <main+0x6d56>
 805024a:	66 90                	xchg   %ax,%ax
 805024c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050250:	89 3c 24             	mov    %edi,(%esp)
 8050253:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050257:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805025b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805025f:	b9 23 c9 00 00       	mov    $0xc923,%ecx
 8050264:	e8 ef 84 00 00       	call   8058758 <__afl_maybe_log>
 8050269:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805026d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050271:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050275:	8b 3c 24             	mov    (%esp),%edi
 8050278:	8d 64 24 10          	lea    0x10(%esp),%esp
 805027c:	83 ec 0c             	sub    $0xc,%esp
 805027f:	68 31 01 00 00       	push   $0x131
 8050284:	e8 d7 69 00 00       	call   8056c60 <lava_get>
 8050289:	31 d2                	xor    %edx,%edx
 805028b:	83 c4 10             	add    $0x10,%esp
 805028e:	3d 6c 61 75 30       	cmp    $0x3075616c,%eax
 8050293:	0f 94 c2             	sete   %dl
 8050296:	66 90                	xchg   %ax,%ax
 8050298:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805029c:	89 3c 24             	mov    %edi,(%esp)
 805029f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80502a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80502a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80502ab:	b9 3b fd 00 00       	mov    $0xfd3b,%ecx
 80502b0:	e8 a3 84 00 00       	call   8058758 <__afl_maybe_log>
 80502b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80502b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80502bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80502c1:	8b 3c 24             	mov    (%esp),%edi
 80502c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80502c8:	83 ec 0c             	sub    $0xc,%esp
 80502cb:	6a 06                	push   $0x6
 80502cd:	0f af da             	imul   %edx,%ebx
 80502d0:	e8 8b 69 00 00       	call   8056c60 <lava_get>
 80502d5:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
 80502dc:	89 c6                	mov    %eax,%esi
 80502de:	e8 7d 69 00 00       	call   8056c60 <lava_get>
 80502e3:	83 c4 10             	add    $0x10,%esp
 80502e6:	3d 5b 76 61 6c       	cmp    $0x6c61765b,%eax
 80502eb:	b9 01 00 00 00       	mov    $0x1,%ecx
 80502f0:	74 49                	je     805033b <main+0x6dfb>
 80502f2:	66 90                	xchg   %ax,%ax
 80502f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80502f8:	89 3c 24             	mov    %edi,(%esp)
 80502fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80502ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050303:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050307:	b9 07 ed 00 00       	mov    $0xed07,%ecx
 805030c:	e8 47 84 00 00       	call   8058758 <__afl_maybe_log>
 8050311:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050315:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050319:	8b 54 24 04          	mov    0x4(%esp),%edx
 805031d:	8b 3c 24             	mov    (%esp),%edi
 8050320:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050324:	83 ec 0c             	sub    $0xc,%esp
 8050327:	6a 06                	push   $0x6
 8050329:	e8 32 69 00 00       	call   8056c60 <lava_get>
 805032e:	31 c9                	xor    %ecx,%ecx
 8050330:	83 c4 10             	add    $0x10,%esp
 8050333:	3d 6c 61 76 5b       	cmp    $0x5b76616c,%eax
 8050338:	0f 94 c1             	sete   %cl
 805033b:	90                   	nop
 805033c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050340:	89 3c 24             	mov    %edi,(%esp)
 8050343:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050347:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805034b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805034f:	b9 30 c1 00 00       	mov    $0xc130,%ecx
 8050354:	e8 ff 83 00 00       	call   8058758 <__afl_maybe_log>
 8050359:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805035d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050361:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050365:	8b 3c 24             	mov    (%esp),%edi
 8050368:	8d 64 24 10          	lea    0x10(%esp),%esp
 805036c:	83 ec 0c             	sub    $0xc,%esp
 805036f:	01 fb                	add    %edi,%ebx
 8050371:	0f af f1             	imul   %ecx,%esi
 8050374:	6a 07                	push   $0x7
 8050376:	e8 e5 68 00 00       	call   8056c60 <lava_get>
 805037b:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
 805037e:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
 8050385:	89 c3                	mov    %eax,%ebx
 8050387:	e8 d4 68 00 00       	call   8056c60 <lava_get>
 805038c:	83 c4 10             	add    $0x10,%esp
 805038f:	3d 5a 76 61 6c       	cmp    $0x6c61765a,%eax
 8050394:	ba 01 00 00 00       	mov    $0x1,%edx
 8050399:	74 48                	je     80503e3 <main+0x6ea3>
 805039b:	90                   	nop
 805039c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80503a0:	89 3c 24             	mov    %edi,(%esp)
 80503a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80503a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80503ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80503af:	b9 3c 5a 00 00       	mov    $0x5a3c,%ecx
 80503b4:	e8 9f 83 00 00       	call   8058758 <__afl_maybe_log>
 80503b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80503bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80503c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80503c5:	8b 3c 24             	mov    (%esp),%edi
 80503c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80503cc:	83 ec 0c             	sub    $0xc,%esp
 80503cf:	6a 07                	push   $0x7
 80503d1:	e8 8a 68 00 00       	call   8056c60 <lava_get>
 80503d6:	31 d2                	xor    %edx,%edx
 80503d8:	83 c4 10             	add    $0x10,%esp
 80503db:	3d 6c 61 76 5a       	cmp    $0x5a76616c,%eax
 80503e0:	0f 94 c2             	sete   %dl
 80503e3:	90                   	nop
 80503e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80503e8:	89 3c 24             	mov    %edi,(%esp)
 80503eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80503ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80503f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80503f7:	b9 64 b2 00 00       	mov    $0xb264,%ecx
 80503fc:	e8 57 83 00 00       	call   8058758 <__afl_maybe_log>
 8050401:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050405:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050409:	8b 54 24 04          	mov    0x4(%esp),%edx
 805040d:	8b 3c 24             	mov    (%esp),%edi
 8050410:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050414:	83 ec 0c             	sub    $0xc,%esp
 8050417:	6a 09                	push   $0x9
 8050419:	0f af da             	imul   %edx,%ebx
 805041c:	e8 3f 68 00 00       	call   8056c60 <lava_get>
 8050421:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
 8050428:	89 c6                	mov    %eax,%esi
 805042a:	e8 31 68 00 00       	call   8056c60 <lava_get>
 805042f:	83 c4 10             	add    $0x10,%esp
 8050432:	3d 58 76 61 6c       	cmp    $0x6c617658,%eax
 8050437:	b9 01 00 00 00       	mov    $0x1,%ecx
 805043c:	74 49                	je     8050487 <main+0x6f47>
 805043e:	66 90                	xchg   %ax,%ax
 8050440:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050444:	89 3c 24             	mov    %edi,(%esp)
 8050447:	89 54 24 04          	mov    %edx,0x4(%esp)
 805044b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805044f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050453:	b9 0c ac 00 00       	mov    $0xac0c,%ecx
 8050458:	e8 fb 82 00 00       	call   8058758 <__afl_maybe_log>
 805045d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050461:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050465:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050469:	8b 3c 24             	mov    (%esp),%edi
 805046c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050470:	83 ec 0c             	sub    $0xc,%esp
 8050473:	6a 09                	push   $0x9
 8050475:	e8 e6 67 00 00       	call   8056c60 <lava_get>
 805047a:	31 c9                	xor    %ecx,%ecx
 805047c:	83 c4 10             	add    $0x10,%esp
 805047f:	3d 6c 61 76 58       	cmp    $0x5876616c,%eax
 8050484:	0f 94 c1             	sete   %cl
 8050487:	90                   	nop
 8050488:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805048c:	89 3c 24             	mov    %edi,(%esp)
 805048f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050493:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050497:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805049b:	b9 5a e1 00 00       	mov    $0xe15a,%ecx
 80504a0:	e8 b3 82 00 00       	call   8058758 <__afl_maybe_log>
 80504a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80504a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80504ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80504b1:	8b 3c 24             	mov    (%esp),%edi
 80504b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80504b8:	83 ec 0c             	sub    $0xc,%esp
 80504bb:	01 fb                	add    %edi,%ebx
 80504bd:	0f af f1             	imul   %ecx,%esi
 80504c0:	6a 0a                	push   $0xa
 80504c2:	e8 99 67 00 00       	call   8056c60 <lava_get>
 80504c7:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
 80504ca:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
 80504d1:	89 c3                	mov    %eax,%ebx
 80504d3:	e8 88 67 00 00       	call   8056c60 <lava_get>
 80504d8:	83 c4 10             	add    $0x10,%esp
 80504db:	3d 57 76 61 6c       	cmp    $0x6c617657,%eax
 80504e0:	ba 01 00 00 00       	mov    $0x1,%edx
 80504e5:	74 48                	je     805052f <main+0x6fef>
 80504e7:	90                   	nop
 80504e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80504ec:	89 3c 24             	mov    %edi,(%esp)
 80504ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80504f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80504f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80504fb:	b9 71 a2 00 00       	mov    $0xa271,%ecx
 8050500:	e8 53 82 00 00       	call   8058758 <__afl_maybe_log>
 8050505:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050509:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805050d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050511:	8b 3c 24             	mov    (%esp),%edi
 8050514:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050518:	83 ec 0c             	sub    $0xc,%esp
 805051b:	6a 0a                	push   $0xa
 805051d:	e8 3e 67 00 00       	call   8056c60 <lava_get>
 8050522:	31 d2                	xor    %edx,%edx
 8050524:	83 c4 10             	add    $0x10,%esp
 8050527:	3d 6c 61 76 57       	cmp    $0x5776616c,%eax
 805052c:	0f 94 c2             	sete   %dl
 805052f:	90                   	nop
 8050530:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050534:	89 3c 24             	mov    %edi,(%esp)
 8050537:	89 54 24 04          	mov    %edx,0x4(%esp)
 805053b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805053f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050543:	b9 d5 63 00 00       	mov    $0x63d5,%ecx
 8050548:	e8 0b 82 00 00       	call   8058758 <__afl_maybe_log>
 805054d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050551:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050555:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050559:	8b 3c 24             	mov    (%esp),%edi
 805055c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050560:	83 ec 0c             	sub    $0xc,%esp
 8050563:	6a 08                	push   $0x8
 8050565:	0f af da             	imul   %edx,%ebx
 8050568:	e8 f3 66 00 00       	call   8056c60 <lava_get>
 805056d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8050574:	89 c6                	mov    %eax,%esi
 8050576:	e8 e5 66 00 00       	call   8056c60 <lava_get>
 805057b:	83 c4 10             	add    $0x10,%esp
 805057e:	3d 59 76 61 6c       	cmp    $0x6c617659,%eax
 8050583:	b9 01 00 00 00       	mov    $0x1,%ecx
 8050588:	74 49                	je     80505d3 <main+0x7093>
 805058a:	66 90                	xchg   %ax,%ax
 805058c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050590:	89 3c 24             	mov    %edi,(%esp)
 8050593:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050597:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805059b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805059f:	b9 74 83 00 00       	mov    $0x8374,%ecx
 80505a4:	e8 af 81 00 00       	call   8058758 <__afl_maybe_log>
 80505a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80505ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80505b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80505b5:	8b 3c 24             	mov    (%esp),%edi
 80505b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80505bc:	83 ec 0c             	sub    $0xc,%esp
 80505bf:	6a 08                	push   $0x8
 80505c1:	e8 9a 66 00 00       	call   8056c60 <lava_get>
 80505c6:	31 c9                	xor    %ecx,%ecx
 80505c8:	83 c4 10             	add    $0x10,%esp
 80505cb:	3d 6c 61 76 59       	cmp    $0x5976616c,%eax
 80505d0:	0f 94 c1             	sete   %cl
 80505d3:	90                   	nop
 80505d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80505d8:	89 3c 24             	mov    %edi,(%esp)
 80505db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80505df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80505e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80505e7:	b9 58 71 00 00       	mov    $0x7158,%ecx
 80505ec:	e8 67 81 00 00       	call   8058758 <__afl_maybe_log>
 80505f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80505f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80505f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80505fd:	8b 3c 24             	mov    (%esp),%edi
 8050600:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050604:	83 ec 0c             	sub    $0xc,%esp
 8050607:	01 fb                	add    %edi,%ebx
 8050609:	0f af f1             	imul   %ecx,%esi
 805060c:	68 33 01 00 00       	push   $0x133
 8050611:	e8 4a 66 00 00       	call   8056c60 <lava_get>
 8050616:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
 8050619:	c7 04 24 33 01 00 00 	movl   $0x133,(%esp)
 8050620:	89 c3                	mov    %eax,%ebx
 8050622:	e8 39 66 00 00       	call   8056c60 <lava_get>
 8050627:	83 c4 10             	add    $0x10,%esp
 805062a:	3d 2e 75 61 6c       	cmp    $0x6c61752e,%eax
 805062f:	ba 01 00 00 00       	mov    $0x1,%edx
 8050634:	74 4c                	je     8050682 <main+0x7142>
 8050636:	66 90                	xchg   %ax,%ax
 8050638:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805063c:	89 3c 24             	mov    %edi,(%esp)
 805063f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050643:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050647:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805064b:	b9 d3 f7 00 00       	mov    $0xf7d3,%ecx
 8050650:	e8 03 81 00 00       	call   8058758 <__afl_maybe_log>
 8050655:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050659:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805065d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050661:	8b 3c 24             	mov    (%esp),%edi
 8050664:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050668:	83 ec 0c             	sub    $0xc,%esp
 805066b:	68 33 01 00 00       	push   $0x133
 8050670:	e8 eb 65 00 00       	call   8056c60 <lava_get>
 8050675:	31 d2                	xor    %edx,%edx
 8050677:	83 c4 10             	add    $0x10,%esp
 805067a:	3d 6c 61 75 2e       	cmp    $0x2e75616c,%eax
 805067f:	0f 94 c2             	sete   %dl
 8050682:	66 90                	xchg   %ax,%ax
 8050684:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050688:	89 3c 24             	mov    %edi,(%esp)
 805068b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805068f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050693:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050697:	b9 24 c0 00 00       	mov    $0xc024,%ecx
 805069c:	e8 b7 80 00 00       	call   8058758 <__afl_maybe_log>
 80506a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80506a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80506a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80506ad:	8b 3c 24             	mov    (%esp),%edi
 80506b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80506b4:	83 ec 0c             	sub    $0xc,%esp
 80506b7:	68 32 01 00 00       	push   $0x132
 80506bc:	0f af da             	imul   %edx,%ebx
 80506bf:	e8 9c 65 00 00       	call   8056c60 <lava_get>
 80506c4:	c7 04 24 32 01 00 00 	movl   $0x132,(%esp)
 80506cb:	89 c6                	mov    %eax,%esi
 80506cd:	e8 8e 65 00 00       	call   8056c60 <lava_get>
 80506d2:	83 c4 10             	add    $0x10,%esp
 80506d5:	3d 2f 75 61 6c       	cmp    $0x6c61752f,%eax
 80506da:	b9 01 00 00 00       	mov    $0x1,%ecx
 80506df:	74 4d                	je     805072e <main+0x71ee>
 80506e1:	8d 76 00             	lea    0x0(%esi),%esi
 80506e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80506e8:	89 3c 24             	mov    %edi,(%esp)
 80506eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80506ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80506f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80506f7:	b9 ac fb 00 00       	mov    $0xfbac,%ecx
 80506fc:	e8 57 80 00 00       	call   8058758 <__afl_maybe_log>
 8050701:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050705:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050709:	8b 54 24 04          	mov    0x4(%esp),%edx
 805070d:	8b 3c 24             	mov    (%esp),%edi
 8050710:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050714:	83 ec 0c             	sub    $0xc,%esp
 8050717:	68 32 01 00 00       	push   $0x132
 805071c:	e8 3f 65 00 00       	call   8056c60 <lava_get>
 8050721:	31 c9                	xor    %ecx,%ecx
 8050723:	83 c4 10             	add    $0x10,%esp
 8050726:	3d 6c 61 75 2f       	cmp    $0x2f75616c,%eax
 805072b:	0f 94 c1             	sete   %cl
 805072e:	66 90                	xchg   %ax,%ax
 8050730:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050734:	89 3c 24             	mov    %edi,(%esp)
 8050737:	89 54 24 04          	mov    %edx,0x4(%esp)
 805073b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805073f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050743:	b9 43 a4 00 00       	mov    $0xa443,%ecx
 8050748:	e8 0b 80 00 00       	call   8058758 <__afl_maybe_log>
 805074d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050751:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050755:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050759:	8b 3c 24             	mov    (%esp),%edi
 805075c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050760:	0f af f1             	imul   %ecx,%esi
if(digest_hex_bytes < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 281);
}

// ROR Label 282
if((i <= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
 8050763:	a1 04 b3 06 08       	mov    0x806b304,%eax
 8050768:	01 fb                	add    %edi,%ebx
                    lava_10 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_10 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
                    lava_10 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
                    lava_set(10, lava_10);
                }
                _Bool kbcieiubweuhc1303455736 = hex_digits(hex_digest + (lava_get(301)) * (1818326324 == (lava_get(301)) || 880107884 == (lava_get(301))) + (lava_get(302)) * (1818326323 == (lava_get(302)) || 863330668 == (lava_get(302))) + (lava_get(303)) * (1818326322 == (lava_get(303)) || 846553452 == (lava_get(303))) + (lava_get(5)) * (1818326620 == (lava_get(5)) || 1551262060 == (lava_get(5))) + (lava_get(6)) * (1818326619 == (lava_get(6)) || 1534484844 == (lava_get(6))) + (lava_get(305)) * (1818326320 == (lava_get(305)) || 812999020 == (lava_get(305))) + (lava_get(9)) * (1818326616 == (lava_get(9)) || 1484153196 == (lava_get(9))) + (lava_get(7)) * (1818326618 == (lava_get(7)) || 1517707628 == (lava_get(7))) + (lava_get(8)) * (1818326617 == (lava_get(8)) || 1500930412 == (lava_get(8))) + (lava_get(10)) * (1818326615 == (lava_get(10)) || 1467375980 == (lava_get(10))) + (lava_get(306)) * (1818326319 == (lava_get(306)) || 796221804 == (lava_get(306))) + (lava_get(307)) * (1818326318 == (lava_get(307)) || 779444588 == (lava_get(307))));
 805076a:	01 f3                	add    %esi,%ebx
 805076c:	03 5d a4             	add    -0x5c(%ebp),%ebx
if(digest_hex_bytes < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 281);
}

// ROR Label 282
if((i <= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
 805076f:	85 c0                	test   %eax,%eax
 8050771:	0f 84 5b 1e 00 00    	je     80525d2 <main+0x9092>
 8050777:	90                   	nop
 8050778:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805077c:	89 3c 24             	mov    %edi,(%esp)
 805077f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050783:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050787:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805078b:	b9 7e bb 00 00       	mov    $0xbb7e,%ecx
 8050790:	e8 c3 7f 00 00       	call   8058758 <__afl_maybe_log>
 8050795:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050799:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805079d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80507a1:	8b 3c 24             	mov    (%esp),%edi
 80507a4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 282);
}
// ROR Label 283
if((i > digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 283);
 80507a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80507ac:	89 3c 24             	mov    %edi,(%esp)
 80507af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80507b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80507b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80507bb:	b9 8c 1e 00 00       	mov    $0x1e8c,%ecx
 80507c0:	e8 93 7f 00 00       	call   8058758 <__afl_maybe_log>
 80507c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80507c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80507cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80507d1:	8b 3c 24             	mov    (%esp),%edi
 80507d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80507d8:	52                   	push   %edx
 80507d9:	52                   	push   %edx
 80507da:	68 1b 01 00 00       	push   $0x11b
 80507df:	68 c8 70 06 08       	push   $0x80670c8
 80507e4:	e8 d7 58 00 00       	call   80560c0 <report_label_coverage>
}
// ROR Label 284
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
 80507e9:	8b 35 04 b3 06 08    	mov    0x806b304,%esi
 80507ef:	83 c4 10             	add    $0x10,%esp
 80507f2:	85 f6                	test   %esi,%esi
 80507f4:	0f 94 c2             	sete   %dl
 80507f7:	0f 95 c1             	setne  %cl
 80507fa:	38 ca                	cmp    %cl,%dl
 80507fc:	0f 85 56 1e 00 00    	jne    8052658 <main+0x9118>
 8050802:	66 90                	xchg   %ax,%ax
 8050804:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050808:	89 3c 24             	mov    %edi,(%esp)
 805080b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805080f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050813:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050817:	b9 0d e1 00 00       	mov    $0xe10d,%ecx
 805081c:	e8 37 7f 00 00       	call   8058758 <__afl_maybe_log>
 8050821:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050825:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050829:	8b 54 24 04          	mov    0x4(%esp),%edx
 805082d:	8b 3c 24             	mov    (%esp),%edi
 8050830:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
 8050834:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050838:	89 3c 24             	mov    %edi,(%esp)
 805083b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805083f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050843:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050847:	b9 d4 f5 00 00       	mov    $0xf5d4,%ecx
 805084c:	e8 07 7f 00 00       	call   8058758 <__afl_maybe_log>
 8050851:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050855:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050859:	8b 54 24 04          	mov    0x4(%esp),%edx
 805085d:	8b 3c 24             	mov    (%esp),%edi
 8050860:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050864:	85 f6                	test   %esi,%esi
 8050866:	0f 84 59 25 00 00    	je     8052dc5 <main+0x9885>
 805086c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050870:	89 3c 24             	mov    %edi,(%esp)
 8050873:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805087b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805087f:	b9 57 7e 00 00       	mov    $0x7e57,%ecx
 8050884:	e8 cf 7e 00 00       	call   8058758 <__afl_maybe_log>
 8050889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805088d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050891:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050895:	8b 3c 24             	mov    (%esp),%edi
 8050898:	8d 64 24 10          	lea    0x10(%esp),%esp
 805089c:	e8 7f 8c ff ff       	call   8049520 <__ctype_b_loc@plt>
 80508a1:	8b 10                	mov    (%eax),%edx
    {
      if (!isxdigit (*s))
 80508a3:	0f b6 03             	movzbl (%ebx),%eax
 80508a6:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
 80508a9:	89 d9                	mov    %ebx,%ecx
 80508ab:	f7 d1                	not    %ecx
 80508ad:	89 7d a4             	mov    %edi,-0x5c(%ebp)
 80508b0:	01 f9                	add    %edi,%ecx
 80508b2:	83 e1 07             	and    $0x7,%ecx
 80508b5:	f6 44 42 01 10       	testb  $0x10,0x1(%edx,%eax,2)
 80508ba:	0f 84 9e 09 00 00    	je     805125e <main+0x7d1e>
 80508c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80508c4:	89 3c 24             	mov    %edi,(%esp)
 80508c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80508cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80508cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80508d3:	b9 7e 52 00 00       	mov    $0x527e,%ecx
 80508d8:	e8 7b 7e 00 00       	call   8058758 <__afl_maybe_log>
 80508dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80508e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80508e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80508e9:	8b 3c 24             	mov    (%esp),%edi
 80508ec:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      ++s;
 80508f0:	8d 43 01             	lea    0x1(%ebx),%eax
 80508f3:	89 c7                	mov    %eax,%edi
 80508f5:	29 df                	sub    %ebx,%edi
}
// ROR Label 284
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
 80508f7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
 80508fa:	0f 84 ad 07 00 00    	je     80510ad <main+0x7b6d>
 8050900:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050904:	89 3c 24             	mov    %edi,(%esp)
 8050907:	89 54 24 04          	mov    %edx,0x4(%esp)
 805090b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805090f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050913:	b9 2a 56 00 00       	mov    $0x562a,%ecx
 8050918:	e8 3b 7e 00 00       	call   8058758 <__afl_maybe_log>
 805091d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050921:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050925:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050929:	8b 3c 24             	mov    (%esp),%edi
 805092c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050930:	85 c9                	test   %ecx,%ecx
 8050932:	0f 84 cc 04 00 00    	je     8050e04 <main+0x78c4>
 8050938:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805093c:	89 3c 24             	mov    %edi,(%esp)
 805093f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050943:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050947:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805094b:	b9 70 41 00 00       	mov    $0x4170,%ecx
 8050950:	e8 03 7e 00 00       	call   8058758 <__afl_maybe_log>
 8050955:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050959:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805095d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050961:	8b 3c 24             	mov    (%esp),%edi
 8050964:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050968:	83 f9 01             	cmp    $0x1,%ecx
 805096b:	0f 84 e2 03 00 00    	je     8050d53 <main+0x7813>
 8050971:	8d 76 00             	lea    0x0(%esi),%esi
 8050974:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050978:	89 3c 24             	mov    %edi,(%esp)
 805097b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805097f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050983:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050987:	b9 b1 ad 00 00       	mov    $0xadb1,%ecx
 805098c:	e8 c7 7d 00 00       	call   8058758 <__afl_maybe_log>
 8050991:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050995:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050999:	8b 54 24 04          	mov    0x4(%esp),%edx
 805099d:	8b 3c 24             	mov    (%esp),%edi
 80509a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80509a4:	83 f9 02             	cmp    $0x2,%ecx
 80509a7:	0f 84 32 03 00 00    	je     8050cdf <main+0x779f>
 80509ad:	8d 76 00             	lea    0x0(%esi),%esi
 80509b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80509b4:	89 3c 24             	mov    %edi,(%esp)
 80509b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80509bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80509bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80509c3:	b9 51 cd 00 00       	mov    $0xcd51,%ecx
 80509c8:	e8 8b 7d 00 00       	call   8058758 <__afl_maybe_log>
 80509cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80509d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80509d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80509d9:	8b 3c 24             	mov    (%esp),%edi
 80509dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80509e0:	83 f9 03             	cmp    $0x3,%ecx
 80509e3:	0f 84 82 02 00 00    	je     8050c6b <main+0x772b>
 80509e9:	8d 76 00             	lea    0x0(%esi),%esi
 80509ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80509f0:	89 3c 24             	mov    %edi,(%esp)
 80509f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80509f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80509fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80509ff:	b9 77 8e 00 00       	mov    $0x8e77,%ecx
 8050a04:	e8 4f 7d 00 00       	call   8058758 <__afl_maybe_log>
 8050a09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050a0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050a11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050a15:	8b 3c 24             	mov    (%esp),%edi
 8050a18:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050a1c:	83 f9 04             	cmp    $0x4,%ecx
 8050a1f:	0f 84 d2 01 00 00    	je     8050bf7 <main+0x76b7>
 8050a25:	8d 76 00             	lea    0x0(%esi),%esi
 8050a28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050a2c:	89 3c 24             	mov    %edi,(%esp)
 8050a2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050a33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050a37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050a3b:	b9 b7 6f 00 00       	mov    $0x6fb7,%ecx
 8050a40:	e8 13 7d 00 00       	call   8058758 <__afl_maybe_log>
 8050a45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050a49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050a4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050a51:	8b 3c 24             	mov    (%esp),%edi
 8050a54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050a58:	83 f9 05             	cmp    $0x5,%ecx
 8050a5b:	0f 84 22 01 00 00    	je     8050b83 <main+0x7643>
 8050a61:	8d 76 00             	lea    0x0(%esi),%esi
 8050a64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050a68:	89 3c 24             	mov    %edi,(%esp)
 8050a6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050a6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050a73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050a77:	b9 70 6a 00 00       	mov    $0x6a70,%ecx
 8050a7c:	e8 d7 7c 00 00       	call   8058758 <__afl_maybe_log>
 8050a81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050a85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050a89:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050a8d:	8b 3c 24             	mov    (%esp),%edi
 8050a90:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050a94:	83 f9 06             	cmp    $0x6,%ecx
 8050a97:	74 76                	je     8050b0f <main+0x75cf>
 8050a99:	8d 76 00             	lea    0x0(%esi),%esi
 8050a9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050aa0:	89 3c 24             	mov    %edi,(%esp)
 8050aa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050aa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050aab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050aaf:	b9 bb 75 00 00       	mov    $0x75bb,%ecx
 8050ab4:	e8 9f 7c 00 00       	call   8058758 <__afl_maybe_log>
 8050ab9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050abd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050ac1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050ac5:	8b 3c 24             	mov    (%esp),%edi
 8050ac8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (!isxdigit (*s))
 8050acc:	0f b6 38             	movzbl (%eax),%edi
 8050acf:	f6 44 7a 01 10       	testb  $0x10,0x1(%edx,%edi,2)
 8050ad4:	0f 84 84 07 00 00    	je     805125e <main+0x7d1e>
 8050ada:	66 90                	xchg   %ax,%ax
 8050adc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050ae0:	89 3c 24             	mov    %edi,(%esp)
 8050ae3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050ae7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050aeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050aef:	b9 4b 61 00 00       	mov    $0x614b,%ecx
 8050af4:	e8 5f 7c 00 00       	call   8058758 <__afl_maybe_log>
 8050af9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050afd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050b01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050b05:	8b 3c 24             	mov    (%esp),%edi
 8050b08:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      ++s;
 8050b0c:	83 c0 01             	add    $0x1,%eax
 8050b0f:	90                   	nop
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
    {
      if (!isxdigit (*s))
 8050b10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050b14:	89 3c 24             	mov    %edi,(%esp)
 8050b17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050b1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050b1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050b23:	b9 eb 2a 00 00       	mov    $0x2aeb,%ecx
 8050b28:	e8 2b 7c 00 00       	call   8058758 <__afl_maybe_log>
 8050b2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050b31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050b35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050b39:	8b 3c 24             	mov    (%esp),%edi
 8050b3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050b40:	0f b6 08             	movzbl (%eax),%ecx
 8050b43:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050b48:	0f 84 10 07 00 00    	je     805125e <main+0x7d1e>
 8050b4e:	66 90                	xchg   %ax,%ax
 8050b50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050b54:	89 3c 24             	mov    %edi,(%esp)
 8050b57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050b5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050b5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050b63:	b9 7c bb 00 00       	mov    $0xbb7c,%ecx
 8050b68:	e8 eb 7b 00 00       	call   8058758 <__afl_maybe_log>
 8050b6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050b71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050b75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050b79:	8b 3c 24             	mov    (%esp),%edi
 8050b7c:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      ++s;
 8050b80:	83 c0 01             	add    $0x1,%eax
 8050b83:	90                   	nop
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
    {
      if (!isxdigit (*s))
 8050b84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050b88:	89 3c 24             	mov    %edi,(%esp)
 8050b8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050b8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050b93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050b97:	b9 4e c5 00 00       	mov    $0xc54e,%ecx
 8050b9c:	e8 b7 7b 00 00       	call   8058758 <__afl_maybe_log>
 8050ba1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050ba5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050ba9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050bad:	8b 3c 24             	mov    (%esp),%edi
 8050bb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050bb4:	0f b6 38             	movzbl (%eax),%edi
 8050bb7:	f6 44 7a 01 10       	testb  $0x10,0x1(%edx,%edi,2)
 8050bbc:	0f 84 9c 06 00 00    	je     805125e <main+0x7d1e>
 8050bc2:	66 90                	xchg   %ax,%ax
 8050bc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050bc8:	89 3c 24             	mov    %edi,(%esp)
 8050bcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050bcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050bd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050bd7:	b9 34 29 00 00       	mov    $0x2934,%ecx
 8050bdc:	e8 77 7b 00 00       	call   8058758 <__afl_maybe_log>
 8050be1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050be5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050be9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050bed:	8b 3c 24             	mov    (%esp),%edi
 8050bf0:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      ++s;
 8050bf4:	83 c0 01             	add    $0x1,%eax
 8050bf7:	90                   	nop
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
    {
      if (!isxdigit (*s))
 8050bf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050bfc:	89 3c 24             	mov    %edi,(%esp)
 8050bff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050c03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050c07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050c0b:	b9 d4 d7 00 00       	mov    $0xd7d4,%ecx
 8050c10:	e8 43 7b 00 00       	call   8058758 <__afl_maybe_log>
 8050c15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050c19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050c1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050c21:	8b 3c 24             	mov    (%esp),%edi
 8050c24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050c28:	0f b6 08             	movzbl (%eax),%ecx
 8050c2b:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050c30:	0f 84 28 06 00 00    	je     805125e <main+0x7d1e>
 8050c36:	66 90                	xchg   %ax,%ax
 8050c38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050c3c:	89 3c 24             	mov    %edi,(%esp)
 8050c3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050c43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050c47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050c4b:	b9 5c 63 00 00       	mov    $0x635c,%ecx
 8050c50:	e8 03 7b 00 00       	call   8058758 <__afl_maybe_log>
 8050c55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050c59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050c5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050c61:	8b 3c 24             	mov    (%esp),%edi
 8050c64:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      ++s;
 8050c68:	83 c0 01             	add    $0x1,%eax
 8050c6b:	90                   	nop
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
    {
      if (!isxdigit (*s))
 8050c6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050c70:	89 3c 24             	mov    %edi,(%esp)
 8050c73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050c77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050c7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050c7f:	b9 ee d1 00 00       	mov    $0xd1ee,%ecx
 8050c84:	e8 cf 7a 00 00       	call   8058758 <__afl_maybe_log>
 8050c89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050c8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050c91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050c95:	8b 3c 24             	mov    (%esp),%edi
 8050c98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050c9c:	0f b6 38             	movzbl (%eax),%edi
 8050c9f:	f6 44 7a 01 10       	testb  $0x10,0x1(%edx,%edi,2)
 8050ca4:	0f 84 b4 05 00 00    	je     805125e <main+0x7d1e>
 8050caa:	66 90                	xchg   %ax,%ax
 8050cac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050cb0:	89 3c 24             	mov    %edi,(%esp)
 8050cb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050cb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050cbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050cbf:	b9 2a 5e 00 00       	mov    $0x5e2a,%ecx
 8050cc4:	e8 8f 7a 00 00       	call   8058758 <__afl_maybe_log>
 8050cc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050ccd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050cd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050cd5:	8b 3c 24             	mov    (%esp),%edi
 8050cd8:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      ++s;
 8050cdc:	83 c0 01             	add    $0x1,%eax
 8050cdf:	90                   	nop
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
    {
      if (!isxdigit (*s))
 8050ce0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050ce4:	89 3c 24             	mov    %edi,(%esp)
 8050ce7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050ceb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050cef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050cf3:	b9 21 b2 00 00       	mov    $0xb221,%ecx
 8050cf8:	e8 5b 7a 00 00       	call   8058758 <__afl_maybe_log>
 8050cfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050d01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050d05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050d09:	8b 3c 24             	mov    (%esp),%edi
 8050d0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050d10:	0f b6 08             	movzbl (%eax),%ecx
 8050d13:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050d18:	0f 84 40 05 00 00    	je     805125e <main+0x7d1e>
 8050d1e:	66 90                	xchg   %ax,%ax
 8050d20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050d24:	89 3c 24             	mov    %edi,(%esp)
 8050d27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050d2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050d2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050d33:	b9 a4 b8 00 00       	mov    $0xb8a4,%ecx
 8050d38:	e8 1b 7a 00 00       	call   8058758 <__afl_maybe_log>
 8050d3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050d41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050d45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050d49:	8b 3c 24             	mov    (%esp),%edi
 8050d4c:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      ++s;
 8050d50:	83 c0 01             	add    $0x1,%eax
 8050d53:	90                   	nop
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
    {
      if (!isxdigit (*s))
 8050d54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050d58:	89 3c 24             	mov    %edi,(%esp)
 8050d5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050d5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050d63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050d67:	b9 00 3d 00 00       	mov    $0x3d00,%ecx
 8050d6c:	e8 e7 79 00 00       	call   8058758 <__afl_maybe_log>
 8050d71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050d75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050d79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050d7d:	8b 3c 24             	mov    (%esp),%edi
 8050d80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050d84:	0f b6 38             	movzbl (%eax),%edi
 8050d87:	f6 44 7a 01 10       	testb  $0x10,0x1(%edx,%edi,2)
 8050d8c:	0f 84 cc 04 00 00    	je     805125e <main+0x7d1e>
 8050d92:	66 90                	xchg   %ax,%ax
 8050d94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050d98:	89 3c 24             	mov    %edi,(%esp)
 8050d9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050d9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050da3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050da7:	b9 1d be 00 00       	mov    $0xbe1d,%ecx
 8050dac:	e8 a7 79 00 00       	call   8058758 <__afl_maybe_log>
 8050db1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050db5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050db9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050dbd:	8b 3c 24             	mov    (%esp),%edi
 8050dc0:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      ++s;
 8050dc4:	83 c0 01             	add    $0x1,%eax
 8050dc7:	89 c7                	mov    %eax,%edi
 8050dc9:	29 df                	sub    %ebx,%edi
}
// ROR Label 284
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
 8050dcb:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
 8050dce:	0f 84 d9 02 00 00    	je     80510ad <main+0x7b6d>
 8050dd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050dd8:	89 3c 24             	mov    %edi,(%esp)
 8050ddb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050ddf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050de3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050de7:	b9 66 cd 00 00       	mov    $0xcd66,%ecx
 8050dec:	e8 67 79 00 00       	call   8058758 <__afl_maybe_log>
 8050df1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050df5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050df9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050dfd:	8b 3c 24             	mov    (%esp),%edi
 8050e00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050e04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050e08:	89 3c 24             	mov    %edi,(%esp)
 8050e0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050e0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050e13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050e17:	b9 94 dc 00 00       	mov    $0xdc94,%ecx
 8050e1c:	e8 37 79 00 00       	call   8058758 <__afl_maybe_log>
 8050e21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050e25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050e29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050e2d:	8b 3c 24             	mov    (%esp),%edi
 8050e30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050e34:	8b 7d a4             	mov    -0x5c(%ebp),%edi
 8050e37:	90                   	nop
    {
      if (!isxdigit (*s))
 8050e38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050e3c:	89 3c 24             	mov    %edi,(%esp)
 8050e3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050e43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050e47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050e4b:	b9 a9 8e 00 00       	mov    $0x8ea9,%ecx
 8050e50:	e8 03 79 00 00       	call   8058758 <__afl_maybe_log>
 8050e55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050e59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050e5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050e61:	8b 3c 24             	mov    (%esp),%edi
 8050e64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050e68:	0f b6 08             	movzbl (%eax),%ecx
 8050e6b:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050e70:	0f 84 e8 03 00 00    	je     805125e <main+0x7d1e>
 8050e76:	66 90                	xchg   %ax,%ax
 8050e78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050e7c:	89 3c 24             	mov    %edi,(%esp)
 8050e7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050e83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050e87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050e8b:	b9 1f 5d 00 00       	mov    $0x5d1f,%ecx
 8050e90:	e8 c3 78 00 00       	call   8058758 <__afl_maybe_log>
 8050e95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050e99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050e9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050ea1:	8b 3c 24             	mov    (%esp),%edi
 8050ea4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050ea8:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
 8050eac:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050eb1:	0f 84 a7 03 00 00    	je     805125e <main+0x7d1e>
 8050eb7:	90                   	nop
 8050eb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050ebc:	89 3c 24             	mov    %edi,(%esp)
 8050ebf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050ec3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050ec7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050ecb:	b9 a8 5a 00 00       	mov    $0x5aa8,%ecx
 8050ed0:	e8 83 78 00 00       	call   8058758 <__afl_maybe_log>
 8050ed5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050ed9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050edd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050ee1:	8b 3c 24             	mov    (%esp),%edi
 8050ee4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050ee8:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
 8050eec:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050ef1:	0f 84 67 03 00 00    	je     805125e <main+0x7d1e>
 8050ef7:	90                   	nop
 8050ef8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050efc:	89 3c 24             	mov    %edi,(%esp)
 8050eff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050f03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050f07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050f0b:	b9 0c 03 00 00       	mov    $0x30c,%ecx
 8050f10:	e8 43 78 00 00       	call   8058758 <__afl_maybe_log>
 8050f15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050f19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050f1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050f21:	8b 3c 24             	mov    (%esp),%edi
 8050f24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050f28:	0f b6 48 03          	movzbl 0x3(%eax),%ecx
 8050f2c:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050f31:	0f 84 27 03 00 00    	je     805125e <main+0x7d1e>
 8050f37:	90                   	nop
 8050f38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050f3c:	89 3c 24             	mov    %edi,(%esp)
 8050f3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050f43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050f47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050f4b:	b9 26 b5 00 00       	mov    $0xb526,%ecx
 8050f50:	e8 03 78 00 00       	call   8058758 <__afl_maybe_log>
 8050f55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050f59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050f5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050f61:	8b 3c 24             	mov    (%esp),%edi
 8050f64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050f68:	0f b6 48 04          	movzbl 0x4(%eax),%ecx
 8050f6c:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050f71:	0f 84 e7 02 00 00    	je     805125e <main+0x7d1e>
 8050f77:	90                   	nop
 8050f78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050f7c:	89 3c 24             	mov    %edi,(%esp)
 8050f7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050f83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050f87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050f8b:	b9 19 db 00 00       	mov    $0xdb19,%ecx
 8050f90:	e8 c3 77 00 00       	call   8058758 <__afl_maybe_log>
 8050f95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050f99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050f9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050fa1:	8b 3c 24             	mov    (%esp),%edi
 8050fa4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050fa8:	0f b6 48 05          	movzbl 0x5(%eax),%ecx
 8050fac:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050fb1:	0f 84 a7 02 00 00    	je     805125e <main+0x7d1e>
 8050fb7:	90                   	nop
 8050fb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050fbc:	89 3c 24             	mov    %edi,(%esp)
 8050fbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050fc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050fc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050fcb:	b9 cb d3 00 00       	mov    $0xd3cb,%ecx
 8050fd0:	e8 83 77 00 00       	call   8058758 <__afl_maybe_log>
 8050fd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050fd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050fdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050fe1:	8b 3c 24             	mov    (%esp),%edi
 8050fe4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050fe8:	0f b6 48 06          	movzbl 0x6(%eax),%ecx
 8050fec:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8050ff1:	0f 84 67 02 00 00    	je     805125e <main+0x7d1e>
 8050ff7:	90                   	nop
 8050ff8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050ffc:	89 3c 24             	mov    %edi,(%esp)
 8050fff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051003:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051007:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805100b:	b9 4c b7 00 00       	mov    $0xb74c,%ecx
 8051010:	e8 43 77 00 00       	call   8058758 <__afl_maybe_log>
 8051015:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051019:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805101d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051021:	8b 3c 24             	mov    (%esp),%edi
 8051024:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051028:	0f b6 48 07          	movzbl 0x7(%eax),%ecx
 805102c:	f6 44 4a 01 10       	testb  $0x10,0x1(%edx,%ecx,2)
 8051031:	0f 84 27 02 00 00    	je     805125e <main+0x7d1e>
 8051037:	90                   	nop
 8051038:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805103c:	89 3c 24             	mov    %edi,(%esp)
 805103f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051043:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051047:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805104b:	b9 fb f7 00 00       	mov    $0xf7fb,%ecx
 8051050:	e8 03 77 00 00       	call   8058758 <__afl_maybe_log>
 8051055:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051059:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805105d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051061:	8b 3c 24             	mov    (%esp),%edi
 8051064:	8d 64 24 10          	lea    0x10(%esp),%esp
        return false;
      ++s;
 8051068:	83 c0 08             	add    $0x8,%eax
 805106b:	89 c1                	mov    %eax,%ecx
 805106d:	29 d9                	sub    %ebx,%ecx
}
// ROR Label 284
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
 805106f:	39 f8                	cmp    %edi,%eax
 8051071:	0f 85 c0 fd ff ff    	jne    8050e37 <main+0x78f7>
 8051077:	90                   	nop
 8051078:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805107c:	89 3c 24             	mov    %edi,(%esp)
 805107f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051083:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051087:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805108b:	b9 18 b9 00 00       	mov    $0xb918,%ecx
 8051090:	e8 c3 76 00 00       	call   8058758 <__afl_maybe_log>
 8051095:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051099:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805109d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80510a1:	8b 3c 24             	mov    (%esp),%edi
 80510a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80510a8:	89 7d a4             	mov    %edi,-0x5c(%ebp)
 80510ab:	89 cf                	mov    %ecx,%edi
 80510ad:	8d 76 00             	lea    0x0(%esi),%esi
if(digest_hex_bytes < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 285);
}

// ROR Label 286
if((i <= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
 80510b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80510b4:	89 3c 24             	mov    %edi,(%esp)
 80510b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80510bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80510bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80510c3:	b9 51 21 00 00       	mov    $0x2151,%ecx
 80510c8:	e8 8b 76 00 00       	call   8058758 <__afl_maybe_log>
 80510cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80510d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80510d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80510d9:	8b 3c 24             	mov    (%esp),%edi
 80510dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80510e0:	39 fe                	cmp    %edi,%esi
 80510e2:	89 c3                	mov    %eax,%ebx
 80510e4:	0f 83 10 1d 00 00    	jae    8052dfa <main+0x98ba>
 80510ea:	66 90                	xchg   %ax,%ax
 80510ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80510f0:	89 3c 24             	mov    %edi,(%esp)
 80510f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80510f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80510fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80510ff:	b9 90 29 00 00       	mov    $0x2990,%ecx
 8051104:	e8 4f 76 00 00       	call   8058758 <__afl_maybe_log>
 8051109:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805110d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051111:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051115:	8b 3c 24             	mov    (%esp),%edi
 8051118:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 286);
}
// ROR Label 287
if((i > digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
 805111c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051120:	89 3c 24             	mov    %edi,(%esp)
 8051123:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051127:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805112b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805112f:	b9 d9 b8 00 00       	mov    $0xb8d9,%ecx
 8051134:	e8 1f 76 00 00       	call   8058758 <__afl_maybe_log>
 8051139:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805113d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051141:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051145:	8b 3c 24             	mov    (%esp),%edi
 8051148:	8d 64 24 10          	lea    0x10(%esp),%esp
 805114c:	39 f7                	cmp    %esi,%edi
 805114e:	0f 97 c2             	seta   %dl
 8051151:	0f 92 c0             	setb   %al
 8051154:	38 c2                	cmp    %al,%dl
 8051156:	74 4a                	je     80511a2 <main+0x7c62>
 8051158:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805115c:	89 3c 24             	mov    %edi,(%esp)
 805115f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051163:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051167:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805116b:	b9 09 0b 00 00       	mov    $0xb09,%ecx
 8051170:	e8 e3 75 00 00       	call   8058758 <__afl_maybe_log>
 8051175:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051179:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805117d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051181:	8b 3c 24             	mov    (%esp),%edi
 8051184:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 287);
 8051188:	50                   	push   %eax
 8051189:	50                   	push   %eax
 805118a:	68 1f 01 00 00       	push   $0x11f
 805118f:	68 c8 70 06 08       	push   $0x80670c8
 8051194:	e8 27 4f 00 00       	call   80560c0 <report_label_coverage>
 8051199:	8b 35 04 b3 06 08    	mov    0x806b304,%esi
 805119f:	83 c4 10             	add    $0x10,%esp
 80511a2:	66 90                	xchg   %ax,%ax
}
// ROR Label 288
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
 80511a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80511a8:	89 3c 24             	mov    %edi,(%esp)
 80511ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80511af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80511b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80511b7:	b9 3a 10 00 00       	mov    $0x103a,%ecx
 80511bc:	e8 97 75 00 00       	call   8058758 <__afl_maybe_log>
 80511c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80511c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80511c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80511cd:	8b 3c 24             	mov    (%esp),%edi
 80511d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80511d4:	39 f7                	cmp    %esi,%edi
 80511d6:	0f 93 c3             	setae  %bl
 80511d9:	0f 92 c2             	setb   %dl
 80511dc:	38 d3                	cmp    %dl,%bl
 80511de:	74 44                	je     8051224 <main+0x7ce4>
 80511e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80511e4:	89 3c 24             	mov    %edi,(%esp)
 80511e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80511eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80511ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80511f3:	b9 61 c9 00 00       	mov    $0xc961,%ecx
 80511f8:	e8 5b 75 00 00       	call   8058758 <__afl_maybe_log>
 80511fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051201:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051205:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051209:	8b 3c 24             	mov    (%esp),%edi
 805120c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 288);
 8051210:	50                   	push   %eax
 8051211:	50                   	push   %eax
 8051212:	68 20 01 00 00       	push   $0x120
 8051217:	68 c8 70 06 08       	push   $0x80670c8
 805121c:	e8 9f 4e 00 00       	call   80560c0 <report_label_coverage>
 8051221:	83 c4 10             	add    $0x10,%esp
}

  return *s == '\0';
 8051224:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051228:	89 3c 24             	mov    %edi,(%esp)
 805122b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805122f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051233:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051237:	b9 7c 25 00 00       	mov    $0x257c,%ecx
 805123c:	e8 17 75 00 00       	call   8058758 <__afl_maybe_log>
 8051241:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051245:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051249:	8b 54 24 04          	mov    0x4(%esp),%edx
 805124d:	8b 3c 24             	mov    (%esp),%edi
 8051250:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051254:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 8051257:	80 3e 00             	cmpb   $0x0,(%esi)
 805125a:	0f 94 45 a0          	sete   -0x60(%ebp)
 805125e:	66 90                	xchg   %ax,%ax
if((((hex_digest)) || ((hex_digest))) != (((hex_digest)) && ((hex_digest))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 383);
}

// MCC Label 384
if(((hex_digest)) && ((hex_digest)) ) {asm volatile (""::: "memory");
 8051260:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051264:	89 3c 24             	mov    %edi,(%esp)
 8051267:	89 54 24 04          	mov    %edx,0x4(%esp)
 805126b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805126f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051273:	b9 77 58 00 00       	mov    $0x5877,%ecx
 8051278:	e8 db 74 00 00       	call   8058758 <__afl_maybe_log>
 805127d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051281:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051285:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051289:	8b 3c 24             	mov    (%esp),%edi
 805128c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051290:	8b 7d bc             	mov    -0x44(%ebp),%edi
 8051293:	85 ff                	test   %edi,%edi
 8051295:	0f 84 c2 17 00 00    	je     8052a5d <main+0x951d>
 805129b:	90                   	nop
 805129c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80512a0:	89 3c 24             	mov    %edi,(%esp)
 80512a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80512a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80512ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80512af:	b9 1c 3f 00 00       	mov    $0x3f1c,%ecx
 80512b4:	e8 9f 74 00 00       	call   8058758 <__afl_maybe_log>
 80512b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80512bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80512c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80512c5:	8b 3c 24             	mov    (%esp),%edi
 80512c8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 384);
 80512cc:	56                   	push   %esi
 80512cd:	56                   	push   %esi
 80512ce:	68 80 01 00 00       	push   $0x180
 80512d3:	68 de 70 06 08       	push   $0x80670de
 80512d8:	e8 e3 4d 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 386
if(!(((hex_digest))) && ((hex_digest)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 386);
}
// MCC Label 387
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
 80512dd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
 80512e0:	83 c4 10             	add    $0x10,%esp
 80512e3:	85 db                	test   %ebx,%ebx
 80512e5:	0f 84 72 17 00 00    	je     8052a5d <main+0x951d>
 80512eb:	90                   	nop
 80512ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80512f0:	89 3c 24             	mov    %edi,(%esp)
 80512f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80512f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80512fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80512ff:	b9 1b a0 00 00       	mov    $0xa01b,%ecx
 8051304:	e8 4f 74 00 00       	call   8058758 <__afl_maybe_log>
 8051309:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805130d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051311:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051315:	8b 3c 24             	mov    (%esp),%edi
 8051318:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 387);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_277 = 0;
                    lava_277 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_277 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
 805131c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051320:	89 3c 24             	mov    %edi,(%esp)
 8051323:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051327:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805132b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805132f:	b9 c3 87 00 00       	mov    $0x87c3,%ecx
 8051334:	e8 1f 74 00 00       	call   8058758 <__afl_maybe_log>
 8051339:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805133d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051341:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051345:	8b 3c 24             	mov    (%esp),%edi
 8051348:	8d 64 24 10          	lea    0x10(%esp),%esp
 805134c:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
                    lava_277 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 8051350:	0f b6 73 02          	movzbl 0x2(%ebx),%esi
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 387);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_277 = 0;
                    lava_277 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
 8051354:	0f b6 13             	movzbl (%ebx),%edx
                    lava_277 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_277 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
                    lava_277 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 8051357:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
	report_label_coverage("MCC", 387);
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_277 = 0;
                    lava_277 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_277 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
 805135b:	c1 e0 08             	shl    $0x8,%eax
                    lava_277 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 805135e:	c1 e6 10             	shl    $0x10,%esi
 8051361:	09 c6                	or     %eax,%esi
                    lava_277 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 8051363:	c1 e7 18             	shl    $0x18,%edi
}
if (((hex_digest)) && ((hex_digest))) {
                    int lava_277 = 0;
                    lava_277 |= ((unsigned char *)(hex_digest))[0] << (0 * 8);
                    lava_277 |= ((unsigned char *)(hex_digest))[1] << (1 * 8);
                    lava_277 |= ((unsigned char *)(hex_digest))[2] << (2 * 8);
 8051366:	09 d6                	or     %edx,%esi
                    lava_277 |= ((unsigned char *)(hex_digest))[3] << (3 * 8);
 8051368:	09 fe                	or     %edi,%esi
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 805136a:	89 35 94 b7 06 08    	mov    %esi,0x806b794
 8051370:	89 35 08 b8 06 08    	mov    %esi,0x806b808
 8051376:	66 90                	xchg   %ax,%ax
	report_label_coverage("ROR", 345);
}
if (line[line_length - 1] == '\n')
            line[--line_length] = '\x00';
        {
            int temp_2 = !(({
 8051378:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805137c:	89 3c 24             	mov    %edi,(%esp)
 805137f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051383:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051387:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805138b:	b9 3c 81 00 00       	mov    $0x813c,%ecx
 8051390:	e8 c3 73 00 00       	call   8058758 <__afl_maybe_log>
 8051395:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051399:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805139d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80513a1:	8b 3c 24             	mov    (%esp),%edi
 80513a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80513a8:	80 7d a0 00          	cmpb   $0x0,-0x60(%ebp)
 80513ac:	0f 84 3e d9 ff ff    	je     804ecf0 <main+0x57b0>
 80513b2:	66 90                	xchg   %ax,%ax
 80513b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80513b8:	89 3c 24             	mov    %edi,(%esp)
 80513bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80513bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80513c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80513c7:	b9 aa b9 00 00       	mov    $0xb9aa,%ecx
 80513cc:	e8 87 73 00 00       	call   8058758 <__afl_maybe_log>
 80513d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80513d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80513d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80513dd:	8b 3c 24             	mov    (%esp),%edi
 80513e0:	8d 64 24 10          	lea    0x10(%esp),%esp
if((((filename)) || ((filename))) != (((filename)) && ((filename))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 391);
}

// MCC Label 392
if(((filename)) && ((filename)) ) {asm volatile (""::: "memory");
 80513e4:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
                }
                ++n_improperly_formatted_lines;
            } else {
                static const char bin2hex[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
                _Bool ok;
                ++n_properly_formatted_lines;
 80513e7:	83 85 68 ff ff ff 01 	addl   $0x1,-0x98(%ebp)
 80513ee:	83 95 6c ff ff ff 00 	adcl   $0x0,-0x94(%ebp)
if((((filename)) || ((filename))) != (((filename)) && ((filename))))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 391);
}

// MCC Label 392
if(((filename)) && ((filename)) ) {asm volatile (""::: "memory");
 80513f5:	85 db                	test   %ebx,%ebx
 80513f7:	0f 84 6f 02 00 00    	je     805166c <main+0x812c>
 80513fd:	8d 76 00             	lea    0x0(%esi),%esi
 8051400:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051404:	89 3c 24             	mov    %edi,(%esp)
 8051407:	89 54 24 04          	mov    %edx,0x4(%esp)
 805140b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805140f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051413:	b9 48 01 00 00       	mov    $0x148,%ecx
 8051418:	e8 3b 73 00 00       	call   8058758 <__afl_maybe_log>
 805141d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051421:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051425:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051429:	8b 3c 24             	mov    (%esp),%edi
 805142c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 392);
 8051430:	83 ec 08             	sub    $0x8,%esp
 8051433:	68 88 01 00 00       	push   $0x188
 8051438:	68 de 70 06 08       	push   $0x80670de
 805143d:	e8 7e 4c 00 00       	call   80560c0 <report_label_coverage>
// MCC Label 394
if(!(((filename))) && ((filename)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 394);
}
// MCC Label 395
if(!(((filename))) && !(((filename))) ) {asm volatile (""::: "memory");
 8051442:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
 8051445:	83 c4 10             	add    $0x10,%esp
 8051448:	85 db                	test   %ebx,%ebx
 805144a:	0f 84 1c 02 00 00    	je     805166c <main+0x812c>
 8051450:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051454:	89 3c 24             	mov    %edi,(%esp)
 8051457:	89 54 24 04          	mov    %edx,0x4(%esp)
 805145b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805145f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051463:	b9 fe 4d 00 00       	mov    $0x4dfe,%ecx
 8051468:	e8 eb 72 00 00       	call   8058758 <__afl_maybe_log>
 805146d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051471:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051475:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051479:	8b 3c 24             	mov    (%esp),%edi
 805147c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 395);
}
if (((filename)) && ((filename))) {
                        int lava_289 = 0;
                        lava_289 |= ((unsigned char *)(filename))[0] << (0 * 8);
                        lava_289 |= ((unsigned char *)(filename))[1] << (1 * 8);
 8051480:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051484:	89 3c 24             	mov    %edi,(%esp)
 8051487:	89 54 24 04          	mov    %edx,0x4(%esp)
 805148b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805148f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051493:	b9 c2 5b 00 00       	mov    $0x5bc2,%ecx
 8051498:	e8 bb 72 00 00       	call   8058758 <__afl_maybe_log>
 805149d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80514a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80514a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80514a9:	8b 3c 24             	mov    (%esp),%edi
 80514ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80514b0:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
                        lava_289 |= ((unsigned char *)(filename))[2] << (2 * 8);
 80514b4:	0f b6 73 02          	movzbl 0x2(%ebx),%esi
if(!(((filename))) && !(((filename))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 395);
}
if (((filename)) && ((filename))) {
                        int lava_289 = 0;
                        lava_289 |= ((unsigned char *)(filename))[0] << (0 * 8);
 80514b8:	0f b6 13             	movzbl (%ebx),%edx
                        lava_289 |= ((unsigned char *)(filename))[1] << (1 * 8);
                        lava_289 |= ((unsigned char *)(filename))[2] << (2 * 8);
                        lava_289 |= ((unsigned char *)(filename))[3] << (3 * 8);
 80514bb:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
	report_label_coverage("MCC", 395);
}
if (((filename)) && ((filename))) {
                        int lava_289 = 0;
                        lava_289 |= ((unsigned char *)(filename))[0] << (0 * 8);
                        lava_289 |= ((unsigned char *)(filename))[1] << (1 * 8);
 80514bf:	c1 e0 08             	shl    $0x8,%eax
                        lava_289 |= ((unsigned char *)(filename))[2] << (2 * 8);
 80514c2:	c1 e6 10             	shl    $0x10,%esi
 80514c5:	09 c6                	or     %eax,%esi
                        lava_289 |= ((unsigned char *)(filename))[3] << (3 * 8);
 80514c7:	c1 e7 18             	shl    $0x18,%edi
}
if (((filename)) && ((filename))) {
                        int lava_289 = 0;
                        lava_289 |= ((unsigned char *)(filename))[0] << (0 * 8);
                        lava_289 |= ((unsigned char *)(filename))[1] << (1 * 8);
                        lava_289 |= ((unsigned char *)(filename))[2] << (2 * 8);
 80514ca:	09 d6                	or     %edx,%esi
                        lava_289 |= ((unsigned char *)(filename))[3] << (3 * 8);
 80514cc:	09 fe                	or     %edi,%esi
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 80514ce:	89 35 c4 b7 06 08    	mov    %esi,0x806b7c4
 80514d4:	89 35 0c b8 06 08    	mov    %esi,0x806b80c
 80514da:	66 90                	xchg   %ax,%ax
                        lava_307 |= ((unsigned char *)(filename))[1] << (1 * 8);
                        lava_307 |= ((unsigned char *)(filename))[2] << (2 * 8);
                        lava_307 |= ((unsigned char *)(filename))[3] << (3 * 8);
                        lava_set(307, lava_307);
                    }
                    _Bool kbcieiubweuhc521595368 = digest_file(filename + (lava_get(308)) * (1818326317 == (lava_get(308)) || 762667372 == (lava_get(308))), &binary, bin_buffer);
 80514dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80514e0:	89 3c 24             	mov    %edi,(%esp)
 80514e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80514e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80514eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80514ef:	b9 1d 2c 00 00       	mov    $0x2c1d,%ecx
 80514f4:	e8 5f 72 00 00       	call   8058758 <__afl_maybe_log>
 80514f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80514fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051501:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051505:	8b 3c 24             	mov    (%esp),%edi
 8051508:	8d 64 24 10          	lea    0x10(%esp),%esp
 805150c:	83 ec 0c             	sub    $0xc,%esp
 805150f:	68 34 01 00 00       	push   $0x134
 8051514:	e8 47 57 00 00       	call   8056c60 <lava_get>
 8051519:	c7 04 24 34 01 00 00 	movl   $0x134,(%esp)
 8051520:	89 c6                	mov    %eax,%esi
 8051522:	e8 39 57 00 00       	call   8056c60 <lava_get>
 8051527:	83 c4 10             	add    $0x10,%esp
 805152a:	3d 2d 75 61 6c       	cmp    $0x6c61752d,%eax
 805152f:	b9 01 00 00 00       	mov    $0x1,%ecx
 8051534:	74 4c                	je     8051582 <main+0x8042>
 8051536:	66 90                	xchg   %ax,%ax
 8051538:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805153c:	89 3c 24             	mov    %edi,(%esp)
 805153f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051543:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051547:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805154b:	b9 a1 cd 00 00       	mov    $0xcda1,%ecx
 8051550:	e8 03 72 00 00       	call   8058758 <__afl_maybe_log>
 8051555:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051559:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805155d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051561:	8b 3c 24             	mov    (%esp),%edi
 8051564:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051568:	83 ec 0c             	sub    $0xc,%esp
 805156b:	68 34 01 00 00       	push   $0x134
 8051570:	e8 eb 56 00 00       	call   8056c60 <lava_get>
 8051575:	31 c9                	xor    %ecx,%ecx
 8051577:	83 c4 10             	add    $0x10,%esp
 805157a:	3d 6c 61 75 2d       	cmp    $0x2d75616c,%eax
 805157f:	0f 94 c1             	sete   %cl
 8051582:	66 90                	xchg   %ax,%ax
 8051584:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051588:	89 3c 24             	mov    %edi,(%esp)
 805158b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805158f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051593:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051597:	b9 ff 6c 00 00       	mov    $0x6cff,%ecx
 805159c:	e8 b7 71 00 00       	call   8058758 <__afl_maybe_log>
 80515a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80515a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80515a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80515ad:	8b 3c 24             	mov    (%esp),%edi
 80515b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80515b4:	89 c8                	mov    %ecx,%eax
 80515b6:	8b 4d 98             	mov    -0x68(%ebp),%ecx
 80515b9:	8d 55 b8             	lea    -0x48(%ebp),%edx
 80515bc:	0f af c6             	imul   %esi,%eax
 80515bf:	01 d8                	add    %ebx,%eax
 80515c1:	e8 0a 5e 00 00       	call   80573d0 <digest_file>
                    kbcieiubweuhc521595368;
                });
                if (!ok) {
 80515c6:	84 c0                	test   %al,%al
 80515c8:	0f 85 4d 04 00 00    	jne    8051a1b <main+0x84db>
 80515ce:	66 90                	xchg   %ax,%ax
 80515d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80515d4:	89 3c 24             	mov    %edi,(%esp)
 80515d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80515db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80515df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80515e3:	b9 36 6b 00 00       	mov    $0x6b36,%ecx
 80515e8:	e8 6b 71 00 00       	call   8058758 <__afl_maybe_log>
 80515ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80515f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80515f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80515f9:	8b 3c 24             	mov    (%esp),%edi
 80515fc:	8d 64 24 10          	lea    0x10(%esp),%esp
                    ++n_open_or_read_failures;
 8051600:	83 85 48 ff ff ff 01 	addl   $0x1,-0xb8(%ebp)
 8051607:	83 95 4c ff ff ff 00 	adcl   $0x0,-0xb4(%ebp)
                    if (!status_only) {
 805160e:	80 3d 03 b3 06 08 00 	cmpb   $0x0,0x806b303
 8051615:	0f 85 5f d7 ff ff    	jne    804ed7a <main+0x583a>
 805161b:	90                   	nop
 805161c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051620:	89 3c 24             	mov    %edi,(%esp)
 8051623:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051627:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805162b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805162f:	b9 48 c0 00 00       	mov    $0xc048,%ecx
 8051634:	e8 1f 71 00 00       	call   8058758 <__afl_maybe_log>
 8051639:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805163d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051641:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051645:	8b 3c 24             	mov    (%esp),%edi
 8051648:	8d 64 24 10          	lea    0x10(%esp),%esp
                        
// ABS Label 396
if(filename < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 396);
}
printf(gettext("%s: FAILED open or read\n"), filename);
 805164c:	56                   	push   %esi
 805164d:	6a 05                	push   $0x5
 805164f:	68 ef 71 06 08       	push   $0x80671ef
 8051654:	6a 00                	push   $0x0
 8051656:	e8 75 7b ff ff       	call   80491d0 <dcgettext@plt>
 805165b:	5f                   	pop    %edi
 805165c:	5a                   	pop    %edx
 805165d:	53                   	push   %ebx
 805165e:	50                   	push   %eax
 805165f:	e8 cc 7a ff ff       	call   8049130 <printf@plt>
 8051664:	83 c4 10             	add    $0x10,%esp
 8051667:	e9 0e d7 ff ff       	jmp    804ed7a <main+0x583a>
if(!(((filename))) && ((filename)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 394);
}
// MCC Label 395
if(!(((filename))) && !(((filename))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 395);
 805166c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051670:	89 3c 24             	mov    %edi,(%esp)
 8051673:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051677:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805167b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805167f:	b9 1c 1c 00 00       	mov    $0x1c1c,%ecx
 8051684:	e8 cf 70 00 00       	call   8058758 <__afl_maybe_log>
 8051689:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805168d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051691:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051695:	8b 3c 24             	mov    (%esp),%edi
 8051698:	8d 64 24 10          	lea    0x10(%esp),%esp
 805169c:	51                   	push   %ecx
 805169d:	51                   	push   %ecx
 805169e:	68 8b 01 00 00       	push   $0x18b
 80516a3:	68 de 70 06 08       	push   $0x80670de
 80516a8:	e8 13 4a 00 00       	call   80560c0 <report_label_coverage>
}
if (((filename)) && ((filename))) {
 80516ad:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
 80516b0:	83 c4 10             	add    $0x10,%esp
 80516b3:	85 db                	test   %ebx,%ebx
 80516b5:	0f 85 c5 fd ff ff    	jne    8051480 <main+0x7f40>
 80516bb:	90                   	nop
 80516bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80516c0:	89 3c 24             	mov    %edi,(%esp)
 80516c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80516c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80516cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80516cf:	b9 17 5b 00 00       	mov    $0x5b17,%ecx
 80516d4:	e8 7f 70 00 00       	call   8058758 <__afl_maybe_log>
 80516d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80516dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80516e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80516e5:	8b 3c 24             	mov    (%esp),%edi
 80516e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80516ec:	e9 e9 fd ff ff       	jmp    80514da <main+0x7f9a>
 80516f1:	8d 76 00             	lea    0x0(%esi),%esi
if(!(((line))) && ((line)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 374);
}
// MCC Label 375
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 375);
 80516f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80516f8:	89 3c 24             	mov    %edi,(%esp)
 80516fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80516ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051703:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051707:	b9 e9 65 00 00       	mov    $0x65e9,%ecx
 805170c:	e8 47 70 00 00       	call   8058758 <__afl_maybe_log>
 8051711:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051715:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051719:	8b 54 24 04          	mov    0x4(%esp),%edx
 805171d:	8b 3c 24             	mov    (%esp),%edi
 8051720:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051724:	50                   	push   %eax
 8051725:	50                   	push   %eax
 8051726:	68 77 01 00 00       	push   $0x177
 805172b:	68 de 70 06 08       	push   $0x80670de
 8051730:	e8 8b 49 00 00       	call   80560c0 <report_label_coverage>
}
if (((line)) && ((line))) {
 8051735:	8b 7d ac             	mov    -0x54(%ebp),%edi
 8051738:	83 c4 10             	add    $0x10,%esp
 805173b:	85 ff                	test   %edi,%edi
 805173d:	0f 85 25 d4 ff ff    	jne    804eb68 <main+0x5628>
 8051743:	90                   	nop
 8051744:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051748:	89 3c 24             	mov    %edi,(%esp)
 805174b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805174f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051753:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051757:	b9 17 d0 00 00       	mov    $0xd017,%ecx
 805175c:	e8 f7 6f 00 00       	call   8058758 <__afl_maybe_log>
 8051761:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051765:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051769:	8b 54 24 04          	mov    0x4(%esp),%edx
 805176d:	8b 3c 24             	mov    (%esp),%edi
 8051770:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051774:	e9 55 d4 ff ff       	jmp    804ebce <main+0x568e>
 8051779:	8d 76 00             	lea    0x0(%esi),%esi
if(!(((hex_digest))) && ((hex_digest)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 368);
}
// MCC Label 369
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 369);
 805177c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051780:	89 3c 24             	mov    %edi,(%esp)
 8051783:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805178b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805178f:	b9 76 8e 00 00       	mov    $0x8e76,%ecx
 8051794:	e8 bf 6f 00 00       	call   8058758 <__afl_maybe_log>
 8051799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805179d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80517a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80517a5:	8b 3c 24             	mov    (%esp),%edi
 80517a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80517ac:	50                   	push   %eax
 80517ad:	50                   	push   %eax
 80517ae:	68 71 01 00 00       	push   $0x171
 80517b3:	68 de 70 06 08       	push   $0x80670de
 80517b8:	e8 03 49 00 00       	call   80560c0 <report_label_coverage>
}
if (((hex_digest)) && ((hex_digest))) {
 80517bd:	8b 75 bc             	mov    -0x44(%ebp),%esi
 80517c0:	83 c4 10             	add    $0x10,%esp
 80517c3:	85 f6                	test   %esi,%esi
 80517c5:	0f 85 7d d2 ff ff    	jne    804ea48 <main+0x5508>
 80517cb:	90                   	nop
 80517cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80517d0:	89 3c 24             	mov    %edi,(%esp)
 80517d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80517d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80517db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80517df:	b9 38 81 00 00       	mov    $0x8138,%ecx
 80517e4:	e8 6f 6f 00 00       	call   8058758 <__afl_maybe_log>
 80517e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80517ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80517f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80517f5:	8b 3c 24             	mov    (%esp),%edi
 80517f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80517fc:	e9 ab d2 ff ff       	jmp    804eaac <main+0x556c>
 8051801:	8d 76 00             	lea    0x0(%esi),%esi
if(!(((filename))) && ((filename)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 362);
}
// MCC Label 363
if(!(((filename))) && !(((filename))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 363);
 8051804:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051808:	89 3c 24             	mov    %edi,(%esp)
 805180b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805180f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051813:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051817:	b9 69 b3 00 00       	mov    $0xb369,%ecx
 805181c:	e8 37 6f 00 00       	call   8058758 <__afl_maybe_log>
 8051821:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051825:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051829:	8b 54 24 04          	mov    0x4(%esp),%edx
 805182d:	8b 3c 24             	mov    (%esp),%edi
 8051830:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051834:	50                   	push   %eax
 8051835:	50                   	push   %eax
 8051836:	68 6b 01 00 00       	push   $0x16b
 805183b:	68 de 70 06 08       	push   $0x80670de
 8051840:	e8 7b 48 00 00       	call   80560c0 <report_label_coverage>
}
if (((filename)) && ((filename))) {
 8051845:	8b 55 b4             	mov    -0x4c(%ebp),%edx
 8051848:	83 c4 10             	add    $0x10,%esp
 805184b:	85 d2                	test   %edx,%edx
 805184d:	0f 85 e1 d0 ff ff    	jne    804e934 <main+0x53f4>
 8051853:	90                   	nop
 8051854:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051858:	89 3c 24             	mov    %edi,(%esp)
 805185b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805185f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051863:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051867:	b9 3b 48 00 00       	mov    $0x483b,%ecx
 805186c:	e8 e7 6e 00 00       	call   8058758 <__afl_maybe_log>
 8051871:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051875:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051879:	8b 54 24 04          	mov    0x4(%esp),%edx
 805187d:	8b 3c 24             	mov    (%esp),%edi
 8051880:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051884:	e9 03 d1 ff ff       	jmp    804e98c <main+0x544c>
 8051889:	8d 76 00             	lea    0x0(%esi),%esi
if(!(((line))) && ((line)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 356);
}
// MCC Label 357
if(!(((line))) && !(((line))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 357);
 805188c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051890:	89 3c 24             	mov    %edi,(%esp)
 8051893:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051897:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805189b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805189f:	b9 88 ec 00 00       	mov    $0xec88,%ecx
 80518a4:	e8 af 6e 00 00       	call   8058758 <__afl_maybe_log>
 80518a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80518ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80518b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80518b5:	8b 3c 24             	mov    (%esp),%edi
 80518b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80518bc:	50                   	push   %eax
 80518bd:	50                   	push   %eax
 80518be:	68 65 01 00 00       	push   $0x165
 80518c3:	68 de 70 06 08       	push   $0x80670de
 80518c8:	e8 f3 47 00 00       	call   80560c0 <report_label_coverage>
}
if (((line)) && ((line))) {
 80518cd:	8b 5d ac             	mov    -0x54(%ebp),%ebx
 80518d0:	83 c4 10             	add    $0x10,%esp
 80518d3:	85 db                	test   %ebx,%ebx
 80518d5:	0f 85 5d be ff ff    	jne    804d738 <main+0x41f8>
 80518db:	90                   	nop
 80518dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80518e0:	89 3c 24             	mov    %edi,(%esp)
 80518e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80518e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80518eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80518ef:	b9 12 6f 00 00       	mov    $0x6f12,%ecx
 80518f4:	e8 5f 6e 00 00       	call   8058758 <__afl_maybe_log>
 80518f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80518fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051901:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051905:	8b 3c 24             	mov    (%esp),%edi
 8051908:	8d 64 24 10          	lea    0x10(%esp),%esp
 805190c:	e9 87 be ff ff       	jmp    804d798 <main+0x4258>
 8051911:	8d 76 00             	lea    0x0(%esi),%esi
if(!(((hex_digest))) && ((hex_digest)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 350);
}
// MCC Label 351
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 351);
 8051914:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051918:	89 3c 24             	mov    %edi,(%esp)
 805191b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805191f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051923:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051927:	b9 89 05 00 00       	mov    $0x589,%ecx
 805192c:	e8 27 6e 00 00       	call   8058758 <__afl_maybe_log>
 8051931:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051935:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051939:	8b 54 24 04          	mov    0x4(%esp),%edx
 805193d:	8b 3c 24             	mov    (%esp),%edi
 8051940:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051944:	50                   	push   %eax
 8051945:	50                   	push   %eax
 8051946:	68 5f 01 00 00       	push   $0x15f
 805194b:	68 de 70 06 08       	push   $0x80670de
 8051950:	e8 6b 47 00 00       	call   80560c0 <report_label_coverage>
}
if (((hex_digest)) && ((hex_digest))) {
 8051955:	8b 7d bc             	mov    -0x44(%ebp),%edi
 8051958:	83 c4 10             	add    $0x10,%esp
 805195b:	85 ff                	test   %edi,%edi
 805195d:	0f 85 b1 bc ff ff    	jne    804d614 <main+0x40d4>
 8051963:	90                   	nop
 8051964:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051968:	89 3c 24             	mov    %edi,(%esp)
 805196b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805196f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051973:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051977:	b9 9d cd 00 00       	mov    $0xcd9d,%ecx
 805197c:	e8 d7 6d 00 00       	call   8058758 <__afl_maybe_log>
 8051981:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051985:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051989:	8b 54 24 04          	mov    0x4(%esp),%edx
 805198d:	8b 3c 24             	mov    (%esp),%edi
 8051990:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051994:	e9 e1 bc ff ff       	jmp    804d67a <main+0x413a>
 8051999:	8d 76 00             	lea    0x0(%esi),%esi
// ROR Label 345
if((line[line_length - 1] != '\n') != (line[line_length - 1] == '\n'))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 345);
}
if (line[line_length - 1] == '\n')
            line[--line_length] = '\x00';
 805199c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80519a0:	89 3c 24             	mov    %edi,(%esp)
 80519a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80519a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80519ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80519af:	b9 26 80 00 00       	mov    $0x8026,%ecx
 80519b4:	e8 9f 6d 00 00       	call   8058758 <__afl_maybe_log>
 80519b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80519bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80519c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80519c5:	8b 3c 24             	mov    (%esp),%edi
 80519c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80519cc:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 80519cf:	c6 44 1e ff 00       	movb   $0x0,-0x1(%esi,%ebx,1)
 80519d4:	89 fe                	mov    %edi,%esi
 80519d6:	e9 7d bb ff ff       	jmp    804d558 <main+0x4018>
 80519db:	90                   	nop
if((s[i] != '\\') != (s[i] == '\\'))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 252);
}
if (s[i] == '\\')
    {
      ++i;
 80519dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80519e0:	89 3c 24             	mov    %edi,(%esp)
 80519e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80519e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80519eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80519ef:	b9 d5 ab 00 00       	mov    $0xabd5,%ecx
 80519f4:	e8 5f 6d 00 00       	call   8058758 <__afl_maybe_log>
 80519f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80519fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051a01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051a05:	8b 3c 24             	mov    (%esp),%edi
 8051a08:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051a0c:	83 c3 01             	add    $0x1,%ebx
      escaped_filename = true;
 8051a0f:	c6 85 7d ff ff ff 01 	movb   $0x1,-0x83(%ebp)
 8051a16:	e9 a1 c7 ff ff       	jmp    804e1bc <main+0x4c7c>
 8051a1b:	90                   	nop
if(digest_hex_bytes < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 397);
}

// AOR Label 398
if(digest_hex_bytes - 2 != digest_hex_bytes / 2)  {asm volatile (""::: "memory");
 8051a1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051a20:	89 3c 24             	mov    %edi,(%esp)
 8051a23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051a27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051a2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051a2f:	b9 d6 b7 00 00       	mov    $0xb7d6,%ecx
 8051a34:	e8 1f 6d 00 00       	call   8058758 <__afl_maybe_log>
 8051a39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051a3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051a41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051a45:	8b 3c 24             	mov    (%esp),%edi
 8051a48:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051a4c:	a1 04 b3 06 08       	mov    0x806b304,%eax
 8051a51:	8d 58 fe             	lea    -0x2(%eax),%ebx
 8051a54:	89 c2                	mov    %eax,%edx
 8051a56:	d1 ea                	shr    %edx
 8051a58:	39 d3                	cmp    %edx,%ebx
 8051a5a:	74 49                	je     8051aa5 <main+0x8565>
 8051a5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051a60:	89 3c 24             	mov    %edi,(%esp)
 8051a63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051a67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051a6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051a6f:	b9 f3 1f 00 00       	mov    $0x1ff3,%ecx
 8051a74:	e8 df 6c 00 00       	call   8058758 <__afl_maybe_log>
 8051a79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051a7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051a81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051a85:	8b 3c 24             	mov    (%esp),%edi
 8051a88:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 398);
 8051a8c:	51                   	push   %ecx
 8051a8d:	51                   	push   %ecx
 8051a8e:	68 8e 01 00 00       	push   $0x18e
 8051a93:	68 cc 70 06 08       	push   $0x80670cc
 8051a98:	e8 23 46 00 00       	call   80560c0 <report_label_coverage>
 8051a9d:	a1 04 b3 06 08       	mov    0x806b304,%eax
 8051aa2:	83 c4 10             	add    $0x10,%esp
 8051aa5:	8d 76 00             	lea    0x0(%esi),%esi
}
// AOR Label 399
if(digest_hex_bytes + 2 != digest_hex_bytes / 2)  {asm volatile (""::: "memory");
 8051aa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051aac:	89 3c 24             	mov    %edi,(%esp)
 8051aaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051ab3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ab7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051abb:	b9 e1 51 00 00       	mov    $0x51e1,%ecx
 8051ac0:	e8 93 6c 00 00       	call   8058758 <__afl_maybe_log>
 8051ac5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ac9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051acd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051ad1:	8b 3c 24             	mov    (%esp),%edi
 8051ad4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051ad8:	8d 78 02             	lea    0x2(%eax),%edi
 8051adb:	89 c6                	mov    %eax,%esi
 8051add:	d1 ee                	shr    %esi
 8051adf:	39 f7                	cmp    %esi,%edi
 8051ae1:	74 4a                	je     8051b2d <main+0x85ed>
 8051ae3:	90                   	nop
 8051ae4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051ae8:	89 3c 24             	mov    %edi,(%esp)
 8051aeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051aef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051af3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051af7:	b9 86 48 00 00       	mov    $0x4886,%ecx
 8051afc:	e8 57 6c 00 00       	call   8058758 <__afl_maybe_log>
 8051b01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051b05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051b09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051b0d:	8b 3c 24             	mov    (%esp),%edi
 8051b10:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 399);
 8051b14:	52                   	push   %edx
 8051b15:	52                   	push   %edx
 8051b16:	68 8f 01 00 00       	push   $0x18f
 8051b1b:	68 cc 70 06 08       	push   $0x80670cc
 8051b20:	e8 9b 45 00 00       	call   80560c0 <report_label_coverage>
 8051b25:	a1 04 b3 06 08       	mov    0x806b304,%eax
 8051b2a:	83 c4 10             	add    $0x10,%esp
 8051b2d:	8d 76 00             	lea    0x0(%esi),%esi
}
// AOR Label 400
if(digest_hex_bytes * 2 != digest_hex_bytes / 2)  {asm volatile (""::: "memory");
 8051b30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051b34:	89 3c 24             	mov    %edi,(%esp)
 8051b37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051b3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051b3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051b43:	b9 3e 15 00 00       	mov    $0x153e,%ecx
 8051b48:	e8 0b 6c 00 00       	call   8058758 <__afl_maybe_log>
 8051b4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051b51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051b55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051b59:	8b 3c 24             	mov    (%esp),%edi
 8051b5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051b60:	8d 0c 00             	lea    (%eax,%eax,1),%ecx
 8051b63:	89 c3                	mov    %eax,%ebx
 8051b65:	d1 eb                	shr    %ebx
 8051b67:	39 d9                	cmp    %ebx,%ecx
 8051b69:	74 4a                	je     8051bb5 <main+0x8675>
 8051b6b:	90                   	nop
 8051b6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051b70:	89 3c 24             	mov    %edi,(%esp)
 8051b73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051b77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051b7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051b7f:	b9 ce bd 00 00       	mov    $0xbdce,%ecx
 8051b84:	e8 cf 6b 00 00       	call   8058758 <__afl_maybe_log>
 8051b89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051b8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051b91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051b95:	8b 3c 24             	mov    (%esp),%edi
 8051b98:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 400);
 8051b9c:	50                   	push   %eax
 8051b9d:	50                   	push   %eax
 8051b9e:	68 90 01 00 00       	push   $0x190
 8051ba3:	68 cc 70 06 08       	push   $0x80670cc
 8051ba8:	e8 13 45 00 00       	call   80560c0 <report_label_coverage>
 8051bad:	a1 04 b3 06 08       	mov    0x806b304,%eax
 8051bb2:	83 c4 10             	add    $0x10,%esp
 8051bb5:	8d 76 00             	lea    0x0(%esi),%esi
if(digest_bin_bytes < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 402);
}

// ROR Label 403
if((cnt <= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
 8051bb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051bbc:	89 3c 24             	mov    %edi,(%esp)
 8051bbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051bc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051bc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051bcb:	b9 79 70 00 00       	mov    $0x7079,%ecx
 8051bd0:	e8 83 6b 00 00       	call   8058758 <__afl_maybe_log>
 8051bd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051bd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051bdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051be1:	8b 3c 24             	mov    (%esp),%edi
 8051be4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051be8:	d1 e8                	shr    %eax
 8051bea:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 8051bed:	0f 84 e7 12 00 00    	je     8052eda <main+0x999a>
 8051bf3:	90                   	nop
 8051bf4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051bf8:	89 3c 24             	mov    %edi,(%esp)
 8051bfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051bff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051c03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051c07:	b9 68 b3 00 00       	mov    $0xb368,%ecx
 8051c0c:	e8 47 6b 00 00       	call   8058758 <__afl_maybe_log>
 8051c11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051c15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051c19:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051c1d:	8b 3c 24             	mov    (%esp),%edi
 8051c20:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 403);
}
// ROR Label 404
if((cnt > digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 404);
 8051c24:	56                   	push   %esi
 8051c25:	56                   	push   %esi
 8051c26:	68 94 01 00 00       	push   $0x194
 8051c2b:	68 c8 70 06 08       	push   $0x80670c8
 8051c30:	e8 8b 44 00 00       	call   80560c0 <report_label_coverage>
 8051c35:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 405
if((cnt >= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 405);
 8051c38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051c3c:	89 3c 24             	mov    %edi,(%esp)
 8051c3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051c43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051c47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051c4b:	b9 e9 79 00 00       	mov    $0x79e9,%ecx
 8051c50:	e8 03 6b 00 00       	call   8058758 <__afl_maybe_log>
 8051c55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051c59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051c5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051c61:	8b 3c 24             	mov    (%esp),%edi
 8051c64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051c68:	53                   	push   %ebx
 8051c69:	53                   	push   %ebx
 8051c6a:	68 95 01 00 00       	push   $0x195
 8051c6f:	68 c8 70 06 08       	push   $0x80670c8
 8051c74:	e8 47 44 00 00       	call   80560c0 <report_label_coverage>
}
for (; cnt < digest_bin_bytes; ++cnt) {
 8051c79:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 8051c7c:	83 c4 10             	add    $0x10,%esp
 8051c7f:	85 f6                	test   %esi,%esi
 8051c81:	0f 84 04 0b 00 00    	je     805278b <main+0x924b>
 8051c87:	90                   	nop
 8051c88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051c8c:	89 3c 24             	mov    %edi,(%esp)
 8051c8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051c93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051c97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051c9b:	b9 94 d8 00 00       	mov    $0xd894,%ecx
 8051ca0:	e8 b3 6a 00 00       	call   8058758 <__afl_maybe_log>
 8051ca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ca9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051cad:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051cb1:	8b 3c 24             	mov    (%esp),%edi
 8051cb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051cb8:	e8 53 78 ff ff       	call   8049510 <__ctype_tolower_loc@plt>
 8051cbd:	89 c3                	mov    %eax,%ebx
 8051cbf:	89 45 a0             	mov    %eax,-0x60(%ebp)
 8051cc2:	8d 46 ff             	lea    -0x1(%esi),%eax
 8051cc5:	31 ff                	xor    %edi,%edi
 8051cc7:	83 e0 01             	and    $0x1,%eax
 8051cca:	89 45 9c             	mov    %eax,-0x64(%ebp)
                        
// MCC Label 411
if(1 && ( 1 ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 411);
 8051ccd:	51                   	push   %ecx
 8051cce:	51                   	push   %ecx
 8051ccf:	68 9b 01 00 00       	push   $0x19b
 8051cd4:	68 de 70 06 08       	push   $0x80670de
 8051cd9:	e8 e2 43 00 00       	call   80560c0 <report_label_coverage>
}
if (tolower(hex_digest[2 * cnt]) != bin2hex[bin_buffer[cnt] >> 4] || (tolower(hex_digest[2 * cnt + 1]) != (bin2hex[bin_buffer[cnt] & 15])))
 8051cde:	8b 55 98             	mov    -0x68(%ebp),%edx
 8051ce1:	8b 0b                	mov    (%ebx),%ecx
 8051ce3:	83 c4 10             	add    $0x10,%esp
 8051ce6:	8b 5d bc             	mov    -0x44(%ebp),%ebx
 8051ce9:	0f b6 02             	movzbl (%edx),%eax
 8051cec:	0f b6 33             	movzbl (%ebx),%esi
 8051cef:	89 c2                	mov    %eax,%edx
 8051cf1:	c0 ea 04             	shr    $0x4,%dl
 8051cf4:	0f b6 d2             	movzbl %dl,%edx
 8051cf7:	0f be 92 40 7b 06 08 	movsbl 0x8067b40(%edx),%edx
 8051cfe:	39 14 b1             	cmp    %edx,(%ecx,%esi,4)
 8051d01:	0f 85 f1 03 00 00    	jne    80520f8 <main+0x8bb8>
 8051d07:	90                   	nop
 8051d08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051d0c:	89 3c 24             	mov    %edi,(%esp)
 8051d0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051d13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051d17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051d1b:	b9 dd 91 00 00       	mov    $0x91dd,%ecx
 8051d20:	e8 33 6a 00 00       	call   8058758 <__afl_maybe_log>
 8051d25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051d29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051d2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051d31:	8b 3c 24             	mov    (%esp),%edi
 8051d34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051d38:	0f b6 5b 01          	movzbl 0x1(%ebx),%ebx
 8051d3c:	83 e0 0f             	and    $0xf,%eax
 8051d3f:	0f be 80 40 7b 06 08 	movsbl 0x8067b40(%eax),%eax
 8051d46:	39 04 99             	cmp    %eax,(%ecx,%ebx,4)
 8051d49:	0f 85 a9 03 00 00    	jne    80520f8 <main+0x8bb8>
 8051d4f:	90                   	nop
 8051d50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051d54:	89 3c 24             	mov    %edi,(%esp)
 8051d57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051d5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051d5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051d63:	b9 bc ae 00 00       	mov    $0xaebc,%ecx
 8051d68:	e8 eb 69 00 00       	call   8058758 <__afl_maybe_log>
 8051d6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051d71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051d75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051d79:	8b 3c 24             	mov    (%esp),%edi
 8051d7c:	8d 64 24 10          	lea    0x10(%esp),%esp
}
// ROR Label 405
if((cnt >= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 405);
}
for (; cnt < digest_bin_bytes; ++cnt) {
 8051d80:	bf 01 00 00 00       	mov    $0x1,%edi
 8051d85:	3b 7d a4             	cmp    -0x5c(%ebp),%edi
 8051d88:	0f 84 30 0a 00 00    	je     80527be <main+0x927e>
 8051d8e:	66 90                	xchg   %ax,%ax
 8051d90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051d94:	89 3c 24             	mov    %edi,(%esp)
 8051d97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051d9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051d9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051da3:	b9 d5 e2 00 00       	mov    $0xe2d5,%ecx
 8051da8:	e8 ab 69 00 00       	call   8058758 <__afl_maybe_log>
 8051dad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051db1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051db5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051db9:	8b 3c 24             	mov    (%esp),%edi
 8051dbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051dc0:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
 8051dc4:	0f 84 86 02 00 00    	je     8052050 <main+0x8b10>
 8051dca:	66 90                	xchg   %ax,%ax
 8051dcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051dd0:	89 3c 24             	mov    %edi,(%esp)
 8051dd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051dd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ddb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051ddf:	b9 91 6a 00 00       	mov    $0x6a91,%ecx
 8051de4:	e8 6f 69 00 00       	call   8058758 <__afl_maybe_log>
 8051de9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ded:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051df1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051df5:	8b 3c 24             	mov    (%esp),%edi
 8051df8:	8d 64 24 10          	lea    0x10(%esp),%esp
                        
// MCC Label 411
if(1 && ( 1 ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 411);
 8051dfc:	50                   	push   %eax
 8051dfd:	50                   	push   %eax
 8051dfe:	68 9b 01 00 00       	push   $0x19b
 8051e03:	68 de 70 06 08       	push   $0x80670de
 8051e08:	e8 b3 42 00 00       	call   80560c0 <report_label_coverage>
}
if (tolower(hex_digest[2 * cnt]) != bin2hex[bin_buffer[cnt] >> 4] || (tolower(hex_digest[2 * cnt + 1]) != (bin2hex[bin_buffer[cnt] & 15])))
 8051e0d:	8b 75 98             	mov    -0x68(%ebp),%esi
 8051e10:	8b 5d bc             	mov    -0x44(%ebp),%ebx
 8051e13:	83 c4 10             	add    $0x10,%esp
 8051e16:	8b 4d a0             	mov    -0x60(%ebp),%ecx
 8051e19:	0f b6 46 01          	movzbl 0x1(%esi),%eax
 8051e1d:	0f b6 73 02          	movzbl 0x2(%ebx),%esi
 8051e21:	8b 09                	mov    (%ecx),%ecx
 8051e23:	89 c2                	mov    %eax,%edx
 8051e25:	c0 ea 04             	shr    $0x4,%dl
 8051e28:	0f b6 d2             	movzbl %dl,%edx
 8051e2b:	0f be 92 40 7b 06 08 	movsbl 0x8067b40(%edx),%edx
 8051e32:	39 14 b1             	cmp    %edx,(%ecx,%esi,4)
 8051e35:	0f 85 bd 02 00 00    	jne    80520f8 <main+0x8bb8>
 8051e3b:	90                   	nop
 8051e3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051e40:	89 3c 24             	mov    %edi,(%esp)
 8051e43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051e47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051e4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051e4f:	b9 f5 b6 00 00       	mov    $0xb6f5,%ecx
 8051e54:	e8 ff 68 00 00       	call   8058758 <__afl_maybe_log>
 8051e59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051e5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051e61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051e65:	8b 3c 24             	mov    (%esp),%edi
 8051e68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051e6c:	0f b6 5b 03          	movzbl 0x3(%ebx),%ebx
 8051e70:	83 e0 0f             	and    $0xf,%eax
 8051e73:	0f be 80 40 7b 06 08 	movsbl 0x8067b40(%eax),%eax
 8051e7a:	39 04 99             	cmp    %eax,(%ecx,%ebx,4)
 8051e7d:	0f 85 75 02 00 00    	jne    80520f8 <main+0x8bb8>
 8051e83:	90                   	nop
 8051e84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051e88:	89 3c 24             	mov    %edi,(%esp)
 8051e8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051e8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051e93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051e97:	b9 57 4e 00 00       	mov    $0x4e57,%ecx
 8051e9c:	e8 b7 68 00 00       	call   8058758 <__afl_maybe_log>
 8051ea1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ea5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051ea9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051ead:	8b 3c 24             	mov    (%esp),%edi
 8051eb0:	8d 64 24 10          	lea    0x10(%esp),%esp
}
// ROR Label 405
if((cnt >= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 405);
}
for (; cnt < digest_bin_bytes; ++cnt) {
 8051eb4:	66 bf 02 00          	mov    $0x2,%di
 8051eb8:	3b 7d a4             	cmp    -0x5c(%ebp),%edi
 8051ebb:	0f 85 8f 01 00 00    	jne    8052050 <main+0x8b10>
 8051ec1:	8d 76 00             	lea    0x0(%esi),%esi
 8051ec4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051ec8:	89 3c 24             	mov    %edi,(%esp)
 8051ecb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051ecf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ed3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051ed7:	b9 83 82 00 00       	mov    $0x8283,%ecx
 8051edc:	e8 77 68 00 00       	call   8058758 <__afl_maybe_log>
 8051ee1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ee5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051ee9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051eed:	8b 3c 24             	mov    (%esp),%edi
 8051ef0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051ef4:	e9 c5 08 00 00       	jmp    80527be <main+0x927e>
 8051ef9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
                        
// MCC Label 411
if(1 && ( 1 ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 411);
}
if (tolower(hex_digest[2 * cnt]) != bin2hex[bin_buffer[cnt] >> 4] || (tolower(hex_digest[2 * cnt + 1]) != (bin2hex[bin_buffer[cnt] & 15])))
 8051f00:	8b 75 9c             	mov    -0x64(%ebp),%esi
 8051f03:	83 e0 0f             	and    $0xf,%eax
 8051f06:	0f be 80 40 7b 06 08 	movsbl 0x8067b40(%eax),%eax
 8051f0d:	0f b6 5c 33 01       	movzbl 0x1(%ebx,%esi,1),%ebx
 8051f12:	39 04 99             	cmp    %eax,(%ecx,%ebx,4)
 8051f15:	0f 85 dd 01 00 00    	jne    80520f8 <main+0x8bb8>
 8051f1b:	90                   	nop
 8051f1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051f20:	89 3c 24             	mov    %edi,(%esp)
 8051f23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051f27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051f2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051f2f:	b9 65 d4 00 00       	mov    $0xd465,%ecx
 8051f34:	e8 1f 68 00 00       	call   8058758 <__afl_maybe_log>
 8051f39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051f3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051f41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051f45:	8b 3c 24             	mov    (%esp),%edi
 8051f48:	8d 64 24 10          	lea    0x10(%esp),%esp
}
// ROR Label 405
if((cnt >= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 405);
}
for (; cnt < digest_bin_bytes; ++cnt) {
 8051f4c:	83 c7 01             	add    $0x1,%edi
                        
// MCC Label 411
if(1 && ( 1 ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 411);
 8051f4f:	83 ec 08             	sub    $0x8,%esp
 8051f52:	68 9b 01 00 00       	push   $0x19b
 8051f57:	68 de 70 06 08       	push   $0x80670de
 8051f5c:	e8 5f 41 00 00       	call   80560c0 <report_label_coverage>
}
if (tolower(hex_digest[2 * cnt]) != bin2hex[bin_buffer[cnt] >> 4] || (tolower(hex_digest[2 * cnt + 1]) != (bin2hex[bin_buffer[cnt] & 15])))
 8051f61:	8b 75 98             	mov    -0x68(%ebp),%esi
 8051f64:	8b 5d bc             	mov    -0x44(%ebp),%ebx
 8051f67:	8d 14 3f             	lea    (%edi,%edi,1),%edx
 8051f6a:	8b 4d a0             	mov    -0x60(%ebp),%ecx
 8051f6d:	83 c4 10             	add    $0x10,%esp
 8051f70:	89 55 9c             	mov    %edx,-0x64(%ebp)
 8051f73:	0f b6 04 3e          	movzbl (%esi,%edi,1),%eax
 8051f77:	0f b6 34 7b          	movzbl (%ebx,%edi,2),%esi
 8051f7b:	8b 09                	mov    (%ecx),%ecx
 8051f7d:	89 c2                	mov    %eax,%edx
 8051f7f:	c0 ea 04             	shr    $0x4,%dl
 8051f82:	0f b6 d2             	movzbl %dl,%edx
 8051f85:	0f be 92 40 7b 06 08 	movsbl 0x8067b40(%edx),%edx
 8051f8c:	39 14 b1             	cmp    %edx,(%ecx,%esi,4)
 8051f8f:	0f 85 63 01 00 00    	jne    80520f8 <main+0x8bb8>
 8051f95:	8d 76 00             	lea    0x0(%esi),%esi
 8051f98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051f9c:	89 3c 24             	mov    %edi,(%esp)
 8051f9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051fa3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051fa7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051fab:	b9 44 8b 00 00       	mov    $0x8b44,%ecx
 8051fb0:	e8 a3 67 00 00       	call   8058758 <__afl_maybe_log>
 8051fb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051fb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051fbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051fc1:	8b 3c 24             	mov    (%esp),%edi
 8051fc4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051fc8:	8b 75 9c             	mov    -0x64(%ebp),%esi
 8051fcb:	83 e0 0f             	and    $0xf,%eax
 8051fce:	0f be 80 40 7b 06 08 	movsbl 0x8067b40(%eax),%eax
 8051fd5:	0f b6 5c 33 01       	movzbl 0x1(%ebx,%esi,1),%ebx
 8051fda:	39 04 99             	cmp    %eax,(%ecx,%ebx,4)
 8051fdd:	0f 85 15 01 00 00    	jne    80520f8 <main+0x8bb8>
 8051fe3:	90                   	nop
 8051fe4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051fe8:	89 3c 24             	mov    %edi,(%esp)
 8051feb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051fef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ff3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051ff7:	b9 93 fe 00 00       	mov    $0xfe93,%ecx
 8051ffc:	e8 57 67 00 00       	call   8058758 <__afl_maybe_log>
 8052001:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052005:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052009:	8b 54 24 04          	mov    0x4(%esp),%edx
 805200d:	8b 3c 24             	mov    (%esp),%edi
 8052010:	8d 64 24 10          	lea    0x10(%esp),%esp
}
// ROR Label 405
if((cnt >= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 405);
}
for (; cnt < digest_bin_bytes; ++cnt) {
 8052014:	83 c7 01             	add    $0x1,%edi
 8052017:	3b 7d a4             	cmp    -0x5c(%ebp),%edi
 805201a:	0f 84 9e 07 00 00    	je     80527be <main+0x927e>
 8052020:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052024:	89 3c 24             	mov    %edi,(%esp)
 8052027:	89 54 24 04          	mov    %edx,0x4(%esp)
 805202b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805202f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052033:	b9 fe 49 00 00       	mov    $0x49fe,%ecx
 8052038:	e8 1b 67 00 00       	call   8058758 <__afl_maybe_log>
 805203d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052041:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052045:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052049:	8b 3c 24             	mov    (%esp),%edi
 805204c:	8d 64 24 10          	lea    0x10(%esp),%esp
                        
// MCC Label 411
if(1 && ( 1 ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 411);
 8052050:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052054:	89 3c 24             	mov    %edi,(%esp)
 8052057:	89 54 24 04          	mov    %edx,0x4(%esp)
 805205b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805205f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052063:	b9 5b 14 00 00       	mov    $0x145b,%ecx
 8052068:	e8 eb 66 00 00       	call   8058758 <__afl_maybe_log>
 805206d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052071:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052075:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052079:	8b 3c 24             	mov    (%esp),%edi
 805207c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052080:	83 ec 08             	sub    $0x8,%esp
 8052083:	8d 34 3f             	lea    (%edi,%edi,1),%esi
 8052086:	68 9b 01 00 00       	push   $0x19b
 805208b:	68 de 70 06 08       	push   $0x80670de
 8052090:	e8 2b 40 00 00       	call   80560c0 <report_label_coverage>
}
if (tolower(hex_digest[2 * cnt]) != bin2hex[bin_buffer[cnt] >> 4] || (tolower(hex_digest[2 * cnt + 1]) != (bin2hex[bin_buffer[cnt] & 15])))
 8052095:	8b 55 98             	mov    -0x68(%ebp),%edx
 8052098:	8b 5d bc             	mov    -0x44(%ebp),%ebx
 805209b:	83 c4 10             	add    $0x10,%esp
 805209e:	8b 4d a0             	mov    -0x60(%ebp),%ecx
 80520a1:	89 75 9c             	mov    %esi,-0x64(%ebp)
 80520a4:	0f b6 04 3a          	movzbl (%edx,%edi,1),%eax
 80520a8:	0f b6 34 7b          	movzbl (%ebx,%edi,2),%esi
 80520ac:	8b 09                	mov    (%ecx),%ecx
 80520ae:	89 c2                	mov    %eax,%edx
 80520b0:	c0 ea 04             	shr    $0x4,%dl
 80520b3:	0f b6 d2             	movzbl %dl,%edx
 80520b6:	0f be 92 40 7b 06 08 	movsbl 0x8067b40(%edx),%edx
 80520bd:	39 14 b1             	cmp    %edx,(%ecx,%esi,4)
 80520c0:	0f 84 3a fe ff ff    	je     8051f00 <main+0x89c0>
 80520c6:	66 90                	xchg   %ax,%ax
 80520c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80520cc:	89 3c 24             	mov    %edi,(%esp)
 80520cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80520d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80520d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80520db:	b9 b0 55 00 00       	mov    $0x55b0,%ecx
 80520e0:	e8 73 66 00 00       	call   8058758 <__afl_maybe_log>
 80520e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80520e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80520ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80520f1:	8b 3c 24             	mov    (%esp),%edi
 80520f4:	8d 64 24 10          	lea    0x10(%esp),%esp
if(digest_bin_bytes < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 407);
}

// ROR Label 408
if((cnt <= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
 80520f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80520fc:	89 3c 24             	mov    %edi,(%esp)
 80520ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052103:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052107:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805210b:	b9 ee 02 00 00       	mov    $0x2ee,%ecx
 8052110:	e8 43 66 00 00       	call   8058758 <__afl_maybe_log>
 8052115:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052119:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805211d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052121:	8b 3c 24             	mov    (%esp),%edi
 8052124:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052128:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
 805212b:	39 f9                	cmp    %edi,%ecx
 805212d:	0f 97 c3             	seta   %bl
 8052130:	0f 93 c2             	setae  %dl
 8052133:	38 da                	cmp    %bl,%dl
 8052135:	0f 85 bb 06 00 00    	jne    80527f6 <main+0x92b6>
 805213b:	90                   	nop
 805213c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052140:	89 3c 24             	mov    %edi,(%esp)
 8052143:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052147:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805214b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805214f:	b9 d2 10 00 00       	mov    $0x10d2,%ecx
 8052154:	e8 ff 65 00 00       	call   8058758 <__afl_maybe_log>
 8052159:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805215d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052161:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052165:	8b 3c 24             	mov    (%esp),%edi
 8052168:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 408);
}
// ROR Label 409
if((cnt > digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
 805216c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052170:	89 3c 24             	mov    %edi,(%esp)
 8052173:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052177:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805217b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805217f:	b9 31 e3 00 00       	mov    $0xe331,%ecx
 8052184:	e8 cf 65 00 00       	call   8058758 <__afl_maybe_log>
 8052189:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805218d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052191:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052195:	8b 3c 24             	mov    (%esp),%edi
 8052198:	8d 64 24 10          	lea    0x10(%esp),%esp
 805219c:	39 7d a4             	cmp    %edi,-0x5c(%ebp)
 805219f:	0f 92 c0             	setb   %al
 80521a2:	38 c3                	cmp    %al,%bl
 80521a4:	74 46                	je     80521ec <main+0x8cac>
 80521a6:	66 90                	xchg   %ax,%ax
 80521a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80521ac:	89 3c 24             	mov    %edi,(%esp)
 80521af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80521b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80521b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80521bb:	b9 1c 18 00 00       	mov    $0x181c,%ecx
 80521c0:	e8 93 65 00 00       	call   8058758 <__afl_maybe_log>
 80521c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80521c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80521cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80521d1:	8b 3c 24             	mov    (%esp),%edi
 80521d4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 409);
 80521d8:	50                   	push   %eax
 80521d9:	50                   	push   %eax
 80521da:	68 99 01 00 00       	push   $0x199
 80521df:	68 c8 70 06 08       	push   $0x80670c8
 80521e4:	e8 d7 3e 00 00       	call   80560c0 <report_label_coverage>
 80521e9:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 410
if((cnt >= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
 80521ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80521f0:	89 3c 24             	mov    %edi,(%esp)
 80521f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80521f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80521fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80521ff:	b9 4d 3b 00 00       	mov    $0x3b4d,%ecx
 8052204:	e8 4f 65 00 00       	call   8058758 <__afl_maybe_log>
 8052209:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805220d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052211:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052215:	8b 3c 24             	mov    (%esp),%edi
 8052218:	8d 64 24 10          	lea    0x10(%esp),%esp
 805221c:	39 7d a4             	cmp    %edi,-0x5c(%ebp)
 805221f:	0f 96 c1             	setbe  %cl
 8052222:	38 cb                	cmp    %cl,%bl
 8052224:	74 46                	je     805226c <main+0x8d2c>
 8052226:	66 90                	xchg   %ax,%ax
 8052228:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805222c:	89 3c 24             	mov    %edi,(%esp)
 805222f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052233:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052237:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805223b:	b9 2a e5 00 00       	mov    $0xe52a,%ecx
 8052240:	e8 13 65 00 00       	call   8058758 <__afl_maybe_log>
 8052245:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052249:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805224d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052251:	8b 3c 24             	mov    (%esp),%edi
 8052254:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 410);
 8052258:	50                   	push   %eax
 8052259:	50                   	push   %eax
 805225a:	68 9a 01 00 00       	push   $0x19a
 805225f:	68 c8 70 06 08       	push   $0x80670c8
 8052264:	e8 57 3e 00 00       	call   80560c0 <report_label_coverage>
 8052269:	83 c4 10             	add    $0x10,%esp
if(digest_bin_bytes < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 413);
}

// ROR Label 414
if((cnt == digest_bin_bytes) != (cnt != digest_bin_bytes))  {asm volatile (""::: "memory");
 805226c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052270:	89 3c 24             	mov    %edi,(%esp)
 8052273:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052277:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805227b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805227f:	b9 6a 4b 00 00       	mov    $0x4b6a,%ecx
 8052284:	e8 cf 64 00 00       	call   8058758 <__afl_maybe_log>
 8052289:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805228d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052291:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052295:	8b 3c 24             	mov    (%esp),%edi
 8052298:	8d 64 24 10          	lea    0x10(%esp),%esp
 805229c:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 805229f:	39 fe                	cmp    %edi,%esi
 80522a1:	0f 94 c2             	sete   %dl
 80522a4:	0f 95 c3             	setne  %bl
 80522a7:	38 da                	cmp    %bl,%dl
 80522a9:	74 4c                	je     80522f7 <main+0x8db7>
 80522ab:	90                   	nop
 80522ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80522b0:	89 3c 24             	mov    %edi,(%esp)
 80522b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80522b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80522bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80522bf:	b9 a0 ec 00 00       	mov    $0xeca0,%ecx
 80522c4:	e8 8f 64 00 00       	call   8058758 <__afl_maybe_log>
 80522c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80522cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80522d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80522d5:	8b 3c 24             	mov    (%esp),%edi
 80522d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80522dc:	88 55 a4             	mov    %dl,-0x5c(%ebp)
	report_label_coverage("ROR", 414);
 80522df:	50                   	push   %eax
 80522e0:	50                   	push   %eax
 80522e1:	68 9e 01 00 00       	push   $0x19e
 80522e6:	68 c8 70 06 08       	push   $0x80670c8
 80522eb:	e8 d0 3d 00 00       	call   80560c0 <report_label_coverage>
 80522f0:	0f b6 55 a4          	movzbl -0x5c(%ebp),%edx
 80522f4:	83 c4 10             	add    $0x10,%esp
 80522f7:	90                   	nop
}
if (cnt != digest_bin_bytes)
 80522f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80522fc:	89 3c 24             	mov    %edi,(%esp)
 80522ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052303:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052307:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805230b:	b9 14 7e 00 00       	mov    $0x7e14,%ecx
 8052310:	e8 43 64 00 00       	call   8058758 <__afl_maybe_log>
 8052315:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052319:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805231d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052321:	8b 3c 24             	mov    (%esp),%edi
 8052324:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052328:	84 db                	test   %bl,%bl
 805232a:	74 3e                	je     805236a <main+0x8e2a>
 805232c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052330:	89 3c 24             	mov    %edi,(%esp)
 8052333:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052337:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805233b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805233f:	b9 f4 fc 00 00       	mov    $0xfcf4,%ecx
 8052344:	e8 0f 64 00 00       	call   8058758 <__afl_maybe_log>
 8052349:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805234d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052351:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052355:	8b 3c 24             	mov    (%esp),%edi
 8052358:	8d 64 24 10          	lea    0x10(%esp),%esp
                        ++n_mismatched_checksums;
 805235c:	83 85 40 ff ff ff 01 	addl   $0x1,-0xc0(%ebp)
 8052363:	83 95 44 ff ff ff 00 	adcl   $0x0,-0xbc(%ebp)
 805236a:	66 90                	xchg   %ax,%ax
                    if (!status_only) {
 805236c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052370:	89 3c 24             	mov    %edi,(%esp)
 8052373:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052377:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805237b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805237f:	b9 40 44 00 00       	mov    $0x4440,%ecx
 8052384:	e8 cf 63 00 00       	call   8058758 <__afl_maybe_log>
 8052389:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805238d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052391:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052395:	8b 3c 24             	mov    (%esp),%edi
 8052398:	8d 64 24 10          	lea    0x10(%esp),%esp
 805239c:	80 3d 03 b3 06 08 00 	cmpb   $0x0,0x806b303
 80523a3:	0f 85 d1 c9 ff ff    	jne    804ed7a <main+0x583a>
 80523a9:	8d 76 00             	lea    0x0(%esi),%esi
 80523ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80523b0:	89 3c 24             	mov    %edi,(%esp)
 80523b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80523b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80523bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80523bf:	b9 a8 de 00 00       	mov    $0xdea8,%ecx
 80523c4:	e8 8f 63 00 00       	call   8058758 <__afl_maybe_log>
 80523c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80523cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80523d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80523d5:	8b 3c 24             	mov    (%esp),%edi
 80523d8:	8d 64 24 10          	lea    0x10(%esp),%esp
if(digest_bin_bytes < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 416);
}

// ROR Label 417
if((cnt == digest_bin_bytes) != (cnt != digest_bin_bytes))  {asm volatile (""::: "memory");
 80523dc:	38 da                	cmp    %bl,%dl
 80523de:	74 44                	je     8052424 <main+0x8ee4>
 80523e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80523e4:	89 3c 24             	mov    %edi,(%esp)
 80523e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80523eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80523ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80523f3:	b9 1b 2c 00 00       	mov    $0x2c1b,%ecx
 80523f8:	e8 5b 63 00 00       	call   8058758 <__afl_maybe_log>
 80523fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052401:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052405:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052409:	8b 3c 24             	mov    (%esp),%edi
 805240c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 417);
 8052410:	57                   	push   %edi
 8052411:	57                   	push   %edi
 8052412:	68 a1 01 00 00       	push   $0x1a1
 8052417:	68 c8 70 06 08       	push   $0x80670c8
 805241c:	e8 9f 3c 00 00       	call   80560c0 <report_label_coverage>
 8052421:	83 c4 10             	add    $0x10,%esp
}
if (cnt != digest_bin_bytes)
 8052424:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052428:	89 3c 24             	mov    %edi,(%esp)
 805242b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805242f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052433:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052437:	b9 1c e5 00 00       	mov    $0xe51c,%ecx
 805243c:	e8 17 63 00 00       	call   8058758 <__afl_maybe_log>
 8052441:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052445:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052449:	8b 54 24 04          	mov    0x4(%esp),%edx
 805244d:	8b 3c 24             	mov    (%esp),%edi
 8052450:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052454:	84 db                	test   %bl,%bl
 8052456:	0f 84 c9 0a 00 00    	je     8052f25 <main+0x99e5>
 805245c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052460:	89 3c 24             	mov    %edi,(%esp)
 8052463:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052467:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805246b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805246f:	b9 ab b1 00 00       	mov    $0xb1ab,%ecx
 8052474:	e8 df 62 00 00       	call   8058758 <__afl_maybe_log>
 8052479:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805247d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052481:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052485:	8b 3c 24             	mov    (%esp),%edi
 8052488:	8d 64 24 10          	lea    0x10(%esp),%esp
                            printf("%s: %s\n", filename, gettext("FAILED"));
 805248c:	56                   	push   %esi
 805248d:	6a 05                	push   $0x5
 805248f:	68 08 72 06 08       	push   $0x8067208
                        else { if (!quiet)
                            printf("%s: %s\n", filename, gettext("OK"));}
 8052494:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052498:	89 3c 24             	mov    %edi,(%esp)
 805249b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805249f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80524a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80524a7:	b9 b4 78 00 00       	mov    $0x78b4,%ecx
 80524ac:	e8 a7 62 00 00       	call   8058758 <__afl_maybe_log>
 80524b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80524b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80524b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80524bd:	8b 3c 24             	mov    (%esp),%edi
 80524c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80524c4:	6a 00                	push   $0x0
 80524c6:	e8 05 6d ff ff       	call   80491d0 <dcgettext@plt>
 80524cb:	83 c4 0c             	add    $0xc,%esp
 80524ce:	50                   	push   %eax
 80524cf:	ff 75 b4             	pushl  -0x4c(%ebp)
 80524d2:	68 0f 72 06 08       	push   $0x806720f
 80524d7:	e8 54 6c ff ff       	call   8049130 <printf@plt>
 80524dc:	83 c4 10             	add    $0x10,%esp
 80524df:	e9 96 c8 ff ff       	jmp    804ed7a <main+0x583a>
            kbcieiubweuhc1540383426;
        });
        
// ABS Label 340
if(line_length < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 340);
 80524e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80524e8:	89 3c 24             	mov    %edi,(%esp)
 80524eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80524ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80524f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80524f7:	b9 20 8c 00 00       	mov    $0x8c20,%ecx
 80524fc:	e8 57 62 00 00       	call   8058758 <__afl_maybe_log>
 8052501:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052505:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052509:	8b 54 24 04          	mov    0x4(%esp),%edx
 805250d:	8b 3c 24             	mov    (%esp),%edi
 8052510:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052514:	50                   	push   %eax
 8052515:	50                   	push   %eax
 8052516:	68 54 01 00 00       	push   $0x154
 805251b:	68 d0 70 06 08       	push   $0x80670d0
 8052520:	e8 9b 3b 00 00       	call   80560c0 <report_label_coverage>
 8052525:	83 c4 10             	add    $0x10,%esp
}

// ROR Label 341
if((line_length < 0) != (line_length <= 0))  {asm volatile (""::: "memory");
 8052528:	c6 45 a0 01          	movb   $0x1,-0x60(%ebp)
 805252c:	e9 ab d7 ff ff       	jmp    804fcdc <main+0x679c>
 8052531:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 271
if(( s_len - i == 1 ) && ( !(s[i] != ' ') && !(s[i] != '*') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 271);
}
// MCC Label 272
if(( !(s_len - i == 1) ) && ( s[i] != ' ' && s[i] != '*' ) ) {asm volatile (""::: "memory");
 8052534:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052538:	89 3c 24             	mov    %edi,(%esp)
 805253b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805253f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052543:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052547:	b9 fa 1d 00 00       	mov    $0x1dfa,%ecx
 805254c:	e8 07 62 00 00       	call   8058758 <__afl_maybe_log>
 8052551:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052555:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052559:	8b 54 24 04          	mov    0x4(%esp),%edx
 805255d:	8b 3c 24             	mov    (%esp),%edi
 8052560:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052564:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 8052567:	8d 34 38             	lea    (%eax,%edi,1),%esi
 805256a:	e9 e1 d3 ff ff       	jmp    804f950 <main+0x6410>
 805256f:	90                   	nop
// ABS Label 389
if(warn < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 389);
}
if (warn) {
                    error(0, 0, gettext("%s: %lu: improperly formatted %s checksum line"), checkfile_name, line_number, DIGEST_TYPE_STRING);
 8052570:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052574:	89 3c 24             	mov    %edi,(%esp)
 8052577:	89 54 24 04          	mov    %edx,0x4(%esp)
 805257b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805257f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052583:	b9 fe e1 00 00       	mov    $0xe1fe,%ecx
 8052588:	e8 cb 61 00 00       	call   8058758 <__afl_maybe_log>
 805258d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052591:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052595:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052599:	8b 3c 24             	mov    (%esp),%edi
 805259c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80525a0:	53                   	push   %ebx
 80525a1:	6a 05                	push   $0x5
 80525a3:	68 9c 79 06 08       	push   $0x806799c
 80525a8:	6a 00                	push   $0x0
 80525aa:	e8 21 6c ff ff       	call   80491d0 <dcgettext@plt>
 80525af:	83 c4 0c             	add    $0xc,%esp
 80525b2:	68 eb 70 06 08       	push   $0x80670eb
 80525b7:	ff 75 8c             	pushl  -0x74(%ebp)
 80525ba:	ff 75 88             	pushl  -0x78(%ebp)
 80525bd:	ff 75 80             	pushl  -0x80(%ebp)
 80525c0:	50                   	push   %eax
 80525c1:	6a 00                	push   $0x0
 80525c3:	6a 00                	push   $0x0
 80525c5:	e8 c6 6c ff ff       	call   8049290 <error@plt>
 80525ca:	83 c4 20             	add    $0x20,%esp
 80525cd:	e9 6a c7 ff ff       	jmp    804ed3c <main+0x57fc>
 80525d2:	66 90                	xchg   %ax,%ax
	report_label_coverage("ABS", 281);
}

// ROR Label 282
if((i <= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 282);
 80525d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80525d8:	89 3c 24             	mov    %edi,(%esp)
 80525db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80525df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80525e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80525e7:	b9 ea e9 00 00       	mov    $0xe9ea,%ecx
 80525ec:	e8 67 61 00 00       	call   8058758 <__afl_maybe_log>
 80525f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80525f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80525f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80525fd:	8b 3c 24             	mov    (%esp),%edi
 8052600:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052604:	50                   	push   %eax
 8052605:	50                   	push   %eax
 8052606:	68 1a 01 00 00       	push   $0x11a
 805260b:	68 c8 70 06 08       	push   $0x80670c8
 8052610:	e8 ab 3a 00 00       	call   80560c0 <report_label_coverage>
}
// ROR Label 283
if((i > digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
 8052615:	83 c4 10             	add    $0x10,%esp
 8052618:	83 3d 04 b3 06 08 00 	cmpl   $0x0,0x806b304
 805261f:	0f 85 83 e1 ff ff    	jne    80507a8 <main+0x7268>
 8052625:	8d 76 00             	lea    0x0(%esi),%esi
 8052628:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805262c:	89 3c 24             	mov    %edi,(%esp)
 805262f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052633:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052637:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805263b:	b9 8b ca 00 00       	mov    $0xca8b,%ecx
 8052640:	e8 13 61 00 00       	call   8058758 <__afl_maybe_log>
 8052645:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052649:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805264d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052651:	8b 3c 24             	mov    (%esp),%edi
 8052654:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 283);
}
// ROR Label 284
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
 8052658:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805265c:	89 3c 24             	mov    %edi,(%esp)
 805265f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052663:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052667:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805266b:	b9 95 bb 00 00       	mov    $0xbb95,%ecx
 8052670:	e8 e3 60 00 00       	call   8058758 <__afl_maybe_log>
 8052675:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052679:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805267d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052681:	8b 3c 24             	mov    (%esp),%edi
 8052684:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052688:	50                   	push   %eax
 8052689:	50                   	push   %eax
 805268a:	68 1c 01 00 00       	push   $0x11c
 805268f:	68 c8 70 06 08       	push   $0x80670c8
 8052694:	e8 27 3a 00 00       	call   80560c0 <report_label_coverage>
 8052699:	83 c4 10             	add    $0x10,%esp
 805269c:	8b 35 04 b3 06 08    	mov    0x806b304,%esi
 80526a2:	e9 8d e1 ff ff       	jmp    8050834 <main+0x72f4>
 80526a7:	90                   	nop
 80526a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80526ac:	89 3c 24             	mov    %edi,(%esp)
 80526af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80526b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80526b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80526bb:	b9 a5 ca 00 00       	mov    $0xcaa5,%ecx
 80526c0:	e8 93 60 00 00       	call   8058758 <__afl_maybe_log>
 80526c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80526c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80526cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80526d1:	8b 3c 24             	mov    (%esp),%edi
 80526d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80526d8:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 80526db:	8d 7b 04             	lea    0x4(%ebx),%edi
// ROR Label 253
if((s[i + algo_name_len] != ' ') != (s[i + algo_name_len] == ' '))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 253);
}
if (s[i + algo_name_len] == ' ')
        ++i;
 80526de:	83 c3 01             	add    $0x1,%ebx
 80526e1:	8d 34 3e             	lea    (%esi,%edi,1),%esi
 80526e4:	0f b6 06             	movzbl (%esi),%eax
 80526e7:	e9 14 bc ff ff       	jmp    804e300 <main+0x4dc0>
if(( (s[i]) == ' ' && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 244);
}
// MCC Label 245
if(( (s[i]) == ' ' && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 245);
 80526ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80526f0:	89 3c 24             	mov    %edi,(%esp)
 80526f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80526f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80526fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80526ff:	b9 2b d0 00 00       	mov    $0xd02b,%ecx
 8052704:	e8 4f 60 00 00       	call   8058758 <__afl_maybe_log>
 8052709:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805270d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052711:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052715:	8b 3c 24             	mov    (%esp),%edi
 8052718:	8d 64 24 10          	lea    0x10(%esp),%esp
 805271c:	57                   	push   %edi
 805271d:	57                   	push   %edi
 805271e:	68 f5 00 00 00       	push   $0xf5
 8052723:	68 de 70 06 08       	push   $0x80670de
 8052728:	e8 93 39 00 00       	call   80560c0 <report_label_coverage>
 805272d:	8b 7d a4             	mov    -0x5c(%ebp),%edi
 8052730:	83 c4 10             	add    $0x10,%esp
 8052733:	0f b6 17             	movzbl (%edi),%edx
 8052736:	e9 4d b6 ff ff       	jmp    804dd88 <main+0x4848>
 805273b:	90                   	nop
}
// MCC Label 246
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 246);
 805273c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052740:	89 3c 24             	mov    %edi,(%esp)
 8052743:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052747:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805274b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805274f:	b9 20 03 00 00       	mov    $0x320,%ecx
 8052754:	e8 ff 5f 00 00       	call   8058758 <__afl_maybe_log>
 8052759:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805275d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052761:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052765:	8b 3c 24             	mov    (%esp),%edi
 8052768:	8d 64 24 10          	lea    0x10(%esp),%esp
 805276c:	56                   	push   %esi
 805276d:	56                   	push   %esi
 805276e:	68 f6 00 00 00       	push   $0xf6
 8052773:	68 de 70 06 08       	push   $0x80670de
 8052778:	e8 43 39 00 00       	call   80560c0 <report_label_coverage>
 805277d:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
 8052780:	83 c4 10             	add    $0x10,%esp
 8052783:	0f b6 13             	movzbl (%ebx),%edx
 8052786:	e9 69 b6 ff ff       	jmp    804ddf4 <main+0x48b4>
 805278b:	90                   	nop
}
// ROR Label 405
if((cnt >= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 405);
}
for (; cnt < digest_bin_bytes; ++cnt) {
 805278c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052790:	89 3c 24             	mov    %edi,(%esp)
 8052793:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052797:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805279b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805279f:	b9 32 9b 00 00       	mov    $0x9b32,%ecx
 80527a4:	e8 af 5f 00 00       	call   8058758 <__afl_maybe_log>
 80527a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80527ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80527b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80527b5:	8b 3c 24             	mov    (%esp),%edi
 80527b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80527bc:	31 ff                	xor    %edi,%edi
 80527be:	66 90                	xchg   %ax,%ax
if(digest_bin_bytes < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 407);
}

// ROR Label 408
if((cnt <= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
 80527c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80527c4:	89 3c 24             	mov    %edi,(%esp)
 80527c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80527cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80527cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80527d3:	b9 58 55 00 00       	mov    $0x5558,%ecx
 80527d8:	e8 7b 5f 00 00       	call   8058758 <__afl_maybe_log>
 80527dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80527e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80527e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80527e9:	8b 3c 24             	mov    (%esp),%edi
 80527ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80527f0:	39 7d a4             	cmp    %edi,-0x5c(%ebp)
 80527f3:	0f 97 c3             	seta   %bl
 80527f6:	66 90                	xchg   %ax,%ax
	report_label_coverage("ROR", 408);
 80527f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80527fc:	89 3c 24             	mov    %edi,(%esp)
 80527ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052803:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052807:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805280b:	b9 34 8a 00 00       	mov    $0x8a34,%ecx
 8052810:	e8 43 5f 00 00       	call   8058758 <__afl_maybe_log>
 8052815:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052819:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805281d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052821:	8b 3c 24             	mov    (%esp),%edi
 8052824:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052828:	50                   	push   %eax
 8052829:	50                   	push   %eax
 805282a:	68 98 01 00 00       	push   $0x198
 805282f:	68 c8 70 06 08       	push   $0x80670c8
 8052834:	e8 87 38 00 00       	call   80560c0 <report_label_coverage>
 8052839:	83 c4 10             	add    $0x10,%esp
 805283c:	e9 2b f9 ff ff       	jmp    805216c <main+0x8c2c>
 8052841:	8d 76 00             	lea    0x0(%esi),%esi
        return false;
      bsd_reversed = 1;
    }
  else { 
// ABS Label 278
if(bsd_reversed < 0)  {asm volatile (""::: "memory");
 8052844:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052848:	89 3c 24             	mov    %edi,(%esp)
 805284b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805284f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052853:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052857:	b9 81 a2 00 00       	mov    $0xa281,%ecx
 805285c:	e8 f7 5e 00 00       	call   8058758 <__afl_maybe_log>
 8052861:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052865:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052869:	8b 54 24 04          	mov    0x4(%esp),%edx
 805286d:	8b 3c 24             	mov    (%esp),%edi
 8052870:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052874:	83 3d 48 b2 06 08 00 	cmpl   $0x0,0x806b248
 805287b:	0f 88 2c 20 00 00    	js     80548ad <main+0xb36d>
 8052881:	8d 76 00             	lea    0x0(%esi),%esi
 8052884:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052888:	89 3c 24             	mov    %edi,(%esp)
 805288b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805288f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052893:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052897:	b9 e9 c1 00 00       	mov    $0xc1e9,%ecx
 805289c:	e8 b7 5e 00 00       	call   8058758 <__afl_maybe_log>
 80528a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80528a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80528a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80528ad:	8b 3c 24             	mov    (%esp),%edi
 80528b0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 278);
}

// ROR Label 279
if((bsd_reversed == 1) != (bsd_reversed != 1))  {asm volatile (""::: "memory");
 80528b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80528b8:	89 3c 24             	mov    %edi,(%esp)
 80528bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80528bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80528c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80528c7:	b9 1c aa 00 00       	mov    $0xaa1c,%ecx
 80528cc:	e8 87 5e 00 00       	call   8058758 <__afl_maybe_log>
 80528d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80528d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80528d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80528dd:	8b 3c 24             	mov    (%esp),%edi
 80528e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80528e4:	8b 15 48 b2 06 08    	mov    0x806b248,%edx
 80528ea:	83 ea 01             	sub    $0x1,%edx
 80528ed:	0f 94 c1             	sete   %cl
 80528f0:	0f 95 c0             	setne  %al
 80528f3:	38 c1                	cmp    %al,%cl
 80528f5:	74 45                	je     805293c <main+0x93fc>
 80528f7:	90                   	nop
 80528f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80528fc:	89 3c 24             	mov    %edi,(%esp)
 80528ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052903:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052907:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805290b:	b9 c6 08 00 00       	mov    $0x8c6,%ecx
 8052910:	e8 43 5e 00 00       	call   8058758 <__afl_maybe_log>
 8052915:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052919:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805291d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052921:	8b 3c 24             	mov    (%esp),%edi
 8052924:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 279);
 8052928:	52                   	push   %edx
 8052929:	52                   	push   %edx
 805292a:	68 17 01 00 00       	push   $0x117
 805292f:	68 c8 70 06 08       	push   $0x80670c8
 8052934:	e8 87 37 00 00       	call   80560c0 <report_label_coverage>
 8052939:	83 c4 10             	add    $0x10,%esp
}
if (bsd_reversed != 1)
 805293c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052940:	89 3c 24             	mov    %edi,(%esp)
 8052943:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052947:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805294b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805294f:	b9 24 c4 00 00       	mov    $0xc424,%ecx
 8052954:	e8 ff 5d 00 00       	call   8058758 <__afl_maybe_log>
 8052959:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805295d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052961:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052965:	8b 3c 24             	mov    (%esp),%edi
 8052968:	8d 64 24 10          	lea    0x10(%esp),%esp
 805296c:	83 3d 48 b2 06 08 01 	cmpl   $0x1,0x806b248
 8052973:	0f 84 c5 d2 ff ff    	je     804fc3e <main+0x66fe>
 8052979:	8d 76 00             	lea    0x0(%esi),%esi
 805297c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052980:	89 3c 24             	mov    %edi,(%esp)
 8052983:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052987:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805298b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805298f:	b9 8f a5 00 00       	mov    $0xa58f,%ecx
 8052994:	e8 bf 5d 00 00       	call   8058758 <__afl_maybe_log>
 8052999:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805299d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80529a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80529a5:	8b 3c 24             	mov    (%esp),%edi
 80529a8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      bsd_reversed = 0;
      *binary = (s[i++] == '*');
 80529ac:	8d 7b 02             	lea    0x2(%ebx),%edi
 80529af:	31 db                	xor    %ebx,%ebx
 80529b1:	80 3e 2a             	cmpb   $0x2a,(%esi)
 80529b4:	8b 55 a4             	mov    -0x5c(%ebp),%edx
 80529b7:	8b b5 64 ff ff ff    	mov    -0x9c(%ebp),%esi
if((bsd_reversed == 1) != (bsd_reversed != 1))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 279);
}
if (bsd_reversed != 1)
    {
      bsd_reversed = 0;
 80529bd:	c7 05 48 b2 06 08 00 	movl   $0x0,0x806b248
 80529c4:	00 00 00 
      *binary = (s[i++] == '*');
 80529c7:	0f 94 c3             	sete   %bl
 80529ca:	89 1e                	mov    %ebx,(%esi)
 80529cc:	8d 34 3a             	lea    (%edx,%edi,1),%esi
 80529cf:	e9 6a d2 ff ff       	jmp    804fc3e <main+0x66fe>
if(!(((hex_digest))) && ((hex_digest)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 380);
}
// MCC Label 381
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 381);
 80529d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80529d8:	89 3c 24             	mov    %edi,(%esp)
 80529db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80529df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80529e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80529e7:	b9 d6 5c 00 00       	mov    $0x5cd6,%ecx
 80529ec:	e8 67 5d 00 00       	call   8058758 <__afl_maybe_log>
 80529f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80529f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80529f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80529fd:	8b 3c 24             	mov    (%esp),%edi
 8052a00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052a04:	56                   	push   %esi
 8052a05:	56                   	push   %esi
 8052a06:	68 7d 01 00 00       	push   $0x17d
 8052a0b:	68 de 70 06 08       	push   $0x80670de
 8052a10:	e8 ab 36 00 00       	call   80560c0 <report_label_coverage>
}
if (((hex_digest)) && ((hex_digest))) {
 8052a15:	8b 75 bc             	mov    -0x44(%ebp),%esi
 8052a18:	83 c4 10             	add    $0x10,%esp
 8052a1b:	85 f6                	test   %esi,%esi
 8052a1d:	89 75 a4             	mov    %esi,-0x5c(%ebp)
 8052a20:	0f 85 aa d4 ff ff    	jne    804fed0 <main+0x6990>
 8052a26:	66 90                	xchg   %ax,%ax
 8052a28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052a2c:	89 3c 24             	mov    %edi,(%esp)
 8052a2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052a33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052a37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052a3b:	b9 6f c3 00 00       	mov    $0xc36f,%ecx
 8052a40:	e8 13 5d 00 00       	call   8058758 <__afl_maybe_log>
 8052a45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052a49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052a4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052a51:	8b 3c 24             	mov    (%esp),%edi
 8052a54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052a58:	e9 e2 d4 ff ff       	jmp    804ff3f <main+0x69ff>
 8052a5d:	8d 76 00             	lea    0x0(%esi),%esi
if(!(((hex_digest))) && ((hex_digest)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 386);
}
// MCC Label 387
if(!(((hex_digest))) && !(((hex_digest))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 387);
 8052a60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052a64:	89 3c 24             	mov    %edi,(%esp)
 8052a67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052a6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052a6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052a73:	b9 8e 5e 00 00       	mov    $0x5e8e,%ecx
 8052a78:	e8 db 5c 00 00       	call   8058758 <__afl_maybe_log>
 8052a7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052a81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052a85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052a89:	8b 3c 24             	mov    (%esp),%edi
 8052a8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052a90:	57                   	push   %edi
 8052a91:	57                   	push   %edi
 8052a92:	68 83 01 00 00       	push   $0x183
 8052a97:	68 de 70 06 08       	push   $0x80670de
 8052a9c:	e8 1f 36 00 00       	call   80560c0 <report_label_coverage>
}
if (((hex_digest)) && ((hex_digest))) {
 8052aa1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
 8052aa4:	83 c4 10             	add    $0x10,%esp
 8052aa7:	85 db                	test   %ebx,%ebx
 8052aa9:	0f 85 6d e8 ff ff    	jne    805131c <main+0x7ddc>
 8052aaf:	90                   	nop
 8052ab0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052ab4:	89 3c 24             	mov    %edi,(%esp)
 8052ab7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052abb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052abf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ac3:	b9 57 3d 00 00       	mov    $0x3d57,%ecx
 8052ac8:	e8 8b 5c 00 00       	call   8058758 <__afl_maybe_log>
 8052acd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052ad1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052ad5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052ad9:	8b 3c 24             	mov    (%esp),%edi
 8052adc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052ae0:	e9 91 e8 ff ff       	jmp    8051376 <main+0x7e36>
 8052ae5:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 510
if(!(!prefix_tag) && needs_escape ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 510);
}
// MCC Label 511
if(!(!prefix_tag) && !(needs_escape) ) {asm volatile (""::: "memory");
 8052ae8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052aec:	89 3c 24             	mov    %edi,(%esp)
 8052aef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052af3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052af7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052afb:	b9 39 27 00 00       	mov    $0x2739,%ecx
 8052b00:	e8 53 5c 00 00       	call   8058758 <__afl_maybe_log>
 8052b05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052b09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052b0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052b11:	8b 3c 24             	mov    (%esp),%edi
 8052b14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052b18:	3a 9d 7e ff ff ff    	cmp    -0x82(%ebp),%bl
 8052b1e:	0f 83 bd 8f ff ff    	jae    804bae1 <main+0x25a1>
 8052b24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052b28:	89 3c 24             	mov    %edi,(%esp)
 8052b2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052b2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052b33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052b37:	b9 ec 71 00 00       	mov    $0x71ec,%ecx
 8052b3c:	e8 17 5c 00 00       	call   8058758 <__afl_maybe_log>
 8052b41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052b45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052b49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052b4d:	8b 3c 24             	mov    (%esp),%edi
 8052b50:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 511);
 8052b54:	51                   	push   %ecx
 8052b55:	51                   	push   %ecx
 8052b56:	68 ff 01 00 00       	push   $0x1ff
 8052b5b:	68 de 70 06 08       	push   $0x80670de
 8052b60:	e8 5b 35 00 00       	call   80560c0 <report_label_coverage>
 8052b65:	83 c4 10             	add    $0x10,%esp
 8052b68:	e9 74 8f ff ff       	jmp    804bae1 <main+0x25a1>
 8052b6d:	8d 76 00             	lea    0x0(%esi),%esi
  s[i++] = '\0';

  /* If "bsd reversed" format detected.  */
  
// COR Label 267
if(((s_len - i == 1) && (s[i] != ' ' && s[i] != '*')) != ((s_len - i == 1) || (s[i] != ' ' && s[i] != '*')))  {asm volatile (""::: "memory");
 8052b70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052b74:	89 3c 24             	mov    %edi,(%esp)
 8052b77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052b7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052b7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052b83:	b9 a2 da 00 00       	mov    $0xdaa2,%ecx
 8052b88:	e8 cb 5b 00 00       	call   8058758 <__afl_maybe_log>
 8052b8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052b91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052b95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052b99:	8b 3c 24             	mov    (%esp),%edi
 8052b9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052ba0:	80 f9 2a             	cmp    $0x2a,%cl
 8052ba3:	0f 84 9b cc ff ff    	je     804f844 <main+0x6304>
 8052ba9:	8d 76 00             	lea    0x0(%esi),%esi
 8052bac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052bb0:	89 3c 24             	mov    %edi,(%esp)
 8052bb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052bb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052bbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052bbf:	b9 ba 71 00 00       	mov    $0x71ba,%ecx
 8052bc4:	e8 8f 5b 00 00       	call   8058758 <__afl_maybe_log>
 8052bc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052bcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052bd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052bd5:	8b 3c 24             	mov    (%esp),%edi
 8052bd8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052bdc:	80 f9 20             	cmp    $0x20,%cl
 8052bdf:	0f 84 5f cc ff ff    	je     804f844 <main+0x6304>
 8052be5:	8d 76 00             	lea    0x0(%esi),%esi
 8052be8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052bec:	89 3c 24             	mov    %edi,(%esp)
 8052bef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052bf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052bf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052bfb:	b9 f8 86 00 00       	mov    $0x86f8,%ecx
 8052c00:	e8 53 5b 00 00       	call   8058758 <__afl_maybe_log>
 8052c05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052c09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052c0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052c11:	8b 3c 24             	mov    (%esp),%edi
 8052c14:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 267);
}

// MCC Label 268
if(( s_len - i == 1 ) && ( s[i] != ' ' && s[i] != '*' ) ) {asm volatile (""::: "memory");
 8052c18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052c1c:	89 3c 24             	mov    %edi,(%esp)
 8052c1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052c23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052c27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052c2b:	b9 6d b1 00 00       	mov    $0xb16d,%ecx
 8052c30:	e8 23 5b 00 00       	call   8058758 <__afl_maybe_log>
 8052c35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052c39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052c3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052c41:	8b 3c 24             	mov    (%esp),%edi
 8052c44:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052c48:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 8052c4b:	01 fe                	add    %edi,%esi
 8052c4d:	0f b6 0e             	movzbl (%esi),%ecx
 8052c50:	80 f9 2a             	cmp    $0x2a,%cl
 8052c53:	74 7f                	je     8052cd4 <main+0x9794>
 8052c55:	8d 76 00             	lea    0x0(%esi),%esi
 8052c58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052c5c:	89 3c 24             	mov    %edi,(%esp)
 8052c5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052c63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052c67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052c6b:	b9 3e 6b 00 00       	mov    $0x6b3e,%ecx
 8052c70:	e8 e3 5a 00 00       	call   8058758 <__afl_maybe_log>
 8052c75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052c79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052c7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052c81:	8b 3c 24             	mov    (%esp),%edi
 8052c84:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052c88:	80 f9 20             	cmp    $0x20,%cl
 8052c8b:	74 47                	je     8052cd4 <main+0x9794>
 8052c8d:	8d 76 00             	lea    0x0(%esi),%esi
 8052c90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052c94:	89 3c 24             	mov    %edi,(%esp)
 8052c97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052c9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052c9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ca3:	b9 a6 7d 00 00       	mov    $0x7da6,%ecx
 8052ca8:	e8 ab 5a 00 00       	call   8058758 <__afl_maybe_log>
 8052cad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052cb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052cb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052cb9:	8b 3c 24             	mov    (%esp),%edi
 8052cbc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 268);
 8052cc0:	52                   	push   %edx
 8052cc1:	52                   	push   %edx
 8052cc2:	68 0c 01 00 00       	push   $0x10c
 8052cc7:	68 de 70 06 08       	push   $0x80670de
 8052ccc:	e8 ef 33 00 00       	call   80560c0 <report_label_coverage>
 8052cd1:	83 c4 10             	add    $0x10,%esp
}
// MCC Label 269
if(( s_len - i == 1 ) && ( s[i] != ' ' && !(s[i] != '*') ) ) {asm volatile (""::: "memory");
 8052cd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052cd8:	89 3c 24             	mov    %edi,(%esp)
 8052cdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052cdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052ce3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ce7:	b9 f4 ad 00 00       	mov    $0xadf4,%ecx
 8052cec:	e8 67 5a 00 00       	call   8058758 <__afl_maybe_log>
 8052cf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052cf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052cf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052cfd:	8b 3c 24             	mov    (%esp),%edi
 8052d00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052d04:	80 3e 2a             	cmpb   $0x2a,(%esi)
 8052d07:	0f 84 51 1f 00 00    	je     8054c5e <main+0xb71e>
 8052d0d:	8d 76 00             	lea    0x0(%esi),%esi
 8052d10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052d14:	89 3c 24             	mov    %edi,(%esp)
 8052d17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052d1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052d1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052d23:	b9 98 4b 00 00       	mov    $0x4b98,%ecx
 8052d28:	e8 2b 5a 00 00       	call   8058758 <__afl_maybe_log>
 8052d2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052d31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052d35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052d39:	8b 3c 24             	mov    (%esp),%edi
 8052d3c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 269);
}
// MCC Label 270
if(( s_len - i == 1 ) && ( !(s[i] != ' ') && s[i] != '*' ) ) {asm volatile (""::: "memory");
 8052d40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052d44:	89 3c 24             	mov    %edi,(%esp)
 8052d47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052d4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052d4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052d53:	b9 2d ad 00 00       	mov    $0xad2d,%ecx
 8052d58:	e8 fb 59 00 00       	call   8058758 <__afl_maybe_log>
 8052d5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052d61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052d65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052d69:	8b 3c 24             	mov    (%esp),%edi
 8052d6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052d70:	80 3e 20             	cmpb   $0x20,(%esi)
 8052d73:	0f 85 53 cd ff ff    	jne    804facc <main+0x658c>
 8052d79:	8d 76 00             	lea    0x0(%esi),%esi
 8052d7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052d80:	89 3c 24             	mov    %edi,(%esp)
 8052d83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052d87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052d8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052d8f:	b9 3c 18 00 00       	mov    $0x183c,%ecx
 8052d94:	e8 bf 59 00 00       	call   8058758 <__afl_maybe_log>
 8052d99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052d9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052da1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052da5:	8b 3c 24             	mov    (%esp),%edi
 8052da8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 270);
 8052dac:	50                   	push   %eax
 8052dad:	50                   	push   %eax
 8052dae:	68 0e 01 00 00       	push   $0x10e
 8052db3:	68 de 70 06 08       	push   $0x80670de
 8052db8:	e8 03 33 00 00       	call   80560c0 <report_label_coverage>
 8052dbd:	83 c4 10             	add    $0x10,%esp
 8052dc0:	e9 07 cd ff ff       	jmp    804facc <main+0x658c>
 8052dc5:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 284
if((i >= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
}
for (; i < digest_hex_bytes; i++)
 8052dc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052dcc:	89 3c 24             	mov    %edi,(%esp)
 8052dcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052dd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052dd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ddb:	b9 a0 80 00 00       	mov    $0x80a0,%ecx
 8052de0:	e8 73 59 00 00       	call   8058758 <__afl_maybe_log>
 8052de5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052de9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052ded:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052df1:	8b 3c 24             	mov    (%esp),%edi
 8052df4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052df8:	31 ff                	xor    %edi,%edi
 8052dfa:	66 90                	xchg   %ax,%ax
	report_label_coverage("ABS", 285);
}

// ROR Label 286
if((i <= digest_hex_bytes) != (i < digest_hex_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 286);
 8052dfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052e00:	89 3c 24             	mov    %edi,(%esp)
 8052e03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052e07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052e0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052e0f:	b9 65 31 00 00       	mov    $0x3165,%ecx
 8052e14:	e8 3f 59 00 00       	call   8058758 <__afl_maybe_log>
 8052e19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052e1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052e21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052e25:	8b 3c 24             	mov    (%esp),%edi
 8052e28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052e2c:	50                   	push   %eax
 8052e2d:	50                   	push   %eax
 8052e2e:	68 1e 01 00 00       	push   $0x11e
 8052e33:	68 c8 70 06 08       	push   $0x80670c8
 8052e38:	e8 83 32 00 00       	call   80560c0 <report_label_coverage>
 8052e3d:	83 c4 10             	add    $0x10,%esp
 8052e40:	89 5d a4             	mov    %ebx,-0x5c(%ebp)
 8052e43:	8b 35 04 b3 06 08    	mov    0x806b304,%esi
 8052e49:	e9 ce e2 ff ff       	jmp    805111c <main+0x7bdc>
 8052e4e:	66 90                	xchg   %ax,%ax
}
// MCC Label 247
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 247);
}
while (ISWHITE (s[i]))
 8052e50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052e54:	89 3c 24             	mov    %edi,(%esp)
 8052e57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052e5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052e5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052e63:	b9 af 5a 00 00       	mov    $0x5aaf,%ecx
 8052e68:	e8 eb 58 00 00       	call   8058758 <__afl_maybe_log>
 8052e6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052e71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052e75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052e79:	8b 3c 24             	mov    (%esp),%edi
 8052e7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052e80:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 8052e83:	31 db                	xor    %ebx,%ebx
 8052e85:	e9 7e b1 ff ff       	jmp    804e008 <main+0x4ac8>
 8052e8a:	66 90                	xchg   %ax,%ax
	report_label_coverage("ABS", 516);
}

// ROR Label 517
if((i <= (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 517);
 8052e8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052e90:	89 3c 24             	mov    %edi,(%esp)
 8052e93:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052e97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052e9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052e9f:	b9 61 08 00 00       	mov    $0x861,%ecx
 8052ea4:	e8 af 58 00 00       	call   8058758 <__afl_maybe_log>
 8052ea9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052ead:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052eb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052eb5:	8b 3c 24             	mov    (%esp),%edi
 8052eb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052ebc:	50                   	push   %eax
 8052ebd:	50                   	push   %eax
 8052ebe:	68 05 02 00 00       	push   $0x205
 8052ec3:	68 c8 70 06 08       	push   $0x80670c8
 8052ec8:	e8 f3 31 00 00       	call   80560c0 <report_label_coverage>
 8052ecd:	83 c4 10             	add    $0x10,%esp
 8052ed0:	a1 04 b3 06 08       	mov    0x806b304,%eax
 8052ed5:	e9 0e 8e ff ff       	jmp    804bce8 <main+0x27a8>
 8052eda:	66 90                	xchg   %ax,%ax
	report_label_coverage("ABS", 402);
}

// ROR Label 403
if((cnt <= digest_bin_bytes) != (cnt < digest_bin_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 403);
 8052edc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052ee0:	89 3c 24             	mov    %edi,(%esp)
 8052ee3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052ee7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052eeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052eef:	b9 3e 7c 00 00       	mov    $0x7c3e,%ecx
 8052ef4:	e8 5f 58 00 00       	call   8058758 <__afl_maybe_log>
 8052ef9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052efd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052f01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052f05:	8b 3c 24             	mov    (%esp),%edi
 8052f08:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052f0c:	50                   	push   %eax
 8052f0d:	50                   	push   %eax
 8052f0e:	68 93 01 00 00       	push   $0x193
 8052f13:	68 c8 70 06 08       	push   $0x80670c8
 8052f18:	e8 a3 31 00 00       	call   80560c0 <report_label_coverage>
 8052f1d:	83 c4 10             	add    $0x10,%esp
 8052f20:	e9 13 ed ff ff       	jmp    8051c38 <main+0x86f8>
 8052f25:	8d 76 00             	lea    0x0(%esi),%esi
if((cnt == digest_bin_bytes) != (cnt != digest_bin_bytes))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 417);
}
if (cnt != digest_bin_bytes)
                            printf("%s: %s\n", filename, gettext("FAILED"));
                        else { if (!quiet)
 8052f28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052f2c:	89 3c 24             	mov    %edi,(%esp)
 8052f2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052f33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052f37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052f3b:	b9 42 ac 00 00       	mov    $0xac42,%ecx
 8052f40:	e8 13 58 00 00       	call   8058758 <__afl_maybe_log>
 8052f45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052f49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052f4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052f51:	8b 3c 24             	mov    (%esp),%edi
 8052f54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052f58:	80 3d 01 b3 06 08 00 	cmpb   $0x0,0x806b301
 8052f5f:	0f 85 15 be ff ff    	jne    804ed7a <main+0x583a>
 8052f65:	8d 76 00             	lea    0x0(%esi),%esi
 8052f68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052f6c:	89 3c 24             	mov    %edi,(%esp)
 8052f6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052f73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052f77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052f7b:	b9 6b 87 00 00       	mov    $0x876b,%ecx
 8052f80:	e8 d3 57 00 00       	call   8058758 <__afl_maybe_log>
 8052f85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052f89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052f8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052f91:	8b 3c 24             	mov    (%esp),%edi
 8052f94:	8d 64 24 10          	lea    0x10(%esp),%esp
                            printf("%s: %s\n", filename, gettext("OK"));}
 8052f98:	53                   	push   %ebx
 8052f99:	6a 05                	push   $0x5
 8052f9b:	68 17 72 06 08       	push   $0x8067217
 8052fa0:	e9 ef f4 ff ff       	jmp    8052494 <main+0x8f54>
 8052fa5:	8d 76 00             	lea    0x0(%esi),%esi
      checkfile_name = _("standard input");
      checkfile_stream = stdin;
    }
  else
    {
      checkfile_stream = fopen (checkfile_name, "r");
 8052fa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052fac:	89 3c 24             	mov    %edi,(%esp)
 8052faf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052fb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052fb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052fbb:	b9 da 86 00 00       	mov    $0x86da,%ecx
 8052fc0:	e8 93 57 00 00       	call   8058758 <__afl_maybe_log>
 8052fc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052fc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052fcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052fd1:	8b 3c 24             	mov    (%esp),%edi
 8052fd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052fd8:	57                   	push   %edi
 8052fd9:	57                   	push   %edi
 8052fda:	68 b3 71 06 08       	push   $0x80671b3
 8052fdf:	ff 75 80             	pushl  -0x80(%ebp)
 8052fe2:	e8 e9 83 00 00       	call   805b3d0 <fopen_safer>
if(checkfile_stream < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 322);
}

// ROR Label 323
if((checkfile_stream != ((void *)0)) != (checkfile_stream == ((void *)0)))  {asm volatile (""::: "memory");
 8052fe7:	83 c4 10             	add    $0x10,%esp
 8052fea:	85 c0                	test   %eax,%eax
      checkfile_name = _("standard input");
      checkfile_stream = stdin;
    }
  else
    {
      checkfile_stream = fopen (checkfile_name, "r");
 8052fec:	89 45 84             	mov    %eax,-0x7c(%ebp)
if(checkfile_stream < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 322);
}

// ROR Label 323
if((checkfile_stream != ((void *)0)) != (checkfile_stream == ((void *)0)))  {asm volatile (""::: "memory");
 8052fef:	0f 94 c3             	sete   %bl
 8052ff2:	0f 95 c2             	setne  %dl
 8052ff5:	38 da                	cmp    %bl,%dl
 8052ff7:	74 47                	je     8053040 <main+0x9b00>
 8052ff9:	8d 76 00             	lea    0x0(%esi),%esi
 8052ffc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053000:	89 3c 24             	mov    %edi,(%esp)
 8053003:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053007:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805300b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805300f:	b9 eb 19 00 00       	mov    $0x19eb,%ecx
 8053014:	e8 3f 57 00 00       	call   8058758 <__afl_maybe_log>
 8053019:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805301d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053021:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053025:	8b 3c 24             	mov    (%esp),%edi
 8053028:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 323);
 805302c:	56                   	push   %esi
 805302d:	56                   	push   %esi
 805302e:	68 43 01 00 00       	push   $0x143
 8053033:	68 c8 70 06 08       	push   $0x80670c8
 8053038:	e8 83 30 00 00       	call   80560c0 <report_label_coverage>
 805303d:	83 c4 10             	add    $0x10,%esp
}
if (checkfile_stream == NULL)
 8053040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053044:	89 3c 24             	mov    %edi,(%esp)
 8053047:	89 54 24 04          	mov    %edx,0x4(%esp)
 805304b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805304f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053053:	b9 dd 37 00 00       	mov    $0x37dd,%ecx
 8053058:	e8 fb 56 00 00       	call   8058758 <__afl_maybe_log>
 805305d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053065:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053069:	8b 3c 24             	mov    (%esp),%edi
 805306c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053070:	84 db                	test   %bl,%bl
 8053072:	c6 85 63 ff ff ff 00 	movb   $0x0,-0x9d(%ebp)
 8053079:	0f 84 19 96 ff ff    	je     804c698 <main+0x3158>
 805307f:	90                   	nop
 8053080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053084:	89 3c 24             	mov    %edi,(%esp)
 8053087:	89 54 24 04          	mov    %edx,0x4(%esp)
 805308b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805308f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053093:	b9 9e ab 00 00       	mov    $0xab9e,%ecx
 8053098:	e8 bb 56 00 00       	call   8058758 <__afl_maybe_log>
 805309d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80530a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80530a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80530a9:	8b 3c 24             	mov    (%esp),%edi
 80530ac:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          
// ABS Label 324
if((*__errno_location()) < 0)  {asm volatile (""::: "memory");
 80530b0:	e8 2b 63 ff ff       	call   80493e0 <__errno_location@plt>
 80530b5:	83 38 00             	cmpl   $0x0,(%eax)
 80530b8:	89 c3                	mov    %eax,%ebx
 80530ba:	0f 88 36 2b 00 00    	js     8055bf6 <main+0xc6b6>
 80530c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80530c4:	89 3c 24             	mov    %edi,(%esp)
 80530c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80530cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80530cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80530d3:	b9 85 9a 00 00       	mov    $0x9a85,%ecx
 80530d8:	e8 7b 56 00 00       	call   8058758 <__afl_maybe_log>
 80530dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80530e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80530e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80530e9:	8b 3c 24             	mov    (%esp),%edi
 80530ec:	8d 64 24 10          	lea    0x10(%esp),%esp

// ABS Label 424
if(checkfile_name < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 424);
}
error(0, (*__errno_location()), "%s", checkfile_name);
 80530f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80530f4:	89 3c 24             	mov    %edi,(%esp)
 80530f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80530fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80530ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053103:	b9 f0 3b 00 00       	mov    $0x3bf0,%ecx
 8053108:	e8 4b 56 00 00       	call   8058758 <__afl_maybe_log>
 805310d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053111:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053115:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053119:	8b 3c 24             	mov    (%esp),%edi
 805311c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053120:	ff 75 80             	pushl  -0x80(%ebp)
 8053123:	68 45 7c 06 08       	push   $0x8067c45
        return 0;
 8053128:	31 ff                	xor    %edi,%edi

// ABS Label 424
if(checkfile_name < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 424);
}
error(0, (*__errno_location()), "%s", checkfile_name);
 805312a:	ff 33                	pushl  (%ebx)
 805312c:	6a 00                	push   $0x0
 805312e:	e8 5d 61 ff ff       	call   8049290 <error@plt>
 8053133:	83 c4 10             	add    $0x10,%esp
 8053136:	e9 00 c6 ff ff       	jmp    804f73b <main+0x61fb>
 805313b:	90                   	nop
if(argv[optind] < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 497);
}
// ABS Label 498
if(optind < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 498);
 805313c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053140:	89 3c 24             	mov    %edi,(%esp)
 8053143:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053147:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805314b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805314f:	b9 ab cb 00 00       	mov    $0xcbab,%ecx
 8053154:	e8 ff 55 00 00       	call   8058758 <__afl_maybe_log>
 8053159:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805315d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053161:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053165:	8b 3c 24             	mov    (%esp),%edi
 8053168:	8d 64 24 10          	lea    0x10(%esp),%esp
 805316c:	50                   	push   %eax
 805316d:	50                   	push   %eax
 805316e:	68 f2 01 00 00       	push   $0x1f2
 8053173:	68 d0 70 06 08       	push   $0x80670d0
 8053178:	e8 43 2f 00 00       	call   80560c0 <report_label_coverage>
 805317d:	83 c4 10             	add    $0x10,%esp
 8053180:	e9 63 84 ff ff       	jmp    804b5e8 <main+0x20a8>
 8053185:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ABS", 512);
}

// ROR Label 513
if((i <= (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 513);
 8053188:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805318c:	89 3c 24             	mov    %edi,(%esp)
 805318f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053193:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053197:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805319b:	b9 44 d7 00 00       	mov    $0xd744,%ecx
 80531a0:	e8 b3 55 00 00       	call   8058758 <__afl_maybe_log>
 80531a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80531a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80531ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80531b1:	8b 3c 24             	mov    (%esp),%edi
 80531b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80531b8:	50                   	push   %eax
 80531b9:	50                   	push   %eax
 80531ba:	68 01 02 00 00       	push   $0x201
 80531bf:	68 c8 70 06 08       	push   $0x80670c8
 80531c4:	e8 f7 2e 00 00       	call   80560c0 <report_label_coverage>
}
// ROR Label 514
if((i > (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
 80531c9:	83 c4 10             	add    $0x10,%esp
 80531cc:	83 3d 04 b3 06 08 01 	cmpl   $0x1,0x806b304
 80531d3:	0f 87 7b 89 ff ff    	ja     804bb54 <main+0x2614>
 80531d9:	8d 76 00             	lea    0x0(%esi),%esi
 80531dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80531e0:	89 3c 24             	mov    %edi,(%esp)
 80531e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80531e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80531eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80531ef:	b9 20 f3 00 00       	mov    $0xf320,%ecx
 80531f4:	e8 5f 55 00 00       	call   8058758 <__afl_maybe_log>
 80531f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80531fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053201:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053205:	8b 3c 24             	mov    (%esp),%edi
 8053208:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 514);
}
// ROR Label 515
if((i >= (digest_hex_bytes / 2)) != (i < (digest_hex_bytes / 2)))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 515);
 805320c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053210:	89 3c 24             	mov    %edi,(%esp)
 8053213:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053217:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805321b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805321f:	b9 92 bf 00 00       	mov    $0xbf92,%ecx
 8053224:	e8 2f 55 00 00       	call   8058758 <__afl_maybe_log>
 8053229:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805322d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053231:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053235:	8b 3c 24             	mov    (%esp),%edi
 8053238:	8d 64 24 10          	lea    0x10(%esp),%esp
 805323c:	50                   	push   %eax
 805323d:	50                   	push   %eax
 805323e:	68 03 02 00 00       	push   $0x203
 8053243:	68 c8 70 06 08       	push   $0x80670c8
 8053248:	e8 73 2e 00 00       	call   80560c0 <report_label_coverage>
 805324d:	83 c4 10             	add    $0x10,%esp
 8053250:	8b 3d 04 b3 06 08    	mov    0x806b304,%edi
 8053256:	e9 85 89 ff ff       	jmp    804bbe0 <main+0x26a0>
 805325b:	90                   	nop
if((s[i + algo_name_len] != '(') != (s[i + algo_name_len] == '('))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 254);
}
if (s[i + algo_name_len] == '(')
        {
          *binary = 0;
 805325c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053260:	89 3c 24             	mov    %edi,(%esp)
 8053263:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053267:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805326b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805326f:	b9 13 37 00 00       	mov    $0x3713,%ecx
 8053274:	e8 df 54 00 00       	call   8058758 <__afl_maybe_log>
 8053279:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805327d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053281:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053285:	8b 3c 24             	mov    (%esp),%edi
 8053288:	8d 64 24 10          	lea    0x10(%esp),%esp
 805328c:	8b b5 64 ff ff ff    	mov    -0x9c(%ebp),%esi
 8053292:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
          return bsd_split_3 (s +      i + algo_name_len + 1,
                              s_len - (i + algo_name_len + 1),
 8053298:	8b 75 9c             	mov    -0x64(%ebp),%esi
 805329b:	29 fe                	sub    %edi,%esi
if(s_len < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 207);
}

// ROR Label 208
if((s_len != 0) != (s_len == 0))  {asm volatile (""::: "memory");
 805329d:	89 f7                	mov    %esi,%edi
 805329f:	83 ef 01             	sub    $0x1,%edi
 80532a2:	0f 94 c0             	sete   %al
 80532a5:	0f 95 c2             	setne  %dl
 80532a8:	38 c2                	cmp    %al,%dl
 80532aa:	74 4b                	je     80532f7 <main+0x9db7>
 80532ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80532b0:	89 3c 24             	mov    %edi,(%esp)
 80532b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80532b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80532bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80532bf:	b9 41 93 00 00       	mov    $0x9341,%ecx
 80532c4:	e8 8f 54 00 00       	call   8058758 <__afl_maybe_log>
 80532c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80532cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80532d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80532d5:	8b 3c 24             	mov    (%esp),%edi
 80532d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80532dc:	88 45 9c             	mov    %al,-0x64(%ebp)
	report_label_coverage("ROR", 208);
 80532df:	50                   	push   %eax
 80532e0:	50                   	push   %eax
 80532e1:	68 d0 00 00 00       	push   $0xd0
 80532e6:	68 c8 70 06 08       	push   $0x80670c8
 80532eb:	e8 d0 2d 00 00       	call   80560c0 <report_label_coverage>
 80532f0:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 80532f4:	83 c4 10             	add    $0x10,%esp
 80532f7:	90                   	nop
}
if (s_len == 0)
 80532f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80532fc:	89 3c 24             	mov    %edi,(%esp)
 80532ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053303:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053307:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805330b:	b9 2a 9c 00 00       	mov    $0x9c2a,%ecx
 8053310:	e8 43 54 00 00       	call   8058758 <__afl_maybe_log>
 8053315:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053319:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805331d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053321:	8b 3c 24             	mov    (%esp),%edi
 8053324:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053328:	84 c0                	test   %al,%al
 805332a:	0f 85 14 b5 ff ff    	jne    804e844 <main+0x5304>
 8053330:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053334:	89 3c 24             	mov    %edi,(%esp)
 8053337:	89 54 24 04          	mov    %edx,0x4(%esp)
 805333b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805333f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053343:	b9 c2 b9 00 00       	mov    $0xb9c2,%ecx
 8053348:	e8 0b 54 00 00       	call   8058758 <__afl_maybe_log>
 805334d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053351:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053355:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053359:	8b 3c 24             	mov    (%esp),%edi
 805335c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 254);
}
if (s[i + algo_name_len] == '(')
        {
          *binary = 0;
          return bsd_split_3 (s +      i + algo_name_len + 1,
 8053360:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
 8053363:	8d 7c 19 04          	lea    0x4(%ecx,%ebx,1),%edi
if(i < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 209);
}

// COR Label 210
if((i || s[i] != ')') != (i && s[i] != ')'))  {asm volatile (""::: "memory");
 8053367:	89 f3                	mov    %esi,%ebx
 8053369:	83 eb 02             	sub    $0x2,%ebx
 805336c:	0f 85 ed 17 00 00    	jne    8054b5f <main+0xb61f>
 8053372:	66 90                	xchg   %ax,%ax
 8053374:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053378:	89 3c 24             	mov    %edi,(%esp)
 805337b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805337f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053383:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053387:	b9 60 66 00 00       	mov    $0x6660,%ecx
 805338c:	e8 c7 53 00 00       	call   8058758 <__afl_maybe_log>
 8053391:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053395:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053399:	8b 54 24 04          	mov    0x4(%esp),%edx
 805339d:	8b 3c 24             	mov    (%esp),%edi
 80533a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80533a4:	80 3f 29             	cmpb   $0x29,(%edi)
 80533a7:	0f 85 23 18 00 00    	jne    8054bd0 <main+0xb690>
 80533ad:	8d 76 00             	lea    0x0(%esi),%esi
 80533b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80533b4:	89 3c 24             	mov    %edi,(%esp)
 80533b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80533bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80533bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80533c3:	b9 69 66 00 00       	mov    $0x6669,%ecx
 80533c8:	e8 8b 53 00 00       	call   8058758 <__afl_maybe_log>
 80533cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80533d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80533d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80533d9:	8b 3c 24             	mov    (%esp),%edi
 80533dc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 210);
}

// ROR Label 211
if((s[i] == ')') != (s[i] != ')'))  {asm volatile (""::: "memory");
 80533e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80533e4:	89 3c 24             	mov    %edi,(%esp)
 80533e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80533eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80533ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80533f3:	b9 91 4f 00 00       	mov    $0x4f91,%ecx
 80533f8:	e8 5b 53 00 00       	call   8058758 <__afl_maybe_log>
 80533fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053401:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053405:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053409:	8b 3c 24             	mov    (%esp),%edi
 805340c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053410:	8d 04 1f             	lea    (%edi,%ebx,1),%eax
 8053413:	0f b6 10             	movzbl (%eax),%edx
 8053416:	80 fa 29             	cmp    $0x29,%dl
 8053419:	0f 94 c1             	sete   %cl
 805341c:	0f 95 c2             	setne  %dl
 805341f:	38 d1                	cmp    %dl,%cl
 8053421:	0f 85 e6 16 00 00    	jne    8054b0d <main+0xb5cd>
 8053427:	90                   	nop
 8053428:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805342c:	89 3c 24             	mov    %edi,(%esp)
 805342f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053433:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053437:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805343b:	b9 82 25 00 00       	mov    $0x2582,%ecx
 8053440:	e8 13 53 00 00       	call   8058758 <__afl_maybe_log>
 8053445:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053449:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805344d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053451:	8b 3c 24             	mov    (%esp),%edi
 8053454:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 211);
}

// MCC Label 212
if(i && s[i] != ')' ) {asm volatile (""::: "memory");
 8053458:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805345c:	89 3c 24             	mov    %edi,(%esp)
 805345f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053463:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053467:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805346b:	b9 7f 05 00 00       	mov    $0x57f,%ecx
 8053470:	e8 e3 52 00 00       	call   8058758 <__afl_maybe_log>
 8053475:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053479:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805347d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053481:	8b 3c 24             	mov    (%esp),%edi
 8053484:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053488:	85 db                	test   %ebx,%ebx
 805348a:	0f 84 71 15 00 00    	je     8054a01 <main+0xb4c1>
 8053490:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053494:	89 3c 24             	mov    %edi,(%esp)
 8053497:	89 54 24 04          	mov    %edx,0x4(%esp)
 805349b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805349f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80534a3:	b9 f2 3c 00 00       	mov    $0x3cf2,%ecx
 80534a8:	e8 ab 52 00 00       	call   8058758 <__afl_maybe_log>
 80534ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80534b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80534b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80534b9:	8b 3c 24             	mov    (%esp),%edi
 80534bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80534c0:	80 38 29             	cmpb   $0x29,(%eax)
 80534c3:	0f 85 62 1f 00 00    	jne    805542b <main+0xbeeb>
 80534c9:	8d 76 00             	lea    0x0(%esi),%esi
 80534cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80534d0:	89 3c 24             	mov    %edi,(%esp)
 80534d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80534d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80534db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80534df:	b9 b3 2a 00 00       	mov    $0x2ab3,%ecx
 80534e4:	e8 6f 52 00 00       	call   8058758 <__afl_maybe_log>
 80534e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80534ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80534f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80534f5:	8b 3c 24             	mov    (%esp),%edi
 80534f8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 212);
}
// MCC Label 213
if(i && !(s[i] != ')') ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 213);
 80534fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053500:	89 3c 24             	mov    %edi,(%esp)
 8053503:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053507:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805350b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805350f:	b9 21 86 00 00       	mov    $0x8621,%ecx
 8053514:	e8 3f 52 00 00       	call   8058758 <__afl_maybe_log>
 8053519:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805351d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053521:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053525:	8b 3c 24             	mov    (%esp),%edi
 8053528:	8d 64 24 10          	lea    0x10(%esp),%esp
 805352c:	50                   	push   %eax
 805352d:	50                   	push   %eax
 805352e:	68 d5 00 00 00       	push   $0xd5
 8053533:	68 de 70 06 08       	push   $0x80670de
 8053538:	e8 83 2b 00 00       	call   80560c0 <report_label_coverage>
 805353d:	83 c4 10             	add    $0x10,%esp
 8053540:	eb 71                	jmp    80535b3 <main+0xa073>
 8053542:	66 90                	xchg   %ax,%ax
}
// MCC Label 215
if(!(i) && !(s[i] != ')') ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 215);
}
while (i && s[i] != ')')
 8053544:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053548:	89 3c 24             	mov    %edi,(%esp)
 805354b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805354f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053553:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053557:	b9 ff 61 00 00       	mov    $0x61ff,%ecx
 805355c:	e8 f7 51 00 00       	call   8058758 <__afl_maybe_log>
 8053561:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053565:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053569:	8b 54 24 04          	mov    0x4(%esp),%edx
 805356d:	8b 3c 24             	mov    (%esp),%edi
 8053570:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053574:	80 3c 1f 29          	cmpb   $0x29,(%edi,%ebx,1)
 8053578:	0f 84 20 1d 00 00    	je     805529e <main+0xbd5e>
 805357e:	66 90                	xchg   %ax,%ax
 8053580:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053584:	89 3c 24             	mov    %edi,(%esp)
 8053587:	89 54 24 04          	mov    %edx,0x4(%esp)
 805358b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805358f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053593:	b9 46 da 00 00       	mov    $0xda46,%ecx
 8053598:	e8 bb 51 00 00       	call   8058758 <__afl_maybe_log>
 805359d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80535a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80535a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80535a9:	8b 3c 24             	mov    (%esp),%edi
 80535ac:	8d 64 24 10          	lea    0x10(%esp),%esp
    i--;
 80535b0:	83 eb 01             	sub    $0x1,%ebx
 80535b3:	90                   	nop
}
// MCC Label 215
if(!(i) && !(s[i] != ')') ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 215);
}
while (i && s[i] != ')')
 80535b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80535b8:	89 3c 24             	mov    %edi,(%esp)
 80535bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80535bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80535c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80535c7:	b9 49 b5 00 00       	mov    $0xb549,%ecx
 80535cc:	e8 87 51 00 00       	call   8058758 <__afl_maybe_log>
 80535d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80535d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80535d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80535dd:	8b 3c 24             	mov    (%esp),%edi
 80535e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80535e4:	85 db                	test   %ebx,%ebx
 80535e6:	0f 85 56 ff ff ff    	jne    8053542 <main+0xa002>
 80535ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80535f0:	89 3c 24             	mov    %edi,(%esp)
 80535f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80535f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80535fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80535ff:	b9 a5 79 00 00       	mov    $0x79a5,%ecx
 8053604:	e8 4f 51 00 00       	call   8058758 <__afl_maybe_log>
 8053609:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805360d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053611:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053615:	8b 3c 24             	mov    (%esp),%edi
 8053618:	8d 64 24 10          	lea    0x10(%esp),%esp
if(i < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 216);
}

// COR Label 217
if((i || s[i] != ')') != (i && s[i] != ')'))  {asm volatile (""::: "memory");
 805361c:	80 3f 29             	cmpb   $0x29,(%edi)
	report_label_coverage("COR", 217);
}

// ROR Label 218
if((s[i] == ')') != (s[i] != ')'))  {asm volatile (""::: "memory");
 805361f:	89 fe                	mov    %edi,%esi
if(i < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 216);
}

// COR Label 217
if((i || s[i] != ')') != (i && s[i] != ')'))  {asm volatile (""::: "memory");
 8053621:	0f 85 77 1c 00 00    	jne    805529e <main+0xbd5e>
 8053627:	90                   	nop
 8053628:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805362c:	89 3c 24             	mov    %edi,(%esp)
 805362f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053633:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053637:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805363b:	b9 1a b4 00 00       	mov    $0xb41a,%ecx
 8053640:	e8 13 51 00 00       	call   8058758 <__afl_maybe_log>
 8053645:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053649:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805364d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053651:	8b 3c 24             	mov    (%esp),%edi
 8053654:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 217);
}

// ROR Label 218
if((s[i] == ')') != (s[i] != ')'))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 218);
 8053658:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805365c:	89 3c 24             	mov    %edi,(%esp)
 805365f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053663:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053667:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805366b:	b9 d1 2b 00 00       	mov    $0x2bd1,%ecx
 8053670:	e8 e3 50 00 00       	call   8058758 <__afl_maybe_log>
 8053675:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053679:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805367d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053681:	8b 3c 24             	mov    (%esp),%edi
 8053684:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053688:	50                   	push   %eax
 8053689:	50                   	push   %eax
 805368a:	68 da 00 00 00       	push   $0xda
 805368f:	68 c8 70 06 08       	push   $0x80670c8
 8053694:	e8 27 2a 00 00       	call   80560c0 <report_label_coverage>
 8053699:	83 c4 10             	add    $0x10,%esp
}

// MCC Label 219
if(i && s[i] != ')' ) {asm volatile (""::: "memory");
 805369c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80536a0:	89 3c 24             	mov    %edi,(%esp)
 80536a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80536a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80536ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80536af:	b9 67 1c 00 00       	mov    $0x1c67,%ecx
 80536b4:	e8 9f 50 00 00       	call   8058758 <__afl_maybe_log>
 80536b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80536bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80536c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80536c5:	8b 3c 24             	mov    (%esp),%edi
 80536c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80536cc:	85 db                	test   %ebx,%ebx
 80536ce:	0f 84 25 12 00 00    	je     80548f9 <main+0xb3b9>
 80536d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80536d8:	89 3c 24             	mov    %edi,(%esp)
 80536db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80536df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80536e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80536e7:	b9 b0 98 00 00       	mov    $0x98b0,%ecx
 80536ec:	e8 67 50 00 00       	call   8058758 <__afl_maybe_log>
 80536f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80536f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80536f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80536fd:	8b 3c 24             	mov    (%esp),%edi
 8053700:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053704:	80 3e 29             	cmpb   $0x29,(%esi)
 8053707:	0f 85 f4 1d 00 00    	jne    8055501 <main+0xbfc1>
 805370d:	8d 76 00             	lea    0x0(%esi),%esi
 8053710:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053714:	89 3c 24             	mov    %edi,(%esp)
 8053717:	89 54 24 04          	mov    %edx,0x4(%esp)
 805371b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805371f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053723:	b9 c0 26 00 00       	mov    $0x26c0,%ecx
 8053728:	e8 2b 50 00 00       	call   8058758 <__afl_maybe_log>
 805372d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053731:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053735:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053739:	8b 3c 24             	mov    (%esp),%edi
 805373c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 219);
}
// MCC Label 220
if(i && !(s[i] != ')') ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 220);
 8053740:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053744:	89 3c 24             	mov    %edi,(%esp)
 8053747:	89 54 24 04          	mov    %edx,0x4(%esp)
 805374b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805374f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053753:	b9 02 70 00 00       	mov    $0x7002,%ecx
 8053758:	e8 fb 4f 00 00       	call   8058758 <__afl_maybe_log>
 805375d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053761:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053765:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053769:	8b 3c 24             	mov    (%esp),%edi
 805376c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053770:	50                   	push   %eax
 8053771:	50                   	push   %eax
 8053772:	68 dc 00 00 00       	push   $0xdc
 8053777:	68 de 70 06 08       	push   $0x80670de
 805377c:	e8 3f 29 00 00       	call   80560c0 <report_label_coverage>
 8053781:	83 c4 10             	add    $0x10,%esp
}
;

  
// ROR Label 223
if((s[i] == ')') != (s[i] != ')'))  {asm volatile (""::: "memory");
 8053784:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053788:	89 3c 24             	mov    %edi,(%esp)
 805378b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805378f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053793:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053797:	b9 6f 7f 00 00       	mov    $0x7f6f,%ecx
 805379c:	e8 b7 4f 00 00       	call   8058758 <__afl_maybe_log>
 80537a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80537a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80537a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80537ad:	8b 3c 24             	mov    (%esp),%edi
 80537b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80537b4:	0f b6 0e             	movzbl (%esi),%ecx
 80537b7:	80 f9 29             	cmp    $0x29,%cl
 80537ba:	0f 94 c2             	sete   %dl
 80537bd:	0f 95 c0             	setne  %al
 80537c0:	38 c2                	cmp    %al,%dl
 80537c2:	0f 85 f0 11 00 00    	jne    80549b8 <main+0xb478>
 80537c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80537cc:	89 3c 24             	mov    %edi,(%esp)
 80537cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80537d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80537d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80537db:	b9 c1 fd 00 00       	mov    $0xfdc1,%ecx
 80537e0:	e8 73 4f 00 00       	call   8058758 <__afl_maybe_log>
 80537e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80537e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80537ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80537f1:	8b 3c 24             	mov    (%esp),%edi
 80537f4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 223);
}
if (s[i] != ')')
 80537f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80537fc:	89 3c 24             	mov    %edi,(%esp)
 80537ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053803:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053807:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805380b:	b9 a5 66 00 00       	mov    $0x66a5,%ecx
 8053810:	e8 43 4f 00 00       	call   8058758 <__afl_maybe_log>
 8053815:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053819:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805381d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053821:	8b 3c 24             	mov    (%esp),%edi
 8053824:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053828:	80 3e 29             	cmpb   $0x29,(%esi)
 805382b:	0f 85 13 b0 ff ff    	jne    804e844 <main+0x5304>
 8053831:	8d 76 00             	lea    0x0(%esi),%esi
 8053834:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053838:	89 3c 24             	mov    %edi,(%esp)
 805383b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805383f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053843:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053847:	b9 f2 24 00 00       	mov    $0x24f2,%ecx
 805384c:	e8 07 4f 00 00       	call   8058758 <__afl_maybe_log>
 8053851:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053855:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053859:	8b 54 24 04          	mov    0x4(%esp),%edx
 805385d:	8b 3c 24             	mov    (%esp),%edi
 8053860:	8d 64 24 10          	lea    0x10(%esp),%esp
  
// ABS Label 224
if(escaped_filename < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 224);
}
if (escaped_filename) {
 8053864:	80 bd 7d ff ff ff 00 	cmpb   $0x0,-0x83(%ebp)
	report_label_coverage("ROR", 223);
}
if (s[i] != ')')
    return false;

  *file_name = s;
 805386b:	8b 8d 70 ff ff ff    	mov    -0x90(%ebp),%ecx
 8053871:	89 39                	mov    %edi,(%ecx)
  
// ABS Label 224
if(escaped_filename < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 224);
}
if (escaped_filename) {
 8053873:	0f 85 e3 21 00 00    	jne    8055a5c <main+0xc51c>
 8053879:	8d 76 00             	lea    0x0(%esi),%esi
 805387c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053880:	89 3c 24             	mov    %edi,(%esp)
 8053883:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053887:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805388b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805388f:	b9 96 b3 00 00       	mov    $0xb396,%ecx
 8053894:	e8 bf 4e 00 00       	call   8058758 <__afl_maybe_log>
 8053899:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805389d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80538a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80538a5:	8b 3c 24             	mov    (%esp),%edi
 80538a8:	8d 64 24 10          	lea    0x10(%esp),%esp
        return 0;
    }
}


  s[i++] = '\0';
 80538ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80538b0:	89 3c 24             	mov    %edi,(%esp)
 80538b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80538b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80538bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80538bf:	b9 b7 87 00 00       	mov    $0x87b7,%ecx
 80538c4:	e8 8f 4e 00 00       	call   8058758 <__afl_maybe_log>
 80538c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80538cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80538d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80538d5:	8b 3c 24             	mov    (%esp),%edi
 80538d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80538dc:	83 c3 01             	add    $0x1,%ebx
 80538df:	c6 06 00             	movb   $0x0,(%esi)
// MCC Label 227
if(( (s[i]) == ' ' && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 227);
}
// MCC Label 228
if(( (s[i]) == ' ' && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 80538e2:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
 80538e5:	80 3e 20             	cmpb   $0x20,(%esi)
 80538e8:	0f 84 53 23 00 00    	je     8055c41 <main+0xc701>
 80538ee:	66 90                	xchg   %ax,%ax
 80538f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80538f4:	89 3c 24             	mov    %edi,(%esp)
 80538f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80538fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80538ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053903:	b9 78 08 00 00       	mov    $0x878,%ecx
 8053908:	e8 4b 4e 00 00       	call   8058758 <__afl_maybe_log>
 805390d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053911:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053915:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053919:	8b 3c 24             	mov    (%esp),%edi
 805391c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 228);
}
// MCC Label 229
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
 8053920:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053924:	89 3c 24             	mov    %edi,(%esp)
 8053927:	89 54 24 04          	mov    %edx,0x4(%esp)
 805392b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805392f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053933:	b9 b5 6a 00 00       	mov    $0x6ab5,%ecx
 8053938:	e8 1b 4e 00 00       	call   8058758 <__afl_maybe_log>
 805393d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053941:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053945:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053949:	8b 3c 24             	mov    (%esp),%edi
 805394c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053950:	80 3e 09             	cmpb   $0x9,(%esi)
 8053953:	0f 84 80 23 00 00    	je     8055cd9 <main+0xc799>
 8053959:	8d 76 00             	lea    0x0(%esi),%esi
 805395c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053960:	89 3c 24             	mov    %edi,(%esp)
 8053963:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053967:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805396b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805396f:	b9 d5 fb 00 00       	mov    $0xfbd5,%ecx
 8053974:	e8 df 4d 00 00       	call   8058758 <__afl_maybe_log>
 8053979:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805397d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053981:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053985:	8b 3c 24             	mov    (%esp),%edi
 8053988:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 229);
}
// MCC Label 230
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 805398c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053990:	89 3c 24             	mov    %edi,(%esp)
 8053993:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053997:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805399b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805399f:	b9 1e aa 00 00       	mov    $0xaa1e,%ecx
 80539a4:	e8 af 4d 00 00       	call   8058758 <__afl_maybe_log>
 80539a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80539ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80539b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80539b5:	8b 3c 24             	mov    (%esp),%edi
 80539b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80539bc:	0f b6 0e             	movzbl (%esi),%ecx
 80539bf:	80 f9 09             	cmp    $0x9,%cl
 80539c2:	0f 84 ba 00 00 00    	je     8053a82 <main+0xa542>
 80539c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80539cc:	89 3c 24             	mov    %edi,(%esp)
 80539cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80539d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80539d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80539db:	b9 42 f1 00 00       	mov    $0xf142,%ecx
 80539e0:	e8 73 4d 00 00       	call   8058758 <__afl_maybe_log>
 80539e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80539e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80539ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80539f1:	8b 3c 24             	mov    (%esp),%edi
 80539f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80539f8:	80 f9 20             	cmp    $0x20,%cl
 80539fb:	0f 84 81 00 00 00    	je     8053a82 <main+0xa542>
 8053a01:	8d 76 00             	lea    0x0(%esi),%esi
 8053a04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053a08:	89 3c 24             	mov    %edi,(%esp)
 8053a0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053a0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053a13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053a17:	b9 33 00 00 00       	mov    $0x33,%ecx
 8053a1c:	e8 37 4d 00 00       	call   8058758 <__afl_maybe_log>
 8053a21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053a25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053a29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053a2d:	8b 3c 24             	mov    (%esp),%edi
 8053a30:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 230);
 8053a34:	50                   	push   %eax
 8053a35:	50                   	push   %eax
 8053a36:	68 e6 00 00 00       	push   $0xe6
 8053a3b:	68 de 70 06 08       	push   $0x80670de
 8053a40:	e8 7b 26 00 00       	call   80560c0 <report_label_coverage>
 8053a45:	83 c4 10             	add    $0x10,%esp
 8053a48:	eb 38                	jmp    8053a82 <main+0xa542>
 8053a4a:	66 90                	xchg   %ax,%ax
}
while (ISWHITE (s[i]))
    i++;
 8053a4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053a50:	89 3c 24             	mov    %edi,(%esp)
 8053a53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053a57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053a5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053a5f:	b9 82 bb 00 00       	mov    $0xbb82,%ecx
 8053a64:	e8 ef 4c 00 00       	call   8058758 <__afl_maybe_log>
 8053a69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053a6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053a71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053a75:	8b 3c 24             	mov    (%esp),%edi
 8053a78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053a7c:	83 c3 01             	add    $0x1,%ebx
 8053a7f:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
 8053a82:	66 90                	xchg   %ax,%ax
}
// MCC Label 230
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 230);
}
while (ISWHITE (s[i]))
 8053a84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053a88:	89 3c 24             	mov    %edi,(%esp)
 8053a8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053a8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053a93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053a97:	b9 70 90 00 00       	mov    $0x9070,%ecx
 8053a9c:	e8 b7 4c 00 00       	call   8058758 <__afl_maybe_log>
 8053aa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053aa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053aa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053aad:	8b 3c 24             	mov    (%esp),%edi
 8053ab0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053ab4:	0f b6 04 1f          	movzbl (%edi,%ebx,1),%eax
 8053ab8:	3c 09                	cmp    $0x9,%al
 8053aba:	74 8e                	je     8053a4a <main+0xa50a>
 8053abc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053ac0:	89 3c 24             	mov    %edi,(%esp)
 8053ac3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053ac7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053acb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053acf:	b9 fe 97 00 00       	mov    $0x97fe,%ecx
 8053ad4:	e8 7f 4c 00 00       	call   8058758 <__afl_maybe_log>
 8053ad9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053add:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ae1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ae5:	8b 3c 24             	mov    (%esp),%edi
 8053ae8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053aec:	3c 20                	cmp    $0x20,%al
 8053aee:	0f 84 56 ff ff ff    	je     8053a4a <main+0xa50a>
 8053af4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053af8:	89 3c 24             	mov    %edi,(%esp)
 8053afb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053aff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053b03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053b07:	b9 94 58 00 00       	mov    $0x5894,%ecx
 8053b0c:	e8 47 4c 00 00       	call   8058758 <__afl_maybe_log>
 8053b11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053b15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053b19:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053b1d:	8b 3c 24             	mov    (%esp),%edi
 8053b20:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 233
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 233);
}
// MCC Label 234
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 8053b24:	0f b6 16             	movzbl (%esi),%edx
 8053b27:	80 fa 09             	cmp    $0x9,%dl
 8053b2a:	74 7f                	je     8053bab <main+0xa66b>
 8053b2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053b30:	89 3c 24             	mov    %edi,(%esp)
 8053b33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053b37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053b3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053b3f:	b9 f8 95 00 00       	mov    $0x95f8,%ecx
 8053b44:	e8 0f 4c 00 00       	call   8058758 <__afl_maybe_log>
 8053b49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053b4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053b51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053b55:	8b 3c 24             	mov    (%esp),%edi
 8053b58:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053b5c:	80 fa 20             	cmp    $0x20,%dl
 8053b5f:	74 4a                	je     8053bab <main+0xa66b>
 8053b61:	8d 76 00             	lea    0x0(%esi),%esi
 8053b64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053b68:	89 3c 24             	mov    %edi,(%esp)
 8053b6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053b6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053b73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053b77:	b9 5b 9c 00 00       	mov    $0x9c5b,%ecx
 8053b7c:	e8 d7 4b 00 00       	call   8058758 <__afl_maybe_log>
 8053b81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053b85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053b89:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053b8d:	8b 3c 24             	mov    (%esp),%edi
 8053b90:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 234);
 8053b94:	50                   	push   %eax
 8053b95:	50                   	push   %eax
 8053b96:	68 ea 00 00 00       	push   $0xea
 8053b9b:	68 de 70 06 08       	push   $0x80670de
 8053ba0:	e8 1b 25 00 00       	call   80560c0 <report_label_coverage>
 8053ba5:	0f b6 16             	movzbl (%esi),%edx
 8053ba8:	83 c4 10             	add    $0x10,%esp
 8053bab:	90                   	nop
}
;

  
// ROR Label 235
if((s[i] == '=') != (s[i] != '='))  {asm volatile (""::: "memory");
 8053bac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053bb0:	89 3c 24             	mov    %edi,(%esp)
 8053bb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053bb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053bbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053bbf:	b9 09 91 00 00       	mov    $0x9109,%ecx
 8053bc4:	e8 8f 4b 00 00       	call   8058758 <__afl_maybe_log>
 8053bc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053bcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053bd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053bd5:	8b 3c 24             	mov    (%esp),%edi
 8053bd8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053bdc:	80 fa 3d             	cmp    $0x3d,%dl
 8053bdf:	0f 94 c1             	sete   %cl
 8053be2:	0f 95 c0             	setne  %al
 8053be5:	38 c1                	cmp    %al,%cl
 8053be7:	74 47                	je     8053c30 <main+0xa6f0>
 8053be9:	8d 76 00             	lea    0x0(%esi),%esi
 8053bec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053bf0:	89 3c 24             	mov    %edi,(%esp)
 8053bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053bf7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053bfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053bff:	b9 f6 8d 00 00       	mov    $0x8df6,%ecx
 8053c04:	e8 4f 4b 00 00       	call   8058758 <__afl_maybe_log>
 8053c09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053c0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053c11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053c15:	8b 3c 24             	mov    (%esp),%edi
 8053c18:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 235);
 8053c1c:	50                   	push   %eax
 8053c1d:	50                   	push   %eax
 8053c1e:	68 eb 00 00 00       	push   $0xeb
 8053c23:	68 c8 70 06 08       	push   $0x80670c8
 8053c28:	e8 93 24 00 00       	call   80560c0 <report_label_coverage>
 8053c2d:	83 c4 10             	add    $0x10,%esp
}
if (s[i] != '=')
 8053c30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053c34:	89 3c 24             	mov    %edi,(%esp)
 8053c37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053c3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053c3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053c43:	b9 60 6c 00 00       	mov    $0x6c60,%ecx
 8053c48:	e8 0b 4b 00 00       	call   8058758 <__afl_maybe_log>
 8053c4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053c51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053c55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053c59:	8b 3c 24             	mov    (%esp),%edi
 8053c5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053c60:	80 3e 3d             	cmpb   $0x3d,(%esi)
 8053c63:	0f 85 db ab ff ff    	jne    804e844 <main+0x5304>
 8053c69:	8d 76 00             	lea    0x0(%esi),%esi
 8053c6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053c70:	89 3c 24             	mov    %edi,(%esp)
 8053c73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053c77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053c7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053c7f:	b9 34 5a 00 00       	mov    $0x5a34,%ecx
 8053c84:	e8 cf 4a 00 00       	call   8058758 <__afl_maybe_log>
 8053c89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053c8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053c91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053c95:	8b 3c 24             	mov    (%esp),%edi
 8053c98:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 236
if(( (s[i]) == ' ' && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 236);
}
// MCC Label 237
if(( (s[i]) == ' ' && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 8053c9c:	8d 74 1f 01          	lea    0x1(%edi,%ebx,1),%esi
 8053ca0:	80 3e 20             	cmpb   $0x20,(%esi)
 8053ca3:	0f 84 50 22 00 00    	je     8055ef9 <main+0xc9b9>
 8053ca9:	8d 76 00             	lea    0x0(%esi),%esi
 8053cac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053cb0:	89 3c 24             	mov    %edi,(%esp)
 8053cb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053cb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053cbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053cbf:	b9 aa 77 00 00       	mov    $0x77aa,%ecx
 8053cc4:	e8 8f 4a 00 00       	call   8058758 <__afl_maybe_log>
 8053cc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ccd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053cd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053cd5:	8b 3c 24             	mov    (%esp),%edi
 8053cd8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 237);
}
// MCC Label 238
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
 8053cdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053ce0:	89 3c 24             	mov    %edi,(%esp)
 8053ce3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053ce7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053ceb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053cef:	b9 99 32 00 00       	mov    $0x3299,%ecx
 8053cf4:	e8 5f 4a 00 00       	call   8058758 <__afl_maybe_log>
 8053cf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053cfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053d01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053d05:	8b 3c 24             	mov    (%esp),%edi
 8053d08:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053d0c:	80 3e 09             	cmpb   $0x9,(%esi)
 8053d0f:	0f 84 98 21 00 00    	je     8055ead <main+0xc96d>
 8053d15:	8d 76 00             	lea    0x0(%esi),%esi
 8053d18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053d1c:	89 3c 24             	mov    %edi,(%esp)
 8053d1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053d23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053d27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053d2b:	b9 45 a9 00 00       	mov    $0xa945,%ecx
 8053d30:	e8 23 4a 00 00       	call   8058758 <__afl_maybe_log>
 8053d35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053d39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053d3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053d41:	8b 3c 24             	mov    (%esp),%edi
 8053d44:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 238);
}
// MCC Label 239
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 8053d48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053d4c:	89 3c 24             	mov    %edi,(%esp)
 8053d4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053d53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053d57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053d5b:	b9 6f 23 00 00       	mov    $0x236f,%ecx
 8053d60:	e8 f3 49 00 00       	call   8058758 <__afl_maybe_log>
 8053d65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053d69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053d6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053d71:	8b 3c 24             	mov    (%esp),%edi
 8053d74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053d78:	0f b6 1e             	movzbl (%esi),%ebx
 8053d7b:	80 fb 09             	cmp    $0x9,%bl
 8053d7e:	74 6c                	je     8053dec <main+0xa8ac>
 8053d80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053d84:	89 3c 24             	mov    %edi,(%esp)
 8053d87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053d8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053d8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053d93:	b9 a6 b2 00 00       	mov    $0xb2a6,%ecx
 8053d98:	e8 bb 49 00 00       	call   8058758 <__afl_maybe_log>
 8053d9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053da1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053da5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053da9:	8b 3c 24             	mov    (%esp),%edi
 8053dac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053db0:	80 fb 20             	cmp    $0x20,%bl
 8053db3:	0f 85 d5 01 00 00    	jne    8053f8e <main+0xaa4e>
 8053db9:	8d 76 00             	lea    0x0(%esi),%esi
 8053dbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053dc0:	89 3c 24             	mov    %edi,(%esp)
 8053dc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053dc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053dcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053dcf:	b9 30 a8 00 00       	mov    $0xa830,%ecx
 8053dd4:	e8 7f 49 00 00       	call   8058758 <__afl_maybe_log>
 8053dd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ddd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053de1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053de5:	8b 3c 24             	mov    (%esp),%edi
 8053de8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053dec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053df0:	89 3c 24             	mov    %edi,(%esp)
 8053df3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053df7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053dfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053dff:	b9 86 bc 00 00       	mov    $0xbc86,%ecx
 8053e04:	e8 4f 49 00 00       	call   8058758 <__afl_maybe_log>
 8053e09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053e0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053e11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053e15:	8b 3c 24             	mov    (%esp),%edi
 8053e18:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053e1c:	89 f1                	mov    %esi,%ecx
 8053e1e:	66 90                	xchg   %ax,%ax
	report_label_coverage("MCC", 239);
}
while (ISWHITE (s[i]))
 8053e20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053e24:	89 3c 24             	mov    %edi,(%esp)
 8053e27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053e2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053e2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053e33:	b9 6b 50 00 00       	mov    $0x506b,%ecx
 8053e38:	e8 1b 49 00 00       	call   8058758 <__afl_maybe_log>
 8053e3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053e41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053e45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053e49:	8b 3c 24             	mov    (%esp),%edi
 8053e4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053e50:	0f b6 11             	movzbl (%ecx),%edx
 8053e53:	89 cf                	mov    %ecx,%edi
 8053e55:	8d 49 01             	lea    0x1(%ecx),%ecx
 8053e58:	80 fa 09             	cmp    $0x9,%dl
 8053e5b:	74 c1                	je     8053e1e <main+0xa8de>
 8053e5d:	8d 76 00             	lea    0x0(%esi),%esi
 8053e60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053e64:	89 3c 24             	mov    %edi,(%esp)
 8053e67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053e6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053e6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053e73:	b9 13 39 00 00       	mov    $0x3913,%ecx
 8053e78:	e8 db 48 00 00       	call   8058758 <__afl_maybe_log>
 8053e7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053e81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053e85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053e89:	8b 3c 24             	mov    (%esp),%edi
 8053e8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053e90:	80 fa 20             	cmp    $0x20,%dl
 8053e93:	74 89                	je     8053e1e <main+0xa8de>
 8053e95:	8d 76 00             	lea    0x0(%esi),%esi
 8053e98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053e9c:	89 3c 24             	mov    %edi,(%esp)
 8053e9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053ea3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053ea7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053eab:	b9 f1 6b 00 00       	mov    $0x6bf1,%ecx
 8053eb0:	e8 a3 48 00 00       	call   8058758 <__afl_maybe_log>
 8053eb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053eb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ebd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ec1:	8b 3c 24             	mov    (%esp),%edi
 8053ec4:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 242
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 242);
}
// MCC Label 243
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
 8053ec8:	80 fa 09             	cmp    $0x9,%dl
 8053ecb:	74 7f                	je     8053f4c <main+0xaa0c>
 8053ecd:	8d 76 00             	lea    0x0(%esi),%esi
 8053ed0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053ed4:	89 3c 24             	mov    %edi,(%esp)
 8053ed7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053edb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053edf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053ee3:	b9 55 ff 00 00       	mov    $0xff55,%ecx
 8053ee8:	e8 6b 48 00 00       	call   8058758 <__afl_maybe_log>
 8053eed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ef1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ef5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ef9:	8b 3c 24             	mov    (%esp),%edi
 8053efc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053f00:	80 fa 20             	cmp    $0x20,%dl
 8053f03:	74 47                	je     8053f4c <main+0xaa0c>
 8053f05:	8d 76 00             	lea    0x0(%esi),%esi
 8053f08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053f0c:	89 3c 24             	mov    %edi,(%esp)
 8053f0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053f13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053f17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053f1b:	b9 a9 cb 00 00       	mov    $0xcba9,%ecx
 8053f20:	e8 33 48 00 00       	call   8058758 <__afl_maybe_log>
 8053f25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053f29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053f2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053f31:	8b 3c 24             	mov    (%esp),%edi
 8053f34:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 243);
 8053f38:	56                   	push   %esi
 8053f39:	56                   	push   %esi
 8053f3a:	68 f3 00 00 00       	push   $0xf3
 8053f3f:	68 de 70 06 08       	push   $0x80670de
 8053f44:	e8 77 21 00 00       	call   80560c0 <report_label_coverage>
 8053f49:	83 c4 10             	add    $0x10,%esp
}
;

  *hex_digest = (unsigned char *) &s[i];
 8053f4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053f50:	89 3c 24             	mov    %edi,(%esp)
 8053f53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053f57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053f5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053f5f:	b9 99 c9 00 00       	mov    $0xc999,%ecx
 8053f64:	e8 ef 47 00 00       	call   8058758 <__afl_maybe_log>
 8053f69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053f6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053f71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053f75:	8b 3c 24             	mov    (%esp),%edi
 8053f78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053f7c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  return true;
 8053f82:	bb 01 00 00 00       	mov    $0x1,%ebx
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 243);
}
;

  *hex_digest = (unsigned char *) &s[i];
 8053f87:	89 38                	mov    %edi,(%eax)
 8053f89:	e9 e8 a8 ff ff       	jmp    804e876 <main+0x5336>
 8053f8e:	66 90                	xchg   %ax,%ax
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 238);
}
// MCC Label 239
if(( !((s[i]) == ' ') && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 239);
 8053f90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053f94:	89 3c 24             	mov    %edi,(%esp)
 8053f97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053f9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053f9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053fa3:	b9 fd d4 00 00       	mov    $0xd4fd,%ecx
 8053fa8:	e8 ab 47 00 00       	call   8058758 <__afl_maybe_log>
 8053fad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053fb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053fb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053fb9:	8b 3c 24             	mov    (%esp),%edi
 8053fbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053fc0:	57                   	push   %edi
 8053fc1:	57                   	push   %edi
 8053fc2:	68 ef 00 00 00       	push   $0xef
 8053fc7:	68 de 70 06 08       	push   $0x80670de
 8053fcc:	e8 ef 20 00 00       	call   80560c0 <report_label_coverage>
 8053fd1:	83 c4 10             	add    $0x10,%esp
 8053fd4:	e9 13 fe ff ff       	jmp    8053dec <main+0xa8ac>
 8053fd9:	8d 76 00             	lea    0x0(%esi),%esi
if(!prefix_tag && !(needs_escape) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 509);
}
// MCC Label 510
if(!(!prefix_tag) && needs_escape ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 510);
 8053fdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053fe0:	89 3c 24             	mov    %edi,(%esp)
 8053fe3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053fe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053feb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053fef:	b9 4c 6f 00 00       	mov    $0x6f4c,%ecx
 8053ff4:	e8 5f 47 00 00       	call   8058758 <__afl_maybe_log>
 8053ff9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ffd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054001:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054005:	8b 3c 24             	mov    (%esp),%edi
 8054008:	8d 64 24 10          	lea    0x10(%esp),%esp
 805400c:	53                   	push   %ebx
 805400d:	53                   	push   %ebx
 805400e:	68 fe 01 00 00       	push   $0x1fe
 8054013:	68 de 70 06 08       	push   $0x80670de
 8054018:	e8 a3 20 00 00       	call   80560c0 <report_label_coverage>
 805401d:	83 c4 10             	add    $0x10,%esp
 8054020:	e9 bc 7a ff ff       	jmp    804bae1 <main+0x25a1>
 8054025:	8d 76 00             	lea    0x0(%esi),%esi
if(!prefix_tag && needs_escape ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 508);
}
// MCC Label 509
if(!prefix_tag && !(needs_escape) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 509);
 8054028:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805402c:	89 3c 24             	mov    %edi,(%esp)
 805402f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054033:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054037:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805403b:	b9 d1 aa 00 00       	mov    $0xaad1,%ecx
 8054040:	e8 13 47 00 00       	call   8058758 <__afl_maybe_log>
 8054045:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054049:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805404d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054051:	8b 3c 24             	mov    (%esp),%edi
 8054054:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054058:	57                   	push   %edi
 8054059:	57                   	push   %edi
 805405a:	68 fd 01 00 00       	push   $0x1fd
 805405f:	68 de 70 06 08       	push   $0x80670de
 8054064:	e8 57 20 00 00       	call   80560c0 <report_label_coverage>
 8054069:	83 c4 10             	add    $0x10,%esp
 805406c:	e9 3f 79 ff ff       	jmp    804b9b0 <main+0x2470>
 8054071:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("COR", 507);
}

// MCC Label 508
if(!prefix_tag && needs_escape ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 508);
 8054074:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054078:	89 3c 24             	mov    %edi,(%esp)
 805407b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805407f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054083:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054087:	b9 1b f4 00 00       	mov    $0xf41b,%ecx
 805408c:	e8 c7 46 00 00       	call   8058758 <__afl_maybe_log>
 8054091:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054095:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054099:	8b 54 24 04          	mov    0x4(%esp),%edx
 805409d:	8b 3c 24             	mov    (%esp),%edi
 80540a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80540a4:	50                   	push   %eax
 80540a5:	50                   	push   %eax
 80540a6:	68 fc 01 00 00       	push   $0x1fc
 80540ab:	68 de 70 06 08       	push   $0x80670de
 80540b0:	e8 0b 20 00 00       	call   80560c0 <report_label_coverage>
 80540b5:	83 c4 10             	add    $0x10,%esp
 80540b8:	e9 7f 78 ff ff       	jmp    804b93c <main+0x23fc>
 80540bd:	8d 76 00             	lea    0x0(%esi),%esi
if(( !(s_len - i == 1) ) && ( s[i] != ' ' && !(s[i] != '*') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 273);
}
// MCC Label 274
if(( !(s_len - i == 1) ) && ( !(s[i] != ' ') && s[i] != '*' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 274);
 80540c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80540c4:	89 3c 24             	mov    %edi,(%esp)
 80540c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80540cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80540cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80540d3:	b9 75 5a 00 00       	mov    $0x5a75,%ecx
 80540d8:	e8 7b 46 00 00       	call   8058758 <__afl_maybe_log>
 80540dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80540e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80540e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80540e9:	8b 3c 24             	mov    (%esp),%edi
 80540ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80540f0:	50                   	push   %eax
 80540f1:	50                   	push   %eax
 80540f2:	68 12 01 00 00       	push   $0x112
 80540f7:	68 de 70 06 08       	push   $0x80670de
 80540fc:	e8 bf 1f 00 00       	call   80560c0 <report_label_coverage>
 8054101:	83 c4 10             	add    $0x10,%esp
 8054104:	e9 1f b9 ff ff       	jmp    804fa28 <main+0x64e8>
 8054109:	8d 76 00             	lea    0x0(%esi),%esi
if(( !(s_len - i == 1) ) && ( s[i] != ' ' && s[i] != '*' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 272);
}
// MCC Label 273
if(( !(s_len - i == 1) ) && ( s[i] != ' ' && !(s[i] != '*') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 273);
 805410c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054110:	89 3c 24             	mov    %edi,(%esp)
 8054113:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054117:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805411b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805411f:	b9 22 ba 00 00       	mov    $0xba22,%ecx
 8054124:	e8 2f 46 00 00       	call   8058758 <__afl_maybe_log>
 8054129:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805412d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054131:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054135:	8b 3c 24             	mov    (%esp),%edi
 8054138:	8d 64 24 10          	lea    0x10(%esp),%esp
 805413c:	50                   	push   %eax
 805413d:	50                   	push   %eax
 805413e:	68 11 01 00 00       	push   $0x111
 8054143:	68 de 70 06 08       	push   $0x80670de
 8054148:	e8 73 1f 00 00       	call   80560c0 <report_label_coverage>
 805414d:	83 c4 10             	add    $0x10,%esp
 8054150:	e9 67 b8 ff ff       	jmp    804f9bc <main+0x647c>
 8054155:	8d 76 00             	lea    0x0(%esi),%esi
         that the first file name does not have
         a leading ' ' or '*'.  */
      
// ABS Label 276
if(bsd_reversed < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 276);
 8054158:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805415c:	89 3c 24             	mov    %edi,(%esp)
 805415f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054163:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054167:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805416b:	b9 e7 37 00 00       	mov    $0x37e7,%ecx
 8054170:	e8 e3 45 00 00       	call   8058758 <__afl_maybe_log>
 8054175:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054179:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805417d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054181:	8b 3c 24             	mov    (%esp),%edi
 8054184:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054188:	50                   	push   %eax
 8054189:	50                   	push   %eax
 805418a:	68 14 01 00 00       	push   $0x114
 805418f:	68 d0 70 06 08       	push   $0x80670d0
 8054194:	e8 27 1f 00 00       	call   80560c0 <report_label_coverage>
 8054199:	83 c4 10             	add    $0x10,%esp
 805419c:	e9 9b b9 ff ff       	jmp    804fb3c <main+0x65fc>
 80541a1:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 470
if(quiet && !(!do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 470);
}
// MCC Label 471
if(!(quiet) && !do_check ) {asm volatile (""::: "memory");
 80541a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80541a8:	89 3c 24             	mov    %edi,(%esp)
 80541ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80541af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80541b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80541b7:	b9 87 a1 00 00       	mov    $0xa187,%ecx
 80541bc:	e8 97 45 00 00       	call   8058758 <__afl_maybe_log>
 80541c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80541c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80541c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80541cd:	8b 3c 24             	mov    (%esp),%edi
 80541d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80541d4:	80 3d 01 b3 06 08 00 	cmpb   $0x0,0x806b301
 80541db:	0f 85 af 6a ff ff    	jne    804ac90 <main+0x1750>
 80541e1:	8d 76 00             	lea    0x0(%esi),%esi
 80541e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80541e8:	89 3c 24             	mov    %edi,(%esp)
 80541eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80541ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80541f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80541f7:	b9 f1 da 00 00       	mov    $0xdaf1,%ecx
 80541fc:	e8 57 45 00 00       	call   8058758 <__afl_maybe_log>
 8054201:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054205:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054209:	8b 54 24 04          	mov    0x4(%esp),%edx
 805420d:	8b 3c 24             	mov    (%esp),%edi
 8054210:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 471);
 8054214:	50                   	push   %eax
 8054215:	50                   	push   %eax
 8054216:	68 d7 01 00 00       	push   $0x1d7
 805421b:	68 de 70 06 08       	push   $0x80670de
 8054220:	e8 9b 1e 00 00       	call   80560c0 <report_label_coverage>
 8054225:	83 c4 10             	add    $0x10,%esp
 8054228:	e9 63 6a ff ff       	jmp    804ac90 <main+0x1750>
 805422d:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 465
if(warn && !(!do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 465);
}
// MCC Label 466
if(!(warn) && !do_check ) {asm volatile (""::: "memory");
 8054230:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054234:	89 3c 24             	mov    %edi,(%esp)
 8054237:	89 54 24 04          	mov    %edx,0x4(%esp)
 805423b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805423f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054243:	b9 b8 18 00 00       	mov    $0x18b8,%ecx
 8054248:	e8 0b 45 00 00       	call   8058758 <__afl_maybe_log>
 805424d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054251:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054255:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054259:	8b 3c 24             	mov    (%esp),%edi
 805425c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054260:	80 3d 02 b3 06 08 00 	cmpb   $0x0,0x806b302
 8054267:	0f 85 cf 67 ff ff    	jne    804aa3c <main+0x14fc>
 805426d:	8d 76 00             	lea    0x0(%esi),%esi
 8054270:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054274:	89 3c 24             	mov    %edi,(%esp)
 8054277:	89 54 24 04          	mov    %edx,0x4(%esp)
 805427b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805427f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054283:	b9 92 b2 00 00       	mov    $0xb292,%ecx
 8054288:	e8 cb 44 00 00       	call   8058758 <__afl_maybe_log>
 805428d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054291:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054295:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054299:	8b 3c 24             	mov    (%esp),%edi
 805429c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 466);
 80542a0:	51                   	push   %ecx
 80542a1:	51                   	push   %ecx
 80542a2:	68 d2 01 00 00       	push   $0x1d2
 80542a7:	68 de 70 06 08       	push   $0x80670de
 80542ac:	e8 0f 1e 00 00       	call   80560c0 <report_label_coverage>
 80542b1:	83 c4 10             	add    $0x10,%esp
 80542b4:	e9 83 67 ff ff       	jmp    804aa3c <main+0x14fc>
 80542b9:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 460
if(status_only && !(!do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 460);
}
// MCC Label 461
if(!(status_only) && !do_check ) {asm volatile (""::: "memory");
 80542bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80542c0:	89 3c 24             	mov    %edi,(%esp)
 80542c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80542c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80542cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80542cf:	b9 5c d4 00 00       	mov    $0xd45c,%ecx
 80542d4:	e8 7f 44 00 00       	call   8058758 <__afl_maybe_log>
 80542d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80542dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80542e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80542e5:	8b 3c 24             	mov    (%esp),%edi
 80542e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80542ec:	80 3d 03 b3 06 08 00 	cmpb   $0x0,0x806b303
 80542f3:	0f 85 ef 64 ff ff    	jne    804a7e8 <main+0x12a8>
 80542f9:	8d 76 00             	lea    0x0(%esi),%esi
 80542fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054300:	89 3c 24             	mov    %edi,(%esp)
 8054303:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054307:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805430b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805430f:	b9 d7 20 00 00       	mov    $0x20d7,%ecx
 8054314:	e8 3f 44 00 00       	call   8058758 <__afl_maybe_log>
 8054319:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805431d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054321:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054325:	8b 3c 24             	mov    (%esp),%edi
 8054328:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 461);
 805432c:	50                   	push   %eax
 805432d:	50                   	push   %eax
 805432e:	68 cd 01 00 00       	push   $0x1cd
 8054333:	68 de 70 06 08       	push   $0x80670de
 8054338:	e8 83 1d 00 00       	call   80560c0 <report_label_coverage>
 805433d:	83 c4 10             	add    $0x10,%esp
 8054340:	e9 a3 64 ff ff       	jmp    804a7e8 <main+0x12a8>
 8054345:	8d 76 00             	lea    0x0(%esi),%esi
    }
}


  if (!is_stdin) {
    int temp_1 = rpl_fclose(checkfile_stream);
 8054348:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805434c:	89 3c 24             	mov    %edi,(%esp)
 805434f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054353:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054357:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805435b:	b9 d0 26 00 00       	mov    $0x26d0,%ecx
 8054360:	e8 f3 43 00 00       	call   8058758 <__afl_maybe_log>
 8054365:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054369:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805436d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054371:	8b 3c 24             	mov    (%esp),%edi
 8054374:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054378:	83 ec 0c             	sub    $0xc,%esp
 805437b:	ff 75 84             	pushl  -0x7c(%ebp)
 805437e:	e8 dd fb 00 00       	call   8063f60 <rpl_fclose>
    
// ABS Label 421
if(temp_1 < 0)  {asm volatile (""::: "memory");
 8054383:	83 c4 10             	add    $0x10,%esp
 8054386:	85 c0                	test   %eax,%eax
 8054388:	0f 88 19 18 00 00    	js     8055ba7 <main+0xc667>
 805438e:	66 90                	xchg   %ax,%ax
 8054390:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054394:	89 3c 24             	mov    %edi,(%esp)
 8054397:	89 54 24 04          	mov    %edx,0x4(%esp)
 805439b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805439f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80543a3:	b9 0f 64 00 00       	mov    $0x640f,%ecx
 80543a8:	e8 ab 43 00 00       	call   8058758 <__afl_maybe_log>
 80543ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80543b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80543b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80543b9:	8b 3c 24             	mov    (%esp),%edi
 80543bc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 421);
}

// ROR Label 422
if((temp_1 == 0) != (temp_1 != 0))  {asm volatile (""::: "memory");
 80543c0:	0f 95 c3             	setne  %bl
 80543c3:	90                   	nop
	report_label_coverage("ROR", 422);
 80543c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80543c8:	89 3c 24             	mov    %edi,(%esp)
 80543cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80543cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80543d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80543d7:	b9 1f 46 00 00       	mov    $0x461f,%ecx
 80543dc:	e8 77 43 00 00       	call   8058758 <__afl_maybe_log>
 80543e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80543e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80543e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80543ed:	8b 3c 24             	mov    (%esp),%edi
 80543f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80543f4:	50                   	push   %eax
 80543f5:	50                   	push   %eax
 80543f6:	68 a6 01 00 00       	push   $0x1a6
 80543fb:	68 c8 70 06 08       	push   $0x80670c8
 8054400:	e8 bb 1c 00 00       	call   80560c0 <report_label_coverage>
 8054405:	83 c4 10             	add    $0x10,%esp
}
if (temp_1 != 0) {
 8054408:	84 db                	test   %bl,%bl
 805440a:	0f 84 d4 aa ff ff    	je     804eee4 <main+0x59a4>
 8054410:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054414:	89 3c 24             	mov    %edi,(%esp)
 8054417:	89 54 24 04          	mov    %edx,0x4(%esp)
 805441b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805441f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054423:	b9 63 26 00 00       	mov    $0x2663,%ecx
 8054428:	e8 2b 43 00 00       	call   8058758 <__afl_maybe_log>
 805442d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054431:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054435:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054439:	8b 3c 24             	mov    (%esp),%edi
 805443c:	8d 64 24 10          	lea    0x10(%esp),%esp
        
// ABS Label 423
if((*__errno_location()) < 0)  {asm volatile (""::: "memory");
 8054440:	e8 9b 4f ff ff       	call   80493e0 <__errno_location@plt>
 8054445:	83 38 00             	cmpl   $0x0,(%eax)
 8054448:	89 c3                	mov    %eax,%ebx
 805444a:	0f 89 a0 ec ff ff    	jns    80530f0 <main+0x9bb0>
 8054450:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054454:	89 3c 24             	mov    %edi,(%esp)
 8054457:	89 54 24 04          	mov    %edx,0x4(%esp)
 805445b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805445f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054463:	b9 3d 68 00 00       	mov    $0x683d,%ecx
 8054468:	e8 eb 42 00 00       	call   8058758 <__afl_maybe_log>
 805446d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054471:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054475:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054479:	8b 3c 24             	mov    (%esp),%edi
 805447c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 423);
 8054480:	50                   	push   %eax
 8054481:	50                   	push   %eax
 8054482:	68 a7 01 00 00       	push   $0x1a7
 8054487:	68 d0 70 06 08       	push   $0x80670d0
 805448c:	e8 2f 1c 00 00       	call   80560c0 <report_label_coverage>
 8054491:	83 c4 10             	add    $0x10,%esp
 8054494:	e9 57 ec ff ff       	jmp    80530f0 <main+0x9bb0>
 8054499:	8d 76 00             	lea    0x0(%esi),%esi
        
// ABS Label 420
if(checkfile_name < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 420);
}
error(0, 0, gettext("%s: read error"), checkfile_name);
 805449c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80544a0:	89 3c 24             	mov    %edi,(%esp)
 80544a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80544a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80544ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80544af:	b9 61 9c 00 00       	mov    $0x9c61,%ecx
 80544b4:	e8 9f 42 00 00       	call   8058758 <__afl_maybe_log>
 80544b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80544bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80544c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80544c5:	8b 3c 24             	mov    (%esp),%edi
 80544c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80544cc:	51                   	push   %ecx
 80544cd:	6a 05                	push   $0x5
        return 0;
 80544cf:	31 ff                	xor    %edi,%edi
        
// ABS Label 420
if(checkfile_name < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 420);
}
error(0, 0, gettext("%s: read error"), checkfile_name);
 80544d1:	68 1a 72 06 08       	push   $0x806721a
 80544d6:	6a 00                	push   $0x0
 80544d8:	e8 f3 4c ff ff       	call   80491d0 <dcgettext@plt>
 80544dd:	ff 75 80             	pushl  -0x80(%ebp)
 80544e0:	50                   	push   %eax
 80544e1:	6a 00                	push   $0x0
 80544e3:	6a 00                	push   $0x0
 80544e5:	e8 a6 4d ff ff       	call   8049290 <error@plt>
 80544ea:	83 c4 20             	add    $0x20,%esp
 80544ed:	e9 49 b2 ff ff       	jmp    804f73b <main+0x61fb>
 80544f2:	66 90                	xchg   %ax,%ax
	report_label_coverage("ROR", 426);
}
if (n_properly_formatted_lines == 0)
    {
      /* Warn if no tests are found.  */
      error (0, 0, _("%s: no properly formatted %s checksum lines found"),
 80544f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80544f8:	89 3c 24             	mov    %edi,(%esp)
 80544fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80544ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054503:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054507:	b9 9f ae 00 00       	mov    $0xae9f,%ecx
 805450c:	e8 47 42 00 00       	call   8058758 <__afl_maybe_log>
 8054511:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054515:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054519:	8b 54 24 04          	mov    0x4(%esp),%edx
 805451d:	8b 3c 24             	mov    (%esp),%edi
 8054520:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054524:	50                   	push   %eax
 8054525:	6a 05                	push   $0x5
 8054527:	68 cc 79 06 08       	push   $0x80679cc
 805452c:	6a 00                	push   $0x0
 805452e:	e8 9d 4c ff ff       	call   80491d0 <dcgettext@plt>
 8054533:	c7 04 24 eb 70 06 08 	movl   $0x80670eb,(%esp)
 805453a:	ff 75 80             	pushl  -0x80(%ebp)
 805453d:	e9 a0 b0 ff ff       	jmp    804f5e2 <main+0x60a2>
 8054542:	66 90                	xchg   %ax,%ax
	report_label_coverage("ABS", 501);
}
if (temp_1)
        ok = 0;
    else {
        _Bool needs_escape = strchr(file, '\\') || strchr(file, '\n');
 8054544:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054548:	89 3c 24             	mov    %edi,(%esp)
 805454b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805454f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054553:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054557:	b9 b9 f9 00 00       	mov    $0xf9b9,%ecx
 805455c:	e8 f7 41 00 00       	call   8058758 <__afl_maybe_log>
 8054561:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054565:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054569:	8b 54 24 04          	mov    0x4(%esp),%edx
 805456d:	8b 3c 24             	mov    (%esp),%edi
 8054570:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054574:	51                   	push   %ecx
 8054575:	51                   	push   %ecx
 8054576:	6a 0a                	push   $0xa
 8054578:	ff 75 80             	pushl  -0x80(%ebp)
 805457b:	e8 c0 4d ff ff       	call   8049340 <strchr@plt>
 8054580:	83 c4 10             	add    $0x10,%esp
 8054583:	85 c0                	test   %eax,%eax
 8054585:	0f 95 c3             	setne  %bl
        
// ABS Label 502
if(prefix_tag < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 502);
}
if (prefix_tag) {
 8054588:	80 bd 7e ff ff ff 00 	cmpb   $0x0,-0x82(%ebp)
	report_label_coverage("ABS", 501);
}
if (temp_1)
        ok = 0;
    else {
        _Bool needs_escape = strchr(file, '\\') || strchr(file, '\n');
 805458f:	0f b6 f3             	movzbl %bl,%esi
        
// ABS Label 502
if(prefix_tag < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 502);
}
if (prefix_tag) {
 8054592:	74 71                	je     8054605 <main+0xb0c5>
 8054594:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054598:	89 3c 24             	mov    %edi,(%esp)
 805459b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805459f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80545a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80545a7:	b9 bb 74 00 00       	mov    $0x74bb,%ecx
 80545ac:	e8 a7 41 00 00       	call   8058758 <__afl_maybe_log>
 80545b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80545b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80545b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80545bd:	8b 3c 24             	mov    (%esp),%edi
 80545c0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 501);
}
if (temp_1)
        ok = 0;
    else {
        _Bool needs_escape = strchr(file, '\\') || strchr(file, '\n');
 80545c4:	31 f6                	xor    %esi,%esi
            
// ABS Label 506
if(needs_escape < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 506);
}
if (needs_escape)
 80545c6:	84 db                	test   %bl,%bl
 80545c8:	0f 84 f8 71 ff ff    	je     804b7c6 <main+0x2286>
 80545ce:	66 90                	xchg   %ax,%ax
 80545d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80545d4:	89 3c 24             	mov    %edi,(%esp)
 80545d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80545db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80545df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80545e3:	b9 8b d5 00 00       	mov    $0xd58b,%ecx
 80545e8:	e8 6b 41 00 00       	call   8058758 <__afl_maybe_log>
 80545ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80545f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80545f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80545f9:	8b 3c 24             	mov    (%esp),%edi
 80545fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054600:	e9 3f 71 ff ff       	jmp    804b744 <main+0x2204>
 8054605:	8d 76 00             	lea    0x0(%esi),%esi
fputs_unlocked(") = ", stdout);
        }
        size_t i;
        
// COR Label 507
if((!prefix_tag || needs_escape) != (!prefix_tag && needs_escape))  {asm volatile (""::: "memory");
 8054608:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805460c:	89 3c 24             	mov    %edi,(%esp)
 805460f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054613:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054617:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805461b:	b9 b8 11 00 00       	mov    $0x11b8,%ecx
 8054620:	e8 33 41 00 00       	call   8058758 <__afl_maybe_log>
 8054625:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054629:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805462d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054631:	8b 3c 24             	mov    (%esp),%edi
 8054634:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054638:	80 fb 01             	cmp    $0x1,%bl
 805463b:	0f 85 4b 72 ff ff    	jne    804b88c <main+0x234c>
 8054641:	8d 76 00             	lea    0x0(%esi),%esi
 8054644:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054648:	89 3c 24             	mov    %edi,(%esp)
 805464b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805464f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054653:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054657:	b9 4f 74 00 00       	mov    $0x744f,%ecx
 805465c:	e8 f7 40 00 00       	call   8058758 <__afl_maybe_log>
 8054661:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054665:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054669:	8b 54 24 04          	mov    0x4(%esp),%edx
 805466d:	8b 3c 24             	mov    (%esp),%edi
 8054670:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054674:	e9 57 72 ff ff       	jmp    804b8d0 <main+0x2390>
 8054679:	8d 76 00             	lea    0x0(%esi),%esi
      usage (EXIT_FAILURE);
    }

  
// COR Label 458
if((status_only || !do_check) != (status_only && !do_check))  {asm volatile (""::: "memory");
 805467c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054680:	89 3c 24             	mov    %edi,(%esp)
 8054683:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054687:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805468b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805468f:	b9 d9 db 00 00       	mov    $0xdbd9,%ecx
 8054694:	e8 bf 40 00 00       	call   8058758 <__afl_maybe_log>
 8054699:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805469d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80546a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80546a5:	8b 3c 24             	mov    (%esp),%edi
 80546a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80546ac:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 80546b3:	0f 85 10 09 00 00    	jne    8054fc9 <main+0xba89>
 80546b9:	8d 76 00             	lea    0x0(%esi),%esi
 80546bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80546c0:	89 3c 24             	mov    %edi,(%esp)
 80546c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80546c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80546cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80546cf:	b9 3c 7c 00 00       	mov    $0x7c3c,%ecx
 80546d4:	e8 7f 40 00 00       	call   8058758 <__afl_maybe_log>
 80546d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80546dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80546e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80546e5:	8b 3c 24             	mov    (%esp),%edi
 80546e8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 458);
}

// MCC Label 459
if(status_only && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 459);
 80546ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80546f0:	89 3c 24             	mov    %edi,(%esp)
 80546f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80546f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80546fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80546ff:	b9 65 45 00 00       	mov    $0x4565,%ecx
 8054704:	e8 4f 40 00 00       	call   8058758 <__afl_maybe_log>
 8054709:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805470d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054711:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054715:	8b 3c 24             	mov    (%esp),%edi
 8054718:	8d 64 24 10          	lea    0x10(%esp),%esp
 805471c:	51                   	push   %ecx
 805471d:	51                   	push   %ecx
 805471e:	68 cb 01 00 00       	push   $0x1cb
 8054723:	68 de 70 06 08       	push   $0x80670de
 8054728:	e8 93 19 00 00       	call   80560c0 <report_label_coverage>
 805472d:	83 c4 10             	add    $0x10,%esp
 8054730:	e9 4f 5f ff ff       	jmp    804a684 <main+0x1144>
 8054735:	8d 76 00             	lea    0x0(%esi),%esi
      usage (EXIT_FAILURE);
    }

  
// COR Label 463
if((warn || !do_check) != (warn && !do_check))  {asm volatile (""::: "memory");
 8054738:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805473c:	89 3c 24             	mov    %edi,(%esp)
 805473f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054743:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054747:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805474b:	b9 e6 83 00 00       	mov    $0x83e6,%ecx
 8054750:	e8 03 40 00 00       	call   8058758 <__afl_maybe_log>
 8054755:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054759:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805475d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054761:	8b 3c 24             	mov    (%esp),%edi
 8054764:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054768:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 805476f:	0f 85 c6 07 00 00    	jne    8054f3b <main+0xb9fb>
 8054775:	8d 76 00             	lea    0x0(%esi),%esi
 8054778:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805477c:	89 3c 24             	mov    %edi,(%esp)
 805477f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054783:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054787:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805478b:	b9 93 89 00 00       	mov    $0x8993,%ecx
 8054790:	e8 c3 3f 00 00       	call   8058758 <__afl_maybe_log>
 8054795:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054799:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805479d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80547a1:	8b 3c 24             	mov    (%esp),%edi
 80547a4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 463);
}

// MCC Label 464
if(warn && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 464);
 80547a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80547ac:	89 3c 24             	mov    %edi,(%esp)
 80547af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80547b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80547b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80547bb:	b9 9e 5c 00 00       	mov    $0x5c9e,%ecx
 80547c0:	e8 93 3f 00 00       	call   8058758 <__afl_maybe_log>
 80547c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80547c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80547cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80547d1:	8b 3c 24             	mov    (%esp),%edi
 80547d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80547d8:	50                   	push   %eax
 80547d9:	50                   	push   %eax
 80547da:	68 d0 01 00 00       	push   $0x1d0
 80547df:	68 de 70 06 08       	push   $0x80670de
 80547e4:	e8 d7 18 00 00       	call   80560c0 <report_label_coverage>
 80547e9:	83 c4 10             	add    $0x10,%esp
 80547ec:	e9 e7 60 ff ff       	jmp    804a8d8 <main+0x1398>
 80547f1:	8d 76 00             	lea    0x0(%esi),%esi
      usage (EXIT_FAILURE);
    }

  
// COR Label 468
if((quiet || !do_check) != (quiet && !do_check))  {asm volatile (""::: "memory");
 80547f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80547f8:	89 3c 24             	mov    %edi,(%esp)
 80547fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80547ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054803:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054807:	b9 01 21 00 00       	mov    $0x2101,%ecx
 805480c:	e8 47 3f 00 00       	call   8058758 <__afl_maybe_log>
 8054811:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054815:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054819:	8b 54 24 04          	mov    0x4(%esp),%edx
 805481d:	8b 3c 24             	mov    (%esp),%edi
 8054820:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054824:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 805482b:	0f 85 c0 08 00 00    	jne    80550f1 <main+0xbbb1>
 8054831:	8d 76 00             	lea    0x0(%esi),%esi
 8054834:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054838:	89 3c 24             	mov    %edi,(%esp)
 805483b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805483f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054843:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054847:	b9 1d 85 00 00       	mov    $0x851d,%ecx
 805484c:	e8 07 3f 00 00       	call   8058758 <__afl_maybe_log>
 8054851:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054855:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054859:	8b 54 24 04          	mov    0x4(%esp),%edx
 805485d:	8b 3c 24             	mov    (%esp),%edi
 8054860:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 468);
}

// MCC Label 469
if(quiet && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 469);
 8054864:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054868:	89 3c 24             	mov    %edi,(%esp)
 805486b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805486f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054873:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054877:	b9 36 54 00 00       	mov    $0x5436,%ecx
 805487c:	e8 d7 3e 00 00       	call   8058758 <__afl_maybe_log>
 8054881:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054885:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054889:	8b 54 24 04          	mov    0x4(%esp),%edx
 805488d:	8b 3c 24             	mov    (%esp),%edi
 8054890:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054894:	50                   	push   %eax
 8054895:	50                   	push   %eax
 8054896:	68 d5 01 00 00       	push   $0x1d5
 805489b:	68 de 70 06 08       	push   $0x80670de
 80548a0:	e8 1b 18 00 00       	call   80560c0 <report_label_coverage>
 80548a5:	83 c4 10             	add    $0x10,%esp
 80548a8:	e9 7f 62 ff ff       	jmp    804ab2c <main+0x15ec>
 80548ad:	8d 76 00             	lea    0x0(%esi),%esi
      bsd_reversed = 1;
    }
  else { 
// ABS Label 278
if(bsd_reversed < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 278);
 80548b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80548b4:	89 3c 24             	mov    %edi,(%esp)
 80548b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80548bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80548bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80548c3:	b9 97 e5 00 00       	mov    $0xe597,%ecx
 80548c8:	e8 8b 3e 00 00       	call   8058758 <__afl_maybe_log>
 80548cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80548d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80548d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80548d9:	8b 3c 24             	mov    (%esp),%edi
 80548dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80548e0:	51                   	push   %ecx
 80548e1:	51                   	push   %ecx
 80548e2:	68 16 01 00 00       	push   $0x116
 80548e7:	68 d0 70 06 08       	push   $0x80670d0
 80548ec:	e8 cf 17 00 00       	call   80560c0 <report_label_coverage>
 80548f1:	83 c4 10             	add    $0x10,%esp
 80548f4:	e9 bb df ff ff       	jmp    80528b4 <main+0x9374>
 80548f9:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 220
if(i && !(s[i] != ')') ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 220);
}
// MCC Label 221
if(!(i) && s[i] != ')' ) {asm volatile (""::: "memory");
 80548fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054900:	89 3c 24             	mov    %edi,(%esp)
 8054903:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054907:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805490b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805490f:	b9 54 18 00 00       	mov    $0x1854,%ecx
 8054914:	e8 3f 3e 00 00       	call   8058758 <__afl_maybe_log>
 8054919:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805491d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054921:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054925:	8b 3c 24             	mov    (%esp),%edi
 8054928:	8d 64 24 10          	lea    0x10(%esp),%esp
 805492c:	80 3e 29             	cmpb   $0x29,(%esi)
 805492f:	0f 84 80 0b 00 00    	je     80554b5 <main+0xbf75>
 8054935:	8d 76 00             	lea    0x0(%esi),%esi
 8054938:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805493c:	89 3c 24             	mov    %edi,(%esp)
 805493f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054943:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054947:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805494b:	b9 97 6b 00 00       	mov    $0x6b97,%ecx
 8054950:	e8 03 3e 00 00       	call   8058758 <__afl_maybe_log>
 8054955:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054959:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805495d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054961:	8b 3c 24             	mov    (%esp),%edi
 8054964:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 221);
 8054968:	50                   	push   %eax
 8054969:	50                   	push   %eax
 805496a:	68 dd 00 00 00       	push   $0xdd
 805496f:	68 de 70 06 08       	push   $0x80670de
 8054974:	e8 47 17 00 00       	call   80560c0 <report_label_coverage>
}
// MCC Label 222
if(!(i) && !(s[i] != ')') ) {asm volatile (""::: "memory");
 8054979:	83 c4 10             	add    $0x10,%esp
 805497c:	80 3e 29             	cmpb   $0x29,(%esi)
 805497f:	0f 84 30 0b 00 00    	je     80554b5 <main+0xbf75>
 8054985:	8d 76 00             	lea    0x0(%esi),%esi
 8054988:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805498c:	89 3c 24             	mov    %edi,(%esp)
 805498f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054993:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054997:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805499b:	b9 f2 10 00 00       	mov    $0x10f2,%ecx
 80549a0:	e8 b3 3d 00 00       	call   8058758 <__afl_maybe_log>
 80549a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80549a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80549ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80549b1:	8b 3c 24             	mov    (%esp),%edi
 80549b4:	8d 64 24 10          	lea    0x10(%esp),%esp
;

  
// ROR Label 223
if((s[i] == ')') != (s[i] != ')'))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 223);
 80549b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80549bc:	89 3c 24             	mov    %edi,(%esp)
 80549bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80549c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80549c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80549cb:	b9 51 a3 00 00       	mov    $0xa351,%ecx
 80549d0:	e8 83 3d 00 00       	call   8058758 <__afl_maybe_log>
 80549d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80549d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80549dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80549e1:	8b 3c 24             	mov    (%esp),%edi
 80549e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80549e8:	50                   	push   %eax
 80549e9:	50                   	push   %eax
 80549ea:	68 df 00 00 00       	push   $0xdf
 80549ef:	68 c8 70 06 08       	push   $0x80670c8
 80549f4:	e8 c7 16 00 00       	call   80560c0 <report_label_coverage>
 80549f9:	83 c4 10             	add    $0x10,%esp
 80549fc:	e9 f7 ed ff ff       	jmp    80537f8 <main+0xa2b8>
 8054a01:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 213
if(i && !(s[i] != ')') ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 213);
}
// MCC Label 214
if(!(i) && s[i] != ')' ) {asm volatile (""::: "memory");
 8054a04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054a08:	89 3c 24             	mov    %edi,(%esp)
 8054a0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054a0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054a13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054a17:	b9 9f f1 00 00       	mov    $0xf19f,%ecx
 8054a1c:	e8 37 3d 00 00       	call   8058758 <__afl_maybe_log>
 8054a21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054a25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054a29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054a2d:	8b 3c 24             	mov    (%esp),%edi
 8054a30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054a34:	80 38 29             	cmpb   $0x29,(%eax)
 8054a37:	0f 84 87 00 00 00    	je     8054ac4 <main+0xb584>
 8054a3d:	8d 76 00             	lea    0x0(%esi),%esi
 8054a40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054a44:	89 3c 24             	mov    %edi,(%esp)
 8054a47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054a4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054a4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054a53:	b9 1b 4d 00 00       	mov    $0x4d1b,%ecx
 8054a58:	e8 fb 3c 00 00       	call   8058758 <__afl_maybe_log>
 8054a5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054a61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054a65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054a69:	8b 3c 24             	mov    (%esp),%edi
 8054a6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054a70:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	report_label_coverage("MCC", 214);
 8054a73:	56                   	push   %esi
 8054a74:	56                   	push   %esi
 8054a75:	68 d6 00 00 00       	push   $0xd6
 8054a7a:	68 de 70 06 08       	push   $0x80670de
 8054a7f:	e8 3c 16 00 00       	call   80560c0 <report_label_coverage>
}
// MCC Label 215
if(!(i) && !(s[i] != ')') ) {asm volatile (""::: "memory");
 8054a84:	8b 75 a4             	mov    -0x5c(%ebp),%esi
 8054a87:	83 c4 10             	add    $0x10,%esp
 8054a8a:	80 3e 29             	cmpb   $0x29,(%esi)
 8054a8d:	0f 85 20 eb ff ff    	jne    80535b3 <main+0xa073>
 8054a93:	90                   	nop
 8054a94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054a98:	89 3c 24             	mov    %edi,(%esp)
 8054a9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054a9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054aa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054aa7:	b9 82 3e 00 00       	mov    $0x3e82,%ecx
 8054aac:	e8 a7 3c 00 00       	call   8058758 <__afl_maybe_log>
 8054ab1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054ab5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054ab9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054abd:	8b 3c 24             	mov    (%esp),%edi
 8054ac0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 215);
 8054ac4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ac8:	89 3c 24             	mov    %edi,(%esp)
 8054acb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054acf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054ad3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054ad7:	b9 ad 7d 00 00       	mov    $0x7dad,%ecx
 8054adc:	e8 77 3c 00 00       	call   8058758 <__afl_maybe_log>
 8054ae1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054ae5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054ae9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054aed:	8b 3c 24             	mov    (%esp),%edi
 8054af0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054af4:	51                   	push   %ecx
 8054af5:	51                   	push   %ecx
 8054af6:	68 d7 00 00 00       	push   $0xd7
 8054afb:	68 de 70 06 08       	push   $0x80670de
 8054b00:	e8 bb 15 00 00       	call   80560c0 <report_label_coverage>
 8054b05:	83 c4 10             	add    $0x10,%esp
 8054b08:	e9 a6 ea ff ff       	jmp    80535b3 <main+0xa073>
 8054b0d:	8d 76 00             	lea    0x0(%esi),%esi
 8054b10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054b14:	89 3c 24             	mov    %edi,(%esp)
 8054b17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054b1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054b1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054b23:	b9 6a 66 00 00       	mov    $0x666a,%ecx
 8054b28:	e8 2b 3c 00 00       	call   8058758 <__afl_maybe_log>
 8054b2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054b31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054b35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054b39:	8b 3c 24             	mov    (%esp),%edi
 8054b3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054b40:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	report_label_coverage("COR", 210);
}

// ROR Label 211
if((s[i] == ')') != (s[i] != ')'))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 211);
 8054b43:	50                   	push   %eax
 8054b44:	50                   	push   %eax
 8054b45:	68 d3 00 00 00       	push   $0xd3
 8054b4a:	68 c8 70 06 08       	push   $0x80670c8
 8054b4f:	e8 6c 15 00 00       	call   80560c0 <report_label_coverage>
 8054b54:	83 c4 10             	add    $0x10,%esp
 8054b57:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 8054b5a:	e9 f9 e8 ff ff       	jmp    8053458 <main+0x9f18>
 8054b5f:	90                   	nop
if(i < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 209);
}

// COR Label 210
if((i || s[i] != ')') != (i && s[i] != ')'))  {asm volatile (""::: "memory");
 8054b60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054b64:	89 3c 24             	mov    %edi,(%esp)
 8054b67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054b6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054b6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054b73:	b9 1c f0 00 00       	mov    $0xf01c,%ecx
 8054b78:	e8 db 3b 00 00       	call   8058758 <__afl_maybe_log>
 8054b7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054b81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054b85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054b89:	8b 3c 24             	mov    (%esp),%edi
 8054b8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054b90:	80 7c 37 fe 29       	cmpb   $0x29,-0x2(%edi,%esi,1)
	report_label_coverage("COR", 210);
}

// ROR Label 211
if((s[i] == ')') != (s[i] != ')'))  {asm volatile (""::: "memory");
 8054b95:	8d 04 1f             	lea    (%edi,%ebx,1),%eax
if(i < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 209);
}

// COR Label 210
if((i || s[i] != ')') != (i && s[i] != ')'))  {asm volatile (""::: "memory");
 8054b98:	0f 85 6f ff ff ff    	jne    8054b0d <main+0xb5cd>
 8054b9e:	66 90                	xchg   %ax,%ax
 8054ba0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ba4:	89 3c 24             	mov    %edi,(%esp)
 8054ba7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054bab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054baf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054bb3:	b9 88 e9 00 00       	mov    $0xe988,%ecx
 8054bb8:	e8 9b 3b 00 00       	call   8058758 <__afl_maybe_log>
 8054bbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054bc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054bc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054bc9:	8b 3c 24             	mov    (%esp),%edi
 8054bcc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 210);
 8054bd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054bd4:	89 3c 24             	mov    %edi,(%esp)
 8054bd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054bdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054bdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054be3:	b9 af bf 00 00       	mov    $0xbfaf,%ecx
 8054be8:	e8 6b 3b 00 00       	call   8058758 <__afl_maybe_log>
 8054bed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054bf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054bf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054bf9:	8b 3c 24             	mov    (%esp),%edi
 8054bfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054c00:	50                   	push   %eax
 8054c01:	50                   	push   %eax
 8054c02:	68 d2 00 00 00       	push   $0xd2
 8054c07:	68 da 70 06 08       	push   $0x80670da
 8054c0c:	e8 af 14 00 00       	call   80560c0 <report_label_coverage>
 8054c11:	83 c4 10             	add    $0x10,%esp
 8054c14:	e9 c7 e7 ff ff       	jmp    80533e0 <main+0x9ea0>
 8054c19:	8d 76 00             	lea    0x0(%esi),%esi

/* This is defined in POSIX.1:1996.  */
__STDIO_INLINE int
putchar_unlocked (int __c)
{
  return _IO_putc_unlocked (__c, stdout);
 8054c1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054c20:	89 3c 24             	mov    %edi,(%esp)
 8054c23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054c27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054c2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054c2f:	b9 bc cf 00 00       	mov    $0xcfbc,%ecx
 8054c34:	e8 1f 3b 00 00       	call   8058758 <__afl_maybe_log>
 8054c39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054c3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054c41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054c45:	8b 3c 24             	mov    (%esp),%edi
 8054c48:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054c4c:	57                   	push   %edi
 8054c4d:	57                   	push   %edi
 8054c4e:	6a 0a                	push   $0xa
 8054c50:	56                   	push   %esi
 8054c51:	e8 1a 48 ff ff       	call   8049470 <__overflow@plt>
 8054c56:	83 c4 10             	add    $0x10,%esp
 8054c59:	e9 9f 73 ff ff       	jmp    804bffd <main+0x2abd>
 8054c5e:	66 90                	xchg   %ax,%ax
if(( s_len - i == 1 ) && ( s[i] != ' ' && s[i] != '*' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 268);
}
// MCC Label 269
if(( s_len - i == 1 ) && ( s[i] != ' ' && !(s[i] != '*') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 269);
 8054c60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054c64:	89 3c 24             	mov    %edi,(%esp)
 8054c67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054c6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054c6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054c73:	b9 c7 93 00 00       	mov    $0x93c7,%ecx
 8054c78:	e8 db 3a 00 00       	call   8058758 <__afl_maybe_log>
 8054c7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054c81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054c85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054c89:	8b 3c 24             	mov    (%esp),%edi
 8054c8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054c90:	50                   	push   %eax
 8054c91:	50                   	push   %eax
 8054c92:	68 0d 01 00 00       	push   $0x10d
 8054c97:	68 de 70 06 08       	push   $0x80670de
 8054c9c:	e8 1f 14 00 00       	call   80560c0 <report_label_coverage>
 8054ca1:	83 c4 10             	add    $0x10,%esp
 8054ca4:	e9 97 e0 ff ff       	jmp    8052d40 <main+0x9800>
 8054ca9:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("COR", 444);
}

// MCC Label 445
if(prefix_tag && do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 445);
 8054cac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054cb0:	89 3c 24             	mov    %edi,(%esp)
 8054cb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054cb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054cbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054cbf:	b9 4a 66 00 00       	mov    $0x664a,%ecx
 8054cc4:	e8 8f 3a 00 00       	call   8058758 <__afl_maybe_log>
 8054cc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054ccd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054cd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054cd5:	8b 3c 24             	mov    (%esp),%edi
 8054cd8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054cdc:	52                   	push   %edx
 8054cdd:	52                   	push   %edx
 8054cde:	68 bd 01 00 00       	push   $0x1bd
 8054ce3:	68 de 70 06 08       	push   $0x80670de
 8054ce8:	e8 d3 13 00 00       	call   80560c0 <report_label_coverage>
 8054ced:	83 c4 10             	add    $0x10,%esp
 8054cf0:	e9 87 53 ff ff       	jmp    804a07c <main+0xb3c>
 8054cf5:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("COR", 439);
}

// MCC Label 440
if(prefix_tag && !binary ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 440);
 8054cf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054cfc:	89 3c 24             	mov    %edi,(%esp)
 8054cff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054d03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054d07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054d0b:	b9 c8 26 00 00       	mov    $0x26c8,%ecx
 8054d10:	e8 43 3a 00 00       	call   8058758 <__afl_maybe_log>
 8054d15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054d19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054d1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054d21:	8b 3c 24             	mov    (%esp),%edi
 8054d24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054d28:	50                   	push   %eax
 8054d29:	50                   	push   %eax
 8054d2a:	68 b8 01 00 00       	push   $0x1b8
 8054d2f:	68 de 70 06 08       	push   $0x80670de
 8054d34:	e8 87 13 00 00       	call   80560c0 <report_label_coverage>
 8054d39:	83 c4 10             	add    $0x10,%esp
 8054d3c:	e9 cf 4f ff ff       	jmp    8049d10 <main+0x7d0>
 8054d41:	8d 76 00             	lea    0x0(%esi),%esi
if(!(prefix_tag) && do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 447);
}
// MCC Label 448
if(!(prefix_tag) && !(do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 448);
 8054d44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054d48:	89 3c 24             	mov    %edi,(%esp)
 8054d4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054d4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054d53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054d57:	b9 b0 58 00 00       	mov    $0x58b0,%ecx
 8054d5c:	e8 f7 39 00 00       	call   8058758 <__afl_maybe_log>
 8054d61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054d65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054d69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054d6d:	8b 3c 24             	mov    (%esp),%edi
 8054d70:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054d74:	50                   	push   %eax
 8054d75:	50                   	push   %eax
 8054d76:	68 c0 01 00 00       	push   $0x1c0
 8054d7b:	68 de 70 06 08       	push   $0x80670de
 8054d80:	e8 3b 13 00 00       	call   80560c0 <report_label_coverage>
 8054d85:	83 c4 10             	add    $0x10,%esp
 8054d88:	e9 67 53 ff ff       	jmp    804a0f4 <main+0xbb4>
 8054d8d:	8d 76 00             	lea    0x0(%esi),%esi
// ABS Label 521
if(have_read_stdin < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 521);
}
if (have_read_stdin) {
    int temp_1 = rpl_fclose(stdin);
 8054d90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054d94:	89 3c 24             	mov    %edi,(%esp)
 8054d97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054d9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054d9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054da3:	b9 ae 0b 00 00       	mov    $0xbae,%ecx
 8054da8:	e8 ab 39 00 00       	call   8058758 <__afl_maybe_log>
 8054dad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054db1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054db5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054db9:	8b 3c 24             	mov    (%esp),%edi
 8054dbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054dc0:	83 ec 0c             	sub    $0xc,%esp
 8054dc3:	ff 35 d0 b2 06 08    	pushl  0x806b2d0
 8054dc9:	e8 92 f1 00 00       	call   8063f60 <rpl_fclose>
    int temp_2 = -1;
    
// ABS Label 522
if(temp_1 < 0)  {asm volatile (""::: "memory");
 8054dce:	83 c4 10             	add    $0x10,%esp
 8054dd1:	85 c0                	test   %eax,%eax
// ABS Label 521
if(have_read_stdin < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 521);
}
if (have_read_stdin) {
    int temp_1 = rpl_fclose(stdin);
 8054dd3:	89 c6                	mov    %eax,%esi
    int temp_2 = -1;
    
// ABS Label 522
if(temp_1 < 0)  {asm volatile (""::: "memory");
 8054dd5:	0f 88 b2 0e 00 00    	js     8055c8d <main+0xc74d>
 8054ddb:	90                   	nop
 8054ddc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054de0:	89 3c 24             	mov    %edi,(%esp)
 8054de3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054de7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054deb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054def:	b9 82 d3 00 00       	mov    $0xd382,%ecx
 8054df4:	e8 5f 39 00 00       	call   8058758 <__afl_maybe_log>
 8054df9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054dfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054e01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054e05:	8b 3c 24             	mov    (%esp),%edi
 8054e08:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 522);
}
// ABS Label 523
if(temp_2 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 523);
 8054e0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054e10:	89 3c 24             	mov    %edi,(%esp)
 8054e13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054e17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054e1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054e1f:	b9 4c 8c 00 00       	mov    $0x8c4c,%ecx
 8054e24:	e8 2f 39 00 00       	call   8058758 <__afl_maybe_log>
 8054e29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054e2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054e31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054e35:	8b 3c 24             	mov    (%esp),%edi
 8054e38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054e3c:	50                   	push   %eax
 8054e3d:	50                   	push   %eax
 8054e3e:	68 0b 02 00 00       	push   $0x20b
 8054e43:	68 d0 70 06 08       	push   $0x80670d0
 8054e48:	e8 73 12 00 00       	call   80560c0 <report_label_coverage>
}

// ROR Label 524
if((temp_1 != temp_2) != (temp_1 == temp_2))  {asm volatile (""::: "memory");
 8054e4d:	83 c4 10             	add    $0x10,%esp
 8054e50:	83 c6 01             	add    $0x1,%esi
 8054e53:	0f 94 c2             	sete   %dl
 8054e56:	0f 95 c0             	setne  %al
 8054e59:	38 d0                	cmp    %dl,%al
 8054e5b:	89 d7                	mov    %edx,%edi
 8054e5d:	74 45                	je     8054ea4 <main+0xb964>
 8054e5f:	90                   	nop
 8054e60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054e64:	89 3c 24             	mov    %edi,(%esp)
 8054e67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054e6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054e6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054e73:	b9 a0 c6 00 00       	mov    $0xc6a0,%ecx
 8054e78:	e8 db 38 00 00       	call   8058758 <__afl_maybe_log>
 8054e7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054e81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054e85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054e89:	8b 3c 24             	mov    (%esp),%edi
 8054e8c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 524);
 8054e90:	50                   	push   %eax
 8054e91:	50                   	push   %eax
 8054e92:	68 0c 02 00 00       	push   $0x20c
 8054e97:	68 c8 70 06 08       	push   $0x80670c8
 8054e9c:	e8 1f 12 00 00       	call   80560c0 <report_label_coverage>
 8054ea1:	83 c4 10             	add    $0x10,%esp
}
if (temp_1 == temp_2)
 8054ea4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ea8:	89 3c 24             	mov    %edi,(%esp)
 8054eab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054eaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054eb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054eb7:	b9 99 92 00 00       	mov    $0x9299,%ecx
 8054ebc:	e8 97 38 00 00       	call   8058758 <__afl_maybe_log>
 8054ec1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054ec5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054ec9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054ecd:	8b 3c 24             	mov    (%esp),%edi
 8054ed0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054ed4:	89 fb                	mov    %edi,%ebx
 8054ed6:	84 db                	test   %bl,%bl
 8054ed8:	0f 84 92 74 ff ff    	je     804c370 <main+0x2e30>
 8054ede:	66 90                	xchg   %ax,%ax
 8054ee0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ee4:	89 3c 24             	mov    %edi,(%esp)
 8054ee7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054eeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054eef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054ef3:	b9 be a2 00 00       	mov    $0xa2be,%ecx
 8054ef8:	e8 5b 38 00 00       	call   8058758 <__afl_maybe_log>
 8054efd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054f01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054f05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054f09:	8b 3c 24             	mov    (%esp),%edi
 8054f0c:	8d 64 24 10          	lea    0x10(%esp),%esp
        error(1, (*__errno_location()), gettext("standard input"));
 8054f10:	50                   	push   %eax
 8054f11:	6a 05                	push   $0x5
 8054f13:	68 c4 71 06 08       	push   $0x80671c4
 8054f18:	6a 00                	push   $0x0
 8054f1a:	e8 b1 42 ff ff       	call   80491d0 <dcgettext@plt>
 8054f1f:	89 c6                	mov    %eax,%esi
 8054f21:	e8 ba 44 ff ff       	call   80493e0 <__errno_location@plt>
 8054f26:	83 c4 0c             	add    $0xc,%esp
 8054f29:	56                   	push   %esi
 8054f2a:	ff 30                	pushl  (%eax)
 8054f2c:	6a 01                	push   $0x1
 8054f2e:	e8 5d 43 ff ff       	call   8049290 <error@plt>
 8054f33:	83 c4 10             	add    $0x10,%esp
 8054f36:	e9 35 74 ff ff       	jmp    804c370 <main+0x2e30>
 8054f3b:	90                   	nop
    }

  
// COR Label 463
if((warn || !do_check) != (warn && !do_check))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 463);
 8054f3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054f40:	89 3c 24             	mov    %edi,(%esp)
 8054f43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054f47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054f4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054f4f:	b9 0a 89 00 00       	mov    $0x890a,%ecx
 8054f54:	e8 ff 37 00 00       	call   8058758 <__afl_maybe_log>
 8054f59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054f5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054f61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054f65:	8b 3c 24             	mov    (%esp),%edi
 8054f68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054f6c:	50                   	push   %eax
 8054f6d:	50                   	push   %eax
 8054f6e:	68 cf 01 00 00       	push   $0x1cf
 8054f73:	68 da 70 06 08       	push   $0x80670da
 8054f78:	e8 43 11 00 00       	call   80560c0 <report_label_coverage>
}

// MCC Label 464
if(warn && !do_check ) {asm volatile (""::: "memory");
 8054f7d:	0f b6 8d 7f ff ff ff 	movzbl -0x81(%ebp),%ecx
 8054f84:	83 c4 10             	add    $0x10,%esp
 8054f87:	38 0d 02 b3 06 08    	cmp    %cl,0x806b302
 8054f8d:	0f 86 45 59 ff ff    	jbe    804a8d8 <main+0x1398>
 8054f93:	90                   	nop
 8054f94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054f98:	89 3c 24             	mov    %edi,(%esp)
 8054f9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054f9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054fa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054fa7:	b9 d9 11 00 00       	mov    $0x11d9,%ecx
 8054fac:	e8 a7 37 00 00       	call   8058758 <__afl_maybe_log>
 8054fb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054fb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054fb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054fbd:	8b 3c 24             	mov    (%esp),%edi
 8054fc0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054fc4:	e9 df f7 ff ff       	jmp    80547a8 <main+0xb268>
 8054fc9:	8d 76 00             	lea    0x0(%esi),%esi
    }

  
// COR Label 458
if((status_only || !do_check) != (status_only && !do_check))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 458);
 8054fcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054fd0:	89 3c 24             	mov    %edi,(%esp)
 8054fd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054fd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054fdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054fdf:	b9 25 f9 00 00       	mov    $0xf925,%ecx
 8054fe4:	e8 6f 37 00 00       	call   8058758 <__afl_maybe_log>
 8054fe9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054fed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054ff1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054ff5:	8b 3c 24             	mov    (%esp),%edi
 8054ff8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054ffc:	50                   	push   %eax
 8054ffd:	50                   	push   %eax
 8054ffe:	68 ca 01 00 00       	push   $0x1ca
 8055003:	68 da 70 06 08       	push   $0x80670da
 8055008:	e8 b3 10 00 00       	call   80560c0 <report_label_coverage>
}

// MCC Label 459
if(status_only && !do_check ) {asm volatile (""::: "memory");
 805500d:	0f b6 95 7f ff ff ff 	movzbl -0x81(%ebp),%edx
 8055014:	83 c4 10             	add    $0x10,%esp
 8055017:	38 15 03 b3 06 08    	cmp    %dl,0x806b303
 805501d:	0f 86 61 56 ff ff    	jbe    804a684 <main+0x1144>
 8055023:	90                   	nop
 8055024:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055028:	89 3c 24             	mov    %edi,(%esp)
 805502b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805502f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055033:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055037:	b9 e2 c5 00 00       	mov    $0xc5e2,%ecx
 805503c:	e8 17 37 00 00       	call   8058758 <__afl_maybe_log>
 8055041:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055045:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055049:	8b 54 24 04          	mov    0x4(%esp),%edx
 805504d:	8b 3c 24             	mov    (%esp),%edi
 8055050:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055054:	e9 93 f6 ff ff       	jmp    80546ec <main+0xb1ac>
 8055059:	8d 76 00             	lea    0x0(%esi),%esi
if(0 <= binary && !(do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 455);
}
// MCC Label 456
if(!(0 <= binary) && do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 456);
 805505c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055060:	89 3c 24             	mov    %edi,(%esp)
 8055063:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055067:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805506b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805506f:	b9 ea 05 00 00       	mov    $0x5ea,%ecx
 8055074:	e8 df 36 00 00       	call   8058758 <__afl_maybe_log>
 8055079:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805507d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055081:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055085:	8b 3c 24             	mov    (%esp),%edi
 8055088:	8d 64 24 10          	lea    0x10(%esp),%esp
 805508c:	50                   	push   %eax
 805508d:	50                   	push   %eax
 805508e:	68 c8 01 00 00       	push   $0x1c8
 8055093:	68 de 70 06 08       	push   $0x80670de
 8055098:	e8 23 10 00 00       	call   80560c0 <report_label_coverage>
 805509d:	83 c4 10             	add    $0x10,%esp
 80550a0:	e9 f7 54 ff ff       	jmp    804a59c <main+0x105c>
 80550a5:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ROR", 453);
}

// MCC Label 454
if(0 <= binary && do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 454);
 80550a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80550ac:	89 3c 24             	mov    %edi,(%esp)
 80550af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80550b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80550b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80550bb:	b9 a0 fd 00 00       	mov    $0xfda0,%ecx
 80550c0:	e8 93 36 00 00       	call   8058758 <__afl_maybe_log>
 80550c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80550c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80550cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80550d1:	8b 3c 24             	mov    (%esp),%edi
 80550d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80550d8:	50                   	push   %eax
 80550d9:	50                   	push   %eax
 80550da:	68 c6 01 00 00       	push   $0x1c6
 80550df:	68 de 70 06 08       	push   $0x80670de
 80550e4:	e8 d7 0f 00 00       	call   80560c0 <report_label_coverage>
 80550e9:	83 c4 10             	add    $0x10,%esp
 80550ec:	e9 b3 53 ff ff       	jmp    804a4a4 <main+0xf64>
 80550f1:	8d 76 00             	lea    0x0(%esi),%esi
    }

  
// COR Label 468
if((quiet || !do_check) != (quiet && !do_check))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 468);
 80550f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80550f8:	89 3c 24             	mov    %edi,(%esp)
 80550fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80550ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055103:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055107:	b9 91 b9 00 00       	mov    $0xb991,%ecx
 805510c:	e8 47 36 00 00       	call   8058758 <__afl_maybe_log>
 8055111:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055115:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055119:	8b 54 24 04          	mov    0x4(%esp),%edx
 805511d:	8b 3c 24             	mov    (%esp),%edi
 8055120:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055124:	50                   	push   %eax
 8055125:	50                   	push   %eax
 8055126:	68 d4 01 00 00       	push   $0x1d4
 805512b:	68 da 70 06 08       	push   $0x80670da
 8055130:	e8 8b 0f 00 00       	call   80560c0 <report_label_coverage>
}

// MCC Label 469
if(quiet && !do_check ) {asm volatile (""::: "memory");
 8055135:	0f b6 85 7f ff ff ff 	movzbl -0x81(%ebp),%eax
 805513c:	83 c4 10             	add    $0x10,%esp
 805513f:	38 05 01 b3 06 08    	cmp    %al,0x806b301
 8055145:	0f 86 e1 59 ff ff    	jbe    804ab2c <main+0x15ec>
 805514b:	90                   	nop
 805514c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055150:	89 3c 24             	mov    %edi,(%esp)
 8055153:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805515b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805515f:	b9 10 13 00 00       	mov    $0x1310,%ecx
 8055164:	e8 ef 35 00 00       	call   8058758 <__afl_maybe_log>
 8055169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805516d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055171:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055175:	8b 3c 24             	mov    (%esp),%edi
 8055178:	8d 64 24 10          	lea    0x10(%esp),%esp
 805517c:	e9 e3 f6 ff ff       	jmp    8054864 <main+0xb324>
 8055181:	8d 76 00             	lea    0x0(%esi),%esi
    }

  
// AOR Label 473
if(strict | !do_check != strict & !do_check)  {asm volatile (""::: "memory");
	report_label_coverage("AOR", 473);
 8055184:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055188:	89 3c 24             	mov    %edi,(%esp)
 805518b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805518f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055193:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055197:	b9 89 e2 00 00       	mov    $0xe289,%ecx
 805519c:	e8 b7 35 00 00       	call   8058758 <__afl_maybe_log>
 80551a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80551a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80551a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80551ad:	8b 3c 24             	mov    (%esp),%edi
 80551b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80551b4:	52                   	push   %edx
 80551b5:	52                   	push   %edx
 80551b6:	68 d9 01 00 00       	push   $0x1d9
 80551bb:	68 cc 70 06 08       	push   $0x80670cc
 80551c0:	e8 fb 0e 00 00       	call   80560c0 <report_label_coverage>
 80551c5:	83 c4 10             	add    $0x10,%esp
 80551c8:	0f b6 05 00 b3 06 08 	movzbl 0x806b300,%eax
 80551cf:	e9 b0 5b ff ff       	jmp    804ad84 <main+0x1844>
// ROR Label 486
if((optind != argc) != (optind == argc))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 486);
}
if (optind == argc)
    argv[argc++] = bad_cast ("-");
 80551d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80551d8:	89 3c 24             	mov    %edi,(%esp)
 80551db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80551df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80551e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80551e7:	b9 b8 72 00 00       	mov    $0x72b8,%ecx
 80551ec:	e8 67 35 00 00       	call   8058758 <__afl_maybe_log>
 80551f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80551f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80551f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80551fd:	8b 3c 24             	mov    (%esp),%edi
 8055200:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055204:	8b 7d 90             	mov    -0x70(%ebp),%edi
 8055207:	83 45 94 01          	addl   $0x1,-0x6c(%ebp)
 805520b:	c7 04 87 02 7d 06 08 	movl   $0x8067d02,(%edi,%eax,4)
 8055212:	e9 89 60 ff ff       	jmp    804b2a0 <main+0x1d60>
 8055217:	90                   	nop
 8055218:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805521c:	89 3c 24             	mov    %edi,(%esp)
 805521f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055223:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055227:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805522b:	b9 62 d5 00 00       	mov    $0xd562,%ecx
 8055230:	e8 23 35 00 00       	call   8058758 <__afl_maybe_log>
 8055235:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055239:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805523d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055241:	8b 3c 24             	mov    (%esp),%edi
 8055244:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055248:	51                   	push   %ecx
 8055249:	51                   	push   %ecx
 805524a:	50                   	push   %eax
 805524b:	57                   	push   %edi
 805524c:	e8 1f 42 ff ff       	call   8049470 <__overflow@plt>
 8055251:	83 c4 10             	add    $0x10,%esp
 8055254:	e9 eb 6c ff ff       	jmp    804bf44 <main+0x2a04>
 8055259:	8d 76 00             	lea    0x0(%esi),%esi
 805525c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055260:	89 3c 24             	mov    %edi,(%esp)
 8055263:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055267:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805526b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805526f:	b9 36 9d 00 00       	mov    $0x9d36,%ecx
 8055274:	e8 df 34 00 00       	call   8058758 <__afl_maybe_log>
 8055279:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805527d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055281:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055285:	8b 3c 24             	mov    (%esp),%edi
 8055288:	8d 64 24 10          	lea    0x10(%esp),%esp
 805528c:	53                   	push   %ebx
 805528d:	53                   	push   %ebx
 805528e:	6a 20                	push   $0x20
 8055290:	57                   	push   %edi
 8055291:	e8 da 41 ff ff       	call   8049470 <__overflow@plt>
 8055296:	83 c4 10             	add    $0x10,%esp
 8055299:	e9 1b 6c ff ff       	jmp    804beb9 <main+0x2979>
 805529e:	66 90                	xchg   %ax,%ax
if((i || s[i] != ')') != (i && s[i] != ')'))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 217);
}

// ROR Label 218
if((s[i] == ')') != (s[i] != ')'))  {asm volatile (""::: "memory");
 80552a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80552a4:	89 3c 24             	mov    %edi,(%esp)
 80552a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80552ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80552af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80552b3:	b9 5b 0b 00 00       	mov    $0xb5b,%ecx
 80552b8:	e8 9b 34 00 00       	call   8058758 <__afl_maybe_log>
 80552bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80552c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80552c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80552c9:	8b 3c 24             	mov    (%esp),%edi
 80552cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80552d0:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
	report_label_coverage("ABS", 216);
}

// COR Label 217
if((i || s[i] != ')') != (i && s[i] != ')'))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 217);
 80552d3:	52                   	push   %edx
 80552d4:	52                   	push   %edx
 80552d5:	68 d9 00 00 00       	push   $0xd9
 80552da:	68 da 70 06 08       	push   $0x80670da
 80552df:	e8 dc 0d 00 00       	call   80560c0 <report_label_coverage>
}

// ROR Label 218
if((s[i] == ')') != (s[i] != ')'))  {asm volatile (""::: "memory");
 80552e4:	0f b6 0e             	movzbl (%esi),%ecx
 80552e7:	83 c4 10             	add    $0x10,%esp
 80552ea:	80 f9 29             	cmp    $0x29,%cl
 80552ed:	0f 94 c2             	sete   %dl
 80552f0:	0f 95 c0             	setne  %al
 80552f3:	38 c2                	cmp    %al,%dl
 80552f5:	0f 85 5d e3 ff ff    	jne    8053658 <main+0xa118>
 80552fb:	90                   	nop
 80552fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055300:	89 3c 24             	mov    %edi,(%esp)
 8055303:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055307:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805530b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805530f:	b9 16 3b 00 00       	mov    $0x3b16,%ecx
 8055314:	e8 3f 34 00 00       	call   8058758 <__afl_maybe_log>
 8055319:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805531d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055321:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055325:	8b 3c 24             	mov    (%esp),%edi
 8055328:	8d 64 24 10          	lea    0x10(%esp),%esp
 805532c:	e9 6b e3 ff ff       	jmp    805369c <main+0xa15c>
 8055331:	8d 76 00             	lea    0x0(%esi),%esi
 8055334:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055338:	89 3c 24             	mov    %edi,(%esp)
 805533b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805533f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055343:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055347:	b9 fa 68 00 00       	mov    $0x68fa,%ecx
 805534c:	e8 07 34 00 00       	call   8058758 <__afl_maybe_log>
 8055351:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055355:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055359:	8b 54 24 04          	mov    0x4(%esp),%edx
 805535d:	8b 3c 24             	mov    (%esp),%edi
 8055360:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055364:	52                   	push   %edx
 8055365:	52                   	push   %edx
 8055366:	6a 5c                	push   $0x5c
 8055368:	57                   	push   %edi
 8055369:	e8 02 41 ff ff       	call   8049470 <__overflow@plt>
 805536e:	83 c4 10             	add    $0x10,%esp
 8055371:	e9 6b 67 ff ff       	jmp    804bae1 <main+0x25a1>
 8055376:	66 90                	xchg   %ax,%ax
 8055378:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805537c:	89 3c 24             	mov    %edi,(%esp)
 805537f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055383:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055387:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805538b:	b9 3a ae 00 00       	mov    $0xae3a,%ecx
 8055390:	e8 c3 33 00 00       	call   8058758 <__afl_maybe_log>
 8055395:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055399:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805539d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80553a1:	8b 3c 24             	mov    (%esp),%edi
 80553a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80553a8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
 80553ae:	e9 d9 a1 ff ff       	jmp    804f58c <main+0x604c>
 80553b3:	90                   	nop
 80553b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80553b8:	89 3c 24             	mov    %edi,(%esp)
 80553bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80553bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80553c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80553c7:	b9 fd e6 00 00       	mov    $0xe6fd,%ecx
 80553cc:	e8 87 33 00 00       	call   8058758 <__afl_maybe_log>
 80553d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80553d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80553d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80553dd:	8b 3c 24             	mov    (%esp),%edi
 80553e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80553e4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
 80553ea:	e9 29 9f ff ff       	jmp    804f318 <main+0x5dd8>
 80553ef:	90                   	nop
 80553f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80553f4:	89 3c 24             	mov    %edi,(%esp)
 80553f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80553fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80553ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055403:	b9 2b 6b 00 00       	mov    $0x6b2b,%ecx
 8055408:	e8 4b 33 00 00       	call   8058758 <__afl_maybe_log>
 805540d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055411:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055415:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055419:	8b 3c 24             	mov    (%esp),%edi
 805541c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055420:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
 8055426:	e9 29 9d ff ff       	jmp    804f154 <main+0x5c14>
 805542b:	90                   	nop
 805542c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055430:	89 3c 24             	mov    %edi,(%esp)
 8055433:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055437:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805543b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805543f:	b9 74 bb 00 00       	mov    $0xbb74,%ecx
 8055444:	e8 0f 33 00 00       	call   8058758 <__afl_maybe_log>
 8055449:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805544d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055451:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055455:	8b 3c 24             	mov    (%esp),%edi
 8055458:	8d 64 24 10          	lea    0x10(%esp),%esp
 805545c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	report_label_coverage("ROR", 211);
}

// MCC Label 212
if(i && s[i] != ')' ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 212);
 805545f:	50                   	push   %eax
 8055460:	50                   	push   %eax
 8055461:	68 d4 00 00 00       	push   $0xd4
 8055466:	68 de 70 06 08       	push   $0x80670de
 805546b:	e8 50 0c 00 00       	call   80560c0 <report_label_coverage>
}
// MCC Label 213
if(i && !(s[i] != ')') ) {asm volatile (""::: "memory");
 8055470:	8b 45 a4             	mov    -0x5c(%ebp),%eax
 8055473:	83 c4 10             	add    $0x10,%esp
 8055476:	80 38 29             	cmpb   $0x29,(%eax)
 8055479:	0f 85 34 e1 ff ff    	jne    80535b3 <main+0xa073>
 805547f:	90                   	nop
 8055480:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055484:	89 3c 24             	mov    %edi,(%esp)
 8055487:	89 54 24 04          	mov    %edx,0x4(%esp)
 805548b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805548f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055493:	b9 f7 98 00 00       	mov    $0x98f7,%ecx
 8055498:	e8 bb 32 00 00       	call   8058758 <__afl_maybe_log>
 805549d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80554a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80554a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80554a9:	8b 3c 24             	mov    (%esp),%edi
 80554ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80554b0:	e9 47 e0 ff ff       	jmp    80534fc <main+0x9fbc>
 80554b5:	8d 76 00             	lea    0x0(%esi),%esi
if(!(i) && s[i] != ')' ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 221);
}
// MCC Label 222
if(!(i) && !(s[i] != ')') ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 222);
 80554b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80554bc:	89 3c 24             	mov    %edi,(%esp)
 80554bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80554c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80554c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80554cb:	b9 ac c6 00 00       	mov    $0xc6ac,%ecx
 80554d0:	e8 83 32 00 00       	call   8058758 <__afl_maybe_log>
 80554d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80554d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80554dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80554e1:	8b 3c 24             	mov    (%esp),%edi
 80554e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80554e8:	50                   	push   %eax
 80554e9:	50                   	push   %eax
 80554ea:	68 de 00 00 00       	push   $0xde
 80554ef:	68 de 70 06 08       	push   $0x80670de
 80554f4:	e8 c7 0b 00 00       	call   80560c0 <report_label_coverage>
 80554f9:	83 c4 10             	add    $0x10,%esp
 80554fc:	e9 83 e2 ff ff       	jmp    8053784 <main+0xa244>
 8055501:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ROR", 218);
}

// MCC Label 219
if(i && s[i] != ')' ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 219);
 8055504:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055508:	89 3c 24             	mov    %edi,(%esp)
 805550b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805550f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055513:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055517:	b9 10 5b 00 00       	mov    $0x5b10,%ecx
 805551c:	e8 37 32 00 00       	call   8058758 <__afl_maybe_log>
 8055521:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055525:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055529:	8b 54 24 04          	mov    0x4(%esp),%edx
 805552d:	8b 3c 24             	mov    (%esp),%edi
 8055530:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055534:	50                   	push   %eax
 8055535:	50                   	push   %eax
 8055536:	68 db 00 00 00       	push   $0xdb
 805553b:	68 de 70 06 08       	push   $0x80670de
 8055540:	e8 7b 0b 00 00       	call   80560c0 <report_label_coverage>
}
// MCC Label 220
if(i && !(s[i] != ')') ) {asm volatile (""::: "memory");
 8055545:	83 c4 10             	add    $0x10,%esp
 8055548:	80 3e 29             	cmpb   $0x29,(%esi)
 805554b:	0f 85 33 e2 ff ff    	jne    8053784 <main+0xa244>
 8055551:	8d 76 00             	lea    0x0(%esi),%esi
 8055554:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055558:	89 3c 24             	mov    %edi,(%esp)
 805555b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805555f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055563:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055567:	b9 82 fa 00 00       	mov    $0xfa82,%ecx
 805556c:	e8 e7 31 00 00       	call   8058758 <__afl_maybe_log>
 8055571:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055575:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055579:	8b 54 24 04          	mov    0x4(%esp),%edx
 805557d:	8b 3c 24             	mov    (%esp),%edi
 8055580:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055584:	e9 b7 e1 ff ff       	jmp    8053740 <main+0xa200>
 8055589:	8d 76 00             	lea    0x0(%esi),%esi

        }
    };
// ABS Label 492
if(argc < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 492);
 805558c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055590:	89 3c 24             	mov    %edi,(%esp)
 8055593:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055597:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805559b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805559f:	b9 96 60 00 00       	mov    $0x6096,%ecx
 80555a4:	e8 af 31 00 00       	call   8058758 <__afl_maybe_log>
 80555a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80555ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80555b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80555b5:	8b 3c 24             	mov    (%esp),%edi
 80555b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80555bc:	56                   	push   %esi
 80555bd:	56                   	push   %esi
 80555be:	68 ec 01 00 00       	push   $0x1ec
 80555c3:	68 d0 70 06 08       	push   $0x80670d0
 80555c8:	e8 f3 0a 00 00       	call   80560c0 <report_label_coverage>
 80555cd:	83 c4 10             	add    $0x10,%esp
 80555d0:	e9 0f 6b ff ff       	jmp    804c0e4 <main+0x2ba4>
 80555d5:	8d 76 00             	lea    0x0(%esi),%esi
if(!(status_only) && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 461);
}
// MCC Label 462
if(!(status_only) && !(!do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 462);
 80555d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80555dc:	89 3c 24             	mov    %edi,(%esp)
 80555df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80555e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80555e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80555eb:	b9 e1 d9 00 00       	mov    $0xd9e1,%ecx
 80555f0:	e8 63 31 00 00       	call   8058758 <__afl_maybe_log>
 80555f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80555f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80555fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055601:	8b 3c 24             	mov    (%esp),%edi
 8055604:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055608:	50                   	push   %eax
 8055609:	50                   	push   %eax
 805560a:	68 ce 01 00 00       	push   $0x1ce
 805560f:	68 de 70 06 08       	push   $0x80670de
 8055614:	e8 a7 0a 00 00       	call   80560c0 <report_label_coverage>
 8055619:	83 c4 10             	add    $0x10,%esp
 805561c:	e9 c7 51 ff ff       	jmp    804a7e8 <main+0x12a8>
 8055621:	8d 76 00             	lea    0x0(%esi),%esi
if(status_only && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 459);
}
// MCC Label 460
if(status_only && !(!do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 460);
 8055624:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055628:	89 3c 24             	mov    %edi,(%esp)
 805562b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805562f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055633:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055637:	b9 42 cb 00 00       	mov    $0xcb42,%ecx
 805563c:	e8 17 31 00 00       	call   8058758 <__afl_maybe_log>
 8055641:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055645:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055649:	8b 54 24 04          	mov    0x4(%esp),%edx
 805564d:	8b 3c 24             	mov    (%esp),%edi
 8055650:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055654:	52                   	push   %edx
 8055655:	52                   	push   %edx
 8055656:	68 cc 01 00 00       	push   $0x1cc
 805565b:	68 de 70 06 08       	push   $0x80670de
 8055660:	e8 5b 0a 00 00       	call   80560c0 <report_label_coverage>
 8055665:	83 c4 10             	add    $0x10,%esp
 8055668:	e9 c7 50 ff ff       	jmp    804a734 <main+0x11f4>
 805566d:	8d 76 00             	lea    0x0(%esi),%esi
if(argc < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 492);
}
// ABS Label 493
if(optind < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 493);
 8055670:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055674:	89 3c 24             	mov    %edi,(%esp)
 8055677:	89 54 24 04          	mov    %edx,0x4(%esp)
 805567b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805567f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055683:	b9 89 19 00 00       	mov    $0x1989,%ecx
 8055688:	e8 cb 30 00 00       	call   8058758 <__afl_maybe_log>
 805568d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055691:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055695:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055699:	8b 3c 24             	mov    (%esp),%edi
 805569c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80556a0:	53                   	push   %ebx
 80556a1:	53                   	push   %ebx
 80556a2:	68 ed 01 00 00       	push   $0x1ed
 80556a7:	68 d0 70 06 08       	push   $0x80670d0
 80556ac:	e8 0f 0a 00 00       	call   80560c0 <report_label_coverage>
 80556b1:	83 c4 10             	add    $0x10,%esp
 80556b4:	e9 9b 6a ff ff       	jmp    804c154 <main+0x2c14>
 80556b9:	8d 76 00             	lea    0x0(%esi),%esi
if(!(quiet) && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 471);
}
// MCC Label 472
if(!(quiet) && !(!do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 472);
 80556bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80556c0:	89 3c 24             	mov    %edi,(%esp)
 80556c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80556c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80556cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80556cf:	b9 f2 10 00 00       	mov    $0x10f2,%ecx
 80556d4:	e8 7f 30 00 00       	call   8058758 <__afl_maybe_log>
 80556d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80556dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80556e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80556e5:	8b 3c 24             	mov    (%esp),%edi
 80556e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80556ec:	50                   	push   %eax
 80556ed:	50                   	push   %eax
 80556ee:	68 d8 01 00 00       	push   $0x1d8
 80556f3:	68 de 70 06 08       	push   $0x80670de
 80556f8:	e8 c3 09 00 00       	call   80560c0 <report_label_coverage>
 80556fd:	83 c4 10             	add    $0x10,%esp
 8055700:	e9 8b 55 ff ff       	jmp    804ac90 <main+0x1750>
 8055705:	8d 76 00             	lea    0x0(%esi),%esi
if(quiet && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 469);
}
// MCC Label 470
if(quiet && !(!do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 470);
 8055708:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805570c:	89 3c 24             	mov    %edi,(%esp)
 805570f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055713:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055717:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805571b:	b9 50 cc 00 00       	mov    $0xcc50,%ecx
 8055720:	e8 33 30 00 00       	call   8058758 <__afl_maybe_log>
 8055725:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055729:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805572d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055731:	8b 3c 24             	mov    (%esp),%edi
 8055734:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055738:	50                   	push   %eax
 8055739:	50                   	push   %eax
 805573a:	68 d6 01 00 00       	push   $0x1d6
 805573f:	68 de 70 06 08       	push   $0x80670de
 8055744:	e8 77 09 00 00       	call   80560c0 <report_label_coverage>
 8055749:	83 c4 10             	add    $0x10,%esp
 805574c:	e9 8b 54 ff ff       	jmp    804abdc <main+0x169c>
 8055751:	8d 76 00             	lea    0x0(%esi),%esi
if(!(warn) && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 466);
}
// MCC Label 467
if(!(warn) && !(!do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 467);
 8055754:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055758:	89 3c 24             	mov    %edi,(%esp)
 805575b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805575f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055763:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055767:	b9 d9 c2 00 00       	mov    $0xc2d9,%ecx
 805576c:	e8 e7 2f 00 00       	call   8058758 <__afl_maybe_log>
 8055771:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055775:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055779:	8b 54 24 04          	mov    0x4(%esp),%edx
 805577d:	8b 3c 24             	mov    (%esp),%edi
 8055780:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055784:	52                   	push   %edx
 8055785:	52                   	push   %edx
 8055786:	68 d3 01 00 00       	push   $0x1d3
 805578b:	68 de 70 06 08       	push   $0x80670de
 8055790:	e8 2b 09 00 00       	call   80560c0 <report_label_coverage>
 8055795:	83 c4 10             	add    $0x10,%esp
 8055798:	e9 9f 52 ff ff       	jmp    804aa3c <main+0x14fc>
 805579d:	8d 76 00             	lea    0x0(%esi),%esi
if(warn && !do_check ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 464);
}
// MCC Label 465
if(warn && !(!do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 465);
 80557a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80557a4:	89 3c 24             	mov    %edi,(%esp)
 80557a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80557ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80557af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80557b3:	b9 de 29 00 00       	mov    $0x29de,%ecx
 80557b8:	e8 9b 2f 00 00       	call   8058758 <__afl_maybe_log>
 80557bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80557c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80557c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80557c9:	8b 3c 24             	mov    (%esp),%edi
 80557cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80557d0:	50                   	push   %eax
 80557d1:	50                   	push   %eax
 80557d2:	68 d1 01 00 00       	push   $0x1d1
 80557d7:	68 de 70 06 08       	push   $0x80670de
 80557dc:	e8 df 08 00 00       	call   80560c0 <report_label_coverage>
 80557e1:	83 c4 10             	add    $0x10,%esp
 80557e4:	e9 9f 51 ff ff       	jmp    804a988 <main+0x1448>
 80557e9:	8d 76 00             	lea    0x0(%esi),%esi
if(argc < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 484);
}
// ABS Label 485
if(optind < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 485);
 80557ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80557f0:	89 3c 24             	mov    %edi,(%esp)
 80557f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80557f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80557fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80557ff:	b9 4e 27 00 00       	mov    $0x274e,%ecx
 8055804:	e8 4f 2f 00 00       	call   8058758 <__afl_maybe_log>
 8055809:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805580d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055811:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055815:	8b 3c 24             	mov    (%esp),%edi
 8055818:	8d 64 24 10          	lea    0x10(%esp),%esp
 805581c:	53                   	push   %ebx
 805581d:	53                   	push   %ebx
 805581e:	68 e5 01 00 00       	push   $0x1e5
 8055823:	68 d0 70 06 08       	push   $0x80670d0
 8055828:	e8 93 08 00 00       	call   80560c0 <report_label_coverage>
 805582d:	83 c4 10             	add    $0x10,%esp
 8055830:	e9 6b 59 ff ff       	jmp    804b1a0 <main+0x1c60>
 8055835:	8d 76 00             	lea    0x0(%esi),%esi
if(argc < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 487);
}
// ABS Label 488
if(optind < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 488);
 8055838:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805583c:	89 3c 24             	mov    %edi,(%esp)
 805583f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055843:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055847:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805584b:	b9 27 31 00 00       	mov    $0x3127,%ecx
 8055850:	e8 03 2f 00 00       	call   8058758 <__afl_maybe_log>
 8055855:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055859:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805585d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055861:	8b 3c 24             	mov    (%esp),%edi
 8055864:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055868:	50                   	push   %eax
 8055869:	50                   	push   %eax
 805586a:	68 e8 01 00 00       	push   $0x1e8
 805586f:	68 d0 70 06 08       	push   $0x80670d0
 8055874:	e8 47 08 00 00       	call   80560c0 <report_label_coverage>
 8055879:	83 c4 10             	add    $0x10,%esp
 805587c:	e9 fb 5a ff ff       	jmp    804b37c <main+0x1e3c>
 8055881:	8d 76 00             	lea    0x0(%esi),%esi
    argv[argc++] = bad_cast ("-");

  
// ABS Label 487
if(argc < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 487);
 8055884:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055888:	89 3c 24             	mov    %edi,(%esp)
 805588b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805588f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055893:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055897:	b9 fe f0 00 00       	mov    $0xf0fe,%ecx
 805589c:	e8 b7 2e 00 00       	call   8058758 <__afl_maybe_log>
 80558a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80558a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80558a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80558ad:	8b 3c 24             	mov    (%esp),%edi
 80558b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80558b4:	52                   	push   %edx
 80558b5:	52                   	push   %edx
 80558b6:	68 e7 01 00 00       	push   $0x1e7
 80558bb:	68 d0 70 06 08       	push   $0x80670d0
 80558c0:	e8 fb 07 00 00       	call   80560c0 <report_label_coverage>
 80558c5:	83 c4 10             	add    $0x10,%esp
 80558c8:	e9 3f 5a ff ff       	jmp    804b30c <main+0x1dcc>
 80558cd:	8d 76 00             	lea    0x0(%esi),%esi
    binary = 0;

  
// ABS Label 484
if(argc < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 484);
 80558d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80558d4:	89 3c 24             	mov    %edi,(%esp)
 80558d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80558db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80558df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80558e3:	b9 87 c3 00 00       	mov    $0xc387,%ecx
 80558e8:	e8 6b 2e 00 00       	call   8058758 <__afl_maybe_log>
 80558ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80558f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80558f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80558f9:	8b 3c 24             	mov    (%esp),%edi
 80558fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055900:	56                   	push   %esi
 8055901:	56                   	push   %esi
 8055902:	68 e4 01 00 00       	push   $0x1e4
 8055907:	68 d0 70 06 08       	push   $0x80670d0
 805590c:	e8 af 07 00 00       	call   80560c0 <report_label_coverage>
 8055911:	83 c4 10             	add    $0x10,%esp
 8055914:	e9 17 58 ff ff       	jmp    804b130 <main+0x1bf0>
 8055919:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ROR", 479);
}

// MCC Label 480
if(!0 && binary < 0 ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 480);
 805591c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055920:	89 3c 24             	mov    %edi,(%esp)
 8055923:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055927:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805592b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805592f:	b9 fa ad 00 00       	mov    $0xadfa,%ecx
 8055934:	e8 1f 2e 00 00       	call   8058758 <__afl_maybe_log>
 8055939:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805593d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055941:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055945:	8b 3c 24             	mov    (%esp),%edi
 8055948:	8d 64 24 10          	lea    0x10(%esp),%esp
 805594c:	57                   	push   %edi
 805594d:	57                   	push   %edi
 805594e:	68 e0 01 00 00       	push   $0x1e0
 8055953:	68 de 70 06 08       	push   $0x80670de
 8055958:	e8 63 07 00 00       	call   80560c0 <report_label_coverage>
 805595d:	83 c4 10             	add    $0x10,%esp
// MCC Label 483
if(!(!0) && !(binary < 0) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 483);
}
if (!O_BINARY && binary < 0)
    binary = 0;
 8055960:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%ebp)
 8055967:	00 00 00 
 805596a:	e9 55 57 ff ff       	jmp    804b0c4 <main+0x1b84>
 805596f:	90                   	nop
   }

  
// ABS Label 475
if(binary < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 475);
 8055970:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055974:	89 3c 24             	mov    %edi,(%esp)
 8055977:	89 54 24 04          	mov    %edx,0x4(%esp)
 805597b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805597f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055983:	b9 8e 20 00 00       	mov    $0x208e,%ecx
 8055988:	e8 cb 2d 00 00       	call   8058758 <__afl_maybe_log>
 805598d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055991:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055995:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055999:	8b 3c 24             	mov    (%esp),%edi
 805599c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80559a0:	50                   	push   %eax
 80559a1:	50                   	push   %eax
 80559a2:	68 db 01 00 00       	push   $0x1db
 80559a7:	68 d0 70 06 08       	push   $0x80670d0
 80559ac:	e8 0f 07 00 00       	call   80560c0 <report_label_coverage>
 80559b1:	83 c4 10             	add    $0x10,%esp
 80559b4:	e9 13 55 ff ff       	jmp    804aecc <main+0x198c>
 80559b9:	8d 76 00             	lea    0x0(%esi),%esi
    }

  
// ABS Label 449
if(binary < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 449);
 80559bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80559c0:	89 3c 24             	mov    %edi,(%esp)
 80559c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80559c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80559cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80559cf:	b9 70 0a 00 00       	mov    $0xa70,%ecx
 80559d4:	e8 7f 2d 00 00       	call   8058758 <__afl_maybe_log>
 80559d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80559dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80559e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80559e5:	8b 3c 24             	mov    (%esp),%edi
 80559e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80559ec:	50                   	push   %eax
 80559ed:	50                   	push   %eax
 80559ee:	68 c1 01 00 00       	push   $0x1c1
 80559f3:	68 d0 70 06 08       	push   $0x80670d0
 80559f8:	e8 c3 06 00 00       	call   80560c0 <report_label_coverage>
}

// COR Label 450
if((0 <= binary || do_check) != (0 <= binary && do_check))  {asm volatile (""::: "memory");
 80559fd:	83 c4 10             	add    $0x10,%esp
 8055a00:	80 bd 7f ff ff ff 00 	cmpb   $0x0,-0x81(%ebp)
 8055a07:	c6 45 a4 00          	movb   $0x0,-0x5c(%ebp)
 8055a0b:	0f 85 cf 47 ff ff    	jne    804a1e0 <main+0xca0>
 8055a11:	8d 76 00             	lea    0x0(%esi),%esi
 8055a14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055a18:	89 3c 24             	mov    %edi,(%esp)
 8055a1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055a1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055a23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055a27:	b9 2a 77 00 00       	mov    $0x772a,%ecx
 8055a2c:	e8 27 2d 00 00       	call   8058758 <__afl_maybe_log>
 8055a31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055a35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055a39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055a3d:	8b 3c 24             	mov    (%esp),%edi
 8055a40:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055a44:	0f b6 85 7f ff ff ff 	movzbl -0x81(%ebp),%eax
 8055a4b:	c6 45 9c 00          	movb   $0x0,-0x64(%ebp)
// ROR Label 451
if((0 < binary) != (0 <= binary))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 451);
}
// ROR Label 452
if((0 > binary) != (0 <= binary))  {asm volatile (""::: "memory");
 8055a4f:	bf 01 00 00 00       	mov    $0x1,%edi
if(binary < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 449);
}

// COR Label 450
if((0 <= binary || do_check) != (0 <= binary && do_check))  {asm volatile (""::: "memory");
 8055a54:	88 45 a4             	mov    %al,-0x5c(%ebp)
 8055a57:	e9 c0 48 ff ff       	jmp    804a31c <main+0xddc>
// ABS Label 224
if(escaped_filename < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 224);
}
if (escaped_filename) {
    char *temp_1 = filename_unescape(s, i);
 8055a5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055a60:	89 3c 24             	mov    %edi,(%esp)
 8055a63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055a67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055a6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055a6f:	b9 1c f8 00 00       	mov    $0xf81c,%ecx
 8055a74:	e8 df 2c 00 00       	call   8058758 <__afl_maybe_log>
 8055a79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055a7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055a81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055a85:	8b 3c 24             	mov    (%esp),%edi
 8055a88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055a8c:	89 da                	mov    %ebx,%edx
 8055a8e:	89 f8                	mov    %edi,%eax
 8055a90:	e8 6b 06 00 00       	call   8056100 <filename_unescape>
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 225);
}

// ROR Label 226
if((temp_1 != ((void *)0)) != (temp_1 == ((void *)0)))  {asm volatile (""::: "memory");
 8055a95:	85 c0                	test   %eax,%eax
 8055a97:	0f 94 c2             	sete   %dl
 8055a9a:	0f 95 c0             	setne  %al
 8055a9d:	38 d0                	cmp    %dl,%al
 8055a9f:	74 4e                	je     8055aef <main+0xc5af>
 8055aa1:	8d 76 00             	lea    0x0(%esi),%esi
 8055aa4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055aa8:	89 3c 24             	mov    %edi,(%esp)
 8055aab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055aaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ab3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055ab7:	b9 55 3e 00 00       	mov    $0x3e55,%ecx
 8055abc:	e8 97 2c 00 00       	call   8058758 <__afl_maybe_log>
 8055ac1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055ac5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055ac9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055acd:	8b 3c 24             	mov    (%esp),%edi
 8055ad0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ad4:	88 55 a4             	mov    %dl,-0x5c(%ebp)
	report_label_coverage("ROR", 226);
 8055ad7:	51                   	push   %ecx
 8055ad8:	51                   	push   %ecx
 8055ad9:	68 e2 00 00 00       	push   $0xe2
 8055ade:	68 c8 70 06 08       	push   $0x80670c8
 8055ae3:	e8 d8 05 00 00       	call   80560c0 <report_label_coverage>
 8055ae8:	0f b6 55 a4          	movzbl -0x5c(%ebp),%edx
 8055aec:	83 c4 10             	add    $0x10,%esp
 8055aef:	90                   	nop
}
if (temp_1 == ((void *)0)) {
 8055af0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055af4:	89 3c 24             	mov    %edi,(%esp)
 8055af7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055afb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055aff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055b03:	b9 4f 00 00 00       	mov    $0x4f,%ecx
 8055b08:	e8 4b 2c 00 00       	call   8058758 <__afl_maybe_log>
 8055b0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055b11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055b15:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055b19:	8b 3c 24             	mov    (%esp),%edi
 8055b1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055b20:	84 d2                	test   %dl,%dl
 8055b22:	0f 84 84 dd ff ff    	je     80538ac <main+0xa36c>
 8055b28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055b2c:	89 3c 24             	mov    %edi,(%esp)
 8055b2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055b33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055b37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055b3b:	b9 d7 2b 00 00       	mov    $0x2bd7,%ecx
 8055b40:	e8 13 2c 00 00       	call   8058758 <__afl_maybe_log>
 8055b45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055b49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055b4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055b51:	8b 3c 24             	mov    (%esp),%edi
 8055b54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055b58:	e9 e7 8c ff ff       	jmp    804e844 <main+0x5304>
 8055b5d:	8d 76 00             	lea    0x0(%esi),%esi
 8055b60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055b64:	89 3c 24             	mov    %edi,(%esp)
 8055b67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055b6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055b6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055b73:	b9 c2 7c 00 00       	mov    $0x7cc2,%ecx
 8055b78:	e8 db 2b 00 00       	call   8058758 <__afl_maybe_log>
 8055b7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055b81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055b85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055b89:	8b 3c 24             	mov    (%esp),%edi
 8055b8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055b90:	52                   	push   %edx
 8055b91:	52                   	push   %edx
 8055b92:	be 01 00 00 00       	mov    $0x1,%esi
 8055b97:	6a 5c                	push   $0x5c
 8055b99:	50                   	push   %eax
 8055b9a:	e8 d1 38 ff ff       	call   8049470 <__overflow@plt>
 8055b9f:	83 c4 10             	add    $0x10,%esp
 8055ba2:	e9 1f 5c ff ff       	jmp    804b7c6 <main+0x2286>
 8055ba7:	90                   	nop
  if (!is_stdin) {
    int temp_1 = rpl_fclose(checkfile_stream);
    
// ABS Label 421
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 421);
 8055ba8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055bac:	89 3c 24             	mov    %edi,(%esp)
 8055baf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055bb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055bb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055bbb:	b9 4a 5d 00 00       	mov    $0x5d4a,%ecx
 8055bc0:	e8 93 2b 00 00       	call   8058758 <__afl_maybe_log>
 8055bc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055bc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055bcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055bd1:	8b 3c 24             	mov    (%esp),%edi
 8055bd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055bd8:	52                   	push   %edx
 8055bd9:	52                   	push   %edx
}

// ROR Label 422
if((temp_1 == 0) != (temp_1 != 0))  {asm volatile (""::: "memory");
 8055bda:	bb 01 00 00 00       	mov    $0x1,%ebx
  if (!is_stdin) {
    int temp_1 = rpl_fclose(checkfile_stream);
    
// ABS Label 421
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 421);
 8055bdf:	68 a5 01 00 00       	push   $0x1a5
 8055be4:	68 d0 70 06 08       	push   $0x80670d0
 8055be9:	e8 d2 04 00 00       	call   80560c0 <report_label_coverage>
 8055bee:	83 c4 10             	add    $0x10,%esp
 8055bf1:	e9 cd e7 ff ff       	jmp    80543c3 <main+0xae83>
 8055bf6:	66 90                	xchg   %ax,%ax
if (checkfile_stream == NULL)
        {
          
// ABS Label 324
if((*__errno_location()) < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 324);
 8055bf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055bfc:	89 3c 24             	mov    %edi,(%esp)
 8055bff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055c03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055c07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055c0b:	b9 71 2d 00 00       	mov    $0x2d71,%ecx
 8055c10:	e8 43 2b 00 00       	call   8058758 <__afl_maybe_log>
 8055c15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055c19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055c1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055c21:	8b 3c 24             	mov    (%esp),%edi
 8055c24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055c28:	51                   	push   %ecx
 8055c29:	51                   	push   %ecx
 8055c2a:	68 44 01 00 00       	push   $0x144
 8055c2f:	68 d0 70 06 08       	push   $0x80670d0
 8055c34:	e8 87 04 00 00       	call   80560c0 <report_label_coverage>
 8055c39:	83 c4 10             	add    $0x10,%esp
 8055c3c:	e9 af d4 ff ff       	jmp    80530f0 <main+0x9bb0>
 8055c41:	8d 76 00             	lea    0x0(%esi),%esi
if(( (s[i]) == ' ' && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 227);
}
// MCC Label 228
if(( (s[i]) == ' ' && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 228);
 8055c44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055c48:	89 3c 24             	mov    %edi,(%esp)
 8055c4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055c4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055c53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055c57:	b9 af b0 00 00       	mov    $0xb0af,%ecx
 8055c5c:	e8 f7 2a 00 00       	call   8058758 <__afl_maybe_log>
 8055c61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055c65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055c69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055c6d:	8b 3c 24             	mov    (%esp),%edi
 8055c70:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055c74:	52                   	push   %edx
 8055c75:	52                   	push   %edx
 8055c76:	68 e4 00 00 00       	push   $0xe4
 8055c7b:	68 de 70 06 08       	push   $0x80670de
 8055c80:	e8 3b 04 00 00       	call   80560c0 <report_label_coverage>
 8055c85:	83 c4 10             	add    $0x10,%esp
 8055c88:	e9 93 dc ff ff       	jmp    8053920 <main+0xa3e0>
 8055c8d:	8d 76 00             	lea    0x0(%esi),%esi
    int temp_1 = rpl_fclose(stdin);
    int temp_2 = -1;
    
// ABS Label 522
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 522);
 8055c90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055c94:	89 3c 24             	mov    %edi,(%esp)
 8055c97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055c9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055c9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055ca3:	b9 04 98 00 00       	mov    $0x9804,%ecx
 8055ca8:	e8 ab 2a 00 00       	call   8058758 <__afl_maybe_log>
 8055cad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055cb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055cb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055cb9:	8b 3c 24             	mov    (%esp),%edi
 8055cbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055cc0:	50                   	push   %eax
 8055cc1:	50                   	push   %eax
 8055cc2:	68 0a 02 00 00       	push   $0x20a
 8055cc7:	68 d0 70 06 08       	push   $0x80670d0
 8055ccc:	e8 ef 03 00 00       	call   80560c0 <report_label_coverage>
 8055cd1:	83 c4 10             	add    $0x10,%esp
 8055cd4:	e9 33 f1 ff ff       	jmp    8054e0c <main+0xb8cc>
 8055cd9:	8d 76 00             	lea    0x0(%esi),%esi
if(( (s[i]) == ' ' && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 228);
}
// MCC Label 229
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 229);
 8055cdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055ce0:	89 3c 24             	mov    %edi,(%esp)
 8055ce3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055ce7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ceb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055cef:	b9 3a e7 00 00       	mov    $0xe73a,%ecx
 8055cf4:	e8 5f 2a 00 00       	call   8058758 <__afl_maybe_log>
 8055cf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055cfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055d01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055d05:	8b 3c 24             	mov    (%esp),%edi
 8055d08:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055d0c:	50                   	push   %eax
 8055d0d:	50                   	push   %eax
 8055d0e:	68 e5 00 00 00       	push   $0xe5
 8055d13:	68 de 70 06 08       	push   $0x80670de
 8055d18:	e8 a3 03 00 00       	call   80560c0 <report_label_coverage>
 8055d1d:	83 c4 10             	add    $0x10,%esp
 8055d20:	e9 67 dc ff ff       	jmp    805398c <main+0xa44c>
 8055d25:	8d 76 00             	lea    0x0(%esi),%esi
if(!(0 <= binary) && !(do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 457);
}
if (0 <= binary && do_check)
    {
      error (0, 0, _("the --binary and --text options are meaningless when "
 8055d28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055d2c:	89 3c 24             	mov    %edi,(%esp)
 8055d2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055d33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055d37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055d3b:	b9 71 ce 00 00       	mov    $0xce71,%ecx
 8055d40:	e8 13 2a 00 00       	call   8058758 <__afl_maybe_log>
 8055d45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055d49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055d4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055d51:	8b 3c 24             	mov    (%esp),%edi
 8055d54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055d58:	50                   	push   %eax
 8055d59:	6a 05                	push   $0x5
 8055d5b:	68 50 78 06 08       	push   $0x8067850
if(!(prefix_tag) && !(do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 448);
}
if (prefix_tag && do_check)
    {
      error (0, 0, _("the --tag option is meaningless when "
 8055d60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055d64:	89 3c 24             	mov    %edi,(%esp)
 8055d67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055d6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055d6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055d73:	b9 f8 12 00 00       	mov    $0x12f8,%ecx
 8055d78:	e8 db 29 00 00       	call   8058758 <__afl_maybe_log>
 8055d7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055d81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055d85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055d89:	8b 3c 24             	mov    (%esp),%edi
 8055d8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055d90:	6a 00                	push   $0x0
 8055d92:	e8 39 34 ff ff       	call   80491d0 <dcgettext@plt>
 8055d97:	83 c4 0c             	add    $0xc,%esp
 8055d9a:	50                   	push   %eax
 8055d9b:	6a 00                	push   $0x0
 8055d9d:	6a 00                	push   $0x0
 8055d9f:	e8 ec 34 ff ff       	call   8049290 <error@plt>
                     "verifying checksums"));
      usage (EXIT_FAILURE);
 8055da4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8055dab:	e8 20 20 00 00       	call   8057dd0 <usage>
	report_label_coverage("MCC", 462);
}
if (status_only && !do_check)
    {
      error (0, 0,
       _("the --status option is meaningful only when verifying checksums"));
 8055db0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055db4:	89 3c 24             	mov    %edi,(%esp)
 8055db7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055dbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055dbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055dc3:	b9 f5 34 00 00       	mov    $0x34f5,%ecx
 8055dc8:	e8 8b 29 00 00       	call   8058758 <__afl_maybe_log>
 8055dcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055dd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055dd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055dd9:	8b 3c 24             	mov    (%esp),%edi
 8055ddc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055de0:	50                   	push   %eax
 8055de1:	6a 05                	push   $0x5
 8055de3:	68 9c 78 06 08       	push   $0x806789c
 8055de8:	e9 73 ff ff ff       	jmp    8055d60 <main+0xc820>
 8055ded:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("MCC", 467);
}
if (warn && !do_check)
    {
      error (0, 0,
       _("the --warn option is meaningful only when verifying checksums"));
 8055df0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055df4:	89 3c 24             	mov    %edi,(%esp)
 8055df7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055dfb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055dff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055e03:	b9 75 85 00 00       	mov    $0x8575,%ecx
 8055e08:	e8 4b 29 00 00       	call   8058758 <__afl_maybe_log>
 8055e0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055e11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055e15:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055e19:	8b 3c 24             	mov    (%esp),%edi
 8055e1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055e20:	50                   	push   %eax
 8055e21:	6a 05                	push   $0x5
 8055e23:	68 dc 78 06 08       	push   $0x80678dc
 8055e28:	e9 33 ff ff ff       	jmp    8055d60 <main+0xc820>
 8055e2d:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("AOR", 474);
}
if (strict & !do_check)
   {
     error (0, 0,
        _("the --strict option is meaningful only when verifying checksums"));
 8055e30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055e34:	89 3c 24             	mov    %edi,(%esp)
 8055e37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055e3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055e3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055e43:	b9 97 4e 00 00       	mov    $0x4e97,%ecx
 8055e48:	e8 0b 29 00 00       	call   8058758 <__afl_maybe_log>
 8055e4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055e51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055e55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055e59:	8b 3c 24             	mov    (%esp),%edi
 8055e5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055e60:	50                   	push   %eax
 8055e61:	6a 05                	push   $0x5
 8055e63:	68 5c 79 06 08       	push   $0x806795c
 8055e68:	e9 f3 fe ff ff       	jmp    8055d60 <main+0xc820>
 8055e6d:	8d 76 00             	lea    0x0(%esi),%esi
if(!(prefix_tag) && !(do_check) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 448);
}
if (prefix_tag && do_check)
    {
      error (0, 0, _("the --tag option is meaningless when "
 8055e70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055e74:	89 3c 24             	mov    %edi,(%esp)
 8055e77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055e7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055e7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055e83:	b9 6c aa 00 00       	mov    $0xaa6c,%ecx
 8055e88:	e8 cb 28 00 00       	call   8058758 <__afl_maybe_log>
 8055e8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055e91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055e95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055e99:	8b 3c 24             	mov    (%esp),%edi
 8055e9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ea0:	50                   	push   %eax
 8055ea1:	6a 05                	push   $0x5
 8055ea3:	68 14 78 06 08       	push   $0x8067814
 8055ea8:	e9 b3 fe ff ff       	jmp    8055d60 <main+0xc820>
 8055ead:	8d 76 00             	lea    0x0(%esi),%esi
if(( (s[i]) == ' ' && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 237);
}
// MCC Label 238
if(( !((s[i]) == ' ') && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 238);
 8055eb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055eb4:	89 3c 24             	mov    %edi,(%esp)
 8055eb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055ebb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ebf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055ec3:	b9 ab 4d 00 00       	mov    $0x4dab,%ecx
 8055ec8:	e8 8b 28 00 00       	call   8058758 <__afl_maybe_log>
 8055ecd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055ed1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055ed5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055ed9:	8b 3c 24             	mov    (%esp),%edi
 8055edc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ee0:	50                   	push   %eax
 8055ee1:	50                   	push   %eax
 8055ee2:	68 ee 00 00 00       	push   $0xee
 8055ee7:	68 de 70 06 08       	push   $0x80670de
 8055eec:	e8 cf 01 00 00       	call   80560c0 <report_label_coverage>
 8055ef1:	83 c4 10             	add    $0x10,%esp
 8055ef4:	e9 4f de ff ff       	jmp    8053d48 <main+0xa808>
 8055ef9:	8d 76 00             	lea    0x0(%esi),%esi
if(( (s[i]) == ' ' && (s[i]) == '\t' ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 236);
}
// MCC Label 237
if(( (s[i]) == ' ' && !((s[i]) == '\t') ) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 237);
 8055efc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055f00:	89 3c 24             	mov    %edi,(%esp)
 8055f03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055f07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055f0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055f0f:	b9 11 0a 00 00       	mov    $0xa11,%ecx
 8055f14:	e8 3f 28 00 00       	call   8058758 <__afl_maybe_log>
 8055f19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055f1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055f21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055f25:	8b 3c 24             	mov    (%esp),%edi
 8055f28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055f2c:	50                   	push   %eax
 8055f2d:	50                   	push   %eax
 8055f2e:	68 ed 00 00 00       	push   $0xed
 8055f33:	68 de 70 06 08       	push   $0x80670de
 8055f38:	e8 83 01 00 00       	call   80560c0 <report_label_coverage>
 8055f3d:	83 c4 10             	add    $0x10,%esp
 8055f40:	e9 97 dd ff ff       	jmp    8053cdc <main+0xa79c>
 8055f45:	8d 76 00             	lea    0x0(%esi),%esi
     /* This could be supported in a backwards compatible way
        by prefixing the output line with a space in text mode.
        However that's invasive enough that it was agreed to
        not support this mode with --tag, as --text use cases
        are adequately supported by the default output format.  */
     error (0, 0, _("--tag does not support --text mode"));
 8055f48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055f4c:	89 3c 24             	mov    %edi,(%esp)
 8055f4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055f53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055f57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055f5b:	b9 9f 40 00 00       	mov    $0x409f,%ecx
 8055f60:	e8 f3 27 00 00       	call   8058758 <__afl_maybe_log>
 8055f65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055f69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055f6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055f71:	8b 3c 24             	mov    (%esp),%edi
 8055f74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055f78:	53                   	push   %ebx
 8055f79:	6a 05                	push   $0x5
 8055f7b:	68 f0 77 06 08       	push   $0x80677f0
 8055f80:	e9 db fd ff ff       	jmp    8055d60 <main+0xc820>
 8055f85:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("MCC", 472);
}
if (quiet && !do_check)
    {
      error (0, 0,
       _("the --quiet option is meaningful only when verifying checksums"));
 8055f88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055f8c:	89 3c 24             	mov    %edi,(%esp)
 8055f8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055f93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055f97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055f9b:	b9 3c 5f 00 00       	mov    $0x5f3c,%ecx
 8055fa0:	e8 b3 27 00 00       	call   8058758 <__afl_maybe_log>
 8055fa5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055fa9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055fad:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055fb1:	8b 3c 24             	mov    (%esp),%edi
 8055fb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055fb8:	51                   	push   %ecx
 8055fb9:	6a 05                	push   $0x5
 8055fbb:	68 1c 79 06 08       	push   $0x806791c
 8055fc0:	e9 9b fd ff ff       	jmp    8055d60 <main+0xc820>
 8055fc5:	66 90                	xchg   %ax,%ax
 8055fc7:	90                   	nop

08055fc8 <_start>:
 8055fc8:	31 ed                	xor    %ebp,%ebp
 8055fca:	5e                   	pop    %esi
 8055fcb:	89 e1                	mov    %esp,%ecx
 8055fcd:	83 e4 f0             	and    $0xfffffff0,%esp
 8055fd0:	50                   	push   %eax
 8055fd1:	54                   	push   %esp
 8055fd2:	52                   	push   %edx
 8055fd3:	68 40 70 06 08       	push   $0x8067040
 8055fd8:	68 d0 6f 06 08       	push   $0x8066fd0
 8055fdd:	51                   	push   %ecx
 8055fde:	56                   	push   %esi
 8055fdf:	68 40 95 04 08       	push   $0x8049540
 8055fe4:	e8 87 33 ff ff       	call   8049370 <__libc_start_main@plt>
 8055fe9:	f4                   	hlt    
 8055fea:	66 90                	xchg   %ax,%ax
 8055fec:	66 90                	xchg   %ax,%ax
 8055fee:	66 90                	xchg   %ax,%ax

08055ff0 <__x86.get_pc_thunk.bx>:
 8055ff0:	8b 1c 24             	mov    (%esp),%ebx
 8055ff3:	c3                   	ret    
 8055ff4:	66 90                	xchg   %ax,%ax
 8055ff6:	66 90                	xchg   %ax,%ax
 8055ff8:	66 90                	xchg   %ax,%ax
 8055ffa:	66 90                	xchg   %ax,%ax
 8055ffc:	66 90                	xchg   %ax,%ax
 8055ffe:	66 90                	xchg   %ax,%ax

08056000 <deregister_tm_clones>:
 8056000:	b8 a3 b2 06 08       	mov    $0x806b2a3,%eax
 8056005:	2d a0 b2 06 08       	sub    $0x806b2a0,%eax
 805600a:	83 f8 06             	cmp    $0x6,%eax
 805600d:	76 1a                	jbe    8056029 <deregister_tm_clones+0x29>
 805600f:	b8 00 00 00 00       	mov    $0x0,%eax
 8056014:	85 c0                	test   %eax,%eax
 8056016:	74 11                	je     8056029 <deregister_tm_clones+0x29>
 8056018:	55                   	push   %ebp
 8056019:	89 e5                	mov    %esp,%ebp
 805601b:	83 ec 14             	sub    $0x14,%esp
 805601e:	68 a0 b2 06 08       	push   $0x806b2a0
 8056023:	ff d0                	call   *%eax
 8056025:	83 c4 10             	add    $0x10,%esp
 8056028:	c9                   	leave  
 8056029:	f3 c3                	repz ret 
 805602b:	90                   	nop
 805602c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08056030 <register_tm_clones>:
 8056030:	b8 a0 b2 06 08       	mov    $0x806b2a0,%eax
 8056035:	2d a0 b2 06 08       	sub    $0x806b2a0,%eax
 805603a:	c1 f8 02             	sar    $0x2,%eax
 805603d:	89 c2                	mov    %eax,%edx
 805603f:	c1 ea 1f             	shr    $0x1f,%edx
 8056042:	01 d0                	add    %edx,%eax
 8056044:	d1 f8                	sar    %eax
 8056046:	74 1b                	je     8056063 <register_tm_clones+0x33>
 8056048:	ba 00 00 00 00       	mov    $0x0,%edx
 805604d:	85 d2                	test   %edx,%edx
 805604f:	74 12                	je     8056063 <register_tm_clones+0x33>
 8056051:	55                   	push   %ebp
 8056052:	89 e5                	mov    %esp,%ebp
 8056054:	83 ec 10             	sub    $0x10,%esp
 8056057:	50                   	push   %eax
 8056058:	68 a0 b2 06 08       	push   $0x806b2a0
 805605d:	ff d2                	call   *%edx
 805605f:	83 c4 10             	add    $0x10,%esp
 8056062:	c9                   	leave  
 8056063:	f3 c3                	repz ret 
 8056065:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8056069:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08056070 <__do_global_dtors_aux>:
 8056070:	80 3d dc b2 06 08 00 	cmpb   $0x0,0x806b2dc
 8056077:	75 13                	jne    805608c <__do_global_dtors_aux+0x1c>
 8056079:	55                   	push   %ebp
 805607a:	89 e5                	mov    %esp,%ebp
 805607c:	83 ec 08             	sub    $0x8,%esp
 805607f:	e8 7c ff ff ff       	call   8056000 <deregister_tm_clones>
 8056084:	c6 05 dc b2 06 08 01 	movb   $0x1,0x806b2dc
 805608b:	c9                   	leave  
 805608c:	f3 c3                	repz ret 
 805608e:	66 90                	xchg   %ax,%ax

08056090 <frame_dummy>:
 8056090:	b8 08 b0 06 08       	mov    $0x806b008,%eax
 8056095:	8b 10                	mov    (%eax),%edx
 8056097:	85 d2                	test   %edx,%edx
 8056099:	75 05                	jne    80560a0 <frame_dummy+0x10>
 805609b:	eb 93                	jmp    8056030 <register_tm_clones>
 805609d:	8d 76 00             	lea    0x0(%esi),%esi
 80560a0:	ba 00 00 00 00       	mov    $0x0,%edx
 80560a5:	85 d2                	test   %edx,%edx
 80560a7:	74 f2                	je     805609b <frame_dummy+0xb>
 80560a9:	55                   	push   %ebp
 80560aa:	89 e5                	mov    %esp,%ebp
 80560ac:	83 ec 14             	sub    $0x14,%esp
 80560af:	50                   	push   %eax
 80560b0:	ff d2                	call   *%edx
 80560b2:	83 c4 10             	add    $0x10,%esp
 80560b5:	c9                   	leave  
 80560b6:	e9 75 ff ff ff       	jmp    8056030 <register_tm_clones>
 80560bb:	66 90                	xchg   %ax,%ax
 80560bd:	66 90                	xchg   %ax,%ax
 80560bf:	90                   	nop

080560c0 <report_label_coverage>:
void __attribute__ ((noinline)) report_label_coverage(char * crit, int id) {
	asm volatile (""::: "memory");
 80560c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80560c4:	89 3c 24             	mov    %edi,(%esp)
 80560c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80560cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80560cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80560d3:	b9 f0 10 00 00       	mov    $0x10f0,%ecx
 80560d8:	e8 7b 26 00 00       	call   8058758 <__afl_maybe_log>
 80560dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80560e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80560e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80560e9:	8b 3c 24             	mov    (%esp),%edi
 80560ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80560f0:	c3                   	ret    
 80560f1:	eb 0d                	jmp    8056100 <filename_unescape>
 80560f3:	90                   	nop
 80560f4:	90                   	nop
 80560f5:	90                   	nop
 80560f6:	90                   	nop
 80560f7:	90                   	nop
 80560f8:	90                   	nop
 80560f9:	90                   	nop
 80560fa:	90                   	nop
 80560fb:	90                   	nop
 80560fc:	90                   	nop
 80560fd:	90                   	nop
 80560fe:	90                   	nop
 80560ff:	90                   	nop

08056100 <filename_unescape>:
   of backslashes or if it contains a backslash followed by anything other
   than "n" or another backslash, return NULL.  */

static char *
filename_unescape (char *s, size_t s_len)
{
 8056100:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056104:	89 3c 24             	mov    %edi,(%esp)
 8056107:	89 54 24 04          	mov    %edx,0x4(%esp)
 805610b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805610f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056113:	b9 af 83 00 00       	mov    $0x83af,%ecx
 8056118:	e8 3b 26 00 00       	call   8058758 <__afl_maybe_log>
 805611d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056121:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056125:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056129:	8b 3c 24             	mov    (%esp),%edi
 805612c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056130:	55                   	push   %ebp
 8056131:	57                   	push   %edi
 8056132:	89 d7                	mov    %edx,%edi
 8056134:	56                   	push   %esi
 8056135:	53                   	push   %ebx
 8056136:	89 c6                	mov    %eax,%esi
 8056138:	83 ec 0c             	sub    $0xc,%esp
if(s_len < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 182);
}

// ROR Label 183
if((i <= s_len) != (i < s_len))  {asm volatile (""::: "memory");
 805613b:	85 d2                	test   %edx,%edx
 805613d:	0f 84 45 07 00 00    	je     8056888 <filename_unescape+0x788>
 8056143:	90                   	nop
 8056144:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056148:	89 3c 24             	mov    %edi,(%esp)
 805614b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805614f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056153:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056157:	b9 8d 61 00 00       	mov    $0x618d,%ecx
 805615c:	e8 f7 25 00 00       	call   8058758 <__afl_maybe_log>
 8056161:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056165:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056169:	8b 54 24 04          	mov    0x4(%esp),%edx
 805616d:	8b 3c 24             	mov    (%esp),%edi
 8056170:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 183);
}
// ROR Label 184
if((i > s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 184);
 8056174:	68 b8 00 00 00       	push   $0xb8
 8056179:	68 c8 70 06 08       	push   $0x80670c8
 805617e:	e8 3d ff ff ff       	call   80560c0 <report_label_coverage>
 8056183:	5d                   	pop    %ebp
 8056184:	58                   	pop    %eax
 8056185:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 185
if((i >= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 185);
 8056188:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805618c:	89 3c 24             	mov    %edi,(%esp)
 805618f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056193:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056197:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805619b:	b9 d7 4a 00 00       	mov    $0x4ad7,%ecx
 80561a0:	e8 b3 25 00 00       	call   8058758 <__afl_maybe_log>
 80561a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80561a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80561ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80561b1:	8b 3c 24             	mov    (%esp),%edi
 80561b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80561b8:	68 b9 00 00 00       	push   $0xb9
 80561bd:	68 c8 70 06 08       	push   $0x80670c8
 80561c2:	e8 f9 fe ff ff       	call   80560c0 <report_label_coverage>
}
for (; i < s_len; i++)
 80561c7:	85 ff                	test   %edi,%edi
 80561c9:	59                   	pop    %ecx
 80561ca:	5b                   	pop    %ebx
 80561cb:	0f 84 cf 06 00 00    	je     80568a0 <filename_unescape+0x7a0>
 80561d1:	8d 76 00             	lea    0x0(%esi),%esi
 80561d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80561d8:	89 3c 24             	mov    %edi,(%esp)
 80561db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80561df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80561e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80561e7:	b9 92 29 00 00       	mov    $0x2992,%ecx
 80561ec:	e8 67 25 00 00       	call   8058758 <__afl_maybe_log>
 80561f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80561f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80561f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80561fd:	8b 3c 24             	mov    (%esp),%edi
 8056200:	8d 64 24 10          	lea    0x10(%esp),%esp
// AOR Label 193
if(s_len / 1 != s_len - 1)  {asm volatile (""::: "memory");
	report_label_coverage("AOR", 193);
}
// AOR Label 194
if(s_len + 1 != s_len - 1)  {asm volatile (""::: "memory");
 8056204:	8d 47 ff             	lea    -0x1(%edi),%eax
 8056207:	8d 57 01             	lea    0x1(%edi),%edx
 805620a:	8d 6e 01             	lea    0x1(%esi),%ebp
}
// ROR Label 185
if((i >= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 185);
}
for (; i < s_len; i++)
 805620d:	31 db                	xor    %ebx,%ebx
// AOR Label 193
if(s_len / 1 != s_len - 1)  {asm volatile (""::: "memory");
	report_label_coverage("AOR", 193);
}
// AOR Label 194
if(s_len + 1 != s_len - 1)  {asm volatile (""::: "memory");
 805620f:	89 04 24             	mov    %eax,(%esp)
 8056212:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056216:	66 90                	xchg   %ax,%ax
if((i >= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 185);
}
for (; i < s_len; i++)
    {
      switch (s[i])
 8056218:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805621c:	89 3c 24             	mov    %edi,(%esp)
 805621f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056223:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056227:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805622b:	b9 40 85 00 00       	mov    $0x8540,%ecx
 8056230:	e8 23 25 00 00       	call   8058758 <__afl_maybe_log>
 8056235:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056239:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805623d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056241:	8b 3c 24             	mov    (%esp),%edi
 8056244:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056248:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
 805624c:	84 c0                	test   %al,%al
 805624e:	0f 84 4c 02 00 00    	je     80564a0 <filename_unescape+0x3a0>
 8056254:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056258:	89 3c 24             	mov    %edi,(%esp)
 805625b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805625f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056263:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056267:	b9 f1 e0 00 00       	mov    $0xe0f1,%ecx
 805626c:	e8 e7 24 00 00       	call   8058758 <__afl_maybe_log>
 8056271:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056275:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056279:	8b 54 24 04          	mov    0x4(%esp),%edx
 805627d:	8b 3c 24             	mov    (%esp),%edi
 8056280:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056284:	3c 5c                	cmp    $0x5c,%al
 8056286:	0f 85 54 02 00 00    	jne    80564e0 <filename_unescape+0x3e0>
 805628c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056290:	89 3c 24             	mov    %edi,(%esp)
 8056293:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056297:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805629b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805629f:	b9 93 8e 00 00       	mov    $0x8e93,%ecx
 80562a4:	e8 af 24 00 00       	call   8058758 <__afl_maybe_log>
 80562a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80562ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80562b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80562b5:	8b 3c 24             	mov    (%esp),%edi
 80562b8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 192);
}

// AOR Label 193
if(s_len / 1 != s_len - 1)  {asm volatile (""::: "memory");
	report_label_coverage("AOR", 193);
 80562bc:	68 c1 00 00 00       	push   $0xc1
 80562c1:	68 cc 70 06 08       	push   $0x80670cc
 80562c6:	e8 f5 fd ff ff       	call   80560c0 <report_label_coverage>
}
// AOR Label 194
if(s_len + 1 != s_len - 1)  {asm volatile (""::: "memory");
 80562cb:	58                   	pop    %eax
 80562cc:	5a                   	pop    %edx
 80562cd:	8b 0c 24             	mov    (%esp),%ecx
 80562d0:	39 4c 24 04          	cmp    %ecx,0x4(%esp)
 80562d4:	74 43                	je     8056319 <filename_unescape+0x219>
 80562d6:	66 90                	xchg   %ax,%ax
 80562d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80562dc:	89 3c 24             	mov    %edi,(%esp)
 80562df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80562e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80562e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80562eb:	b9 be 60 00 00       	mov    $0x60be,%ecx
 80562f0:	e8 63 24 00 00       	call   8058758 <__afl_maybe_log>
 80562f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80562f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80562fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056301:	8b 3c 24             	mov    (%esp),%edi
 8056304:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 194);
 8056308:	68 c2 00 00 00       	push   $0xc2
 805630d:	68 cc 70 06 08       	push   $0x80670cc
 8056312:	e8 a9 fd ff ff       	call   80560c0 <report_label_coverage>
 8056317:	59                   	pop    %ecx
 8056318:	58                   	pop    %eax
 8056319:	8d 76 00             	lea    0x0(%esi),%esi
}
// AOR Label 195
if(s_len * 1 != s_len - 1)  {asm volatile (""::: "memory");
	report_label_coverage("AOR", 195);
 805631c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056320:	89 3c 24             	mov    %edi,(%esp)
 8056323:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056327:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805632b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805632f:	b9 fe ea 00 00       	mov    $0xeafe,%ecx
 8056334:	e8 1f 24 00 00       	call   8058758 <__afl_maybe_log>
 8056339:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805633d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056341:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056345:	8b 3c 24             	mov    (%esp),%edi
 8056348:	8d 64 24 10          	lea    0x10(%esp),%esp
 805634c:	68 c3 00 00 00       	push   $0xc3
 8056351:	68 cc 70 06 08       	push   $0x80670cc
 8056356:	e8 65 fd ff ff       	call   80560c0 <report_label_coverage>
}

// ROR Label 196
if((i != s_len - 1) != (i == s_len - 1))  {asm volatile (""::: "memory");
 805635b:	58                   	pop    %eax
 805635c:	5a                   	pop    %edx
 805635d:	8b 14 24             	mov    (%esp),%edx
 8056360:	39 d3                	cmp    %edx,%ebx
 8056362:	0f 94 c2             	sete   %dl
 8056365:	0f 95 c1             	setne  %cl
 8056368:	38 d1                	cmp    %dl,%cl
 805636a:	74 4a                	je     80563b6 <filename_unescape+0x2b6>
 805636c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056370:	89 3c 24             	mov    %edi,(%esp)
 8056373:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056377:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805637b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805637f:	b9 c0 ab 00 00       	mov    $0xabc0,%ecx
 8056384:	e8 cf 23 00 00       	call   8058758 <__afl_maybe_log>
 8056389:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805638d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056391:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056395:	8b 3c 24             	mov    (%esp),%edi
 8056398:	8d 64 24 10          	lea    0x10(%esp),%esp
 805639c:	88 54 24 0b          	mov    %dl,0xb(%esp)
	report_label_coverage("ROR", 196);
 80563a0:	68 c4 00 00 00       	push   $0xc4
 80563a5:	68 c8 70 06 08       	push   $0x80670c8
 80563aa:	e8 11 fd ff ff       	call   80560c0 <report_label_coverage>
 80563af:	59                   	pop    %ecx
 80563b0:	58                   	pop    %eax
 80563b1:	0f b6 54 24 0b       	movzbl 0xb(%esp),%edx
 80563b6:	66 90                	xchg   %ax,%ax
}
if (i == s_len - 1)
 80563b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80563bc:	89 3c 24             	mov    %edi,(%esp)
 80563bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80563c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80563c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80563cb:	b9 27 74 00 00       	mov    $0x7427,%ecx
 80563d0:	e8 83 23 00 00       	call   8058758 <__afl_maybe_log>
 80563d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80563d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80563dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80563e1:	8b 3c 24             	mov    (%esp),%edi
 80563e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80563e8:	84 d2                	test   %dl,%dl
 80563ea:	0f 85 b0 00 00 00    	jne    80564a0 <filename_unescape+0x3a0>
 80563f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80563f4:	89 3c 24             	mov    %edi,(%esp)
 80563f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80563fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80563ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056403:	b9 c1 93 00 00       	mov    $0x93c1,%ecx
 8056408:	e8 4b 23 00 00       	call   8058758 <__afl_maybe_log>
 805640d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056411:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056415:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056419:	8b 3c 24             	mov    (%esp),%edi
 805641c:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              /* File name ends with an unescaped backslash: invalid.  */
              return NULL;
            }
          ++i;
 8056420:	83 c3 01             	add    $0x1,%ebx
          switch (s[i])
 8056423:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
 8056427:	3c 5c                	cmp    $0x5c,%al
 8056429:	0f 84 49 04 00 00    	je     8056878 <filename_unescape+0x778>
 805642f:	90                   	nop
 8056430:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056434:	89 3c 24             	mov    %edi,(%esp)
 8056437:	89 54 24 04          	mov    %edx,0x4(%esp)
 805643b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805643f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056443:	b9 0a df 00 00       	mov    $0xdf0a,%ecx
 8056448:	e8 0b 23 00 00       	call   8058758 <__afl_maybe_log>
 805644d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056451:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056455:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056459:	8b 3c 24             	mov    (%esp),%edi
 805645c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056460:	3c 6e                	cmp    $0x6e,%al
 8056462:	75 3c                	jne    80564a0 <filename_unescape+0x3a0>
 8056464:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056468:	89 3c 24             	mov    %edi,(%esp)
 805646b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805646f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056473:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056477:	b9 bb 36 00 00       	mov    $0x36bb,%ecx
 805647c:	e8 d7 22 00 00       	call   8058758 <__afl_maybe_log>
 8056481:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056485:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056489:	8b 54 24 04          	mov    0x4(%esp),%edx
 805648d:	8b 3c 24             	mov    (%esp),%edi
 8056490:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
            case 'n':
              *dst++ = '\n';
 8056494:	89 e9                	mov    %ebp,%ecx
 8056496:	c6 45 ff 0a          	movb   $0xa,-0x1(%ebp)
              break;
 805649a:	eb 49                	jmp    80564e5 <filename_unescape+0x3e5>
 805649c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
            case '\\':
              *dst++ = '\\';
              break;
            default:
              /* Only '\' or 'n' may follow a backslash.  */
              return NULL;
 80564a0:	31 c0                	xor    %eax,%eax
 80564a2:	66 90                	xchg   %ax,%ax
// ABS Label 206
if(s < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 206);
}
return s;
}
 80564a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80564a8:	89 3c 24             	mov    %edi,(%esp)
 80564ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80564af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80564b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80564b7:	b9 a9 8c 00 00       	mov    $0x8ca9,%ecx
 80564bc:	e8 97 22 00 00       	call   8058758 <__afl_maybe_log>
 80564c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80564c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80564c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80564cd:	8b 3c 24             	mov    (%esp),%edi
 80564d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80564d4:	83 c4 0c             	add    $0xc,%esp
 80564d7:	5b                   	pop    %ebx
 80564d8:	5e                   	pop    %esi
 80564d9:	5f                   	pop    %edi
 80564da:	5d                   	pop    %ebp
 80564db:	c3                   	ret    
 80564dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        case '\0':
          /* The file name may not contain a NUL.  */
          return NULL;

        default:
          *dst++ = s[i];
 80564e0:	89 e9                	mov    %ebp,%ecx
 80564e2:	88 45 ff             	mov    %al,-0x1(%ebp)
 80564e5:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 185
if((i >= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 185);
}
for (; i < s_len; i++)
 80564e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80564ec:	89 3c 24             	mov    %edi,(%esp)
 80564ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80564f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80564f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80564fb:	b9 a4 72 00 00       	mov    $0x72a4,%ecx
 8056500:	e8 53 22 00 00       	call   8058758 <__afl_maybe_log>
 8056505:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056509:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805650d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056511:	8b 3c 24             	mov    (%esp),%edi
 8056514:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056518:	83 c3 01             	add    $0x1,%ebx
 805651b:	83 c5 01             	add    $0x1,%ebp
 805651e:	39 df                	cmp    %ebx,%edi
 8056520:	0f 87 f0 fc ff ff    	ja     8056216 <filename_unescape+0x116>
 8056526:	66 90                	xchg   %ax,%ax
 8056528:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805652c:	89 3c 24             	mov    %edi,(%esp)
 805652f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056533:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056537:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805653b:	b9 bd ba 00 00       	mov    $0xbabd,%ecx
 8056540:	e8 13 22 00 00       	call   8058758 <__afl_maybe_log>
 8056545:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056549:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805654d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056551:	8b 3c 24             	mov    (%esp),%edi
 8056554:	8d 64 24 10          	lea    0x10(%esp),%esp
if(s_len < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 187);
}

// ROR Label 188
if((i <= s_len) != (i < s_len))  {asm volatile (""::: "memory");
 8056558:	0f 83 46 03 00 00    	jae    80568a4 <filename_unescape+0x7a4>
 805655e:	66 90                	xchg   %ax,%ax
 8056560:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056564:	89 3c 24             	mov    %edi,(%esp)
 8056567:	89 54 24 04          	mov    %edx,0x4(%esp)
 805656b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805656f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056573:	b9 12 3e 00 00       	mov    $0x3e12,%ecx
 8056578:	e8 db 21 00 00       	call   8058758 <__afl_maybe_log>
 805657d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056581:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056585:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056589:	8b 3c 24             	mov    (%esp),%edi
 805658c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056590:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056594:	89 3c 24             	mov    %edi,(%esp)
 8056597:	89 54 24 04          	mov    %edx,0x4(%esp)
 805659b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805659f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80565a3:	b9 90 45 00 00       	mov    $0x4590,%ecx
 80565a8:	e8 ab 21 00 00       	call   8058758 <__afl_maybe_log>
 80565ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80565b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80565b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80565b9:	8b 3c 24             	mov    (%esp),%edi
 80565bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80565c0:	89 0c 24             	mov    %ecx,(%esp)
	report_label_coverage("ROR", 188);
}
// ROR Label 189
if((i > s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 189);
 80565c3:	68 bd 00 00 00       	push   $0xbd
 80565c8:	68 c8 70 06 08       	push   $0x80670c8
 80565cd:	e8 ee fa ff ff       	call   80560c0 <report_label_coverage>
 80565d2:	5d                   	pop    %ebp
 80565d3:	58                   	pop    %eax
 80565d4:	8b 0c 24             	mov    (%esp),%ecx
 80565d7:	90                   	nop
 80565d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80565dc:	89 3c 24             	mov    %edi,(%esp)
 80565df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80565e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80565e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80565eb:	b9 28 ca 00 00       	mov    $0xca28,%ecx
 80565f0:	e8 63 21 00 00       	call   8058758 <__afl_maybe_log>
 80565f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80565f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80565fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056601:	8b 3c 24             	mov    (%esp),%edi
 8056604:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056608:	89 0c 24             	mov    %ecx,(%esp)
}
// ROR Label 190
if((i >= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 190);
 805660b:	68 be 00 00 00       	push   $0xbe
 8056610:	68 c8 70 06 08       	push   $0x80670c8
if(s_len < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 199);
}

// AOR Label 200
if(s - s_len != s + s_len)  {asm volatile (""::: "memory");
 8056615:	89 fd                	mov    %edi,%ebp
if((i > s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 189);
}
// ROR Label 190
if((i >= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 190);
 8056617:	e8 a4 fa ff ff       	call   80560c0 <report_label_coverage>
if(s_len < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 199);
}

// AOR Label 200
if(s - s_len != s + s_len)  {asm volatile (""::: "memory");
 805661c:	58                   	pop    %eax
 805661d:	01 fd                	add    %edi,%ebp
 805661f:	5a                   	pop    %edx
 8056620:	8b 14 24             	mov    (%esp),%edx
 8056623:	74 4a                	je     805666f <filename_unescape+0x56f>
 8056625:	8d 76 00             	lea    0x0(%esi),%esi
 8056628:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805662c:	89 3c 24             	mov    %edi,(%esp)
 805662f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056633:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056637:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805663b:	b9 cd c5 00 00       	mov    $0xc5cd,%ecx
 8056640:	e8 13 21 00 00       	call   8058758 <__afl_maybe_log>
 8056645:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056649:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805664d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056651:	8b 3c 24             	mov    (%esp),%edi
 8056654:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056658:	89 14 24             	mov    %edx,(%esp)
	report_label_coverage("AOR", 200);
 805665b:	68 c8 00 00 00       	push   $0xc8
 8056660:	68 cc 70 06 08       	push   $0x80670cc
 8056665:	e8 56 fa ff ff       	call   80560c0 <report_label_coverage>
 805666a:	59                   	pop    %ecx
 805666b:	5b                   	pop    %ebx
 805666c:	8b 14 24             	mov    (%esp),%edx
 805666f:	90                   	nop
if(s * s_len != s + s_len)  {asm volatile (""::: "memory");
	report_label_coverage("AOR", 202);
}
*/
// ROR Label 203
if((dst <= s + s_len) != (dst < s + s_len))  {asm volatile (""::: "memory");
 8056670:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056674:	89 3c 24             	mov    %edi,(%esp)
 8056677:	89 54 24 04          	mov    %edx,0x4(%esp)
 805667b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805667f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056683:	b9 71 24 00 00       	mov    $0x2471,%ecx
 8056688:	e8 cb 20 00 00       	call   8058758 <__afl_maybe_log>
 805668d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056691:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056695:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056699:	8b 3c 24             	mov    (%esp),%edi
 805669c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80566a0:	01 f7                	add    %esi,%edi
 80566a2:	39 fa                	cmp    %edi,%edx
 80566a4:	0f 92 c3             	setb   %bl
 80566a7:	39 d7                	cmp    %edx,%edi
 80566a9:	0f 93 c0             	setae  %al
 80566ac:	38 d8                	cmp    %bl,%al
 80566ae:	74 47                	je     80566f7 <filename_unescape+0x5f7>
 80566b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80566b4:	89 3c 24             	mov    %edi,(%esp)
 80566b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80566bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80566bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80566c3:	b9 06 84 00 00       	mov    $0x8406,%ecx
 80566c8:	e8 8b 20 00 00       	call   8058758 <__afl_maybe_log>
 80566cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80566d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80566d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80566d9:	8b 3c 24             	mov    (%esp),%edi
 80566dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80566e0:	89 14 24             	mov    %edx,(%esp)
	report_label_coverage("ROR", 203);
 80566e3:	68 cb 00 00 00       	push   $0xcb
 80566e8:	68 c8 70 06 08       	push   $0x80670c8
 80566ed:	e8 ce f9 ff ff       	call   80560c0 <report_label_coverage>
 80566f2:	58                   	pop    %eax
 80566f3:	5a                   	pop    %edx
 80566f4:	8b 14 24             	mov    (%esp),%edx
 80566f7:	90                   	nop
}
// ROR Label 204
if((dst > s + s_len) != (dst < s + s_len))  {asm volatile (""::: "memory");
 80566f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80566fc:	89 3c 24             	mov    %edi,(%esp)
 80566ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056703:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056707:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805670b:	b9 a1 2d 00 00       	mov    $0x2da1,%ecx
 8056710:	e8 43 20 00 00       	call   8058758 <__afl_maybe_log>
 8056715:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056719:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805671d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056721:	8b 3c 24             	mov    (%esp),%edi
 8056724:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056728:	39 fa                	cmp    %edi,%edx
 805672a:	0f 97 c1             	seta   %cl
 805672d:	38 cb                	cmp    %cl,%bl
 805672f:	74 4a                	je     805677b <filename_unescape+0x67b>
 8056731:	8d 76 00             	lea    0x0(%esi),%esi
 8056734:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056738:	89 3c 24             	mov    %edi,(%esp)
 805673b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805673f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056743:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056747:	b9 47 8e 00 00       	mov    $0x8e47,%ecx
 805674c:	e8 07 20 00 00       	call   8058758 <__afl_maybe_log>
 8056751:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056755:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056759:	8b 54 24 04          	mov    0x4(%esp),%edx
 805675d:	8b 3c 24             	mov    (%esp),%edi
 8056760:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056764:	89 14 24             	mov    %edx,(%esp)
	report_label_coverage("ROR", 204);
 8056767:	68 cc 00 00 00       	push   $0xcc
 805676c:	68 c8 70 06 08       	push   $0x80670c8
 8056771:	e8 4a f9 ff ff       	call   80560c0 <report_label_coverage>
 8056776:	59                   	pop    %ecx
 8056777:	5d                   	pop    %ebp
 8056778:	8b 14 24             	mov    (%esp),%edx
 805677b:	90                   	nop
}
// ROR Label 205
if((dst >= s + s_len) != (dst < s + s_len))  {asm volatile (""::: "memory");
 805677c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056780:	89 3c 24             	mov    %edi,(%esp)
 8056783:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805678b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805678f:	b9 0f ec 00 00       	mov    $0xec0f,%ecx
 8056794:	e8 bf 1f 00 00       	call   8058758 <__afl_maybe_log>
 8056799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805679d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80567a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80567a5:	8b 3c 24             	mov    (%esp),%edi
 80567a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80567ac:	39 fa                	cmp    %edi,%edx
 80567ae:	0f 93 c0             	setae  %al
 80567b1:	38 c3                	cmp    %al,%bl
 80567b3:	74 4a                	je     80567ff <filename_unescape+0x6ff>
 80567b5:	8d 76 00             	lea    0x0(%esi),%esi
 80567b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80567bc:	89 3c 24             	mov    %edi,(%esp)
 80567bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80567c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80567c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80567cb:	b9 3d 79 00 00       	mov    $0x793d,%ecx
 80567d0:	e8 83 1f 00 00       	call   8058758 <__afl_maybe_log>
 80567d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80567d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80567dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80567e1:	8b 3c 24             	mov    (%esp),%edi
 80567e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80567e8:	89 14 24             	mov    %edx,(%esp)
	report_label_coverage("ROR", 205);
 80567eb:	68 cd 00 00 00       	push   $0xcd
 80567f0:	68 c8 70 06 08       	push   $0x80670c8
 80567f5:	e8 c6 f8 ff ff       	call   80560c0 <report_label_coverage>
 80567fa:	58                   	pop    %eax
 80567fb:	5a                   	pop    %edx
 80567fc:	8b 14 24             	mov    (%esp),%edx
 80567ff:	90                   	nop
}
if (dst < s + s_len)
 8056800:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056804:	89 3c 24             	mov    %edi,(%esp)
 8056807:	89 54 24 04          	mov    %edx,0x4(%esp)
 805680b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805680f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056813:	b9 44 b9 00 00       	mov    $0xb944,%ecx
 8056818:	e8 3b 1f 00 00       	call   8058758 <__afl_maybe_log>
 805681d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056821:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056825:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056829:	8b 3c 24             	mov    (%esp),%edi
 805682c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056830:	39 d7                	cmp    %edx,%edi
  
// ABS Label 206
if(s < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 206);
}
return s;
 8056832:	89 f0                	mov    %esi,%eax
}
// ROR Label 205
if((dst >= s + s_len) != (dst < s + s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 205);
}
if (dst < s + s_len)
 8056834:	0f 86 68 fc ff ff    	jbe    80564a2 <filename_unescape+0x3a2>
 805683a:	66 90                	xchg   %ax,%ax
 805683c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056840:	89 3c 24             	mov    %edi,(%esp)
 8056843:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056847:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805684b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805684f:	b9 a6 ee 00 00       	mov    $0xeea6,%ecx
 8056854:	e8 ff 1e 00 00       	call   8058758 <__afl_maybe_log>
 8056859:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805685d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056861:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056865:	8b 3c 24             	mov    (%esp),%edi
 8056868:	8d 64 24 10          	lea    0x10(%esp),%esp
    *dst = '\0';
 805686c:	c6 02 00             	movb   $0x0,(%edx)
 805686f:	e9 2e fc ff ff       	jmp    80564a2 <filename_unescape+0x3a2>
 8056874:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
            {
            case 'n':
              *dst++ = '\n';
              break;
            case '\\':
              *dst++ = '\\';
 8056878:	89 e9                	mov    %ebp,%ecx
 805687a:	c6 45 ff 5c          	movb   $0x5c,-0x1(%ebp)
              break;
 805687e:	e9 62 fc ff ff       	jmp    80564e5 <filename_unescape+0x3e5>
 8056883:	90                   	nop
 8056884:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	report_label_coverage("ABS", 182);
}

// ROR Label 183
if((i <= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 183);
 8056888:	68 b7 00 00 00       	push   $0xb7
 805688d:	68 c8 70 06 08       	push   $0x80670c8
 8056892:	e8 29 f8 ff ff       	call   80560c0 <report_label_coverage>
 8056897:	59                   	pop    %ecx
 8056898:	5b                   	pop    %ebx
 8056899:	e9 e7 f8 ff ff       	jmp    8056185 <filename_unescape+0x85>
 805689e:	66 90                	xchg   %ax,%ax
}
// ROR Label 185
if((i >= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 185);
}
for (; i < s_len; i++)
 80568a0:	89 f1                	mov    %esi,%ecx
 80568a2:	31 db                	xor    %ebx,%ebx
 80568a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80568a8:	89 3c 24             	mov    %edi,(%esp)
 80568ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80568af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80568b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80568b7:	b9 46 af 00 00       	mov    $0xaf46,%ecx
 80568bc:	e8 97 1e 00 00       	call   8058758 <__afl_maybe_log>
 80568c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80568c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80568c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80568cd:	8b 3c 24             	mov    (%esp),%edi
 80568d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80568d4:	89 0c 24             	mov    %ecx,(%esp)
	report_label_coverage("ABS", 187);
}

// ROR Label 188
if((i <= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 188);
 80568d7:	68 bc 00 00 00       	push   $0xbc
 80568dc:	68 c8 70 06 08       	push   $0x80670c8
 80568e1:	e8 da f7 ff ff       	call   80560c0 <report_label_coverage>
 80568e6:	58                   	pop    %eax
}
// ROR Label 189
if((i > s_len) != (i < s_len))  {asm volatile (""::: "memory");
 80568e7:	39 df                	cmp    %ebx,%edi
	report_label_coverage("ABS", 187);
}

// ROR Label 188
if((i <= s_len) != (i < s_len))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 188);
 80568e9:	5a                   	pop    %edx
}
// ROR Label 189
if((i > s_len) != (i < s_len))  {asm volatile (""::: "memory");
 80568ea:	8b 0c 24             	mov    (%esp),%ecx
 80568ed:	0f 83 e4 fc ff ff    	jae    80565d7 <filename_unescape+0x4d7>
 80568f3:	90                   	nop
 80568f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80568f8:	89 3c 24             	mov    %edi,(%esp)
 80568fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80568ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056903:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056907:	b9 72 97 00 00       	mov    $0x9772,%ecx
 805690c:	e8 47 1e 00 00       	call   8058758 <__afl_maybe_log>
 8056911:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056915:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056919:	8b 54 24 04          	mov    0x4(%esp),%edx
 805691d:	8b 3c 24             	mov    (%esp),%edi
 8056920:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056924:	e9 67 fc ff ff       	jmp    8056590 <filename_unescape+0x490>
 8056929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08056930 <print_filename>:

/* If ESCAPE is true, then translate each NEWLINE byte to the string, "\\n",
   and each backslash to "\\\\".  */
static void
print_filename (char const *file, bool escape)
{
 8056930:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056934:	89 3c 24             	mov    %edi,(%esp)
 8056937:	89 54 24 04          	mov    %edx,0x4(%esp)
 805693b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805693f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056943:	b9 c2 6c 00 00       	mov    $0x6cc2,%ecx
 8056948:	e8 0b 1e 00 00       	call   8058758 <__afl_maybe_log>
 805694d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056951:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056955:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056959:	8b 3c 24             	mov    (%esp),%edi
 805695c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056960:	56                   	push   %esi
 8056961:	53                   	push   %ebx
 8056962:	89 c3                	mov    %eax,%ebx
 8056964:	83 ec 04             	sub    $0x4,%esp
  if (! escape)
 8056967:	84 d2                	test   %dl,%dl
 8056969:	0f 84 21 02 00 00    	je     8056b90 <print_filename+0x260>
 805696f:	90                   	nop
 8056970:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056974:	89 3c 24             	mov    %edi,(%esp)
 8056977:	89 54 24 04          	mov    %edx,0x4(%esp)
 805697b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805697f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056983:	b9 c1 7b 00 00       	mov    $0x7bc1,%ecx
 8056988:	e8 cb 1d 00 00       	call   8058758 <__afl_maybe_log>
 805698d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056991:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056995:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056999:	8b 3c 24             	mov    (%esp),%edi
 805699c:	8d 64 24 10          	lea    0x10(%esp),%esp
      return;
    }

  
// ABS Label 435
if(*file < 0)  {asm volatile (""::: "memory");
 80569a0:	0f b6 10             	movzbl (%eax),%edx
 80569a3:	84 d2                	test   %dl,%dl
 80569a5:	0f 89 8b 00 00 00    	jns    8056a36 <print_filename+0x106>
 80569ab:	90                   	nop
 80569ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80569b0:	89 3c 24             	mov    %edi,(%esp)
 80569b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80569b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80569bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80569bf:	b9 93 ba 00 00       	mov    $0xba93,%ecx
 80569c4:	e8 8f 1d 00 00       	call   8058758 <__afl_maybe_log>
 80569c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80569cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80569d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80569d5:	8b 3c 24             	mov    (%esp),%edi
 80569d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80569dc:	e9 17 02 00 00       	jmp    8056bf8 <print_filename+0x2c8>
 80569e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
        case '\n':
          fputs ("\\n", stdout);
          break;

        case '\\':
          fputs ("\\\\", stdout);
 80569e8:	ff 35 d8 b2 06 08    	pushl  0x806b2d8
 80569ee:	6a 02                	push   $0x2
 80569f0:	6a 01                	push   $0x1
 80569f2:	68 d7 70 06 08       	push   $0x80670d7
 80569f7:	e8 04 2a ff ff       	call   8049400 <fwrite_unlocked@plt>
          break;
 80569fc:	83 c4 10             	add    $0x10,%esp
 80569ff:	90                   	nop

        default:
          putchar (*file);
          break;
        }
      file++;
 8056a00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056a04:	89 3c 24             	mov    %edi,(%esp)
 8056a07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056a0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056a0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056a13:	b9 60 80 00 00       	mov    $0x8060,%ecx
 8056a18:	e8 3b 1d 00 00       	call   8058758 <__afl_maybe_log>
 8056a1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056a21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056a25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056a29:	8b 3c 24             	mov    (%esp),%edi
 8056a2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056a30:	83 c3 01             	add    $0x1,%ebx
  
// ABS Label 435
if(*file < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 435);
}
while (*file)
 8056a33:	0f b6 13             	movzbl (%ebx),%edx
 8056a36:	66 90                	xchg   %ax,%ax
 8056a38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056a3c:	89 3c 24             	mov    %edi,(%esp)
 8056a3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056a43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056a47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056a4b:	b9 45 fd 00 00       	mov    $0xfd45,%ecx
 8056a50:	e8 03 1d 00 00       	call   8058758 <__afl_maybe_log>
 8056a55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056a59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056a5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056a61:	8b 3c 24             	mov    (%esp),%edi
 8056a64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056a68:	84 d2                	test   %dl,%dl
 8056a6a:	0f 84 32 01 00 00    	je     8056ba2 <print_filename+0x272>
 8056a70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056a74:	89 3c 24             	mov    %edi,(%esp)
 8056a77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056a7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056a7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056a83:	b9 ac 22 00 00       	mov    $0x22ac,%ecx
 8056a88:	e8 cb 1c 00 00       	call   8058758 <__afl_maybe_log>
 8056a8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056a91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056a95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056a99:	8b 3c 24             	mov    (%esp),%edi
 8056a9c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      switch (*file)
 8056aa0:	80 fa 0a             	cmp    $0xa,%dl
 8056aa3:	0f 84 c7 00 00 00    	je     8056b70 <print_filename+0x240>
 8056aa9:	8d 76 00             	lea    0x0(%esi),%esi
 8056aac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056ab0:	89 3c 24             	mov    %edi,(%esp)
 8056ab3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056ab7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056abb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056abf:	b9 8c d4 00 00       	mov    $0xd48c,%ecx
 8056ac4:	e8 8f 1c 00 00       	call   8058758 <__afl_maybe_log>
 8056ac9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056acd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056ad1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056ad5:	8b 3c 24             	mov    (%esp),%edi
 8056ad8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056adc:	80 fa 5c             	cmp    $0x5c,%dl
 8056adf:	0f 84 03 ff ff ff    	je     80569e8 <print_filename+0xb8>
 8056ae5:	8d 76 00             	lea    0x0(%esi),%esi
 8056ae8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056aec:	89 3c 24             	mov    %edi,(%esp)
 8056aef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056af3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056af7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056afb:	b9 fb 9a 00 00       	mov    $0x9afb,%ecx
 8056b00:	e8 53 1c 00 00       	call   8058758 <__afl_maybe_log>
 8056b05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056b09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056b0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056b11:	8b 3c 24             	mov    (%esp),%edi
 8056b14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056b18:	a1 d8 b2 06 08       	mov    0x806b2d8,%eax
 8056b1d:	8b 48 14             	mov    0x14(%eax),%ecx
 8056b20:	3b 48 18             	cmp    0x18(%eax),%ecx
 8056b23:	0f 83 b7 00 00 00    	jae    8056be0 <print_filename+0x2b0>
 8056b29:	8d 76 00             	lea    0x0(%esi),%esi
 8056b2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056b30:	89 3c 24             	mov    %edi,(%esp)
 8056b33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056b37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056b3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056b3f:	b9 81 3e 00 00       	mov    $0x3e81,%ecx
 8056b44:	e8 0f 1c 00 00       	call   8058758 <__afl_maybe_log>
 8056b49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056b4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056b51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056b55:	8b 3c 24             	mov    (%esp),%edi
 8056b58:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056b5c:	8d 71 01             	lea    0x1(%ecx),%esi
 8056b5f:	89 70 14             	mov    %esi,0x14(%eax)
 8056b62:	88 11                	mov    %dl,(%ecx)
 8056b64:	e9 96 fe ff ff       	jmp    80569ff <print_filename+0xcf>
 8056b69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
        {
        case '\n':
          fputs ("\\n", stdout);
 8056b70:	ff 35 d8 b2 06 08    	pushl  0x806b2d8
 8056b76:	6a 02                	push   $0x2
 8056b78:	6a 01                	push   $0x1
 8056b7a:	68 d4 70 06 08       	push   $0x80670d4
 8056b7f:	e8 7c 28 ff ff       	call   8049400 <fwrite_unlocked@plt>
          break;
 8056b84:	83 c4 10             	add    $0x10,%esp
 8056b87:	e9 73 fe ff ff       	jmp    80569ff <print_filename+0xcf>
 8056b8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
static void
print_filename (char const *file, bool escape)
{
  if (! escape)
    {
      fputs (file, stdout);
 8056b90:	83 ec 08             	sub    $0x8,%esp
 8056b93:	ff 35 d8 b2 06 08    	pushl  0x806b2d8
 8056b99:	50                   	push   %eax
 8056b9a:	e8 81 27 ff ff       	call   8049320 <fputs_unlocked@plt>
      return;
 8056b9f:	83 c4 10             	add    $0x10,%esp
 8056ba2:	66 90                	xchg   %ax,%ax
// ABS Label 436
if(*file < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 436);
}

}
 8056ba4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056ba8:	89 3c 24             	mov    %edi,(%esp)
 8056bab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056baf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056bb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056bb7:	b9 48 76 00 00       	mov    $0x7648,%ecx
 8056bbc:	e8 97 1b 00 00       	call   8058758 <__afl_maybe_log>
 8056bc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056bc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056bc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056bcd:	8b 3c 24             	mov    (%esp),%edi
 8056bd0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056bd4:	83 c4 04             	add    $0x4,%esp
 8056bd7:	5b                   	pop    %ebx
 8056bd8:	5e                   	pop    %esi
 8056bd9:	c3                   	ret    
 8056bda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8056be0:	83 ec 08             	sub    $0x8,%esp
 8056be3:	52                   	push   %edx
 8056be4:	50                   	push   %eax
 8056be5:	e8 86 28 ff ff       	call   8049470 <__overflow@plt>
 8056bea:	83 c4 10             	add    $0x10,%esp
 8056bed:	e9 0d fe ff ff       	jmp    80569ff <print_filename+0xcf>
 8056bf2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    }

  
// ABS Label 435
if(*file < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 435);
 8056bf8:	83 ec 08             	sub    $0x8,%esp
 8056bfb:	68 b3 01 00 00       	push   $0x1b3
 8056c00:	68 d0 70 06 08       	push   $0x80670d0
 8056c05:	e8 b6 f4 ff ff       	call   80560c0 <report_label_coverage>
 8056c0a:	0f b6 13             	movzbl (%ebx),%edx
 8056c0d:	83 c4 10             	add    $0x10,%esp
 8056c10:	e9 21 fe ff ff       	jmp    8056a36 <print_filename+0x106>
 8056c15:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8056c19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08056c20 <lava_set>:
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 8056c20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056c24:	89 3c 24             	mov    %edi,(%esp)
 8056c27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056c2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056c2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056c33:	b9 6d ff 00 00       	mov    $0xff6d,%ecx
 8056c38:	e8 1b 1b 00 00       	call   8058758 <__afl_maybe_log>
 8056c3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056c41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056c45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056c49:	8b 3c 24             	mov    (%esp),%edi
 8056c4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056c50:	8b 54 24 08          	mov    0x8(%esp),%edx
 8056c54:	8b 44 24 04          	mov    0x4(%esp),%eax
 8056c58:	89 14 85 40 b3 06 08 	mov    %edx,0x806b340(,%eax,4)
 8056c5f:	c3                   	ret    

08056c60 <lava_get>:
unsigned int lava_get(unsigned int bug_num);
unsigned int lava_get(unsigned int bug_num) {
 8056c60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056c64:	89 3c 24             	mov    %edi,(%esp)
 8056c67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056c6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056c6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056c73:	b9 2c dc 00 00       	mov    $0xdc2c,%ecx
 8056c78:	e8 db 1a 00 00       	call   8058758 <__afl_maybe_log>
 8056c7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056c81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056c85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056c89:	8b 3c 24             	mov    (%esp),%edi
 8056c8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056c90:	57                   	push   %edi
 8056c91:	56                   	push   %esi
if(lava_val[bug_num] < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 8);
}

// AOR Label 9
if(1818326625 / bug_num != 1818326625 - bug_num)  {asm volatile (""::: "memory");
 8056c92:	b8 61 76 61 6c       	mov    $0x6c617661,%eax
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
unsigned int lava_get(unsigned int bug_num);
unsigned int lava_get(unsigned int bug_num) {
 8056c97:	53                   	push   %ebx
 8056c98:	8b 74 24 10          	mov    0x10(%esp),%esi
if(lava_val[bug_num] < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 8);
}

// AOR Label 9
if(1818326625 / bug_num != 1818326625 - bug_num)  {asm volatile (""::: "memory");
 8056c9c:	31 d2                	xor    %edx,%edx
 8056c9e:	89 c3                	mov    %eax,%ebx
 8056ca0:	f7 f6                	div    %esi
 8056ca2:	29 f3                	sub    %esi,%ebx
 8056ca4:	39 d8                	cmp    %ebx,%eax
 8056ca6:	74 3e                	je     8056ce6 <lava_get+0x86>
 8056ca8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056cac:	89 3c 24             	mov    %edi,(%esp)
 8056caf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056cb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056cb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056cbb:	b9 22 dc 00 00       	mov    $0xdc22,%ecx
 8056cc0:	e8 93 1a 00 00       	call   8058758 <__afl_maybe_log>
 8056cc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056cc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056ccd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056cd1:	8b 3c 24             	mov    (%esp),%edi
 8056cd4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 9);
 8056cd8:	6a 09                	push   $0x9
 8056cda:	68 cc 70 06 08       	push   $0x80670cc
 8056cdf:	e8 dc f3 ff ff       	call   80560c0 <report_label_coverage>
 8056ce4:	59                   	pop    %ecx
 8056ce5:	5f                   	pop    %edi
 8056ce6:	66 90                	xchg   %ax,%ax
}
// AOR Label 10
if(1818326625 + bug_num != 1818326625 - bug_num)  {asm volatile (""::: "memory");
 8056ce8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056cec:	89 3c 24             	mov    %edi,(%esp)
 8056cef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056cf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056cf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056cfb:	b9 92 d4 00 00       	mov    $0xd492,%ecx
 8056d00:	e8 53 1a 00 00       	call   8058758 <__afl_maybe_log>
 8056d05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056d09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056d0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056d11:	8b 3c 24             	mov    (%esp),%edi
 8056d14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056d18:	8d 8e 61 76 61 6c    	lea    0x6c617661(%esi),%ecx
 8056d1e:	39 cb                	cmp    %ecx,%ebx
 8056d20:	74 40                	je     8056d62 <lava_get+0x102>
 8056d22:	66 90                	xchg   %ax,%ax
 8056d24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056d28:	89 3c 24             	mov    %edi,(%esp)
 8056d2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056d2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056d33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056d37:	b9 35 f8 00 00       	mov    $0xf835,%ecx
 8056d3c:	e8 17 1a 00 00       	call   8058758 <__afl_maybe_log>
 8056d41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056d45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056d49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056d4d:	8b 3c 24             	mov    (%esp),%edi
 8056d50:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 10);
 8056d54:	6a 0a                	push   $0xa
 8056d56:	68 cc 70 06 08       	push   $0x80670cc
 8056d5b:	e8 60 f3 ff ff       	call   80560c0 <report_label_coverage>
 8056d60:	58                   	pop    %eax
 8056d61:	5a                   	pop    %edx
 8056d62:	66 90                	xchg   %ax,%ax
}
// AOR Label 11
if(1818326625 * bug_num != 1818326625 - bug_num)  {asm volatile (""::: "memory");
 8056d64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056d68:	89 3c 24             	mov    %edi,(%esp)
 8056d6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056d6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056d73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056d77:	b9 55 ef 00 00       	mov    $0xef55,%ecx
 8056d7c:	e8 d7 19 00 00       	call   8058758 <__afl_maybe_log>
 8056d81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056d85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056d89:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056d8d:	8b 3c 24             	mov    (%esp),%edi
 8056d90:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056d94:	69 fe 61 76 61 6c    	imul   $0x6c617661,%esi,%edi
 8056d9a:	39 fb                	cmp    %edi,%ebx
 8056d9c:	74 40                	je     8056dde <lava_get+0x17e>
 8056d9e:	66 90                	xchg   %ax,%ax
 8056da0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056da4:	89 3c 24             	mov    %edi,(%esp)
 8056da7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056dab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056daf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056db3:	b9 65 86 00 00       	mov    $0x8665,%ecx
 8056db8:	e8 9b 19 00 00       	call   8058758 <__afl_maybe_log>
 8056dbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056dc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056dc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056dc9:	8b 3c 24             	mov    (%esp),%edi
 8056dcc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 11);
 8056dd0:	6a 0b                	push   $0xb
 8056dd2:	68 cc 70 06 08       	push   $0x80670cc
 8056dd7:	e8 e4 f2 ff ff       	call   80560c0 <report_label_coverage>
 8056ddc:	5f                   	pop    %edi
 8056ddd:	58                   	pop    %eax
 8056dde:	66 90                	xchg   %ax,%ax
}

// COR Label 12
if((1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num] || (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {asm volatile (""::: "memory");
 8056de0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056de4:	89 3c 24             	mov    %edi,(%esp)
 8056de7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056deb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056def:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056df3:	b9 5b 83 00 00       	mov    $0x835b,%ecx
 8056df8:	e8 5b 19 00 00       	call   8058758 <__afl_maybe_log>
 8056dfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056e01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056e05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056e09:	8b 3c 24             	mov    (%esp),%edi
 8056e0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056e10:	8b 04 b5 40 b3 06 08 	mov    0x806b340(,%esi,4),%eax
 8056e17:	89 df                	mov    %ebx,%edi
 8056e19:	0f cf                	bswap  %edi
 8056e1b:	39 c3                	cmp    %eax,%ebx
 8056e1d:	0f 84 7d 04 00 00    	je     80572a0 <lava_get+0x640>
 8056e23:	90                   	nop
 8056e24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056e28:	89 3c 24             	mov    %edi,(%esp)
 8056e2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056e2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056e33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056e37:	b9 e5 d3 00 00       	mov    $0xd3e5,%ecx
 8056e3c:	e8 17 19 00 00       	call   8058758 <__afl_maybe_log>
 8056e41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056e45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056e49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056e4d:	8b 3c 24             	mov    (%esp),%edi
 8056e50:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056e54:	39 f8                	cmp    %edi,%eax
 8056e56:	0f 84 7c 04 00 00    	je     80572d8 <lava_get+0x678>
 8056e5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056e60:	89 3c 24             	mov    %edi,(%esp)
 8056e63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056e67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056e6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056e6f:	b9 b0 ad 00 00       	mov    $0xadb0,%ecx
 8056e74:	e8 df 18 00 00       	call   8058758 <__afl_maybe_log>
 8056e79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056e7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056e81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056e85:	8b 3c 24             	mov    (%esp),%edi
 8056e88:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 12);
}

// ROR Label 13
if((1818326625 - bug_num != lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num]))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 13);
 8056e8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056e90:	89 3c 24             	mov    %edi,(%esp)
 8056e93:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056e97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056e9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056e9f:	b9 54 8d 00 00       	mov    $0x8d54,%ecx
 8056ea4:	e8 af 18 00 00       	call   8058758 <__afl_maybe_log>
 8056ea9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056ead:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056eb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056eb5:	8b 3c 24             	mov    (%esp),%edi
 8056eb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056ebc:	6a 0d                	push   $0xd
 8056ebe:	68 c8 70 06 08       	push   $0x80670c8
 8056ec3:	e8 f8 f1 ff ff       	call   80560c0 <report_label_coverage>
 8056ec8:	5a                   	pop    %edx
 8056ec9:	59                   	pop    %ecx
 8056eca:	8b 04 b5 40 b3 06 08 	mov    0x806b340(,%esi,4),%eax
 8056ed1:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 14
if(((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) != lava_val[bug_num]) != ((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {asm volatile (""::: "memory");
 8056ed4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056ed8:	89 3c 24             	mov    %edi,(%esp)
 8056edb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056edf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056ee3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056ee7:	b9 03 49 00 00       	mov    $0x4903,%ecx
 8056eec:	e8 67 18 00 00       	call   8058758 <__afl_maybe_log>
 8056ef1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056ef5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056ef9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056efd:	8b 3c 24             	mov    (%esp),%edi
 8056f00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056f04:	39 f8                	cmp    %edi,%eax
 8056f06:	0f 94 c2             	sete   %dl
 8056f09:	0f 95 c1             	setne  %cl
 8056f0c:	38 d1                	cmp    %dl,%cl
 8056f0e:	74 4a                	je     8056f5a <lava_get+0x2fa>
 8056f10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056f14:	89 3c 24             	mov    %edi,(%esp)
 8056f17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056f1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056f1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056f23:	b9 90 f8 00 00       	mov    $0xf890,%ecx
 8056f28:	e8 2b 18 00 00       	call   8058758 <__afl_maybe_log>
 8056f2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056f31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056f35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056f39:	8b 3c 24             	mov    (%esp),%edi
 8056f3c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 14);
 8056f40:	6a 0e                	push   $0xe
 8056f42:	68 c8 70 06 08       	push   $0x80670c8
 8056f47:	e8 74 f1 ff ff       	call   80560c0 <report_label_coverage>
 8056f4c:	8b 04 b5 40 b3 06 08 	mov    0x806b340(,%esi,4),%eax
 8056f53:	5a                   	pop    %edx
 8056f54:	59                   	pop    %ecx
 8056f55:	39 f8                	cmp    %edi,%eax
 8056f57:	0f 94 c2             	sete   %dl
 8056f5a:	66 90                	xchg   %ax,%ax
}

// MCC Label 15
if(1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {asm volatile (""::: "memory");
 8056f5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056f60:	89 3c 24             	mov    %edi,(%esp)
 8056f63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056f67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056f6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056f6f:	b9 53 e5 00 00       	mov    $0xe553,%ecx
 8056f74:	e8 df 17 00 00       	call   8058758 <__afl_maybe_log>
 8056f79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056f7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056f81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056f85:	8b 3c 24             	mov    (%esp),%edi
 8056f88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056f8c:	39 c3                	cmp    %eax,%ebx
 8056f8e:	0f 94 c1             	sete   %cl
 8056f91:	75 69                	jne    8056ffc <lava_get+0x39c>
 8056f93:	90                   	nop
 8056f94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056f98:	89 3c 24             	mov    %edi,(%esp)
 8056f9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056f9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056fa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056fa7:	b9 20 91 00 00       	mov    $0x9120,%ecx
 8056fac:	e8 a7 17 00 00       	call   8058758 <__afl_maybe_log>
 8056fb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056fb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056fb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056fbd:	8b 3c 24             	mov    (%esp),%edi
 8056fc0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056fc4:	84 d2                	test   %dl,%dl
 8056fc6:	0f 85 e4 03 00 00    	jne    80573b0 <lava_get+0x750>
 8056fcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056fd0:	89 3c 24             	mov    %edi,(%esp)
 8056fd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056fd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056fdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056fdf:	b9 ac 87 00 00       	mov    $0x87ac,%ecx
 8056fe4:	e8 6f 17 00 00       	call   8058758 <__afl_maybe_log>
 8056fe9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056fed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056ff1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056ff5:	8b 3c 24             	mov    (%esp),%edi
 8056ff8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 15);
}
// MCC Label 16
if(1818326625 - bug_num == lava_val[bug_num] && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {asm volatile (""::: "memory");
 8056ffc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057000:	89 3c 24             	mov    %edi,(%esp)
 8057003:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057007:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805700b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805700f:	b9 08 5b 00 00       	mov    $0x5b08,%ecx
 8057014:	e8 3f 17 00 00       	call   8058758 <__afl_maybe_log>
 8057019:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805701d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057021:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057025:	8b 3c 24             	mov    (%esp),%edi
 8057028:	8d 64 24 10          	lea    0x10(%esp),%esp
 805702c:	39 f8                	cmp    %edi,%eax
 805702e:	74 79                	je     80570a9 <lava_get+0x449>
 8057030:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057034:	89 3c 24             	mov    %edi,(%esp)
 8057037:	89 54 24 04          	mov    %edx,0x4(%esp)
 805703b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805703f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057043:	b9 c6 a4 00 00       	mov    $0xa4c6,%ecx
 8057048:	e8 0b 17 00 00       	call   8058758 <__afl_maybe_log>
 805704d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057051:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057055:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057059:	8b 3c 24             	mov    (%esp),%edi
 805705c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057060:	84 c9                	test   %cl,%cl
 8057062:	74 45                	je     80570a9 <lava_get+0x449>
 8057064:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057068:	89 3c 24             	mov    %edi,(%esp)
 805706b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805706f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057073:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057077:	b9 4a ef 00 00       	mov    $0xef4a,%ecx
 805707c:	e8 d7 16 00 00       	call   8058758 <__afl_maybe_log>
 8057081:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057085:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057089:	8b 54 24 04          	mov    0x4(%esp),%edx
 805708d:	8b 3c 24             	mov    (%esp),%edi
 8057090:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 16);
 8057094:	6a 10                	push   $0x10
 8057096:	68 de 70 06 08       	push   $0x80670de
 805709b:	e8 20 f0 ff ff       	call   80560c0 <report_label_coverage>
 80570a0:	5a                   	pop    %edx
 80570a1:	59                   	pop    %ecx
 80570a2:	8b 04 b5 40 b3 06 08 	mov    0x806b340(,%esi,4),%eax
 80570a9:	8d 76 00             	lea    0x0(%esi),%esi
}
// MCC Label 17
if(!(1818326625 - bug_num == lava_val[bug_num]) && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {asm volatile (""::: "memory");
 80570ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80570b0:	89 3c 24             	mov    %edi,(%esp)
 80570b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80570b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80570bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80570bf:	b9 be aa 00 00       	mov    $0xaabe,%ecx
 80570c4:	e8 8f 16 00 00       	call   8058758 <__afl_maybe_log>
 80570c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80570cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80570d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80570d5:	8b 3c 24             	mov    (%esp),%edi
 80570d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80570dc:	39 c3                	cmp    %eax,%ebx
 80570de:	0f 95 c2             	setne  %dl
 80570e1:	74 69                	je     805714c <lava_get+0x4ec>
 80570e3:	90                   	nop
 80570e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80570e8:	89 3c 24             	mov    %edi,(%esp)
 80570eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80570ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80570f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80570f7:	b9 2b 45 00 00       	mov    $0x452b,%ecx
 80570fc:	e8 57 16 00 00       	call   8058758 <__afl_maybe_log>
 8057101:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057105:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057109:	8b 54 24 04          	mov    0x4(%esp),%edx
 805710d:	8b 3c 24             	mov    (%esp),%edi
 8057110:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057114:	39 f8                	cmp    %edi,%eax
 8057116:	0f 84 74 02 00 00    	je     8057390 <lava_get+0x730>
 805711c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057120:	89 3c 24             	mov    %edi,(%esp)
 8057123:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057127:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805712b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805712f:	b9 07 92 00 00       	mov    $0x9207,%ecx
 8057134:	e8 1f 16 00 00       	call   8058758 <__afl_maybe_log>
 8057139:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805713d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057141:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057145:	8b 3c 24             	mov    (%esp),%edi
 8057148:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 17);
}
// MCC Label 18
if(!(1818326625 - bug_num == lava_val[bug_num]) && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {asm volatile (""::: "memory");
 805714c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057150:	89 3c 24             	mov    %edi,(%esp)
 8057153:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805715b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805715f:	b9 53 cf 00 00       	mov    $0xcf53,%ecx
 8057164:	e8 ef 15 00 00       	call   8058758 <__afl_maybe_log>
 8057169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805716d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057171:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057175:	8b 3c 24             	mov    (%esp),%edi
 8057178:	8d 64 24 10          	lea    0x10(%esp),%esp
 805717c:	39 f8                	cmp    %edi,%eax
 805717e:	74 79                	je     80571f9 <lava_get+0x599>
 8057180:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057184:	89 3c 24             	mov    %edi,(%esp)
 8057187:	89 54 24 04          	mov    %edx,0x4(%esp)
 805718b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805718f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057193:	b9 56 d2 00 00       	mov    $0xd256,%ecx
 8057198:	e8 bb 15 00 00       	call   8058758 <__afl_maybe_log>
 805719d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80571a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80571a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80571a9:	8b 3c 24             	mov    (%esp),%edi
 80571ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80571b0:	84 d2                	test   %dl,%dl
 80571b2:	74 45                	je     80571f9 <lava_get+0x599>
 80571b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80571b8:	89 3c 24             	mov    %edi,(%esp)
 80571bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80571bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80571c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80571c7:	b9 03 96 00 00       	mov    $0x9603,%ecx
 80571cc:	e8 87 15 00 00       	call   8058758 <__afl_maybe_log>
 80571d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80571d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80571d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80571dd:	8b 3c 24             	mov    (%esp),%edi
 80571e0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 18);
 80571e4:	6a 12                	push   $0x12
 80571e6:	68 de 70 06 08       	push   $0x80670de
 80571eb:	e8 d0 ee ff ff       	call   80560c0 <report_label_coverage>
 80571f0:	5a                   	pop    %edx
 80571f1:	59                   	pop    %ecx
 80571f2:	8b 04 b5 40 b3 06 08 	mov    0x806b340(,%esi,4),%eax
 80571f9:	8d 76 00             	lea    0x0(%esi),%esi
}
if (0x6c617661 - bug_num == lava_val[bug_num] ||
 80571fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057200:	89 3c 24             	mov    %edi,(%esp)
 8057203:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057207:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805720b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805720f:	b9 ca 99 00 00       	mov    $0x99ca,%ecx
 8057214:	e8 3f 15 00 00       	call   8058758 <__afl_maybe_log>
 8057219:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805721d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057221:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057225:	8b 3c 24             	mov    (%esp),%edi
 8057228:	8d 64 24 10          	lea    0x10(%esp),%esp
 805722c:	39 c3                	cmp    %eax,%ebx
 805722e:	0f 84 34 01 00 00    	je     8057368 <lava_get+0x708>
 8057234:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057238:	89 3c 24             	mov    %edi,(%esp)
 805723b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805723f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057243:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057247:	b9 43 02 00 00       	mov    $0x243,%ecx
 805724c:	e8 07 15 00 00       	call   8058758 <__afl_maybe_log>
 8057251:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057255:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057259:	8b 54 24 04          	mov    0x4(%esp),%edx
 805725d:	8b 3c 24             	mov    (%esp),%edi
 8057260:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057264:	39 f8                	cmp    %edi,%eax
 8057266:	0f 84 fc 00 00 00    	je     8057368 <lava_get+0x708>
 805726c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057270:	89 3c 24             	mov    %edi,(%esp)
 8057273:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057277:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805727b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805727f:	b9 a7 4b 00 00       	mov    $0x4ba7,%ecx
 8057284:	e8 cf 14 00 00       	call   8058758 <__afl_maybe_log>
 8057289:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805728d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057291:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057295:	8b 3c 24             	mov    (%esp),%edi
 8057298:	8d 64 24 10          	lea    0x10(%esp),%esp
// ABS Label 21
if(lava_val[bug_num] < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 21);
}
return lava_val[bug_num];
}
 805729c:	5b                   	pop    %ebx
 805729d:	5e                   	pop    %esi
 805729e:	5f                   	pop    %edi
 805729f:	c3                   	ret    
if(1818326625 * bug_num != 1818326625 - bug_num)  {asm volatile (""::: "memory");
	report_label_coverage("AOR", 11);
}

// COR Label 12
if((1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num] || (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {asm volatile (""::: "memory");
 80572a0:	39 fb                	cmp    %edi,%ebx
 80572a2:	0f 84 e4 fb ff ff    	je     8056e8c <lava_get+0x22c>
 80572a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80572ac:	89 3c 24             	mov    %edi,(%esp)
 80572af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80572b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80572b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80572bb:	b9 fa 30 00 00       	mov    $0x30fa,%ecx
 80572c0:	e8 93 14 00 00       	call   8058758 <__afl_maybe_log>
 80572c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80572c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80572cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80572d1:	8b 3c 24             	mov    (%esp),%edi
 80572d4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 12);
 80572d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80572dc:	89 3c 24             	mov    %edi,(%esp)
 80572df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80572e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80572e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80572eb:	b9 72 fb 00 00       	mov    $0xfb72,%ecx
 80572f0:	e8 63 14 00 00       	call   8058758 <__afl_maybe_log>
 80572f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80572f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80572fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057301:	8b 3c 24             	mov    (%esp),%edi
 8057304:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057308:	6a 0c                	push   $0xc
 805730a:	68 da 70 06 08       	push   $0x80670da
 805730f:	e8 ac ed ff ff       	call   80560c0 <report_label_coverage>
 8057314:	8b 04 b5 40 b3 06 08 	mov    0x806b340(,%esi,4),%eax
}

// ROR Label 13
if((1818326625 - bug_num != lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num]))  {asm volatile (""::: "memory");
 805731b:	5a                   	pop    %edx
 805731c:	59                   	pop    %ecx
 805731d:	39 c3                	cmp    %eax,%ebx
 805731f:	0f 95 c1             	setne  %cl
 8057322:	0f 94 c2             	sete   %dl
 8057325:	38 d1                	cmp    %dl,%cl
 8057327:	0f 84 a4 fb ff ff    	je     8056ed1 <lava_get+0x271>
 805732d:	8d 76 00             	lea    0x0(%esi),%esi
 8057330:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057334:	89 3c 24             	mov    %edi,(%esp)
 8057337:	89 54 24 04          	mov    %edx,0x4(%esp)
 805733b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805733f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057343:	b9 a2 6a 00 00       	mov    $0x6aa2,%ecx
 8057348:	e8 0b 14 00 00       	call   8058758 <__afl_maybe_log>
 805734d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057351:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057355:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057359:	8b 3c 24             	mov    (%esp),%edi
 805735c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057360:	e9 27 fb ff ff       	jmp    8056e8c <lava_get+0x22c>
 8057365:	8d 76 00             	lea    0x0(%esi),%esi
        
// ABS Label 19
if(bug_num < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 19);
}
dprintf(1,"Successfully triggered bug %d, crashing now!\n", bug_num);
 8057368:	83 ec 04             	sub    $0x4,%esp
 805736b:	56                   	push   %esi
 805736c:	68 74 72 06 08       	push   $0x8067274
 8057371:	6a 01                	push   $0x1
 8057373:	e8 48 1e ff ff       	call   80491c0 <dprintf@plt>
 8057378:	83 c4 10             	add    $0x10,%esp
 805737b:	8b 04 b5 40 b3 06 08 	mov    0x806b340(,%esi,4),%eax
// ABS Label 21
if(lava_val[bug_num] < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 21);
}
return lava_val[bug_num];
}
 8057382:	5b                   	pop    %ebx
 8057383:	5e                   	pop    %esi
 8057384:	5f                   	pop    %edi
 8057385:	c3                   	ret    
 8057386:	8d 76 00             	lea    0x0(%esi),%esi
 8057389:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
if(1818326625 - bug_num == lava_val[bug_num] && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 16);
}
// MCC Label 17
if(!(1818326625 - bug_num == lava_val[bug_num]) && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 17);
 8057390:	6a 11                	push   $0x11
 8057392:	68 de 70 06 08       	push   $0x80670de
 8057397:	e8 24 ed ff ff       	call   80560c0 <report_label_coverage>
 805739c:	8b 04 b5 40 b3 06 08 	mov    0x806b340(,%esi,4),%eax
 80573a3:	5a                   	pop    %edx
 80573a4:	59                   	pop    %ecx
 80573a5:	39 c3                	cmp    %eax,%ebx
 80573a7:	0f 95 c2             	setne  %dl
 80573aa:	e9 9d fd ff ff       	jmp    805714c <lava_get+0x4ec>
 80573af:	90                   	nop
	report_label_coverage("ROR", 14);
}

// MCC Label 15
if(1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 15);
 80573b0:	6a 0f                	push   $0xf
 80573b2:	68 de 70 06 08       	push   $0x80670de
 80573b7:	e8 04 ed ff ff       	call   80560c0 <report_label_coverage>
 80573bc:	8b 04 b5 40 b3 06 08 	mov    0x806b340(,%esi,4),%eax
 80573c3:	5a                   	pop    %edx
 80573c4:	59                   	pop    %ecx
 80573c5:	39 c3                	cmp    %eax,%ebx
 80573c7:	0f 94 c1             	sete   %cl
 80573ca:	e9 2d fc ff ff       	jmp    8056ffc <lava_get+0x39c>
 80573cf:	90                   	nop

080573d0 <digest_file>:
   Put the checksum in *BIN_RESULT, which must be properly aligned.
   Return true if successful.  */

static bool
digest_file (const char *filename, int *binary, unsigned char *bin_result)
{
 80573d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80573d4:	89 3c 24             	mov    %edi,(%esp)
 80573d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80573db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80573df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80573e3:	b9 9a 29 00 00       	mov    $0x299a,%ecx
 80573e8:	e8 6b 13 00 00       	call   8058758 <__afl_maybe_log>
 80573ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80573f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80573f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80573f9:	8b 3c 24             	mov    (%esp),%edi
 80573fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057400:	55                   	push   %ebp
 8057401:	57                   	push   %edi
 8057402:	89 cd                	mov    %ecx,%ebp
 8057404:	56                   	push   %esi
 8057405:	53                   	push   %ebx
 8057406:	89 c7                	mov    %eax,%edi
 8057408:	83 ec 1c             	sub    $0x1c,%esp
  FILE *fp;
  int err;
  bool is_stdin = STREQ (filename, "-");
 805740b:	80 38 2d             	cmpb   $0x2d,(%eax)
 805740e:	0f 84 5c 03 00 00    	je     8057770 <digest_file+0x3a0>
 8057414:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057418:	89 3c 24             	mov    %edi,(%esp)
 805741b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805741f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057423:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057427:	b9 c4 bd 00 00       	mov    $0xbdc4,%ecx
 805742c:	e8 27 13 00 00       	call   8058758 <__afl_maybe_log>
 8057431:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057435:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057439:	8b 54 24 04          	mov    0x4(%esp),%edx
 805743d:	8b 3c 24             	mov    (%esp),%edi
 8057440:	8d 64 24 10          	lea    0x10(%esp),%esp
            xfreopen (NULL, "rb", stdin);
        }
    }
  else
    {
      fp = fopen (filename, (O_BINARY && *binary ? "rb" : "r"));
 8057444:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057448:	89 3c 24             	mov    %edi,(%esp)
 805744b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805744f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057453:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057457:	b9 85 c9 00 00       	mov    $0xc985,%ecx
 805745c:	e8 f7 12 00 00       	call   8058758 <__afl_maybe_log>
 8057461:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057465:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057469:	8b 54 24 04          	mov    0x4(%esp),%edx
 805746d:	8b 3c 24             	mov    (%esp),%edi
 8057470:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057474:	83 ec 08             	sub    $0x8,%esp
 8057477:	68 b3 71 06 08       	push   $0x80671b3
 805747c:	57                   	push   %edi
 805747d:	e8 4e 3f 00 00       	call   805b3d0 <fopen_safer>
if(fp < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 301);
}

// ROR Label 302
if((fp != ((void *)0)) != (fp == ((void *)0)))  {asm volatile (""::: "memory");
 8057482:	83 c4 10             	add    $0x10,%esp
 8057485:	85 c0                	test   %eax,%eax
            xfreopen (NULL, "rb", stdin);
        }
    }
  else
    {
      fp = fopen (filename, (O_BINARY && *binary ? "rb" : "r"));
 8057487:	89 c3                	mov    %eax,%ebx
if(fp < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 301);
}

// ROR Label 302
if((fp != ((void *)0)) != (fp == ((void *)0)))  {asm volatile (""::: "memory");
 8057489:	0f 95 c2             	setne  %dl
 805748c:	0f 94 c0             	sete   %al
 805748f:	38 c2                	cmp    %al,%dl
 8057491:	74 4f                	je     80574e2 <digest_file+0x112>
 8057493:	90                   	nop
 8057494:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057498:	89 3c 24             	mov    %edi,(%esp)
 805749b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805749f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80574a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80574a7:	b9 1f e8 00 00       	mov    $0xe81f,%ecx
 80574ac:	e8 a7 12 00 00       	call   8058758 <__afl_maybe_log>
 80574b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80574b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80574b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80574bd:	8b 3c 24             	mov    (%esp),%edi
 80574c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80574c4:	88 44 24 0c          	mov    %al,0xc(%esp)
	report_label_coverage("ROR", 302);
 80574c8:	83 ec 08             	sub    $0x8,%esp
 80574cb:	68 2e 01 00 00       	push   $0x12e
 80574d0:	68 c8 70 06 08       	push   $0x80670c8
 80574d5:	e8 e6 eb ff ff       	call   80560c0 <report_label_coverage>
 80574da:	83 c4 10             	add    $0x10,%esp
 80574dd:	0f b6 44 24 0c       	movzbl 0xc(%esp),%eax
 80574e2:	66 90                	xchg   %ax,%ax
}
if (fp == NULL)
 80574e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80574e8:	89 3c 24             	mov    %edi,(%esp)
 80574eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80574ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80574f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80574f7:	b9 4b 37 00 00       	mov    $0x374b,%ecx
 80574fc:	e8 57 12 00 00       	call   8058758 <__afl_maybe_log>
 8057501:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057505:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057509:	8b 54 24 04          	mov    0x4(%esp),%edx
 805750d:	8b 3c 24             	mov    (%esp),%edi
 8057510:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057514:	84 c0                	test   %al,%al
 8057516:	0f 85 8c 07 00 00    	jne    8057ca8 <digest_file+0x8d8>
 805751c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057520:	89 3c 24             	mov    %edi,(%esp)
 8057523:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057527:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805752b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805752f:	b9 eb 32 00 00       	mov    $0x32eb,%ecx
 8057534:	e8 1f 12 00 00       	call   8058758 <__afl_maybe_log>
 8057539:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805753d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057541:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057545:	8b 3c 24             	mov    (%esp),%edi
 8057548:	8d 64 24 10          	lea    0x10(%esp),%esp
 805754c:	c6 44 24 0c 00       	movb   $0x0,0xc(%esp)
 8057551:	8d 76 00             	lea    0x0(%esi),%esi
error (0, errno, "%s", filename);});
          return false;
        }
    }

  fadvise (fp+(lava_get(320))*(0x6c617521==(lava_get(320))||0x2175616c==(lava_get(320))), FADVISE_SEQUENTIAL);
 8057554:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057558:	89 3c 24             	mov    %edi,(%esp)
 805755b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805755f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057563:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057567:	b9 06 86 00 00       	mov    $0x8606,%ecx
 805756c:	e8 e7 11 00 00       	call   8058758 <__afl_maybe_log>
 8057571:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057575:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057579:	8b 54 24 04          	mov    0x4(%esp),%edx
 805757d:	8b 3c 24             	mov    (%esp),%edi
 8057580:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057584:	83 ec 0c             	sub    $0xc,%esp
 8057587:	68 40 01 00 00       	push   $0x140
 805758c:	e8 cf f6 ff ff       	call   8056c60 <lava_get>
 8057591:	c7 04 24 40 01 00 00 	movl   $0x140,(%esp)
 8057598:	89 c6                	mov    %eax,%esi
 805759a:	e8 c1 f6 ff ff       	call   8056c60 <lava_get>
 805759f:	83 c4 10             	add    $0x10,%esp
 80575a2:	3d 21 75 61 6c       	cmp    $0x6c617521,%eax
 80575a7:	b9 01 00 00 00       	mov    $0x1,%ecx
 80575ac:	74 4c                	je     80575fa <digest_file+0x22a>
 80575ae:	66 90                	xchg   %ax,%ax
 80575b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80575b4:	89 3c 24             	mov    %edi,(%esp)
 80575b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80575bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80575bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80575c3:	b9 b0 e2 00 00       	mov    $0xe2b0,%ecx
 80575c8:	e8 8b 11 00 00       	call   8058758 <__afl_maybe_log>
 80575cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80575d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80575d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80575d9:	8b 3c 24             	mov    (%esp),%edi
 80575dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80575e0:	83 ec 0c             	sub    $0xc,%esp
 80575e3:	68 40 01 00 00       	push   $0x140
 80575e8:	e8 73 f6 ff ff       	call   8056c60 <lava_get>
 80575ed:	31 c9                	xor    %ecx,%ecx
 80575ef:	83 c4 10             	add    $0x10,%esp
 80575f2:	3d 6c 61 75 21       	cmp    $0x2175616c,%eax
 80575f7:	0f 94 c1             	sete   %cl
 80575fa:	66 90                	xchg   %ax,%ax
 80575fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057600:	89 3c 24             	mov    %edi,(%esp)
 8057603:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057607:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805760b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805760f:	b9 ee 6f 00 00       	mov    $0x6fee,%ecx
 8057614:	e8 3f 11 00 00       	call   8058758 <__afl_maybe_log>
 8057619:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805761d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057621:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057625:	8b 3c 24             	mov    (%esp),%edi
 8057628:	8d 64 24 10          	lea    0x10(%esp),%esp
 805762c:	69 c6 94 00 00 00    	imul   $0x94,%esi,%eax
 8057632:	83 ec 08             	sub    $0x8,%esp
 8057635:	6a 02                	push   $0x2
 8057637:	0f af c8             	imul   %eax,%ecx
 805763a:	01 d9                	add    %ebx,%ecx
 805763c:	51                   	push   %ecx
 805763d:	e8 ae 38 00 00       	call   805aef0 <fadvise>

  err = DIGEST_STREAM (fp, bin_result);
 8057642:	58                   	pop    %eax
 8057643:	5a                   	pop    %edx
 8057644:	55                   	push   %ebp
 8057645:	53                   	push   %ebx
 8057646:	e8 15 32 00 00       	call   805a860 <md5_stream>
  
// ABS Label 311
if(err < 0)  {asm volatile (""::: "memory");
 805764b:	83 c4 10             	add    $0x10,%esp
 805764e:	85 c0                	test   %eax,%eax
 8057650:	0f 88 5a 02 00 00    	js     80578b0 <digest_file+0x4e0>
 8057656:	66 90                	xchg   %ax,%ax
 8057658:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805765c:	89 3c 24             	mov    %edi,(%esp)
 805765f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057663:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057667:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805766b:	b9 51 08 00 00       	mov    $0x851,%ecx
 8057670:	e8 e3 10 00 00       	call   8058758 <__afl_maybe_log>
 8057675:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057679:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805767d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057681:	8b 3c 24             	mov    (%esp),%edi
 8057684:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 311);
}
if (err)
 8057688:	0f 85 37 02 00 00    	jne    80578c5 <digest_file+0x4f5>
 805768e:	66 90                	xchg   %ax,%ax
 8057690:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057694:	89 3c 24             	mov    %edi,(%esp)
 8057697:	89 54 24 04          	mov    %edx,0x4(%esp)
 805769b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805769f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80576a3:	b9 af 51 00 00       	mov    $0x51af,%ecx
 80576a8:	e8 ab 10 00 00       	call   8058758 <__afl_maybe_log>
 80576ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80576b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80576b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80576b9:	8b 3c 24             	mov    (%esp),%edi
 80576bc:	8d 64 24 10          	lea    0x10(%esp),%esp
if (fp != stdin)
        fclose (fp);
      return false;
    }

  if (!is_stdin) {
 80576c0:	80 7c 24 0c 00       	cmpb   $0x0,0xc(%esp)
 80576c5:	0f 84 3d 04 00 00    	je     8057b08 <digest_file+0x738>
 80576cb:	90                   	nop
 80576cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80576d0:	89 3c 24             	mov    %edi,(%esp)
 80576d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80576d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80576db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80576df:	b9 0e bd 00 00       	mov    $0xbd0e,%ecx
 80576e4:	e8 6f 10 00 00       	call   8058758 <__afl_maybe_log>
 80576e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80576ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80576f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80576f5:	8b 3c 24             	mov    (%esp),%edi
 80576f8:	8d 64 24 10          	lea    0x10(%esp),%esp
        return 0;
    }
}


  return true;
 80576fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057700:	89 3c 24             	mov    %edi,(%esp)
 8057703:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057707:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805770b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805770f:	b9 1b e6 00 00       	mov    $0xe61b,%ecx
 8057714:	e8 3f 10 00 00       	call   8058758 <__afl_maybe_log>
 8057719:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805771d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057721:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057725:	8b 3c 24             	mov    (%esp),%edi
 8057728:	8d 64 24 10          	lea    0x10(%esp),%esp
 805772c:	bf 01 00 00 00       	mov    $0x1,%edi
 8057731:	8d 76 00             	lea    0x0(%esi),%esi
}
 8057734:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057738:	89 3c 24             	mov    %edi,(%esp)
 805773b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805773f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057743:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057747:	b9 3e 0f 00 00       	mov    $0xf3e,%ecx
 805774c:	e8 07 10 00 00       	call   8058758 <__afl_maybe_log>
 8057751:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057755:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057759:	8b 54 24 04          	mov    0x4(%esp),%edx
 805775d:	8b 3c 24             	mov    (%esp),%edi
 8057760:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057764:	83 c4 1c             	add    $0x1c,%esp
 8057767:	89 f8                	mov    %edi,%eax
 8057769:	5b                   	pop    %ebx
 805776a:	5e                   	pop    %esi
 805776b:	5f                   	pop    %edi
 805776c:	5d                   	pop    %ebp
 805776d:	c3                   	ret    
 805776e:	66 90                	xchg   %ax,%ax
  
// ABS Label 289
if(is_stdin < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 289);
}
if (is_stdin)
 8057770:	80 78 01 00          	cmpb   $0x0,0x1(%eax)
 8057774:	0f 85 ca fc ff ff    	jne    8057444 <digest_file+0x74>
 805777a:	66 90                	xchg   %ax,%ax
 805777c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057780:	89 3c 24             	mov    %edi,(%esp)
 8057783:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805778b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805778f:	b9 db f6 00 00       	mov    $0xf6db,%ecx
 8057794:	e8 bf 0f 00 00       	call   8058758 <__afl_maybe_log>
 8057799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805779d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80577a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80577a5:	8b 3c 24             	mov    (%esp),%edi
 80577a8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      have_read_stdin = true;
      fp = stdin;
      
// ABS Label 290
if(*binary < 0)  {asm volatile (""::: "memory");
 80577ac:	8b 02                	mov    (%edx),%eax
 80577ae:	89 d6                	mov    %edx,%esi
if(is_stdin < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 289);
}
if (is_stdin)
    {
      have_read_stdin = true;
 80577b0:	c6 05 0c b3 06 08 01 	movb   $0x1,0x806b30c
      fp = stdin;
 80577b7:	8b 1d d0 b2 06 08    	mov    0x806b2d0,%ebx
      
// ABS Label 290
if(*binary < 0)  {asm volatile (""::: "memory");
 80577bd:	85 c0                	test   %eax,%eax
 80577bf:	0f 88 9b 04 00 00    	js     8057c60 <digest_file+0x890>
 80577c5:	8d 76 00             	lea    0x0(%esi),%esi
 80577c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80577cc:	89 3c 24             	mov    %edi,(%esp)
 80577cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80577d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80577d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80577db:	b9 ef 66 00 00       	mov    $0x66ef,%ecx
 80577e0:	e8 73 0f 00 00       	call   8058758 <__afl_maybe_log>
 80577e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80577e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80577ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80577f1:	8b 3c 24             	mov    (%esp),%edi
 80577f4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 290);
}

// COR Label 291
if((0 || *binary) != (0 && *binary))  {asm volatile (""::: "memory");
 80577f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80577fc:	89 3c 24             	mov    %edi,(%esp)
 80577ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057803:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057807:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805780b:	b9 fb dc 00 00       	mov    $0xdcfb,%ecx
 8057810:	e8 43 0f 00 00       	call   8058758 <__afl_maybe_log>
 8057815:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057819:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805781d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057821:	8b 3c 24             	mov    (%esp),%edi
 8057824:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057828:	85 c0                	test   %eax,%eax
 805782a:	0f 85 30 02 00 00    	jne    8057a60 <digest_file+0x690>
 8057830:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057834:	89 3c 24             	mov    %edi,(%esp)
 8057837:	89 54 24 04          	mov    %edx,0x4(%esp)
 805783b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805783f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057843:	b9 27 df 00 00       	mov    $0xdf27,%ecx
 8057848:	e8 0b 0f 00 00       	call   8058758 <__afl_maybe_log>
 805784d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057851:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057855:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057859:	8b 3c 24             	mov    (%esp),%edi
 805785c:	8d 64 24 10          	lea    0x10(%esp),%esp
if(!(0) && *binary ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 294);
}
// MCC Label 295
if(!(0) && !(*binary) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 295);
 8057860:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057864:	89 3c 24             	mov    %edi,(%esp)
 8057867:	89 54 24 04          	mov    %edx,0x4(%esp)
 805786b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805786f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057873:	b9 01 f2 00 00       	mov    $0xf201,%ecx
 8057878:	e8 db 0e 00 00       	call   8058758 <__afl_maybe_log>
 805787d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057881:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057885:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057889:	8b 3c 24             	mov    (%esp),%edi
 805788c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057890:	68 27 01 00 00       	push   $0x127
 8057895:	68 de 70 06 08       	push   $0x80670de
 805789a:	e8 21 e8 ff ff       	call   80560c0 <report_label_coverage>
 805789f:	58                   	pop    %eax
 80578a0:	5a                   	pop    %edx
static bool
digest_file (const char *filename, int *binary, unsigned char *bin_result)
{
  FILE *fp;
  int err;
  bool is_stdin = STREQ (filename, "-");
 80578a1:	c6 44 24 0c 01       	movb   $0x1,0xc(%esp)
 80578a6:	e9 a6 fc ff ff       	jmp    8057551 <digest_file+0x181>
 80578ab:	90                   	nop
 80578ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

  err = DIGEST_STREAM (fp, bin_result);
  
// ABS Label 311
if(err < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 311);
 80578b0:	83 ec 08             	sub    $0x8,%esp
 80578b3:	68 37 01 00 00       	push   $0x137
 80578b8:	68 d0 70 06 08       	push   $0x80670d0
 80578bd:	e8 fe e7 ff ff       	call   80560c0 <report_label_coverage>
 80578c2:	83 c4 10             	add    $0x10,%esp
 80578c5:	8d 76 00             	lea    0x0(%esi),%esi
}
if (err)
    {
      
// ABS Label 312
if((*__errno_location()) < 0)  {asm volatile (""::: "memory");
 80578c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80578cc:	89 3c 24             	mov    %edi,(%esp)
 80578cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80578d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80578d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80578db:	b9 b1 a5 00 00       	mov    $0xa5b1,%ecx
 80578e0:	e8 73 0e 00 00       	call   8058758 <__afl_maybe_log>
 80578e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80578e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80578ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80578f1:	8b 3c 24             	mov    (%esp),%edi
 80578f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80578f8:	e8 e3 1a ff ff       	call   80493e0 <__errno_location@plt>
 80578fd:	8b 08                	mov    (%eax),%ecx
 80578ff:	85 c9                	test   %ecx,%ecx
 8057901:	0f 88 79 03 00 00    	js     8057c80 <digest_file+0x8b0>
 8057907:	90                   	nop
 8057908:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805790c:	89 3c 24             	mov    %edi,(%esp)
 805790f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057913:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057917:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805791b:	b9 38 06 00 00       	mov    $0x638,%ecx
 8057920:	e8 33 0e 00 00       	call   8058758 <__afl_maybe_log>
 8057925:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057929:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805792d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057931:	8b 3c 24             	mov    (%esp),%edi
 8057934:	8d 64 24 10          	lea    0x10(%esp),%esp

// ABS Label 313
if(filename < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 313);
}
error (0, errno, "%s", filename);
 8057938:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805793c:	89 3c 24             	mov    %edi,(%esp)
 805793f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057943:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057947:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805794b:	b9 cf 4b 00 00       	mov    $0x4bcf,%ecx
 8057950:	e8 03 0e 00 00       	call   8058758 <__afl_maybe_log>
 8057955:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057959:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805795d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057961:	8b 3c 24             	mov    (%esp),%edi
 8057964:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057968:	57                   	push   %edi
 8057969:	68 45 7c 06 08       	push   $0x8067c45
 805796e:	51                   	push   %ecx
 805796f:	6a 00                	push   $0x0
 8057971:	e8 1a 19 ff ff       	call   8049290 <error@plt>
if(stdin < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 315);
}

// ROR Label 316
if((fp == stdin) != (fp != stdin))  {asm volatile (""::: "memory");
 8057976:	8b 2d d0 b2 06 08    	mov    0x806b2d0,%ebp
 805797c:	83 c4 10             	add    $0x10,%esp
 805797f:	39 eb                	cmp    %ebp,%ebx
 8057981:	0f 94 c1             	sete   %cl
 8057984:	0f 95 c0             	setne  %al
 8057987:	38 c1                	cmp    %al,%cl
 8057989:	74 4c                	je     80579d7 <digest_file+0x607>
 805798b:	90                   	nop
 805798c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057990:	89 3c 24             	mov    %edi,(%esp)
 8057993:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057997:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805799b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805799f:	b9 c5 31 00 00       	mov    $0x31c5,%ecx
 80579a4:	e8 af 0d 00 00       	call   8058758 <__afl_maybe_log>
 80579a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80579ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80579b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80579b5:	8b 3c 24             	mov    (%esp),%edi
 80579b8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 316);
 80579bc:	83 ec 08             	sub    $0x8,%esp
 80579bf:	68 3c 01 00 00       	push   $0x13c
 80579c4:	68 c8 70 06 08       	push   $0x80670c8
 80579c9:	e8 f2 e6 ff ff       	call   80560c0 <report_label_coverage>
 80579ce:	8b 2d d0 b2 06 08    	mov    0x806b2d0,%ebp
 80579d4:	83 c4 10             	add    $0x10,%esp
 80579d7:	90                   	nop
}
if (fp != stdin)
        fclose (fp);
      return false;
 80579d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80579dc:	89 3c 24             	mov    %edi,(%esp)
 80579df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80579e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80579e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80579eb:	b9 f0 ee 00 00       	mov    $0xeef0,%ecx
 80579f0:	e8 63 0d 00 00       	call   8058758 <__afl_maybe_log>
 80579f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80579f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80579fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057a01:	8b 3c 24             	mov    (%esp),%edi
 8057a04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057a08:	31 ff                	xor    %edi,%edi

// ROR Label 316
if((fp == stdin) != (fp != stdin))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 316);
}
if (fp != stdin)
 8057a0a:	39 eb                	cmp    %ebp,%ebx
 8057a0c:	0f 84 1f fd ff ff    	je     8057731 <digest_file+0x361>
 8057a12:	66 90                	xchg   %ax,%ax
 8057a14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057a18:	89 3c 24             	mov    %edi,(%esp)
 8057a1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057a1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057a23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057a27:	b9 78 0e 00 00       	mov    $0xe78,%ecx
 8057a2c:	e8 27 0d 00 00       	call   8058758 <__afl_maybe_log>
 8057a31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057a35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057a39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057a3d:	8b 3c 24             	mov    (%esp),%edi
 8057a40:	8d 64 24 10          	lea    0x10(%esp),%esp
        fclose (fp);
 8057a44:	83 ec 0c             	sub    $0xc,%esp
 8057a47:	53                   	push   %ebx
 8057a48:	e8 13 c5 00 00       	call   8063f60 <rpl_fclose>
 8057a4d:	83 c4 10             	add    $0x10,%esp
    }
}


  return true;
}
 8057a50:	89 f8                	mov    %edi,%eax
 8057a52:	83 c4 1c             	add    $0x1c,%esp
 8057a55:	5b                   	pop    %ebx
 8057a56:	5e                   	pop    %esi
 8057a57:	5f                   	pop    %edi
 8057a58:	5d                   	pop    %ebp
 8057a59:	c3                   	ret    
 8057a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
	report_label_coverage("ABS", 290);
}

// COR Label 291
if((0 || *binary) != (0 && *binary))  {asm volatile (""::: "memory");
	report_label_coverage("COR", 291);
 8057a60:	68 23 01 00 00       	push   $0x123
 8057a65:	68 da 70 06 08       	push   $0x80670da
 8057a6a:	e8 51 e6 ff ff       	call   80560c0 <report_label_coverage>
// MCC Label 293
if(0 && !(*binary) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 293);
}
// MCC Label 294
if(!(0) && *binary ) {asm volatile (""::: "memory");
 8057a6f:	59                   	pop    %ecx
 8057a70:	8b 0e                	mov    (%esi),%ecx
 8057a72:	58                   	pop    %eax
 8057a73:	85 c9                	test   %ecx,%ecx
 8057a75:	0f 84 e5 fd ff ff    	je     8057860 <digest_file+0x490>
 8057a7b:	90                   	nop
 8057a7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057a80:	89 3c 24             	mov    %edi,(%esp)
 8057a83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057a87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057a8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057a8f:	b9 86 cb 00 00       	mov    $0xcb86,%ecx
 8057a94:	e8 bf 0c 00 00       	call   8058758 <__afl_maybe_log>
 8057a99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057a9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057aa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057aa5:	8b 3c 24             	mov    (%esp),%edi
 8057aa8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 294);
 8057aac:	68 26 01 00 00       	push   $0x126
 8057ab1:	68 de 70 06 08       	push   $0x80670de
 8057ab6:	e8 05 e6 ff ff       	call   80560c0 <report_label_coverage>
}
// MCC Label 295
if(!(0) && !(*binary) ) {asm volatile (""::: "memory");
 8057abb:	8b 16                	mov    (%esi),%edx
 8057abd:	59                   	pop    %ecx
 8057abe:	58                   	pop    %eax
 8057abf:	85 d2                	test   %edx,%edx
 8057ac1:	0f 84 99 fd ff ff    	je     8057860 <digest_file+0x490>
 8057ac7:	90                   	nop
 8057ac8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057acc:	89 3c 24             	mov    %edi,(%esp)
 8057acf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057ad3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057ad7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057adb:	b9 56 23 00 00       	mov    $0x2356,%ecx
 8057ae0:	e8 73 0c 00 00       	call   8058758 <__afl_maybe_log>
 8057ae5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ae9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057aed:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057af1:	8b 3c 24             	mov    (%esp),%edi
 8057af4:	8d 64 24 10          	lea    0x10(%esp),%esp
static bool
digest_file (const char *filename, int *binary, unsigned char *bin_result)
{
  FILE *fp;
  int err;
  bool is_stdin = STREQ (filename, "-");
 8057af8:	c6 44 24 0c 01       	movb   $0x1,0xc(%esp)
 8057afd:	e9 4f fa ff ff       	jmp    8057551 <digest_file+0x181>
 8057b02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        fclose (fp);
      return false;
    }

  if (!is_stdin) {
    int temp_1 = rpl_fclose(fp);
 8057b08:	83 ec 0c             	sub    $0xc,%esp
 8057b0b:	53                   	push   %ebx
 8057b0c:	e8 4f c4 00 00       	call   8063f60 <rpl_fclose>
    
// ABS Label 317
if(temp_1 < 0)  {asm volatile (""::: "memory");
 8057b11:	83 c4 10             	add    $0x10,%esp
 8057b14:	85 c0                	test   %eax,%eax
 8057b16:	0f 88 6c 02 00 00    	js     8057d88 <digest_file+0x9b8>
 8057b1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057b20:	89 3c 24             	mov    %edi,(%esp)
 8057b23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057b27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057b2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057b2f:	b9 13 74 00 00       	mov    $0x7413,%ecx
 8057b34:	e8 1f 0c 00 00       	call   8058758 <__afl_maybe_log>
 8057b39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057b3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057b41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057b45:	8b 3c 24             	mov    (%esp),%edi
 8057b48:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 317);
}

// ROR Label 318
if((temp_1 == 0) != (temp_1 != 0))  {asm volatile (""::: "memory");
 8057b4c:	0f 95 c3             	setne  %bl
 8057b4f:	90                   	nop
	report_label_coverage("ROR", 318);
 8057b50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057b54:	89 3c 24             	mov    %edi,(%esp)
 8057b57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057b5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057b5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057b63:	b9 61 c9 00 00       	mov    $0xc961,%ecx
 8057b68:	e8 eb 0b 00 00       	call   8058758 <__afl_maybe_log>
 8057b6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057b71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057b75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057b79:	8b 3c 24             	mov    (%esp),%edi
 8057b7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057b80:	83 ec 08             	sub    $0x8,%esp
 8057b83:	68 3e 01 00 00       	push   $0x13e
 8057b88:	68 c8 70 06 08       	push   $0x80670c8
 8057b8d:	e8 2e e5 ff ff       	call   80560c0 <report_label_coverage>
 8057b92:	83 c4 10             	add    $0x10,%esp
}
if (temp_1 != 0) {
 8057b95:	84 db                	test   %bl,%bl
 8057b97:	0f 84 5f fb ff ff    	je     80576fc <digest_file+0x32c>
 8057b9d:	8d 76 00             	lea    0x0(%esi),%esi
 8057ba0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ba4:	89 3c 24             	mov    %edi,(%esp)
 8057ba7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057bab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057baf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057bb3:	b9 4a 28 00 00       	mov    $0x284a,%ecx
 8057bb8:	e8 9b 0b 00 00       	call   8058758 <__afl_maybe_log>
 8057bbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057bc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057bc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057bc9:	8b 3c 24             	mov    (%esp),%edi
 8057bcc:	8d 64 24 10          	lea    0x10(%esp),%esp
        
// ABS Label 319
if((*__errno_location()) < 0)  {asm volatile (""::: "memory");
 8057bd0:	e8 0b 18 ff ff       	call   80493e0 <__errno_location@plt>
 8057bd5:	8b 10                	mov    (%eax),%edx
 8057bd7:	85 d2                	test   %edx,%edx
 8057bd9:	0f 88 d1 01 00 00    	js     8057db0 <digest_file+0x9e0>
 8057bdf:	90                   	nop
 8057be0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057be4:	89 3c 24             	mov    %edi,(%esp)
 8057be7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057beb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057bef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057bf3:	b9 46 70 00 00       	mov    $0x7046,%ecx
 8057bf8:	e8 5b 0b 00 00       	call   8058758 <__afl_maybe_log>
 8057bfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057c01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057c05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057c09:	8b 3c 24             	mov    (%esp),%edi
 8057c0c:	8d 64 24 10          	lea    0x10(%esp),%esp

// ABS Label 320
if(filename < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 320);
}
error(0, (*__errno_location()), "%s", filename);
 8057c10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057c14:	89 3c 24             	mov    %edi,(%esp)
 8057c17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057c1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057c1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057c23:	b9 2a be 00 00       	mov    $0xbe2a,%ecx
 8057c28:	e8 2b 0b 00 00       	call   8058758 <__afl_maybe_log>
 8057c2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057c31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057c35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057c39:	8b 3c 24             	mov    (%esp),%edi
 8057c3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057c40:	57                   	push   %edi
 8057c41:	68 45 7c 06 08       	push   $0x8067c45
        return 0;
 8057c46:	31 ff                	xor    %edi,%edi

// ABS Label 320
if(filename < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 320);
}
error(0, (*__errno_location()), "%s", filename);
 8057c48:	52                   	push   %edx
 8057c49:	6a 00                	push   $0x0
 8057c4b:	e8 40 16 ff ff       	call   8049290 <error@plt>
        return 0;
 8057c50:	83 c4 10             	add    $0x10,%esp
    }
}


  return true;
}
 8057c53:	89 f8                	mov    %edi,%eax
 8057c55:	83 c4 1c             	add    $0x1c,%esp
 8057c58:	5b                   	pop    %ebx
 8057c59:	5e                   	pop    %esi
 8057c5a:	5f                   	pop    %edi
 8057c5b:	5d                   	pop    %ebp
 8057c5c:	c3                   	ret    
 8057c5d:	8d 76 00             	lea    0x0(%esi),%esi
      have_read_stdin = true;
      fp = stdin;
      
// ABS Label 290
if(*binary < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 290);
 8057c60:	68 22 01 00 00       	push   $0x122
 8057c65:	68 d0 70 06 08       	push   $0x80670d0
 8057c6a:	e8 51 e4 ff ff       	call   80560c0 <report_label_coverage>
 8057c6f:	5a                   	pop    %edx
 8057c70:	8b 06                	mov    (%esi),%eax
 8057c72:	59                   	pop    %ecx
 8057c73:	e9 80 fb ff ff       	jmp    80577f8 <digest_file+0x428>
 8057c78:	90                   	nop
 8057c79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8057c80:	89 44 24 0c          	mov    %eax,0xc(%esp)
if (err)
    {
      
// ABS Label 312
if((*__errno_location()) < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 312);
 8057c84:	83 ec 08             	sub    $0x8,%esp
 8057c87:	68 38 01 00 00       	push   $0x138
 8057c8c:	68 d0 70 06 08       	push   $0x80670d0
 8057c91:	e8 2a e4 ff ff       	call   80560c0 <report_label_coverage>
 8057c96:	8b 74 24 1c          	mov    0x1c(%esp),%esi
 8057c9a:	83 c4 10             	add    $0x10,%esp
 8057c9d:	8b 0e                	mov    (%esi),%ecx
 8057c9f:	e9 94 fc ff ff       	jmp    8057938 <digest_file+0x568>
 8057ca4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	report_label_coverage("COR", 306);
}

// MCC Label 307
if(((filename)) && ((filename)) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 307);
 8057ca8:	83 ec 08             	sub    $0x8,%esp
 8057cab:	68 33 01 00 00       	push   $0x133
 8057cb0:	68 de 70 06 08       	push   $0x80670de
 8057cb5:	e8 06 e4 ff ff       	call   80560c0 <report_label_coverage>
// MCC Label 310
if(!(((filename))) && !(((filename))) ) {asm volatile (""::: "memory");
	report_label_coverage("MCC", 310);
}
if (((filename)) && ((filename)))  {int lava_547 = 0;
          lava_547 |= ((unsigned char *) (filename))[0] << (0*8);lava_547 |= ((unsigned char *) (filename))[1] << (1*8);lava_547 |= ((unsigned char *) (filename))[2] << (2*8);lava_547 |= ((unsigned char *) (filename))[3] << (3*8);lava_set(547,lava_547);
 8057cba:	0f b6 4f 01          	movzbl 0x1(%edi),%ecx
 8057cbe:	0f b6 6f 02          	movzbl 0x2(%edi),%ebp
 8057cc2:	0f b6 1f             	movzbl (%edi),%ebx
 8057cc5:	0f b6 57 03          	movzbl 0x3(%edi),%edx
 8057cc9:	c1 e1 08             	shl    $0x8,%ecx
 8057ccc:	c1 e5 10             	shl    $0x10,%ebp
 8057ccf:	09 cd                	or     %ecx,%ebp
 8057cd1:	c1 e2 18             	shl    $0x18,%edx
 8057cd4:	09 dd                	or     %ebx,%ebp
 8057cd6:	09 d5                	or     %edx,%ebp
#include <stdio.h>
void lava_set(unsigned int bn, unsigned int val);
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 8057cd8:	89 2d cc bb 06 08    	mov    %ebp,0x806bbcc
 8057cde:	89 2d 0c bc 06 08    	mov    %ebp,0x806bc0c
 8057ce4:	89 2d 0c bb 06 08    	mov    %ebp,0x806bb0c
          lava_563 |= ((unsigned char *) (filename))[0] << (0*8);lava_563 |= ((unsigned char *) (filename))[1] << (1*8);lava_563 |= ((unsigned char *) (filename))[2] << (2*8);lava_563 |= ((unsigned char *) (filename))[3] << (3*8);lava_set(563,lava_563);
          int lava_499 = 0;
          lava_499 |= ((unsigned char *) (filename))[0] << (0*8);lava_499 |= ((unsigned char *) (filename))[1] << (1*8);lava_499 |= ((unsigned char *) (filename))[2] << (2*8);lava_499 |= ((unsigned char *) (filename))[3] << (3*8);lava_set(499,lava_499);
          }
// ABS Label 303
if((*__errno_location()) < 0)  {asm volatile (""::: "memory");
 8057cea:	e8 f1 16 ff ff       	call   80493e0 <__errno_location@plt>
 8057cef:	8b 10                	mov    (%eax),%edx
 8057cf1:	83 c4 10             	add    $0x10,%esp
 8057cf4:	85 d2                	test   %edx,%edx
 8057cf6:	0f 89 14 ff ff ff    	jns    8057c10 <digest_file+0x840>
 8057cfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057d00:	89 3c 24             	mov    %edi,(%esp)
 8057d03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057d07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057d0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057d0f:	b9 e0 c9 00 00       	mov    $0xc9e0,%ecx
 8057d14:	e8 3f 0a 00 00       	call   8058758 <__afl_maybe_log>
 8057d19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057d1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057d21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057d25:	8b 3c 24             	mov    (%esp),%edi
 8057d28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057d2c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	report_label_coverage("ABS", 303);
 8057d30:	83 ec 08             	sub    $0x8,%esp
 8057d33:	68 2f 01 00 00       	push   $0x12f
}
if (temp_1 != 0) {
        
// ABS Label 319
if((*__errno_location()) < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 319);
 8057d38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057d3c:	89 3c 24             	mov    %edi,(%esp)
 8057d3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057d43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057d47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057d4b:	b9 48 b2 00 00       	mov    $0xb248,%ecx
 8057d50:	e8 03 0a 00 00       	call   8058758 <__afl_maybe_log>
 8057d55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057d59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057d5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057d61:	8b 3c 24             	mov    (%esp),%edi
 8057d64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057d68:	68 d0 70 06 08       	push   $0x80670d0
 8057d6d:	e8 4e e3 ff ff       	call   80560c0 <report_label_coverage>
 8057d72:	8b 6c 24 1c          	mov    0x1c(%esp),%ebp
 8057d76:	83 c4 10             	add    $0x10,%esp
 8057d79:	8b 55 00             	mov    0x0(%ebp),%edx
 8057d7c:	e9 8f fe ff ff       	jmp    8057c10 <digest_file+0x840>
 8057d81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  if (!is_stdin) {
    int temp_1 = rpl_fclose(fp);
    
// ABS Label 317
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 317);
 8057d88:	83 ec 08             	sub    $0x8,%esp
}

// ROR Label 318
if((temp_1 == 0) != (temp_1 != 0))  {asm volatile (""::: "memory");
 8057d8b:	bb 01 00 00 00       	mov    $0x1,%ebx
  if (!is_stdin) {
    int temp_1 = rpl_fclose(fp);
    
// ABS Label 317
if(temp_1 < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 317);
 8057d90:	68 3d 01 00 00       	push   $0x13d
 8057d95:	68 d0 70 06 08       	push   $0x80670d0
 8057d9a:	e8 21 e3 ff ff       	call   80560c0 <report_label_coverage>
 8057d9f:	83 c4 10             	add    $0x10,%esp
 8057da2:	e9 a8 fd ff ff       	jmp    8057b4f <digest_file+0x77f>
 8057da7:	89 f6                	mov    %esi,%esi
 8057da9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 8057db0:	89 44 24 0c          	mov    %eax,0xc(%esp)
}
if (temp_1 != 0) {
        
// ABS Label 319
if((*__errno_location()) < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 319);
 8057db4:	83 ec 08             	sub    $0x8,%esp
 8057db7:	68 3f 01 00 00       	push   $0x13f
 8057dbc:	e9 77 ff ff ff       	jmp    8057d38 <digest_file+0x968>
 8057dc1:	eb 0d                	jmp    8057dd0 <usage>
 8057dc3:	90                   	nop
 8057dc4:	90                   	nop
 8057dc5:	90                   	nop
 8057dc6:	90                   	nop
 8057dc7:	90                   	nop
 8057dc8:	90                   	nop
 8057dc9:	90                   	nop
 8057dca:	90                   	nop
 8057dcb:	90                   	nop
 8057dcc:	90                   	nop
 8057dcd:	90                   	nop
 8057dce:	90                   	nop
 8057dcf:	90                   	nop

08057dd0 <usage>:
  { NULL, 0, NULL, 0 }
};

void
usage (int status)
{
 8057dd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057dd4:	89 3c 24             	mov    %edi,(%esp)
 8057dd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057ddb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057ddf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057de3:	b9 30 9b 00 00       	mov    $0x9b30,%ecx
 8057de8:	e8 6b 09 00 00       	call   8058758 <__afl_maybe_log>
 8057ded:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057df1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057df5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057df9:	8b 3c 24             	mov    (%esp),%edi
 8057dfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057e00:	55                   	push   %ebp
 8057e01:	57                   	push   %edi
 8057e02:	56                   	push   %esi
 8057e03:	53                   	push   %ebx
 8057e04:	83 ec 4c             	sub    $0x4c,%esp
 8057e07:	8b 6c 24 60          	mov    0x60(%esp),%ebp
  
// ABS Label 174
if(status < 0)  {asm volatile (""::: "memory");
 8057e0b:	85 ed                	test   %ebp,%ebp
 8057e0d:	0f 88 f4 08 00 00    	js     8058707 <usage+0x937>
 8057e13:	90                   	nop
 8057e14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057e18:	89 3c 24             	mov    %edi,(%esp)
 8057e1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057e1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057e23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057e27:	b9 21 7e 00 00       	mov    $0x7e21,%ecx
 8057e2c:	e8 27 09 00 00       	call   8058758 <__afl_maybe_log>
 8057e31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057e35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057e39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057e3d:	8b 3c 24             	mov    (%esp),%edi
 8057e40:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 174);
}

// ROR Label 175
if((status == 0) != (status != 0))  {asm volatile (""::: "memory");
 8057e44:	0f 95 c3             	setne  %bl
 8057e47:	0f 94 c0             	sete   %al
 8057e4a:	38 d8                	cmp    %bl,%al
 8057e4c:	0f 84 43 06 00 00    	je     8058495 <usage+0x6c5>
 8057e52:	66 90                	xchg   %ax,%ax
 8057e54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057e58:	89 3c 24             	mov    %edi,(%esp)
 8057e5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057e5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057e63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057e67:	b9 74 61 00 00       	mov    $0x6174,%ecx
 8057e6c:	e8 e7 08 00 00       	call   8058758 <__afl_maybe_log>
 8057e71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057e75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057e79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057e7d:	8b 3c 24             	mov    (%esp),%edi
 8057e80:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 175);
 8057e84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057e88:	89 3c 24             	mov    %edi,(%esp)
 8057e8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057e8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057e93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057e97:	b9 c0 ca 00 00       	mov    $0xcac0,%ecx
 8057e9c:	e8 b7 08 00 00       	call   8058758 <__afl_maybe_log>
 8057ea1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ea5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057ea9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057ead:	8b 3c 24             	mov    (%esp),%edi
 8057eb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057eb4:	56                   	push   %esi
 8057eb5:	56                   	push   %esi
 8057eb6:	68 af 00 00 00       	push   $0xaf
 8057ebb:	68 c8 70 06 08       	push   $0x80670c8
 8057ec0:	e8 fb e1 ff ff       	call   80560c0 <report_label_coverage>
}
if (status != EXIT_SUCCESS)
 8057ec5:	83 c4 10             	add    $0x10,%esp
 8057ec8:	84 db                	test   %bl,%bl
 8057eca:	0f 85 19 05 00 00    	jne    80583e9 <usage+0x619>
 8057ed0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ed4:	89 3c 24             	mov    %edi,(%esp)
 8057ed7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057edb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057edf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057ee3:	b9 20 58 00 00       	mov    $0x5820,%ecx
 8057ee8:	e8 6b 08 00 00       	call   8058758 <__afl_maybe_log>
 8057eed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ef1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057ef5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057ef9:	8b 3c 24             	mov    (%esp),%edi
 8057efc:	8d 64 24 10          	lea    0x10(%esp),%esp
    emit_try_help ();
  else
    {
      printf (_("\
 8057f00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057f04:	89 3c 24             	mov    %edi,(%esp)
 8057f07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057f0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057f0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057f13:	b9 06 c2 00 00       	mov    $0xc206,%ecx
 8057f18:	e8 3b 08 00 00       	call   8058758 <__afl_maybe_log>
 8057f1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057f21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057f25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057f29:	8b 3c 24             	mov    (%esp),%edi
 8057f2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057f30:	8b 3d 48 bc 43 08    	mov    0x843bc48,%edi
 8057f36:	51                   	push   %ecx
 8057f37:	6a 05                	push   $0x5
 8057f39:	68 cc 72 06 08       	push   $0x80672cc
 8057f3e:	6a 00                	push   $0x0
 8057f40:	e8 8b 12 ff ff       	call   80491d0 <dcgettext@plt>
 8057f45:	68 80 00 00 00       	push   $0x80
 8057f4a:	68 eb 70 06 08       	push   $0x80670eb
 8057f4f:	57                   	push   %edi
 8057f50:	50                   	push   %eax
 8057f51:	e8 da 11 ff ff       	call   8049130 <printf@plt>
  )

static inline void
emit_stdin_note (void)
{
  fputs (_("\n\
 8057f56:	83 c4 1c             	add    $0x1c,%esp
 8057f59:	8b 1d d8 b2 06 08    	mov    0x806b2d8,%ebx
 8057f5f:	6a 05                	push   $0x5
 8057f61:	68 14 73 06 08       	push   $0x8067314
 8057f66:	6a 00                	push   $0x0
 8057f68:	e8 63 12 ff ff       	call   80491d0 <dcgettext@plt>
 8057f6d:	5e                   	pop    %esi
 8057f6e:	5f                   	pop    %edi
 8057f6f:	53                   	push   %ebx
 8057f70:	50                   	push   %eax
 8057f71:	e8 aa 13 ff ff       	call   8049320 <fputs_unlocked@plt>
        fputs (_("\
\n\
  -b, --binary         read in binary mode (default unless reading tty stdin)\n\
"), stdout);
      else
        fputs (_("\
 8057f76:	83 c4 0c             	add    $0xc,%esp
 8057f79:	8b 35 d8 b2 06 08    	mov    0x806b2d8,%esi
 8057f7f:	6a 05                	push   $0x5
 8057f81:	68 4c 73 06 08       	push   $0x806734c
 8057f86:	6a 00                	push   $0x0
 8057f88:	e8 43 12 ff ff       	call   80491d0 <dcgettext@plt>
 8057f8d:	5a                   	pop    %edx
 8057f8e:	59                   	pop    %ecx
 8057f8f:	56                   	push   %esi
 8057f90:	50                   	push   %eax
 8057f91:	e8 8a 13 ff ff       	call   8049320 <fputs_unlocked@plt>
\n\
  -b, --binary         read in binary mode\n\
"), stdout);
      printf (_("\
 8057f96:	83 c4 0c             	add    $0xc,%esp
 8057f99:	6a 05                	push   $0x5
 8057f9b:	68 7c 73 06 08       	push   $0x806737c
 8057fa0:	6a 00                	push   $0x0
 8057fa2:	e8 29 12 ff ff       	call   80491d0 <dcgettext@plt>
 8057fa7:	5b                   	pop    %ebx
 8057fa8:	5e                   	pop    %esi
 8057fa9:	68 eb 70 06 08       	push   $0x80670eb
 8057fae:	50                   	push   %eax
 8057faf:	e8 7c 11 ff ff       	call   8049130 <printf@plt>
  -c, --check          read %s sums from the FILEs and check them\n"),
              DIGEST_TYPE_STRING);
      fputs (_("\
 8057fb4:	83 c4 0c             	add    $0xc,%esp
 8057fb7:	8b 1d d8 b2 06 08    	mov    0x806b2d8,%ebx
 8057fbd:	6a 05                	push   $0x5
 8057fbf:	68 c0 73 06 08       	push   $0x80673c0
 8057fc4:	6a 00                	push   $0x0
 8057fc6:	e8 05 12 ff ff       	call   80491d0 <dcgettext@plt>
 8057fcb:	5f                   	pop    %edi
 8057fcc:	5a                   	pop    %edx
 8057fcd:	53                   	push   %ebx
 8057fce:	50                   	push   %eax
 8057fcf:	e8 4c 13 ff ff       	call   8049320 <fputs_unlocked@plt>
      if (O_BINARY)
        fputs (_("\
  -t, --text           read in text mode (default if reading tty stdin)\n\
"), stdout);
      else
        fputs (_("\
 8057fd4:	83 c4 0c             	add    $0xc,%esp
 8057fd7:	8b 3d d8 b2 06 08    	mov    0x806b2d8,%edi
 8057fdd:	6a 05                	push   $0x5
 8057fdf:	68 f4 73 06 08       	push   $0x80673f4
 8057fe4:	6a 00                	push   $0x0
 8057fe6:	e8 e5 11 ff ff       	call   80491d0 <dcgettext@plt>
 8057feb:	59                   	pop    %ecx
 8057fec:	5e                   	pop    %esi
 8057fed:	57                   	push   %edi
 8057fee:	50                   	push   %eax
 8057fef:	e8 2c 13 ff ff       	call   8049320 <fputs_unlocked@plt>
  -t, --text           read in text mode (default)\n\
"), stdout);
      fputs (_("\
 8057ff4:	83 c4 0c             	add    $0xc,%esp
 8057ff7:	8b 35 d8 b2 06 08    	mov    0x806b2d8,%esi
 8057ffd:	6a 05                	push   $0x5
 8057fff:	68 28 74 06 08       	push   $0x8067428
 8058004:	6a 00                	push   $0x0
 8058006:	e8 c5 11 ff ff       	call   80491d0 <dcgettext@plt>
 805800b:	5f                   	pop    %edi
 805800c:	5a                   	pop    %edx
 805800d:	56                   	push   %esi
 805800e:	50                   	push   %eax
 805800f:	e8 0c 13 ff ff       	call   8049320 <fputs_unlocked@plt>
      --status         don't output anything, status code shows success\n\
      --strict         exit non-zero for improperly formatted checksum lines\n\
  -w, --warn           warn about improperly formatted checksum lines\n\
\n\
"), stdout);
      fputs (HELP_OPTION_DESCRIPTION, stdout);
 8058014:	83 c4 0c             	add    $0xc,%esp
 8058017:	8b 1d d8 b2 06 08    	mov    0x806b2d8,%ebx
 805801d:	6a 05                	push   $0x5
 805801f:	68 98 75 06 08       	push   $0x8067598
 8058024:	6a 00                	push   $0x0
 8058026:	e8 a5 11 ff ff       	call   80491d0 <dcgettext@plt>
 805802b:	59                   	pop    %ecx
 805802c:	5e                   	pop    %esi
 805802d:	53                   	push   %ebx
 805802e:	50                   	push   %eax
 805802f:	e8 ec 12 ff ff       	call   8049320 <fputs_unlocked@plt>
      fputs (VERSION_OPTION_DESCRIPTION, stdout);
 8058034:	83 c4 0c             	add    $0xc,%esp
 8058037:	8b 35 d8 b2 06 08    	mov    0x806b2d8,%esi
 805803d:	6a 05                	push   $0x5
 805803f:	68 c8 75 06 08       	push   $0x80675c8
 8058044:	6a 00                	push   $0x0
 8058046:	e8 85 11 ff ff       	call   80491d0 <dcgettext@plt>
 805804b:	5f                   	pop    %edi
 805804c:	5a                   	pop    %edx
 805804d:	56                   	push   %esi
 805804e:	50                   	push   %eax
}

static inline void
emit_ancillary_info (char const *program)
{
  struct infomap { char const *program; char const *node; } const infomap[] = {
 805804f:	bf e2 70 06 08       	mov    $0x80670e2,%edi
 8058054:	e8 c7 12 ff ff       	call   8049320 <fputs_unlocked@plt>
      printf (_("\
 8058059:	83 c4 0c             	add    $0xc,%esp
 805805c:	6a 05                	push   $0x5
 805805e:	68 00 76 06 08       	push   $0x8067600
 8058063:	6a 00                	push   $0x0
 8058065:	e8 66 11 ff ff       	call   80491d0 <dcgettext@plt>
 805806a:	59                   	pop    %ecx
 805806b:	5b                   	pop    %ebx
 805806c:	68 ef 70 06 08       	push   $0x80670ef
 8058071:	50                   	push   %eax
 8058072:	e8 b9 10 ff ff       	call   8049130 <printf@plt>
 8058077:	c7 44 24 18 e2 70 06 	movl   $0x80670e2,0x18(%esp)
 805807e:	08 
 805807f:	c7 44 24 1c f8 70 06 	movl   $0x80670f8,0x1c(%esp)
 8058086:	08 
  };

  char const *node = program;
  struct infomap const *map_prog = infomap;

  while (map_prog->program && ! STREQ (program, map_prog->program))
 8058087:	b8 07 00 00 00       	mov    $0x7,%eax
}

static inline void
emit_ancillary_info (char const *program)
{
  struct infomap { char const *program; char const *node; } const infomap[] = {
 805808c:	c7 44 24 20 70 71 06 	movl   $0x8067170,0x20(%esp)
 8058093:	08 
 8058094:	c7 44 24 24 08 71 06 	movl   $0x8067108,0x24(%esp)
 805809b:	08 
 805809c:	c7 44 24 28 1e 71 06 	movl   $0x806711e,0x28(%esp)
 80580a3:	08 
 80580a4:	c7 44 24 2c 28 71 06 	movl   $0x8067128,0x2c(%esp)
 80580ab:	08 
 80580ac:	c7 44 24 30 37 71 06 	movl   $0x8067137,0x30(%esp)
 80580b3:	08 
 80580b4:	c7 44 24 34 28 71 06 	movl   $0x8067128,0x34(%esp)
 80580bb:	08 
 80580bc:	c7 44 24 38 41 71 06 	movl   $0x8067141,0x38(%esp)
 80580c3:	08 
 80580c4:	c7 44 24 3c 28 71 06 	movl   $0x8067128,0x3c(%esp)
 80580cb:	08 
 80580cc:	c7 44 24 40 4b 71 06 	movl   $0x806714b,0x40(%esp)
 80580d3:	08 
 80580d4:	c7 44 24 44 28 71 06 	movl   $0x8067128,0x44(%esp)
 80580db:	08 
 80580dc:	c7 44 24 48 00 00 00 	movl   $0x0,0x48(%esp)
 80580e3:	00 
 80580e4:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%esp)
 80580eb:	00 
 80580ec:	83 c4 10             	add    $0x10,%esp
 80580ef:	8d 54 24 08          	lea    0x8(%esp),%edx
 80580f3:	e9 48 00 00 00       	jmp    8058140 <usage+0x370>
 80580f8:	90                   	nop
 80580f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

  char const *node = program;
  struct infomap const *map_prog = infomap;

  while (map_prog->program && ! STREQ (program, map_prog->program))
    map_prog++;
 8058100:	83 c2 08             	add    $0x8,%edx
  };

  char const *node = program;
  struct infomap const *map_prog = infomap;

  while (map_prog->program && ! STREQ (program, map_prog->program))
 8058103:	8b 3a                	mov    (%edx),%edi
 8058105:	85 ff                	test   %edi,%edi
 8058107:	0f 84 9f 00 00 00    	je     80581ac <usage+0x3dc>
 805810d:	8d 76 00             	lea    0x0(%esi),%esi
 8058110:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058114:	89 3c 24             	mov    %edi,(%esp)
 8058117:	89 54 24 04          	mov    %edx,0x4(%esp)
 805811b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805811f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058123:	b9 19 36 00 00       	mov    $0x3619,%ecx
 8058128:	e8 2b 06 00 00       	call   8058758 <__afl_maybe_log>
 805812d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058131:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058135:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058139:	8b 3c 24             	mov    (%esp),%edi
 805813c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058140:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058144:	89 3c 24             	mov    %edi,(%esp)
 8058147:	89 54 24 04          	mov    %edx,0x4(%esp)
 805814b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805814f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058153:	b9 f1 29 00 00       	mov    $0x29f1,%ecx
 8058158:	e8 fb 05 00 00       	call   8058758 <__afl_maybe_log>
 805815d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058161:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058165:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058169:	8b 3c 24             	mov    (%esp),%edi
 805816c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058170:	be e4 70 06 08       	mov    $0x80670e4,%esi
 8058175:	89 c1                	mov    %eax,%ecx
 8058177:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 8058179:	75 85                	jne    8058100 <usage+0x330>
 805817b:	90                   	nop
 805817c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058180:	89 3c 24             	mov    %edi,(%esp)
 8058183:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058187:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805818b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805818f:	b9 cd c5 00 00       	mov    $0xc5cd,%ecx
 8058194:	e8 bf 05 00 00       	call   8058758 <__afl_maybe_log>
 8058199:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805819d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80581a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80581a5:	8b 3c 24             	mov    (%esp),%edi
 80581a8:	8d 64 24 10          	lea    0x10(%esp),%esp
    map_prog++;

  if (map_prog->node)
 80581ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80581b0:	89 3c 24             	mov    %edi,(%esp)
 80581b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80581b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80581bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80581bf:	b9 aa 39 00 00       	mov    $0x39aa,%ecx
 80581c4:	e8 8f 05 00 00       	call   8058758 <__afl_maybe_log>
 80581c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80581cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80581d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80581d5:	8b 3c 24             	mov    (%esp),%edi
 80581d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80581dc:	8b 5a 04             	mov    0x4(%edx),%ebx
 80581df:	85 db                	test   %ebx,%ebx
 80581e1:	0f 84 46 03 00 00    	je     805852d <usage+0x75d>
 80581e7:	90                   	nop
 80581e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80581ec:	89 3c 24             	mov    %edi,(%esp)
 80581ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80581f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80581f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80581fb:	b9 1f c7 00 00       	mov    $0xc71f,%ecx
 8058200:	e8 53 05 00 00       	call   8058758 <__afl_maybe_log>
 8058205:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058209:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805820d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058211:	8b 3c 24             	mov    (%esp),%edi
 8058214:	8d 64 24 10          	lea    0x10(%esp),%esp
    node = map_prog->node;

  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
 8058218:	57                   	push   %edi
 8058219:	6a 05                	push   $0x5
 805821b:	68 55 71 06 08       	push   $0x8067155
 8058220:	6a 00                	push   $0x0
 8058222:	e8 a9 0f ff ff       	call   80491d0 <dcgettext@plt>
 8058227:	83 c4 0c             	add    $0xc,%esp
 805822a:	68 2c 77 06 08       	push   $0x806772c
 805822f:	68 6c 71 06 08       	push   $0x806716c
 8058234:	50                   	push   %eax
 8058235:	e8 f6 0e ff ff       	call   8049130 <printf@plt>

  /* Don't output this redundant message for English locales.
     Note we still output for 'C' so that it gets included in the man page.  */
  const char *lc_messages = setlocale (LC_MESSAGES, NULL);
 805823a:	58                   	pop    %eax
 805823b:	5a                   	pop    %edx
 805823c:	6a 00                	push   $0x0
 805823e:	6a 05                	push   $0x5
 8058240:	e8 0b 12 ff ff       	call   8049450 <setlocale@plt>
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
 8058245:	83 c4 10             	add    $0x10,%esp
 8058248:	85 c0                	test   %eax,%eax
 805824a:	74 7c                	je     80582c8 <usage+0x4f8>
 805824c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058250:	89 3c 24             	mov    %edi,(%esp)
 8058253:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058257:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805825b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805825f:	b9 28 1c 00 00       	mov    $0x1c28,%ecx
 8058264:	e8 ef 04 00 00       	call   8058758 <__afl_maybe_log>
 8058269:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805826d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058271:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058275:	8b 3c 24             	mov    (%esp),%edi
 8058278:	8d 64 24 10          	lea    0x10(%esp),%esp
 805827c:	56                   	push   %esi
 805827d:	6a 03                	push   $0x3
 805827f:	68 7a 71 06 08       	push   $0x806717a
 8058284:	50                   	push   %eax
 8058285:	e8 46 12 ff ff       	call   80494d0 <strncmp@plt>
 805828a:	83 c4 10             	add    $0x10,%esp
 805828d:	85 c0                	test   %eax,%eax
 805828f:	0f 85 84 03 00 00    	jne    8058619 <usage+0x849>
 8058295:	8d 76 00             	lea    0x0(%esi),%esi
 8058298:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805829c:	89 3c 24             	mov    %edi,(%esp)
 805829f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80582a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80582a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80582ab:	b9 3f d8 00 00       	mov    $0xd83f,%ecx
 80582b0:	e8 a3 04 00 00       	call   8058758 <__afl_maybe_log>
 80582b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80582b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80582bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80582c1:	8b 3c 24             	mov    (%esp),%edi
 80582c4:	8d 64 24 10          	lea    0x10(%esp),%esp
         the URLs at http://translationproject.org/team/.  Otherwise, replace
         the entire URL with your translation team's email address.  */
      printf (_("Report %s translation bugs to "
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
 80582c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80582cc:	89 3c 24             	mov    %edi,(%esp)
 80582cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80582d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80582d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80582db:	b9 9e 3e 00 00       	mov    $0x3e9e,%ecx
 80582e0:	e8 73 04 00 00       	call   8058758 <__afl_maybe_log>
 80582e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80582e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80582ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80582f1:	8b 3c 24             	mov    (%esp),%edi
 80582f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80582f8:	50                   	push   %eax
 80582f9:	6a 05                	push   $0x5
          PACKAGE_URL, program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
 80582fb:	be bd 80 06 08       	mov    $0x80680bd,%esi
         the URLs at http://translationproject.org/team/.  Otherwise, replace
         the entire URL with your translation team's email address.  */
      printf (_("Report %s translation bugs to "
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
 8058300:	68 9c 77 06 08       	push   $0x806779c
 8058305:	6a 00                	push   $0x0
 8058307:	e8 c4 0e ff ff       	call   80491d0 <dcgettext@plt>
 805830c:	83 c4 0c             	add    $0xc,%esp
 805830f:	68 e4 70 06 08       	push   $0x80670e4
 8058314:	68 2c 77 06 08       	push   $0x806772c
 8058319:	50                   	push   %eax
 805831a:	e8 11 0e ff ff       	call   8049130 <printf@plt>
          PACKAGE_URL, program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
 805831f:	83 c4 10             	add    $0x10,%esp
 8058322:	81 fb e4 70 06 08    	cmp    $0x80670e4,%ebx
 8058328:	0f 84 97 03 00 00    	je     80586c5 <usage+0x8f5>
 805832e:	66 90                	xchg   %ax,%ax
 8058330:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058334:	89 3c 24             	mov    %edi,(%esp)
 8058337:	89 54 24 04          	mov    %edx,0x4(%esp)
 805833b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805833f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058343:	b9 a0 db 00 00       	mov    $0xdba0,%ecx
 8058348:	e8 0b 04 00 00       	call   8058758 <__afl_maybe_log>
 805834d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058351:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058355:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058359:	8b 3c 24             	mov    (%esp),%edi
 805835c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058360:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058364:	89 3c 24             	mov    %edi,(%esp)
 8058367:	89 54 24 04          	mov    %edx,0x4(%esp)
 805836b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805836f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058373:	b9 b8 25 00 00       	mov    $0x25b8,%ecx
 8058378:	e8 db 03 00 00       	call   8058758 <__afl_maybe_log>
 805837d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058381:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058385:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058389:	8b 3c 24             	mov    (%esp),%edi
 805838c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058390:	50                   	push   %eax
 8058391:	6a 05                	push   $0x5
 8058393:	68 bc 77 06 08       	push   $0x80677bc
 8058398:	6a 00                	push   $0x0
 805839a:	e8 31 0e ff ff       	call   80491d0 <dcgettext@plt>
 805839f:	83 c4 0c             	add    $0xc,%esp
 80583a2:	56                   	push   %esi
 80583a3:	53                   	push   %ebx
 80583a4:	50                   	push   %eax
 80583a5:	e8 86 0d ff ff       	call   8049130 <printf@plt>
 80583aa:	83 c4 10             	add    $0x10,%esp
 80583ad:	8d 76 00             	lea    0x0(%esi),%esi
  
// ABS Label 173
if(status < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 173);
}
exit (status);
 80583b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80583b4:	89 3c 24             	mov    %edi,(%esp)
 80583b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80583bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80583bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80583c3:	b9 23 7f 00 00       	mov    $0x7f23,%ecx
 80583c8:	e8 8b 03 00 00       	call   8058758 <__afl_maybe_log>
 80583cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80583d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80583d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80583d9:	8b 3c 24             	mov    (%esp),%edi
 80583dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80583e0:	83 ec 0c             	sub    $0xc,%esp
 80583e3:	55                   	push   %ebp
 80583e4:	e8 17 0f ff ff       	call   8049300 <exit@plt>
 80583e9:	8d 76 00             	lea    0x0(%esi),%esi
}

static inline void
emit_try_help (void)
{
  fprintf (stderr, _("Try '%s --help' for more information.\n"), program_name);
 80583ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80583f0:	89 3c 24             	mov    %edi,(%esp)
 80583f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80583f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80583fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80583ff:	b9 72 64 00 00       	mov    $0x6472,%ecx
 8058404:	e8 4f 03 00 00       	call   8058758 <__afl_maybe_log>
 8058409:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805840d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058411:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058415:	8b 3c 24             	mov    (%esp),%edi
 8058418:	8d 64 24 10          	lea    0x10(%esp),%esp
 805841c:	8b 1d 48 bc 43 08    	mov    0x843bc48,%ebx
 8058422:	57                   	push   %edi
 8058423:	6a 05                	push   $0x5
 8058425:	68 a4 72 06 08       	push   $0x80672a4
 805842a:	6a 00                	push   $0x0
 805842c:	e8 9f 0d ff ff       	call   80491d0 <dcgettext@plt>
 8058431:	83 c4 0c             	add    $0xc,%esp
 8058434:	53                   	push   %ebx
 8058435:	50                   	push   %eax
 8058436:	ff 35 c4 b2 06 08    	pushl  0x806b2c4
 805843c:	e8 3f 0f ff ff       	call   8049380 <fprintf@plt>
      emit_ancillary_info (PROGRAM_NAME);
    }

  
// ABS Label 173
if(status < 0)  {asm volatile (""::: "memory");
 8058441:	83 c4 10             	add    $0x10,%esp
 8058444:	85 ed                	test   %ebp,%ebp
 8058446:	0f 89 61 ff ff ff    	jns    80583ad <usage+0x5dd>
 805844c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058450:	89 3c 24             	mov    %edi,(%esp)
 8058453:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058457:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805845b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805845f:	b9 99 7a 00 00       	mov    $0x7a99,%ecx
 8058464:	e8 ef 02 00 00       	call   8058758 <__afl_maybe_log>
 8058469:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805846d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058471:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058475:	8b 3c 24             	mov    (%esp),%edi
 8058478:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 173);
 805847c:	50                   	push   %eax
 805847d:	50                   	push   %eax
 805847e:	68 ad 00 00 00       	push   $0xad
 8058483:	68 d0 70 06 08       	push   $0x80670d0
 8058488:	e8 33 dc ff ff       	call   80560c0 <report_label_coverage>
 805848d:	83 c4 10             	add    $0x10,%esp
 8058490:	e9 18 ff ff ff       	jmp    80583ad <usage+0x5dd>
 8058495:	8d 76 00             	lea    0x0(%esi),%esi

// ROR Label 175
if((status == 0) != (status != 0))  {asm volatile (""::: "memory");
	report_label_coverage("ROR", 175);
}
if (status != EXIT_SUCCESS)
 8058498:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805849c:	89 3c 24             	mov    %edi,(%esp)
 805849f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80584a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80584a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80584ab:	b9 dc 63 00 00       	mov    $0x63dc,%ecx
 80584b0:	e8 a3 02 00 00       	call   8058758 <__afl_maybe_log>
 80584b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80584b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80584bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80584c1:	8b 3c 24             	mov    (%esp),%edi
 80584c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80584c8:	84 c0                	test   %al,%al
 80584ca:	0f 84 30 fa ff ff    	je     8057f00 <usage+0x130>
 80584d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80584d4:	89 3c 24             	mov    %edi,(%esp)
 80584d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80584db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80584df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80584e3:	b9 27 c5 00 00       	mov    $0xc527,%ecx
 80584e8:	e8 6b 02 00 00       	call   8058758 <__afl_maybe_log>
 80584ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80584f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80584f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80584f9:	8b 3c 24             	mov    (%esp),%edi
 80584fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058500:	8b 35 48 bc 43 08    	mov    0x843bc48,%esi
 8058506:	50                   	push   %eax
 8058507:	6a 05                	push   $0x5
 8058509:	68 a4 72 06 08       	push   $0x80672a4
 805850e:	6a 00                	push   $0x0
 8058510:	e8 bb 0c ff ff       	call   80491d0 <dcgettext@plt>
 8058515:	83 c4 0c             	add    $0xc,%esp
 8058518:	56                   	push   %esi
 8058519:	50                   	push   %eax
 805851a:	ff 35 c4 b2 06 08    	pushl  0x806b2c4
 8058520:	e8 5b 0e ff ff       	call   8049380 <fprintf@plt>
 8058525:	83 c4 10             	add    $0x10,%esp
 8058528:	e9 80 fe ff ff       	jmp    80583ad <usage+0x5dd>
 805852d:	8d 76 00             	lea    0x0(%esi),%esi
    map_prog++;

  if (map_prog->node)
    node = map_prog->node;

  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
 8058530:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058534:	89 3c 24             	mov    %edi,(%esp)
 8058537:	89 54 24 04          	mov    %edx,0x4(%esp)
 805853b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805853f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058543:	b9 32 69 00 00       	mov    $0x6932,%ecx
 8058548:	e8 0b 02 00 00       	call   8058758 <__afl_maybe_log>
 805854d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058551:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058555:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058559:	8b 3c 24             	mov    (%esp),%edi
 805855c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058560:	51                   	push   %ecx
 8058561:	6a 05                	push   $0x5
 8058563:	68 55 71 06 08       	push   $0x8067155
 8058568:	6a 00                	push   $0x0
 805856a:	e8 61 0c ff ff       	call   80491d0 <dcgettext@plt>
 805856f:	83 c4 0c             	add    $0xc,%esp
 8058572:	68 2c 77 06 08       	push   $0x806772c
 8058577:	68 6c 71 06 08       	push   $0x806716c
 805857c:	50                   	push   %eax
 805857d:	e8 ae 0b ff ff       	call   8049130 <printf@plt>

  /* Don't output this redundant message for English locales.
     Note we still output for 'C' so that it gets included in the man page.  */
  const char *lc_messages = setlocale (LC_MESSAGES, NULL);
 8058582:	5b                   	pop    %ebx
 8058583:	5e                   	pop    %esi
 8058584:	6a 00                	push   $0x0
 8058586:	6a 05                	push   $0x5
 8058588:	e8 c3 0e ff ff       	call   8049450 <setlocale@plt>
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
 805858d:	83 c4 10             	add    $0x10,%esp
 8058590:	85 c0                	test   %eax,%eax
 8058592:	0f 84 d8 00 00 00    	je     8058670 <usage+0x8a0>
 8058598:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805859c:	89 3c 24             	mov    %edi,(%esp)
 805859f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80585a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80585a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80585ab:	b9 86 dd 00 00       	mov    $0xdd86,%ecx
 80585b0:	e8 a3 01 00 00       	call   8058758 <__afl_maybe_log>
 80585b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80585b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80585bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80585c1:	8b 3c 24             	mov    (%esp),%edi
 80585c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80585c8:	52                   	push   %edx
 80585c9:	6a 03                	push   $0x3
 80585cb:	68 7a 71 06 08       	push   $0x806717a
 80585d0:	50                   	push   %eax
 80585d1:	e8 fa 0e ff ff       	call   80494d0 <strncmp@plt>
 80585d6:	83 c4 10             	add    $0x10,%esp
 80585d9:	85 c0                	test   %eax,%eax
 80585db:	0f 84 8f 00 00 00    	je     8058670 <usage+0x8a0>
 80585e1:	8d 76 00             	lea    0x0(%esi),%esi
 80585e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80585e8:	89 3c 24             	mov    %edi,(%esp)
 80585eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80585ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80585f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80585f7:	b9 a5 c4 00 00       	mov    $0xc4a5,%ecx
 80585fc:	e8 57 01 00 00       	call   8058758 <__afl_maybe_log>
 8058601:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058605:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058609:	8b 54 24 04          	mov    0x4(%esp),%edx
 805860d:	8b 3c 24             	mov    (%esp),%edi
 8058610:	8d 64 24 10          	lea    0x10(%esp),%esp
    { "sha384sum", "sha2 utilities" },
    { "sha512sum", "sha2 utilities" },
    { NULL, NULL }
  };

  char const *node = program;
 8058614:	bb e4 70 06 08       	mov    $0x80670e4,%ebx
 8058619:	8d 76 00             	lea    0x0(%esi),%esi
    {
      /* TRANSLATORS: Replace LANG_CODE in this URL with your language code
         <http://translationproject.org/team/LANG_CODE.html> to form one of
         the URLs at http://translationproject.org/team/.  Otherwise, replace
         the entire URL with your translation team's email address.  */
      printf (_("Report %s translation bugs to "
 805861c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058620:	89 3c 24             	mov    %edi,(%esp)
 8058623:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058627:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805862b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805862f:	b9 17 9c 00 00       	mov    $0x9c17,%ecx
 8058634:	e8 1f 01 00 00       	call   8058758 <__afl_maybe_log>
 8058639:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805863d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058641:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058645:	8b 3c 24             	mov    (%esp),%edi
 8058648:	8d 64 24 10          	lea    0x10(%esp),%esp
 805864c:	50                   	push   %eax
 805864d:	6a 05                	push   $0x5
 805864f:	68 54 77 06 08       	push   $0x8067754
 8058654:	6a 00                	push   $0x0
 8058656:	e8 75 0b ff ff       	call   80491d0 <dcgettext@plt>
 805865b:	5a                   	pop    %edx
 805865c:	59                   	pop    %ecx
 805865d:	68 e4 70 06 08       	push   $0x80670e4
 8058662:	50                   	push   %eax
 8058663:	e8 c8 0a ff ff       	call   8049130 <printf@plt>
 8058668:	83 c4 10             	add    $0x10,%esp
 805866b:	e9 58 fc ff ff       	jmp    80582c8 <usage+0x4f8>
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
 8058670:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058674:	89 3c 24             	mov    %edi,(%esp)
 8058677:	89 54 24 04          	mov    %edx,0x4(%esp)
 805867b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805867f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058683:	b9 4d 9b 00 00       	mov    $0x9b4d,%ecx
 8058688:	e8 cb 00 00 00       	call   8058758 <__afl_maybe_log>
 805868d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058691:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058695:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058699:	8b 3c 24             	mov    (%esp),%edi
 805869c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80586a0:	57                   	push   %edi
 80586a1:	6a 05                	push   $0x5
 80586a3:	68 9c 77 06 08       	push   $0x806779c
 80586a8:	6a 00                	push   $0x0
 80586aa:	e8 21 0b ff ff       	call   80491d0 <dcgettext@plt>
 80586af:	83 c4 0c             	add    $0xc,%esp
 80586b2:	68 e4 70 06 08       	push   $0x80670e4
 80586b7:	68 2c 77 06 08       	push   $0x806772c
 80586bc:	50                   	push   %eax
 80586bd:	e8 6e 0a ff ff       	call   8049130 <printf@plt>
 80586c2:	83 c4 10             	add    $0x10,%esp
 80586c5:	8d 76 00             	lea    0x0(%esi),%esi
    { "sha384sum", "sha2 utilities" },
    { "sha512sum", "sha2 utilities" },
    { NULL, NULL }
  };

  char const *node = program;
 80586c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80586cc:	89 3c 24             	mov    %edi,(%esp)
 80586cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80586d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80586d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80586db:	b9 7e 2a 00 00       	mov    $0x2a7e,%ecx
 80586e0:	e8 73 00 00 00       	call   8058758 <__afl_maybe_log>
 80586e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80586e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80586ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80586f1:	8b 3c 24             	mov    (%esp),%edi
 80586f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80586f8:	bb e4 70 06 08       	mov    $0x80670e4,%ebx
      printf (_("Report %s translation bugs to "
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
          PACKAGE_URL, program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
 80586fd:	be 12 71 06 08       	mov    $0x8067112,%esi
 8058702:	e9 59 fc ff ff       	jmp    8058360 <usage+0x590>
 8058707:	90                   	nop
usage (int status)
{
  
// ABS Label 174
if(status < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 174);
 8058708:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805870c:	89 3c 24             	mov    %edi,(%esp)
 805870f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058713:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058717:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805871b:	b9 3f 2b 00 00       	mov    $0x2b3f,%ecx
 8058720:	e8 33 00 00 00       	call   8058758 <__afl_maybe_log>
 8058725:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058729:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805872d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058731:	8b 3c 24             	mov    (%esp),%edi
 8058734:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058738:	68 ae 00 00 00       	push   $0xae
 805873d:	68 d0 70 06 08       	push   $0x80670d0
}

// ROR Label 175
if((status == 0) != (status != 0))  {asm volatile (""::: "memory");
 8058742:	bb 01 00 00 00       	mov    $0x1,%ebx
usage (int status)
{
  
// ABS Label 174
if(status < 0)  {asm volatile (""::: "memory");
	report_label_coverage("ABS", 174);
 8058747:	e8 74 d9 ff ff       	call   80560c0 <report_label_coverage>
 805874c:	58                   	pop    %eax
 805874d:	5a                   	pop    %edx
 805874e:	e9 31 f7 ff ff       	jmp    8057e84 <usage+0xb4>
 8058753:	90                   	nop
 8058754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08058758 <__afl_maybe_log>:
 8058758:	9f                   	lahf   
 8058759:	0f 90 c0             	seto   %al
 805875c:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 8058762:	85 d2                	test   %edx,%edx
 8058764:	74 22                	je     8058788 <__afl_setup>

08058766 <__afl_store>:
 8058766:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 805876c:	31 cf                	xor    %ecx,%edi
 805876e:	d1 e9                	shr    %ecx
 8058770:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 8058776:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805877a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805877e <__afl_return>:
 805877e:	04 7f                	add    $0x7f,%al
 8058780:	9e                   	sahf   
 8058781:	c3                   	ret    
 8058782:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08058788 <__afl_setup>:
 8058788:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 805878f:	75 ed                	jne    805877e <__afl_return>
 8058791:	50                   	push   %eax
 8058792:	51                   	push   %ecx
 8058793:	68 90 88 05 08       	push   $0x8058890
 8058798:	e8 13 0b ff ff       	call   80492b0 <getenv@plt>
 805879d:	83 c4 04             	add    $0x4,%esp
 80587a0:	85 c0                	test   %eax,%eax
 80587a2:	0f 84 db 00 00 00    	je     8058883 <__afl_setup_abort>
 80587a8:	50                   	push   %eax
 80587a9:	e8 d2 0c ff ff       	call   8049480 <atoi@plt>
 80587ae:	83 c4 04             	add    $0x4,%esp
 80587b1:	6a 00                	push   $0x0
 80587b3:	6a 00                	push   $0x0
 80587b5:	50                   	push   %eax
 80587b6:	e8 25 0a ff ff       	call   80491e0 <shmat@plt>
 80587bb:	83 c4 0c             	add    $0xc,%esp
 80587be:	83 f8 ff             	cmp    $0xffffffff,%eax
 80587c1:	0f 84 bc 00 00 00    	je     8058883 <__afl_setup_abort>
 80587c7:	c6 00 01             	movb   $0x1,(%eax)
 80587ca:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 80587cf:	89 c2                	mov    %eax,%edx
 80587d1:	59                   	pop    %ecx
 80587d2:	58                   	pop    %eax

080587d3 <__afl_forkserver>:
 80587d3:	50                   	push   %eax
 80587d4:	51                   	push   %ecx
 80587d5:	52                   	push   %edx
 80587d6:	6a 04                	push   $0x4
 80587d8:	68 e0 bd 43 08       	push   $0x843bde0
 80587dd:	68 c7 00 00 00       	push   $0xc7
 80587e2:	e8 a9 0b ff ff       	call   8049390 <write@plt>
 80587e7:	83 c4 0c             	add    $0xc,%esp
 80587ea:	83 f8 04             	cmp    $0x4,%eax
 80587ed:	75 6e                	jne    805885d <__afl_fork_resume>

080587ef <__afl_fork_wait_loop>:
 80587ef:	6a 04                	push   $0x4
 80587f1:	68 e0 bd 43 08       	push   $0x843bde0
 80587f6:	68 c6 00 00 00       	push   $0xc6
 80587fb:	e8 20 09 ff ff       	call   8049120 <read@plt>
 8058800:	83 c4 0c             	add    $0xc,%esp
 8058803:	83 f8 04             	cmp    $0x4,%eax
 8058806:	75 74                	jne    805887c <__afl_die>
 8058808:	e8 13 0c ff ff       	call   8049420 <fork@plt>
 805880d:	83 f8 00             	cmp    $0x0,%eax
 8058810:	7c 6a                	jl     805887c <__afl_die>
 8058812:	74 49                	je     805885d <__afl_fork_resume>
 8058814:	a3 40 be 43 08       	mov    %eax,0x843be40
 8058819:	6a 04                	push   $0x4
 805881b:	68 40 be 43 08       	push   $0x843be40
 8058820:	68 c7 00 00 00       	push   $0xc7
 8058825:	e8 66 0b ff ff       	call   8049390 <write@plt>
 805882a:	83 c4 0c             	add    $0xc,%esp
 805882d:	6a 00                	push   $0x0
 805882f:	68 e0 bd 43 08       	push   $0x843bde0
 8058834:	ff 35 40 be 43 08    	pushl  0x843be40
 805883a:	e8 01 0a ff ff       	call   8049240 <waitpid@plt>
 805883f:	83 c4 0c             	add    $0xc,%esp
 8058842:	83 f8 00             	cmp    $0x0,%eax
 8058845:	7e 35                	jle    805887c <__afl_die>
 8058847:	6a 04                	push   $0x4
 8058849:	68 e0 bd 43 08       	push   $0x843bde0
 805884e:	68 c7 00 00 00       	push   $0xc7
 8058853:	e8 38 0b ff ff       	call   8049390 <write@plt>
 8058858:	83 c4 0c             	add    $0xc,%esp
 805885b:	eb 92                	jmp    80587ef <__afl_fork_wait_loop>

0805885d <__afl_fork_resume>:
 805885d:	68 c6 00 00 00       	push   $0xc6
 8058862:	e8 99 0c ff ff       	call   8049500 <close@plt>
 8058867:	68 c7 00 00 00       	push   $0xc7
 805886c:	e8 8f 0c ff ff       	call   8049500 <close@plt>
 8058871:	83 c4 08             	add    $0x8,%esp
 8058874:	5a                   	pop    %edx
 8058875:	59                   	pop    %ecx
 8058876:	58                   	pop    %eax
 8058877:	e9 ea fe ff ff       	jmp    8058766 <__afl_store>

0805887c <__afl_die>:
 805887c:	31 c0                	xor    %eax,%eax
 805887e:	e8 cd 08 ff ff       	call   8049150 <_exit@plt>

08058883 <__afl_setup_abort>:
 8058883:	fe 05 60 be 43 08    	incb   0x843be60
 8058889:	59                   	pop    %ecx
 805888a:	58                   	pop    %eax
 805888b:	e9 ee fe ff ff       	jmp    805877e <__afl_return>

08058890 <.AFL_SHM_ENV>:
 8058890:	5f                   	pop    %edi
 8058891:	5f                   	pop    %edi
 8058892:	41                   	inc    %ecx
 8058893:	46                   	inc    %esi
 8058894:	4c                   	dec    %esp
 8058895:	5f                   	pop    %edi
 8058896:	53                   	push   %ebx
 8058897:	48                   	dec    %eax
 8058898:	4d                   	dec    %ebp
 8058899:	5f                   	pop    %edi
 805889a:	49                   	dec    %ecx
 805889b:	44                   	inc    %esp
 805889c:	00 66 90             	add    %ah,-0x70(%esi)
 805889f:	90                   	nop

080588a0 <close_stdout_set_file_name>:
/* Set the file name to be reported in the event an error is detected
   by close_stdout.  */
void
close_stdout_set_file_name (const char *file)
{
  file_name = file;
 80588a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80588a4:	89 3c 24             	mov    %edi,(%esp)
 80588a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80588ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80588af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80588b3:	b9 10 64 00 00       	mov    $0x6410,%ecx
 80588b8:	e8 1b 03 00 00       	call   8058bd8 <__afl_maybe_log>
 80588bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80588c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80588c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80588c9:	8b 3c 24             	mov    (%esp),%edi
 80588cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80588d0:	8b 44 24 04          	mov    0x4(%esp),%eax
 80588d4:	a3 44 bc 43 08       	mov    %eax,0x843bc44
 80588d9:	c3                   	ret    
 80588da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080588e0 <close_stdout_set_ignore_EPIPE>:
   and should not lead to a diagnostic message.  */

void
close_stdout_set_ignore_EPIPE (bool ignore)
{
  ignore_EPIPE = ignore;
 80588e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80588e4:	89 3c 24             	mov    %edi,(%esp)
 80588e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80588eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80588ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80588f3:	b9 ef e7 00 00       	mov    $0xe7ef,%ecx
 80588f8:	e8 db 02 00 00       	call   8058bd8 <__afl_maybe_log>
 80588fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058901:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058905:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058909:	8b 3c 24             	mov    (%esp),%edi
 805890c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058910:	8b 44 24 04          	mov    0x4(%esp),%eax
 8058914:	a2 40 bc 43 08       	mov    %al,0x843bc40
 8058919:	c3                   	ret    
 805891a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08058920 <close_stdout>:
   tools (most notably 'make' and other build-management systems) depend
   on being able to detect failure in other tools via their exit status.  */

void
close_stdout (void)
{
 8058920:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058924:	89 3c 24             	mov    %edi,(%esp)
 8058927:	89 54 24 04          	mov    %edx,0x4(%esp)
 805892b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805892f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058933:	b9 53 b8 00 00       	mov    $0xb853,%ecx
 8058938:	e8 9b 02 00 00       	call   8058bd8 <__afl_maybe_log>
 805893d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058941:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058945:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058949:	8b 3c 24             	mov    (%esp),%edi
 805894c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058950:	56                   	push   %esi
 8058951:	53                   	push   %ebx
 8058952:	83 ec 10             	sub    $0x10,%esp
  if (close_stream (stdout) != 0
 8058955:	ff 35 d8 b2 06 08    	pushl  0x806b2d8
 805895b:	e8 00 ce 00 00       	call   8065760 <close_stream>
 8058960:	83 c4 10             	add    $0x10,%esp
 8058963:	85 c0                	test   %eax,%eax
 8058965:	0f 84 b1 00 00 00    	je     8058a1c <close_stdout+0xfc>
 805896b:	90                   	nop
 805896c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058970:	89 3c 24             	mov    %edi,(%esp)
 8058973:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058977:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805897b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805897f:	b9 2a 68 00 00       	mov    $0x682a,%ecx
 8058984:	e8 4f 02 00 00       	call   8058bd8 <__afl_maybe_log>
 8058989:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805898d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058991:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058995:	8b 3c 24             	mov    (%esp),%edi
 8058998:	8d 64 24 10          	lea    0x10(%esp),%esp
      && !(ignore_EPIPE && errno == EPIPE))
 805899c:	80 3d 40 bc 43 08 00 	cmpb   $0x0,0x843bc40
 80589a3:	0f 84 f5 00 00 00    	je     8058a9e <close_stdout+0x17e>
 80589a9:	8d 76 00             	lea    0x0(%esi),%esi
 80589ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80589b0:	89 3c 24             	mov    %edi,(%esp)
 80589b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80589b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80589bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80589bf:	b9 0e 33 00 00       	mov    $0x330e,%ecx
 80589c4:	e8 0f 02 00 00       	call   8058bd8 <__afl_maybe_log>
 80589c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80589cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80589d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80589d5:	8b 3c 24             	mov    (%esp),%edi
 80589d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80589dc:	e8 ff 09 ff ff       	call   80493e0 <__errno_location@plt>
 80589e1:	83 38 20             	cmpl   $0x20,(%eax)
 80589e4:	0f 85 b4 00 00 00    	jne    8058a9e <close_stdout+0x17e>
 80589ea:	66 90                	xchg   %ax,%ax
 80589ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80589f0:	89 3c 24             	mov    %edi,(%esp)
 80589f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80589f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80589fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80589ff:	b9 13 75 00 00       	mov    $0x7513,%ecx
 8058a04:	e8 cf 01 00 00       	call   8058bd8 <__afl_maybe_log>
 8058a09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058a0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058a11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058a15:	8b 3c 24             	mov    (%esp),%edi
 8058a18:	8d 64 24 10          	lea    0x10(%esp),%esp
        error (0, errno, "%s", write_error);

      _exit (exit_failure);
    }

   if (close_stream (stderr) != 0)
 8058a1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058a20:	89 3c 24             	mov    %edi,(%esp)
 8058a23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058a27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058a2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058a2f:	b9 84 f5 00 00       	mov    $0xf584,%ecx
 8058a34:	e8 9f 01 00 00       	call   8058bd8 <__afl_maybe_log>
 8058a39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058a3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058a41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058a45:	8b 3c 24             	mov    (%esp),%edi
 8058a48:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058a4c:	83 ec 0c             	sub    $0xc,%esp
 8058a4f:	ff 35 c4 b2 06 08    	pushl  0x806b2c4
 8058a55:	e8 06 cd 00 00       	call   8065760 <close_stream>
 8058a5a:	83 c4 10             	add    $0x10,%esp
 8058a5d:	85 c0                	test   %eax,%eax
 8058a5f:	0f 85 e4 00 00 00    	jne    8058b49 <close_stdout+0x229>
 8058a65:	8d 76 00             	lea    0x0(%esi),%esi
 8058a68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058a6c:	89 3c 24             	mov    %edi,(%esp)
 8058a6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058a73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058a77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058a7b:	b9 1e 08 00 00       	mov    $0x81e,%ecx
 8058a80:	e8 53 01 00 00       	call   8058bd8 <__afl_maybe_log>
 8058a85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058a89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058a8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058a91:	8b 3c 24             	mov    (%esp),%edi
 8058a94:	8d 64 24 10          	lea    0x10(%esp),%esp
     _exit (exit_failure);
}
 8058a98:	83 c4 04             	add    $0x4,%esp
 8058a9b:	5b                   	pop    %ebx
 8058a9c:	5e                   	pop    %esi
 8058a9d:	c3                   	ret    
 8058a9e:	66 90                	xchg   %ax,%ax
close_stdout (void)
{
  if (close_stream (stdout) != 0
      && !(ignore_EPIPE && errno == EPIPE))
    {
      char const *write_error = _("write error");
 8058aa0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058aa4:	89 3c 24             	mov    %edi,(%esp)
 8058aa7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058aab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058aaf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058ab3:	b9 7d 72 00 00       	mov    $0x727d,%ecx
 8058ab8:	e8 1b 01 00 00       	call   8058bd8 <__afl_maybe_log>
 8058abd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058ac1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058ac5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058ac9:	8b 3c 24             	mov    (%esp),%edi
 8058acc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058ad0:	50                   	push   %eax
 8058ad1:	6a 05                	push   $0x5
 8058ad3:	68 35 7c 06 08       	push   $0x8067c35
 8058ad8:	6a 00                	push   $0x0
 8058ada:	e8 f1 06 ff ff       	call   80491d0 <dcgettext@plt>
 8058adf:	89 c3                	mov    %eax,%ebx
      if (file_name)
 8058ae1:	a1 44 bc 43 08       	mov    0x843bc44,%eax
 8058ae6:	83 c4 10             	add    $0x10,%esp
 8058ae9:	85 c0                	test   %eax,%eax
 8058aeb:	0f 84 9a 00 00 00    	je     8058b8b <close_stdout+0x26b>
 8058af1:	8d 76 00             	lea    0x0(%esi),%esi
 8058af4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058af8:	89 3c 24             	mov    %edi,(%esp)
 8058afb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058aff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058b03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058b07:	b9 bc 89 00 00       	mov    $0x89bc,%ecx
 8058b0c:	e8 c7 00 00 00       	call   8058bd8 <__afl_maybe_log>
 8058b11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058b15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058b19:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058b1d:	8b 3c 24             	mov    (%esp),%edi
 8058b20:	8d 64 24 10          	lea    0x10(%esp),%esp
        error (0, errno, "%s: %s", quotearg_colon (file_name),
 8058b24:	83 ec 0c             	sub    $0xc,%esp
 8058b27:	50                   	push   %eax
 8058b28:	e8 43 95 00 00       	call   8062070 <quotearg_colon>
 8058b2d:	89 c6                	mov    %eax,%esi
 8058b2f:	e8 ac 08 ff ff       	call   80493e0 <__errno_location@plt>
 8058b34:	89 1c 24             	mov    %ebx,(%esp)
 8058b37:	56                   	push   %esi
 8058b38:	68 41 7c 06 08       	push   $0x8067c41
 8058b3d:	ff 30                	pushl  (%eax)
 8058b3f:	6a 00                	push   $0x0
 8058b41:	e8 4a 07 ff ff       	call   8049290 <error@plt>
 8058b46:	83 c4 20             	add    $0x20,%esp
 8058b49:	8d 76 00             	lea    0x0(%esi),%esi

      _exit (exit_failure);
    }

   if (close_stream (stderr) != 0)
     _exit (exit_failure);
 8058b4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058b50:	89 3c 24             	mov    %edi,(%esp)
 8058b53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058b57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058b5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058b5f:	b9 7e 79 00 00       	mov    $0x797e,%ecx
 8058b64:	e8 6f 00 00 00       	call   8058bd8 <__afl_maybe_log>
 8058b69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058b6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058b71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058b75:	8b 3c 24             	mov    (%esp),%edi
 8058b78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058b7c:	8b 15 50 b2 06 08    	mov    0x806b250,%edx
 8058b82:	83 ec 0c             	sub    $0xc,%esp
 8058b85:	52                   	push   %edx
 8058b86:	e8 c5 05 ff ff       	call   8049150 <_exit@plt>
 8058b8b:	90                   	nop
      char const *write_error = _("write error");
      if (file_name)
        error (0, errno, "%s: %s", quotearg_colon (file_name),
               write_error);
      else
        error (0, errno, "%s", write_error);
 8058b8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058b90:	89 3c 24             	mov    %edi,(%esp)
 8058b93:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058b97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058b9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058b9f:	b9 24 92 00 00       	mov    $0x9224,%ecx
 8058ba4:	e8 2f 00 00 00       	call   8058bd8 <__afl_maybe_log>
 8058ba9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058bad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058bb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058bb5:	8b 3c 24             	mov    (%esp),%edi
 8058bb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058bbc:	e8 1f 08 ff ff       	call   80493e0 <__errno_location@plt>
 8058bc1:	53                   	push   %ebx
 8058bc2:	68 45 7c 06 08       	push   $0x8067c45
 8058bc7:	ff 30                	pushl  (%eax)
 8058bc9:	6a 00                	push   $0x0
 8058bcb:	e8 c0 06 ff ff       	call   8049290 <error@plt>
 8058bd0:	83 c4 10             	add    $0x10,%esp
 8058bd3:	e9 71 ff ff ff       	jmp    8058b49 <close_stdout+0x229>

08058bd8 <__afl_maybe_log>:
 8058bd8:	9f                   	lahf   
 8058bd9:	0f 90 c0             	seto   %al
 8058bdc:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 8058be2:	85 d2                	test   %edx,%edx
 8058be4:	74 22                	je     8058c08 <__afl_setup>

08058be6 <__afl_store>:
 8058be6:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 8058bec:	31 cf                	xor    %ecx,%edi
 8058bee:	d1 e9                	shr    %ecx
 8058bf0:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 8058bf6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8058bfa:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08058bfe <__afl_return>:
 8058bfe:	04 7f                	add    $0x7f,%al
 8058c00:	9e                   	sahf   
 8058c01:	c3                   	ret    
 8058c02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08058c08 <__afl_setup>:
 8058c08:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 8058c0f:	75 ed                	jne    8058bfe <__afl_return>
 8058c11:	50                   	push   %eax
 8058c12:	51                   	push   %ecx
 8058c13:	68 10 8d 05 08       	push   $0x8058d10
 8058c18:	e8 93 06 ff ff       	call   80492b0 <getenv@plt>
 8058c1d:	83 c4 04             	add    $0x4,%esp
 8058c20:	85 c0                	test   %eax,%eax
 8058c22:	0f 84 db 00 00 00    	je     8058d03 <__afl_setup_abort>
 8058c28:	50                   	push   %eax
 8058c29:	e8 52 08 ff ff       	call   8049480 <atoi@plt>
 8058c2e:	83 c4 04             	add    $0x4,%esp
 8058c31:	6a 00                	push   $0x0
 8058c33:	6a 00                	push   $0x0
 8058c35:	50                   	push   %eax
 8058c36:	e8 a5 05 ff ff       	call   80491e0 <shmat@plt>
 8058c3b:	83 c4 0c             	add    $0xc,%esp
 8058c3e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058c41:	0f 84 bc 00 00 00    	je     8058d03 <__afl_setup_abort>
 8058c47:	c6 00 01             	movb   $0x1,(%eax)
 8058c4a:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 8058c4f:	89 c2                	mov    %eax,%edx
 8058c51:	59                   	pop    %ecx
 8058c52:	58                   	pop    %eax

08058c53 <__afl_forkserver>:
 8058c53:	50                   	push   %eax
 8058c54:	51                   	push   %ecx
 8058c55:	52                   	push   %edx
 8058c56:	6a 04                	push   $0x4
 8058c58:	68 e0 bd 43 08       	push   $0x843bde0
 8058c5d:	68 c7 00 00 00       	push   $0xc7
 8058c62:	e8 29 07 ff ff       	call   8049390 <write@plt>
 8058c67:	83 c4 0c             	add    $0xc,%esp
 8058c6a:	83 f8 04             	cmp    $0x4,%eax
 8058c6d:	75 6e                	jne    8058cdd <__afl_fork_resume>

08058c6f <__afl_fork_wait_loop>:
 8058c6f:	6a 04                	push   $0x4
 8058c71:	68 e0 bd 43 08       	push   $0x843bde0
 8058c76:	68 c6 00 00 00       	push   $0xc6
 8058c7b:	e8 a0 04 ff ff       	call   8049120 <read@plt>
 8058c80:	83 c4 0c             	add    $0xc,%esp
 8058c83:	83 f8 04             	cmp    $0x4,%eax
 8058c86:	75 74                	jne    8058cfc <__afl_die>
 8058c88:	e8 93 07 ff ff       	call   8049420 <fork@plt>
 8058c8d:	83 f8 00             	cmp    $0x0,%eax
 8058c90:	7c 6a                	jl     8058cfc <__afl_die>
 8058c92:	74 49                	je     8058cdd <__afl_fork_resume>
 8058c94:	a3 40 be 43 08       	mov    %eax,0x843be40
 8058c99:	6a 04                	push   $0x4
 8058c9b:	68 40 be 43 08       	push   $0x843be40
 8058ca0:	68 c7 00 00 00       	push   $0xc7
 8058ca5:	e8 e6 06 ff ff       	call   8049390 <write@plt>
 8058caa:	83 c4 0c             	add    $0xc,%esp
 8058cad:	6a 00                	push   $0x0
 8058caf:	68 e0 bd 43 08       	push   $0x843bde0
 8058cb4:	ff 35 40 be 43 08    	pushl  0x843be40
 8058cba:	e8 81 05 ff ff       	call   8049240 <waitpid@plt>
 8058cbf:	83 c4 0c             	add    $0xc,%esp
 8058cc2:	83 f8 00             	cmp    $0x0,%eax
 8058cc5:	7e 35                	jle    8058cfc <__afl_die>
 8058cc7:	6a 04                	push   $0x4
 8058cc9:	68 e0 bd 43 08       	push   $0x843bde0
 8058cce:	68 c7 00 00 00       	push   $0xc7
 8058cd3:	e8 b8 06 ff ff       	call   8049390 <write@plt>
 8058cd8:	83 c4 0c             	add    $0xc,%esp
 8058cdb:	eb 92                	jmp    8058c6f <__afl_fork_wait_loop>

08058cdd <__afl_fork_resume>:
 8058cdd:	68 c6 00 00 00       	push   $0xc6
 8058ce2:	e8 19 08 ff ff       	call   8049500 <close@plt>
 8058ce7:	68 c7 00 00 00       	push   $0xc7
 8058cec:	e8 0f 08 ff ff       	call   8049500 <close@plt>
 8058cf1:	83 c4 08             	add    $0x8,%esp
 8058cf4:	5a                   	pop    %edx
 8058cf5:	59                   	pop    %ecx
 8058cf6:	58                   	pop    %eax
 8058cf7:	e9 ea fe ff ff       	jmp    8058be6 <__afl_store>

08058cfc <__afl_die>:
 8058cfc:	31 c0                	xor    %eax,%eax
 8058cfe:	e8 4d 04 ff ff       	call   8049150 <_exit@plt>

08058d03 <__afl_setup_abort>:
 8058d03:	fe 05 60 be 43 08    	incb   0x843be60
 8058d09:	59                   	pop    %ecx
 8058d0a:	58                   	pop    %eax
 8058d0b:	e9 ee fe ff ff       	jmp    8058bfe <__afl_return>

08058d10 <.AFL_SHM_ENV>:
 8058d10:	5f                   	pop    %edi
 8058d11:	5f                   	pop    %edi
 8058d12:	41                   	inc    %ecx
 8058d13:	46                   	inc    %esi
 8058d14:	4c                   	dec    %esp
 8058d15:	5f                   	pop    %edi
 8058d16:	53                   	push   %ebx
 8058d17:	48                   	dec    %eax
 8058d18:	4d                   	dec    %ebp
 8058d19:	5f                   	pop    %edi
 8058d1a:	49                   	dec    %ecx
 8058d1b:	44                   	inc    %esp
 8058d1c:	00 66 90             	add    %ah,-0x70(%esi)
 8058d1f:	90                   	nop

08058d20 <set_uint32>:
/* Copy the 4 byte value from v into the memory location pointed to by *cp,
   If your architecture allows unaligned access this is equivalent to
   * (uint32_t *) cp = v  */
static void
set_uint32 (char *cp, uint32_t v)
{
 8058d20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058d24:	89 3c 24             	mov    %edi,(%esp)
 8058d27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058d2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058d2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058d33:	b9 41 aa 00 00       	mov    $0xaa41,%ecx
 8058d38:	e8 2b 20 00 00       	call   805ad68 <__afl_maybe_log>
 8058d3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058d41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058d45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058d49:	8b 3c 24             	mov    (%esp),%edi
 8058d4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058d50:	56                   	push   %esi
 8058d51:	53                   	push   %ebx
 8058d52:	89 c6                	mov    %eax,%esi
 8058d54:	83 ec 20             	sub    $0x20,%esp
 8058d57:	89 54 24 18          	mov    %edx,0x18(%esp)
  memcpy (cp, &v, sizeof v+(lava_get(359))*(0x6c6174fa==(lava_get(359))||0xfa74616c==(lava_get(359))));
 8058d5b:	68 67 01 00 00       	push   $0x167
 8058d60:	e8 fb de ff ff       	call   8056c60 <lava_get>
 8058d65:	c7 04 24 67 01 00 00 	movl   $0x167,(%esp)
 8058d6c:	89 c3                	mov    %eax,%ebx
 8058d6e:	e8 ed de ff ff       	call   8056c60 <lava_get>
 8058d73:	83 c4 10             	add    $0x10,%esp
 8058d76:	3d fa 74 61 6c       	cmp    $0x6c6174fa,%eax
 8058d7b:	ba 01 00 00 00       	mov    $0x1,%edx
 8058d80:	74 4c                	je     8058dce <set_uint32+0xae>
 8058d82:	66 90                	xchg   %ax,%ax
 8058d84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058d88:	89 3c 24             	mov    %edi,(%esp)
 8058d8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058d8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058d93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058d97:	b9 4a 9d 00 00       	mov    $0x9d4a,%ecx
 8058d9c:	e8 c7 1f 00 00       	call   805ad68 <__afl_maybe_log>
 8058da1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058da5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058da9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058dad:	8b 3c 24             	mov    (%esp),%edi
 8058db0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058db4:	83 ec 0c             	sub    $0xc,%esp
 8058db7:	68 67 01 00 00       	push   $0x167
 8058dbc:	e8 9f de ff ff       	call   8056c60 <lava_get>
 8058dc1:	31 d2                	xor    %edx,%edx
 8058dc3:	83 c4 10             	add    $0x10,%esp
 8058dc6:	3d 6c 61 74 fa       	cmp    $0xfa74616c,%eax
 8058dcb:	0f 94 c2             	sete   %dl
 8058dce:	66 90                	xchg   %ax,%ax
 8058dd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058dd4:	89 3c 24             	mov    %edi,(%esp)
 8058dd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058ddb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058ddf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058de3:	b9 e1 b1 00 00       	mov    $0xb1e1,%ecx
 8058de8:	e8 7b 1f 00 00       	call   805ad68 <__afl_maybe_log>
 8058ded:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058df1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058df5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058df9:	8b 3c 24             	mov    (%esp),%edi
 8058dfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058e00:	0f af da             	imul   %edx,%ebx

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 8058e03:	8d 44 24 0c          	lea    0xc(%esp),%eax
 8058e07:	83 ec 04             	sub    $0x4,%esp
 8058e0a:	83 c3 04             	add    $0x4,%ebx
 8058e0d:	53                   	push   %ebx
 8058e0e:	50                   	push   %eax
 8058e0f:	56                   	push   %esi
 8058e10:	e8 5b 03 ff ff       	call   8049170 <memcpy@plt>
}
 8058e15:	83 c4 24             	add    $0x24,%esp
 8058e18:	5b                   	pop    %ebx
 8058e19:	5e                   	pop    %esi
 8058e1a:	c3                   	ret    
 8058e1b:	90                   	nop
 8058e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08058e20 <md5_init_ctx>:

/* Initialize structure containing state of computation.
   (RFC 1321, 3.3: Step 3)  */
void
md5_init_ctx (struct md5_ctx *ctx)
{
 8058e20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058e24:	89 3c 24             	mov    %edi,(%esp)
 8058e27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058e2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058e2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058e33:	b9 ea 89 00 00       	mov    $0x89ea,%ecx
 8058e38:	e8 2b 1f 00 00       	call   805ad68 <__afl_maybe_log>
 8058e3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058e41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058e45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058e49:	8b 3c 24             	mov    (%esp),%edi
 8058e4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058e50:	8b 44 24 04          	mov    0x4(%esp),%eax
  ctx->A = 0x67452301;
 8058e54:	c7 00 01 23 45 67    	movl   $0x67452301,(%eax)
  ctx->B = 0xefcdab89;
 8058e5a:	c7 40 04 89 ab cd ef 	movl   $0xefcdab89,0x4(%eax)
  ctx->C = 0x98badcfe;
 8058e61:	c7 40 08 fe dc ba 98 	movl   $0x98badcfe,0x8(%eax)
  ctx->D = 0x10325476;
 8058e68:	c7 40 0c 76 54 32 10 	movl   $0x10325476,0xc(%eax)

  ctx->total[0] = ctx->total[1] = 0;
 8058e6f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
 8058e76:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
  ctx->buflen = 0;
 8058e7d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
 8058e84:	c3                   	ret    
 8058e85:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8058e89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08058e90 <md5_read_ctx>:

/* Put result from CTX in first 16 bytes following RESBUF.  The result
   must be in little endian byte order.  */
void *
md5_read_ctx (const struct md5_ctx *ctx, void *resbuf)
{
 8058e90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058e94:	89 3c 24             	mov    %edi,(%esp)
 8058e97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058e9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058e9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058ea3:	b9 4e 58 00 00       	mov    $0x584e,%ecx
 8058ea8:	e8 bb 1e 00 00       	call   805ad68 <__afl_maybe_log>
 8058ead:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058eb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058eb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058eb9:	8b 3c 24             	mov    (%esp),%edi
 8058ebc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058ec0:	55                   	push   %ebp
 8058ec1:	57                   	push   %edi
 8058ec2:	56                   	push   %esi
 8058ec3:	53                   	push   %ebx
 8058ec4:	83 ec 18             	sub    $0x18,%esp
 8058ec7:	8b 7c 24 2c          	mov    0x2c(%esp),%edi
 8058ecb:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  char *r = resbuf;
  set_uint32 (r + 0 * sizeof ctx->A+(lava_get(356))*(0x6c6174fd==(lava_get(356))||0xfd74616c==(lava_get(356))), SWAP (ctx->A));
 8058ecf:	8b 2f                	mov    (%edi),%ebp
 8058ed1:	68 64 01 00 00       	push   $0x164
 8058ed6:	e8 85 dd ff ff       	call   8056c60 <lava_get>
 8058edb:	c7 04 24 64 01 00 00 	movl   $0x164,(%esp)
 8058ee2:	89 c6                	mov    %eax,%esi
 8058ee4:	e8 77 dd ff ff       	call   8056c60 <lava_get>
 8058ee9:	83 c4 10             	add    $0x10,%esp
 8058eec:	3d fd 74 61 6c       	cmp    $0x6c6174fd,%eax
 8058ef1:	ba 01 00 00 00       	mov    $0x1,%edx
 8058ef6:	74 4a                	je     8058f42 <md5_read_ctx+0xb2>
 8058ef8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058efc:	89 3c 24             	mov    %edi,(%esp)
 8058eff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058f03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058f07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058f0b:	b9 ea ea 00 00       	mov    $0xeaea,%ecx
 8058f10:	e8 53 1e 00 00       	call   805ad68 <__afl_maybe_log>
 8058f15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058f19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058f1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058f21:	8b 3c 24             	mov    (%esp),%edi
 8058f24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058f28:	83 ec 0c             	sub    $0xc,%esp
 8058f2b:	68 64 01 00 00       	push   $0x164
 8058f30:	e8 2b dd ff ff       	call   8056c60 <lava_get>
 8058f35:	31 d2                	xor    %edx,%edx
 8058f37:	83 c4 10             	add    $0x10,%esp
 8058f3a:	3d 6c 61 74 fd       	cmp    $0xfd74616c,%eax
 8058f3f:	0f 94 c2             	sete   %dl
 8058f42:	66 90                	xchg   %ax,%ax
 8058f44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058f48:	89 3c 24             	mov    %edi,(%esp)
 8058f4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058f4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058f53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058f57:	b9 57 4d 00 00       	mov    $0x4d57,%ecx
 8058f5c:	e8 07 1e 00 00       	call   805ad68 <__afl_maybe_log>
 8058f61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058f65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058f69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058f6d:	8b 3c 24             	mov    (%esp),%edi
 8058f70:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058f74:	89 d0                	mov    %edx,%eax
 8058f76:	89 ea                	mov    %ebp,%edx
 8058f78:	0f af c6             	imul   %esi,%eax
 8058f7b:	01 d8                	add    %ebx,%eax
 8058f7d:	e8 9e fd ff ff       	call   8058d20 <set_uint32>
  set_uint32 (r + 1 * sizeof ctx->B+(lava_get(362))*(0x6c6174f7==(lava_get(362))||0xf774616c==(lava_get(362))), SWAP (ctx->B));
 8058f82:	83 ec 0c             	sub    $0xc,%esp
 8058f85:	8b 6f 04             	mov    0x4(%edi),%ebp
 8058f88:	68 6a 01 00 00       	push   $0x16a
 8058f8d:	e8 ce dc ff ff       	call   8056c60 <lava_get>
 8058f92:	c7 04 24 6a 01 00 00 	movl   $0x16a,(%esp)
 8058f99:	89 c6                	mov    %eax,%esi
 8058f9b:	e8 c0 dc ff ff       	call   8056c60 <lava_get>
 8058fa0:	83 c4 10             	add    $0x10,%esp
 8058fa3:	3d f7 74 61 6c       	cmp    $0x6c6174f7,%eax
 8058fa8:	b9 01 00 00 00       	mov    $0x1,%ecx
 8058fad:	74 4b                	je     8058ffa <md5_read_ctx+0x16a>
 8058faf:	90                   	nop
 8058fb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058fb4:	89 3c 24             	mov    %edi,(%esp)
 8058fb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058fbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058fbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058fc3:	b9 94 93 00 00       	mov    $0x9394,%ecx
 8058fc8:	e8 9b 1d 00 00       	call   805ad68 <__afl_maybe_log>
 8058fcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058fd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058fd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058fd9:	8b 3c 24             	mov    (%esp),%edi
 8058fdc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058fe0:	83 ec 0c             	sub    $0xc,%esp
 8058fe3:	68 6a 01 00 00       	push   $0x16a
 8058fe8:	e8 73 dc ff ff       	call   8056c60 <lava_get>
 8058fed:	31 c9                	xor    %ecx,%ecx
 8058fef:	83 c4 10             	add    $0x10,%esp
 8058ff2:	3d 6c 61 74 f7       	cmp    $0xf774616c,%eax
 8058ff7:	0f 94 c1             	sete   %cl
 8058ffa:	66 90                	xchg   %ax,%ax
 8058ffc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059000:	89 3c 24             	mov    %edi,(%esp)
 8059003:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059007:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805900b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805900f:	b9 f1 4f 00 00       	mov    $0x4ff1,%ecx
 8059014:	e8 4f 1d 00 00       	call   805ad68 <__afl_maybe_log>
 8059019:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805901d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059021:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059025:	8b 3c 24             	mov    (%esp),%edi
 8059028:	8d 64 24 10          	lea    0x10(%esp),%esp
 805902c:	0f af f1             	imul   %ecx,%esi
 805902f:	89 ea                	mov    %ebp,%edx
 8059031:	8d 44 33 04          	lea    0x4(%ebx,%esi,1),%eax
 8059035:	e8 e6 fc ff ff       	call   8058d20 <set_uint32>
  set_uint32 (r + 2 * sizeof ctx->C+(lava_get(365))*(0x6c6174f4==(lava_get(365))||0xf474616c==(lava_get(365))), SWAP (ctx->C));
 805903a:	83 ec 0c             	sub    $0xc,%esp
 805903d:	8b 6f 08             	mov    0x8(%edi),%ebp
 8059040:	68 6d 01 00 00       	push   $0x16d
 8059045:	e8 16 dc ff ff       	call   8056c60 <lava_get>
 805904a:	c7 04 24 6d 01 00 00 	movl   $0x16d,(%esp)
 8059051:	89 c6                	mov    %eax,%esi
 8059053:	e8 08 dc ff ff       	call   8056c60 <lava_get>
 8059058:	83 c4 10             	add    $0x10,%esp
 805905b:	3d f4 74 61 6c       	cmp    $0x6c6174f4,%eax
 8059060:	ba 01 00 00 00       	mov    $0x1,%edx
 8059065:	74 4b                	je     80590b2 <md5_read_ctx+0x222>
 8059067:	90                   	nop
 8059068:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805906c:	89 3c 24             	mov    %edi,(%esp)
 805906f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059073:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059077:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805907b:	b9 ae 89 00 00       	mov    $0x89ae,%ecx
 8059080:	e8 e3 1c 00 00       	call   805ad68 <__afl_maybe_log>
 8059085:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059089:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805908d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059091:	8b 3c 24             	mov    (%esp),%edi
 8059094:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059098:	83 ec 0c             	sub    $0xc,%esp
 805909b:	68 6d 01 00 00       	push   $0x16d
 80590a0:	e8 bb db ff ff       	call   8056c60 <lava_get>
 80590a5:	31 d2                	xor    %edx,%edx
 80590a7:	83 c4 10             	add    $0x10,%esp
 80590aa:	3d 6c 61 74 f4       	cmp    $0xf474616c,%eax
 80590af:	0f 94 c2             	sete   %dl
 80590b2:	66 90                	xchg   %ax,%ax
 80590b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80590b8:	89 3c 24             	mov    %edi,(%esp)
 80590bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80590bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80590c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80590c7:	b9 6c 67 00 00       	mov    $0x676c,%ecx
 80590cc:	e8 97 1c 00 00       	call   805ad68 <__afl_maybe_log>
 80590d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80590d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80590d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80590dd:	8b 3c 24             	mov    (%esp),%edi
 80590e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80590e4:	0f af f2             	imul   %edx,%esi
 80590e7:	89 ea                	mov    %ebp,%edx
 80590e9:	8d 44 33 08          	lea    0x8(%ebx,%esi,1),%eax
 80590ed:	e8 2e fc ff ff       	call   8058d20 <set_uint32>
  set_uint32 (r + 3 * sizeof ctx->D+(lava_get(368))*(0x6c6174f1==(lava_get(368))||0xf174616c==(lava_get(368))), SWAP (ctx->D));
 80590f2:	83 ec 0c             	sub    $0xc,%esp
 80590f5:	8b 7f 0c             	mov    0xc(%edi),%edi
 80590f8:	68 70 01 00 00       	push   $0x170
 80590fd:	e8 5e db ff ff       	call   8056c60 <lava_get>
 8059102:	c7 04 24 70 01 00 00 	movl   $0x170,(%esp)
 8059109:	89 c5                	mov    %eax,%ebp
 805910b:	e8 50 db ff ff       	call   8056c60 <lava_get>
 8059110:	83 c4 10             	add    $0x10,%esp
 8059113:	3d f1 74 61 6c       	cmp    $0x6c6174f1,%eax
 8059118:	b9 01 00 00 00       	mov    $0x1,%ecx
 805911d:	74 4b                	je     805916a <md5_read_ctx+0x2da>
 805911f:	90                   	nop
 8059120:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059124:	89 3c 24             	mov    %edi,(%esp)
 8059127:	89 54 24 04          	mov    %edx,0x4(%esp)
 805912b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805912f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059133:	b9 e6 ce 00 00       	mov    $0xcee6,%ecx
 8059138:	e8 2b 1c 00 00       	call   805ad68 <__afl_maybe_log>
 805913d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059141:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059145:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059149:	8b 3c 24             	mov    (%esp),%edi
 805914c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059150:	83 ec 0c             	sub    $0xc,%esp
 8059153:	68 70 01 00 00       	push   $0x170
 8059158:	e8 03 db ff ff       	call   8056c60 <lava_get>
 805915d:	31 c9                	xor    %ecx,%ecx
 805915f:	83 c4 10             	add    $0x10,%esp
 8059162:	3d 6c 61 74 f1       	cmp    $0xf174616c,%eax
 8059167:	0f 94 c1             	sete   %cl
 805916a:	66 90                	xchg   %ax,%ax
 805916c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059170:	89 3c 24             	mov    %edi,(%esp)
 8059173:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059177:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805917b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805917f:	b9 7d 98 00 00       	mov    $0x987d,%ecx
 8059184:	e8 df 1b 00 00       	call   805ad68 <__afl_maybe_log>
 8059189:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805918d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059191:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059195:	8b 3c 24             	mov    (%esp),%edi
 8059198:	8d 64 24 10          	lea    0x10(%esp),%esp
 805919c:	0f af e9             	imul   %ecx,%ebp
 805919f:	89 fa                	mov    %edi,%edx
 80591a1:	8d 44 2b 0c          	lea    0xc(%ebx,%ebp,1),%eax
 80591a5:	e8 76 fb ff ff       	call   8058d20 <set_uint32>

  return resbuf;
}
 80591aa:	83 c4 0c             	add    $0xc,%esp
 80591ad:	89 d8                	mov    %ebx,%eax
 80591af:	5b                   	pop    %ebx
 80591b0:	5e                   	pop    %esi
 80591b1:	5f                   	pop    %edi
 80591b2:	5d                   	pop    %ebp
 80591b3:	c3                   	ret    
 80591b4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80591ba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

080591c0 <md5_process_block>:
/* Process LEN bytes of BUFFER, accumulating context into CTX.
   It is assumed that LEN % 64 == 0.  */

void
md5_process_block (const void *buffer, size_t len, struct md5_ctx *ctx)
{
 80591c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80591c4:	89 3c 24             	mov    %edi,(%esp)
 80591c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80591cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80591cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80591d3:	b9 55 c8 00 00       	mov    $0xc855,%ecx
 80591d8:	e8 8b 1b 00 00       	call   805ad68 <__afl_maybe_log>
 80591dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80591e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80591e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80591e9:	8b 3c 24             	mov    (%esp),%edi
 80591ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80591f0:	55                   	push   %ebp
 80591f1:	57                   	push   %edi
 80591f2:	56                   	push   %esi
 80591f3:	53                   	push   %ebx
 80591f4:	83 ec 58             	sub    $0x58,%esp
  uint32_t correct_words[16];
  const uint32_t *words = buffer;
  size_t nwords = len / sizeof (uint32_t);
  const uint32_t *endp = words + nwords;
  uint32_t A = ctx->A;
 80591f7:	8b 4c 24 74          	mov    0x74(%esp),%ecx
/* Process LEN bytes of BUFFER, accumulating context into CTX.
   It is assumed that LEN % 64 == 0.  */

void
md5_process_block (const void *buffer, size_t len, struct md5_ctx *ctx)
{
 80591fb:	8b 44 24 70          	mov    0x70(%esp),%eax
 80591ff:	8b 7c 24 6c          	mov    0x6c(%esp),%edi
  uint32_t correct_words[16];
  const uint32_t *words = buffer;
  size_t nwords = len / sizeof (uint32_t);
  const uint32_t *endp = words + nwords;
  uint32_t A = ctx->A;
  uint32_t B = ctx->B;
 8059203:	8b 6c 24 74          	mov    0x74(%esp),%ebp
{
  uint32_t correct_words[16];
  const uint32_t *words = buffer;
  size_t nwords = len / sizeof (uint32_t);
  const uint32_t *endp = words + nwords;
  uint32_t A = ctx->A;
 8059207:	8b 31                	mov    (%ecx),%esi
md5_process_block (const void *buffer, size_t len, struct md5_ctx *ctx)
{
  uint32_t correct_words[16];
  const uint32_t *words = buffer;
  size_t nwords = len / sizeof (uint32_t);
  const uint32_t *endp = words + nwords;
 8059209:	89 c2                	mov    %eax,%edx
 805920b:	83 e2 fc             	and    $0xfffffffc,%edx
 805920e:	8d 1c 17             	lea    (%edi,%edx,1),%ebx
  uint32_t A = ctx->A;
  uint32_t B = ctx->B;
 8059211:	8b 55 04             	mov    0x4(%ebp),%edx
{
  uint32_t correct_words[16];
  const uint32_t *words = buffer;
  size_t nwords = len / sizeof (uint32_t);
  const uint32_t *endp = words + nwords;
  uint32_t A = ctx->A;
 8059214:	89 74 24 4c          	mov    %esi,0x4c(%esp)
  uint32_t B = ctx->B;
  uint32_t C = ctx->C;
 8059218:	8b 74 24 74          	mov    0x74(%esp),%esi
md5_process_block (const void *buffer, size_t len, struct md5_ctx *ctx)
{
  uint32_t correct_words[16];
  const uint32_t *words = buffer;
  size_t nwords = len / sizeof (uint32_t);
  const uint32_t *endp = words + nwords;
 805921c:	89 5c 24 54          	mov    %ebx,0x54(%esp)
  uint32_t A = ctx->A;
  uint32_t B = ctx->B;
 8059220:	89 d5                	mov    %edx,%ebp
 8059222:	89 d1                	mov    %edx,%ecx
  uint32_t C = ctx->C;
 8059224:	8b 56 08             	mov    0x8(%esi),%edx
  uint32_t D = ctx->D;
 8059227:	8b 74 24 74          	mov    0x74(%esp),%esi
  const uint32_t *words = buffer;
  size_t nwords = len / sizeof (uint32_t);
  const uint32_t *endp = words + nwords;
  uint32_t A = ctx->A;
  uint32_t B = ctx->B;
  uint32_t C = ctx->C;
 805922b:	89 54 24 40          	mov    %edx,0x40(%esp)
  uint32_t D = ctx->D;
 805922f:	8b 56 0c             	mov    0xc(%esi),%edx
  uint32_t lolen = len;

  /* First increment the byte count.  RFC 1321 specifies the possible
     length of the file up to 2^64 bits.  Here we only compute the
     number of bytes.  Do a double word increment.  */
  ctx->total[0] += lolen;
 8059232:	8b 74 24 74          	mov    0x74(%esp),%esi
  size_t nwords = len / sizeof (uint32_t);
  const uint32_t *endp = words + nwords;
  uint32_t A = ctx->A;
  uint32_t B = ctx->B;
  uint32_t C = ctx->C;
  uint32_t D = ctx->D;
 8059236:	89 54 24 44          	mov    %edx,0x44(%esp)
  uint32_t lolen = len;

  /* First increment the byte count.  RFC 1321 specifies the possible
     length of the file up to 2^64 bits.  Here we only compute the
     number of bytes.  Do a double word increment.  */
  ctx->total[0] += lolen;
 805923a:	8b 56 10             	mov    0x10(%esi),%edx
 805923d:	01 c2                	add    %eax,%edx
  ctx->total[1] += (len >> 31 >> 1) + (ctx->total[0] < lolen);
 805923f:	39 d0                	cmp    %edx,%eax
  uint32_t lolen = len;

  /* First increment the byte count.  RFC 1321 specifies the possible
     length of the file up to 2^64 bits.  Here we only compute the
     number of bytes.  Do a double word increment.  */
  ctx->total[0] += lolen;
 8059241:	89 56 10             	mov    %edx,0x10(%esi)
  ctx->total[1] += (len >> 31 >> 1) + (ctx->total[0] < lolen);
 8059244:	0f 97 c0             	seta   %al
 8059247:	0f b6 c0             	movzbl %al,%eax
 805924a:	01 46 14             	add    %eax,0x14(%esi)

  /* Process all bytes in the buffer with 64 bytes in each round of
     the loop.  */
  while (words < endp)
 805924d:	39 df                	cmp    %ebx,%edi
 805924f:	0f 83 32 07 00 00    	jae    8059987 <md5_process_block+0x7c7>
 8059255:	8d 76 00             	lea    0x0(%esi),%esi
 8059258:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805925c:	89 3c 24             	mov    %edi,(%esp)
 805925f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059263:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059267:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805926b:	b9 f4 eb 00 00       	mov    $0xebf4,%ecx
 8059270:	e8 f3 1a 00 00       	call   805ad68 <__afl_maybe_log>
 8059275:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059279:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805927d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059281:	8b 3c 24             	mov    (%esp),%edi
 8059284:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059288:	89 2c 24             	mov    %ebp,(%esp)
 805928b:	90                   	nop
 805928c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

         perl -e 'foreach(1..64){printf "0x%08x\n", int (4294967296 * abs (sin $_))}'
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
 8059290:	8b 1f                	mov    (%edi),%ebx
 8059292:	8b 4c 24 4c          	mov    0x4c(%esp),%ecx
 8059296:	8b 74 24 40          	mov    0x40(%esp),%esi
 805929a:	8b 2c 24             	mov    (%esp),%ebp
 805929d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 80592a1:	8d 94 0b 78 a4 6a d7 	lea    -0x28955b88(%ebx,%ecx,1),%edx
 80592a8:	8b 5c 24 44          	mov    0x44(%esp),%ebx
      OP (D, A, B, C, 12, 0xe8c7b756);
 80592ac:	8b 4f 04             	mov    0x4(%edi),%ecx

         perl -e 'foreach(1..64){printf "0x%08x\n", int (4294967296 * abs (sin $_))}'
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
 80592af:	89 d8                	mov    %ebx,%eax
 80592b1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80592b5:	8d 8c 19 56 b7 c7 e8 	lea    -0x173848aa(%ecx,%ebx,1),%ecx
 80592bc:	31 f0                	xor    %esi,%eax
 80592be:	21 e8                	and    %ebp,%eax
 80592c0:	31 d8                	xor    %ebx,%eax
 80592c2:	01 d0                	add    %edx,%eax
      OP (D, A, B, C, 12, 0xe8c7b756);
 80592c4:	89 f2                	mov    %esi,%edx

         perl -e 'foreach(1..64){printf "0x%08x\n", int (4294967296 * abs (sin $_))}'
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
 80592c6:	c1 c0 07             	rol    $0x7,%eax
      OP (D, A, B, C, 12, 0xe8c7b756);
 80592c9:	31 ea                	xor    %ebp,%edx

         perl -e 'foreach(1..64){printf "0x%08x\n", int (4294967296 * abs (sin $_))}'
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
 80592cb:	01 e8                	add    %ebp,%eax
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
 80592cd:	8b 6f 08             	mov    0x8(%edi),%ebp
         perl -e 'foreach(1..64){printf "0x%08x\n", int (4294967296 * abs (sin $_))}'
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
 80592d0:	21 c2                	and    %eax,%edx
 80592d2:	31 f2                	xor    %esi,%edx
 80592d4:	8d 9c 35 db 70 20 24 	lea    0x242070db(%ebp,%esi,1),%ebx
      OP (C, D, A, B, 17, 0x242070db);
 80592db:	8b 34 24             	mov    (%esp),%esi
         perl -e 'foreach(1..64){printf "0x%08x\n", int (4294967296 * abs (sin $_))}'
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
 80592de:	01 ca                	add    %ecx,%edx
 80592e0:	c1 c2 0c             	rol    $0xc,%edx
      OP (C, D, A, B, 17, 0x242070db);
 80592e3:	89 c1                	mov    %eax,%ecx
 80592e5:	89 6c 24 0c          	mov    %ebp,0xc(%esp)
         perl -e 'foreach(1..64){printf "0x%08x\n", int (4294967296 * abs (sin $_))}'
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
 80592e9:	01 c2                	add    %eax,%edx
      OP (C, D, A, B, 17, 0x242070db);
      OP (B, C, D, A, 22, 0xc1bdceee);
 80592eb:	8b 6f 0c             	mov    0xc(%edi),%ebp
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
 80592ee:	31 f1                	xor    %esi,%ecx
 80592f0:	21 d1                	and    %edx,%ecx
 80592f2:	31 f1                	xor    %esi,%ecx
 80592f4:	89 6c 24 10          	mov    %ebp,0x10(%esp)
 80592f8:	8d b4 35 ee ce bd c1 	lea    -0x3e423112(%ebp,%esi,1),%esi
 80592ff:	01 d9                	add    %ebx,%ecx
      OP (B, C, D, A, 22, 0xc1bdceee);
 8059301:	89 d3                	mov    %edx,%ebx
      OP (A, B, C, D, 7, 0xf57c0faf);
 8059303:	8b 6f 10             	mov    0x10(%edi),%ebp
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
 8059306:	c1 c9 0f             	ror    $0xf,%ecx
      OP (B, C, D, A, 22, 0xc1bdceee);
 8059309:	31 c3                	xor    %eax,%ebx
       */

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
 805930b:	01 d1                	add    %edx,%ecx
      OP (B, C, D, A, 22, 0xc1bdceee);
 805930d:	21 cb                	and    %ecx,%ebx
 805930f:	89 6c 24 14          	mov    %ebp,0x14(%esp)
 8059313:	31 c3                	xor    %eax,%ebx
 8059315:	01 f3                	add    %esi,%ebx
 8059317:	8d b4 28 af 0f 7c f5 	lea    -0xa83f051(%eax,%ebp,1),%esi
      OP (A, B, C, D, 7, 0xf57c0faf);
 805931e:	89 c8                	mov    %ecx,%eax

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
      OP (B, C, D, A, 22, 0xc1bdceee);
 8059320:	c1 cb 0a             	ror    $0xa,%ebx
      OP (A, B, C, D, 7, 0xf57c0faf);
 8059323:	31 d0                	xor    %edx,%eax

      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
      OP (B, C, D, A, 22, 0xc1bdceee);
 8059325:	01 cb                	add    %ecx,%ebx
      OP (A, B, C, D, 7, 0xf57c0faf);
 8059327:	21 d8                	and    %ebx,%eax
 8059329:	31 d0                	xor    %edx,%eax
 805932b:	01 f0                	add    %esi,%eax
      OP (D, A, B, C, 12, 0x4787c62a);
 805932d:	8b 77 14             	mov    0x14(%edi),%esi
      /* Round 1.  */
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
      OP (B, C, D, A, 22, 0xc1bdceee);
      OP (A, B, C, D, 7, 0xf57c0faf);
 8059330:	c1 c0 07             	rol    $0x7,%eax
 8059333:	01 d8                	add    %ebx,%eax
      OP (D, A, B, C, 12, 0x4787c62a);
 8059335:	89 f5                	mov    %esi,%ebp
 8059337:	8d b4 32 2a c6 87 47 	lea    0x4787c62a(%edx,%esi,1),%esi
 805933e:	89 da                	mov    %ebx,%edx
 8059340:	31 ca                	xor    %ecx,%edx
 8059342:	21 c2                	and    %eax,%edx
 8059344:	31 ca                	xor    %ecx,%edx
 8059346:	01 f2                	add    %esi,%edx
      OP (C, D, A, B, 17, 0xa8304613);
 8059348:	8b 77 18             	mov    0x18(%edi),%esi
      OP (A, B, C, D, 7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
      OP (B, C, D, A, 22, 0xc1bdceee);
      OP (A, B, C, D, 7, 0xf57c0faf);
      OP (D, A, B, C, 12, 0x4787c62a);
 805934b:	c1 c2 0c             	rol    $0xc,%edx
 805934e:	01 c2                	add    %eax,%edx
 8059350:	89 74 24 18          	mov    %esi,0x18(%esp)
 8059354:	8d b4 31 13 46 30 a8 	lea    -0x57cfb9ed(%ecx,%esi,1),%esi
      OP (C, D, A, B, 17, 0xa8304613);
 805935b:	89 c1                	mov    %eax,%ecx
 805935d:	31 d9                	xor    %ebx,%ecx
 805935f:	21 d1                	and    %edx,%ecx
 8059361:	31 d9                	xor    %ebx,%ecx
 8059363:	01 f1                	add    %esi,%ecx
      OP (B, C, D, A, 22, 0xfd469501);
 8059365:	8b 77 1c             	mov    0x1c(%edi),%esi
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
      OP (B, C, D, A, 22, 0xc1bdceee);
      OP (A, B, C, D, 7, 0xf57c0faf);
      OP (D, A, B, C, 12, 0x4787c62a);
      OP (C, D, A, B, 17, 0xa8304613);
 8059368:	c1 c9 0f             	ror    $0xf,%ecx
 805936b:	01 d1                	add    %edx,%ecx
 805936d:	89 74 24 1c          	mov    %esi,0x1c(%esp)
 8059371:	8d b4 33 01 95 46 fd 	lea    -0x2b96aff(%ebx,%esi,1),%esi
      OP (B, C, D, A, 22, 0xfd469501);
 8059378:	89 d3                	mov    %edx,%ebx
 805937a:	31 c3                	xor    %eax,%ebx
 805937c:	21 cb                	and    %ecx,%ebx
 805937e:	31 c3                	xor    %eax,%ebx
 8059380:	01 f3                	add    %esi,%ebx
      OP (A, B, C, D, 7, 0x698098d8);
 8059382:	8b 77 20             	mov    0x20(%edi),%esi
      OP (C, D, A, B, 17, 0x242070db);
      OP (B, C, D, A, 22, 0xc1bdceee);
      OP (A, B, C, D, 7, 0xf57c0faf);
      OP (D, A, B, C, 12, 0x4787c62a);
      OP (C, D, A, B, 17, 0xa8304613);
      OP (B, C, D, A, 22, 0xfd469501);
 8059385:	c1 cb 0a             	ror    $0xa,%ebx
 8059388:	01 cb                	add    %ecx,%ebx
 805938a:	89 74 24 20          	mov    %esi,0x20(%esp)
 805938e:	8d b4 30 d8 98 80 69 	lea    0x698098d8(%eax,%esi,1),%esi
      OP (A, B, C, D, 7, 0x698098d8);
 8059395:	89 c8                	mov    %ecx,%eax
 8059397:	31 d0                	xor    %edx,%eax
 8059399:	21 d8                	and    %ebx,%eax
 805939b:	31 d0                	xor    %edx,%eax
 805939d:	01 f0                	add    %esi,%eax
      OP (D, A, B, C, 12, 0x8b44f7af);
 805939f:	8b 77 24             	mov    0x24(%edi),%esi
      OP (B, C, D, A, 22, 0xc1bdceee);
      OP (A, B, C, D, 7, 0xf57c0faf);
      OP (D, A, B, C, 12, 0x4787c62a);
      OP (C, D, A, B, 17, 0xa8304613);
      OP (B, C, D, A, 22, 0xfd469501);
      OP (A, B, C, D, 7, 0x698098d8);
 80593a2:	c1 c0 07             	rol    $0x7,%eax
 80593a5:	01 d8                	add    %ebx,%eax
 80593a7:	89 74 24 24          	mov    %esi,0x24(%esp)
 80593ab:	8d b4 32 af f7 44 8b 	lea    -0x74bb0851(%edx,%esi,1),%esi
      OP (D, A, B, C, 12, 0x8b44f7af);
 80593b2:	89 da                	mov    %ebx,%edx
 80593b4:	31 ca                	xor    %ecx,%edx
 80593b6:	21 c2                	and    %eax,%edx
 80593b8:	31 ca                	xor    %ecx,%edx
 80593ba:	01 f2                	add    %esi,%edx
      OP (C, D, A, B, 17, 0xffff5bb1);
 80593bc:	8b 77 28             	mov    0x28(%edi),%esi
      OP (A, B, C, D, 7, 0xf57c0faf);
      OP (D, A, B, C, 12, 0x4787c62a);
      OP (C, D, A, B, 17, 0xa8304613);
      OP (B, C, D, A, 22, 0xfd469501);
      OP (A, B, C, D, 7, 0x698098d8);
      OP (D, A, B, C, 12, 0x8b44f7af);
 80593bf:	c1 c2 0c             	rol    $0xc,%edx
 80593c2:	01 c2                	add    %eax,%edx
 80593c4:	89 74 24 28          	mov    %esi,0x28(%esp)
 80593c8:	8d b4 31 b1 5b ff ff 	lea    -0xa44f(%ecx,%esi,1),%esi
      OP (C, D, A, B, 17, 0xffff5bb1);
 80593cf:	89 c1                	mov    %eax,%ecx
 80593d1:	31 d9                	xor    %ebx,%ecx
 80593d3:	21 d1                	and    %edx,%ecx
 80593d5:	31 d9                	xor    %ebx,%ecx
 80593d7:	01 f1                	add    %esi,%ecx
      OP (B, C, D, A, 22, 0x895cd7be);
 80593d9:	8b 77 2c             	mov    0x2c(%edi),%esi
      OP (D, A, B, C, 12, 0x4787c62a);
      OP (C, D, A, B, 17, 0xa8304613);
      OP (B, C, D, A, 22, 0xfd469501);
      OP (A, B, C, D, 7, 0x698098d8);
      OP (D, A, B, C, 12, 0x8b44f7af);
      OP (C, D, A, B, 17, 0xffff5bb1);
 80593dc:	c1 c9 0f             	ror    $0xf,%ecx
 80593df:	01 d1                	add    %edx,%ecx
 80593e1:	89 74 24 2c          	mov    %esi,0x2c(%esp)
 80593e5:	8d b4 33 be d7 5c 89 	lea    -0x76a32842(%ebx,%esi,1),%esi
      OP (B, C, D, A, 22, 0x895cd7be);
 80593ec:	89 d3                	mov    %edx,%ebx
 80593ee:	31 c3                	xor    %eax,%ebx
 80593f0:	83 c7 40             	add    $0x40,%edi
 80593f3:	21 cb                	and    %ecx,%ebx
 80593f5:	31 c3                	xor    %eax,%ebx
 80593f7:	01 f3                	add    %esi,%ebx
      OP (A, B, C, D, 7, 0x6b901122);
 80593f9:	8b 77 f0             	mov    -0x10(%edi),%esi
      OP (C, D, A, B, 17, 0xa8304613);
      OP (B, C, D, A, 22, 0xfd469501);
      OP (A, B, C, D, 7, 0x698098d8);
      OP (D, A, B, C, 12, 0x8b44f7af);
      OP (C, D, A, B, 17, 0xffff5bb1);
      OP (B, C, D, A, 22, 0x895cd7be);
 80593fc:	c1 cb 0a             	ror    $0xa,%ebx
 80593ff:	01 cb                	add    %ecx,%ebx
 8059401:	89 74 24 30          	mov    %esi,0x30(%esp)
 8059405:	8d b4 30 22 11 90 6b 	lea    0x6b901122(%eax,%esi,1),%esi
      OP (A, B, C, D, 7, 0x6b901122);
 805940c:	89 c8                	mov    %ecx,%eax
 805940e:	31 d0                	xor    %edx,%eax
 8059410:	21 d8                	and    %ebx,%eax
 8059412:	31 d0                	xor    %edx,%eax
 8059414:	01 f0                	add    %esi,%eax
      OP (D, A, B, C, 12, 0xfd987193);
 8059416:	8b 77 f4             	mov    -0xc(%edi),%esi
      OP (B, C, D, A, 22, 0xfd469501);
      OP (A, B, C, D, 7, 0x698098d8);
      OP (D, A, B, C, 12, 0x8b44f7af);
      OP (C, D, A, B, 17, 0xffff5bb1);
      OP (B, C, D, A, 22, 0x895cd7be);
      OP (A, B, C, D, 7, 0x6b901122);
 8059419:	c1 c0 07             	rol    $0x7,%eax
 805941c:	01 d8                	add    %ebx,%eax
 805941e:	89 74 24 34          	mov    %esi,0x34(%esp)
 8059422:	8d b4 32 93 71 98 fd 	lea    -0x2678e6d(%edx,%esi,1),%esi
      OP (D, A, B, C, 12, 0xfd987193);
 8059429:	89 da                	mov    %ebx,%edx
 805942b:	31 ca                	xor    %ecx,%edx
 805942d:	21 c2                	and    %eax,%edx
 805942f:	31 ca                	xor    %ecx,%edx
 8059431:	01 f2                	add    %esi,%edx
      OP (C, D, A, B, 17, 0xa679438e);
 8059433:	8b 77 f8             	mov    -0x8(%edi),%esi
      OP (A, B, C, D, 7, 0x698098d8);
      OP (D, A, B, C, 12, 0x8b44f7af);
      OP (C, D, A, B, 17, 0xffff5bb1);
      OP (B, C, D, A, 22, 0x895cd7be);
      OP (A, B, C, D, 7, 0x6b901122);
      OP (D, A, B, C, 12, 0xfd987193);
 8059436:	c1 c2 0c             	rol    $0xc,%edx
 8059439:	01 c2                	add    %eax,%edx
 805943b:	89 74 24 38          	mov    %esi,0x38(%esp)
 805943f:	8d b4 31 8e 43 79 a6 	lea    -0x5986bc72(%ecx,%esi,1),%esi
      OP (C, D, A, B, 17, 0xa679438e);
 8059446:	89 c1                	mov    %eax,%ecx
 8059448:	31 d9                	xor    %ebx,%ecx
 805944a:	21 d1                	and    %edx,%ecx
 805944c:	31 d9                	xor    %ebx,%ecx
 805944e:	01 f1                	add    %esi,%ecx
      OP (B, C, D, A, 22, 0x49b40821);
 8059450:	8b 77 fc             	mov    -0x4(%edi),%esi
      OP (D, A, B, C, 12, 0x8b44f7af);
      OP (C, D, A, B, 17, 0xffff5bb1);
      OP (B, C, D, A, 22, 0x895cd7be);
      OP (A, B, C, D, 7, 0x6b901122);
      OP (D, A, B, C, 12, 0xfd987193);
      OP (C, D, A, B, 17, 0xa679438e);
 8059453:	c1 c9 0f             	ror    $0xf,%ecx
 8059456:	01 d1                	add    %edx,%ecx
 8059458:	89 74 24 3c          	mov    %esi,0x3c(%esp)
 805945c:	8d b4 33 21 08 b4 49 	lea    0x49b40821(%ebx,%esi,1),%esi
      OP (B, C, D, A, 22, 0x49b40821);
 8059463:	89 d3                	mov    %edx,%ebx
 8059465:	31 c3                	xor    %eax,%ebx
 8059467:	21 cb                	and    %ecx,%ebx
 8059469:	31 c3                	xor    %eax,%ebx
 805946b:	01 f3                	add    %esi,%ebx
 805946d:	8b 74 24 08          	mov    0x8(%esp),%esi
 8059471:	c1 cb 0a             	ror    $0xa,%ebx
 8059474:	01 cb                	add    %ecx,%ebx
 8059476:	8d b4 06 62 25 1e f6 	lea    -0x9e1da9e(%esi,%eax,1),%esi
          a += b;                                                       \
        }                                                               \
      while (0)

      /* Round 2.  */
      OP (FG, A, B, C, D, 1, 5, 0xf61e2562);
 805947d:	89 d8                	mov    %ebx,%eax
 805947f:	31 c8                	xor    %ecx,%eax
 8059481:	21 d0                	and    %edx,%eax
 8059483:	31 c8                	xor    %ecx,%eax
 8059485:	01 f0                	add    %esi,%eax
 8059487:	8b 74 24 18          	mov    0x18(%esp),%esi
 805948b:	c1 c0 05             	rol    $0x5,%eax
 805948e:	01 d8                	add    %ebx,%eax
 8059490:	8d b4 16 40 b3 40 c0 	lea    -0x3fbf4cc0(%esi,%edx,1),%esi
      OP (FG, D, A, B, C, 6, 9, 0xc040b340);
 8059497:	89 c2                	mov    %eax,%edx
 8059499:	31 da                	xor    %ebx,%edx
 805949b:	21 ca                	and    %ecx,%edx
 805949d:	31 da                	xor    %ebx,%edx
 805949f:	01 f2                	add    %esi,%edx
 80594a1:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 80594a5:	c1 c2 09             	rol    $0x9,%edx
 80594a8:	01 c2                	add    %eax,%edx
 80594aa:	8d b4 0e 51 5a 5e 26 	lea    0x265e5a51(%esi,%ecx,1),%esi
      OP (FG, C, D, A, B, 11, 14, 0x265e5a51);
 80594b1:	89 d1                	mov    %edx,%ecx
 80594b3:	31 c1                	xor    %eax,%ecx
 80594b5:	21 d9                	and    %ebx,%ecx
 80594b7:	31 c1                	xor    %eax,%ecx
 80594b9:	01 f1                	add    %esi,%ecx
 80594bb:	8b 74 24 04          	mov    0x4(%esp),%esi
 80594bf:	c1 c1 0e             	rol    $0xe,%ecx
 80594c2:	01 d1                	add    %edx,%ecx
 80594c4:	8d b4 1e aa c7 b6 e9 	lea    -0x16493856(%esi,%ebx,1),%esi
      OP (FG, B, C, D, A, 0, 20, 0xe9b6c7aa);
 80594cb:	89 cb                	mov    %ecx,%ebx
 80594cd:	31 d3                	xor    %edx,%ebx
 80594cf:	21 c3                	and    %eax,%ebx
 80594d1:	31 d3                	xor    %edx,%ebx
 80594d3:	01 f3                	add    %esi,%ebx
 80594d5:	8d b4 05 5d 10 2f d6 	lea    -0x29d0efa3(%ebp,%eax,1),%esi
 80594dc:	c1 cb 0c             	ror    $0xc,%ebx
 80594df:	01 cb                	add    %ecx,%ebx
      OP (FG, A, B, C, D, 5, 5, 0xd62f105d);
 80594e1:	89 d8                	mov    %ebx,%eax
 80594e3:	31 c8                	xor    %ecx,%eax
 80594e5:	21 d0                	and    %edx,%eax
 80594e7:	31 c8                	xor    %ecx,%eax
 80594e9:	01 f0                	add    %esi,%eax
 80594eb:	8b 74 24 28          	mov    0x28(%esp),%esi
 80594ef:	c1 c0 05             	rol    $0x5,%eax
 80594f2:	01 d8                	add    %ebx,%eax
 80594f4:	8d b4 16 53 14 44 02 	lea    0x2441453(%esi,%edx,1),%esi
      OP (FG, D, A, B, C, 10, 9, 0x02441453);
 80594fb:	89 c2                	mov    %eax,%edx
 80594fd:	31 da                	xor    %ebx,%edx
 80594ff:	21 ca                	and    %ecx,%edx
 8059501:	31 da                	xor    %ebx,%edx
 8059503:	01 f2                	add    %esi,%edx
 8059505:	8b 74 24 3c          	mov    0x3c(%esp),%esi
 8059509:	c1 c2 09             	rol    $0x9,%edx
 805950c:	01 c2                	add    %eax,%edx
 805950e:	8d b4 0e 81 e6 a1 d8 	lea    -0x275e197f(%esi,%ecx,1),%esi
      OP (FG, C, D, A, B, 15, 14, 0xd8a1e681);
 8059515:	89 d1                	mov    %edx,%ecx
 8059517:	31 c1                	xor    %eax,%ecx
 8059519:	21 d9                	and    %ebx,%ecx
 805951b:	31 c1                	xor    %eax,%ecx
 805951d:	01 f1                	add    %esi,%ecx
 805951f:	8b 74 24 14          	mov    0x14(%esp),%esi
 8059523:	c1 c1 0e             	rol    $0xe,%ecx
 8059526:	01 d1                	add    %edx,%ecx
 8059528:	8d b4 1e c8 fb d3 e7 	lea    -0x182c0438(%esi,%ebx,1),%esi
      OP (FG, B, C, D, A, 4, 20, 0xe7d3fbc8);
 805952f:	89 cb                	mov    %ecx,%ebx
 8059531:	31 d3                	xor    %edx,%ebx
 8059533:	21 c3                	and    %eax,%ebx
 8059535:	31 d3                	xor    %edx,%ebx
 8059537:	01 f3                	add    %esi,%ebx
 8059539:	8b 74 24 24          	mov    0x24(%esp),%esi
 805953d:	c1 cb 0c             	ror    $0xc,%ebx
 8059540:	01 cb                	add    %ecx,%ebx
 8059542:	8d b4 06 e6 cd e1 21 	lea    0x21e1cde6(%esi,%eax,1),%esi
      OP (FG, A, B, C, D, 9, 5, 0x21e1cde6);
 8059549:	89 d8                	mov    %ebx,%eax
 805954b:	31 c8                	xor    %ecx,%eax
 805954d:	21 d0                	and    %edx,%eax
 805954f:	31 c8                	xor    %ecx,%eax
 8059551:	01 f0                	add    %esi,%eax
 8059553:	8b 74 24 38          	mov    0x38(%esp),%esi
 8059557:	c1 c0 05             	rol    $0x5,%eax
 805955a:	01 d8                	add    %ebx,%eax
 805955c:	8d b4 16 d6 07 37 c3 	lea    -0x3cc8f82a(%esi,%edx,1),%esi
      OP (FG, D, A, B, C, 14, 9, 0xc33707d6);
 8059563:	89 c2                	mov    %eax,%edx
 8059565:	31 da                	xor    %ebx,%edx
 8059567:	21 ca                	and    %ecx,%edx
 8059569:	31 da                	xor    %ebx,%edx
 805956b:	01 f2                	add    %esi,%edx
 805956d:	8b 74 24 10          	mov    0x10(%esp),%esi
 8059571:	c1 c2 09             	rol    $0x9,%edx
 8059574:	01 c2                	add    %eax,%edx
 8059576:	8d b4 0e 87 0d d5 f4 	lea    -0xb2af279(%esi,%ecx,1),%esi
      OP (FG, C, D, A, B, 3, 14, 0xf4d50d87);
 805957d:	89 d1                	mov    %edx,%ecx
 805957f:	31 c1                	xor    %eax,%ecx
 8059581:	21 d9                	and    %ebx,%ecx
 8059583:	31 c1                	xor    %eax,%ecx
 8059585:	01 f1                	add    %esi,%ecx
 8059587:	8b 74 24 20          	mov    0x20(%esp),%esi
 805958b:	c1 c1 0e             	rol    $0xe,%ecx
 805958e:	01 d1                	add    %edx,%ecx
 8059590:	8d 9c 1e ed 14 5a 45 	lea    0x455a14ed(%esi,%ebx,1),%ebx
      OP (FG, B, C, D, A, 8, 20, 0x455a14ed);
 8059597:	89 ce                	mov    %ecx,%esi
 8059599:	31 d6                	xor    %edx,%esi
 805959b:	21 c6                	and    %eax,%esi
 805959d:	31 d6                	xor    %edx,%esi
 805959f:	01 de                	add    %ebx,%esi
 80595a1:	8b 5c 24 34          	mov    0x34(%esp),%ebx
 80595a5:	c1 ce 0c             	ror    $0xc,%esi
 80595a8:	01 ce                	add    %ecx,%esi
 80595aa:	8d 9c 03 05 e9 e3 a9 	lea    -0x561c16fb(%ebx,%eax,1),%ebx
      OP (FG, A, B, C, D, 13, 5, 0xa9e3e905);
 80595b1:	89 f0                	mov    %esi,%eax
 80595b3:	31 c8                	xor    %ecx,%eax
 80595b5:	21 d0                	and    %edx,%eax
 80595b7:	31 c8                	xor    %ecx,%eax
 80595b9:	01 d8                	add    %ebx,%eax
 80595bb:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
 80595bf:	c1 c0 05             	rol    $0x5,%eax
 80595c2:	01 f0                	add    %esi,%eax
 80595c4:	8d 9c 13 f8 a3 ef fc 	lea    -0x3105c08(%ebx,%edx,1),%ebx
      OP (FG, D, A, B, C, 2, 9, 0xfcefa3f8);
 80595cb:	89 c2                	mov    %eax,%edx
 80595cd:	31 f2                	xor    %esi,%edx
 80595cf:	21 ca                	and    %ecx,%edx
 80595d1:	31 f2                	xor    %esi,%edx
 80595d3:	01 da                	add    %ebx,%edx
 80595d5:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 80595d9:	c1 c2 09             	rol    $0x9,%edx
 80595dc:	01 c2                	add    %eax,%edx
 80595de:	8d 8c 0b d9 02 6f 67 	lea    0x676f02d9(%ebx,%ecx,1),%ecx
      OP (FG, C, D, A, B, 7, 14, 0x676f02d9);
 80595e5:	89 d3                	mov    %edx,%ebx
 80595e7:	31 c3                	xor    %eax,%ebx
 80595e9:	21 f3                	and    %esi,%ebx
 80595eb:	31 c3                	xor    %eax,%ebx
 80595ed:	01 cb                	add    %ecx,%ebx
 80595ef:	c1 c3 0e             	rol    $0xe,%ebx
 80595f2:	01 d3                	add    %edx,%ebx
      OP (FG, B, C, D, A, 12, 20, 0x8d2a4c8a);
 80595f4:	89 d9                	mov    %ebx,%ecx
 80595f6:	31 d1                	xor    %edx,%ecx
 80595f8:	89 4c 24 48          	mov    %ecx,0x48(%esp)
 80595fc:	8b 4c 24 30          	mov    0x30(%esp),%ecx
 8059600:	8d b4 31 8a 4c 2a 8d 	lea    -0x72d5b376(%ecx,%esi,1),%esi
 8059607:	8b 4c 24 48          	mov    0x48(%esp),%ecx
 805960b:	89 74 24 50          	mov    %esi,0x50(%esp)
 805960f:	21 c1                	and    %eax,%ecx
 8059611:	8d 84 05 42 39 fa ff 	lea    -0x5c6be(%ebp,%eax,1),%eax
 8059618:	89 ce                	mov    %ecx,%esi

      /* Round 3.  */
      OP (FH, A, B, C, D, 5, 4, 0xfffa3942);
 805961a:	8b 4c 24 48          	mov    0x48(%esp),%ecx
      OP (FG, C, D, A, B, 3, 14, 0xf4d50d87);
      OP (FG, B, C, D, A, 8, 20, 0x455a14ed);
      OP (FG, A, B, C, D, 13, 5, 0xa9e3e905);
      OP (FG, D, A, B, C, 2, 9, 0xfcefa3f8);
      OP (FG, C, D, A, B, 7, 14, 0x676f02d9);
      OP (FG, B, C, D, A, 12, 20, 0x8d2a4c8a);
 805961e:	31 d6                	xor    %edx,%esi
 8059620:	03 74 24 50          	add    0x50(%esp),%esi
 8059624:	c1 ce 0c             	ror    $0xc,%esi
 8059627:	01 de                	add    %ebx,%esi

      /* Round 3.  */
      OP (FH, A, B, C, D, 5, 4, 0xfffa3942);
 8059629:	31 f1                	xor    %esi,%ecx
 805962b:	01 c1                	add    %eax,%ecx
 805962d:	8b 44 24 20          	mov    0x20(%esp),%eax
 8059631:	c1 c1 04             	rol    $0x4,%ecx
 8059634:	01 f1                	add    %esi,%ecx
 8059636:	8d 94 10 81 f6 71 87 	lea    -0x788e097f(%eax,%edx,1),%edx
 805963d:	89 f0                	mov    %esi,%eax
 805963f:	31 d8                	xor    %ebx,%eax
      OP (FH, D, A, B, C, 8, 11, 0x8771f681);
 8059641:	31 c8                	xor    %ecx,%eax
 8059643:	01 d0                	add    %edx,%eax
 8059645:	8b 54 24 2c          	mov    0x2c(%esp),%edx
 8059649:	c1 c0 0b             	rol    $0xb,%eax
 805964c:	01 c8                	add    %ecx,%eax
 805964e:	8d 9c 1a 22 61 9d 6d 	lea    0x6d9d6122(%edx,%ebx,1),%ebx
 8059655:	89 ca                	mov    %ecx,%edx
 8059657:	31 f2                	xor    %esi,%edx
      OP (FH, C, D, A, B, 11, 16, 0x6d9d6122);
 8059659:	31 c2                	xor    %eax,%edx
 805965b:	01 da                	add    %ebx,%edx
 805965d:	8b 5c 24 38          	mov    0x38(%esp),%ebx
 8059661:	c1 c2 10             	rol    $0x10,%edx
 8059664:	01 c2                	add    %eax,%edx
 8059666:	8d b4 33 0c 38 e5 fd 	lea    -0x21ac7f4(%ebx,%esi,1),%esi
 805966d:	89 c3                	mov    %eax,%ebx
 805966f:	31 cb                	xor    %ecx,%ebx
      OP (FH, B, C, D, A, 14, 23, 0xfde5380c);
 8059671:	31 d3                	xor    %edx,%ebx
 8059673:	01 f3                	add    %esi,%ebx
 8059675:	8b 74 24 08          	mov    0x8(%esp),%esi
 8059679:	c1 cb 09             	ror    $0x9,%ebx
 805967c:	01 d3                	add    %edx,%ebx
 805967e:	8d b4 0e 44 ea be a4 	lea    -0x5b4115bc(%esi,%ecx,1),%esi
 8059685:	89 d1                	mov    %edx,%ecx
 8059687:	31 c1                	xor    %eax,%ecx
      OP (FH, A, B, C, D, 1, 4, 0xa4beea44);
 8059689:	31 d9                	xor    %ebx,%ecx
 805968b:	01 f1                	add    %esi,%ecx
 805968d:	8b 74 24 14          	mov    0x14(%esp),%esi
 8059691:	c1 c1 04             	rol    $0x4,%ecx
 8059694:	01 d9                	add    %ebx,%ecx
 8059696:	8d b4 06 a9 cf de 4b 	lea    0x4bdecfa9(%esi,%eax,1),%esi
 805969d:	89 d8                	mov    %ebx,%eax
 805969f:	31 d0                	xor    %edx,%eax
      OP (FH, D, A, B, C, 4, 11, 0x4bdecfa9);
 80596a1:	31 c8                	xor    %ecx,%eax
 80596a3:	01 f0                	add    %esi,%eax
 80596a5:	8b 74 24 1c          	mov    0x1c(%esp),%esi
 80596a9:	c1 c0 0b             	rol    $0xb,%eax
 80596ac:	01 c8                	add    %ecx,%eax
 80596ae:	8d 94 16 60 4b bb f6 	lea    -0x944b4a0(%esi,%edx,1),%edx
 80596b5:	89 ce                	mov    %ecx,%esi
 80596b7:	31 de                	xor    %ebx,%esi
      OP (FH, C, D, A, B, 7, 16, 0xf6bb4b60);
 80596b9:	31 c6                	xor    %eax,%esi
 80596bb:	01 d6                	add    %edx,%esi
 80596bd:	8b 54 24 28          	mov    0x28(%esp),%edx
 80596c1:	c1 c6 10             	rol    $0x10,%esi
 80596c4:	01 c6                	add    %eax,%esi
 80596c6:	8d 94 1a 70 bc bf be 	lea    -0x41404390(%edx,%ebx,1),%edx
 80596cd:	89 c3                	mov    %eax,%ebx
 80596cf:	31 cb                	xor    %ecx,%ebx
      OP (FH, B, C, D, A, 10, 23, 0xbebfbc70);
 80596d1:	31 f3                	xor    %esi,%ebx
 80596d3:	01 d3                	add    %edx,%ebx
 80596d5:	8b 54 24 34          	mov    0x34(%esp),%edx
 80596d9:	c1 cb 09             	ror    $0x9,%ebx
 80596dc:	01 f3                	add    %esi,%ebx
 80596de:	8d 8c 0a c6 7e 9b 28 	lea    0x289b7ec6(%edx,%ecx,1),%ecx
 80596e5:	89 f2                	mov    %esi,%edx
 80596e7:	31 c2                	xor    %eax,%edx
      OP (FH, A, B, C, D, 13, 4, 0x289b7ec6);
 80596e9:	31 da                	xor    %ebx,%edx
 80596eb:	01 ca                	add    %ecx,%edx
 80596ed:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 80596f1:	c1 c2 04             	rol    $0x4,%edx
 80596f4:	01 da                	add    %ebx,%edx
 80596f6:	8d 84 01 fa 27 a1 ea 	lea    -0x155ed806(%ecx,%eax,1),%eax
 80596fd:	89 d9                	mov    %ebx,%ecx
 80596ff:	31 f1                	xor    %esi,%ecx
      OP (FH, D, A, B, C, 0, 11, 0xeaa127fa);
 8059701:	31 d1                	xor    %edx,%ecx
 8059703:	01 c1                	add    %eax,%ecx
 8059705:	8b 44 24 10          	mov    0x10(%esp),%eax
 8059709:	c1 c1 0b             	rol    $0xb,%ecx
 805970c:	01 d1                	add    %edx,%ecx
 805970e:	8d 84 30 85 30 ef d4 	lea    -0x2b10cf7b(%eax,%esi,1),%eax
 8059715:	89 d6                	mov    %edx,%esi
 8059717:	31 de                	xor    %ebx,%esi
      OP (FH, C, D, A, B, 3, 16, 0xd4ef3085);
 8059719:	31 ce                	xor    %ecx,%esi
 805971b:	01 c6                	add    %eax,%esi
 805971d:	8b 44 24 18          	mov    0x18(%esp),%eax
 8059721:	c1 c6 10             	rol    $0x10,%esi
 8059724:	01 ce                	add    %ecx,%esi
 8059726:	8d 9c 18 05 1d 88 04 	lea    0x4881d05(%eax,%ebx,1),%ebx
 805972d:	89 c8                	mov    %ecx,%eax
 805972f:	31 d0                	xor    %edx,%eax
      OP (FH, B, C, D, A, 6, 23, 0x04881d05);
 8059731:	31 f0                	xor    %esi,%eax
 8059733:	01 d8                	add    %ebx,%eax
 8059735:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 8059739:	c1 c8 09             	ror    $0x9,%eax
 805973c:	01 f0                	add    %esi,%eax
 805973e:	8d 94 13 39 d0 d4 d9 	lea    -0x262b2fc7(%ebx,%edx,1),%edx
 8059745:	89 f3                	mov    %esi,%ebx
 8059747:	31 cb                	xor    %ecx,%ebx
      OP (FH, A, B, C, D, 9, 4, 0xd9d4d039);
 8059749:	31 c3                	xor    %eax,%ebx
 805974b:	01 d3                	add    %edx,%ebx
 805974d:	8b 54 24 30          	mov    0x30(%esp),%edx
 8059751:	c1 c3 04             	rol    $0x4,%ebx
 8059754:	01 c3                	add    %eax,%ebx
 8059756:	8d 94 0a e5 99 db e6 	lea    -0x1924661b(%edx,%ecx,1),%edx
 805975d:	89 c1                	mov    %eax,%ecx
 805975f:	31 f1                	xor    %esi,%ecx
      OP (FH, D, A, B, C, 12, 11, 0xe6db99e5);
 8059761:	31 d9                	xor    %ebx,%ecx
 8059763:	01 d1                	add    %edx,%ecx
 8059765:	8b 54 24 3c          	mov    0x3c(%esp),%edx
 8059769:	c1 c1 0b             	rol    $0xb,%ecx
 805976c:	01 d9                	add    %ebx,%ecx
 805976e:	8d b4 32 f8 7c a2 1f 	lea    0x1fa27cf8(%edx,%esi,1),%esi
 8059775:	89 da                	mov    %ebx,%edx
 8059777:	31 c2                	xor    %eax,%edx
      OP (FH, C, D, A, B, 15, 16, 0x1fa27cf8);
 8059779:	31 ca                	xor    %ecx,%edx
 805977b:	01 f2                	add    %esi,%edx
 805977d:	8b 74 24 0c          	mov    0xc(%esp),%esi
 8059781:	c1 c2 10             	rol    $0x10,%edx
 8059784:	01 ca                	add    %ecx,%edx
 8059786:	8d 84 06 65 56 ac c4 	lea    -0x3b53a99b(%esi,%eax,1),%eax
 805978d:	89 ce                	mov    %ecx,%esi
 805978f:	31 de                	xor    %ebx,%esi
      OP (FH, B, C, D, A, 2, 23, 0xc4ac5665);
 8059791:	31 d6                	xor    %edx,%esi
 8059793:	01 c6                	add    %eax,%esi
 8059795:	8b 44 24 04          	mov    0x4(%esp),%eax
 8059799:	c1 ce 09             	ror    $0x9,%esi
 805979c:	01 d6                	add    %edx,%esi
 805979e:	8d 84 18 44 22 29 f4 	lea    -0xbd6ddbc(%eax,%ebx,1),%eax

      /* Round 4.  */
      OP (FI, A, B, C, D, 0, 6, 0xf4292244);
 80597a5:	89 cb                	mov    %ecx,%ebx
 80597a7:	8d ac 35 39 a0 93 fc 	lea    -0x36c5fc7(%ebp,%esi,1),%ebp
 80597ae:	f7 d3                	not    %ebx
 80597b0:	09 f3                	or     %esi,%ebx
 80597b2:	31 d3                	xor    %edx,%ebx
 80597b4:	01 c3                	add    %eax,%ebx
 80597b6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80597ba:	c1 c3 06             	rol    $0x6,%ebx
 80597bd:	01 f3                	add    %esi,%ebx
 80597bf:	8d 8c 08 97 ff 2a 43 	lea    0x432aff97(%eax,%ecx,1),%ecx
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
 80597c6:	89 d0                	mov    %edx,%eax
 80597c8:	f7 d0                	not    %eax
 80597ca:	09 d8                	or     %ebx,%eax
 80597cc:	31 f0                	xor    %esi,%eax
 80597ce:	01 c8                	add    %ecx,%eax
 80597d0:	8b 4c 24 38          	mov    0x38(%esp),%ecx
 80597d4:	c1 c0 0a             	rol    $0xa,%eax
 80597d7:	01 d8                	add    %ebx,%eax
 80597d9:	8d 94 11 a7 23 94 ab 	lea    -0x546bdc59(%ecx,%edx,1),%edx
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
 80597e0:	89 f1                	mov    %esi,%ecx
 80597e2:	8b 74 24 30          	mov    0x30(%esp),%esi
 80597e6:	f7 d1                	not    %ecx
 80597e8:	09 c1                	or     %eax,%ecx
 80597ea:	31 d9                	xor    %ebx,%ecx
 80597ec:	01 d1                	add    %edx,%ecx
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
 80597ee:	89 da                	mov    %ebx,%edx
      OP (FH, B, C, D, A, 2, 23, 0xc4ac5665);

      /* Round 4.  */
      OP (FI, A, B, C, D, 0, 6, 0xf4292244);
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
 80597f0:	c1 c1 0f             	rol    $0xf,%ecx
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
 80597f3:	f7 d2                	not    %edx
      OP (FH, B, C, D, A, 2, 23, 0xc4ac5665);

      /* Round 4.  */
      OP (FI, A, B, C, D, 0, 6, 0xf4292244);
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
 80597f5:	01 c1                	add    %eax,%ecx
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
 80597f7:	09 ca                	or     %ecx,%edx
 80597f9:	31 c2                	xor    %eax,%edx
 80597fb:	01 ea                	add    %ebp,%edx
 80597fd:	8d ac 1e c3 59 5b 65 	lea    0x655b59c3(%esi,%ebx,1),%ebp
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
 8059804:	89 c3                	mov    %eax,%ebx

      /* Round 4.  */
      OP (FI, A, B, C, D, 0, 6, 0xf4292244);
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
 8059806:	c1 ca 0b             	ror    $0xb,%edx
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
 8059809:	f7 d3                	not    %ebx
 805980b:	8b 74 24 10          	mov    0x10(%esp),%esi

      /* Round 4.  */
      OP (FI, A, B, C, D, 0, 6, 0xf4292244);
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
 805980f:	01 ca                	add    %ecx,%edx
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
 8059811:	09 d3                	or     %edx,%ebx
 8059813:	31 cb                	xor    %ecx,%ebx
 8059815:	01 eb                	add    %ebp,%ebx
 8059817:	8d ac 06 92 cc 0c 8f 	lea    -0x70f3336e(%esi,%eax,1),%ebp
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
 805981e:	89 c8                	mov    %ecx,%eax
      /* Round 4.  */
      OP (FI, A, B, C, D, 0, 6, 0xf4292244);
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
 8059820:	c1 c3 06             	rol    $0x6,%ebx
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
 8059823:	f7 d0                	not    %eax
 8059825:	8b 74 24 28          	mov    0x28(%esp),%esi
      /* Round 4.  */
      OP (FI, A, B, C, D, 0, 6, 0xf4292244);
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
 8059829:	01 d3                	add    %edx,%ebx
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
 805982b:	09 d8                	or     %ebx,%eax
 805982d:	31 d0                	xor    %edx,%eax
 805982f:	01 e8                	add    %ebp,%eax
 8059831:	8d ac 0e 7d f4 ef ff 	lea    -0x100b83(%esi,%ecx,1),%ebp
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
 8059838:	89 d1                	mov    %edx,%ecx
      OP (FI, A, B, C, D, 0, 6, 0xf4292244);
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
 805983a:	c1 c0 0a             	rol    $0xa,%eax
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
 805983d:	f7 d1                	not    %ecx
 805983f:	8b 74 24 08          	mov    0x8(%esp),%esi
      OP (FI, A, B, C, D, 0, 6, 0xf4292244);
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
 8059843:	01 d8                	add    %ebx,%eax
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
 8059845:	09 c1                	or     %eax,%ecx
 8059847:	31 d9                	xor    %ebx,%ecx
 8059849:	8d 94 16 d1 5d 84 85 	lea    -0x7a7ba22f(%esi,%edx,1),%edx
 8059850:	01 e9                	add    %ebp,%ecx
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
 8059852:	89 dd                	mov    %ebx,%ebp
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
 8059854:	c1 c1 0f             	rol    $0xf,%ecx
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
 8059857:	f7 d5                	not    %ebp
      OP (FI, D, A, B, C, 7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
 8059859:	01 c1                	add    %eax,%ecx
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
 805985b:	89 ee                	mov    %ebp,%esi
 805985d:	8b 6c 24 3c          	mov    0x3c(%esp),%ebp
 8059861:	09 ce                	or     %ecx,%esi
 8059863:	31 c6                	xor    %eax,%esi
 8059865:	01 d6                	add    %edx,%esi
 8059867:	8b 54 24 20          	mov    0x20(%esp),%edx
 805986b:	c1 ce 0b             	ror    $0xb,%esi
 805986e:	01 ce                	add    %ecx,%esi
 8059870:	8d 9c 1a 4f 7e a8 6f 	lea    0x6fa87e4f(%edx,%ebx,1),%ebx
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
 8059877:	89 c2                	mov    %eax,%edx
 8059879:	8d 84 05 e0 e6 2c fe 	lea    -0x1d31920(%ebp,%eax,1),%eax
 8059880:	f7 d2                	not    %edx
 8059882:	8b 6c 24 18          	mov    0x18(%esp),%ebp
 8059886:	09 f2                	or     %esi,%edx
 8059888:	31 ca                	xor    %ecx,%edx
 805988a:	01 da                	add    %ebx,%edx
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
 805988c:	89 cb                	mov    %ecx,%ebx
 805988e:	8d 8c 0d 14 43 01 a3 	lea    -0x5cfebcec(%ebp,%ecx,1),%ecx
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
 8059895:	c1 c2 06             	rol    $0x6,%edx
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
 8059898:	f7 d3                	not    %ebx
 805989a:	8b 6c 24 34          	mov    0x34(%esp),%ebp
      OP (FI, B, C, D, A, 5, 21, 0xfc93a039);
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
 805989e:	01 f2                	add    %esi,%edx
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
 80598a0:	09 d3                	or     %edx,%ebx
 80598a2:	31 f3                	xor    %esi,%ebx
 80598a4:	01 c3                	add    %eax,%ebx
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
 80598a6:	89 f0                	mov    %esi,%eax
 80598a8:	8d b4 35 a1 11 08 4e 	lea    0x4e0811a1(%ebp,%esi,1),%esi
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
 80598af:	c1 c3 0a             	rol    $0xa,%ebx
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
 80598b2:	f7 d0                	not    %eax
 80598b4:	8b 6c 24 14          	mov    0x14(%esp),%ebp
      OP (FI, A, B, C, D, 12, 6, 0x655b59c3);
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
 80598b8:	01 d3                	add    %edx,%ebx
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
 80598ba:	09 d8                	or     %ebx,%eax
 80598bc:	31 d0                	xor    %edx,%eax
 80598be:	01 c8                	add    %ecx,%eax
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
 80598c0:	89 d1                	mov    %edx,%ecx
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
 80598c2:	c1 c0 0f             	rol    $0xf,%eax
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
 80598c5:	f7 d1                	not    %ecx
      OP (FI, D, A, B, C, 3, 10, 0x8f0ccc92);
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
 80598c7:	01 d8                	add    %ebx,%eax
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
 80598c9:	09 c1                	or     %eax,%ecx
 80598cb:	31 d9                	xor    %ebx,%ecx
 80598cd:	01 f1                	add    %esi,%ecx
 80598cf:	8d b4 15 82 7e 53 f7 	lea    -0x8ac817e(%ebp,%edx,1),%esi
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
 80598d6:	89 da                	mov    %ebx,%edx
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
 80598d8:	c1 c9 0b             	ror    $0xb,%ecx
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
 80598db:	f7 d2                	not    %edx
 80598dd:	8b 6c 24 2c          	mov    0x2c(%esp),%ebp
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
 80598e1:	01 c1                	add    %eax,%ecx
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
 80598e3:	09 ca                	or     %ecx,%edx
 80598e5:	31 c2                	xor    %eax,%edx
 80598e7:	01 f2                	add    %esi,%edx
 80598e9:	8d b4 1d 35 f2 3a bd 	lea    -0x42c50dcb(%ebp,%ebx,1),%esi
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
 80598f0:	89 c3                	mov    %eax,%ebx
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
 80598f2:	c1 c2 06             	rol    $0x6,%edx
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
 80598f5:	f7 d3                	not    %ebx
 80598f7:	8b 6c 24 0c          	mov    0xc(%esp),%ebp
      OP (FI, B, C, D, A, 1, 21, 0x85845dd1);
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
 80598fb:	01 ca                	add    %ecx,%edx
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
      OP (FI, C, D, A, B, 2, 15, 0x2ad7d2bb);
      OP (FI, B, C, D, A, 9, 21, 0xeb86d391);

      /* Add the starting values of the context.  */
      A += A_save;
 80598fd:	01 54 24 4c          	add    %edx,0x4c(%esp)
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
 8059901:	09 d3                	or     %edx,%ebx
 8059903:	31 cb                	xor    %ecx,%ebx
 8059905:	01 f3                	add    %esi,%ebx
 8059907:	8d b4 05 bb d2 d7 2a 	lea    0x2ad7d2bb(%ebp,%eax,1),%esi
      OP (FI, C, D, A, B, 2, 15, 0x2ad7d2bb);
 805990e:	89 c8                	mov    %ecx,%eax
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
 8059910:	c1 c3 0a             	rol    $0xa,%ebx
      OP (FI, C, D, A, B, 2, 15, 0x2ad7d2bb);
 8059913:	f7 d0                	not    %eax
 8059915:	8b 6c 24 24          	mov    0x24(%esp),%ebp
      OP (FI, A, B, C, D, 8, 6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
 8059919:	01 d3                	add    %edx,%ebx

      /* Add the starting values of the context.  */
      A += A_save;
      B += B_save;
      C += C_save;
      D += D_save;
 805991b:	01 5c 24 44          	add    %ebx,0x44(%esp)
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
      OP (FI, C, D, A, B, 2, 15, 0x2ad7d2bb);
 805991f:	09 d8                	or     %ebx,%eax
 8059921:	31 d0                	xor    %edx,%eax
 8059923:	01 f0                	add    %esi,%eax
 8059925:	8d b4 0d 91 d3 86 eb 	lea    -0x14792c6f(%ebp,%ecx,1),%esi
      OP (FI, B, C, D, A, 9, 21, 0xeb86d391);
 805992c:	89 d1                	mov    %edx,%ecx
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
      OP (FI, C, D, A, B, 2, 15, 0x2ad7d2bb);
 805992e:	c1 c0 0f             	rol    $0xf,%eax
      OP (FI, B, C, D, A, 9, 21, 0xeb86d391);
 8059931:	f7 d1                	not    %ecx
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
      OP (FI, C, D, A, B, 2, 15, 0x2ad7d2bb);
 8059933:	01 d8                	add    %ebx,%eax
      OP (FI, B, C, D, A, 9, 21, 0xeb86d391);

      /* Add the starting values of the context.  */
      A += A_save;
      B += B_save;
      C += C_save;
 8059935:	01 44 24 40          	add    %eax,0x40(%esp)
      OP (FI, C, D, A, B, 6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D, 4, 6, 0xf7537e82);
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
      OP (FI, C, D, A, B, 2, 15, 0x2ad7d2bb);
      OP (FI, B, C, D, A, 9, 21, 0xeb86d391);
 8059939:	09 c1                	or     %eax,%ecx
 805993b:	31 d9                	xor    %ebx,%ecx
 805993d:	01 f1                	add    %esi,%ecx
 805993f:	c1 c9 0b             	ror    $0xb,%ecx
 8059942:	01 c1                	add    %eax,%ecx

      /* Add the starting values of the context.  */
      A += A_save;
      B += B_save;
 8059944:	01 0c 24             	add    %ecx,(%esp)
  ctx->total[0] += lolen;
  ctx->total[1] += (len >> 31 >> 1) + (ctx->total[0] < lolen);

  /* Process all bytes in the buffer with 64 bytes in each round of
     the loop.  */
  while (words < endp)
 8059947:	39 7c 24 54          	cmp    %edi,0x54(%esp)
 805994b:	0f 87 3f f9 ff ff    	ja     8059290 <md5_process_block+0xd0>
 8059951:	8d 76 00             	lea    0x0(%esi),%esi
 8059954:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059958:	89 3c 24             	mov    %edi,(%esp)
 805995b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805995f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059963:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059967:	b9 3e 58 00 00       	mov    $0x583e,%ecx
 805996c:	e8 f7 13 00 00       	call   805ad68 <__afl_maybe_log>
 8059971:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059975:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059979:	8b 54 24 04          	mov    0x4(%esp),%edx
 805997d:	8b 3c 24             	mov    (%esp),%edi
 8059980:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059984:	8b 0c 24             	mov    (%esp),%ecx
 8059987:	90                   	nop
      C += C_save;
      D += D_save;
    }

  /* Put checksum in context given as argument.  */
  ctx->A = A;
 8059988:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805998c:	89 3c 24             	mov    %edi,(%esp)
 805998f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059993:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059997:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805999b:	b9 ff 28 00 00       	mov    $0x28ff,%ecx
 80599a0:	e8 c3 13 00 00       	call   805ad68 <__afl_maybe_log>
 80599a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80599a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80599ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80599b1:	8b 3c 24             	mov    (%esp),%edi
 80599b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80599b8:	8b 54 24 74          	mov    0x74(%esp),%edx
 80599bc:	8b 7c 24 4c          	mov    0x4c(%esp),%edi
  ctx->B = B;
  ctx->C = C;
  ctx->D = D;
 80599c0:	8b 6c 24 44          	mov    0x44(%esp),%ebp
    }

  /* Put checksum in context given as argument.  */
  ctx->A = A;
  ctx->B = B;
  ctx->C = C;
 80599c4:	8b 44 24 40          	mov    0x40(%esp),%eax
      C += C_save;
      D += D_save;
    }

  /* Put checksum in context given as argument.  */
  ctx->A = A;
 80599c8:	89 3a                	mov    %edi,(%edx)
  ctx->B = B;
 80599ca:	89 4a 04             	mov    %ecx,0x4(%edx)
  ctx->C = C;
 80599cd:	89 42 08             	mov    %eax,0x8(%edx)
  ctx->D = D;
 80599d0:	89 6a 0c             	mov    %ebp,0xc(%edx)
}
 80599d3:	83 c4 58             	add    $0x58,%esp
 80599d6:	5b                   	pop    %ebx
 80599d7:	5e                   	pop    %esi
 80599d8:	5f                   	pop    %edi
 80599d9:	5d                   	pop    %ebp
 80599da:	c3                   	ret    
 80599db:	90                   	nop
 80599dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

080599e0 <md5_finish_ctx>:

/* Process the remaining bytes in the internal buffer and the usual
   prolog according to the standard and write the result to RESBUF.  */
void *
md5_finish_ctx (struct md5_ctx *ctx, void *resbuf)
{
 80599e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80599e4:	89 3c 24             	mov    %edi,(%esp)
 80599e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80599eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80599ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80599f3:	b9 7f 02 00 00       	mov    $0x27f,%ecx
 80599f8:	e8 6b 13 00 00       	call   805ad68 <__afl_maybe_log>
 80599fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059a01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059a05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059a09:	8b 3c 24             	mov    (%esp),%edi
 8059a0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059a10:	55                   	push   %ebp
 8059a11:	57                   	push   %edi
 8059a12:	56                   	push   %esi
 8059a13:	53                   	push   %ebx
 8059a14:	83 ec 1c             	sub    $0x1c,%esp
 8059a17:	8b 5c 24 30          	mov    0x30(%esp),%ebx
 8059a1b:	8b 44 24 34          	mov    0x34(%esp),%eax
  /* Take yet unprocessed bytes into account.  */
  uint32_t bytes = ctx->buflen;
 8059a1f:	8b 73 18             	mov    0x18(%ebx),%esi

/* Process the remaining bytes in the internal buffer and the usual
   prolog according to the standard and write the result to RESBUF.  */
void *
md5_finish_ctx (struct md5_ctx *ctx, void *resbuf)
{
 8059a22:	89 44 24 04          	mov    %eax,0x4(%esp)
  /* Take yet unprocessed bytes into account.  */
  uint32_t bytes = ctx->buflen;
  size_t size = (bytes < 56) ? 64 / 4 : 64 * 2 / 4;

  /* Now count remaining bytes.  */
  ctx->total[0] += bytes;
 8059a26:	8b 43 10             	mov    0x10(%ebx),%eax
void *
md5_finish_ctx (struct md5_ctx *ctx, void *resbuf)
{
  /* Take yet unprocessed bytes into account.  */
  uint32_t bytes = ctx->buflen;
  size_t size = (bytes < 56) ? 64 / 4 : 64 * 2 / 4;
 8059a29:	83 fe 38             	cmp    $0x38,%esi
 8059a2c:	19 d2                	sbb    %edx,%edx

  /* Now count remaining bytes.  */
  ctx->total[0] += bytes;
 8059a2e:	01 f0                	add    %esi,%eax
void *
md5_finish_ctx (struct md5_ctx *ctx, void *resbuf)
{
  /* Take yet unprocessed bytes into account.  */
  uint32_t bytes = ctx->buflen;
  size_t size = (bytes < 56) ? 64 / 4 : 64 * 2 / 4;
 8059a30:	89 d1                	mov    %edx,%ecx
 8059a32:	83 e2 f0             	and    $0xfffffff0,%edx

  /* Now count remaining bytes.  */
  ctx->total[0] += bytes;
 8059a35:	89 43 10             	mov    %eax,0x10(%ebx)
void *
md5_finish_ctx (struct md5_ctx *ctx, void *resbuf)
{
  /* Take yet unprocessed bytes into account.  */
  uint32_t bytes = ctx->buflen;
  size_t size = (bytes < 56) ? 64 / 4 : 64 * 2 / 4;
 8059a38:	83 e1 c0             	and    $0xffffffc0,%ecx
 8059a3b:	8d b9 80 00 00 00    	lea    0x80(%ecx),%edi
 8059a41:	8d 69 78             	lea    0x78(%ecx),%ebp

  /* Now count remaining bytes.  */
  ctx->total[0] += bytes;
  if (ctx->total[0] < bytes)
    ++ctx->total[1];
 8059a44:	8b 4b 14             	mov    0x14(%ebx),%ecx
void *
md5_finish_ctx (struct md5_ctx *ctx, void *resbuf)
{
  /* Take yet unprocessed bytes into account.  */
  uint32_t bytes = ctx->buflen;
  size_t size = (bytes < 56) ? 64 / 4 : 64 * 2 / 4;
 8059a47:	89 7c 24 08          	mov    %edi,0x8(%esp)
 8059a4b:	8d 7a 1f             	lea    0x1f(%edx),%edi
 8059a4e:	83 c2 1e             	add    $0x1e,%edx

  /* Now count remaining bytes.  */
  ctx->total[0] += bytes;
  if (ctx->total[0] < bytes)
 8059a51:	39 c6                	cmp    %eax,%esi
void *
md5_finish_ctx (struct md5_ctx *ctx, void *resbuf)
{
  /* Take yet unprocessed bytes into account.  */
  uint32_t bytes = ctx->buflen;
  size_t size = (bytes < 56) ? 64 / 4 : 64 * 2 / 4;
 8059a53:	89 6c 24 0c          	mov    %ebp,0xc(%esp)

  /* Now count remaining bytes.  */
  ctx->total[0] += bytes;
  if (ctx->total[0] < bytes)
 8059a57:	76 39                	jbe    8059a92 <md5_finish_ctx+0xb2>
 8059a59:	8d 76 00             	lea    0x0(%esi),%esi
 8059a5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059a60:	89 3c 24             	mov    %edi,(%esp)
 8059a63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059a67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059a6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059a6f:	b9 4a c6 00 00       	mov    $0xc64a,%ecx
 8059a74:	e8 ef 12 00 00       	call   805ad68 <__afl_maybe_log>
 8059a79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059a7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059a81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059a85:	8b 3c 24             	mov    (%esp),%edi
 8059a88:	8d 64 24 10          	lea    0x10(%esp),%esp
    ++ctx->total[1];
 8059a8c:	83 c1 01             	add    $0x1,%ecx
 8059a8f:	89 4b 14             	mov    %ecx,0x14(%ebx)
 8059a92:	66 90                	xchg   %ax,%ax

  /* Put the 64-bit file length in *bits* at the end of the buffer.  */
  ctx->buffer[size - 2] = SWAP (ctx->total[0] << 3);
 8059a94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059a98:	89 3c 24             	mov    %edi,(%esp)
 8059a9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059a9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059aa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059aa7:	b9 45 86 00 00       	mov    $0x8645,%ecx
 8059aac:	e8 b7 12 00 00       	call   805ad68 <__afl_maybe_log>
 8059ab1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ab5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ab9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059abd:	8b 3c 24             	mov    (%esp),%edi
 8059ac0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059ac4:	8d 2c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebp
  ctx->buffer[size - 1] = SWAP ((ctx->total[1] << 3) | (ctx->total[0] >> 29));
 8059acb:	c1 e1 03             	shl    $0x3,%ecx
 8059ace:	c1 e8 1d             	shr    $0x1d,%eax

  memcpy (&((char *) ctx->buffer)[bytes], fillbuf, (size - 2) * 4 - bytes+(lava_get(347))*(0x6c617506==(lava_get(347))||0x675616c==(lava_get(347))));
 8059ad1:	83 ec 0c             	sub    $0xc,%esp
  if (ctx->total[0] < bytes)
    ++ctx->total[1];

  /* Put the 64-bit file length in *bits* at the end of the buffer.  */
  ctx->buffer[size - 2] = SWAP (ctx->total[0] << 3);
  ctx->buffer[size - 1] = SWAP ((ctx->total[1] << 3) | (ctx->total[0] >> 29));
 8059ad4:	09 c1                	or     %eax,%ecx
  ctx->total[0] += bytes;
  if (ctx->total[0] < bytes)
    ++ctx->total[1];

  /* Put the 64-bit file length in *bits* at the end of the buffer.  */
  ctx->buffer[size - 2] = SWAP (ctx->total[0] << 3);
 8059ad6:	89 6c 93 1c          	mov    %ebp,0x1c(%ebx,%edx,4)
  ctx->buffer[size - 1] = SWAP ((ctx->total[1] << 3) | (ctx->total[0] >> 29));
 8059ada:	89 4c bb 1c          	mov    %ecx,0x1c(%ebx,%edi,4)

  memcpy (&((char *) ctx->buffer)[bytes], fillbuf, (size - 2) * 4 - bytes+(lava_get(347))*(0x6c617506==(lava_get(347))||0x675616c==(lava_get(347))));
 8059ade:	68 5b 01 00 00       	push   $0x15b
 8059ae3:	e8 78 d1 ff ff       	call   8056c60 <lava_get>
 8059ae8:	c7 04 24 5b 01 00 00 	movl   $0x15b,(%esp)
 8059aef:	89 c7                	mov    %eax,%edi
 8059af1:	e8 6a d1 ff ff       	call   8056c60 <lava_get>
 8059af6:	83 c4 10             	add    $0x10,%esp
 8059af9:	3d 06 75 61 6c       	cmp    $0x6c617506,%eax
 8059afe:	ba 01 00 00 00       	mov    $0x1,%edx
 8059b03:	74 4d                	je     8059b52 <md5_finish_ctx+0x172>
 8059b05:	8d 76 00             	lea    0x0(%esi),%esi
 8059b08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059b0c:	89 3c 24             	mov    %edi,(%esp)
 8059b0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059b13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059b17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059b1b:	b9 30 0e 00 00       	mov    $0xe30,%ecx
 8059b20:	e8 43 12 00 00       	call   805ad68 <__afl_maybe_log>
 8059b25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059b29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059b2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059b31:	8b 3c 24             	mov    (%esp),%edi
 8059b34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059b38:	83 ec 0c             	sub    $0xc,%esp
 8059b3b:	68 5b 01 00 00       	push   $0x15b
 8059b40:	e8 1b d1 ff ff       	call   8056c60 <lava_get>
 8059b45:	31 d2                	xor    %edx,%edx
 8059b47:	83 c4 10             	add    $0x10,%esp
 8059b4a:	3d 6c 61 75 06       	cmp    $0x675616c,%eax
 8059b4f:	0f 94 c2             	sete   %dl
 8059b52:	66 90                	xchg   %ax,%ax
 8059b54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059b58:	89 3c 24             	mov    %edi,(%esp)
 8059b5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059b5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059b63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059b67:	b9 1e 3b 00 00       	mov    $0x3b1e,%ecx
 8059b6c:	e8 f7 11 00 00       	call   805ad68 <__afl_maybe_log>
 8059b71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059b75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059b79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059b7d:	8b 3c 24             	mov    (%esp),%edi
 8059b80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059b84:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8059b88:	8d 6b 1c             	lea    0x1c(%ebx),%ebp
 8059b8b:	83 ec 04             	sub    $0x4,%esp
 8059b8e:	0f af fa             	imul   %edx,%edi
 8059b91:	8d 44 35 00          	lea    0x0(%ebp,%esi,1),%eax
 8059b95:	29 f1                	sub    %esi,%ecx
 8059b97:	01 f9                	add    %edi,%ecx
 8059b99:	51                   	push   %ecx
 8059b9a:	68 80 7c 06 08       	push   $0x8067c80
 8059b9f:	50                   	push   %eax
 8059ba0:	e8 cb f5 fe ff       	call   8049170 <memcpy@plt>

  /* Process last bytes.  */
  md5_process_block (ctx->buffer, size * 4, ctx);
 8059ba5:	83 c4 0c             	add    $0xc,%esp
 8059ba8:	53                   	push   %ebx
 8059ba9:	ff 74 24 10          	pushl  0x10(%esp)
 8059bad:	55                   	push   %ebp
 8059bae:	e8 0d f6 ff ff       	call   80591c0 <md5_process_block>

  return md5_read_ctx (ctx+(lava_get(353))*(0x6c617500==(lava_get(353))||0x75616c==(lava_get(353))), resbuf);
 8059bb3:	c7 04 24 61 01 00 00 	movl   $0x161,(%esp)
 8059bba:	e8 a1 d0 ff ff       	call   8056c60 <lava_get>
 8059bbf:	c7 04 24 61 01 00 00 	movl   $0x161,(%esp)
 8059bc6:	89 c6                	mov    %eax,%esi
 8059bc8:	e8 93 d0 ff ff       	call   8056c60 <lava_get>
 8059bcd:	83 c4 10             	add    $0x10,%esp
 8059bd0:	3d 00 75 61 6c       	cmp    $0x6c617500,%eax
 8059bd5:	ba 01 00 00 00       	mov    $0x1,%edx
 8059bda:	74 4a                	je     8059c26 <md5_finish_ctx+0x246>
 8059bdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059be0:	89 3c 24             	mov    %edi,(%esp)
 8059be3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059be7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059beb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059bef:	b9 89 73 00 00       	mov    $0x7389,%ecx
 8059bf4:	e8 6f 11 00 00       	call   805ad68 <__afl_maybe_log>
 8059bf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059bfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059c01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059c05:	8b 3c 24             	mov    (%esp),%edi
 8059c08:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059c0c:	83 ec 0c             	sub    $0xc,%esp
 8059c0f:	68 61 01 00 00       	push   $0x161
 8059c14:	e8 47 d0 ff ff       	call   8056c60 <lava_get>
 8059c19:	31 d2                	xor    %edx,%edx
 8059c1b:	83 c4 10             	add    $0x10,%esp
 8059c1e:	3d 6c 61 75 00       	cmp    $0x75616c,%eax
 8059c23:	0f 94 c2             	sete   %dl
 8059c26:	66 90                	xchg   %ax,%ax
 8059c28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059c2c:	89 3c 24             	mov    %edi,(%esp)
 8059c2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059c33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059c37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059c3b:	b9 33 a5 00 00       	mov    $0xa533,%ecx
 8059c40:	e8 23 11 00 00       	call   805ad68 <__afl_maybe_log>
 8059c45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059c49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059c4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059c51:	8b 3c 24             	mov    (%esp),%edi
 8059c54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059c58:	69 ee 9c 00 00 00    	imul   $0x9c,%esi,%ebp
 8059c5e:	8b 7c 24 04          	mov    0x4(%esp),%edi
 8059c62:	0f af d5             	imul   %ebp,%edx
 8059c65:	89 7c 24 34          	mov    %edi,0x34(%esp)
 8059c69:	01 d3                	add    %edx,%ebx
 8059c6b:	89 5c 24 30          	mov    %ebx,0x30(%esp)
}
 8059c6f:	83 c4 1c             	add    $0x1c,%esp
 8059c72:	5b                   	pop    %ebx
 8059c73:	5e                   	pop    %esi
 8059c74:	5f                   	pop    %edi
 8059c75:	5d                   	pop    %ebp
  memcpy (&((char *) ctx->buffer)[bytes], fillbuf, (size - 2) * 4 - bytes+(lava_get(347))*(0x6c617506==(lava_get(347))||0x675616c==(lava_get(347))));

  /* Process last bytes.  */
  md5_process_block (ctx->buffer, size * 4, ctx);

  return md5_read_ctx (ctx+(lava_get(353))*(0x6c617500==(lava_get(353))||0x75616c==(lava_get(353))), resbuf);
 8059c76:	e9 15 f2 ff ff       	jmp    8058e90 <md5_read_ctx>
 8059c7b:	90                   	nop
 8059c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08059c80 <md5_process_bytes>:
}


void
md5_process_bytes (const void *buffer, size_t len, struct md5_ctx *ctx)
{
 8059c80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059c84:	89 3c 24             	mov    %edi,(%esp)
 8059c87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059c8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059c8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059c93:	b9 29 86 00 00       	mov    $0x8629,%ecx
 8059c98:	e8 cb 10 00 00       	call   805ad68 <__afl_maybe_log>
 8059c9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ca1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ca5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059ca9:	8b 3c 24             	mov    (%esp),%edi
 8059cac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059cb0:	55                   	push   %ebp
 8059cb1:	89 e5                	mov    %esp,%ebp
 8059cb3:	57                   	push   %edi
 8059cb4:	56                   	push   %esi
 8059cb5:	53                   	push   %ebx
 8059cb6:	83 ec 1c             	sub    $0x1c,%esp
 8059cb9:	8b 5d 10             	mov    0x10(%ebp),%ebx
  /* When we already have some bits in our internal buffer concatenate
     both inputs first.  */
  if (ctx->buflen != 0)
 8059cbc:	8b 7b 18             	mov    0x18(%ebx),%edi
 8059cbf:	85 ff                	test   %edi,%edi
 8059cc1:	0f 85 01 04 00 00    	jne    805a0c8 <md5_process_bytes+0x448>
 8059cc7:	90                   	nop
 8059cc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059ccc:	89 3c 24             	mov    %edi,(%esp)
 8059ccf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059cd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059cd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059cdb:	b9 f1 f2 00 00       	mov    $0xf2f1,%ecx
 8059ce0:	e8 83 10 00 00       	call   805ad68 <__afl_maybe_log>
 8059ce5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ce9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ced:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059cf1:	8b 3c 24             	mov    (%esp),%edi
 8059cf4:	8d 64 24 10          	lea    0x10(%esp),%esp
      buffer = (const char *) buffer + add;
      len -= add;
    }

  /* Process available complete blocks.  */
  if (len >= 64)
 8059cf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059cfc:	89 3c 24             	mov    %edi,(%esp)
 8059cff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059d03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059d07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059d0b:	b9 04 a5 00 00       	mov    $0xa504,%ecx
 8059d10:	e8 53 10 00 00       	call   805ad68 <__afl_maybe_log>
 8059d15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059d19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059d1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059d21:	8b 3c 24             	mov    (%esp),%edi
 8059d24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059d28:	83 7d 0c 3f          	cmpl   $0x3f,0xc(%ebp)
 8059d2c:	0f 86 1b 03 00 00    	jbe    805a04d <md5_process_bytes+0x3cd>
 8059d32:	66 90                	xchg   %ax,%ax
 8059d34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059d38:	89 3c 24             	mov    %edi,(%esp)
 8059d3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059d3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059d43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059d47:	b9 c2 40 00 00       	mov    $0x40c2,%ecx
 8059d4c:	e8 17 10 00 00       	call   805ad68 <__afl_maybe_log>
 8059d51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059d55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059d59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059d5d:	8b 3c 24             	mov    (%esp),%edi
 8059d60:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
#if !_STRING_ARCH_unaligned
# define UNALIGNED_P(p) ((uintptr_t) (p) % alignof (uint32_t) != 0)
      if (UNALIGNED_P (buffer))
 8059d64:	f6 45 08 03          	testb  $0x3,0x8(%ebp)
 8059d68:	0f 84 c2 02 00 00    	je     805a030 <md5_process_bytes+0x3b0>
 8059d6e:	66 90                	xchg   %ax,%ax
 8059d70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059d74:	89 3c 24             	mov    %edi,(%esp)
 8059d77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059d7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059d7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059d83:	b9 66 21 00 00       	mov    $0x2166,%ecx
 8059d88:	e8 db 0f 00 00       	call   805ad68 <__afl_maybe_log>
 8059d8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059d91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059d95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059d99:	8b 3c 24             	mov    (%esp),%edi
 8059d9c:	8d 64 24 10          	lea    0x10(%esp),%esp
        while (len > 64)
 8059da0:	83 7d 0c 40          	cmpl   $0x40,0xc(%ebp)
 8059da4:	8d 73 1c             	lea    0x1c(%ebx),%esi
 8059da7:	0f 84 10 01 00 00    	je     8059ebd <md5_process_bytes+0x23d>
 8059dad:	8d 76 00             	lea    0x0(%esi),%esi
 8059db0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059db4:	89 3c 24             	mov    %edi,(%esp)
 8059db7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059dbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059dbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059dc3:	b9 3f 3c 00 00       	mov    $0x3c3f,%ecx
 8059dc8:	e8 9b 0f 00 00       	call   805ad68 <__afl_maybe_log>
 8059dcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059dd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059dd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059dd9:	8b 3c 24             	mov    (%esp),%edi
 8059ddc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059de0:	8b 55 0c             	mov    0xc(%ebp),%edx
 8059de3:	8b 7d 08             	mov    0x8(%ebp),%edi
 8059de6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
 8059de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8059df0:	8b 07                	mov    (%edi),%eax
          {
            md5_process_block (memcpy (ctx->buffer, buffer, 64), 64, ctx);
 8059df2:	83 ec 04             	sub    $0x4,%esp
            buffer = (const char *) buffer + 64;
 8059df5:	83 c7 40             	add    $0x40,%edi
 8059df8:	89 06                	mov    %eax,(%esi)
 8059dfa:	8b 4f c4             	mov    -0x3c(%edi),%ecx
 8059dfd:	89 4e 04             	mov    %ecx,0x4(%esi)
 8059e00:	8b 57 c8             	mov    -0x38(%edi),%edx
 8059e03:	89 56 08             	mov    %edx,0x8(%esi)
 8059e06:	8b 47 cc             	mov    -0x34(%edi),%eax
 8059e09:	89 46 0c             	mov    %eax,0xc(%esi)
 8059e0c:	8b 4f d0             	mov    -0x30(%edi),%ecx
 8059e0f:	89 4e 10             	mov    %ecx,0x10(%esi)
 8059e12:	8b 57 d4             	mov    -0x2c(%edi),%edx
 8059e15:	89 56 14             	mov    %edx,0x14(%esi)
 8059e18:	8b 47 d8             	mov    -0x28(%edi),%eax
 8059e1b:	89 46 18             	mov    %eax,0x18(%esi)
 8059e1e:	8b 4f dc             	mov    -0x24(%edi),%ecx
 8059e21:	89 4e 1c             	mov    %ecx,0x1c(%esi)
 8059e24:	8b 57 e0             	mov    -0x20(%edi),%edx
 8059e27:	89 56 20             	mov    %edx,0x20(%esi)
 8059e2a:	8b 47 e4             	mov    -0x1c(%edi),%eax
 8059e2d:	89 46 24             	mov    %eax,0x24(%esi)
 8059e30:	8b 4f e8             	mov    -0x18(%edi),%ecx
 8059e33:	89 4e 28             	mov    %ecx,0x28(%esi)
 8059e36:	8b 57 ec             	mov    -0x14(%edi),%edx
 8059e39:	89 56 2c             	mov    %edx,0x2c(%esi)
 8059e3c:	8b 47 f0             	mov    -0x10(%edi),%eax
 8059e3f:	89 46 30             	mov    %eax,0x30(%esi)
 8059e42:	8b 4f f4             	mov    -0xc(%edi),%ecx
 8059e45:	89 4e 34             	mov    %ecx,0x34(%esi)
 8059e48:	8b 57 f8             	mov    -0x8(%edi),%edx
 8059e4b:	89 56 38             	mov    %edx,0x38(%esi)
 8059e4e:	8b 47 fc             	mov    -0x4(%edi),%eax
 8059e51:	89 46 3c             	mov    %eax,0x3c(%esi)
#if !_STRING_ARCH_unaligned
# define UNALIGNED_P(p) ((uintptr_t) (p) % alignof (uint32_t) != 0)
      if (UNALIGNED_P (buffer))
        while (len > 64)
          {
            md5_process_block (memcpy (ctx->buffer, buffer, 64), 64, ctx);
 8059e54:	53                   	push   %ebx
 8059e55:	6a 40                	push   $0x40
 8059e57:	56                   	push   %esi
 8059e58:	e8 63 f3 ff ff       	call   80591c0 <md5_process_block>
            buffer = (const char *) buffer + 64;
            len -= 64;
 8059e5d:	83 6d e4 40          	subl   $0x40,-0x1c(%ebp)
  if (len >= 64)
    {
#if !_STRING_ARCH_unaligned
# define UNALIGNED_P(p) ((uintptr_t) (p) % alignof (uint32_t) != 0)
      if (UNALIGNED_P (buffer))
        while (len > 64)
 8059e61:	83 c4 10             	add    $0x10,%esp
          {
            md5_process_block (memcpy (ctx->buffer, buffer, 64), 64, ctx);
            buffer = (const char *) buffer + 64;
            len -= 64;
 8059e64:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  if (len >= 64)
    {
#if !_STRING_ARCH_unaligned
# define UNALIGNED_P(p) ((uintptr_t) (p) % alignof (uint32_t) != 0)
      if (UNALIGNED_P (buffer))
        while (len > 64)
 8059e67:	83 f9 40             	cmp    $0x40,%ecx
 8059e6a:	77 84                	ja     8059df0 <md5_process_bytes+0x170>
 8059e6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059e70:	89 3c 24             	mov    %edi,(%esp)
 8059e73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059e77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059e7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059e7f:	b9 25 00 00 00       	mov    $0x25,%ecx
 8059e84:	e8 df 0e 00 00       	call   805ad68 <__afl_maybe_log>
 8059e89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059e8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059e91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059e95:	8b 3c 24             	mov    (%esp),%edi
 8059e98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059e9c:	8b 7d 0c             	mov    0xc(%ebp),%edi
 8059e9f:	8b 45 0c             	mov    0xc(%ebp),%eax
 8059ea2:	83 ef 41             	sub    $0x41,%edi
 8059ea5:	c1 ef 06             	shr    $0x6,%edi
 8059ea8:	8d 57 01             	lea    0x1(%edi),%edx
 8059eab:	c1 e7 06             	shl    $0x6,%edi
 8059eae:	f7 df                	neg    %edi
 8059eb0:	c1 e2 06             	shl    $0x6,%edx
 8059eb3:	01 55 08             	add    %edx,0x8(%ebp)
 8059eb6:	8d 4c 38 c0          	lea    -0x40(%eax,%edi,1),%ecx
 8059eba:	89 4d 0c             	mov    %ecx,0xc(%ebp)
 8059ebd:	8d 76 00             	lea    0x0(%esi),%esi
  /* Move remaining bytes in internal buffer.  */
  if (len > 0)
    {
      size_t left_over = ctx->buflen;

      memcpy (&((char *) ctx->buffer)[left_over], buffer, len+(lava_get(341))*(0x6c61750c==(lava_get(341))||0xc75616c==(lava_get(341))));
 8059ec0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059ec4:	89 3c 24             	mov    %edi,(%esp)
 8059ec7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059ecb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059ecf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059ed3:	b9 71 1d 00 00       	mov    $0x1d71,%ecx
 8059ed8:	e8 8b 0e 00 00       	call   805ad68 <__afl_maybe_log>
 8059edd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ee1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ee5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059ee9:	8b 3c 24             	mov    (%esp),%edi
 8059eec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059ef0:	83 ec 0c             	sub    $0xc,%esp
    }

  /* Move remaining bytes in internal buffer.  */
  if (len > 0)
    {
      size_t left_over = ctx->buflen;
 8059ef3:	8b 7b 18             	mov    0x18(%ebx),%edi

      memcpy (&((char *) ctx->buffer)[left_over], buffer, len+(lava_get(341))*(0x6c61750c==(lava_get(341))||0xc75616c==(lava_get(341))));
 8059ef6:	68 55 01 00 00       	push   $0x155
 8059efb:	e8 60 cd ff ff       	call   8056c60 <lava_get>
 8059f00:	c7 04 24 55 01 00 00 	movl   $0x155,(%esp)
 8059f07:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8059f0a:	e8 51 cd ff ff       	call   8056c60 <lava_get>
 8059f0f:	83 c4 10             	add    $0x10,%esp
 8059f12:	3d 0c 75 61 6c       	cmp    $0x6c61750c,%eax
 8059f17:	ba 01 00 00 00       	mov    $0x1,%edx
 8059f1c:	74 4c                	je     8059f6a <md5_process_bytes+0x2ea>
 8059f1e:	66 90                	xchg   %ax,%ax
 8059f20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059f24:	89 3c 24             	mov    %edi,(%esp)
 8059f27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059f2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059f2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059f33:	b9 5f 9f 00 00       	mov    $0x9f5f,%ecx
 8059f38:	e8 2b 0e 00 00       	call   805ad68 <__afl_maybe_log>
 8059f3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059f41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059f45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059f49:	8b 3c 24             	mov    (%esp),%edi
 8059f4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059f50:	83 ec 0c             	sub    $0xc,%esp
 8059f53:	68 55 01 00 00       	push   $0x155
 8059f58:	e8 03 cd ff ff       	call   8056c60 <lava_get>
 8059f5d:	31 d2                	xor    %edx,%edx
 8059f5f:	83 c4 10             	add    $0x10,%esp
 8059f62:	3d 6c 61 75 0c       	cmp    $0xc75616c,%eax
 8059f67:	0f 94 c2             	sete   %dl
 8059f6a:	66 90                	xchg   %ax,%ax
 8059f6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059f70:	89 3c 24             	mov    %edi,(%esp)
 8059f73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059f77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059f7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059f7f:	b9 c5 f3 00 00       	mov    $0xf3c5,%ecx
 8059f84:	e8 df 0d 00 00       	call   805ad68 <__afl_maybe_log>
 8059f89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059f8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059f91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059f95:	8b 3c 24             	mov    (%esp),%edi
 8059f98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059f9c:	0f af 55 e4          	imul   -0x1c(%ebp),%edx
 8059fa0:	8d 04 3e             	lea    (%esi,%edi,1),%eax
 8059fa3:	83 ec 04             	sub    $0x4,%esp
 8059fa6:	03 55 0c             	add    0xc(%ebp),%edx
 8059fa9:	52                   	push   %edx
 8059faa:	ff 75 08             	pushl  0x8(%ebp)
 8059fad:	50                   	push   %eax
 8059fae:	e8 bd f1 fe ff       	call   8049170 <memcpy@plt>
      left_over += len;
 8059fb3:	03 7d 0c             	add    0xc(%ebp),%edi
      if (left_over >= 64)
 8059fb6:	83 c4 10             	add    $0x10,%esp
 8059fb9:	83 ff 3f             	cmp    $0x3f,%edi
 8059fbc:	0f 87 b6 01 00 00    	ja     805a178 <md5_process_bytes+0x4f8>
 8059fc2:	66 90                	xchg   %ax,%ax
 8059fc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059fc8:	89 3c 24             	mov    %edi,(%esp)
 8059fcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059fcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059fd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059fd7:	b9 d3 d5 00 00       	mov    $0xd5d3,%ecx
 8059fdc:	e8 87 0d 00 00       	call   805ad68 <__afl_maybe_log>
 8059fe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059fe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059fe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059fed:	8b 3c 24             	mov    (%esp),%edi
 8059ff0:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          md5_process_block (ctx->buffer, 64, ctx);
          left_over -= 64;
          memcpy (ctx->buffer, &ctx->buffer[16], left_over);
        }
      ctx->buflen = left_over;
 8059ff4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059ff8:	89 3c 24             	mov    %edi,(%esp)
 8059ffb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059fff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a003:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a007:	b9 dd b5 00 00       	mov    $0xb5dd,%ecx
 805a00c:	e8 57 0d 00 00       	call   805ad68 <__afl_maybe_log>
 805a011:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a015:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a019:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a01d:	8b 3c 24             	mov    (%esp),%edi
 805a020:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a024:	89 7b 18             	mov    %edi,0x18(%ebx)
    }
}
 805a027:	8d 65 f4             	lea    -0xc(%ebp),%esp
 805a02a:	5b                   	pop    %ebx
 805a02b:	5e                   	pop    %esi
 805a02c:	5f                   	pop    %edi
 805a02d:	5d                   	pop    %ebp
 805a02e:	c3                   	ret    
 805a02f:	90                   	nop
            len -= 64;
          }
      else
#endif
        {
          md5_process_block (buffer, len & ~63, ctx);
 805a030:	8b 75 0c             	mov    0xc(%ebp),%esi
 805a033:	83 ec 04             	sub    $0x4,%esp
 805a036:	53                   	push   %ebx
 805a037:	83 e6 c0             	and    $0xffffffc0,%esi
 805a03a:	56                   	push   %esi
 805a03b:	ff 75 08             	pushl  0x8(%ebp)
 805a03e:	e8 7d f1 ff ff       	call   80591c0 <md5_process_block>
          buffer = (const char *) buffer + (len & ~63);
 805a043:	01 75 08             	add    %esi,0x8(%ebp)
          len &= 63;
 805a046:	83 65 0c 3f          	andl   $0x3f,0xc(%ebp)
 805a04a:	83 c4 10             	add    $0x10,%esp
 805a04d:	8d 76 00             	lea    0x0(%esi),%esi
        }
    }

  /* Move remaining bytes in internal buffer.  */
  if (len > 0)
 805a050:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a054:	89 3c 24             	mov    %edi,(%esp)
 805a057:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a05b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a05f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a063:	b9 fc f0 00 00       	mov    $0xf0fc,%ecx
 805a068:	e8 fb 0c 00 00       	call   805ad68 <__afl_maybe_log>
 805a06d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a071:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a075:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a079:	8b 3c 24             	mov    (%esp),%edi
 805a07c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a080:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 805a083:	85 c9                	test   %ecx,%ecx
 805a085:	0f 85 b9 06 00 00    	jne    805a744 <md5_process_bytes+0xac4>
 805a08b:	90                   	nop
 805a08c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a090:	89 3c 24             	mov    %edi,(%esp)
 805a093:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a097:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a09b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a09f:	b9 c6 13 00 00       	mov    $0x13c6,%ecx
 805a0a4:	e8 bf 0c 00 00       	call   805ad68 <__afl_maybe_log>
 805a0a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a0ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a0b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a0b5:	8b 3c 24             	mov    (%esp),%edi
 805a0b8:	8d 64 24 10          	lea    0x10(%esp),%esp
          left_over -= 64;
          memcpy (ctx->buffer, &ctx->buffer[16], left_over);
        }
      ctx->buflen = left_over;
    }
}
 805a0bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
 805a0bf:	5b                   	pop    %ebx
 805a0c0:	5e                   	pop    %esi
 805a0c1:	5f                   	pop    %edi
 805a0c2:	5d                   	pop    %ebp
 805a0c3:	c3                   	ret    
 805a0c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  /* When we already have some bits in our internal buffer concatenate
     both inputs first.  */
  if (ctx->buflen != 0)
    {
      size_t left_over = ctx->buflen;
      size_t add = 128 - left_over > len ? len : 128 - left_over;
 805a0c8:	b8 80 00 00 00       	mov    $0x80,%eax

      memcpy (&((char *) ctx->buffer)[left_over], buffer, add);
 805a0cd:	8d 73 1c             	lea    0x1c(%ebx),%esi
  /* When we already have some bits in our internal buffer concatenate
     both inputs first.  */
  if (ctx->buflen != 0)
    {
      size_t left_over = ctx->buflen;
      size_t add = 128 - left_over > len ? len : 128 - left_over;
 805a0d0:	29 f8                	sub    %edi,%eax
 805a0d2:	39 45 0c             	cmp    %eax,0xc(%ebp)
 805a0d5:	0f 46 45 0c          	cmovbe 0xc(%ebp),%eax

      memcpy (&((char *) ctx->buffer)[left_over], buffer, add);
 805a0d9:	8d 0c 3e             	lea    (%esi,%edi,1),%ecx
 805a0dc:	83 ec 04             	sub    $0x4,%esp
 805a0df:	50                   	push   %eax
 805a0e0:	ff 75 08             	pushl  0x8(%ebp)
 805a0e3:	51                   	push   %ecx
 805a0e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 805a0e7:	e8 84 f0 fe ff       	call   8049170 <memcpy@plt>
      ctx->buflen += add;
 805a0ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805a0ef:	03 43 18             	add    0x18(%ebx),%eax

      if (ctx->buflen > 64)
 805a0f2:	83 c4 10             	add    $0x10,%esp
 805a0f5:	83 f8 40             	cmp    $0x40,%eax
    {
      size_t left_over = ctx->buflen;
      size_t add = 128 - left_over > len ? len : 128 - left_over;

      memcpy (&((char *) ctx->buffer)[left_over], buffer, add);
      ctx->buflen += add;
 805a0f8:	89 43 18             	mov    %eax,0x18(%ebx)

      if (ctx->buflen > 64)
 805a0fb:	0f 87 9f 00 00 00    	ja     805a1a0 <md5_process_bytes+0x520>
 805a101:	8d 76 00             	lea    0x0(%esi),%esi
 805a104:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a108:	89 3c 24             	mov    %edi,(%esp)
 805a10b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a10f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a113:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a117:	b9 ef 99 00 00       	mov    $0x99ef,%ecx
 805a11c:	e8 47 0c 00 00       	call   805ad68 <__afl_maybe_log>
 805a121:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a125:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a129:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a12d:	8b 3c 24             	mov    (%esp),%edi
 805a130:	8d 64 24 10          	lea    0x10(%esp),%esp
          memcpy (ctx->buffer,
                  &((char *) ctx->buffer)[(left_over + add) & ~63],
                  ctx->buflen);
        }

      buffer = (const char *) buffer + add;
 805a134:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a138:	89 3c 24             	mov    %edi,(%esp)
 805a13b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a13f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a143:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a147:	b9 c7 8d 00 00       	mov    $0x8dc7,%ecx
 805a14c:	e8 17 0c 00 00       	call   805ad68 <__afl_maybe_log>
 805a151:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a155:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a159:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a15d:	8b 3c 24             	mov    (%esp),%edi
 805a160:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a164:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 805a167:	01 45 08             	add    %eax,0x8(%ebp)
      len -= add;
 805a16a:	29 45 0c             	sub    %eax,0xc(%ebp)
 805a16d:	e9 86 fb ff ff       	jmp    8059cf8 <md5_process_bytes+0x78>
 805a172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

      memcpy (&((char *) ctx->buffer)[left_over], buffer, len+(lava_get(341))*(0x6c61750c==(lava_get(341))||0xc75616c==(lava_get(341))));
      left_over += len;
      if (left_over >= 64)
        {
          md5_process_block (ctx->buffer, 64, ctx);
 805a178:	83 ec 04             	sub    $0x4,%esp
          left_over -= 64;
 805a17b:	83 ef 40             	sub    $0x40,%edi

      memcpy (&((char *) ctx->buffer)[left_over], buffer, len+(lava_get(341))*(0x6c61750c==(lava_get(341))||0xc75616c==(lava_get(341))));
      left_over += len;
      if (left_over >= 64)
        {
          md5_process_block (ctx->buffer, 64, ctx);
 805a17e:	53                   	push   %ebx
 805a17f:	6a 40                	push   $0x40
 805a181:	56                   	push   %esi
 805a182:	e8 39 f0 ff ff       	call   80591c0 <md5_process_block>
 805a187:	8d 4b 5c             	lea    0x5c(%ebx),%ecx
 805a18a:	83 c4 0c             	add    $0xc,%esp
 805a18d:	57                   	push   %edi
 805a18e:	51                   	push   %ecx
 805a18f:	56                   	push   %esi
 805a190:	e8 db ef fe ff       	call   8049170 <memcpy@plt>
 805a195:	83 c4 10             	add    $0x10,%esp
 805a198:	e9 57 fe ff ff       	jmp    8059ff4 <md5_process_bytes+0x374>
 805a19d:	8d 76 00             	lea    0x0(%esi),%esi
      memcpy (&((char *) ctx->buffer)[left_over], buffer, add);
      ctx->buflen += add;

      if (ctx->buflen > 64)
        {
          md5_process_block (ctx->buffer, ctx->buflen & ~63, ctx);
 805a1a0:	83 ec 04             	sub    $0x4,%esp
 805a1a3:	83 e0 c0             	and    $0xffffffc0,%eax
 805a1a6:	53                   	push   %ebx
 805a1a7:	50                   	push   %eax
 805a1a8:	56                   	push   %esi
 805a1a9:	e8 12 f0 ff ff       	call   80591c0 <md5_process_block>

          ctx->buflen &= 63;
 805a1ae:	8b 53 18             	mov    0x18(%ebx),%edx
          /* The regions in the following copy operation cannot overlap.  */
          memcpy (ctx->buffer,
                  &((char *) ctx->buffer)[(left_over + add) & ~63],
 805a1b1:	03 7d e4             	add    -0x1c(%ebp),%edi

      if (ctx->buflen > 64)
        {
          md5_process_block (ctx->buffer, ctx->buflen & ~63, ctx);

          ctx->buflen &= 63;
 805a1b4:	89 55 e0             	mov    %edx,-0x20(%ebp)
 805a1b7:	83 e2 3f             	and    $0x3f,%edx
          /* The regions in the following copy operation cannot overlap.  */
          memcpy (ctx->buffer,
 805a1ba:	83 e7 c0             	and    $0xffffffc0,%edi
 805a1bd:	83 fa 04             	cmp    $0x4,%edx

      if (ctx->buflen > 64)
        {
          md5_process_block (ctx->buffer, ctx->buflen & ~63, ctx);

          ctx->buflen &= 63;
 805a1c0:	89 53 18             	mov    %edx,0x18(%ebx)
          /* The regions in the following copy operation cannot overlap.  */
          memcpy (ctx->buffer,
                  &((char *) ctx->buffer)[(left_over + add) & ~63],
 805a1c3:	8d 04 3e             	lea    (%esi,%edi,1),%eax
 805a1c6:	0f 82 cc 04 00 00    	jb     805a698 <md5_process_bytes+0xa18>
 805a1cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a1d0:	89 3c 24             	mov    %edi,(%esp)
 805a1d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a1d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a1db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a1df:	b9 89 ea 00 00       	mov    $0xea89,%ecx
 805a1e4:	e8 7f 0b 00 00       	call   805ad68 <__afl_maybe_log>
 805a1e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a1ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a1f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a1f5:	8b 3c 24             	mov    (%esp),%edi
 805a1f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a1fc:	8b 08                	mov    (%eax),%ecx
 805a1fe:	89 4b 1c             	mov    %ecx,0x1c(%ebx)
 805a201:	8d 4b 20             	lea    0x20(%ebx),%ecx
 805a204:	8b 7c 02 fc          	mov    -0x4(%edx,%eax,1),%edi
 805a208:	83 e1 fc             	and    $0xfffffffc,%ecx
 805a20b:	89 7c 16 fc          	mov    %edi,-0x4(%esi,%edx,1)
 805a20f:	29 ce                	sub    %ecx,%esi
 805a211:	29 f0                	sub    %esi,%eax
 805a213:	01 d6                	add    %edx,%esi
 805a215:	83 e6 fc             	and    $0xfffffffc,%esi
 805a218:	83 fe 04             	cmp    $0x4,%esi
 805a21b:	0f 82 eb 04 00 00    	jb     805a70c <md5_process_bytes+0xa8c>
 805a221:	8d 76 00             	lea    0x0(%esi),%esi
 805a224:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a228:	89 3c 24             	mov    %edi,(%esp)
 805a22b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a22f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a233:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a237:	b9 8b 09 00 00       	mov    $0x98b,%ecx
 805a23c:	e8 27 0b 00 00       	call   805ad68 <__afl_maybe_log>
 805a241:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a245:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a249:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a24d:	8b 3c 24             	mov    (%esp),%edi
 805a250:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a254:	8b 10                	mov    (%eax),%edx
 805a256:	8d 7e ff             	lea    -0x1(%esi),%edi
 805a259:	c1 ef 02             	shr    $0x2,%edi
 805a25c:	89 11                	mov    %edx,(%ecx)
 805a25e:	ba 04 00 00 00       	mov    $0x4,%edx
 805a263:	83 e7 07             	and    $0x7,%edi
 805a266:	39 f2                	cmp    %esi,%edx
 805a268:	0f 83 9e 04 00 00    	jae    805a70c <md5_process_bytes+0xa8c>
 805a26e:	66 90                	xchg   %ax,%ax
 805a270:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a274:	89 3c 24             	mov    %edi,(%esp)
 805a277:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a27b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a27f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a283:	b9 49 ab 00 00       	mov    $0xab49,%ecx
 805a288:	e8 db 0a 00 00       	call   805ad68 <__afl_maybe_log>
 805a28d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a291:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a295:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a299:	8b 3c 24             	mov    (%esp),%edi
 805a29c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a2a0:	85 ff                	test   %edi,%edi
 805a2a2:	0f 84 40 03 00 00    	je     805a5e8 <md5_process_bytes+0x968>
 805a2a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a2ac:	89 3c 24             	mov    %edi,(%esp)
 805a2af:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a2b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a2b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a2bb:	b9 fc 88 00 00       	mov    $0x88fc,%ecx
 805a2c0:	e8 a3 0a 00 00       	call   805ad68 <__afl_maybe_log>
 805a2c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a2c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a2cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a2d1:	8b 3c 24             	mov    (%esp),%edi
 805a2d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a2d8:	83 ff 01             	cmp    $0x1,%edi
 805a2db:	0f 84 90 02 00 00    	je     805a571 <md5_process_bytes+0x8f1>
 805a2e1:	8d 76 00             	lea    0x0(%esi),%esi
 805a2e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a2e8:	89 3c 24             	mov    %edi,(%esp)
 805a2eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a2ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a2f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a2f7:	b9 c8 f1 00 00       	mov    $0xf1c8,%ecx
 805a2fc:	e8 67 0a 00 00       	call   805ad68 <__afl_maybe_log>
 805a301:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a305:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a309:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a30d:	8b 3c 24             	mov    (%esp),%edi
 805a310:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a314:	83 ff 02             	cmp    $0x2,%edi
 805a317:	0f 84 18 02 00 00    	je     805a535 <md5_process_bytes+0x8b5>
 805a31d:	8d 76 00             	lea    0x0(%esi),%esi
 805a320:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a324:	89 3c 24             	mov    %edi,(%esp)
 805a327:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a32b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a32f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a333:	b9 d0 ca 00 00       	mov    $0xcad0,%ecx
 805a338:	e8 2b 0a 00 00       	call   805ad68 <__afl_maybe_log>
 805a33d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a341:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a345:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a349:	8b 3c 24             	mov    (%esp),%edi
 805a34c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a350:	83 ff 03             	cmp    $0x3,%edi
 805a353:	0f 84 a0 01 00 00    	je     805a4f9 <md5_process_bytes+0x879>
 805a359:	8d 76 00             	lea    0x0(%esi),%esi
 805a35c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a360:	89 3c 24             	mov    %edi,(%esp)
 805a363:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a367:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a36b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a36f:	b9 5e c6 00 00       	mov    $0xc65e,%ecx
 805a374:	e8 ef 09 00 00       	call   805ad68 <__afl_maybe_log>
 805a379:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a37d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a381:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a385:	8b 3c 24             	mov    (%esp),%edi
 805a388:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a38c:	83 ff 04             	cmp    $0x4,%edi
 805a38f:	0f 84 28 01 00 00    	je     805a4bd <md5_process_bytes+0x83d>
 805a395:	8d 76 00             	lea    0x0(%esi),%esi
 805a398:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a39c:	89 3c 24             	mov    %edi,(%esp)
 805a39f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a3a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a3a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a3ab:	b9 d1 f6 00 00       	mov    $0xf6d1,%ecx
 805a3b0:	e8 b3 09 00 00       	call   805ad68 <__afl_maybe_log>
 805a3b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a3b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a3bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a3c1:	8b 3c 24             	mov    (%esp),%edi
 805a3c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a3c8:	83 ff 05             	cmp    $0x5,%edi
 805a3cb:	0f 84 b0 00 00 00    	je     805a481 <md5_process_bytes+0x801>
 805a3d1:	8d 76 00             	lea    0x0(%esi),%esi
 805a3d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a3d8:	89 3c 24             	mov    %edi,(%esp)
 805a3db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a3df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a3e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a3e7:	b9 a0 38 00 00       	mov    $0x38a0,%ecx
 805a3ec:	e8 77 09 00 00       	call   805ad68 <__afl_maybe_log>
 805a3f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a3f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a3f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a3fd:	8b 3c 24             	mov    (%esp),%edi
 805a400:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a404:	83 ff 06             	cmp    $0x6,%edi
 805a407:	74 3e                	je     805a447 <md5_process_bytes+0x7c7>
 805a409:	8d 76 00             	lea    0x0(%esi),%esi
 805a40c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a410:	89 3c 24             	mov    %edi,(%esp)
 805a413:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a417:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a41b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a41f:	b9 36 80 00 00       	mov    $0x8036,%ecx
 805a424:	e8 3f 09 00 00       	call   805ad68 <__afl_maybe_log>
 805a429:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a42d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a431:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a435:	8b 3c 24             	mov    (%esp),%edi
 805a438:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a43c:	8b 78 04             	mov    0x4(%eax),%edi
 805a43f:	ba 08 00 00 00       	mov    $0x8,%edx
 805a444:	89 79 04             	mov    %edi,0x4(%ecx)
 805a447:	90                   	nop
 805a448:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a44c:	89 3c 24             	mov    %edi,(%esp)
 805a44f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a453:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a457:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a45b:	b9 aa 9d 00 00       	mov    $0x9daa,%ecx
 805a460:	e8 03 09 00 00       	call   805ad68 <__afl_maybe_log>
 805a465:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a469:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a46d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a471:	8b 3c 24             	mov    (%esp),%edi
 805a474:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a478:	8b 3c 10             	mov    (%eax,%edx,1),%edi
 805a47b:	89 3c 11             	mov    %edi,(%ecx,%edx,1)
 805a47e:	83 c2 04             	add    $0x4,%edx
 805a481:	8d 76 00             	lea    0x0(%esi),%esi
 805a484:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a488:	89 3c 24             	mov    %edi,(%esp)
 805a48b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a48f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a493:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a497:	b9 a3 ec 00 00       	mov    $0xeca3,%ecx
 805a49c:	e8 c7 08 00 00       	call   805ad68 <__afl_maybe_log>
 805a4a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a4a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a4a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a4ad:	8b 3c 24             	mov    (%esp),%edi
 805a4b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a4b4:	8b 3c 10             	mov    (%eax,%edx,1),%edi
 805a4b7:	89 3c 11             	mov    %edi,(%ecx,%edx,1)
 805a4ba:	83 c2 04             	add    $0x4,%edx
 805a4bd:	8d 76 00             	lea    0x0(%esi),%esi
 805a4c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a4c4:	89 3c 24             	mov    %edi,(%esp)
 805a4c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a4cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a4cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a4d3:	b9 ae 10 00 00       	mov    $0x10ae,%ecx
 805a4d8:	e8 8b 08 00 00       	call   805ad68 <__afl_maybe_log>
 805a4dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a4e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a4e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a4e9:	8b 3c 24             	mov    (%esp),%edi
 805a4ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a4f0:	8b 3c 10             	mov    (%eax,%edx,1),%edi
 805a4f3:	89 3c 11             	mov    %edi,(%ecx,%edx,1)
 805a4f6:	83 c2 04             	add    $0x4,%edx
 805a4f9:	8d 76 00             	lea    0x0(%esi),%esi
 805a4fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a500:	89 3c 24             	mov    %edi,(%esp)
 805a503:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a507:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a50b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a50f:	b9 59 6f 00 00       	mov    $0x6f59,%ecx
 805a514:	e8 4f 08 00 00       	call   805ad68 <__afl_maybe_log>
 805a519:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a51d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a521:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a525:	8b 3c 24             	mov    (%esp),%edi
 805a528:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a52c:	8b 3c 10             	mov    (%eax,%edx,1),%edi
 805a52f:	89 3c 11             	mov    %edi,(%ecx,%edx,1)
 805a532:	83 c2 04             	add    $0x4,%edx
 805a535:	8d 76 00             	lea    0x0(%esi),%esi
 805a538:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a53c:	89 3c 24             	mov    %edi,(%esp)
 805a53f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a543:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a547:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a54b:	b9 5a 30 00 00       	mov    $0x305a,%ecx
 805a550:	e8 13 08 00 00       	call   805ad68 <__afl_maybe_log>
 805a555:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a559:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a55d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a561:	8b 3c 24             	mov    (%esp),%edi
 805a564:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a568:	8b 3c 10             	mov    (%eax,%edx,1),%edi
 805a56b:	89 3c 11             	mov    %edi,(%ecx,%edx,1)
 805a56e:	83 c2 04             	add    $0x4,%edx
 805a571:	8d 76 00             	lea    0x0(%esi),%esi
 805a574:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a578:	89 3c 24             	mov    %edi,(%esp)
 805a57b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a57f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a583:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a587:	b9 99 86 00 00       	mov    $0x8699,%ecx
 805a58c:	e8 d7 07 00 00       	call   805ad68 <__afl_maybe_log>
 805a591:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a595:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a599:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a59d:	8b 3c 24             	mov    (%esp),%edi
 805a5a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a5a4:	8b 3c 10             	mov    (%eax,%edx,1),%edi
 805a5a7:	89 3c 11             	mov    %edi,(%ecx,%edx,1)
 805a5aa:	83 c2 04             	add    $0x4,%edx
 805a5ad:	39 f2                	cmp    %esi,%edx
 805a5af:	0f 83 57 01 00 00    	jae    805a70c <md5_process_bytes+0xa8c>
 805a5b5:	8d 76 00             	lea    0x0(%esi),%esi
 805a5b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a5bc:	89 3c 24             	mov    %edi,(%esp)
 805a5bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a5c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a5c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a5cb:	b9 82 d9 00 00       	mov    $0xd982,%ecx
 805a5d0:	e8 93 07 00 00       	call   805ad68 <__afl_maybe_log>
 805a5d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a5d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a5dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a5e1:	8b 3c 24             	mov    (%esp),%edi
 805a5e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a5e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a5ec:	89 3c 24             	mov    %edi,(%esp)
 805a5ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a5f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a5f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a5fb:	b9 ab de 00 00       	mov    $0xdeab,%ecx
 805a600:	e8 63 07 00 00       	call   805ad68 <__afl_maybe_log>
 805a605:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a609:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a60d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a611:	8b 3c 24             	mov    (%esp),%edi
 805a614:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a618:	8b 3c 10             	mov    (%eax,%edx,1),%edi
 805a61b:	89 3c 11             	mov    %edi,(%ecx,%edx,1)
 805a61e:	8b 7c 10 04          	mov    0x4(%eax,%edx,1),%edi
 805a622:	89 7c 11 04          	mov    %edi,0x4(%ecx,%edx,1)
 805a626:	8b 7c 10 08          	mov    0x8(%eax,%edx,1),%edi
 805a62a:	89 7c 11 08          	mov    %edi,0x8(%ecx,%edx,1)
 805a62e:	8b 7c 10 0c          	mov    0xc(%eax,%edx,1),%edi
 805a632:	89 7c 11 0c          	mov    %edi,0xc(%ecx,%edx,1)
 805a636:	8b 7c 10 10          	mov    0x10(%eax,%edx,1),%edi
 805a63a:	89 7c 11 10          	mov    %edi,0x10(%ecx,%edx,1)
 805a63e:	8b 7c 10 14          	mov    0x14(%eax,%edx,1),%edi
 805a642:	89 7c 11 14          	mov    %edi,0x14(%ecx,%edx,1)
 805a646:	8b 7c 10 18          	mov    0x18(%eax,%edx,1),%edi
 805a64a:	89 7c 11 18          	mov    %edi,0x18(%ecx,%edx,1)
 805a64e:	8b 7c 10 1c          	mov    0x1c(%eax,%edx,1),%edi
 805a652:	89 7c 11 1c          	mov    %edi,0x1c(%ecx,%edx,1)
 805a656:	83 c2 20             	add    $0x20,%edx
 805a659:	39 f2                	cmp    %esi,%edx
 805a65b:	72 8b                	jb     805a5e8 <md5_process_bytes+0x968>
 805a65d:	8d 76 00             	lea    0x0(%esi),%esi
 805a660:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a664:	89 3c 24             	mov    %edi,(%esp)
 805a667:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a66b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a66f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a673:	b9 8c 0b 00 00       	mov    $0xb8c,%ecx
 805a678:	e8 eb 06 00 00       	call   805ad68 <__afl_maybe_log>
 805a67d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a681:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a685:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a689:	8b 3c 24             	mov    (%esp),%edi
 805a68c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a690:	eb 7a                	jmp    805a70c <md5_process_bytes+0xa8c>
 805a692:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805a698:	85 d2                	test   %edx,%edx
 805a69a:	74 70                	je     805a70c <md5_process_bytes+0xa8c>
 805a69c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a6a0:	89 3c 24             	mov    %edi,(%esp)
 805a6a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a6a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a6ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a6af:	b9 54 fd 00 00       	mov    $0xfd54,%ecx
 805a6b4:	e8 af 06 00 00       	call   805ad68 <__afl_maybe_log>
 805a6b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a6bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a6c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a6c5:	8b 3c 24             	mov    (%esp),%edi
 805a6c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a6cc:	0f b6 08             	movzbl (%eax),%ecx
 805a6cf:	88 4b 1c             	mov    %cl,0x1c(%ebx)
 805a6d2:	f6 45 e0 02          	testb  $0x2,-0x20(%ebp)
 805a6d6:	0f 85 a0 00 00 00    	jne    805a77c <md5_process_bytes+0xafc>
 805a6dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a6e0:	89 3c 24             	mov    %edi,(%esp)
 805a6e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a6e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a6eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a6ef:	b9 0a fb 00 00       	mov    $0xfb0a,%ecx
 805a6f4:	e8 6f 06 00 00       	call   805ad68 <__afl_maybe_log>
 805a6f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a6fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a701:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a705:	8b 3c 24             	mov    (%esp),%edi
 805a708:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a70c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a710:	89 3c 24             	mov    %edi,(%esp)
 805a713:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a717:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a71b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a71f:	b9 73 d4 00 00       	mov    $0xd473,%ecx
 805a724:	e8 3f 06 00 00       	call   805ad68 <__afl_maybe_log>
 805a729:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a72d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a731:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a735:	8b 3c 24             	mov    (%esp),%edi
 805a738:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a73c:	83 c4 10             	add    $0x10,%esp
 805a73f:	e9 f0 f9 ff ff       	jmp    805a134 <md5_process_bytes+0x4b4>
 805a744:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a748:	89 3c 24             	mov    %edi,(%esp)
 805a74b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a74f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a753:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a757:	b9 4d 85 00 00       	mov    $0x854d,%ecx
 805a75c:	e8 07 06 00 00       	call   805ad68 <__afl_maybe_log>
 805a761:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a765:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a769:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a76d:	8b 3c 24             	mov    (%esp),%edi
 805a770:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a774:	8d 73 1c             	lea    0x1c(%ebx),%esi
 805a777:	e9 41 f7 ff ff       	jmp    8059ebd <md5_process_bytes+0x23d>
 805a77c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a780:	89 3c 24             	mov    %edi,(%esp)
 805a783:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a78b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a78f:	b9 40 f2 00 00       	mov    $0xf240,%ecx
 805a794:	e8 cf 05 00 00       	call   805ad68 <__afl_maybe_log>
 805a799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a79d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a7a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a7a5:	8b 3c 24             	mov    (%esp),%edi
 805a7a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a7ac:	0f b7 7c 10 fe       	movzwl -0x2(%eax,%edx,1),%edi
 805a7b1:	66 89 7c 16 fe       	mov    %di,-0x2(%esi,%edx,1)
 805a7b6:	e9 51 ff ff ff       	jmp    805a70c <md5_process_bytes+0xa8c>
 805a7bb:	90                   	nop
 805a7bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0805a7c0 <md5_buffer>:
   result is always in little endian byte order, so that a byte-wise
   output yields to the wanted ASCII representation of the message
   digest.  */
void *
md5_buffer (const char *buffer, size_t len, void *resblock)
{
 805a7c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a7c4:	89 3c 24             	mov    %edi,(%esp)
 805a7c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a7cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a7cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a7d3:	b9 fb 31 00 00       	mov    $0x31fb,%ecx
 805a7d8:	e8 8b 05 00 00       	call   805ad68 <__afl_maybe_log>
 805a7dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a7e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a7e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a7e9:	8b 3c 24             	mov    (%esp),%edi
 805a7ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a7f0:	53                   	push   %ebx
 805a7f1:	81 ec ac 00 00 00    	sub    $0xac,%esp

  /* Initialize the computation context.  */
  md5_init_ctx (&ctx);

  /* Process whole buffer but last len % 64 bytes.  */
  md5_process_bytes (buffer, len, &ctx);
 805a7f7:	8d 5c 24 08          	lea    0x8(%esp),%ebx
/* Initialize structure containing state of computation.
   (RFC 1321, 3.3: Step 3)  */
void
md5_init_ctx (struct md5_ctx *ctx)
{
  ctx->A = 0x67452301;
 805a7fb:	c7 44 24 08 01 23 45 	movl   $0x67452301,0x8(%esp)
 805a802:	67 
  ctx->B = 0xefcdab89;
 805a803:	c7 44 24 0c 89 ab cd 	movl   $0xefcdab89,0xc(%esp)
 805a80a:	ef 
  ctx->C = 0x98badcfe;
 805a80b:	c7 44 24 10 fe dc ba 	movl   $0x98badcfe,0x10(%esp)
 805a812:	98 
  ctx->D = 0x10325476;
 805a813:	c7 44 24 14 76 54 32 	movl   $0x10325476,0x14(%esp)
 805a81a:	10 

  ctx->total[0] = ctx->total[1] = 0;
 805a81b:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 805a822:	00 
 805a823:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 805a82a:	00 
  ctx->buflen = 0;
 805a82b:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%esp)
 805a832:	00 

  /* Initialize the computation context.  */
  md5_init_ctx (&ctx);

  /* Process whole buffer but last len % 64 bytes.  */
  md5_process_bytes (buffer, len, &ctx);
 805a833:	53                   	push   %ebx
 805a834:	ff b4 24 bc 00 00 00 	pushl  0xbc(%esp)
 805a83b:	ff b4 24 bc 00 00 00 	pushl  0xbc(%esp)
 805a842:	e8 39 f4 ff ff       	call   8059c80 <md5_process_bytes>

  /* Put result in desired memory area.  */
  return md5_finish_ctx (&ctx, resblock);
 805a847:	58                   	pop    %eax
 805a848:	5a                   	pop    %edx
 805a849:	ff b4 24 c0 00 00 00 	pushl  0xc0(%esp)
 805a850:	53                   	push   %ebx
 805a851:	e8 8a f1 ff ff       	call   80599e0 <md5_finish_ctx>
}
 805a856:	81 c4 b8 00 00 00    	add    $0xb8,%esp
 805a85c:	5b                   	pop    %ebx
 805a85d:	c3                   	ret    
 805a85e:	66 90                	xchg   %ax,%ax

0805a860 <md5_stream>:
/* Compute MD5 message digest for bytes read from STREAM.  The
   resulting message digest number will be written into the 16 bytes
   beginning at RESBLOCK.  */
int
md5_stream (FILE *stream, void *resblock)
{
 805a860:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a864:	89 3c 24             	mov    %edi,(%esp)
 805a867:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a86b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a86f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a873:	b9 db f0 00 00       	mov    $0xf0db,%ecx
 805a878:	e8 eb 04 00 00       	call   805ad68 <__afl_maybe_log>
 805a87d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a881:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a885:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a889:	8b 3c 24             	mov    (%esp),%edi
 805a88c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a890:	55                   	push   %ebp
 805a891:	57                   	push   %edi
 805a892:	56                   	push   %esi
 805a893:	53                   	push   %ebx
 805a894:	81 ec b8 00 00 00    	sub    $0xb8,%esp
 805a89a:	8b 9c 24 cc 00 00 00 	mov    0xcc(%esp),%ebx
  struct md5_ctx ctx;
  size_t sum;

  char *buffer = malloc (BLOCKSIZE + 72);
 805a8a1:	68 48 80 00 00       	push   $0x8048
 805a8a6:	e8 25 ea fe ff       	call   80492d0 <malloc@plt>
 805a8ab:	89 c6                	mov    %eax,%esi
  if (!buffer)
 805a8ad:	83 c4 10             	add    $0x10,%esp
    return 1;
 805a8b0:	b8 01 00 00 00       	mov    $0x1,%eax
{
  struct md5_ctx ctx;
  size_t sum;

  char *buffer = malloc (BLOCKSIZE + 72);
  if (!buffer)
 805a8b5:	85 f6                	test   %esi,%esi
 805a8b7:	0f 84 20 04 00 00    	je     805acdd <md5_stream+0x47d>
 805a8bd:	8d 76 00             	lea    0x0(%esi),%esi
 805a8c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a8c4:	89 3c 24             	mov    %edi,(%esp)
 805a8c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a8cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a8cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a8d3:	b9 a6 cf 00 00       	mov    $0xcfa6,%ecx
 805a8d8:	e8 8b 04 00 00       	call   805ad68 <__afl_maybe_log>
 805a8dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a8e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a8e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a8e9:	8b 3c 24             	mov    (%esp),%edi
 805a8ec:	8d 64 24 10          	lea    0x10(%esp),%esp
    return 1;

  /* Initialize the computation context.  */
  md5_init_ctx (&ctx+(lava_get(332))*(0x6c617515==(lava_get(332))||0x1575616c==(lava_get(332))));
 805a8f0:	83 ec 0c             	sub    $0xc,%esp
 805a8f3:	68 4c 01 00 00       	push   $0x14c
 805a8f8:	e8 63 c3 ff ff       	call   8056c60 <lava_get>
 805a8fd:	c7 04 24 4c 01 00 00 	movl   $0x14c,(%esp)
 805a904:	89 c7                	mov    %eax,%edi
 805a906:	e8 55 c3 ff ff       	call   8056c60 <lava_get>
 805a90b:	83 c4 10             	add    $0x10,%esp
 805a90e:	3d 15 75 61 6c       	cmp    $0x6c617515,%eax
 805a913:	ba 01 00 00 00       	mov    $0x1,%edx
 805a918:	74 4c                	je     805a966 <md5_stream+0x106>
 805a91a:	66 90                	xchg   %ax,%ax
 805a91c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a920:	89 3c 24             	mov    %edi,(%esp)
 805a923:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a927:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a92b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a92f:	b9 c0 b7 00 00       	mov    $0xb7c0,%ecx
 805a934:	e8 2f 04 00 00       	call   805ad68 <__afl_maybe_log>
 805a939:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a93d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a941:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a945:	8b 3c 24             	mov    (%esp),%edi
 805a948:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a94c:	83 ec 0c             	sub    $0xc,%esp
 805a94f:	68 4c 01 00 00       	push   $0x14c
 805a954:	e8 07 c3 ff ff       	call   8056c60 <lava_get>
 805a959:	31 d2                	xor    %edx,%edx
 805a95b:	83 c4 10             	add    $0x10,%esp
 805a95e:	3d 6c 61 75 15       	cmp    $0x1575616c,%eax
 805a963:	0f 94 c2             	sete   %dl
 805a966:	66 90                	xchg   %ax,%ax
 805a968:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a96c:	89 3c 24             	mov    %edi,(%esp)
 805a96f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a973:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a977:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a97b:	b9 62 77 00 00       	mov    $0x7762,%ecx
 805a980:	e8 e3 03 00 00       	call   805ad68 <__afl_maybe_log>
 805a985:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a989:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a98d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a991:	8b 3c 24             	mov    (%esp),%edi
 805a994:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a998:	69 c7 9c 00 00 00    	imul   $0x9c,%edi,%eax
 805a99e:	8d 4c 24 04          	lea    0x4(%esp),%ecx
      sum = 0;

      /* Read block.  Take care for partial reads.  */
      while (1)
        {
          n = fread (buffer + sum, 1, BLOCKSIZE - sum, stream);
 805a9a2:	bf 00 80 00 00       	mov    $0x8000,%edi
  char *buffer = malloc (BLOCKSIZE + 72);
  if (!buffer)
    return 1;

  /* Initialize the computation context.  */
  md5_init_ctx (&ctx+(lava_get(332))*(0x6c617515==(lava_get(332))||0x1575616c==(lava_get(332))));
 805a9a7:	0f af c2             	imul   %edx,%eax
 805a9aa:	01 c8                	add    %ecx,%eax
/* Initialize structure containing state of computation.
   (RFC 1321, 3.3: Step 3)  */
void
md5_init_ctx (struct md5_ctx *ctx)
{
  ctx->A = 0x67452301;
 805a9ac:	c7 00 01 23 45 67    	movl   $0x67452301,(%eax)
  ctx->B = 0xefcdab89;
 805a9b2:	c7 40 04 89 ab cd ef 	movl   $0xefcdab89,0x4(%eax)
  ctx->C = 0x98badcfe;
 805a9b9:	c7 40 08 fe dc ba 98 	movl   $0x98badcfe,0x8(%eax)
  ctx->D = 0x10325476;
 805a9c0:	c7 40 0c 76 54 32 10 	movl   $0x10325476,0xc(%eax)

  ctx->total[0] = ctx->total[1] = 0;
 805a9c7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
 805a9ce:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
  ctx->buflen = 0;
 805a9d5:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    {
      /* We read the file in blocks of BLOCKSIZE bytes.  One call of the
         computation function processes the whole buffer so that with the
         next round of the loop another block can be read.  */
      size_t n;
      sum = 0;
 805a9dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a9e0:	89 3c 24             	mov    %edi,(%esp)
 805a9e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a9e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a9eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a9ef:	b9 3c 58 00 00       	mov    $0x583c,%ecx
 805a9f4:	e8 6f 03 00 00       	call   805ad68 <__afl_maybe_log>
 805a9f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a9fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aa01:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aa05:	8b 3c 24             	mov    (%esp),%edi
 805aa08:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aa0c:	31 ed                	xor    %ebp,%ebp
 805aa0e:	eb 74                	jmp    805aa84 <md5_stream+0x224>
          sum += n;

          if (sum == BLOCKSIZE)
            break;

          if (n == 0)
 805aa10:	85 c0                	test   %eax,%eax
 805aa12:	0f 84 10 01 00 00    	je     805ab28 <md5_stream+0x2c8>
 805aa18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aa1c:	89 3c 24             	mov    %edi,(%esp)
 805aa1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aa23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aa27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aa2b:	b9 b5 c2 00 00       	mov    $0xc2b5,%ecx
 805aa30:	e8 33 03 00 00       	call   805ad68 <__afl_maybe_log>
 805aa35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aa39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aa3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aa41:	8b 3c 24             	mov    (%esp),%edi
 805aa44:	8d 64 24 10          	lea    0x10(%esp),%esp
            }

          /* We've read at least one byte, so ignore errors.  But always
             check for EOF, since feof may be true even though N > 0.
             Otherwise, we could end up calling fread after EOF.  */
          if (feof (stream))
 805aa48:	f6 03 10             	testb  $0x10,(%ebx)
 805aa4b:	0f 85 13 01 00 00    	jne    805ab64 <md5_stream+0x304>
 805aa51:	8d 76 00             	lea    0x0(%esi),%esi
 805aa54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aa58:	89 3c 24             	mov    %edi,(%esp)
 805aa5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aa5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aa63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aa67:	b9 90 89 00 00       	mov    $0x8990,%ecx
 805aa6c:	e8 f7 02 00 00       	call   805ad68 <__afl_maybe_log>
 805aa71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aa75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aa79:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aa7d:	8b 3c 24             	mov    (%esp),%edi
 805aa80:	8d 64 24 10          	lea    0x10(%esp),%esp
      sum = 0;

      /* Read block.  Take care for partial reads.  */
      while (1)
        {
          n = fread (buffer + sum, 1, BLOCKSIZE - sum, stream);
 805aa84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aa88:	89 3c 24             	mov    %edi,(%esp)
 805aa8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aa8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aa93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aa97:	b9 95 2c 00 00       	mov    $0x2c95,%ecx
 805aa9c:	e8 c7 02 00 00       	call   805ad68 <__afl_maybe_log>
 805aaa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aaa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aaa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aaad:	8b 3c 24             	mov    (%esp),%edi
 805aab0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aab4:	8d 04 2e             	lea    (%esi,%ebp,1),%eax
 805aab7:	89 fa                	mov    %edi,%edx
	  *__cptr++ = __c;
	}
      return (__cptr - (char *) __ptr) / __size;
    }
# endif
  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
 805aab9:	53                   	push   %ebx
 805aaba:	29 ea                	sub    %ebp,%edx
 805aabc:	52                   	push   %edx
 805aabd:	6a 01                	push   $0x1
 805aabf:	50                   	push   %eax
 805aac0:	e8 db e7 fe ff       	call   80492a0 <fread_unlocked@plt>

          sum += n;
 805aac5:	01 c5                	add    %eax,%ebp

          if (sum == BLOCKSIZE)
 805aac7:	83 c4 10             	add    $0x10,%esp
 805aaca:	81 fd 00 80 00 00    	cmp    $0x8000,%ebp
 805aad0:	0f 85 3a ff ff ff    	jne    805aa10 <md5_stream+0x1b0>
 805aad6:	66 90                	xchg   %ax,%ax
 805aad8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aadc:	89 3c 24             	mov    %edi,(%esp)
 805aadf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aae3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aae7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aaeb:	b9 03 21 00 00       	mov    $0x2103,%ecx
 805aaf0:	e8 73 02 00 00       	call   805ad68 <__afl_maybe_log>
 805aaf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aaf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aafd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ab01:	8b 3c 24             	mov    (%esp),%edi
 805ab04:	8d 64 24 10          	lea    0x10(%esp),%esp
        }

      /* Process buffer with BLOCKSIZE bytes.  Note that
         BLOCKSIZE % 64 == 0
       */
      md5_process_block (buffer, BLOCKSIZE, &ctx);
 805ab08:	83 ec 04             	sub    $0x4,%esp
 805ab0b:	8d 44 24 08          	lea    0x8(%esp),%eax
 805ab0f:	50                   	push   %eax
 805ab10:	68 00 80 00 00       	push   $0x8000
 805ab15:	56                   	push   %esi
 805ab16:	e8 a5 e6 ff ff       	call   80591c0 <md5_process_block>
    }
 805ab1b:	83 c4 10             	add    $0x10,%esp
 805ab1e:	e9 b9 fe ff ff       	jmp    805a9dc <md5_stream+0x17c>
 805ab23:	90                   	nop
 805ab24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
          if (n == 0)
            {
              /* Check for the error flag IFF N == 0, so that we don't
                 exit the loop after a partial read due to e.g., EAGAIN
                 or EWOULDBLOCK.  */
              if (ferror (stream))
 805ab28:	f6 03 20             	testb  $0x20,(%ebx)
 805ab2b:	0f 85 ea 01 00 00    	jne    805ad1b <md5_stream+0x4bb>
 805ab31:	8d 76 00             	lea    0x0(%esi),%esi
 805ab34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ab38:	89 3c 24             	mov    %edi,(%esp)
 805ab3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ab3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ab43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ab47:	b9 3e 51 00 00       	mov    $0x513e,%ecx
 805ab4c:	e8 17 02 00 00       	call   805ad68 <__afl_maybe_log>
 805ab51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ab55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ab59:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ab5d:	8b 3c 24             	mov    (%esp),%edi
 805ab60:	8d 64 24 10          	lea    0x10(%esp),%esp
    }

process_partial_block:

  /* Process any remaining bytes.  */
  if (sum > 0)
 805ab64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ab68:	89 3c 24             	mov    %edi,(%esp)
 805ab6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ab6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ab73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ab77:	b9 f8 dd 00 00       	mov    $0xddf8,%ecx
 805ab7c:	e8 e7 01 00 00       	call   805ad68 <__afl_maybe_log>
 805ab81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ab85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ab89:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ab8d:	8b 3c 24             	mov    (%esp),%edi
 805ab90:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ab94:	85 ed                	test   %ebp,%ebp
 805ab96:	0f 84 f0 00 00 00    	je     805ac8c <md5_stream+0x42c>
 805ab9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aba0:	89 3c 24             	mov    %edi,(%esp)
 805aba3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aba7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805abab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805abaf:	b9 f2 c3 00 00       	mov    $0xc3f2,%ecx
 805abb4:	e8 af 01 00 00       	call   805ad68 <__afl_maybe_log>
 805abb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805abbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805abc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805abc5:	8b 3c 24             	mov    (%esp),%edi
 805abc8:	8d 64 24 10          	lea    0x10(%esp),%esp
    md5_process_bytes (buffer, sum+(lava_get(335))*(0x6c617512==(lava_get(335))||0x1275616c==(lava_get(335))), &ctx);
 805abcc:	83 ec 0c             	sub    $0xc,%esp
 805abcf:	68 4f 01 00 00       	push   $0x14f
 805abd4:	e8 87 c0 ff ff       	call   8056c60 <lava_get>
 805abd9:	c7 04 24 4f 01 00 00 	movl   $0x14f,(%esp)
 805abe0:	89 c3                	mov    %eax,%ebx
 805abe2:	e8 79 c0 ff ff       	call   8056c60 <lava_get>
 805abe7:	83 c4 10             	add    $0x10,%esp
 805abea:	3d 12 75 61 6c       	cmp    $0x6c617512,%eax
 805abef:	b9 01 00 00 00       	mov    $0x1,%ecx
 805abf4:	74 4c                	je     805ac42 <md5_stream+0x3e2>
 805abf6:	66 90                	xchg   %ax,%ax
 805abf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805abfc:	89 3c 24             	mov    %edi,(%esp)
 805abff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ac03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ac07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ac0b:	b9 e8 05 00 00       	mov    $0x5e8,%ecx
 805ac10:	e8 53 01 00 00       	call   805ad68 <__afl_maybe_log>
 805ac15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ac19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ac1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ac21:	8b 3c 24             	mov    (%esp),%edi
 805ac24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ac28:	83 ec 0c             	sub    $0xc,%esp
 805ac2b:	68 4f 01 00 00       	push   $0x14f
 805ac30:	e8 2b c0 ff ff       	call   8056c60 <lava_get>
 805ac35:	31 c9                	xor    %ecx,%ecx
 805ac37:	83 c4 10             	add    $0x10,%esp
 805ac3a:	3d 6c 61 75 12       	cmp    $0x1275616c,%eax
 805ac3f:	0f 94 c1             	sete   %cl
 805ac42:	66 90                	xchg   %ax,%ax
 805ac44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ac48:	89 3c 24             	mov    %edi,(%esp)
 805ac4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ac4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ac53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ac57:	b9 11 23 00 00       	mov    $0x2311,%ecx
 805ac5c:	e8 07 01 00 00       	call   805ad68 <__afl_maybe_log>
 805ac61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ac65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ac69:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ac6d:	8b 3c 24             	mov    (%esp),%edi
 805ac70:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ac74:	0f af d9             	imul   %ecx,%ebx
 805ac77:	83 ec 04             	sub    $0x4,%esp
 805ac7a:	8d 7c 24 08          	lea    0x8(%esp),%edi
 805ac7e:	8d 2c 2b             	lea    (%ebx,%ebp,1),%ebp
 805ac81:	57                   	push   %edi
 805ac82:	55                   	push   %ebp
 805ac83:	56                   	push   %esi
 805ac84:	e8 f7 ef ff ff       	call   8059c80 <md5_process_bytes>
 805ac89:	83 c4 10             	add    $0x10,%esp

  /* Construct result in desired memory.  */
  md5_finish_ctx (&ctx, resblock);
 805ac8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ac90:	89 3c 24             	mov    %edi,(%esp)
 805ac93:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ac97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ac9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ac9f:	b9 3a 7b 00 00       	mov    $0x7b3a,%ecx
 805aca4:	e8 bf 00 00 00       	call   805ad68 <__afl_maybe_log>
 805aca9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805acad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805acb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805acb5:	8b 3c 24             	mov    (%esp),%edi
 805acb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805acbc:	83 ec 08             	sub    $0x8,%esp
 805acbf:	ff b4 24 cc 00 00 00 	pushl  0xcc(%esp)
 805acc6:	8d 54 24 10          	lea    0x10(%esp),%edx
 805acca:	52                   	push   %edx
 805accb:	e8 10 ed ff ff       	call   80599e0 <md5_finish_ctx>
  free (buffer);
 805acd0:	89 34 24             	mov    %esi,(%esp)
 805acd3:	e8 88 e4 fe ff       	call   8049160 <free@plt>
  return 0;
 805acd8:	83 c4 10             	add    $0x10,%esp
 805acdb:	31 c0                	xor    %eax,%eax
 805acdd:	8d 76 00             	lea    0x0(%esi),%esi
}
 805ace0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ace4:	89 3c 24             	mov    %edi,(%esp)
 805ace7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aceb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805acef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805acf3:	b9 45 c3 00 00       	mov    $0xc345,%ecx
 805acf8:	e8 6b 00 00 00       	call   805ad68 <__afl_maybe_log>
 805acfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ad01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ad05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ad09:	8b 3c 24             	mov    (%esp),%edi
 805ad0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ad10:	81 c4 ac 00 00 00    	add    $0xac,%esp
 805ad16:	5b                   	pop    %ebx
 805ad17:	5e                   	pop    %esi
 805ad18:	5f                   	pop    %edi
 805ad19:	5d                   	pop    %ebp
 805ad1a:	c3                   	ret    
 805ad1b:	90                   	nop
              /* Check for the error flag IFF N == 0, so that we don't
                 exit the loop after a partial read due to e.g., EAGAIN
                 or EWOULDBLOCK.  */
              if (ferror (stream))
                {
                  free (buffer);
 805ad1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ad20:	89 3c 24             	mov    %edi,(%esp)
 805ad23:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ad27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ad2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ad2f:	b9 a1 7a 00 00       	mov    $0x7aa1,%ecx
 805ad34:	e8 2f 00 00 00       	call   805ad68 <__afl_maybe_log>
 805ad39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ad3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ad41:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ad45:	8b 3c 24             	mov    (%esp),%edi
 805ad48:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ad4c:	83 ec 0c             	sub    $0xc,%esp
 805ad4f:	56                   	push   %esi
 805ad50:	e8 0b e4 fe ff       	call   8049160 <free@plt>
                  return 1;
 805ad55:	83 c4 10             	add    $0x10,%esp
 805ad58:	b8 01 00 00 00       	mov    $0x1,%eax
 805ad5d:	e9 7b ff ff ff       	jmp    805acdd <md5_stream+0x47d>
 805ad62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805ad68 <__afl_maybe_log>:
 805ad68:	9f                   	lahf   
 805ad69:	0f 90 c0             	seto   %al
 805ad6c:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 805ad72:	85 d2                	test   %edx,%edx
 805ad74:	74 22                	je     805ad98 <__afl_setup>

0805ad76 <__afl_store>:
 805ad76:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 805ad7c:	31 cf                	xor    %ecx,%edi
 805ad7e:	d1 e9                	shr    %ecx
 805ad80:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 805ad86:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805ad8a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805ad8e <__afl_return>:
 805ad8e:	04 7f                	add    $0x7f,%al
 805ad90:	9e                   	sahf   
 805ad91:	c3                   	ret    
 805ad92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805ad98 <__afl_setup>:
 805ad98:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 805ad9f:	75 ed                	jne    805ad8e <__afl_return>
 805ada1:	50                   	push   %eax
 805ada2:	51                   	push   %ecx
 805ada3:	68 a0 ae 05 08       	push   $0x805aea0
 805ada8:	e8 03 e5 fe ff       	call   80492b0 <getenv@plt>
 805adad:	83 c4 04             	add    $0x4,%esp
 805adb0:	85 c0                	test   %eax,%eax
 805adb2:	0f 84 db 00 00 00    	je     805ae93 <__afl_setup_abort>
 805adb8:	50                   	push   %eax
 805adb9:	e8 c2 e6 fe ff       	call   8049480 <atoi@plt>
 805adbe:	83 c4 04             	add    $0x4,%esp
 805adc1:	6a 00                	push   $0x0
 805adc3:	6a 00                	push   $0x0
 805adc5:	50                   	push   %eax
 805adc6:	e8 15 e4 fe ff       	call   80491e0 <shmat@plt>
 805adcb:	83 c4 0c             	add    $0xc,%esp
 805adce:	83 f8 ff             	cmp    $0xffffffff,%eax
 805add1:	0f 84 bc 00 00 00    	je     805ae93 <__afl_setup_abort>
 805add7:	c6 00 01             	movb   $0x1,(%eax)
 805adda:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 805addf:	89 c2                	mov    %eax,%edx
 805ade1:	59                   	pop    %ecx
 805ade2:	58                   	pop    %eax

0805ade3 <__afl_forkserver>:
 805ade3:	50                   	push   %eax
 805ade4:	51                   	push   %ecx
 805ade5:	52                   	push   %edx
 805ade6:	6a 04                	push   $0x4
 805ade8:	68 e0 bd 43 08       	push   $0x843bde0
 805aded:	68 c7 00 00 00       	push   $0xc7
 805adf2:	e8 99 e5 fe ff       	call   8049390 <write@plt>
 805adf7:	83 c4 0c             	add    $0xc,%esp
 805adfa:	83 f8 04             	cmp    $0x4,%eax
 805adfd:	75 6e                	jne    805ae6d <__afl_fork_resume>

0805adff <__afl_fork_wait_loop>:
 805adff:	6a 04                	push   $0x4
 805ae01:	68 e0 bd 43 08       	push   $0x843bde0
 805ae06:	68 c6 00 00 00       	push   $0xc6
 805ae0b:	e8 10 e3 fe ff       	call   8049120 <read@plt>
 805ae10:	83 c4 0c             	add    $0xc,%esp
 805ae13:	83 f8 04             	cmp    $0x4,%eax
 805ae16:	75 74                	jne    805ae8c <__afl_die>
 805ae18:	e8 03 e6 fe ff       	call   8049420 <fork@plt>
 805ae1d:	83 f8 00             	cmp    $0x0,%eax
 805ae20:	7c 6a                	jl     805ae8c <__afl_die>
 805ae22:	74 49                	je     805ae6d <__afl_fork_resume>
 805ae24:	a3 40 be 43 08       	mov    %eax,0x843be40
 805ae29:	6a 04                	push   $0x4
 805ae2b:	68 40 be 43 08       	push   $0x843be40
 805ae30:	68 c7 00 00 00       	push   $0xc7
 805ae35:	e8 56 e5 fe ff       	call   8049390 <write@plt>
 805ae3a:	83 c4 0c             	add    $0xc,%esp
 805ae3d:	6a 00                	push   $0x0
 805ae3f:	68 e0 bd 43 08       	push   $0x843bde0
 805ae44:	ff 35 40 be 43 08    	pushl  0x843be40
 805ae4a:	e8 f1 e3 fe ff       	call   8049240 <waitpid@plt>
 805ae4f:	83 c4 0c             	add    $0xc,%esp
 805ae52:	83 f8 00             	cmp    $0x0,%eax
 805ae55:	7e 35                	jle    805ae8c <__afl_die>
 805ae57:	6a 04                	push   $0x4
 805ae59:	68 e0 bd 43 08       	push   $0x843bde0
 805ae5e:	68 c7 00 00 00       	push   $0xc7
 805ae63:	e8 28 e5 fe ff       	call   8049390 <write@plt>
 805ae68:	83 c4 0c             	add    $0xc,%esp
 805ae6b:	eb 92                	jmp    805adff <__afl_fork_wait_loop>

0805ae6d <__afl_fork_resume>:
 805ae6d:	68 c6 00 00 00       	push   $0xc6
 805ae72:	e8 89 e6 fe ff       	call   8049500 <close@plt>
 805ae77:	68 c7 00 00 00       	push   $0xc7
 805ae7c:	e8 7f e6 fe ff       	call   8049500 <close@plt>
 805ae81:	83 c4 08             	add    $0x8,%esp
 805ae84:	5a                   	pop    %edx
 805ae85:	59                   	pop    %ecx
 805ae86:	58                   	pop    %eax
 805ae87:	e9 ea fe ff ff       	jmp    805ad76 <__afl_store>

0805ae8c <__afl_die>:
 805ae8c:	31 c0                	xor    %eax,%eax
 805ae8e:	e8 bd e2 fe ff       	call   8049150 <_exit@plt>

0805ae93 <__afl_setup_abort>:
 805ae93:	fe 05 60 be 43 08    	incb   0x843be60
 805ae99:	59                   	pop    %ecx
 805ae9a:	58                   	pop    %eax
 805ae9b:	e9 ee fe ff ff       	jmp    805ad8e <__afl_return>

0805aea0 <.AFL_SHM_ENV>:
 805aea0:	5f                   	pop    %edi
 805aea1:	5f                   	pop    %edi
 805aea2:	41                   	inc    %ecx
 805aea3:	46                   	inc    %esi
 805aea4:	4c                   	dec    %esp
 805aea5:	5f                   	pop    %edi
 805aea6:	53                   	push   %ebx
 805aea7:	48                   	dec    %eax
 805aea8:	4d                   	dec    %ebp
 805aea9:	5f                   	pop    %edi
 805aeaa:	49                   	dec    %ecx
 805aeab:	44                   	inc    %esp
 805aeac:	00 66 90             	add    %ah,-0x70(%esi)
 805aeaf:	90                   	nop

0805aeb0 <fdadvise>:

void
fdadvise (int fd, off_t offset, off_t len, fadvice_t advice)
{
#if HAVE_POSIX_FADVISE
  ignore_value (posix_fadvise (fd, offset, len, advice));
 805aeb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aeb4:	89 3c 24             	mov    %edi,(%esp)
 805aeb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aebb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aebf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aec3:	b9 78 14 00 00       	mov    $0x1478,%ecx
 805aec8:	e8 b3 03 00 00       	call   805b280 <__afl_maybe_log>
 805aecd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aed1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aed5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aed9:	8b 3c 24             	mov    (%esp),%edi
 805aedc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aee0:	e9 db e5 fe ff       	jmp    80494c0 <posix_fadvise64@plt>
 805aee5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 805aee9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805aef0 <fadvise>:
#endif
}

void
fadvise (FILE *fp, fadvice_t advice)
{
 805aef0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aef4:	89 3c 24             	mov    %edi,(%esp)
 805aef7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aefb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aeff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805af03:	b9 7b 19 00 00       	mov    $0x197b,%ecx
 805af08:	e8 73 03 00 00       	call   805b280 <__afl_maybe_log>
 805af0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805af11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805af15:	8b 54 24 04          	mov    0x4(%esp),%edx
 805af19:	8b 3c 24             	mov    (%esp),%edi
 805af1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805af20:	55                   	push   %ebp
 805af21:	57                   	push   %edi
 805af22:	56                   	push   %esi
 805af23:	53                   	push   %ebx
 805af24:	83 ec 0c             	sub    $0xc,%esp
  if (fp)
 805af27:	8b 44 24 20          	mov    0x20(%esp),%eax
 805af2b:	85 c0                	test   %eax,%eax
 805af2d:	0f 84 10 03 00 00    	je     805b243 <fadvise+0x353>
 805af33:	90                   	nop
 805af34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805af38:	89 3c 24             	mov    %edi,(%esp)
 805af3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805af3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805af43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805af47:	b9 48 84 00 00       	mov    $0x8448,%ecx
 805af4c:	e8 2f 03 00 00       	call   805b280 <__afl_maybe_log>
 805af51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805af55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805af59:	8b 54 24 04          	mov    0x4(%esp),%edx
 805af5d:	8b 3c 24             	mov    (%esp),%edi
 805af60:	8d 64 24 10          	lea    0x10(%esp),%esp
    fdadvise (fileno (fp+(lava_get(323))*(0x6c61751e==(lava_get(323))||0x1e75616c==(lava_get(323)))+(lava_get(326))*(0x6c61751b==(lava_get(326))||0x1b75616c==(lava_get(326))))+(lava_get(323))*(0x6c61751e==(lava_get(323))||0x1e75616c==(lava_get(323))), 0+(lava_get(326))*(0x6c61751b==(lava_get(326))||0x1b75616c==(lava_get(326))), 0, advice);
 805af64:	83 ec 0c             	sub    $0xc,%esp
 805af67:	68 46 01 00 00       	push   $0x146
 805af6c:	e8 ef bc ff ff       	call   8056c60 <lava_get>
 805af71:	c7 04 24 46 01 00 00 	movl   $0x146,(%esp)
 805af78:	89 c3                	mov    %eax,%ebx
 805af7a:	e8 e1 bc ff ff       	call   8056c60 <lava_get>
 805af7f:	83 c4 10             	add    $0x10,%esp
 805af82:	3d 1b 75 61 6c       	cmp    $0x6c61751b,%eax
 805af87:	ba 01 00 00 00       	mov    $0x1,%edx
 805af8c:	74 4c                	je     805afda <fadvise+0xea>
 805af8e:	66 90                	xchg   %ax,%ax
 805af90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805af94:	89 3c 24             	mov    %edi,(%esp)
 805af97:	89 54 24 04          	mov    %edx,0x4(%esp)
 805af9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805af9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805afa3:	b9 ef b5 00 00       	mov    $0xb5ef,%ecx
 805afa8:	e8 d3 02 00 00       	call   805b280 <__afl_maybe_log>
 805afad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805afb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805afb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805afb9:	8b 3c 24             	mov    (%esp),%edi
 805afbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805afc0:	83 ec 0c             	sub    $0xc,%esp
 805afc3:	68 46 01 00 00       	push   $0x146
 805afc8:	e8 93 bc ff ff       	call   8056c60 <lava_get>
 805afcd:	31 d2                	xor    %edx,%edx
 805afcf:	83 c4 10             	add    $0x10,%esp
 805afd2:	3d 6c 61 75 1b       	cmp    $0x1b75616c,%eax
 805afd7:	0f 94 c2             	sete   %dl
 805afda:	66 90                	xchg   %ax,%ax
 805afdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805afe0:	89 3c 24             	mov    %edi,(%esp)
 805afe3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805afe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805afeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805afef:	b9 30 7e 00 00       	mov    $0x7e30,%ecx
 805aff4:	e8 87 02 00 00       	call   805b280 <__afl_maybe_log>
 805aff9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805affd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b001:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b005:	8b 3c 24             	mov    (%esp),%edi
 805b008:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b00c:	83 ec 0c             	sub    $0xc,%esp
 805b00f:	89 d6                	mov    %edx,%esi
 805b011:	31 ff                	xor    %edi,%edi
 805b013:	68 43 01 00 00       	push   $0x143
 805b018:	0f af f3             	imul   %ebx,%esi
 805b01b:	e8 40 bc ff ff       	call   8056c60 <lava_get>
 805b020:	c7 04 24 43 01 00 00 	movl   $0x143,(%esp)
 805b027:	89 c3                	mov    %eax,%ebx
 805b029:	e8 32 bc ff ff       	call   8056c60 <lava_get>
 805b02e:	83 c4 10             	add    $0x10,%esp
 805b031:	3d 1e 75 61 6c       	cmp    $0x6c61751e,%eax
 805b036:	b9 01 00 00 00       	mov    $0x1,%ecx
 805b03b:	74 4d                	je     805b08a <fadvise+0x19a>
 805b03d:	8d 76 00             	lea    0x0(%esi),%esi
 805b040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b044:	89 3c 24             	mov    %edi,(%esp)
 805b047:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b04b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b04f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b053:	b9 2b ca 00 00       	mov    $0xca2b,%ecx
 805b058:	e8 23 02 00 00       	call   805b280 <__afl_maybe_log>
 805b05d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b065:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b069:	8b 3c 24             	mov    (%esp),%edi
 805b06c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b070:	83 ec 0c             	sub    $0xc,%esp
 805b073:	68 43 01 00 00       	push   $0x143
 805b078:	e8 e3 bb ff ff       	call   8056c60 <lava_get>
 805b07d:	31 c9                	xor    %ecx,%ecx
 805b07f:	83 c4 10             	add    $0x10,%esp
 805b082:	3d 6c 61 75 1e       	cmp    $0x1e75616c,%eax
 805b087:	0f 94 c1             	sete   %cl
 805b08a:	66 90                	xchg   %ax,%ax
 805b08c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b090:	89 3c 24             	mov    %edi,(%esp)
 805b093:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b097:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b09b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b09f:	b9 d0 b8 00 00       	mov    $0xb8d0,%ecx
 805b0a4:	e8 d7 01 00 00       	call   805b280 <__afl_maybe_log>
 805b0a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b0ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b0b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b0b5:	8b 3c 24             	mov    (%esp),%edi
 805b0b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b0bc:	83 ec 0c             	sub    $0xc,%esp
 805b0bf:	68 46 01 00 00       	push   $0x146
 805b0c4:	0f af d9             	imul   %ecx,%ebx
 805b0c7:	e8 94 bb ff ff       	call   8056c60 <lava_get>
 805b0cc:	c7 04 24 46 01 00 00 	movl   $0x146,(%esp)
 805b0d3:	89 c5                	mov    %eax,%ebp
 805b0d5:	e8 86 bb ff ff       	call   8056c60 <lava_get>
 805b0da:	83 c4 10             	add    $0x10,%esp
 805b0dd:	3d 1b 75 61 6c       	cmp    $0x6c61751b,%eax
 805b0e2:	ba 01 00 00 00       	mov    $0x1,%edx
 805b0e7:	74 4d                	je     805b136 <fadvise+0x246>
 805b0e9:	8d 76 00             	lea    0x0(%esi),%esi
 805b0ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b0f0:	89 3c 24             	mov    %edi,(%esp)
 805b0f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b0f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b0fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b0ff:	b9 9b aa 00 00       	mov    $0xaa9b,%ecx
 805b104:	e8 77 01 00 00       	call   805b280 <__afl_maybe_log>
 805b109:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b10d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b111:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b115:	8b 3c 24             	mov    (%esp),%edi
 805b118:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b11c:	83 ec 0c             	sub    $0xc,%esp
 805b11f:	68 46 01 00 00       	push   $0x146
 805b124:	e8 37 bb ff ff       	call   8056c60 <lava_get>
 805b129:	31 d2                	xor    %edx,%edx
 805b12b:	83 c4 10             	add    $0x10,%esp
 805b12e:	3d 6c 61 75 1b       	cmp    $0x1b75616c,%eax
 805b133:	0f 94 c2             	sete   %dl
 805b136:	66 90                	xchg   %ax,%ax
 805b138:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b13c:	89 3c 24             	mov    %edi,(%esp)
 805b13f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b143:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b147:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b14b:	b9 7b df 00 00       	mov    $0xdf7b,%ecx
 805b150:	e8 2b 01 00 00       	call   805b280 <__afl_maybe_log>
 805b155:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b159:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b15d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b161:	8b 3c 24             	mov    (%esp),%edi
 805b164:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b168:	0f af ea             	imul   %edx,%ebp
 805b16b:	83 ec 0c             	sub    $0xc,%esp
 805b16e:	01 eb                	add    %ebp,%ebx
 805b170:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
 805b176:	03 44 24 2c          	add    0x2c(%esp),%eax
 805b17a:	50                   	push   %eax
 805b17b:	e8 70 e2 fe ff       	call   80493f0 <fileno@plt>
 805b180:	c7 04 24 43 01 00 00 	movl   $0x143,(%esp)
 805b187:	89 c3                	mov    %eax,%ebx
 805b189:	e8 d2 ba ff ff       	call   8056c60 <lava_get>
 805b18e:	c7 04 24 43 01 00 00 	movl   $0x143,(%esp)
 805b195:	89 c5                	mov    %eax,%ebp
 805b197:	e8 c4 ba ff ff       	call   8056c60 <lava_get>
 805b19c:	83 c4 10             	add    $0x10,%esp
 805b19f:	3d 1e 75 61 6c       	cmp    $0x6c61751e,%eax
 805b1a4:	b9 01 00 00 00       	mov    $0x1,%ecx
 805b1a9:	74 4b                	je     805b1f6 <fadvise+0x306>
 805b1ab:	90                   	nop
 805b1ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b1b0:	89 3c 24             	mov    %edi,(%esp)
 805b1b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b1b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b1bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b1bf:	b9 08 95 00 00       	mov    $0x9508,%ecx
 805b1c4:	e8 b7 00 00 00       	call   805b280 <__afl_maybe_log>
 805b1c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b1cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b1d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b1d5:	8b 3c 24             	mov    (%esp),%edi
 805b1d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b1dc:	83 ec 0c             	sub    $0xc,%esp
 805b1df:	68 43 01 00 00       	push   $0x143
 805b1e4:	e8 77 ba ff ff       	call   8056c60 <lava_get>
 805b1e9:	31 c9                	xor    %ecx,%ecx
 805b1eb:	83 c4 10             	add    $0x10,%esp
 805b1ee:	3d 6c 61 75 1e       	cmp    $0x1e75616c,%eax
 805b1f3:	0f 94 c1             	sete   %cl
 805b1f6:	66 90                	xchg   %ax,%ax
 805b1f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b1fc:	89 3c 24             	mov    %edi,(%esp)
 805b1ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b203:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b207:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b20b:	b9 38 07 00 00       	mov    $0x738,%ecx
 805b210:	e8 6b 00 00 00       	call   805b280 <__afl_maybe_log>
 805b215:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b219:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b21d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b221:	8b 3c 24             	mov    (%esp),%edi
 805b224:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b228:	0f af e9             	imul   %ecx,%ebp

void
fdadvise (int fd, off_t offset, off_t len, fadvice_t advice)
{
#if HAVE_POSIX_FADVISE
  ignore_value (posix_fadvise (fd, offset, len, advice));
 805b22b:	83 ec 08             	sub    $0x8,%esp
 805b22e:	ff 74 24 2c          	pushl  0x2c(%esp)
 805b232:	6a 00                	push   $0x0
 805b234:	6a 00                	push   $0x0
 805b236:	57                   	push   %edi

void
fadvise (FILE *fp, fadvice_t advice)
{
  if (fp)
    fdadvise (fileno (fp+(lava_get(323))*(0x6c61751e==(lava_get(323))||0x1e75616c==(lava_get(323)))+(lava_get(326))*(0x6c61751b==(lava_get(326))||0x1b75616c==(lava_get(326))))+(lava_get(323))*(0x6c61751e==(lava_get(323))||0x1e75616c==(lava_get(323))), 0+(lava_get(326))*(0x6c61751b==(lava_get(326))||0x1b75616c==(lava_get(326))), 0, advice);
 805b237:	01 eb                	add    %ebp,%ebx

void
fdadvise (int fd, off_t offset, off_t len, fadvice_t advice)
{
#if HAVE_POSIX_FADVISE
  ignore_value (posix_fadvise (fd, offset, len, advice));
 805b239:	56                   	push   %esi
 805b23a:	53                   	push   %ebx
 805b23b:	e8 80 e2 fe ff       	call   80494c0 <posix_fadvise64@plt>
 805b240:	83 c4 20             	add    $0x20,%esp
 805b243:	90                   	nop
void
fadvise (FILE *fp, fadvice_t advice)
{
  if (fp)
    fdadvise (fileno (fp+(lava_get(323))*(0x6c61751e==(lava_get(323))||0x1e75616c==(lava_get(323)))+(lava_get(326))*(0x6c61751b==(lava_get(326))||0x1b75616c==(lava_get(326))))+(lava_get(323))*(0x6c61751e==(lava_get(323))||0x1e75616c==(lava_get(323))), 0+(lava_get(326))*(0x6c61751b==(lava_get(326))||0x1b75616c==(lava_get(326))), 0, advice);
}
 805b244:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b248:	89 3c 24             	mov    %edi,(%esp)
 805b24b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b24f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b253:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b257:	b9 21 17 00 00       	mov    $0x1721,%ecx
 805b25c:	e8 1f 00 00 00       	call   805b280 <__afl_maybe_log>
 805b261:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b265:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b269:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b26d:	8b 3c 24             	mov    (%esp),%edi
 805b270:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b274:	83 c4 0c             	add    $0xc,%esp
 805b277:	5b                   	pop    %ebx
 805b278:	5e                   	pop    %esi
 805b279:	5f                   	pop    %edi
 805b27a:	5d                   	pop    %ebp
 805b27b:	c3                   	ret    
 805b27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0805b280 <__afl_maybe_log>:
 805b280:	9f                   	lahf   
 805b281:	0f 90 c0             	seto   %al
 805b284:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 805b28a:	85 d2                	test   %edx,%edx
 805b28c:	74 22                	je     805b2b0 <__afl_setup>

0805b28e <__afl_store>:
 805b28e:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 805b294:	31 cf                	xor    %ecx,%edi
 805b296:	d1 e9                	shr    %ecx
 805b298:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 805b29e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805b2a2:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805b2a6 <__afl_return>:
 805b2a6:	04 7f                	add    $0x7f,%al
 805b2a8:	9e                   	sahf   
 805b2a9:	c3                   	ret    
 805b2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805b2b0 <__afl_setup>:
 805b2b0:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 805b2b7:	75 ed                	jne    805b2a6 <__afl_return>
 805b2b9:	50                   	push   %eax
 805b2ba:	51                   	push   %ecx
 805b2bb:	68 b8 b3 05 08       	push   $0x805b3b8
 805b2c0:	e8 eb df fe ff       	call   80492b0 <getenv@plt>
 805b2c5:	83 c4 04             	add    $0x4,%esp
 805b2c8:	85 c0                	test   %eax,%eax
 805b2ca:	0f 84 db 00 00 00    	je     805b3ab <__afl_setup_abort>
 805b2d0:	50                   	push   %eax
 805b2d1:	e8 aa e1 fe ff       	call   8049480 <atoi@plt>
 805b2d6:	83 c4 04             	add    $0x4,%esp
 805b2d9:	6a 00                	push   $0x0
 805b2db:	6a 00                	push   $0x0
 805b2dd:	50                   	push   %eax
 805b2de:	e8 fd de fe ff       	call   80491e0 <shmat@plt>
 805b2e3:	83 c4 0c             	add    $0xc,%esp
 805b2e6:	83 f8 ff             	cmp    $0xffffffff,%eax
 805b2e9:	0f 84 bc 00 00 00    	je     805b3ab <__afl_setup_abort>
 805b2ef:	c6 00 01             	movb   $0x1,(%eax)
 805b2f2:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 805b2f7:	89 c2                	mov    %eax,%edx
 805b2f9:	59                   	pop    %ecx
 805b2fa:	58                   	pop    %eax

0805b2fb <__afl_forkserver>:
 805b2fb:	50                   	push   %eax
 805b2fc:	51                   	push   %ecx
 805b2fd:	52                   	push   %edx
 805b2fe:	6a 04                	push   $0x4
 805b300:	68 e0 bd 43 08       	push   $0x843bde0
 805b305:	68 c7 00 00 00       	push   $0xc7
 805b30a:	e8 81 e0 fe ff       	call   8049390 <write@plt>
 805b30f:	83 c4 0c             	add    $0xc,%esp
 805b312:	83 f8 04             	cmp    $0x4,%eax
 805b315:	75 6e                	jne    805b385 <__afl_fork_resume>

0805b317 <__afl_fork_wait_loop>:
 805b317:	6a 04                	push   $0x4
 805b319:	68 e0 bd 43 08       	push   $0x843bde0
 805b31e:	68 c6 00 00 00       	push   $0xc6
 805b323:	e8 f8 dd fe ff       	call   8049120 <read@plt>
 805b328:	83 c4 0c             	add    $0xc,%esp
 805b32b:	83 f8 04             	cmp    $0x4,%eax
 805b32e:	75 74                	jne    805b3a4 <__afl_die>
 805b330:	e8 eb e0 fe ff       	call   8049420 <fork@plt>
 805b335:	83 f8 00             	cmp    $0x0,%eax
 805b338:	7c 6a                	jl     805b3a4 <__afl_die>
 805b33a:	74 49                	je     805b385 <__afl_fork_resume>
 805b33c:	a3 40 be 43 08       	mov    %eax,0x843be40
 805b341:	6a 04                	push   $0x4
 805b343:	68 40 be 43 08       	push   $0x843be40
 805b348:	68 c7 00 00 00       	push   $0xc7
 805b34d:	e8 3e e0 fe ff       	call   8049390 <write@plt>
 805b352:	83 c4 0c             	add    $0xc,%esp
 805b355:	6a 00                	push   $0x0
 805b357:	68 e0 bd 43 08       	push   $0x843bde0
 805b35c:	ff 35 40 be 43 08    	pushl  0x843be40
 805b362:	e8 d9 de fe ff       	call   8049240 <waitpid@plt>
 805b367:	83 c4 0c             	add    $0xc,%esp
 805b36a:	83 f8 00             	cmp    $0x0,%eax
 805b36d:	7e 35                	jle    805b3a4 <__afl_die>
 805b36f:	6a 04                	push   $0x4
 805b371:	68 e0 bd 43 08       	push   $0x843bde0
 805b376:	68 c7 00 00 00       	push   $0xc7
 805b37b:	e8 10 e0 fe ff       	call   8049390 <write@plt>
 805b380:	83 c4 0c             	add    $0xc,%esp
 805b383:	eb 92                	jmp    805b317 <__afl_fork_wait_loop>

0805b385 <__afl_fork_resume>:
 805b385:	68 c6 00 00 00       	push   $0xc6
 805b38a:	e8 71 e1 fe ff       	call   8049500 <close@plt>
 805b38f:	68 c7 00 00 00       	push   $0xc7
 805b394:	e8 67 e1 fe ff       	call   8049500 <close@plt>
 805b399:	83 c4 08             	add    $0x8,%esp
 805b39c:	5a                   	pop    %edx
 805b39d:	59                   	pop    %ecx
 805b39e:	58                   	pop    %eax
 805b39f:	e9 ea fe ff ff       	jmp    805b28e <__afl_store>

0805b3a4 <__afl_die>:
 805b3a4:	31 c0                	xor    %eax,%eax
 805b3a6:	e8 a5 dd fe ff       	call   8049150 <_exit@plt>

0805b3ab <__afl_setup_abort>:
 805b3ab:	fe 05 60 be 43 08    	incb   0x843be60
 805b3b1:	59                   	pop    %ecx
 805b3b2:	58                   	pop    %eax
 805b3b3:	e9 ee fe ff ff       	jmp    805b2a6 <__afl_return>

0805b3b8 <.AFL_SHM_ENV>:
 805b3b8:	5f                   	pop    %edi
 805b3b9:	5f                   	pop    %edi
 805b3ba:	41                   	inc    %ecx
 805b3bb:	46                   	inc    %esi
 805b3bc:	4c                   	dec    %esp
 805b3bd:	5f                   	pop    %edi
 805b3be:	53                   	push   %ebx
 805b3bf:	48                   	dec    %eax
 805b3c0:	4d                   	dec    %ebp
 805b3c1:	5f                   	pop    %edi
 805b3c2:	49                   	dec    %ecx
 805b3c3:	44                   	inc    %esp
 805b3c4:	00 66 90             	add    %ah,-0x70(%esi)
 805b3c7:	66 90                	xchg   %ax,%ax
 805b3c9:	66 90                	xchg   %ax,%ax
 805b3cb:	66 90                	xchg   %ax,%ax
 805b3cd:	66 90                	xchg   %ax,%ax
 805b3cf:	90                   	nop

0805b3d0 <fopen_safer>:

/* Like fopen, but do not return stdin, stdout, or stderr.  */

FILE *
fopen_safer (char const *file, char const *mode)
{
 805b3d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b3d4:	89 3c 24             	mov    %edi,(%esp)
 805b3d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b3db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b3df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b3e3:	b9 0e c5 00 00       	mov    $0xc50e,%ecx
 805b3e8:	e8 03 06 00 00       	call   805b9f0 <__afl_maybe_log>
 805b3ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b3f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b3f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b3f9:	8b 3c 24             	mov    (%esp),%edi
 805b3fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b400:	57                   	push   %edi
 805b401:	56                   	push   %esi
 805b402:	53                   	push   %ebx
 805b403:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  FILE *fp = ({if (((file)) && ((file)))  {int lava_268 = 0;
 805b407:	85 db                	test   %ebx,%ebx
 805b409:	0f 84 99 03 00 00    	je     805b7a8 <fopen_safer+0x3d8>
 805b40f:	90                   	nop
 805b410:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b414:	89 3c 24             	mov    %edi,(%esp)
 805b417:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b41b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b41f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b423:	b9 da 51 00 00       	mov    $0x51da,%ecx
 805b428:	e8 c3 05 00 00       	call   805b9f0 <__afl_maybe_log>
 805b42d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b431:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b435:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b439:	8b 3c 24             	mov    (%esp),%edi
 805b43c:	8d 64 24 10          	lea    0x10(%esp),%esp
  lava_268 |= ((unsigned char *) (file))[0] << (0*8);lava_268 |= ((unsigned char *) (file))[1] << (1*8);lava_268 |= ((unsigned char *) (file))[2] << (2*8);lava_268 |= ((unsigned char *) (file))[3] << (3*8);lava_set(268,lava_268);
 805b440:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 805b444:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 805b448:	83 ec 08             	sub    $0x8,%esp
 805b44b:	0f b6 13             	movzbl (%ebx),%edx
 805b44e:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
 805b452:	c1 e1 08             	shl    $0x8,%ecx
 805b455:	c1 e0 10             	shl    $0x10,%eax
 805b458:	09 c8                	or     %ecx,%eax
 805b45a:	c1 e7 18             	shl    $0x18,%edi
 805b45d:	09 d0                	or     %edx,%eax
 805b45f:	09 f8                	or     %edi,%eax
 805b461:	50                   	push   %eax
 805b462:	68 0c 01 00 00       	push   $0x10c
 805b467:	e8 b4 b7 ff ff       	call   8056c20 <lava_set>
  int lava_279 = 0;
  lava_279 |= ((unsigned char *) (file))[0] << (0*8);lava_279 |= ((unsigned char *) (file))[1] << (1*8);lava_279 |= ((unsigned char *) (file))[2] << (2*8);lava_279 |= ((unsigned char *) (file))[3] << (3*8);lava_set(279,lava_279);
 805b46c:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 805b470:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 805b474:	5e                   	pop    %esi
 805b475:	0f b6 13             	movzbl (%ebx),%edx
 805b478:	5f                   	pop    %edi
 805b479:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
 805b47d:	c1 e1 08             	shl    $0x8,%ecx
 805b480:	c1 e0 10             	shl    $0x10,%eax
 805b483:	09 c8                	or     %ecx,%eax
 805b485:	09 d0                	or     %edx,%eax
 805b487:	c1 e7 18             	shl    $0x18,%edi
 805b48a:	09 f8                	or     %edi,%eax
 805b48c:	50                   	push   %eax
 805b48d:	68 17 01 00 00       	push   $0x117
 805b492:	e8 89 b7 ff ff       	call   8056c20 <lava_set>
  int lava_301 = 0;
  lava_301 |= ((unsigned char *) (file))[0] << (0*8);lava_301 |= ((unsigned char *) (file))[1] << (1*8);lava_301 |= ((unsigned char *) (file))[2] << (2*8);lava_301 |= ((unsigned char *) (file))[3] << (3*8);lava_set(301,lava_301);
 805b497:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 805b49b:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 805b49f:	0f b6 13             	movzbl (%ebx),%edx
 805b4a2:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
 805b4a6:	c1 e1 08             	shl    $0x8,%ecx
 805b4a9:	c1 e0 10             	shl    $0x10,%eax
 805b4ac:	09 c8                	or     %ecx,%eax
 805b4ae:	c1 e7 18             	shl    $0x18,%edi
 805b4b1:	09 d0                	or     %edx,%eax
 805b4b3:	5a                   	pop    %edx
 805b4b4:	59                   	pop    %ecx
 805b4b5:	09 f8                	or     %edi,%eax
 805b4b7:	50                   	push   %eax
 805b4b8:	68 2d 01 00 00       	push   $0x12d
 805b4bd:	e8 5e b7 ff ff       	call   8056c20 <lava_set>
  int lava_308 = 0;
  lava_308 |= ((unsigned char *) (file))[0] << (0*8);lava_308 |= ((unsigned char *) (file))[1] << (1*8);lava_308 |= ((unsigned char *) (file))[2] << (2*8);lava_308 |= ((unsigned char *) (file))[3] << (3*8);lava_set(308,lava_308);
 805b4c2:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 805b4c6:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 805b4ca:	5e                   	pop    %esi
 805b4cb:	0f b6 13             	movzbl (%ebx),%edx
 805b4ce:	5f                   	pop    %edi
 805b4cf:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
 805b4d3:	c1 e1 08             	shl    $0x8,%ecx
 805b4d6:	c1 e0 10             	shl    $0x10,%eax
 805b4d9:	09 c8                	or     %ecx,%eax
 805b4db:	09 d0                	or     %edx,%eax
 805b4dd:	c1 e7 18             	shl    $0x18,%edi
 805b4e0:	09 f8                	or     %edi,%eax
 805b4e2:	50                   	push   %eax
 805b4e3:	68 34 01 00 00       	push   $0x134
 805b4e8:	e8 33 b7 ff ff       	call   8056c20 <lava_set>
  }FILE * kbcieiubweuhc1804289383 = fopen (file+(lava_get(314))*(0x6c617527==(lava_get(314))||0x2775616c==(lava_get(314))), mode);if (((file)) && ((file)))  {int lava_269 = 0;
 805b4ed:	c7 04 24 3a 01 00 00 	movl   $0x13a,(%esp)
 805b4f4:	e8 67 b7 ff ff       	call   8056c60 <lava_get>
 805b4f9:	c7 04 24 3a 01 00 00 	movl   $0x13a,(%esp)
 805b500:	89 c6                	mov    %eax,%esi
 805b502:	e8 59 b7 ff ff       	call   8056c60 <lava_get>
 805b507:	83 c4 10             	add    $0x10,%esp
 805b50a:	3d 27 75 61 6c       	cmp    $0x6c617527,%eax
 805b50f:	0f 84 ff 03 00 00    	je     805b914 <fopen_safer+0x544>
 805b515:	8d 76 00             	lea    0x0(%esi),%esi
 805b518:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b51c:	89 3c 24             	mov    %edi,(%esp)
 805b51f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b523:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b527:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b52b:	b9 fa 1a 00 00       	mov    $0x1afa,%ecx
 805b530:	e8 bb 04 00 00       	call   805b9f0 <__afl_maybe_log>
 805b535:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b539:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b53d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b541:	8b 3c 24             	mov    (%esp),%edi
 805b544:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b548:	83 ec 0c             	sub    $0xc,%esp
 805b54b:	68 3a 01 00 00       	push   $0x13a
 805b550:	e8 0b b7 ff ff       	call   8056c60 <lava_get>
 805b555:	31 c9                	xor    %ecx,%ecx
 805b557:	3d 6c 61 75 27       	cmp    $0x2775616c,%eax
 805b55c:	89 f0                	mov    %esi,%eax
 805b55e:	0f 94 c1             	sete   %cl
 805b561:	0f af c1             	imul   %ecx,%eax
 805b564:	5f                   	pop    %edi
 805b565:	5a                   	pop    %edx
 805b566:	01 d8                	add    %ebx,%eax
 805b568:	ff 74 24 1c          	pushl  0x1c(%esp)
 805b56c:	50                   	push   %eax
 805b56d:	e8 9e dc fe ff       	call   8049210 <fopen64@plt>
 805b572:	83 c4 10             	add    $0x10,%esp
 805b575:	89 c7                	mov    %eax,%edi
 805b577:	90                   	nop
lava_269 |= ((unsigned char *) (file))[0] << (0*8);lava_269 |= ((unsigned char *) (file))[1] << (1*8);lava_269 |= ((unsigned char *) (file))[2] << (2*8);lava_269 |= ((unsigned char *) (file))[3] << (3*8);lava_set(269,lava_269);
 805b578:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b57c:	89 3c 24             	mov    %edi,(%esp)
 805b57f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b583:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b587:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b58b:	b9 50 69 00 00       	mov    $0x6950,%ecx
 805b590:	e8 5b 04 00 00       	call   805b9f0 <__afl_maybe_log>
 805b595:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b599:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b59d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b5a1:	8b 3c 24             	mov    (%esp),%edi
 805b5a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b5a8:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
 805b5ac:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 805b5b0:	83 ec 08             	sub    $0x8,%esp
 805b5b3:	0f b6 13             	movzbl (%ebx),%edx
 805b5b6:	c1 e6 08             	shl    $0x8,%esi
 805b5b9:	c1 e0 10             	shl    $0x10,%eax
 805b5bc:	09 f0                	or     %esi,%eax
 805b5be:	0f b6 73 03          	movzbl 0x3(%ebx),%esi
 805b5c2:	09 d0                	or     %edx,%eax
 805b5c4:	c1 e6 18             	shl    $0x18,%esi
 805b5c7:	09 f0                	or     %esi,%eax
 805b5c9:	50                   	push   %eax
 805b5ca:	68 0d 01 00 00       	push   $0x10d
 805b5cf:	e8 4c b6 ff ff       	call   8056c20 <lava_set>
int lava_302 = 0;
lava_302 |= ((unsigned char *) (file))[0] << (0*8);lava_302 |= ((unsigned char *) (file))[1] << (1*8);lava_302 |= ((unsigned char *) (file))[2] << (2*8);lava_302 |= ((unsigned char *) (file))[3] << (3*8);lava_set(302,lava_302);
 805b5d4:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 805b5d8:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 805b5dc:	0f b6 33             	movzbl (%ebx),%esi
 805b5df:	0f b6 5b 03          	movzbl 0x3(%ebx),%ebx
 805b5e3:	5a                   	pop    %edx
 805b5e4:	c1 e1 08             	shl    $0x8,%ecx
 805b5e7:	c1 e0 10             	shl    $0x10,%eax
 805b5ea:	09 c8                	or     %ecx,%eax
 805b5ec:	c1 e3 18             	shl    $0x18,%ebx
 805b5ef:	59                   	pop    %ecx
 805b5f0:	09 f0                	or     %esi,%eax
 805b5f2:	09 d8                	or     %ebx,%eax
 805b5f4:	50                   	push   %eax
 805b5f5:	68 2e 01 00 00       	push   $0x12e
 805b5fa:	e8 21 b6 ff ff       	call   8056c20 <lava_set>
 805b5ff:	83 c4 10             	add    $0x10,%esp
 805b602:	66 90                	xchg   %ax,%ax
 805b604:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b608:	89 3c 24             	mov    %edi,(%esp)
 805b60b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b60f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b613:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b617:	b9 3c 0e 00 00       	mov    $0xe3c,%ecx
 805b61c:	e8 cf 03 00 00       	call   805b9f0 <__afl_maybe_log>
 805b621:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b625:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b629:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b62d:	8b 3c 24             	mov    (%esp),%edi
 805b630:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b634:	31 db                	xor    %ebx,%ebx
}kbcieiubweuhc1804289383;});

  if (fp)
 805b636:	85 ff                	test   %edi,%edi
 805b638:	0f 84 2e 01 00 00    	je     805b76c <fopen_safer+0x39c>
 805b63e:	66 90                	xchg   %ax,%ax
 805b640:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b644:	89 3c 24             	mov    %edi,(%esp)
 805b647:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b64b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b64f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b653:	b9 83 d2 00 00       	mov    $0xd283,%ecx
 805b658:	e8 93 03 00 00       	call   805b9f0 <__afl_maybe_log>
 805b65d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b661:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b665:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b669:	8b 3c 24             	mov    (%esp),%edi
 805b66c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      int fd = fileno (fp+(lava_get(317))*(0x6c617524==(lava_get(317))||0x2475616c==(lava_get(317))));
 805b670:	83 ec 0c             	sub    $0xc,%esp
 805b673:	68 3d 01 00 00       	push   $0x13d
 805b678:	e8 e3 b5 ff ff       	call   8056c60 <lava_get>
 805b67d:	c7 04 24 3d 01 00 00 	movl   $0x13d,(%esp)
 805b684:	89 c6                	mov    %eax,%esi
 805b686:	e8 d5 b5 ff ff       	call   8056c60 <lava_get>
 805b68b:	83 c4 10             	add    $0x10,%esp
 805b68e:	3d 24 75 61 6c       	cmp    $0x6c617524,%eax
 805b693:	b9 01 00 00 00       	mov    $0x1,%ecx
 805b698:	74 4c                	je     805b6e6 <fopen_safer+0x316>
 805b69a:	66 90                	xchg   %ax,%ax
 805b69c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b6a0:	89 3c 24             	mov    %edi,(%esp)
 805b6a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b6a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b6ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b6af:	b9 38 6f 00 00       	mov    $0x6f38,%ecx
 805b6b4:	e8 37 03 00 00       	call   805b9f0 <__afl_maybe_log>
 805b6b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b6bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b6c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b6c5:	8b 3c 24             	mov    (%esp),%edi
 805b6c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b6cc:	83 ec 0c             	sub    $0xc,%esp
 805b6cf:	68 3d 01 00 00       	push   $0x13d
 805b6d4:	e8 87 b5 ff ff       	call   8056c60 <lava_get>
 805b6d9:	31 c9                	xor    %ecx,%ecx
 805b6db:	83 c4 10             	add    $0x10,%esp
 805b6de:	3d 6c 61 75 24       	cmp    $0x2475616c,%eax
 805b6e3:	0f 94 c1             	sete   %cl
 805b6e6:	66 90                	xchg   %ax,%ax
 805b6e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b6ec:	89 3c 24             	mov    %edi,(%esp)
 805b6ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b6f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b6f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b6fb:	b9 3c 28 00 00       	mov    $0x283c,%ecx
 805b700:	e8 eb 02 00 00       	call   805b9f0 <__afl_maybe_log>
 805b705:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b709:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b70d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b711:	8b 3c 24             	mov    (%esp),%edi
 805b714:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b718:	69 d6 94 00 00 00    	imul   $0x94,%esi,%edx
 805b71e:	83 ec 0c             	sub    $0xc,%esp
 805b721:	89 fb                	mov    %edi,%ebx
 805b723:	0f af ca             	imul   %edx,%ecx
 805b726:	01 f9                	add    %edi,%ecx
 805b728:	51                   	push   %ecx
 805b729:	e8 c2 dc fe ff       	call   80493f0 <fileno@plt>

      if (0 <= fd && fd <= STDERR_FILENO)
 805b72e:	83 c4 10             	add    $0x10,%esp
 805b731:	83 f8 02             	cmp    $0x2,%eax
 805b734:	0f 86 fe 00 00 00    	jbe    805b838 <fopen_safer+0x468>
 805b73a:	66 90                	xchg   %ax,%ax
 805b73c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b740:	89 3c 24             	mov    %edi,(%esp)
 805b743:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b747:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b74b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b74f:	b9 a8 32 00 00       	mov    $0x32a8,%ecx
 805b754:	e8 97 02 00 00       	call   805b9f0 <__afl_maybe_log>
 805b759:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b75d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b761:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b765:	8b 3c 24             	mov    (%esp),%edi
 805b768:	8d 64 24 10          	lea    0x10(%esp),%esp
            }
        }
    }

  return fp;
}
 805b76c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b770:	89 3c 24             	mov    %edi,(%esp)
 805b773:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b777:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b77b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b77f:	b9 7b f0 00 00       	mov    $0xf07b,%ecx
 805b784:	e8 67 02 00 00       	call   805b9f0 <__afl_maybe_log>
 805b789:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b78d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b791:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b795:	8b 3c 24             	mov    (%esp),%edi
 805b798:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b79c:	89 d8                	mov    %ebx,%eax
 805b79e:	5b                   	pop    %ebx
 805b79f:	5e                   	pop    %esi
 805b7a0:	5f                   	pop    %edi
 805b7a1:	c3                   	ret    
 805b7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  lava_279 |= ((unsigned char *) (file))[0] << (0*8);lava_279 |= ((unsigned char *) (file))[1] << (1*8);lava_279 |= ((unsigned char *) (file))[2] << (2*8);lava_279 |= ((unsigned char *) (file))[3] << (3*8);lava_set(279,lava_279);
  int lava_301 = 0;
  lava_301 |= ((unsigned char *) (file))[0] << (0*8);lava_301 |= ((unsigned char *) (file))[1] << (1*8);lava_301 |= ((unsigned char *) (file))[2] << (2*8);lava_301 |= ((unsigned char *) (file))[3] << (3*8);lava_set(301,lava_301);
  int lava_308 = 0;
  lava_308 |= ((unsigned char *) (file))[0] << (0*8);lava_308 |= ((unsigned char *) (file))[1] << (1*8);lava_308 |= ((unsigned char *) (file))[2] << (2*8);lava_308 |= ((unsigned char *) (file))[3] << (3*8);lava_set(308,lava_308);
  }FILE * kbcieiubweuhc1804289383 = fopen (file+(lava_get(314))*(0x6c617527==(lava_get(314))||0x2775616c==(lava_get(314))), mode);if (((file)) && ((file)))  {int lava_269 = 0;
 805b7a8:	83 ec 0c             	sub    $0xc,%esp
 805b7ab:	68 3a 01 00 00       	push   $0x13a
 805b7b0:	e8 ab b4 ff ff       	call   8056c60 <lava_get>
 805b7b5:	c7 04 24 3a 01 00 00 	movl   $0x13a,(%esp)
 805b7bc:	89 c6                	mov    %eax,%esi
 805b7be:	e8 9d b4 ff ff       	call   8056c60 <lava_get>
 805b7c3:	83 c4 10             	add    $0x10,%esp
 805b7c6:	3d 27 75 61 6c       	cmp    $0x6c617527,%eax
 805b7cb:	0f 84 8c 01 00 00    	je     805b95d <fopen_safer+0x58d>
 805b7d1:	8d 76 00             	lea    0x0(%esi),%esi
 805b7d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b7d8:	89 3c 24             	mov    %edi,(%esp)
 805b7db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b7df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b7e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b7e7:	b9 d1 65 00 00       	mov    $0x65d1,%ecx
 805b7ec:	e8 ff 01 00 00       	call   805b9f0 <__afl_maybe_log>
 805b7f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b7f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b7f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b7fd:	8b 3c 24             	mov    (%esp),%edi
 805b800:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b804:	83 ec 0c             	sub    $0xc,%esp
 805b807:	68 3a 01 00 00       	push   $0x13a
 805b80c:	e8 4f b4 ff ff       	call   8056c60 <lava_get>
 805b811:	3d 6c 61 75 27       	cmp    $0x2775616c,%eax
 805b816:	0f 94 c0             	sete   %al
 805b819:	5a                   	pop    %edx
 805b81a:	0f b6 d0             	movzbl %al,%edx
 805b81d:	0f af f2             	imul   %edx,%esi
 805b820:	59                   	pop    %ecx
 805b821:	ff 74 24 1c          	pushl  0x1c(%esp)
 805b825:	56                   	push   %esi
 805b826:	e8 e5 d9 fe ff       	call   8049210 <fopen64@plt>
 805b82b:	83 c4 10             	add    $0x10,%esp
 805b82e:	89 c7                	mov    %eax,%edi
 805b830:	e9 cd fd ff ff       	jmp    805b602 <fopen_safer+0x232>
 805b835:	8d 76 00             	lea    0x0(%esi),%esi
    {
      int fd = fileno (fp+(lava_get(317))*(0x6c617524==(lava_get(317))||0x2475616c==(lava_get(317))));

      if (0 <= fd && fd <= STDERR_FILENO)
        {
          int f = dup_safer (fd);
 805b838:	83 ec 0c             	sub    $0xc,%esp
 805b83b:	50                   	push   %eax
 805b83c:	e8 1f 6d 00 00       	call   8062560 <dup_safer>

          if (f < 0)
 805b841:	83 c4 10             	add    $0x10,%esp
 805b844:	85 c0                	test   %eax,%eax
    {
      int fd = fileno (fp+(lava_get(317))*(0x6c617524==(lava_get(317))||0x2475616c==(lava_get(317))));

      if (0 <= fd && fd <= STDERR_FILENO)
        {
          int f = dup_safer (fd);
 805b846:	89 c6                	mov    %eax,%esi

          if (f < 0)
 805b848:	0f 88 62 01 00 00    	js     805b9b0 <fopen_safer+0x5e0>
 805b84e:	66 90                	xchg   %ax,%ax
 805b850:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b854:	89 3c 24             	mov    %edi,(%esp)
 805b857:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b85b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b85f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b863:	b9 d3 fe 00 00       	mov    $0xfed3,%ecx
 805b868:	e8 83 01 00 00       	call   805b9f0 <__afl_maybe_log>
 805b86d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b871:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b875:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b879:	8b 3c 24             	mov    (%esp),%edi
 805b87c:	8d 64 24 10          	lea    0x10(%esp),%esp
              fclose (fp);
              errno = e;
              return NULL;
            }

          if (fclose (fp) != 0
 805b880:	83 ec 0c             	sub    $0xc,%esp
 805b883:	57                   	push   %edi
 805b884:	e8 d7 86 00 00       	call   8063f60 <rpl_fclose>
 805b889:	83 c4 10             	add    $0x10,%esp
 805b88c:	85 c0                	test   %eax,%eax
 805b88e:	0f 85 3c 01 00 00    	jne    805b9d0 <fopen_safer+0x600>
 805b894:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b898:	89 3c 24             	mov    %edi,(%esp)
 805b89b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b89f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b8a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b8a7:	b9 ac f9 00 00       	mov    $0xf9ac,%ecx
 805b8ac:	e8 3f 01 00 00       	call   805b9f0 <__afl_maybe_log>
 805b8b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b8b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b8b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b8bd:	8b 3c 24             	mov    (%esp),%edi
 805b8c0:	8d 64 24 10          	lea    0x10(%esp),%esp
              || ! (fp = fdopen (f, mode)))
 805b8c4:	83 ec 08             	sub    $0x8,%esp
 805b8c7:	ff 74 24 1c          	pushl  0x1c(%esp)
 805b8cb:	56                   	push   %esi
 805b8cc:	e8 3f da fe ff       	call   8049310 <fdopen@plt>
 805b8d1:	83 c4 10             	add    $0x10,%esp
 805b8d4:	85 c0                	test   %eax,%eax
 805b8d6:	0f 84 f4 00 00 00    	je     805b9d0 <fopen_safer+0x600>
 805b8dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b8e0:	89 3c 24             	mov    %edi,(%esp)
 805b8e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b8e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b8eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b8ef:	b9 c5 2e 00 00       	mov    $0x2ec5,%ecx
 805b8f4:	e8 f7 00 00 00       	call   805b9f0 <__afl_maybe_log>
 805b8f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b8fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b901:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b905:	8b 3c 24             	mov    (%esp),%edi
 805b908:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b90c:	89 c3                	mov    %eax,%ebx
            }
        }
    }

  return fp;
}
 805b90e:	89 d8                	mov    %ebx,%eax
 805b910:	5b                   	pop    %ebx
 805b911:	5e                   	pop    %esi
 805b912:	5f                   	pop    %edi
 805b913:	c3                   	ret    
  lava_279 |= ((unsigned char *) (file))[0] << (0*8);lava_279 |= ((unsigned char *) (file))[1] << (1*8);lava_279 |= ((unsigned char *) (file))[2] << (2*8);lava_279 |= ((unsigned char *) (file))[3] << (3*8);lava_set(279,lava_279);
  int lava_301 = 0;
  lava_301 |= ((unsigned char *) (file))[0] << (0*8);lava_301 |= ((unsigned char *) (file))[1] << (1*8);lava_301 |= ((unsigned char *) (file))[2] << (2*8);lava_301 |= ((unsigned char *) (file))[3] << (3*8);lava_set(301,lava_301);
  int lava_308 = 0;
  lava_308 |= ((unsigned char *) (file))[0] << (0*8);lava_308 |= ((unsigned char *) (file))[1] << (1*8);lava_308 |= ((unsigned char *) (file))[2] << (2*8);lava_308 |= ((unsigned char *) (file))[3] << (3*8);lava_set(308,lava_308);
  }FILE * kbcieiubweuhc1804289383 = fopen (file+(lava_get(314))*(0x6c617527==(lava_get(314))||0x2775616c==(lava_get(314))), mode);if (((file)) && ((file)))  {int lava_269 = 0;
 805b914:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b918:	89 3c 24             	mov    %edi,(%esp)
 805b91b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b91f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b923:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b927:	b9 8a 9c 00 00       	mov    $0x9c8a,%ecx
 805b92c:	e8 bf 00 00 00       	call   805b9f0 <__afl_maybe_log>
 805b931:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b935:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b939:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b93d:	8b 3c 24             	mov    (%esp),%edi
 805b940:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b944:	8d 14 33             	lea    (%ebx,%esi,1),%edx
 805b947:	57                   	push   %edi
 805b948:	57                   	push   %edi
 805b949:	ff 74 24 1c          	pushl  0x1c(%esp)
 805b94d:	52                   	push   %edx
 805b94e:	e8 bd d8 fe ff       	call   8049210 <fopen64@plt>
 805b953:	83 c4 10             	add    $0x10,%esp
 805b956:	89 c7                	mov    %eax,%edi
 805b958:	e9 1a fc ff ff       	jmp    805b577 <fopen_safer+0x1a7>
 805b95d:	8d 76 00             	lea    0x0(%esi),%esi
 805b960:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b964:	89 3c 24             	mov    %edi,(%esp)
 805b967:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b96b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b96f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b973:	b9 02 81 00 00       	mov    $0x8102,%ecx
 805b978:	e8 73 00 00 00       	call   805b9f0 <__afl_maybe_log>
 805b97d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b981:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b985:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b989:	8b 3c 24             	mov    (%esp),%edi
 805b98c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b990:	51                   	push   %ecx
 805b991:	51                   	push   %ecx
 805b992:	ff 74 24 1c          	pushl  0x1c(%esp)
 805b996:	56                   	push   %esi
 805b997:	e8 74 d8 fe ff       	call   8049210 <fopen64@plt>
 805b99c:	83 c4 10             	add    $0x10,%esp
 805b99f:	89 c7                	mov    %eax,%edi
 805b9a1:	e9 5c fc ff ff       	jmp    805b602 <fopen_safer+0x232>
 805b9a6:	8d 76 00             	lea    0x0(%esi),%esi
 805b9a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
        {
          int f = dup_safer (fd);

          if (f < 0)
            {
              int e = errno;
 805b9b0:	e8 2b da fe ff       	call   80493e0 <__errno_location@plt>
              fclose (fp);
 805b9b5:	83 ec 0c             	sub    $0xc,%esp
        {
          int f = dup_safer (fd);

          if (f < 0)
            {
              int e = errno;
 805b9b8:	8b 38                	mov    (%eax),%edi
 805b9ba:	89 c6                	mov    %eax,%esi
              fclose (fp);
 805b9bc:	53                   	push   %ebx
              errno = e;
              return NULL;
 805b9bd:	31 db                	xor    %ebx,%ebx
          int f = dup_safer (fd);

          if (f < 0)
            {
              int e = errno;
              fclose (fp);
 805b9bf:	e8 9c 85 00 00       	call   8063f60 <rpl_fclose>
              errno = e;
 805b9c4:	89 3e                	mov    %edi,(%esi)
              return NULL;
 805b9c6:	83 c4 10             	add    $0x10,%esp
 805b9c9:	e9 9e fd ff ff       	jmp    805b76c <fopen_safer+0x39c>
 805b9ce:	66 90                	xchg   %ax,%ax
            }

          if (fclose (fp) != 0
              || ! (fp = fdopen (f, mode)))
            {
              int e = errno;
 805b9d0:	e8 0b da fe ff       	call   80493e0 <__errno_location@plt>
              close (f);
 805b9d5:	83 ec 0c             	sub    $0xc,%esp
            }

          if (fclose (fp) != 0
              || ! (fp = fdopen (f, mode)))
            {
              int e = errno;
 805b9d8:	8b 38                	mov    (%eax),%edi
 805b9da:	89 c3                	mov    %eax,%ebx
              close (f);
 805b9dc:	56                   	push   %esi
 805b9dd:	e8 1e db fe ff       	call   8049500 <close@plt>
              errno = e;
 805b9e2:	89 3b                	mov    %edi,(%ebx)
              return NULL;
 805b9e4:	83 c4 10             	add    $0x10,%esp
 805b9e7:	31 db                	xor    %ebx,%ebx
 805b9e9:	e9 7e fd ff ff       	jmp    805b76c <fopen_safer+0x39c>
 805b9ee:	66 90                	xchg   %ax,%ax

0805b9f0 <__afl_maybe_log>:
 805b9f0:	9f                   	lahf   
 805b9f1:	0f 90 c0             	seto   %al
 805b9f4:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 805b9fa:	85 d2                	test   %edx,%edx
 805b9fc:	74 22                	je     805ba20 <__afl_setup>

0805b9fe <__afl_store>:
 805b9fe:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 805ba04:	31 cf                	xor    %ecx,%edi
 805ba06:	d1 e9                	shr    %ecx
 805ba08:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 805ba0e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805ba12:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805ba16 <__afl_return>:
 805ba16:	04 7f                	add    $0x7f,%al
 805ba18:	9e                   	sahf   
 805ba19:	c3                   	ret    
 805ba1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805ba20 <__afl_setup>:
 805ba20:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 805ba27:	75 ed                	jne    805ba16 <__afl_return>
 805ba29:	50                   	push   %eax
 805ba2a:	51                   	push   %ecx
 805ba2b:	68 28 bb 05 08       	push   $0x805bb28
 805ba30:	e8 7b d8 fe ff       	call   80492b0 <getenv@plt>
 805ba35:	83 c4 04             	add    $0x4,%esp
 805ba38:	85 c0                	test   %eax,%eax
 805ba3a:	0f 84 db 00 00 00    	je     805bb1b <__afl_setup_abort>
 805ba40:	50                   	push   %eax
 805ba41:	e8 3a da fe ff       	call   8049480 <atoi@plt>
 805ba46:	83 c4 04             	add    $0x4,%esp
 805ba49:	6a 00                	push   $0x0
 805ba4b:	6a 00                	push   $0x0
 805ba4d:	50                   	push   %eax
 805ba4e:	e8 8d d7 fe ff       	call   80491e0 <shmat@plt>
 805ba53:	83 c4 0c             	add    $0xc,%esp
 805ba56:	83 f8 ff             	cmp    $0xffffffff,%eax
 805ba59:	0f 84 bc 00 00 00    	je     805bb1b <__afl_setup_abort>
 805ba5f:	c6 00 01             	movb   $0x1,(%eax)
 805ba62:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 805ba67:	89 c2                	mov    %eax,%edx
 805ba69:	59                   	pop    %ecx
 805ba6a:	58                   	pop    %eax

0805ba6b <__afl_forkserver>:
 805ba6b:	50                   	push   %eax
 805ba6c:	51                   	push   %ecx
 805ba6d:	52                   	push   %edx
 805ba6e:	6a 04                	push   $0x4
 805ba70:	68 e0 bd 43 08       	push   $0x843bde0
 805ba75:	68 c7 00 00 00       	push   $0xc7
 805ba7a:	e8 11 d9 fe ff       	call   8049390 <write@plt>
 805ba7f:	83 c4 0c             	add    $0xc,%esp
 805ba82:	83 f8 04             	cmp    $0x4,%eax
 805ba85:	75 6e                	jne    805baf5 <__afl_fork_resume>

0805ba87 <__afl_fork_wait_loop>:
 805ba87:	6a 04                	push   $0x4
 805ba89:	68 e0 bd 43 08       	push   $0x843bde0
 805ba8e:	68 c6 00 00 00       	push   $0xc6
 805ba93:	e8 88 d6 fe ff       	call   8049120 <read@plt>
 805ba98:	83 c4 0c             	add    $0xc,%esp
 805ba9b:	83 f8 04             	cmp    $0x4,%eax
 805ba9e:	75 74                	jne    805bb14 <__afl_die>
 805baa0:	e8 7b d9 fe ff       	call   8049420 <fork@plt>
 805baa5:	83 f8 00             	cmp    $0x0,%eax
 805baa8:	7c 6a                	jl     805bb14 <__afl_die>
 805baaa:	74 49                	je     805baf5 <__afl_fork_resume>
 805baac:	a3 40 be 43 08       	mov    %eax,0x843be40
 805bab1:	6a 04                	push   $0x4
 805bab3:	68 40 be 43 08       	push   $0x843be40
 805bab8:	68 c7 00 00 00       	push   $0xc7
 805babd:	e8 ce d8 fe ff       	call   8049390 <write@plt>
 805bac2:	83 c4 0c             	add    $0xc,%esp
 805bac5:	6a 00                	push   $0x0
 805bac7:	68 e0 bd 43 08       	push   $0x843bde0
 805bacc:	ff 35 40 be 43 08    	pushl  0x843be40
 805bad2:	e8 69 d7 fe ff       	call   8049240 <waitpid@plt>
 805bad7:	83 c4 0c             	add    $0xc,%esp
 805bada:	83 f8 00             	cmp    $0x0,%eax
 805badd:	7e 35                	jle    805bb14 <__afl_die>
 805badf:	6a 04                	push   $0x4
 805bae1:	68 e0 bd 43 08       	push   $0x843bde0
 805bae6:	68 c7 00 00 00       	push   $0xc7
 805baeb:	e8 a0 d8 fe ff       	call   8049390 <write@plt>
 805baf0:	83 c4 0c             	add    $0xc,%esp
 805baf3:	eb 92                	jmp    805ba87 <__afl_fork_wait_loop>

0805baf5 <__afl_fork_resume>:
 805baf5:	68 c6 00 00 00       	push   $0xc6
 805bafa:	e8 01 da fe ff       	call   8049500 <close@plt>
 805baff:	68 c7 00 00 00       	push   $0xc7
 805bb04:	e8 f7 d9 fe ff       	call   8049500 <close@plt>
 805bb09:	83 c4 08             	add    $0x8,%esp
 805bb0c:	5a                   	pop    %edx
 805bb0d:	59                   	pop    %ecx
 805bb0e:	58                   	pop    %eax
 805bb0f:	e9 ea fe ff ff       	jmp    805b9fe <__afl_store>

0805bb14 <__afl_die>:
 805bb14:	31 c0                	xor    %eax,%eax
 805bb16:	e8 35 d6 fe ff       	call   8049150 <_exit@plt>

0805bb1b <__afl_setup_abort>:
 805bb1b:	fe 05 60 be 43 08    	incb   0x843be60
 805bb21:	59                   	pop    %ecx
 805bb22:	58                   	pop    %eax
 805bb23:	e9 ee fe ff ff       	jmp    805ba16 <__afl_return>

0805bb28 <.AFL_SHM_ENV>:
 805bb28:	5f                   	pop    %edi
 805bb29:	5f                   	pop    %edi
 805bb2a:	41                   	inc    %ecx
 805bb2b:	46                   	inc    %esi
 805bb2c:	4c                   	dec    %esp
 805bb2d:	5f                   	pop    %edi
 805bb2e:	53                   	push   %ebx
 805bb2f:	48                   	dec    %eax
 805bb30:	4d                   	dec    %ebp
 805bb31:	5f                   	pop    %edi
 805bb32:	49                   	dec    %ecx
 805bb33:	44                   	inc    %esp
 805bb34:	00 66 90             	add    %ah,-0x70(%esi)
 805bb37:	66 90                	xchg   %ax,%ax
 805bb39:	66 90                	xchg   %ax,%ax
 805bb3b:	66 90                	xchg   %ax,%ax
 805bb3d:	66 90                	xchg   %ax,%ax
 805bb3f:	90                   	nop

0805bb40 <set_program_name>:
/* Set program_name, based on argv[0].
   argv0 must be a string allocated with indefinite extent, and must not be
   modified after this call.  */
void
set_program_name (const char *argv0)
{
 805bb40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bb44:	89 3c 24             	mov    %edi,(%esp)
 805bb47:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bb4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bb4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bb53:	b9 a3 e9 00 00       	mov    $0xe9a3,%ecx
 805bb58:	e8 1b 02 00 00       	call   805bd78 <__afl_maybe_log>
 805bb5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bb61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bb65:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bb69:	8b 3c 24             	mov    (%esp),%edi
 805bb6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bb70:	55                   	push   %ebp
 805bb71:	57                   	push   %edi
 805bb72:	56                   	push   %esi
 805bb73:	53                   	push   %ebx
 805bb74:	83 ec 0c             	sub    $0xc,%esp
 805bb77:	8b 5c 24 20          	mov    0x20(%esp),%ebx
  const char *slash;
  const char *base;

  /* Sanity check.  POSIX requires the invoking process to pass a non-NULL
     argv[0].  */
  if (argv0 == NULL)
 805bb7b:	85 db                	test   %ebx,%ebx
 805bb7d:	0f 84 a5 01 00 00    	je     805bd28 <set_program_name+0x1e8>
 805bb83:	90                   	nop
 805bb84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bb88:	89 3c 24             	mov    %edi,(%esp)
 805bb8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bb8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bb93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bb97:	b9 5f 3a 00 00       	mov    $0x3a5f,%ecx
 805bb9c:	e8 d7 01 00 00       	call   805bd78 <__afl_maybe_log>
 805bba1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bba5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bba9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bbad:	8b 3c 24             	mov    (%esp),%edi
 805bbb0:	8d 64 24 10          	lea    0x10(%esp),%esp
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
             stderr);
      abort ();
    }

  slash = strrchr (argv0, '/');
 805bbb4:	83 ec 08             	sub    $0x8,%esp
 805bbb7:	6a 2f                	push   $0x2f
 805bbb9:	53                   	push   %ebx
 805bbba:	e8 a1 d8 fe ff       	call   8049460 <strrchr@plt>
 805bbbf:	83 c4 10             	add    $0x10,%esp
  base = (slash != NULL ? slash + 1 : argv0);
 805bbc2:	85 c0                	test   %eax,%eax
 805bbc4:	0f 84 17 01 00 00    	je     805bce1 <set_program_name+0x1a1>
 805bbca:	66 90                	xchg   %ax,%ax
 805bbcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bbd0:	89 3c 24             	mov    %edi,(%esp)
 805bbd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bbd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bbdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bbdf:	b9 67 1f 00 00       	mov    $0x1f67,%ecx
 805bbe4:	e8 8f 01 00 00       	call   805bd78 <__afl_maybe_log>
 805bbe9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bbed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bbf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bbf5:	8b 3c 24             	mov    (%esp),%edi
 805bbf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bbfc:	8d 68 01             	lea    0x1(%eax),%ebp
 805bbff:	89 e9                	mov    %ebp,%ecx
 805bc01:	29 d9                	sub    %ebx,%ecx
  if (base - argv0 >= 7 && strncmp (base - 7, "/.libs/", 7) == 0)
 805bc03:	83 f9 06             	cmp    $0x6,%ecx
 805bc06:	0f 8e d5 00 00 00    	jle    805bce1 <set_program_name+0x1a1>
 805bc0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bc10:	89 3c 24             	mov    %edi,(%esp)
 805bc13:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bc17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bc1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bc1f:	b9 22 75 00 00       	mov    $0x7522,%ecx
 805bc24:	e8 4f 01 00 00       	call   805bd78 <__afl_maybe_log>
 805bc29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bc2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bc31:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bc35:	8b 3c 24             	mov    (%esp),%edi
 805bc38:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bc3c:	8d 70 fa             	lea    -0x6(%eax),%esi
 805bc3f:	b9 07 00 00 00       	mov    $0x7,%ecx
 805bc44:	bf f8 7c 06 08       	mov    $0x8067cf8,%edi
 805bc49:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 805bc4b:	0f 97 c2             	seta   %dl
 805bc4e:	0f 92 c1             	setb   %cl
 805bc51:	38 ca                	cmp    %cl,%dl
 805bc53:	0f 85 88 00 00 00    	jne    805bce1 <set_program_name+0x1a1>
 805bc59:	8d 76 00             	lea    0x0(%esi),%esi
 805bc5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bc60:	89 3c 24             	mov    %edi,(%esp)
 805bc63:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bc67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bc6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bc6f:	b9 22 84 00 00       	mov    $0x8422,%ecx
 805bc74:	e8 ff 00 00 00       	call   805bd78 <__afl_maybe_log>
 805bc79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bc7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bc81:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bc85:	8b 3c 24             	mov    (%esp),%edi
 805bc88:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      argv0 = base;
      if (strncmp (base, "lt-", 3) == 0)
 805bc8c:	b9 03 00 00 00       	mov    $0x3,%ecx
 805bc91:	bf 00 7d 06 08       	mov    $0x8067d00,%edi
 805bc96:	89 ee                	mov    %ebp,%esi
 805bc98:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 805bc9a:	89 eb                	mov    %ebp,%ebx
 805bc9c:	0f 97 c2             	seta   %dl
 805bc9f:	0f 92 c1             	setb   %cl
 805bca2:	38 ca                	cmp    %cl,%dl
 805bca4:	75 3b                	jne    805bce1 <set_program_name+0x1a1>
 805bca6:	66 90                	xchg   %ax,%ax
 805bca8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bcac:	89 3c 24             	mov    %edi,(%esp)
 805bcaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bcb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bcb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bcbb:	b9 1c 2f 00 00       	mov    $0x2f1c,%ecx
 805bcc0:	e8 b3 00 00 00       	call   805bd78 <__afl_maybe_log>
 805bcc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bcc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bccd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bcd1:	8b 3c 24             	mov    (%esp),%edi
 805bcd4:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          argv0 = base + 3;
 805bcd8:	8d 58 04             	lea    0x4(%eax),%ebx
          /* On glibc systems, remove the "lt-" prefix from the variable
             program_invocation_short_name.  */
#if HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME
          program_invocation_short_name = (char *) argv0;
 805bcdb:	89 1d c0 b2 06 08    	mov    %ebx,0x806b2c0
 805bce1:	8d 76 00             	lea    0x0(%esi),%esi
         /some/hidden/place/bin/cp: `foo' and `foo' are the same file
     not
         cp: `foo' and `foo' are the same file
   */

  program_name = argv0;
 805bce4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bce8:	89 3c 24             	mov    %edi,(%esp)
 805bceb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bcef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bcf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bcf7:	b9 18 3b 00 00       	mov    $0x3b18,%ecx
 805bcfc:	e8 77 00 00 00       	call   805bd78 <__afl_maybe_log>
 805bd01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bd05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bd09:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bd0d:	8b 3c 24             	mov    (%esp),%edi
 805bd10:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bd14:	89 1d 48 bc 43 08    	mov    %ebx,0x843bc48

  /* On glibc systems, the error() function comes from libc and uses the
     variable program_invocation_name, not program_name.  So set this variable
     as well.  */
#if HAVE_DECL_PROGRAM_INVOCATION_NAME
  program_invocation_name = (char *) argv0;
 805bd1a:	89 1d c8 b2 06 08    	mov    %ebx,0x806b2c8
#endif
}
 805bd20:	83 c4 0c             	add    $0xc,%esp
 805bd23:	5b                   	pop    %ebx
 805bd24:	5e                   	pop    %esi
 805bd25:	5f                   	pop    %edi
 805bd26:	5d                   	pop    %ebp
 805bd27:	c3                   	ret    
  /* Sanity check.  POSIX requires the invoking process to pass a non-NULL
     argv[0].  */
  if (argv0 == NULL)
    {
      /* It's a bug in the invoking program.  Help diagnosing it.  */
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
 805bd28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bd2c:	89 3c 24             	mov    %edi,(%esp)
 805bd2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bd33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bd37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bd3b:	b9 98 6b 00 00       	mov    $0x6b98,%ecx
 805bd40:	e8 33 00 00 00       	call   805bd78 <__afl_maybe_log>
 805bd45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bd49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bd4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bd51:	8b 3c 24             	mov    (%esp),%edi
 805bd54:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bd58:	ff 35 c4 b2 06 08    	pushl  0x806b2c4
 805bd5e:	6a 37                	push   $0x37
 805bd60:	6a 01                	push   $0x1
 805bd62:	68 c0 7c 06 08       	push   $0x8067cc0
 805bd67:	e8 b4 d4 fe ff       	call   8049220 <fwrite@plt>
             stderr);
      abort ();
 805bd6c:	e8 6f d7 fe ff       	call   80494e0 <abort@plt>
 805bd71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805bd78 <__afl_maybe_log>:
 805bd78:	9f                   	lahf   
 805bd79:	0f 90 c0             	seto   %al
 805bd7c:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 805bd82:	85 d2                	test   %edx,%edx
 805bd84:	74 22                	je     805bda8 <__afl_setup>

0805bd86 <__afl_store>:
 805bd86:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 805bd8c:	31 cf                	xor    %ecx,%edi
 805bd8e:	d1 e9                	shr    %ecx
 805bd90:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 805bd96:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805bd9a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805bd9e <__afl_return>:
 805bd9e:	04 7f                	add    $0x7f,%al
 805bda0:	9e                   	sahf   
 805bda1:	c3                   	ret    
 805bda2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805bda8 <__afl_setup>:
 805bda8:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 805bdaf:	75 ed                	jne    805bd9e <__afl_return>
 805bdb1:	50                   	push   %eax
 805bdb2:	51                   	push   %ecx
 805bdb3:	68 b0 be 05 08       	push   $0x805beb0
 805bdb8:	e8 f3 d4 fe ff       	call   80492b0 <getenv@plt>
 805bdbd:	83 c4 04             	add    $0x4,%esp
 805bdc0:	85 c0                	test   %eax,%eax
 805bdc2:	0f 84 db 00 00 00    	je     805bea3 <__afl_setup_abort>
 805bdc8:	50                   	push   %eax
 805bdc9:	e8 b2 d6 fe ff       	call   8049480 <atoi@plt>
 805bdce:	83 c4 04             	add    $0x4,%esp
 805bdd1:	6a 00                	push   $0x0
 805bdd3:	6a 00                	push   $0x0
 805bdd5:	50                   	push   %eax
 805bdd6:	e8 05 d4 fe ff       	call   80491e0 <shmat@plt>
 805bddb:	83 c4 0c             	add    $0xc,%esp
 805bdde:	83 f8 ff             	cmp    $0xffffffff,%eax
 805bde1:	0f 84 bc 00 00 00    	je     805bea3 <__afl_setup_abort>
 805bde7:	c6 00 01             	movb   $0x1,(%eax)
 805bdea:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 805bdef:	89 c2                	mov    %eax,%edx
 805bdf1:	59                   	pop    %ecx
 805bdf2:	58                   	pop    %eax

0805bdf3 <__afl_forkserver>:
 805bdf3:	50                   	push   %eax
 805bdf4:	51                   	push   %ecx
 805bdf5:	52                   	push   %edx
 805bdf6:	6a 04                	push   $0x4
 805bdf8:	68 e0 bd 43 08       	push   $0x843bde0
 805bdfd:	68 c7 00 00 00       	push   $0xc7
 805be02:	e8 89 d5 fe ff       	call   8049390 <write@plt>
 805be07:	83 c4 0c             	add    $0xc,%esp
 805be0a:	83 f8 04             	cmp    $0x4,%eax
 805be0d:	75 6e                	jne    805be7d <__afl_fork_resume>

0805be0f <__afl_fork_wait_loop>:
 805be0f:	6a 04                	push   $0x4
 805be11:	68 e0 bd 43 08       	push   $0x843bde0
 805be16:	68 c6 00 00 00       	push   $0xc6
 805be1b:	e8 00 d3 fe ff       	call   8049120 <read@plt>
 805be20:	83 c4 0c             	add    $0xc,%esp
 805be23:	83 f8 04             	cmp    $0x4,%eax
 805be26:	75 74                	jne    805be9c <__afl_die>
 805be28:	e8 f3 d5 fe ff       	call   8049420 <fork@plt>
 805be2d:	83 f8 00             	cmp    $0x0,%eax
 805be30:	7c 6a                	jl     805be9c <__afl_die>
 805be32:	74 49                	je     805be7d <__afl_fork_resume>
 805be34:	a3 40 be 43 08       	mov    %eax,0x843be40
 805be39:	6a 04                	push   $0x4
 805be3b:	68 40 be 43 08       	push   $0x843be40
 805be40:	68 c7 00 00 00       	push   $0xc7
 805be45:	e8 46 d5 fe ff       	call   8049390 <write@plt>
 805be4a:	83 c4 0c             	add    $0xc,%esp
 805be4d:	6a 00                	push   $0x0
 805be4f:	68 e0 bd 43 08       	push   $0x843bde0
 805be54:	ff 35 40 be 43 08    	pushl  0x843be40
 805be5a:	e8 e1 d3 fe ff       	call   8049240 <waitpid@plt>
 805be5f:	83 c4 0c             	add    $0xc,%esp
 805be62:	83 f8 00             	cmp    $0x0,%eax
 805be65:	7e 35                	jle    805be9c <__afl_die>
 805be67:	6a 04                	push   $0x4
 805be69:	68 e0 bd 43 08       	push   $0x843bde0
 805be6e:	68 c7 00 00 00       	push   $0xc7
 805be73:	e8 18 d5 fe ff       	call   8049390 <write@plt>
 805be78:	83 c4 0c             	add    $0xc,%esp
 805be7b:	eb 92                	jmp    805be0f <__afl_fork_wait_loop>

0805be7d <__afl_fork_resume>:
 805be7d:	68 c6 00 00 00       	push   $0xc6
 805be82:	e8 79 d6 fe ff       	call   8049500 <close@plt>
 805be87:	68 c7 00 00 00       	push   $0xc7
 805be8c:	e8 6f d6 fe ff       	call   8049500 <close@plt>
 805be91:	83 c4 08             	add    $0x8,%esp
 805be94:	5a                   	pop    %edx
 805be95:	59                   	pop    %ecx
 805be96:	58                   	pop    %eax
 805be97:	e9 ea fe ff ff       	jmp    805bd86 <__afl_store>

0805be9c <__afl_die>:
 805be9c:	31 c0                	xor    %eax,%eax
 805be9e:	e8 ad d2 fe ff       	call   8049150 <_exit@plt>

0805bea3 <__afl_setup_abort>:
 805bea3:	fe 05 60 be 43 08    	incb   0x843be60
 805bea9:	59                   	pop    %ecx
 805beaa:	58                   	pop    %eax
 805beab:	e9 ee fe ff ff       	jmp    805bd9e <__afl_return>

0805beb0 <.AFL_SHM_ENV>:
 805beb0:	5f                   	pop    %edi
 805beb1:	5f                   	pop    %edi
 805beb2:	41                   	inc    %ecx
 805beb3:	46                   	inc    %esi
 805beb4:	4c                   	dec    %esp
 805beb5:	5f                   	pop    %edi
 805beb6:	53                   	push   %ebx
 805beb7:	48                   	dec    %eax
 805beb8:	4d                   	dec    %ebp
 805beb9:	5f                   	pop    %edi
 805beba:	49                   	dec    %ecx
 805bebb:	44                   	inc    %esp
 805bebc:	00 66 90             	add    %ah,-0x70(%esi)
 805bebf:	90                   	nop

0805bec0 <quoting_options_from_style>:
}

/* Return quoting options for STYLE, with no extra quoting.  */
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
 805bec0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bec4:	89 3c 24             	mov    %edi,(%esp)
 805bec7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805becb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805becf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bed3:	b9 f9 d7 00 00       	mov    $0xd7f9,%ecx
 805bed8:	e8 3b 65 00 00       	call   8062418 <__afl_maybe_log>
 805bedd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bee1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bee5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bee9:	8b 3c 24             	mov    (%esp),%edi
 805beec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bef0:	57                   	push   %edi
 805bef1:	53                   	push   %ebx
 805bef2:	89 c3                	mov    %eax,%ebx
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
 805bef4:	b9 0c 00 00 00       	mov    $0xc,%ecx
 805bef9:	31 c0                	xor    %eax,%eax
 805befb:	89 df                	mov    %ebx,%edi
}

/* Return quoting options for STYLE, with no extra quoting.  */
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
 805befd:	83 ec 04             	sub    $0x4,%esp
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
  if (style == custom_quoting_style)
 805bf00:	83 fa 08             	cmp    $0x8,%edx

/* Return quoting options for STYLE, with no extra quoting.  */
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
 805bf03:	f3 ab                	rep stos %eax,%es:(%edi)
  if (style == custom_quoting_style)
 805bf05:	74 3b                	je     805bf42 <quoting_options_from_style+0x82>
 805bf07:	90                   	nop
 805bf08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bf0c:	89 3c 24             	mov    %edi,(%esp)
 805bf0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bf13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bf17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bf1b:	b9 91 4f 00 00       	mov    $0x4f91,%ecx
 805bf20:	e8 f3 64 00 00       	call   8062418 <__afl_maybe_log>
 805bf25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bf29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bf2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bf31:	8b 3c 24             	mov    (%esp),%edi
 805bf34:	8d 64 24 10          	lea    0x10(%esp),%esp
    abort ();
  o.style = style;
  return o;
 805bf38:	89 13                	mov    %edx,(%ebx)
}
 805bf3a:	83 c4 04             	add    $0x4,%esp
 805bf3d:	89 d8                	mov    %ebx,%eax
 805bf3f:	5b                   	pop    %ebx
 805bf40:	5f                   	pop    %edi
 805bf41:	c3                   	ret    
 805bf42:	66 90                	xchg   %ax,%ax
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
  if (style == custom_quoting_style)
    abort ();
 805bf44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bf48:	89 3c 24             	mov    %edi,(%esp)
 805bf4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bf4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bf53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bf57:	b9 71 df 00 00       	mov    $0xdf71,%ecx
 805bf5c:	e8 b7 64 00 00       	call   8062418 <__afl_maybe_log>
 805bf61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bf65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bf69:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bf6d:	8b 3c 24             	mov    (%esp),%edi
 805bf70:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bf74:	e8 67 d5 fe ff       	call   80494e0 <abort@plt>
 805bf79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805bf80 <strcaseeq6>:
    return 0;
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
 805bf80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bf84:	89 3c 24             	mov    %edi,(%esp)
 805bf87:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bf8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bf8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bf93:	b9 8b 3e 00 00       	mov    $0x3e8b,%ecx
 805bf98:	e8 7b 64 00 00       	call   8062418 <__afl_maybe_log>
 805bf9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bfa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bfa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bfa9:	8b 3c 24             	mov    (%esp),%edi
 805bfac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bfb0:	55                   	push   %ebp
 805bfb1:	57                   	push   %edi
 805bfb2:	56                   	push   %esi
 805bfb3:	53                   	push   %ebx
  if (CASEEQ (s1[6], s26))
 805bfb4:	0f be d9             	movsbl %cl,%ebx
 805bfb7:	83 eb 41             	sub    $0x41,%ebx
    return 0;
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
 805bfba:	89 c6                	mov    %eax,%esi
 805bfbc:	83 ec 0c             	sub    $0xc,%esp
  if (CASEEQ (s1[6], s26))
 805bfbf:	83 fb 19             	cmp    $0x19,%ebx
    return 0;
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
 805bfc2:	8b 7c 24 20          	mov    0x20(%esp),%edi
 805bfc6:	8b 6c 24 24          	mov    0x24(%esp),%ebp
  if (CASEEQ (s1[6], s26))
 805bfca:	0f 87 00 03 00 00    	ja     805c2d0 <strcaseeq6+0x350>
 805bfd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bfd4:	89 3c 24             	mov    %edi,(%esp)
 805bfd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bfdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bfdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bfe3:	b9 77 e1 00 00       	mov    $0xe177,%ecx
 805bfe8:	e8 2b 64 00 00       	call   8062418 <__afl_maybe_log>
 805bfed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bff1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bff5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bff9:	8b 3c 24             	mov    (%esp),%edi
 805bffc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c000:	0f b6 40 06          	movzbl 0x6(%eax),%eax
 805c004:	83 e0 df             	and    $0xffffffdf,%eax
 805c007:	38 c8                	cmp    %cl,%al
 805c009:	0f 94 c3             	sete   %bl
        return 1;
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
 805c00c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c010:	89 3c 24             	mov    %edi,(%esp)
 805c013:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c017:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c01b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c01f:	b9 5d 64 00 00       	mov    $0x645d,%ecx
 805c024:	e8 ef 63 00 00       	call   8062418 <__afl_maybe_log>
 805c029:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c02d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c031:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c035:	8b 3c 24             	mov    (%esp),%edi
 805c038:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c03c:	31 c0                	xor    %eax,%eax
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
 805c03e:	84 db                	test   %bl,%bl
 805c040:	0f 84 7a 02 00 00    	je     805c2c0 <strcaseeq6+0x340>
 805c046:	66 90                	xchg   %ax,%ax
 805c048:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c04c:	89 3c 24             	mov    %edi,(%esp)
 805c04f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c053:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c057:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c05b:	b9 3d d0 00 00       	mov    $0xd03d,%ecx
 805c060:	e8 b3 63 00 00       	call   8062418 <__afl_maybe_log>
 805c065:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c069:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c06d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c071:	8b 3c 24             	mov    (%esp),%edi
 805c074:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s26 == 0)
 805c078:	84 c9                	test   %cl,%cl
        return 1;
 805c07a:	b0 01                	mov    $0x1,%al
static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
    {
      if (s26 == 0)
 805c07c:	0f 84 3e 02 00 00    	je     805c2c0 <strcaseeq6+0x340>
 805c082:	66 90                	xchg   %ax,%ax
 805c084:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c088:	89 3c 24             	mov    %edi,(%esp)
 805c08b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c08f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c093:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c097:	b9 f3 76 00 00       	mov    $0x76f3,%ecx
 805c09c:	e8 77 63 00 00       	call   8062418 <__afl_maybe_log>
 805c0a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c0a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c0a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c0ad:	8b 3c 24             	mov    (%esp),%edi
 805c0b0:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
 805c0b4:	89 f9                	mov    %edi,%ecx
 805c0b6:	0f be d9             	movsbl %cl,%ebx
 805c0b9:	83 eb 41             	sub    $0x41,%ebx
 805c0bc:	83 fb 19             	cmp    $0x19,%ebx
 805c0bf:	0f 86 1b 02 00 00    	jbe    805c2e0 <strcaseeq6+0x360>
 805c0c5:	8d 76 00             	lea    0x0(%esi),%esi
 805c0c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c0cc:	89 3c 24             	mov    %edi,(%esp)
 805c0cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c0d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c0d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c0db:	b9 8e 5f 00 00       	mov    $0x5f8e,%ecx
 805c0e0:	e8 33 63 00 00       	call   8062418 <__afl_maybe_log>
 805c0e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c0e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c0ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c0f1:	8b 3c 24             	mov    (%esp),%edi
 805c0f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c0f8:	3a 4e 07             	cmp    0x7(%esi),%cl
 805c0fb:	0f 94 c1             	sete   %cl
 805c0fe:	66 90                	xchg   %ax,%ax
        return 1;
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
 805c100:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c104:	89 3c 24             	mov    %edi,(%esp)
 805c107:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c10b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c10f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c113:	b9 ab fd 00 00       	mov    $0xfdab,%ecx
 805c118:	e8 fb 62 00 00       	call   8062418 <__afl_maybe_log>
 805c11d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c121:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c125:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c129:	8b 3c 24             	mov    (%esp),%edi
 805c12c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c130:	31 c0                	xor    %eax,%eax
}

static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
 805c132:	84 c9                	test   %cl,%cl
 805c134:	0f 84 86 01 00 00    	je     805c2c0 <strcaseeq6+0x340>
 805c13a:	66 90                	xchg   %ax,%ax
 805c13c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c140:	89 3c 24             	mov    %edi,(%esp)
 805c143:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c147:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c14b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c14f:	b9 71 05 00 00       	mov    $0x571,%ecx
 805c154:	e8 bf 62 00 00       	call   8062418 <__afl_maybe_log>
 805c159:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c15d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c161:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c165:	8b 3c 24             	mov    (%esp),%edi
 805c168:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s27 == 0)
 805c16c:	89 f9                	mov    %edi,%ecx
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
    {
      if (s26 == 0)
        return 1;
 805c16e:	b0 01                	mov    $0x1,%al
static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
    {
      if (s27 == 0)
 805c170:	84 c9                	test   %cl,%cl
 805c172:	0f 84 48 01 00 00    	je     805c2c0 <strcaseeq6+0x340>
 805c178:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c17c:	89 3c 24             	mov    %edi,(%esp)
 805c17f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c183:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c187:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c18b:	b9 14 5b 00 00       	mov    $0x5b14,%ecx
 805c190:	e8 83 62 00 00       	call   8062418 <__afl_maybe_log>
 805c195:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c199:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c19d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c1a1:	8b 3c 24             	mov    (%esp),%edi
 805c1a4:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
 805c1a8:	89 e8                	mov    %ebp,%eax
 805c1aa:	0f be f8             	movsbl %al,%edi
 805c1ad:	83 ef 41             	sub    $0x41,%edi
 805c1b0:	83 ff 19             	cmp    $0x19,%edi
 805c1b3:	0f 87 3f 01 00 00    	ja     805c2f8 <strcaseeq6+0x378>
 805c1b9:	8d 76 00             	lea    0x0(%esi),%esi
 805c1bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c1c0:	89 3c 24             	mov    %edi,(%esp)
 805c1c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c1c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c1cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c1cf:	b9 8d e5 00 00       	mov    $0xe58d,%ecx
 805c1d4:	e8 3f 62 00 00       	call   8062418 <__afl_maybe_log>
 805c1d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c1dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c1e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c1e5:	8b 3c 24             	mov    (%esp),%edi
 805c1e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c1ec:	0f b6 46 08          	movzbl 0x8(%esi),%eax
 805c1f0:	89 eb                	mov    %ebp,%ebx
 805c1f2:	83 e0 df             	and    $0xffffffdf,%eax
 805c1f5:	38 c3                	cmp    %al,%bl
 805c1f7:	0f 94 c1             	sete   %cl
 805c1fa:	66 90                	xchg   %ax,%ax
        return 1;
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
 805c1fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c200:	89 3c 24             	mov    %edi,(%esp)
 805c203:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c207:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c20b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c20f:	b9 b5 4c 00 00       	mov    $0x4cb5,%ecx
 805c214:	e8 ff 61 00 00       	call   8062418 <__afl_maybe_log>
 805c219:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c21d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c221:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c225:	8b 3c 24             	mov    (%esp),%edi
 805c228:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c22c:	31 c0                	xor    %eax,%eax
}

static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
 805c22e:	84 c9                	test   %cl,%cl
 805c230:	0f 84 8a 00 00 00    	je     805c2c0 <strcaseeq6+0x340>
 805c236:	66 90                	xchg   %ax,%ax
 805c238:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c23c:	89 3c 24             	mov    %edi,(%esp)
 805c23f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c243:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c247:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c24b:	b9 e2 eb 00 00       	mov    $0xebe2,%ecx
 805c250:	e8 c3 61 00 00       	call   8062418 <__afl_maybe_log>
 805c255:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c259:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c25d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c261:	8b 3c 24             	mov    (%esp),%edi
 805c264:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s28 == 0)
 805c268:	89 e9                	mov    %ebp,%ecx
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
    {
      if (s26 == 0)
        return 1;
 805c26a:	b0 01                	mov    $0x1,%al
static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
    {
      if (s28 == 0)
 805c26c:	84 c9                	test   %cl,%cl
 805c26e:	74 50                	je     805c2c0 <strcaseeq6+0x340>
 805c270:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c274:	89 3c 24             	mov    %edi,(%esp)
 805c277:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c27b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c27f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c283:	b9 f2 e9 00 00       	mov    $0xe9f2,%ecx
 805c288:	e8 8b 61 00 00       	call   8062418 <__afl_maybe_log>
 805c28d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c291:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c295:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c299:	8b 3c 24             	mov    (%esp),%edi
 805c29c:	8d 64 24 10          	lea    0x10(%esp),%esp
# endif

static inline int
strcaseeq9 (const char *s1, const char *s2)
{
  return c_strcasecmp (s1 + 9, s2 + 9) == 0;
 805c2a0:	83 ec 08             	sub    $0x8,%esp
 805c2a3:	83 c2 09             	add    $0x9,%edx
 805c2a6:	83 c6 09             	add    $0x9,%esi
 805c2a9:	52                   	push   %edx
 805c2aa:	56                   	push   %esi
 805c2ab:	e8 b0 91 00 00       	call   8065460 <c_strcasecmp>
 805c2b0:	83 c4 10             	add    $0x10,%esp
 805c2b3:	85 c0                	test   %eax,%eax
 805c2b5:	0f 94 c2             	sete   %dl
 805c2b8:	0f b6 c2             	movzbl %dl,%eax
 805c2bb:	90                   	nop
 805c2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
}
 805c2c0:	83 c4 0c             	add    $0xc,%esp
 805c2c3:	5b                   	pop    %ebx
 805c2c4:	5e                   	pop    %esi
 805c2c5:	5f                   	pop    %edi
 805c2c6:	5d                   	pop    %ebp
 805c2c7:	c3                   	ret    
 805c2c8:	90                   	nop
 805c2c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
 805c2d0:	38 48 06             	cmp    %cl,0x6(%eax)
 805c2d3:	0f 94 c3             	sete   %bl
 805c2d6:	e9 31 fd ff ff       	jmp    805c00c <strcaseeq6+0x8c>
 805c2db:	90                   	nop
 805c2dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
}

static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
 805c2e0:	0f b6 46 07          	movzbl 0x7(%esi),%eax
 805c2e4:	83 e0 df             	and    $0xffffffdf,%eax
 805c2e7:	38 c1                	cmp    %al,%cl
 805c2e9:	0f 94 c1             	sete   %cl
 805c2ec:	e9 0d fe ff ff       	jmp    805c0fe <strcaseeq6+0x17e>
 805c2f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
}

static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
 805c2f8:	3a 46 08             	cmp    0x8(%esi),%al
 805c2fb:	0f 94 c1             	sete   %cl
 805c2fe:	e9 f7 fe ff ff       	jmp    805c1fa <strcaseeq6+0x27a>
 805c303:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805c309:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805c310 <gettext_quote>:
   has one; otherwise, return either it or "\"", depending on S.

   S is either clocale_quoting_style or locale_quoting_style.  */
static char const *
gettext_quote (char const *msgid, enum quoting_style s)
{
 805c310:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c314:	89 3c 24             	mov    %edi,(%esp)
 805c317:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c31b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c31f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c323:	b9 1a ff 00 00       	mov    $0xff1a,%ecx
 805c328:	e8 eb 60 00 00       	call   8062418 <__afl_maybe_log>
 805c32d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c331:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c335:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c339:	8b 3c 24             	mov    (%esp),%edi
 805c33c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c340:	57                   	push   %edi
 805c341:	56                   	push   %esi
 805c342:	89 d7                	mov    %edx,%edi
 805c344:	53                   	push   %ebx
 805c345:	89 c6                	mov    %eax,%esi
  char const *translation = _(msgid);
 805c347:	83 ec 04             	sub    $0x4,%esp
 805c34a:	6a 05                	push   $0x5
 805c34c:	50                   	push   %eax
 805c34d:	6a 00                	push   $0x0
 805c34f:	e8 7c ce fe ff       	call   80491d0 <dcgettext@plt>
 805c354:	89 c3                	mov    %eax,%ebx
  char const *locale_code;

  if (translation != msgid)
 805c356:	83 c4 10             	add    $0x10,%esp
 805c359:	39 f3                	cmp    %esi,%ebx
 805c35b:	74 6b                	je     805c3c8 <gettext_quote+0xb8>
 805c35d:	8d 76 00             	lea    0x0(%esi),%esi
 805c360:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c364:	89 3c 24             	mov    %edi,(%esp)
 805c367:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c36b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c36f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c373:	b9 d2 60 00 00       	mov    $0x60d2,%ecx
 805c378:	e8 9b 60 00 00       	call   8062418 <__afl_maybe_log>
 805c37d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c381:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c385:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c389:	8b 3c 24             	mov    (%esp),%edi
 805c38c:	8d 64 24 10          	lea    0x10(%esp),%esp
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";

  return (s == clocale_quoting_style ? "\"" : "'");
}
 805c390:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c394:	89 3c 24             	mov    %edi,(%esp)
 805c397:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c39b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c39f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c3a3:	b9 c1 39 00 00       	mov    $0x39c1,%ecx
 805c3a8:	e8 6b 60 00 00       	call   8062418 <__afl_maybe_log>
 805c3ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c3b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c3b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c3b9:	8b 3c 24             	mov    (%esp),%edi
 805c3bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c3c0:	5b                   	pop    %ebx
 805c3c1:	5e                   	pop    %esi
 805c3c2:	5f                   	pop    %edi
 805c3c3:	c3                   	ret    
 805c3c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        BIG5-HKSCS   0xA1 0xA5            EUC-CN       0xA1 0xAE
        GBK          0xA1 0xAE            Georgian-PS  0x91
        PT154        0x91

     None of these is still in wide use; using iconv is overkill.  */
  locale_code = locale_charset ();
 805c3c8:	e8 b3 9a 00 00       	call   8065e80 <locale_charset>
}

static inline int
strcaseeq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[0], s20))
 805c3cd:	0f b6 10             	movzbl (%eax),%edx
 805c3d0:	83 e2 df             	and    $0xffffffdf,%edx
 805c3d3:	80 fa 55             	cmp    $0x55,%dl
 805c3d6:	0f 85 94 01 00 00    	jne    805c570 <gettext_quote+0x260>
 805c3dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c3e0:	89 3c 24             	mov    %edi,(%esp)
 805c3e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c3e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c3eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c3ef:	b9 31 72 00 00       	mov    $0x7231,%ecx
 805c3f4:	e8 1f 60 00 00       	call   8062418 <__afl_maybe_log>
 805c3f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c3fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c401:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c405:	8b 3c 24             	mov    (%esp),%edi
 805c408:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq1 (const char *s1, const char *s2, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[1], s21))
 805c40c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
 805c410:	83 e2 df             	and    $0xffffffdf,%edx
 805c413:	80 fa 54             	cmp    $0x54,%dl
 805c416:	0f 85 3c 01 00 00    	jne    805c558 <gettext_quote+0x248>
 805c41c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c420:	89 3c 24             	mov    %edi,(%esp)
 805c423:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c427:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c42b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c42f:	b9 c7 10 00 00       	mov    $0x10c7,%ecx
 805c434:	e8 df 5f 00 00       	call   8062418 <__afl_maybe_log>
 805c439:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c43d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c441:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c445:	8b 3c 24             	mov    (%esp),%edi
 805c448:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq2 (const char *s1, const char *s2, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[2], s22))
 805c44c:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
 805c450:	83 e1 df             	and    $0xffffffdf,%ecx
 805c453:	80 f9 46             	cmp    $0x46,%cl
 805c456:	0f 85 fc 00 00 00    	jne    805c558 <gettext_quote+0x248>
 805c45c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c460:	89 3c 24             	mov    %edi,(%esp)
 805c463:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c467:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c46b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c46f:	b9 bd 6c 00 00       	mov    $0x6cbd,%ecx
 805c474:	e8 9f 5f 00 00       	call   8062418 <__afl_maybe_log>
 805c479:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c47d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c481:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c485:	8b 3c 24             	mov    (%esp),%edi
 805c488:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq3 (const char *s1, const char *s2, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[3], s23))
 805c48c:	80 78 03 2d          	cmpb   $0x2d,0x3(%eax)
 805c490:	0f 85 c2 00 00 00    	jne    805c558 <gettext_quote+0x248>
 805c496:	66 90                	xchg   %ax,%ax
 805c498:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c49c:	89 3c 24             	mov    %edi,(%esp)
 805c49f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c4a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c4a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c4ab:	b9 e4 86 00 00       	mov    $0x86e4,%ecx
 805c4b0:	e8 63 5f 00 00       	call   8062418 <__afl_maybe_log>
 805c4b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c4b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c4bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c4c1:	8b 3c 24             	mov    (%esp),%edi
 805c4c4:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq4 (const char *s1, const char *s2, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[4], s24))
 805c4c8:	80 78 04 38          	cmpb   $0x38,0x4(%eax)
 805c4cc:	0f 85 86 00 00 00    	jne    805c558 <gettext_quote+0x248>
 805c4d2:	66 90                	xchg   %ax,%ax
 805c4d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c4d8:	89 3c 24             	mov    %edi,(%esp)
 805c4db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c4df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c4e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c4e7:	b9 7f ef 00 00       	mov    $0xef7f,%ecx
 805c4ec:	e8 27 5f 00 00       	call   8062418 <__afl_maybe_log>
 805c4f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c4f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c4f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c4fd:	8b 3c 24             	mov    (%esp),%edi
 805c500:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq5 (const char *s1, const char *s2, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[5], s25))
 805c504:	80 78 05 00          	cmpb   $0x0,0x5(%eax)
 805c508:	75 4e                	jne    805c558 <gettext_quote+0x248>
 805c50a:	66 90                	xchg   %ax,%ax
 805c50c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c510:	89 3c 24             	mov    %edi,(%esp)
 805c513:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c517:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c51b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c51f:	b9 a9 39 00 00       	mov    $0x39a9,%ecx
 805c524:	e8 ef 5e 00 00       	call   8062418 <__afl_maybe_log>
 805c529:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c52d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c531:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c535:	8b 3c 24             	mov    (%esp),%edi
 805c538:	8d 64 24 10          	lea    0x10(%esp),%esp
  if (STRCASEEQ (locale_code, "UTF-8", 'U','T','F','-','8',0,0,0,0))
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
 805c53c:	80 3b 60             	cmpb   $0x60,(%ebx)
 805c53f:	bf 07 7d 06 08       	mov    $0x8067d07,%edi
 805c544:	b8 13 7d 06 08       	mov    $0x8067d13,%eax
 805c549:	0f 45 c7             	cmovne %edi,%eax
 805c54c:	e9 3f fe ff ff       	jmp    805c390 <gettext_quote+0x80>
 805c551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";

  return (s == clocale_quoting_style ? "\"" : "'");
 805c558:	83 ff 07             	cmp    $0x7,%edi
 805c55b:	bb 0b 7d 06 08       	mov    $0x8067d0b,%ebx
 805c560:	b8 0d 7d 06 08       	mov    $0x8067d0d,%eax
 805c565:	0f 45 c3             	cmovne %ebx,%eax
 805c568:	e9 23 fe ff ff       	jmp    805c390 <gettext_quote+0x80>
 805c56d:	8d 76 00             	lea    0x0(%esi),%esi
}

static inline int
strcaseeq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[0], s20))
 805c570:	80 fa 47             	cmp    $0x47,%dl
 805c573:	75 e3                	jne    805c558 <gettext_quote+0x248>
 805c575:	8d 76 00             	lea    0x0(%esi),%esi
 805c578:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c57c:	89 3c 24             	mov    %edi,(%esp)
 805c57f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c583:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c587:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c58b:	b9 d3 c5 00 00       	mov    $0xc5d3,%ecx
 805c590:	e8 83 5e 00 00       	call   8062418 <__afl_maybe_log>
 805c595:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c599:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c59d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c5a1:	8b 3c 24             	mov    (%esp),%edi
 805c5a4:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq1 (const char *s1, const char *s2, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[1], s21))
 805c5a8:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
 805c5ac:	83 e1 df             	and    $0xffffffdf,%ecx
 805c5af:	80 f9 42             	cmp    $0x42,%cl
 805c5b2:	75 a4                	jne    805c558 <gettext_quote+0x248>
 805c5b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c5b8:	89 3c 24             	mov    %edi,(%esp)
 805c5bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c5bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c5c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c5c7:	b9 94 74 00 00       	mov    $0x7494,%ecx
 805c5cc:	e8 47 5e 00 00       	call   8062418 <__afl_maybe_log>
 805c5d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c5d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c5d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c5dd:	8b 3c 24             	mov    (%esp),%edi
 805c5e0:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq2 (const char *s1, const char *s2, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[2], s22))
 805c5e4:	80 78 02 31          	cmpb   $0x31,0x2(%eax)
 805c5e8:	0f 85 6a ff ff ff    	jne    805c558 <gettext_quote+0x248>
 805c5ee:	66 90                	xchg   %ax,%ax
 805c5f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c5f4:	89 3c 24             	mov    %edi,(%esp)
 805c5f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c5fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c5ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c603:	b9 2b 06 00 00       	mov    $0x62b,%ecx
 805c608:	e8 0b 5e 00 00       	call   8062418 <__afl_maybe_log>
 805c60d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c611:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c615:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c619:	8b 3c 24             	mov    (%esp),%edi
 805c61c:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq3 (const char *s1, const char *s2, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[3], s23))
 805c620:	80 78 03 38          	cmpb   $0x38,0x3(%eax)
 805c624:	0f 85 2e ff ff ff    	jne    805c558 <gettext_quote+0x248>
 805c62a:	66 90                	xchg   %ax,%ax
 805c62c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c630:	89 3c 24             	mov    %edi,(%esp)
 805c633:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c637:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c63b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c63f:	b9 6b 84 00 00       	mov    $0x846b,%ecx
 805c644:	e8 cf 5d 00 00       	call   8062418 <__afl_maybe_log>
 805c649:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c64d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c651:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c655:	8b 3c 24             	mov    (%esp),%edi
 805c658:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq4 (const char *s1, const char *s2, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[4], s24))
 805c65c:	80 78 04 30          	cmpb   $0x30,0x4(%eax)
 805c660:	0f 85 f2 fe ff ff    	jne    805c558 <gettext_quote+0x248>
 805c666:	66 90                	xchg   %ax,%ax
 805c668:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c66c:	89 3c 24             	mov    %edi,(%esp)
 805c66f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c673:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c677:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c67b:	b9 5f d7 00 00       	mov    $0xd75f,%ecx
 805c680:	e8 93 5d 00 00       	call   8062418 <__afl_maybe_log>
 805c685:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c689:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c68d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c691:	8b 3c 24             	mov    (%esp),%edi
 805c694:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq5 (const char *s1, const char *s2, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[5], s25))
 805c698:	80 78 05 33          	cmpb   $0x33,0x5(%eax)
 805c69c:	0f 85 b6 fe ff ff    	jne    805c558 <gettext_quote+0x248>
 805c6a2:	66 90                	xchg   %ax,%ax
 805c6a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c6a8:	89 3c 24             	mov    %edi,(%esp)
 805c6ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c6af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c6b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c6b7:	b9 13 0c 00 00       	mov    $0xc13,%ecx
 805c6bc:	e8 57 5d 00 00       	call   8062418 <__afl_maybe_log>
 805c6c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c6c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c6c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c6cd:	8b 3c 24             	mov    (%esp),%edi
 805c6d0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s25 == 0)
        return 1;
      else
        return strcaseeq6 (s1, s2, s26, s27, s28);
 805c6d4:	52                   	push   %edx
 805c6d5:	52                   	push   %edx
 805c6d6:	b9 30 00 00 00       	mov    $0x30,%ecx
 805c6db:	6a 00                	push   $0x0
 805c6dd:	6a 00                	push   $0x0
 805c6df:	ba 17 7d 06 08       	mov    $0x8067d17,%edx
 805c6e4:	e8 97 f8 ff ff       	call   805bf80 <strcaseeq6>
 805c6e9:	83 c4 10             	add    $0x10,%esp

     None of these is still in wide use; using iconv is overkill.  */
  locale_code = locale_charset ();
  if (STRCASEEQ (locale_code, "UTF-8", 'U','T','F','-','8',0,0,0,0))
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
 805c6ec:	85 c0                	test   %eax,%eax
 805c6ee:	0f 84 64 fe ff ff    	je     805c558 <gettext_quote+0x248>
 805c6f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c6f8:	89 3c 24             	mov    %edi,(%esp)
 805c6fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c6ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c703:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c707:	b9 84 07 00 00       	mov    $0x784,%ecx
 805c70c:	e8 07 5d 00 00       	call   8062418 <__afl_maybe_log>
 805c711:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c715:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c719:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c71d:	8b 3c 24             	mov    (%esp),%edi
 805c720:	8d 64 24 10          	lea    0x10(%esp),%esp
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";
 805c724:	80 3b 60             	cmpb   $0x60,(%ebx)
 805c727:	be 04 7d 06 08       	mov    $0x8067d04,%esi
 805c72c:	b8 0f 7d 06 08       	mov    $0x8067d0f,%eax
 805c731:	0f 45 c6             	cmovne %esi,%eax
 805c734:	e9 57 fc ff ff       	jmp    805c390 <gettext_quote+0x80>
 805c739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805c740 <quotearg_buffer_restyled>:
                          char const *arg, size_t argsize,
                          enum quoting_style quoting_style, int flags,
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
 805c740:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c744:	89 3c 24             	mov    %edi,(%esp)
 805c747:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c74b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c74f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c753:	b9 e2 66 00 00       	mov    $0x66e2,%ecx
 805c758:	e8 bb 5c 00 00       	call   8062418 <__afl_maybe_log>
 805c75d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c761:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c765:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c769:	8b 3c 24             	mov    (%esp),%edi
 805c76c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c770:	55                   	push   %ebp
 805c771:	57                   	push   %edi
 805c772:	56                   	push   %esi
 805c773:	53                   	push   %ebx
 805c774:	83 ec 5c             	sub    $0x5c,%esp
 805c777:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 805c77b:	89 54 24 10          	mov    %edx,0x10(%esp)
 805c77f:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 805c783:	8b 7c 24 70          	mov    0x70(%esp),%edi
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
  bool unibyte_locale = MB_CUR_MAX == 1;
 805c787:	e8 a4 ca fe ff       	call   8049230 <__ctype_get_mb_cur_max@plt>
 805c78c:	89 44 24 34          	mov    %eax,0x34(%esp)
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
 805c790:	8b 44 24 78          	mov    0x78(%esp),%eax
 805c794:	d1 e8                	shr    %eax
 805c796:	83 e0 01             	and    $0x1,%eax
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805c799:	83 7c 24 74 08       	cmpl   $0x8,0x74(%esp)
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
  bool unibyte_locale = MB_CUR_MAX == 1;
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
 805c79e:	88 44 24 39          	mov    %al,0x39(%esp)
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805c7a2:	0f 87 d8 39 00 00    	ja     8060180 <quotearg_buffer_restyled+0x3a40>
 805c7a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c7ac:	89 3c 24             	mov    %edi,(%esp)
 805c7af:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c7b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c7b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c7bb:	b9 64 b1 00 00       	mov    $0xb164,%ecx
 805c7c0:	e8 53 5c 00 00       	call   8062418 <__afl_maybe_log>
 805c7c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c7c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c7cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c7d1:	8b 3c 24             	mov    (%esp),%edi
 805c7d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c7d8:	8b 54 24 74          	mov    0x74(%esp),%edx
 805c7dc:	ff 24 95 60 7d 06 08 	jmp    *0x8067d60(,%edx,4)
 805c7e3:	90                   	nop
 805c7e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      quote_string_len = 1;
      break;

    case escape_quoting_style:
      backslash_escapes = true;
      elide_outer_quotes = false;
 805c7e8:	c6 44 24 39 00       	movb   $0x0,0x39(%esp)
      quote_string = "\"";
      quote_string_len = 1;
      break;

    case escape_quoting_style:
      backslash_escapes = true;
 805c7ed:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805c7f2:	31 ed                	xor    %ebp,%ebp
  char const *quote_string = 0;
  size_t quote_string_len = 0;
 805c7f4:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 805c7fb:	00 
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
 805c7fc:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
 805c803:	00 
 805c804:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 805c808:	0f b6 5c 24 39       	movzbl 0x39(%esp),%ebx

    default:
      abort ();
    }

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
 805c80d:	31 f6                	xor    %esi,%esi
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 805c80f:	83 f3 01             	xor    $0x1,%ebx
 805c812:	88 5c 24 3a          	mov    %bl,0x3a(%esp)
 805c816:	66 90                	xchg   %ax,%ax

    default:
      abort ();
    }

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
 805c818:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c81c:	89 3c 24             	mov    %edi,(%esp)
 805c81f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c823:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c827:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c82b:	b9 d7 36 00 00       	mov    $0x36d7,%ecx
 805c830:	e8 e3 5b 00 00       	call   8062418 <__afl_maybe_log>
 805c835:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c839:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c83d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c841:	8b 3c 24             	mov    (%esp),%edi
 805c844:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c848:	39 fe                	cmp    %edi,%esi
 805c84a:	0f 95 c1             	setne  %cl
 805c84d:	83 ff ff             	cmp    $0xffffffff,%edi
 805c850:	0f 84 2e 0a 00 00    	je     805d284 <quotearg_buffer_restyled+0xb44>
 805c856:	66 90                	xchg   %ax,%ax
 805c858:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c85c:	89 3c 24             	mov    %edi,(%esp)
 805c85f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c863:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c867:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c86b:	b9 3f 98 00 00       	mov    $0x983f,%ecx
 805c870:	e8 a3 5b 00 00       	call   8062418 <__afl_maybe_log>
 805c875:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c879:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c87d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c881:	8b 3c 24             	mov    (%esp),%edi
 805c884:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c888:	90                   	nop
 805c889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 805c890:	84 c9                	test   %cl,%cl
 805c892:	0f 84 60 0a 00 00    	je     805d2f8 <quotearg_buffer_restyled+0xbb8>
 805c898:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c89c:	89 3c 24             	mov    %edi,(%esp)
 805c89f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c8a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c8a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c8ab:	b9 a7 02 00 00       	mov    $0x2a7,%ecx
 805c8b0:	e8 63 5b 00 00       	call   8062418 <__afl_maybe_log>
 805c8b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c8b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c8bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c8c1:	8b 3c 24             	mov    (%esp),%edi
 805c8c4:	8d 64 24 10          	lea    0x10(%esp),%esp
      unsigned char c;
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
 805c8c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c8cc:	89 3c 24             	mov    %edi,(%esp)
 805c8cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c8d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c8d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c8db:	b9 fb d7 00 00       	mov    $0xd7fb,%ecx
 805c8e0:	e8 33 5b 00 00       	call   8062418 <__afl_maybe_log>
 805c8e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c8e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c8ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c8f1:	8b 3c 24             	mov    (%esp),%edi
 805c8f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c8f8:	8b 44 24 18          	mov    0x18(%esp),%eax
 805c8fc:	85 c0                	test   %eax,%eax
    {
      unsigned char c;
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
 805c8fe:	0f 95 44 24 20       	setne  0x20(%esp)
 805c903:	0f 84 27 2a 00 00    	je     805f330 <quotearg_buffer_restyled+0x2bf0>
 805c909:	8d 76 00             	lea    0x0(%esi),%esi
 805c90c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c910:	89 3c 24             	mov    %edi,(%esp)
 805c913:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c91b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c91f:	b9 3f e1 00 00       	mov    $0xe13f,%ecx
 805c924:	e8 ef 5a 00 00       	call   8062418 <__afl_maybe_log>
 805c929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c92d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c931:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c935:	8b 3c 24             	mov    (%esp),%edi
 805c938:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c93c:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 805c941:	0f 84 e9 29 00 00    	je     805f330 <quotearg_buffer_restyled+0x2bf0>
 805c947:	90                   	nop
 805c948:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c94c:	89 3c 24             	mov    %edi,(%esp)
 805c94f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c953:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c957:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c95b:	b9 87 5b 00 00       	mov    $0x5b87,%ecx
 805c960:	e8 b3 5a 00 00       	call   8062418 <__afl_maybe_log>
 805c965:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c969:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c96d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c971:	8b 3c 24             	mov    (%esp),%edi
 805c974:	8d 64 24 10          	lea    0x10(%esp),%esp
          && quote_string_len
          && (i + quote_string_len
 805c978:	8b 4c 24 18          	mov    0x18(%esp),%ecx
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
 805c97c:	83 ff ff             	cmp    $0xffffffff,%edi
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
          && (i + quote_string_len
 805c97f:	8d 1c 0e             	lea    (%esi,%ecx,1),%ebx
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
 805c982:	75 79                	jne    805c9fd <quotearg_buffer_restyled+0x2bd>
 805c984:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c988:	89 3c 24             	mov    %edi,(%esp)
 805c98b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c98f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c993:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c997:	b9 f4 39 00 00       	mov    $0x39f4,%ecx
 805c99c:	e8 77 5a 00 00       	call   8062418 <__afl_maybe_log>
 805c9a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c9a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c9a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c9ad:	8b 3c 24             	mov    (%esp),%edi
 805c9b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c9b4:	83 f9 01             	cmp    $0x1,%ecx
 805c9b7:	76 44                	jbe    805c9fd <quotearg_buffer_restyled+0x2bd>
 805c9b9:	8d 76 00             	lea    0x0(%esi),%esi
 805c9bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c9c0:	89 3c 24             	mov    %edi,(%esp)
 805c9c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c9c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c9cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c9cf:	b9 c7 58 00 00       	mov    $0x58c7,%ecx
 805c9d4:	e8 3f 5a 00 00       	call   8062418 <__afl_maybe_log>
 805c9d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c9dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c9e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c9e5:	8b 3c 24             	mov    (%esp),%edi
 805c9e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c9ec:	83 ec 0c             	sub    $0xc,%esp
 805c9ef:	ff 74 24 20          	pushl  0x20(%esp)
 805c9f3:	e8 68 c9 fe ff       	call   8049360 <strlen@plt>
 805c9f8:	83 c4 10             	add    $0x10,%esp
 805c9fb:	89 c7                	mov    %eax,%edi
 805c9fd:	8d 76 00             	lea    0x0(%esi),%esi
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
 805ca00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ca04:	89 3c 24             	mov    %edi,(%esp)
 805ca07:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ca0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ca0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ca13:	b9 a2 2e 00 00       	mov    $0x2ea2,%ecx
 805ca18:	e8 fb 59 00 00       	call   8062418 <__afl_maybe_log>
 805ca1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ca21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ca25:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ca29:	8b 3c 24             	mov    (%esp),%edi
 805ca2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ca30:	8b 54 24 14          	mov    0x14(%esp),%edx
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
          && (i + quote_string_len
 805ca34:	39 df                	cmp    %ebx,%edi
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
 805ca36:	8d 1c 32             	lea    (%edx,%esi,1),%ebx
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
          && (i + quote_string_len
 805ca39:	0f 82 09 29 00 00    	jb     805f348 <quotearg_buffer_restyled+0x2c08>
 805ca3f:	90                   	nop
 805ca40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ca44:	89 3c 24             	mov    %edi,(%esp)
 805ca47:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ca4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ca4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ca53:	b9 18 4d 00 00       	mov    $0x4d18,%ecx
 805ca58:	e8 bb 59 00 00       	call   8062418 <__afl_maybe_log>
 805ca5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ca61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ca65:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ca69:	8b 3c 24             	mov    (%esp),%edi
 805ca6c:	8d 64 24 10          	lea    0x10(%esp),%esp
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
 805ca70:	83 ec 04             	sub    $0x4,%esp
 805ca73:	ff 74 24 1c          	pushl  0x1c(%esp)
 805ca77:	ff 74 24 30          	pushl  0x30(%esp)
 805ca7b:	53                   	push   %ebx
 805ca7c:	e8 2f c7 fe ff       	call   80491b0 <memcmp@plt>
 805ca81:	83 c4 10             	add    $0x10,%esp
 805ca84:	85 c0                	test   %eax,%eax
 805ca86:	0f 85 bc 28 00 00    	jne    805f348 <quotearg_buffer_restyled+0x2c08>
 805ca8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ca90:	89 3c 24             	mov    %edi,(%esp)
 805ca93:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ca97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ca9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ca9f:	b9 e4 83 00 00       	mov    $0x83e4,%ecx
 805caa4:	e8 6f 59 00 00       	call   8062418 <__afl_maybe_log>
 805caa9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805caad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cab1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cab5:	8b 3c 24             	mov    (%esp),%edi
 805cab8:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          if (elide_outer_quotes)
 805cabc:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805cac1:	0f 85 a9 0c 00 00    	jne    805d770 <quotearg_buffer_restyled+0x1030>
 805cac7:	90                   	nop
 805cac8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cacc:	89 3c 24             	mov    %edi,(%esp)
 805cacf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cad3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cad7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cadb:	b9 ac 35 00 00       	mov    $0x35ac,%ecx
 805cae0:	e8 33 59 00 00       	call   8062418 <__afl_maybe_log>
 805cae5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cae9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805caed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805caf1:	8b 3c 24             	mov    (%esp),%edi
 805caf4:	8d 64 24 10          	lea    0x10(%esp),%esp
            goto force_outer_quoting_style;
          is_right_quote = true;
 805caf8:	c6 44 24 38 01       	movb   $0x1,0x38(%esp)
 805cafd:	8d 76 00             	lea    0x0(%esi),%esi
        }

      c = arg[i];
 805cb00:	0f b6 13             	movzbl (%ebx),%edx
      switch (c)
 805cb03:	80 fa 7e             	cmp    $0x7e,%dl
 805cb06:	0f 87 64 13 00 00    	ja     805de70 <quotearg_buffer_restyled+0x1730>
 805cb0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cb10:	89 3c 24             	mov    %edi,(%esp)
 805cb13:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cb17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cb1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cb1f:	b9 17 9f 00 00       	mov    $0x9f17,%ecx
 805cb24:	e8 ef 58 00 00       	call   8062418 <__afl_maybe_log>
 805cb29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cb2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cb31:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cb35:	8b 3c 24             	mov    (%esp),%edi
 805cb38:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cb3c:	0f b6 ca             	movzbl %dl,%ecx
 805cb3f:	ff 24 8d 84 7d 06 08 	jmp    *0x8067d84(,%ecx,4)
 805cb46:	8d 76 00             	lea    0x0(%esi),%esi
 805cb49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
          else if (flags & QA_ELIDE_NULL_BYTES)
            continue;
          break;

        case '?':
          switch (quoting_style)
 805cb50:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 805cb55:	0f 84 a1 0b 00 00    	je     805d6fc <quotearg_buffer_restyled+0xfbc>
 805cb5b:	90                   	nop
 805cb5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cb60:	89 3c 24             	mov    %edi,(%esp)
 805cb63:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cb67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cb6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cb6f:	b9 b4 7a 00 00       	mov    $0x7ab4,%ecx
 805cb74:	e8 9f 58 00 00       	call   8062418 <__afl_maybe_log>
 805cb79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cb7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cb81:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cb85:	8b 3c 24             	mov    (%esp),%edi
 805cb88:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cb8c:	83 7c 24 74 03       	cmpl   $0x3,0x74(%esp)
 805cb91:	0f 85 99 03 00 00    	jne    805cf30 <quotearg_buffer_restyled+0x7f0>
 805cb97:	90                   	nop
 805cb98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cb9c:	89 3c 24             	mov    %edi,(%esp)
 805cb9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cba3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cba7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cbab:	b9 f4 1c 00 00       	mov    $0x1cf4,%ecx
 805cbb0:	e8 63 58 00 00       	call   8062418 <__afl_maybe_log>
 805cbb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cbb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cbbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cbc1:	8b 3c 24             	mov    (%esp),%edi
 805cbc4:	8d 64 24 10          	lea    0x10(%esp),%esp
              if (elide_outer_quotes)
                goto force_outer_quoting_style;
              break;

            case c_quoting_style:
              if ((flags & QA_SPLIT_TRIGRAPHS)
 805cbc8:	f6 44 24 78 04       	testb  $0x4,0x78(%esp)
 805cbcd:	0f 84 5d 03 00 00    	je     805cf30 <quotearg_buffer_restyled+0x7f0>
 805cbd3:	90                   	nop
 805cbd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cbd8:	89 3c 24             	mov    %edi,(%esp)
 805cbdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cbdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cbe3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cbe7:	b9 8e 00 00 00       	mov    $0x8e,%ecx
 805cbec:	e8 27 58 00 00       	call   8062418 <__afl_maybe_log>
 805cbf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cbf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cbf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cbfd:	8b 3c 24             	mov    (%esp),%edi
 805cc00:	8d 64 24 10          	lea    0x10(%esp),%esp
                  && i + 2 < argsize && arg[i + 1] == '?')
 805cc04:	8d 5e 02             	lea    0x2(%esi),%ebx
 805cc07:	39 df                	cmp    %ebx,%edi
 805cc09:	0f 86 21 03 00 00    	jbe    805cf30 <quotearg_buffer_restyled+0x7f0>
 805cc0f:	90                   	nop
 805cc10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cc14:	89 3c 24             	mov    %edi,(%esp)
 805cc17:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cc1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cc23:	b9 1c 8b 00 00       	mov    $0x8b1c,%ecx
 805cc28:	e8 eb 57 00 00       	call   8062418 <__afl_maybe_log>
 805cc2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cc31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cc35:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cc39:	8b 3c 24             	mov    (%esp),%edi
 805cc3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cc40:	8b 44 24 14          	mov    0x14(%esp),%eax
 805cc44:	80 7c 30 01 3f       	cmpb   $0x3f,0x1(%eax,%esi,1)
 805cc49:	0f 85 e1 02 00 00    	jne    805cf30 <quotearg_buffer_restyled+0x7f0>
 805cc4f:	90                   	nop
 805cc50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cc54:	89 3c 24             	mov    %edi,(%esp)
 805cc57:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cc5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cc63:	b9 cd 5a 00 00       	mov    $0x5acd,%ecx
 805cc68:	e8 ab 57 00 00       	call   8062418 <__afl_maybe_log>
 805cc6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cc71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cc75:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cc79:	8b 3c 24             	mov    (%esp),%edi
 805cc7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cc80:	0f b6 0c 18          	movzbl (%eax,%ebx,1),%ecx
 805cc84:	88 4c 24 20          	mov    %cl,0x20(%esp)
 805cc88:	8d 49 df             	lea    -0x21(%ecx),%ecx
 805cc8b:	80 f9 1d             	cmp    $0x1d,%cl
 805cc8e:	0f 87 9c 02 00 00    	ja     805cf30 <quotearg_buffer_restyled+0x7f0>
 805cc94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cc98:	89 3c 24             	mov    %edi,(%esp)
 805cc9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cca3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cca7:	b9 86 3f 00 00       	mov    $0x3f86,%ecx
 805ccac:	e8 67 57 00 00       	call   8062418 <__afl_maybe_log>
 805ccb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ccb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ccb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ccbd:	8b 3c 24             	mov    (%esp),%edi
 805ccc0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ccc4:	b8 01 00 00 00       	mov    $0x1,%eax
 805ccc9:	d3 e0                	shl    %cl,%eax
 805cccb:	a9 c1 51 00 38       	test   $0x380051c1,%eax
 805ccd0:	0f 84 5a 02 00 00    	je     805cf30 <quotearg_buffer_restyled+0x7f0>
 805ccd6:	66 90                	xchg   %ax,%ax
 805ccd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ccdc:	89 3c 24             	mov    %edi,(%esp)
 805ccdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cce3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cce7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cceb:	b9 b4 c5 00 00       	mov    $0xc5b4,%ecx
 805ccf0:	e8 23 57 00 00       	call   8062418 <__afl_maybe_log>
 805ccf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ccf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ccfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cd01:	8b 3c 24             	mov    (%esp),%edi
 805cd04:	8d 64 24 10          	lea    0x10(%esp),%esp
                  case '!': case '\'':
                  case '(': case ')': case '-': case '/':
                  case '<': case '=': case '>':
                    /* Escape the second '?' in what would otherwise be
                       a trigraph.  */
                    if (elide_outer_quotes)
 805cd08:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805cd0d:	0f 85 5d 0a 00 00    	jne    805d770 <quotearg_buffer_restyled+0x1030>
 805cd13:	90                   	nop
 805cd14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cd18:	89 3c 24             	mov    %edi,(%esp)
 805cd1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cd1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cd23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cd27:	b9 1e e3 00 00       	mov    $0xe31e,%ecx
 805cd2c:	e8 e7 56 00 00       	call   8062418 <__afl_maybe_log>
 805cd31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cd35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cd39:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cd3d:	8b 3c 24             	mov    (%esp),%edi
 805cd40:	8d 64 24 10          	lea    0x10(%esp),%esp
                      goto force_outer_quoting_style;
                    c = arg[i + 2];
                    i += 2;
                    STORE ('?');
 805cd44:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805cd48:	73 3a                	jae    805cd84 <quotearg_buffer_restyled+0x644>
 805cd4a:	66 90                	xchg   %ax,%ax
 805cd4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cd50:	89 3c 24             	mov    %edi,(%esp)
 805cd53:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cd57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cd5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cd5f:	b9 2a 6b 00 00       	mov    $0x6b2a,%ecx
 805cd64:	e8 af 56 00 00       	call   8062418 <__afl_maybe_log>
 805cd69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cd6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cd71:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cd75:	8b 3c 24             	mov    (%esp),%edi
 805cd78:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cd7c:	8b 74 24 1c          	mov    0x1c(%esp),%esi
 805cd80:	c6 04 2e 3f          	movb   $0x3f,(%esi,%ebp,1)
 805cd84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cd88:	89 3c 24             	mov    %edi,(%esp)
 805cd8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cd8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cd93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cd97:	b9 c8 3f 00 00       	mov    $0x3fc8,%ecx
 805cd9c:	e8 77 56 00 00       	call   8062418 <__afl_maybe_log>
 805cda1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cda5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cda9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cdad:	8b 3c 24             	mov    (%esp),%edi
 805cdb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cdb4:	8d 55 01             	lea    0x1(%ebp),%edx
                    STORE ('"');
 805cdb7:	39 54 24 10          	cmp    %edx,0x10(%esp)
 805cdbb:	76 3c                	jbe    805cdf9 <quotearg_buffer_restyled+0x6b9>
 805cdbd:	8d 76 00             	lea    0x0(%esi),%esi
 805cdc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cdc4:	89 3c 24             	mov    %edi,(%esp)
 805cdc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cdcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cdcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cdd3:	b9 18 19 00 00       	mov    $0x1918,%ecx
 805cdd8:	e8 3b 56 00 00       	call   8062418 <__afl_maybe_log>
 805cddd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cde1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cde5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cde9:	8b 3c 24             	mov    (%esp),%edi
 805cdec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cdf0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805cdf4:	c6 44 29 01 22       	movb   $0x22,0x1(%ecx,%ebp,1)
 805cdf9:	8d 76 00             	lea    0x0(%esi),%esi
 805cdfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ce00:	89 3c 24             	mov    %edi,(%esp)
 805ce03:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ce0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ce0f:	b9 ce 9f 00 00       	mov    $0x9fce,%ecx
 805ce14:	e8 ff 55 00 00       	call   8062418 <__afl_maybe_log>
 805ce19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ce1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ce21:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ce25:	8b 3c 24             	mov    (%esp),%edi
 805ce28:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ce2c:	8d 45 02             	lea    0x2(%ebp),%eax
                    STORE ('"');
 805ce2f:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805ce33:	76 3c                	jbe    805ce71 <quotearg_buffer_restyled+0x731>
 805ce35:	8d 76 00             	lea    0x0(%esi),%esi
 805ce38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ce3c:	89 3c 24             	mov    %edi,(%esp)
 805ce3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ce47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ce4b:	b9 0c e6 00 00       	mov    $0xe60c,%ecx
 805ce50:	e8 c3 55 00 00       	call   8062418 <__afl_maybe_log>
 805ce55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ce59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ce5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ce61:	8b 3c 24             	mov    (%esp),%edi
 805ce64:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ce68:	8b 74 24 1c          	mov    0x1c(%esp),%esi
 805ce6c:	c6 44 2e 02 22       	movb   $0x22,0x2(%esi,%ebp,1)
 805ce71:	8d 76 00             	lea    0x0(%esi),%esi
 805ce74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ce78:	89 3c 24             	mov    %edi,(%esp)
 805ce7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ce83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ce87:	b9 65 28 00 00       	mov    $0x2865,%ecx
 805ce8c:	e8 87 55 00 00       	call   8062418 <__afl_maybe_log>
 805ce91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ce95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ce99:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ce9d:	8b 3c 24             	mov    (%esp),%edi
 805cea0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cea4:	8d 55 03             	lea    0x3(%ebp),%edx
                    STORE ('?');
 805cea7:	39 54 24 10          	cmp    %edx,0x10(%esp)
 805ceab:	76 3c                	jbe    805cee9 <quotearg_buffer_restyled+0x7a9>
 805cead:	8d 76 00             	lea    0x0(%esi),%esi
 805ceb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ceb4:	89 3c 24             	mov    %edi,(%esp)
 805ceb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cebb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cebf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cec3:	b9 92 74 00 00       	mov    $0x7492,%ecx
 805cec8:	e8 4b 55 00 00       	call   8062418 <__afl_maybe_log>
 805cecd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ced1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ced5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ced9:	8b 3c 24             	mov    (%esp),%edi
 805cedc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cee0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805cee4:	c6 44 29 03 3f       	movb   $0x3f,0x3(%ecx,%ebp,1)
 805cee9:	8d 76 00             	lea    0x0(%esi),%esi
                    break;
 805ceec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cef0:	89 3c 24             	mov    %edi,(%esp)
 805cef3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cef7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cefb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ceff:	b9 37 8c 00 00       	mov    $0x8c37,%ecx
 805cf04:	e8 0f 55 00 00       	call   8062418 <__afl_maybe_log>
 805cf09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cf0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cf11:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cf15:	8b 3c 24             	mov    (%esp),%edi
 805cf18:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cf1c:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
                    c = arg[i + 2];
                    i += 2;
                    STORE ('?');
                    STORE ('"');
                    STORE ('"');
                    STORE ('?');
 805cf21:	83 c5 04             	add    $0x4,%ebp
                    break;
 805cf24:	89 de                	mov    %ebx,%esi
 805cf26:	8d 76 00             	lea    0x0(%esi),%esi
 805cf29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 805cf30:	0f b6 44 24 3a       	movzbl 0x3a(%esp),%eax
 805cf35:	38 44 24 0f          	cmp    %al,0xf(%esp)
 805cf39:	0f 82 e1 00 00 00    	jb     805d020 <quotearg_buffer_restyled+0x8e0>
 805cf3f:	90                   	nop
 805cf40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cf44:	89 3c 24             	mov    %edi,(%esp)
 805cf47:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cf4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cf4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cf53:	b9 2c a9 00 00       	mov    $0xa92c,%ecx
 805cf58:	e8 bb 54 00 00       	call   8062418 <__afl_maybe_log>
 805cf5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cf61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cf65:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cf69:	8b 3c 24             	mov    (%esp),%edi
 805cf6c:	8d 64 24 10          	lea    0x10(%esp),%esp
             && quote_these_too
 805cf70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cf74:	89 3c 24             	mov    %edi,(%esp)
 805cf77:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cf7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cf7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cf83:	b9 0f ce 00 00       	mov    $0xce0f,%ecx
 805cf88:	e8 8b 54 00 00       	call   8062418 <__afl_maybe_log>
 805cf8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cf91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cf95:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cf99:	8b 3c 24             	mov    (%esp),%edi
 805cf9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cfa0:	8b 4c 24 7c          	mov    0x7c(%esp),%ecx
 805cfa4:	85 c9                	test   %ecx,%ecx
 805cfa6:	74 78                	je     805d020 <quotearg_buffer_restyled+0x8e0>
 805cfa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cfac:	89 3c 24             	mov    %edi,(%esp)
 805cfaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cfb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cfb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cfbb:	b9 d8 b9 00 00       	mov    $0xb9d8,%ecx
 805cfc0:	e8 53 54 00 00       	call   8062418 <__afl_maybe_log>
 805cfc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cfc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cfcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cfd1:	8b 3c 24             	mov    (%esp),%edi
 805cfd4:	8d 64 24 10          	lea    0x10(%esp),%esp
             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)
 805cfd8:	89 d3                	mov    %edx,%ebx
 805cfda:	8b 4c 24 7c          	mov    0x7c(%esp),%ecx
 805cfde:	c0 eb 05             	shr    $0x5,%bl
 805cfe1:	0f b6 c3             	movzbl %bl,%eax
 805cfe4:	8b 1c 81             	mov    (%ecx,%eax,4),%ebx
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 805cfe7:	0f a3 d3             	bt     %edx,%ebx
 805cfea:	0f 82 9c 00 00 00    	jb     805d08c <quotearg_buffer_restyled+0x94c>
 805cff0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cff4:	89 3c 24             	mov    %edi,(%esp)
 805cff7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cffb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cfff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d003:	b9 1b c8 00 00       	mov    $0xc81b,%ecx
 805d008:	e8 0b 54 00 00       	call   8062418 <__afl_maybe_log>
 805d00d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d011:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d015:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d019:	8b 3c 24             	mov    (%esp),%edi
 805d01c:	8d 64 24 10          	lea    0x10(%esp),%esp
             && quote_these_too
             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)
          && !is_right_quote)
 805d020:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d024:	89 3c 24             	mov    %edi,(%esp)
 805d027:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d02b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d02f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d033:	b9 cb 10 00 00       	mov    $0x10cb,%ecx
 805d038:	e8 db 53 00 00       	call   8062418 <__afl_maybe_log>
 805d03d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d041:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d045:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d049:	8b 3c 24             	mov    (%esp),%edi
 805d04c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d050:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805d055:	0f 84 10 01 00 00    	je     805d16b <quotearg_buffer_restyled+0xa2b>
 805d05b:	90                   	nop
 805d05c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d060:	89 3c 24             	mov    %edi,(%esp)
 805d063:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d067:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d06b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d06f:	b9 a4 e2 00 00       	mov    $0xe2a4,%ecx
 805d074:	e8 9f 53 00 00       	call   8062418 <__afl_maybe_log>
 805d079:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d07d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d081:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d085:	8b 3c 24             	mov    (%esp),%edi
 805d088:	8d 64 24 10          	lea    0x10(%esp),%esp
        goto store_c;

    store_escape:
      if (elide_outer_quotes)
 805d08c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d090:	89 3c 24             	mov    %edi,(%esp)
 805d093:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d097:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d09b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d09f:	b9 46 e7 00 00       	mov    $0xe746,%ecx
 805d0a4:	e8 6f 53 00 00       	call   8062418 <__afl_maybe_log>
 805d0a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d0ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d0b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d0b5:	8b 3c 24             	mov    (%esp),%edi
 805d0b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d0bc:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805d0c1:	0f 85 a9 06 00 00    	jne    805d770 <quotearg_buffer_restyled+0x1030>
 805d0c7:	90                   	nop
 805d0c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d0cc:	89 3c 24             	mov    %edi,(%esp)
 805d0cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d0d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d0d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d0db:	b9 03 17 00 00       	mov    $0x1703,%ecx
 805d0e0:	e8 33 53 00 00       	call   8062418 <__afl_maybe_log>
 805d0e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d0e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d0ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d0f1:	8b 3c 24             	mov    (%esp),%edi
 805d0f4:	8d 64 24 10          	lea    0x10(%esp),%esp
        goto force_outer_quoting_style;
      STORE ('\\');
 805d0f8:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805d0fc:	73 3a                	jae    805d138 <quotearg_buffer_restyled+0x9f8>
 805d0fe:	66 90                	xchg   %ax,%ax
 805d100:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d104:	89 3c 24             	mov    %edi,(%esp)
 805d107:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d10b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d10f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d113:	b9 15 22 00 00       	mov    $0x2215,%ecx
 805d118:	e8 fb 52 00 00       	call   8062418 <__afl_maybe_log>
 805d11d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d121:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d125:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d129:	8b 3c 24             	mov    (%esp),%edi
 805d12c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d130:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805d134:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 805d138:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d13c:	89 3c 24             	mov    %edi,(%esp)
 805d13f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d143:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d147:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d14b:	b9 44 3c 00 00       	mov    $0x3c44,%ecx
 805d150:	e8 c3 52 00 00       	call   8062418 <__afl_maybe_log>
 805d155:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d159:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d15d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d161:	8b 3c 24             	mov    (%esp),%edi
 805d164:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d168:	83 c5 01             	add    $0x1,%ebp
 805d16b:	90                   	nop
 805d16c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d170:	89 3c 24             	mov    %edi,(%esp)
 805d173:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d177:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d17b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d17f:	b9 9e 50 00 00       	mov    $0x509e,%ecx
 805d184:	e8 8f 52 00 00       	call   8062418 <__afl_maybe_log>
 805d189:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d18d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d191:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d195:	8b 3c 24             	mov    (%esp),%edi
 805d198:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d19c:	83 c6 01             	add    $0x1,%esi
 805d19f:	90                   	nop

    store_c:
      STORE (c);
 805d1a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d1a4:	89 3c 24             	mov    %edi,(%esp)
 805d1a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d1ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d1af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d1b3:	b9 01 95 00 00       	mov    $0x9501,%ecx
 805d1b8:	e8 5b 52 00 00       	call   8062418 <__afl_maybe_log>
 805d1bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d1c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d1c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d1c9:	8b 3c 24             	mov    (%esp),%edi
 805d1cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d1d0:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805d1d4:	73 39                	jae    805d20f <quotearg_buffer_restyled+0xacf>
 805d1d6:	66 90                	xchg   %ax,%ax
 805d1d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d1dc:	89 3c 24             	mov    %edi,(%esp)
 805d1df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d1e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d1e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d1eb:	b9 a7 01 00 00       	mov    $0x1a7,%ecx
 805d1f0:	e8 23 52 00 00       	call   8062418 <__afl_maybe_log>
 805d1f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d1f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d1fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d201:	8b 3c 24             	mov    (%esp),%edi
 805d204:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d208:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805d20c:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 805d20f:	90                   	nop
 805d210:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d214:	89 3c 24             	mov    %edi,(%esp)
 805d217:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d21b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d21f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d223:	b9 ab 9a 00 00       	mov    $0x9aab,%ecx
 805d228:	e8 eb 51 00 00       	call   8062418 <__afl_maybe_log>
 805d22d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d231:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d235:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d239:	8b 3c 24             	mov    (%esp),%edi
 805d23c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d240:	83 c5 01             	add    $0x1,%ebp

    default:
      abort ();
    }

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
 805d243:	39 fe                	cmp    %edi,%esi
 805d245:	0f 95 c1             	setne  %cl
 805d248:	83 ff ff             	cmp    $0xffffffff,%edi
 805d24b:	0f 85 3f f6 ff ff    	jne    805c890 <quotearg_buffer_restyled+0x150>
 805d251:	8d 76 00             	lea    0x0(%esi),%esi
 805d254:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d258:	89 3c 24             	mov    %edi,(%esp)
 805d25b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d25f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d263:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d267:	b9 53 c7 00 00       	mov    $0xc753,%ecx
 805d26c:	e8 a7 51 00 00       	call   8062418 <__afl_maybe_log>
 805d271:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d275:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d279:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d27d:	8b 3c 24             	mov    (%esp),%edi
 805d280:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d284:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d288:	89 3c 24             	mov    %edi,(%esp)
 805d28b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d28f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d293:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d297:	b9 5b 34 00 00       	mov    $0x345b,%ecx
 805d29c:	e8 77 51 00 00       	call   8062418 <__afl_maybe_log>
 805d2a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d2a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d2a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d2ad:	8b 3c 24             	mov    (%esp),%edi
 805d2b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d2b4:	8b 54 24 14          	mov    0x14(%esp),%edx
 805d2b8:	80 3c 32 00          	cmpb   $0x0,(%edx,%esi,1)
 805d2bc:	0f 95 c1             	setne  %cl
 805d2bf:	84 c9                	test   %cl,%cl
 805d2c1:	0f 85 01 f6 ff ff    	jne    805c8c8 <quotearg_buffer_restyled+0x188>
 805d2c7:	90                   	nop
 805d2c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d2cc:	89 3c 24             	mov    %edi,(%esp)
 805d2cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d2d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d2d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d2db:	b9 ae b8 00 00       	mov    $0xb8ae,%ecx
 805d2e0:	e8 33 51 00 00       	call   8062418 <__afl_maybe_log>
 805d2e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d2e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d2ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d2f1:	8b 3c 24             	mov    (%esp),%edi
 805d2f4:	8d 64 24 10          	lea    0x10(%esp),%esp

    store_c:
      STORE (c);
    }

  if (len == 0 && quoting_style == shell_always_quoting_style
 805d2f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d2fc:	89 3c 24             	mov    %edi,(%esp)
 805d2ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d303:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d307:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d30b:	b9 cc dd 00 00       	mov    $0xddcc,%ecx
 805d310:	e8 03 51 00 00       	call   8062418 <__afl_maybe_log>
 805d315:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d319:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d31d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d321:	8b 3c 24             	mov    (%esp),%edi
 805d324:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d328:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 805d32d:	89 e8                	mov    %ebp,%eax
 805d32f:	0f 94 c3             	sete   %bl
      && elide_outer_quotes)
 805d332:	84 5c 24 39          	test   %bl,0x39(%esp)
 805d336:	74 68                	je     805d3a0 <quotearg_buffer_restyled+0xc60>
 805d338:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d33c:	89 3c 24             	mov    %edi,(%esp)
 805d33f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d343:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d347:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d34b:	b9 af d3 00 00       	mov    $0xd3af,%ecx
 805d350:	e8 c3 50 00 00       	call   8062418 <__afl_maybe_log>
 805d355:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d359:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d35d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d361:	8b 3c 24             	mov    (%esp),%edi
 805d364:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d368:	85 ed                	test   %ebp,%ebp
 805d36a:	0f 84 00 04 00 00    	je     805d770 <quotearg_buffer_restyled+0x1030>
 805d370:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d374:	89 3c 24             	mov    %edi,(%esp)
 805d377:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d37b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d37f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d383:	b9 76 8f 00 00       	mov    $0x8f76,%ecx
 805d388:	e8 8b 50 00 00       	call   8062418 <__afl_maybe_log>
 805d38d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d391:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d395:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d399:	8b 3c 24             	mov    (%esp),%edi
 805d39c:	8d 64 24 10          	lea    0x10(%esp),%esp
    goto force_outer_quoting_style;

  if (quote_string && !elide_outer_quotes)
 805d3a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d3a4:	89 3c 24             	mov    %edi,(%esp)
 805d3a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d3ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d3af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d3b3:	b9 0f aa 00 00       	mov    $0xaa0f,%ecx
 805d3b8:	e8 5b 50 00 00       	call   8062418 <__afl_maybe_log>
 805d3bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d3c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d3c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d3c9:	8b 3c 24             	mov    (%esp),%edi
 805d3cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d3d0:	8b 7c 24 28          	mov    0x28(%esp),%edi
 805d3d4:	85 ff                	test   %edi,%edi
 805d3d6:	0f 95 c2             	setne  %dl
 805d3d9:	38 54 24 39          	cmp    %dl,0x39(%esp)
 805d3dd:	0f 83 21 01 00 00    	jae    805d504 <quotearg_buffer_restyled+0xdc4>
 805d3e3:	90                   	nop
 805d3e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d3e8:	89 3c 24             	mov    %edi,(%esp)
 805d3eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d3ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d3f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d3f7:	b9 54 90 00 00       	mov    $0x9054,%ecx
 805d3fc:	e8 17 50 00 00       	call   8062418 <__afl_maybe_log>
 805d401:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d405:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d409:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d40d:	8b 3c 24             	mov    (%esp),%edi
 805d410:	8d 64 24 10          	lea    0x10(%esp),%esp
    for (; *quote_string; quote_string++)
 805d414:	8b 74 24 28          	mov    0x28(%esp),%esi
 805d418:	0f b6 16             	movzbl (%esi),%edx
 805d41b:	84 d2                	test   %dl,%dl
 805d41d:	0f 84 e1 00 00 00    	je     805d504 <quotearg_buffer_restyled+0xdc4>
 805d423:	90                   	nop
 805d424:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d428:	89 3c 24             	mov    %edi,(%esp)
 805d42b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d42f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d433:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d437:	b9 68 54 00 00       	mov    $0x5468,%ecx
 805d43c:	e8 d7 4f 00 00       	call   8062418 <__afl_maybe_log>
 805d441:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d445:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d449:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d44d:	8b 3c 24             	mov    (%esp),%edi
 805d450:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d454:	89 f1                	mov    %esi,%ecx
 805d456:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 805d45a:	29 e9                	sub    %ebp,%ecx
 805d45c:	8b 6c 24 1c          	mov    0x1c(%esp),%ebp
      STORE (*quote_string);
 805d460:	39 c3                	cmp    %eax,%ebx
 805d462:	76 34                	jbe    805d498 <quotearg_buffer_restyled+0xd58>
 805d464:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d468:	89 3c 24             	mov    %edi,(%esp)
 805d46b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d46f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d473:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d477:	b9 7d 76 00 00       	mov    $0x767d,%ecx
 805d47c:	e8 97 4f 00 00       	call   8062418 <__afl_maybe_log>
 805d481:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d485:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d489:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d48d:	8b 3c 24             	mov    (%esp),%edi
 805d490:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d494:	88 54 05 00          	mov    %dl,0x0(%ebp,%eax,1)
 805d498:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d49c:	89 3c 24             	mov    %edi,(%esp)
 805d49f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d4a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d4a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d4ab:	b9 c5 f0 00 00       	mov    $0xf0c5,%ecx
 805d4b0:	e8 63 4f 00 00       	call   8062418 <__afl_maybe_log>
 805d4b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d4b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d4bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d4c1:	8b 3c 24             	mov    (%esp),%edi
 805d4c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d4c8:	83 c0 01             	add    $0x1,%eax
  if (len == 0 && quoting_style == shell_always_quoting_style
      && elide_outer_quotes)
    goto force_outer_quoting_style;

  if (quote_string && !elide_outer_quotes)
    for (; *quote_string; quote_string++)
 805d4cb:	0f b6 14 01          	movzbl (%ecx,%eax,1),%edx
 805d4cf:	84 d2                	test   %dl,%dl
 805d4d1:	75 8d                	jne    805d460 <quotearg_buffer_restyled+0xd20>
 805d4d3:	90                   	nop
 805d4d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d4d8:	89 3c 24             	mov    %edi,(%esp)
 805d4db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d4df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d4e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d4e7:	b9 c6 a8 00 00       	mov    $0xa8c6,%ecx
 805d4ec:	e8 27 4f 00 00       	call   8062418 <__afl_maybe_log>
 805d4f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d4f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d4f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d4fd:	8b 3c 24             	mov    (%esp),%edi
 805d500:	8d 64 24 10          	lea    0x10(%esp),%esp
      STORE (*quote_string);

  if (len < buffersize)
 805d504:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d508:	89 3c 24             	mov    %edi,(%esp)
 805d50b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d50f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d513:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d517:	b9 74 ba 00 00       	mov    $0xba74,%ecx
 805d51c:	e8 f7 4e 00 00       	call   8062418 <__afl_maybe_log>
 805d521:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d525:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d529:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d52d:	8b 3c 24             	mov    (%esp),%edi
 805d530:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d534:	3b 44 24 10          	cmp    0x10(%esp),%eax
 805d538:	0f 83 6c 02 00 00    	jae    805d7aa <quotearg_buffer_restyled+0x106a>
 805d53e:	66 90                	xchg   %ax,%ax
 805d540:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d544:	89 3c 24             	mov    %edi,(%esp)
 805d547:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d54b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d54f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d553:	b9 ae cb 00 00       	mov    $0xcbae,%ecx
 805d558:	e8 bb 4e 00 00       	call   8062418 <__afl_maybe_log>
 805d55d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d561:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d565:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d569:	8b 3c 24             	mov    (%esp),%edi
 805d56c:	8d 64 24 10          	lea    0x10(%esp),%esp
    buffer[len] = '\0';
 805d570:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
 805d574:	c6 04 07 00          	movb   $0x0,(%edi,%eax,1)
     sufficiently quotes the specified characters.  */
  return quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                   quoting_style,
                                   flags & ~QA_ELIDE_OUTER_QUOTES, NULL,
                                   left_quote, right_quote);
}
 805d578:	83 c4 5c             	add    $0x5c,%esp
 805d57b:	5b                   	pop    %ebx
 805d57c:	5e                   	pop    %esi
 805d57d:	5f                   	pop    %edi
 805d57e:	5d                   	pop    %ebp
 805d57f:	c3                   	ret    
              goto store_escape;
            }
          break;

        case '{': case '}': /* sometimes special if isolated */
          if (! (argsize == SIZE_MAX ? arg[1] == '\0' : argsize == 1))
 805d580:	83 ff 01             	cmp    $0x1,%edi
 805d583:	0f 95 c0             	setne  %al
 805d586:	83 ff ff             	cmp    $0xffffffff,%edi
 805d589:	0f 84 a1 26 00 00    	je     805fc30 <quotearg_buffer_restyled+0x34f0>
 805d58f:	90                   	nop
 805d590:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d594:	89 3c 24             	mov    %edi,(%esp)
 805d597:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d59b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d59f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d5a3:	b9 87 32 00 00       	mov    $0x3287,%ecx
 805d5a8:	e8 6b 4e 00 00       	call   8062418 <__afl_maybe_log>
 805d5ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d5b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d5b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d5b9:	8b 3c 24             	mov    (%esp),%edi
 805d5bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d5c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d5c4:	89 3c 24             	mov    %edi,(%esp)
 805d5c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d5cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d5cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d5d3:	b9 7c f3 00 00       	mov    $0xf37c,%ecx
 805d5d8:	e8 3b 4e 00 00       	call   8062418 <__afl_maybe_log>
 805d5dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d5e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d5e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d5e9:	8b 3c 24             	mov    (%esp),%edi
 805d5ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d5f0:	84 c0                	test   %al,%al
 805d5f2:	0f 85 38 f9 ff ff    	jne    805cf30 <quotearg_buffer_restyled+0x7f0>
 805d5f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d5fc:	89 3c 24             	mov    %edi,(%esp)
 805d5ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d603:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d607:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d60b:	b9 61 2d 00 00       	mov    $0x2d61,%ecx
 805d610:	e8 03 4e 00 00       	call   8062418 <__afl_maybe_log>
 805d615:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d619:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d61d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d621:	8b 3c 24             	mov    (%esp),%edi
 805d624:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
          /* Fall through.  */
        case '#': case '~':
          if (i != 0)
 805d628:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d62c:	89 3c 24             	mov    %edi,(%esp)
 805d62f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d633:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d637:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d63b:	b9 4d 69 00 00       	mov    $0x694d,%ecx
 805d640:	e8 d3 4d 00 00       	call   8062418 <__afl_maybe_log>
 805d645:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d649:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d64d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d651:	8b 3c 24             	mov    (%esp),%edi
 805d654:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d658:	85 f6                	test   %esi,%esi
 805d65a:	0f 85 d0 f8 ff ff    	jne    805cf30 <quotearg_buffer_restyled+0x7f0>
 805d660:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d664:	89 3c 24             	mov    %edi,(%esp)
 805d667:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d66b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d66f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d673:	b9 b0 1e 00 00       	mov    $0x1eb0,%ecx
 805d678:	e8 9b 4d 00 00       	call   8062418 <__afl_maybe_log>
 805d67d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d681:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d685:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d689:	8b 3c 24             	mov    (%esp),%edi
 805d68c:	8d 64 24 10          	lea    0x10(%esp),%esp
        case '`': case '|':
          /* A shell special character.  In theory, '$' and '`' could
             be the first bytes of multibyte characters, which means
             we should check them with mbrtowc, but in practice this
             doesn't happen so it's not worth worrying about.  */
          if (quoting_style == shell_always_quoting_style
 805d690:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d694:	89 3c 24             	mov    %edi,(%esp)
 805d697:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d69b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d69f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d6a3:	b9 15 b1 00 00       	mov    $0xb115,%ecx
 805d6a8:	e8 6b 4d 00 00       	call   8062418 <__afl_maybe_log>
 805d6ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d6b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d6b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d6b9:	8b 3c 24             	mov    (%esp),%edi
 805d6bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d6c0:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 805d6c5:	0f 85 65 f8 ff ff    	jne    805cf30 <quotearg_buffer_restyled+0x7f0>
 805d6cb:	90                   	nop
 805d6cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d6d0:	89 3c 24             	mov    %edi,(%esp)
 805d6d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d6d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d6db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d6df:	b9 77 21 00 00       	mov    $0x2177,%ecx
 805d6e4:	e8 2f 4d 00 00       	call   8062418 <__afl_maybe_log>
 805d6e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d6ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d6f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d6f5:	8b 3c 24             	mov    (%esp),%edi
 805d6f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d6fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d700:	89 3c 24             	mov    %edi,(%esp)
 805d703:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d707:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d70b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d70f:	b9 42 20 00 00       	mov    $0x2042,%ecx
 805d714:	e8 ff 4c 00 00       	call   8062418 <__afl_maybe_log>
 805d719:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d71d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d721:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d725:	8b 3c 24             	mov    (%esp),%edi
 805d728:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d72c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805d731:	0f 84 f9 f7 ff ff    	je     805cf30 <quotearg_buffer_restyled+0x7f0>
 805d737:	90                   	nop
 805d738:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d73c:	89 3c 24             	mov    %edi,(%esp)
 805d73f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d743:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d747:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d74b:	b9 79 ec 00 00       	mov    $0xec79,%ecx
 805d750:	e8 c3 4c 00 00       	call   8062418 <__afl_maybe_log>
 805d755:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d759:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d75d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d761:	8b 3c 24             	mov    (%esp),%edi
 805d764:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d768:	90                   	nop
 805d769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  return len;

 force_outer_quoting_style:
  /* Don't reuse quote_these_too, since the addition of outer quotes
     sufficiently quotes the specified characters.  */
  return quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
 805d770:	83 ec 08             	sub    $0x8,%esp
 805d773:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
 805d77a:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
 805d781:	6a 00                	push   $0x0
 805d783:	8b ac 24 8c 00 00 00 	mov    0x8c(%esp),%ebp
 805d78a:	83 e5 fd             	and    $0xfffffffd,%ebp
 805d78d:	55                   	push   %ebp
 805d78e:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
 805d795:	57                   	push   %edi
 805d796:	8b 4c 24 34          	mov    0x34(%esp),%ecx
 805d79a:	8b 54 24 30          	mov    0x30(%esp),%edx
 805d79e:	8b 44 24 3c          	mov    0x3c(%esp),%eax
 805d7a2:	e8 99 ef ff ff       	call   805c740 <quotearg_buffer_restyled>
 805d7a7:	83 c4 20             	add    $0x20,%esp
 805d7aa:	66 90                	xchg   %ax,%ax
                                   quoting_style,
                                   flags & ~QA_ELIDE_OUTER_QUOTES, NULL,
                                   left_quote, right_quote);
}
 805d7ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d7b0:	89 3c 24             	mov    %edi,(%esp)
 805d7b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d7b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d7bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d7bf:	b9 fa a0 00 00       	mov    $0xa0fa,%ecx
 805d7c4:	e8 4f 4c 00 00       	call   8062418 <__afl_maybe_log>
 805d7c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d7cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d7d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d7d5:	8b 3c 24             	mov    (%esp),%edi
 805d7d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d7dc:	83 c4 5c             	add    $0x5c,%esp
 805d7df:	5b                   	pop    %ebx
 805d7e0:	5e                   	pop    %esi
 805d7e1:	5f                   	pop    %edi
 805d7e2:	5d                   	pop    %ebp
 805d7e3:	c3                   	ret    
 805d7e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
        case '\t': esc = 't'; goto c_and_shell_escape;
 805d7e8:	b9 74 00 00 00       	mov    $0x74,%ecx
 805d7ed:	8d 76 00             	lea    0x0(%esi),%esi
             outer quotes and nothing else is problematic.  */
          if (backslash_escapes && elide_outer_quotes && quote_string_len)
            goto store_c;

        c_and_shell_escape:
          if (quoting_style == shell_always_quoting_style
 805d7f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d7f4:	89 3c 24             	mov    %edi,(%esp)
 805d7f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d7fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d7ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d803:	b9 c0 91 00 00       	mov    $0x91c0,%ecx
 805d808:	e8 0b 4c 00 00       	call   8062418 <__afl_maybe_log>
 805d80d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d811:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d815:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d819:	8b 3c 24             	mov    (%esp),%edi
 805d81c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d820:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 805d825:	75 6d                	jne    805d894 <quotearg_buffer_restyled+0x1154>
 805d827:	90                   	nop
 805d828:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d82c:	89 3c 24             	mov    %edi,(%esp)
 805d82f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d833:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d837:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d83b:	b9 12 5a 00 00       	mov    $0x5a12,%ecx
 805d840:	e8 d3 4b 00 00       	call   8062418 <__afl_maybe_log>
 805d845:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d849:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d84d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d851:	8b 3c 24             	mov    (%esp),%edi
 805d854:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d858:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805d85d:	0f 85 0d ff ff ff    	jne    805d770 <quotearg_buffer_restyled+0x1030>
 805d863:	90                   	nop
 805d864:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d868:	89 3c 24             	mov    %edi,(%esp)
 805d86b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d86f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d873:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d877:	b9 0d cb 00 00       	mov    $0xcb0d,%ecx
 805d87c:	e8 97 4b 00 00       	call   8062418 <__afl_maybe_log>
 805d881:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d885:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d889:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d88d:	8b 3c 24             	mov    (%esp),%edi
 805d890:	8d 64 24 10          	lea    0x10(%esp),%esp
              && elide_outer_quotes)
            goto force_outer_quoting_style;
          /* Fall through.  */
        c_escape:
          if (backslash_escapes)
 805d894:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d898:	89 3c 24             	mov    %edi,(%esp)
 805d89b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d89f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d8a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d8a7:	b9 75 27 00 00       	mov    $0x2775,%ecx
 805d8ac:	e8 67 4b 00 00       	call   8062418 <__afl_maybe_log>
 805d8b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d8b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d8b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d8bd:	8b 3c 24             	mov    (%esp),%edi
 805d8c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d8c4:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 805d8c9:	0f 84 61 f6 ff ff    	je     805cf30 <quotearg_buffer_restyled+0x7f0>
 805d8cf:	90                   	nop
 805d8d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d8d4:	89 3c 24             	mov    %edi,(%esp)
 805d8d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d8db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d8df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d8e3:	b9 7c 92 00 00       	mov    $0x927c,%ecx
 805d8e8:	e8 2b 4b 00 00       	call   8062418 <__afl_maybe_log>
 805d8ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d8f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d8f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d8f9:	8b 3c 24             	mov    (%esp),%edi
 805d8fc:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              c = esc;
 805d900:	89 ca                	mov    %ecx,%edx
 805d902:	e9 85 f7 ff ff       	jmp    805d08c <quotearg_buffer_restyled+0x94c>
 805d907:	89 f6                	mov    %esi,%esi
 805d909:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
            default:
              break;
            }
          break;

        case '\a': esc = 'a'; goto c_escape;
 805d910:	b9 61 00 00 00       	mov    $0x61,%ecx
 805d915:	e9 7a ff ff ff       	jmp    805d894 <quotearg_buffer_restyled+0x1154>
 805d91a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
 805d920:	b9 6e 00 00 00       	mov    $0x6e,%ecx
 805d925:	e9 c3 fe ff ff       	jmp    805d7ed <quotearg_buffer_restyled+0x10ad>
 805d92a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
              break;
            }
          break;

        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
 805d930:	b9 62 00 00 00       	mov    $0x62,%ecx
 805d935:	e9 5a ff ff ff       	jmp    805d894 <quotearg_buffer_restyled+0x1154>
 805d93a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

      c = arg[i];
      switch (c)
        {
        case '\0':
          if (backslash_escapes)
 805d940:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 805d945:	0f 84 7d 22 00 00    	je     805fbc8 <quotearg_buffer_restyled+0x3488>
 805d94b:	90                   	nop
 805d94c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d950:	89 3c 24             	mov    %edi,(%esp)
 805d953:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d957:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d95b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d95f:	b9 22 32 00 00       	mov    $0x3222,%ecx
 805d964:	e8 af 4a 00 00       	call   8062418 <__afl_maybe_log>
 805d969:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d96d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d971:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d975:	8b 3c 24             	mov    (%esp),%edi
 805d978:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              if (elide_outer_quotes)
 805d97c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805d981:	0f 85 e9 fd ff ff    	jne    805d770 <quotearg_buffer_restyled+0x1030>
 805d987:	90                   	nop
 805d988:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d98c:	89 3c 24             	mov    %edi,(%esp)
 805d98f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d993:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d997:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d99b:	b9 0f b6 00 00       	mov    $0xb60f,%ecx
 805d9a0:	e8 73 4a 00 00       	call   8062418 <__afl_maybe_log>
 805d9a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d9a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d9ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d9b1:	8b 3c 24             	mov    (%esp),%edi
 805d9b4:	8d 64 24 10          	lea    0x10(%esp),%esp
                goto force_outer_quoting_style;
              STORE ('\\');
 805d9b8:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805d9bc:	73 3a                	jae    805d9f8 <quotearg_buffer_restyled+0x12b8>
 805d9be:	66 90                	xchg   %ax,%ax
 805d9c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d9c4:	89 3c 24             	mov    %edi,(%esp)
 805d9c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d9cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d9cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d9d3:	b9 28 67 00 00       	mov    $0x6728,%ecx
 805d9d8:	e8 3b 4a 00 00       	call   8062418 <__afl_maybe_log>
 805d9dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d9e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d9e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d9e9:	8b 3c 24             	mov    (%esp),%edi
 805d9ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d9f0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805d9f4:	c6 04 2a 5c          	movb   $0x5c,(%edx,%ebp,1)
              /* If quote_string were to begin with digits, we'd need to
                 test for the end of the arg as well.  However, it's
                 hard to imagine any locale that would use digits in
                 quotes, and set_custom_quoting is documented not to
                 accept them.  */
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
 805d9f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d9fc:	89 3c 24             	mov    %edi,(%esp)
 805d9ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805da03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805da07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805da0b:	b9 fa fe 00 00       	mov    $0xfefa,%ecx
 805da10:	e8 03 4a 00 00       	call   8062418 <__afl_maybe_log>
 805da15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805da19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805da1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805da21:	8b 3c 24             	mov    (%esp),%edi
 805da24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805da28:	8d 5e 01             	lea    0x1(%esi),%ebx
        case '\0':
          if (backslash_escapes)
            {
              if (elide_outer_quotes)
                goto force_outer_quoting_style;
              STORE ('\\');
 805da2b:	8d 45 01             	lea    0x1(%ebp),%eax
              /* If quote_string were to begin with digits, we'd need to
                 test for the end of the arg as well.  However, it's
                 hard to imagine any locale that would use digits in
                 quotes, and set_custom_quoting is documented not to
                 accept them.  */
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
 805da2e:	39 df                	cmp    %ebx,%edi
 805da30:	0f 86 6a 01 00 00    	jbe    805dba0 <quotearg_buffer_restyled+0x1460>
 805da36:	66 90                	xchg   %ax,%ax
 805da38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805da3c:	89 3c 24             	mov    %edi,(%esp)
 805da3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805da43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805da47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805da4b:	b9 49 c2 00 00       	mov    $0xc249,%ecx
 805da50:	e8 c3 49 00 00       	call   8062418 <__afl_maybe_log>
 805da55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805da59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805da5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805da61:	8b 3c 24             	mov    (%esp),%edi
 805da64:	8d 64 24 10          	lea    0x10(%esp),%esp
 805da68:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 805da6c:	0f b6 54 31 01       	movzbl 0x1(%ecx,%esi,1),%edx
 805da71:	8d 5a d0             	lea    -0x30(%edx),%ebx
 805da74:	88 54 24 20          	mov    %dl,0x20(%esp)
 805da78:	80 fb 09             	cmp    $0x9,%bl
 805da7b:	0f 87 1f 01 00 00    	ja     805dba0 <quotearg_buffer_restyled+0x1460>
 805da81:	8d 76 00             	lea    0x0(%esi),%esi
 805da84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805da88:	89 3c 24             	mov    %edi,(%esp)
 805da8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805da8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805da93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805da97:	b9 6c 3a 00 00       	mov    $0x3a6c,%ecx
 805da9c:	e8 77 49 00 00       	call   8062418 <__afl_maybe_log>
 805daa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805daa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805daa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805daad:	8b 3c 24             	mov    (%esp),%edi
 805dab0:	8d 64 24 10          	lea    0x10(%esp),%esp
                {
                  STORE ('0');
 805dab4:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805dab8:	0f 87 ef 28 00 00    	ja     80603ad <quotearg_buffer_restyled+0x3c6d>
 805dabe:	66 90                	xchg   %ax,%ax
 805dac0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dac4:	89 3c 24             	mov    %edi,(%esp)
 805dac7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dacb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dacf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dad3:	b9 e6 93 00 00       	mov    $0x93e6,%ecx
 805dad8:	e8 3b 49 00 00       	call   8062418 <__afl_maybe_log>
 805dadd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dae1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dae5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dae9:	8b 3c 24             	mov    (%esp),%edi
 805daec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805daf0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805daf4:	89 3c 24             	mov    %edi,(%esp)
 805daf7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dafb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805daff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805db03:	b9 bd 4f 00 00       	mov    $0x4fbd,%ecx
 805db08:	e8 0b 49 00 00       	call   8062418 <__afl_maybe_log>
 805db0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805db11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805db15:	8b 54 24 04          	mov    0x4(%esp),%edx
 805db19:	8b 3c 24             	mov    (%esp),%edi
 805db1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805db20:	8d 45 02             	lea    0x2(%ebp),%eax
                  STORE ('0');
 805db23:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805db27:	76 3c                	jbe    805db65 <quotearg_buffer_restyled+0x1425>
 805db29:	8d 76 00             	lea    0x0(%esi),%esi
 805db2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805db30:	89 3c 24             	mov    %edi,(%esp)
 805db33:	89 54 24 04          	mov    %edx,0x4(%esp)
 805db37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805db3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805db3f:	b9 dc 44 00 00       	mov    $0x44dc,%ecx
 805db44:	e8 cf 48 00 00       	call   8062418 <__afl_maybe_log>
 805db49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805db4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805db51:	8b 54 24 04          	mov    0x4(%esp),%edx
 805db55:	8b 3c 24             	mov    (%esp),%edi
 805db58:	8d 64 24 10          	lea    0x10(%esp),%esp
 805db5c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805db60:	c6 44 2a 02 30       	movb   $0x30,0x2(%edx,%ebp,1)
 805db65:	8d 76 00             	lea    0x0(%esi),%esi
 805db68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805db6c:	89 3c 24             	mov    %edi,(%esp)
 805db6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805db73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805db77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805db7b:	b9 a6 8f 00 00       	mov    $0x8fa6,%ecx
 805db80:	e8 93 48 00 00       	call   8062418 <__afl_maybe_log>
 805db85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805db89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805db8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805db91:	8b 3c 24             	mov    (%esp),%edi
 805db94:	8d 64 24 10          	lea    0x10(%esp),%esp
 805db98:	8d 45 03             	lea    0x3(%ebp),%eax
 805db9b:	90                   	nop
 805db9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
                    i += 2;
                    STORE ('?');
                    STORE ('"');
                    STORE ('"');
                    STORE ('?');
                    break;
 805dba0:	89 c5                	mov    %eax,%ebp
 805dba2:	ba 30 00 00 00       	mov    $0x30,%edx
 805dba7:	e9 c4 f3 ff ff       	jmp    805cf70 <quotearg_buffer_restyled+0x830>
 805dbac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
 805dbb0:	b9 72 00 00 00       	mov    $0x72,%ecx
 805dbb5:	e9 33 fc ff ff       	jmp    805d7ed <quotearg_buffer_restyled+0x10ad>
 805dbba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            }
          break;

        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
 805dbc0:	b9 66 00 00 00       	mov    $0x66,%ecx
 805dbc5:	e9 ca fc ff ff       	jmp    805d894 <quotearg_buffer_restyled+0x1154>
 805dbca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
        case '\t': esc = 't'; goto c_and_shell_escape;
        case '\v': esc = 'v'; goto c_escape;
 805dbd0:	b9 76 00 00 00       	mov    $0x76,%ecx
 805dbd5:	e9 ba fc ff ff       	jmp    805d894 <quotearg_buffer_restyled+0x1154>
 805dbda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        case '\\': esc = c;
          /* No need to escape the escape if we are trying to elide
             outer quotes and nothing else is problematic.  */
          if (backslash_escapes && elide_outer_quotes && quote_string_len)
 805dbe0:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
 805dbe5:	84 4c 24 39          	test   %cl,0x39(%esp)
 805dbe9:	74 6d                	je     805dc58 <quotearg_buffer_restyled+0x1518>
 805dbeb:	90                   	nop
 805dbec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dbf0:	89 3c 24             	mov    %edi,(%esp)
 805dbf3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dbf7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dbfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dbff:	b9 5d 5a 00 00       	mov    $0x5a5d,%ecx
 805dc04:	e8 0f 48 00 00       	call   8062418 <__afl_maybe_log>
 805dc09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dc0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dc11:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dc15:	8b 3c 24             	mov    (%esp),%edi
 805dc18:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dc1c:	80 7c 24 20 00       	cmpb   $0x0,0x20(%esp)
 805dc21:	0f 85 44 f5 ff ff    	jne    805d16b <quotearg_buffer_restyled+0xa2b>
 805dc27:	90                   	nop
 805dc28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dc2c:	89 3c 24             	mov    %edi,(%esp)
 805dc2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dc33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dc37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dc3b:	b9 d0 98 00 00       	mov    $0x98d0,%ecx
 805dc40:	e8 d3 47 00 00       	call   8062418 <__afl_maybe_log>
 805dc45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dc49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dc4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dc51:	8b 3c 24             	mov    (%esp),%edi
 805dc54:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dc58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dc5c:	89 3c 24             	mov    %edi,(%esp)
 805dc5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dc63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dc67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dc6b:	b9 94 7f 00 00       	mov    $0x7f94,%ecx
 805dc70:	e8 a3 47 00 00       	call   8062418 <__afl_maybe_log>
 805dc75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dc79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dc7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dc81:	8b 3c 24             	mov    (%esp),%edi
 805dc84:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dc88:	89 d1                	mov    %edx,%ecx
 805dc8a:	e9 5e fb ff ff       	jmp    805d7ed <quotearg_buffer_restyled+0x10ad>
 805dc8f:	90                   	nop
              && elide_outer_quotes)
            goto force_outer_quoting_style;
          break;

        case '\'':
          if (quoting_style == shell_always_quoting_style)
 805dc90:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 805dc95:	0f 85 95 f2 ff ff    	jne    805cf30 <quotearg_buffer_restyled+0x7f0>
 805dc9b:	90                   	nop
 805dc9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dca0:	89 3c 24             	mov    %edi,(%esp)
 805dca3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dca7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dcab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dcaf:	b9 c0 a9 00 00       	mov    $0xa9c0,%ecx
 805dcb4:	e8 5f 47 00 00       	call   8062418 <__afl_maybe_log>
 805dcb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dcbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dcc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dcc5:	8b 3c 24             	mov    (%esp),%edi
 805dcc8:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              if (elide_outer_quotes)
 805dccc:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805dcd1:	0f 85 99 fa ff ff    	jne    805d770 <quotearg_buffer_restyled+0x1030>
 805dcd7:	90                   	nop
 805dcd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dcdc:	89 3c 24             	mov    %edi,(%esp)
 805dcdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dce3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dce7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dceb:	b9 4b 63 00 00       	mov    $0x634b,%ecx
 805dcf0:	e8 23 47 00 00       	call   8062418 <__afl_maybe_log>
 805dcf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dcf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dcfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dd01:	8b 3c 24             	mov    (%esp),%edi
 805dd04:	8d 64 24 10          	lea    0x10(%esp),%esp
                goto force_outer_quoting_style;
              STORE ('\'');
 805dd08:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805dd0c:	73 3a                	jae    805dd48 <quotearg_buffer_restyled+0x1608>
 805dd0e:	66 90                	xchg   %ax,%ax
 805dd10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dd14:	89 3c 24             	mov    %edi,(%esp)
 805dd17:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dd1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dd23:	b9 e5 60 00 00       	mov    $0x60e5,%ecx
 805dd28:	e8 eb 46 00 00       	call   8062418 <__afl_maybe_log>
 805dd2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dd31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dd35:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dd39:	8b 3c 24             	mov    (%esp),%edi
 805dd3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dd40:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 805dd44:	c6 04 2b 27          	movb   $0x27,(%ebx,%ebp,1)
 805dd48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dd4c:	89 3c 24             	mov    %edi,(%esp)
 805dd4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dd57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dd5b:	b9 89 99 00 00       	mov    $0x9989,%ecx
 805dd60:	e8 b3 46 00 00       	call   8062418 <__afl_maybe_log>
 805dd65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dd69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dd6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dd71:	8b 3c 24             	mov    (%esp),%edi
 805dd74:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dd78:	8d 45 01             	lea    0x1(%ebp),%eax
              STORE ('\\');
 805dd7b:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805dd7f:	76 3c                	jbe    805ddbd <quotearg_buffer_restyled+0x167d>
 805dd81:	8d 76 00             	lea    0x0(%esi),%esi
 805dd84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dd88:	89 3c 24             	mov    %edi,(%esp)
 805dd8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dd93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dd97:	b9 81 81 00 00       	mov    $0x8181,%ecx
 805dd9c:	e8 77 46 00 00       	call   8062418 <__afl_maybe_log>
 805dda1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dda5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dda9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ddad:	8b 3c 24             	mov    (%esp),%edi
 805ddb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ddb4:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805ddb8:	c6 44 29 01 5c       	movb   $0x5c,0x1(%ecx,%ebp,1)
 805ddbd:	8d 76 00             	lea    0x0(%esi),%esi
 805ddc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ddc4:	89 3c 24             	mov    %edi,(%esp)
 805ddc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ddcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ddcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ddd3:	b9 f0 d1 00 00       	mov    $0xd1f0,%ecx
 805ddd8:	e8 3b 46 00 00       	call   8062418 <__afl_maybe_log>
 805dddd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dde1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dde5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dde9:	8b 3c 24             	mov    (%esp),%edi
 805ddec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ddf0:	8d 5d 02             	lea    0x2(%ebp),%ebx
              STORE ('\'');
 805ddf3:	39 5c 24 10          	cmp    %ebx,0x10(%esp)
 805ddf7:	76 3c                	jbe    805de35 <quotearg_buffer_restyled+0x16f5>
 805ddf9:	8d 76 00             	lea    0x0(%esi),%esi
 805ddfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805de00:	89 3c 24             	mov    %edi,(%esp)
 805de03:	89 54 24 04          	mov    %edx,0x4(%esp)
 805de07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805de0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805de0f:	b9 85 67 00 00       	mov    $0x6785,%ecx
 805de14:	e8 ff 45 00 00       	call   8062418 <__afl_maybe_log>
 805de19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805de1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805de21:	8b 54 24 04          	mov    0x4(%esp),%edx
 805de25:	8b 3c 24             	mov    (%esp),%edi
 805de28:	8d 64 24 10          	lea    0x10(%esp),%esp
 805de2c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805de30:	c6 44 28 02 27       	movb   $0x27,0x2(%eax,%ebp,1)
 805de35:	8d 76 00             	lea    0x0(%esi),%esi
 805de38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805de3c:	89 3c 24             	mov    %edi,(%esp)
 805de3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805de43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805de47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805de4b:	b9 74 94 00 00       	mov    $0x9474,%ecx
 805de50:	e8 c3 45 00 00       	call   8062418 <__afl_maybe_log>
 805de55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805de59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805de5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805de61:	8b 3c 24             	mov    (%esp),%edi
 805de64:	8d 64 24 10          	lea    0x10(%esp),%esp
 805de68:	83 c5 03             	add    $0x3,%ebp
 805de6b:	e9 c0 f0 ff ff       	jmp    805cf30 <quotearg_buffer_restyled+0x7f0>
            /* Length of multibyte sequence found so far.  */
            size_t m;

            bool printable;

            if (unibyte_locale)
 805de70:	83 7c 24 34 01       	cmpl   $0x1,0x34(%esp)
 805de75:	0f 85 15 19 00 00    	jne    805f790 <quotearg_buffer_restyled+0x3050>
 805de7b:	90                   	nop
 805de7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805de80:	89 3c 24             	mov    %edi,(%esp)
 805de83:	89 54 24 04          	mov    %edx,0x4(%esp)
 805de87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805de8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805de8f:	b9 1a 24 00 00       	mov    $0x241a,%ecx
 805de94:	e8 7f 45 00 00       	call   8062418 <__afl_maybe_log>
 805de99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805de9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dea1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dea5:	8b 3c 24             	mov    (%esp),%edi
 805dea8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805deac:	88 54 24 20          	mov    %dl,0x20(%esp)
              {
                m = 1;
                printable = isprint (c) != 0;
 805deb0:	e8 6b b6 fe ff       	call   8049520 <__ctype_b_loc@plt>
 805deb5:	0f b6 4c 24 20       	movzbl 0x20(%esp),%ecx
 805deba:	8b 18                	mov    (%eax),%ebx

            bool printable;

            if (unibyte_locale)
              {
                m = 1;
 805debc:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
 805dec3:	00 
                printable = isprint (c) != 0;
 805dec4:	89 ca                	mov    %ecx,%edx
 805dec6:	0f b7 0c 4b          	movzwl (%ebx,%ecx,2),%ecx
 805deca:	66 c1 e9 0e          	shr    $0xe,%cx
 805dece:	83 e1 01             	and    $0x1,%ecx
 805ded1:	88 4c 24 20          	mov    %cl,0x20(%esp)
 805ded5:	8d 76 00             	lea    0x0(%esi),%esi
                      }
                  }
                while (! mbsinit (&mbstate));
              }

            if (1 < m || (backslash_escapes && ! printable))
 805ded8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dedc:	89 3c 24             	mov    %edi,(%esp)
 805dedf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dee3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dee7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805deeb:	b9 6e 40 00 00       	mov    $0x406e,%ecx
 805def0:	e8 23 45 00 00       	call   8062418 <__afl_maybe_log>
 805def5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805def9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805defd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805df01:	8b 3c 24             	mov    (%esp),%edi
 805df04:	8d 64 24 10          	lea    0x10(%esp),%esp
 805df08:	0f b6 5c 24 20       	movzbl 0x20(%esp),%ebx
 805df0d:	38 5c 24 0f          	cmp    %bl,0xf(%esp)
 805df11:	0f 86 19 f0 ff ff    	jbe    805cf30 <quotearg_buffer_restyled+0x7f0>
 805df17:	90                   	nop
 805df18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805df1c:	89 3c 24             	mov    %edi,(%esp)
 805df1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805df23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805df27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805df2b:	b9 30 13 00 00       	mov    $0x1330,%ecx
 805df30:	e8 e3 44 00 00       	call   8062418 <__afl_maybe_log>
 805df35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805df39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805df3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805df41:	8b 3c 24             	mov    (%esp),%edi
 805df44:	8d 64 24 10          	lea    0x10(%esp),%esp
              {
                /* Output a multibyte sequence, or an escaped
                   unprintable unibyte character.  */
                size_t ilim = i + m;
 805df48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805df4c:	89 3c 24             	mov    %edi,(%esp)
 805df4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805df53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805df57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805df5b:	b9 1f 9a 00 00       	mov    $0x9a1f,%ecx
 805df60:	e8 b3 44 00 00       	call   8062418 <__afl_maybe_log>
 805df65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805df69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805df6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805df71:	8b 3c 24             	mov    (%esp),%edi
 805df74:	8d 64 24 10          	lea    0x10(%esp),%esp
 805df78:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805df7c:	89 f1                	mov    %esi,%ecx
 805df7e:	f7 d1                	not    %ecx
 805df80:	01 f3                	add    %esi,%ebx
 805df82:	01 d9                	add    %ebx,%ecx
 805df84:	83 e1 03             	and    $0x3,%ecx
 805df87:	89 4c 24 24          	mov    %ecx,0x24(%esp)
 805df8b:	0f 84 7f 1c 00 00    	je     805fc10 <quotearg_buffer_restyled+0x34d0>
 805df91:	8d 76 00             	lea    0x0(%esi),%esi
 805df94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805df98:	89 3c 24             	mov    %edi,(%esp)
 805df9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805df9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dfa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dfa7:	b9 dd 63 00 00       	mov    $0x63dd,%ecx
 805dfac:	e8 67 44 00 00       	call   8062418 <__afl_maybe_log>
 805dfb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dfb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dfb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dfbd:	8b 3c 24             	mov    (%esp),%edi
 805dfc0:	8d 64 24 10          	lea    0x10(%esp),%esp

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805dfc4:	0f b6 44 24 20       	movzbl 0x20(%esp),%eax
 805dfc9:	38 44 24 0f          	cmp    %al,0xf(%esp)
 805dfcd:	0f 87 6d 1c 00 00    	ja     805fc40 <quotearg_buffer_restyled+0x3500>
 805dfd3:	90                   	nop
 805dfd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dfd8:	89 3c 24             	mov    %edi,(%esp)
 805dfdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dfdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dfe3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dfe7:	b9 e2 4d 00 00       	mov    $0x4de2,%ecx
 805dfec:	e8 27 44 00 00       	call   8062418 <__afl_maybe_log>
 805dff1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dff5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dff9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dffd:	8b 3c 24             	mov    (%esp),%edi
 805e000:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805e004:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805e009:	0f 84 a5 00 00 00    	je     805e0b4 <quotearg_buffer_restyled+0x1974>
 805e00f:	90                   	nop
 805e010:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e014:	89 3c 24             	mov    %edi,(%esp)
 805e017:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e01b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e01f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e023:	b9 a1 76 00 00       	mov    $0x76a1,%ecx
 805e028:	e8 eb 43 00 00       	call   8062418 <__afl_maybe_log>
 805e02d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e031:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e035:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e039:	8b 3c 24             	mov    (%esp),%edi
 805e03c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805e040:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805e044:	0f 82 a3 22 00 00    	jb     80602ed <quotearg_buffer_restyled+0x3bad>
 805e04a:	66 90                	xchg   %ax,%ax
 805e04c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e050:	89 3c 24             	mov    %edi,(%esp)
 805e053:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e057:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e05b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e05f:	b9 32 8d 00 00       	mov    $0x8d32,%ecx
 805e064:	e8 af 43 00 00       	call   8062418 <__afl_maybe_log>
 805e069:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e06d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e071:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e075:	8b 3c 24             	mov    (%esp),%edi
 805e078:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e07c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e080:	89 3c 24             	mov    %edi,(%esp)
 805e083:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e087:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e08b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e08f:	b9 a5 c3 00 00       	mov    $0xc3a5,%ecx
 805e094:	e8 7f 43 00 00       	call   8062418 <__afl_maybe_log>
 805e099:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e09d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e0a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e0a5:	8b 3c 24             	mov    (%esp),%edi
 805e0a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e0ac:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805e0af:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
 805e0b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e0b8:	89 3c 24             	mov    %edi,(%esp)
 805e0bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e0bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e0c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e0c7:	b9 47 d1 00 00       	mov    $0xd147,%ecx
 805e0cc:	e8 47 43 00 00       	call   8062418 <__afl_maybe_log>
 805e0d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e0d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e0d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e0dd:	8b 3c 24             	mov    (%esp),%edi
 805e0e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e0e4:	83 c6 01             	add    $0x1,%esi
 805e0e7:	39 f3                	cmp    %esi,%ebx
 805e0e9:	0f 86 b0 f0 ff ff    	jbe    805d19f <quotearg_buffer_restyled+0xa5f>
 805e0ef:	90                   	nop
 805e0f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e0f4:	89 3c 24             	mov    %edi,(%esp)
 805e0f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e0fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e0ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e103:	b9 a4 37 00 00       	mov    $0x37a4,%ecx
 805e108:	e8 0b 43 00 00       	call   8062418 <__afl_maybe_log>
 805e10d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e111:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e115:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e119:	8b 3c 24             	mov    (%esp),%edi
 805e11c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      break;
                    STORE (c);
 805e120:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805e124:	73 39                	jae    805e15f <quotearg_buffer_restyled+0x1a1f>
 805e126:	66 90                	xchg   %ax,%ax
 805e128:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e12c:	89 3c 24             	mov    %edi,(%esp)
 805e12f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e133:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e137:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e13b:	b9 6b a7 00 00       	mov    $0xa76b,%ecx
 805e140:	e8 d3 42 00 00       	call   8062418 <__afl_maybe_log>
 805e145:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e149:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e14d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e151:	8b 3c 24             	mov    (%esp),%edi
 805e154:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e158:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805e15c:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 805e15f:	90                   	nop
 805e160:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e164:	89 3c 24             	mov    %edi,(%esp)
 805e167:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e16b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e16f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e173:	b9 65 c6 00 00       	mov    $0xc665,%ecx
 805e178:	e8 9b 42 00 00       	call   8062418 <__afl_maybe_log>
 805e17d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e181:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e185:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e189:	8b 3c 24             	mov    (%esp),%edi
 805e18c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e190:	8b 44 24 24          	mov    0x24(%esp),%eax
                    c = arg[++i];
 805e194:	8b 4c 24 14          	mov    0x14(%esp),%ecx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805e198:	83 c5 01             	add    $0x1,%ebp
 805e19b:	83 f8 01             	cmp    $0x1,%eax
                    c = arg[++i];
 805e19e:	0f b6 14 31          	movzbl (%ecx,%esi,1),%edx
 805e1a2:	0f 84 68 1a 00 00    	je     805fc10 <quotearg_buffer_restyled+0x34d0>
 805e1a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e1ac:	89 3c 24             	mov    %edi,(%esp)
 805e1af:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e1b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e1b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e1bb:	b9 1e 73 00 00       	mov    $0x731e,%ecx
 805e1c0:	e8 53 42 00 00       	call   8062418 <__afl_maybe_log>
 805e1c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e1c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e1cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e1d1:	8b 3c 24             	mov    (%esp),%edi
 805e1d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e1d8:	83 f8 02             	cmp    $0x2,%eax
 805e1db:	0f 84 d2 01 00 00    	je     805e3b3 <quotearg_buffer_restyled+0x1c73>
 805e1e1:	8d 76 00             	lea    0x0(%esi),%esi
 805e1e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e1e8:	89 3c 24             	mov    %edi,(%esp)
 805e1eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e1ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e1f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e1f7:	b9 46 51 00 00       	mov    $0x5146,%ecx
 805e1fc:	e8 17 42 00 00       	call   8062418 <__afl_maybe_log>
 805e201:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e205:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e209:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e20d:	8b 3c 24             	mov    (%esp),%edi
 805e210:	8d 64 24 10          	lea    0x10(%esp),%esp
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805e214:	0f b6 4c 24 20       	movzbl 0x20(%esp),%ecx
 805e219:	38 4c 24 0f          	cmp    %cl,0xf(%esp)
 805e21d:	0f 87 dd 1b 00 00    	ja     805fe00 <quotearg_buffer_restyled+0x36c0>
 805e223:	90                   	nop
 805e224:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e228:	89 3c 24             	mov    %edi,(%esp)
 805e22b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e22f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e233:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e237:	b9 3d eb 00 00       	mov    $0xeb3d,%ecx
 805e23c:	e8 d7 41 00 00       	call   8062418 <__afl_maybe_log>
 805e241:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e245:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e249:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e24d:	8b 3c 24             	mov    (%esp),%edi
 805e250:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805e254:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805e259:	0f 84 a5 00 00 00    	je     805e304 <quotearg_buffer_restyled+0x1bc4>
 805e25f:	90                   	nop
 805e260:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e264:	89 3c 24             	mov    %edi,(%esp)
 805e267:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e26b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e26f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e273:	b9 ce 6a 00 00       	mov    $0x6ace,%ecx
 805e278:	e8 9b 41 00 00       	call   8062418 <__afl_maybe_log>
 805e27d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e281:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e285:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e289:	8b 3c 24             	mov    (%esp),%edi
 805e28c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805e290:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805e294:	0f 82 93 20 00 00    	jb     806032d <quotearg_buffer_restyled+0x3bed>
 805e29a:	66 90                	xchg   %ax,%ax
 805e29c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e2a0:	89 3c 24             	mov    %edi,(%esp)
 805e2a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e2a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e2ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e2af:	b9 2f f4 00 00       	mov    $0xf42f,%ecx
 805e2b4:	e8 5f 41 00 00       	call   8062418 <__afl_maybe_log>
 805e2b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e2bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e2c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e2c5:	8b 3c 24             	mov    (%esp),%edi
 805e2c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e2cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e2d0:	89 3c 24             	mov    %edi,(%esp)
 805e2d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e2d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e2db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e2df:	b9 d3 d0 00 00       	mov    $0xd0d3,%ecx
 805e2e4:	e8 2f 41 00 00       	call   8062418 <__afl_maybe_log>
 805e2e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e2ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e2f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e2f5:	8b 3c 24             	mov    (%esp),%edi
 805e2f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e2fc:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805e2ff:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
 805e304:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e308:	89 3c 24             	mov    %edi,(%esp)
 805e30b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e30f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e313:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e317:	b9 8b eb 00 00       	mov    $0xeb8b,%ecx
 805e31c:	e8 f7 40 00 00       	call   8062418 <__afl_maybe_log>
 805e321:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e325:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e329:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e32d:	8b 3c 24             	mov    (%esp),%edi
 805e330:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e334:	83 c6 01             	add    $0x1,%esi
                      break;
                    STORE (c);
 805e337:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805e33b:	73 3a                	jae    805e377 <quotearg_buffer_restyled+0x1c37>
 805e33d:	8d 76 00             	lea    0x0(%esi),%esi
 805e340:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e344:	89 3c 24             	mov    %edi,(%esp)
 805e347:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e34b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e34f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e353:	b9 3f c1 00 00       	mov    $0xc13f,%ecx
 805e358:	e8 bb 40 00 00       	call   8062418 <__afl_maybe_log>
 805e35d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e361:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e365:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e369:	8b 3c 24             	mov    (%esp),%edi
 805e36c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e370:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805e374:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 805e377:	90                   	nop
                    c = arg[++i];
 805e378:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e37c:	89 3c 24             	mov    %edi,(%esp)
 805e37f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e383:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e387:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e38b:	b9 22 18 00 00       	mov    $0x1822,%ecx
 805e390:	e8 83 40 00 00       	call   8062418 <__afl_maybe_log>
 805e395:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e399:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e39d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e3a1:	8b 3c 24             	mov    (%esp),%edi
 805e3a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e3a8:	8b 4c 24 14          	mov    0x14(%esp),%ecx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805e3ac:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 805e3af:	0f b6 14 31          	movzbl (%ecx,%esi,1),%edx
 805e3b3:	90                   	nop
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805e3b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e3b8:	89 3c 24             	mov    %edi,(%esp)
 805e3bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e3bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e3c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e3c7:	b9 c8 99 00 00       	mov    $0x99c8,%ecx
 805e3cc:	e8 47 40 00 00       	call   8062418 <__afl_maybe_log>
 805e3d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e3d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e3d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e3dd:	8b 3c 24             	mov    (%esp),%edi
 805e3e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e3e4:	0f b6 44 24 20       	movzbl 0x20(%esp),%eax
 805e3e9:	38 44 24 0f          	cmp    %al,0xf(%esp)
 805e3ed:	0f 87 cd 1b 00 00    	ja     805ffc0 <quotearg_buffer_restyled+0x3880>
 805e3f3:	90                   	nop
 805e3f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e3f8:	89 3c 24             	mov    %edi,(%esp)
 805e3fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e3ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e403:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e407:	b9 42 a8 00 00       	mov    $0xa842,%ecx
 805e40c:	e8 07 40 00 00       	call   8062418 <__afl_maybe_log>
 805e411:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e415:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e419:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e41d:	8b 3c 24             	mov    (%esp),%edi
 805e420:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805e424:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805e429:	0f 84 a5 00 00 00    	je     805e4d4 <quotearg_buffer_restyled+0x1d94>
 805e42f:	90                   	nop
 805e430:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e434:	89 3c 24             	mov    %edi,(%esp)
 805e437:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e43b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e43f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e443:	b9 6f 43 00 00       	mov    $0x436f,%ecx
 805e448:	e8 cb 3f 00 00       	call   8062418 <__afl_maybe_log>
 805e44d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e451:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e455:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e459:	8b 3c 24             	mov    (%esp),%edi
 805e45c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805e460:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805e464:	0f 82 03 1f 00 00    	jb     806036d <quotearg_buffer_restyled+0x3c2d>
 805e46a:	66 90                	xchg   %ax,%ax
 805e46c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e470:	89 3c 24             	mov    %edi,(%esp)
 805e473:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e477:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e47b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e47f:	b9 58 83 00 00       	mov    $0x8358,%ecx
 805e484:	e8 8f 3f 00 00       	call   8062418 <__afl_maybe_log>
 805e489:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e48d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e491:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e495:	8b 3c 24             	mov    (%esp),%edi
 805e498:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e49c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e4a0:	89 3c 24             	mov    %edi,(%esp)
 805e4a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e4a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e4ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e4af:	b9 fe 6d 00 00       	mov    $0x6dfe,%ecx
 805e4b4:	e8 5f 3f 00 00       	call   8062418 <__afl_maybe_log>
 805e4b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e4bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e4c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e4c5:	8b 3c 24             	mov    (%esp),%edi
 805e4c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e4cc:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805e4cf:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
 805e4d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e4d8:	89 3c 24             	mov    %edi,(%esp)
 805e4db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e4df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e4e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e4e7:	b9 ac 86 00 00       	mov    $0x86ac,%ecx
 805e4ec:	e8 27 3f 00 00       	call   8062418 <__afl_maybe_log>
 805e4f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e4f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e4f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e4fd:	8b 3c 24             	mov    (%esp),%edi
 805e500:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e504:	83 c6 01             	add    $0x1,%esi
                      break;
                    STORE (c);
 805e507:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805e50b:	73 3a                	jae    805e547 <quotearg_buffer_restyled+0x1e07>
 805e50d:	8d 76 00             	lea    0x0(%esi),%esi
 805e510:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e514:	89 3c 24             	mov    %edi,(%esp)
 805e517:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e51b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e51f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e523:	b9 96 e7 00 00       	mov    $0xe796,%ecx
 805e528:	e8 eb 3e 00 00       	call   8062418 <__afl_maybe_log>
 805e52d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e531:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e535:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e539:	8b 3c 24             	mov    (%esp),%edi
 805e53c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e540:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805e544:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 805e547:	90                   	nop
                    c = arg[++i];
 805e548:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e54c:	89 3c 24             	mov    %edi,(%esp)
 805e54f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e553:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e557:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e55b:	b9 77 1c 00 00       	mov    $0x1c77,%ecx
 805e560:	e8 b3 3e 00 00       	call   8062418 <__afl_maybe_log>
 805e565:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e569:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e56d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e571:	8b 3c 24             	mov    (%esp),%edi
 805e574:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e578:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 805e57c:	89 5c 24 30          	mov    %ebx,0x30(%esp)
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805e580:	83 c5 01             	add    $0x1,%ebp
 805e583:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 805e587:	89 7c 24 70          	mov    %edi,0x70(%esp)
 805e58b:	8b 44 24 10          	mov    0x10(%esp),%eax
                    c = arg[++i];
 805e58f:	0f b6 14 31          	movzbl (%ecx,%esi,1),%edx
 805e593:	89 cf                	mov    %ecx,%edi
 805e595:	89 5c 24 24          	mov    %ebx,0x24(%esp)
 805e599:	e9 72 08 00 00       	jmp    805ee10 <quotearg_buffer_restyled+0x26d0>
 805e59e:	66 90                	xchg   %ax,%ax

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805e5a0:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805e5a5:	0f 85 da 1b 00 00    	jne    8060185 <quotearg_buffer_restyled+0x3a45>
 805e5ab:	90                   	nop
 805e5ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e5b0:	89 3c 24             	mov    %edi,(%esp)
 805e5b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e5b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e5bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e5bf:	b9 b4 07 00 00       	mov    $0x7b4,%ecx
 805e5c4:	e8 4f 3e 00 00       	call   8062418 <__afl_maybe_log>
 805e5c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e5cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e5d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e5d5:	8b 3c 24             	mov    (%esp),%edi
 805e5d8:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805e5dc:	39 c5                	cmp    %eax,%ebp
 805e5de:	73 38                	jae    805e618 <quotearg_buffer_restyled+0x1ed8>
 805e5e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e5e4:	89 3c 24             	mov    %edi,(%esp)
 805e5e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e5eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e5ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e5f3:	b9 17 84 00 00       	mov    $0x8417,%ecx
 805e5f8:	e8 1b 3e 00 00       	call   8062418 <__afl_maybe_log>
 805e5fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e601:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e605:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e609:	8b 3c 24             	mov    (%esp),%edi
 805e60c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e610:	8b 4c 24 24          	mov    0x24(%esp),%ecx
 805e614:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 805e618:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e61c:	89 3c 24             	mov    %edi,(%esp)
 805e61f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e623:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e627:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e62b:	b9 6d a2 00 00       	mov    $0xa26d,%ecx
 805e630:	e8 e3 3d 00 00       	call   8062418 <__afl_maybe_log>
 805e635:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e639:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e63d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e641:	8b 3c 24             	mov    (%esp),%edi
 805e644:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e648:	8d 5d 01             	lea    0x1(%ebp),%ebx
                        STORE ('0' + (c >> 6));
 805e64b:	39 d8                	cmp    %ebx,%eax
 805e64d:	76 41                	jbe    805e690 <quotearg_buffer_restyled+0x1f50>
 805e64f:	90                   	nop
 805e650:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e654:	89 3c 24             	mov    %edi,(%esp)
 805e657:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e65b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e65f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e663:	b9 34 04 00 00       	mov    $0x434,%ecx
 805e668:	e8 ab 3d 00 00       	call   8062418 <__afl_maybe_log>
 805e66d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e671:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e675:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e679:	8b 3c 24             	mov    (%esp),%edi
 805e67c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e680:	89 d1                	mov    %edx,%ecx
 805e682:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805e686:	c0 e9 06             	shr    $0x6,%cl
 805e689:	83 c1 30             	add    $0x30,%ecx
 805e68c:	88 4c 2b 01          	mov    %cl,0x1(%ebx,%ebp,1)
 805e690:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e694:	89 3c 24             	mov    %edi,(%esp)
 805e697:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e69b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e69f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e6a3:	b9 a1 ed 00 00       	mov    $0xeda1,%ecx
 805e6a8:	e8 6b 3d 00 00       	call   8062418 <__afl_maybe_log>
 805e6ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e6b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e6b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e6b9:	8b 3c 24             	mov    (%esp),%edi
 805e6bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e6c0:	8d 4d 02             	lea    0x2(%ebp),%ecx
                        STORE ('0' + ((c >> 3) & 7));
 805e6c3:	39 c8                	cmp    %ecx,%eax
 805e6c5:	76 44                	jbe    805e70b <quotearg_buffer_restyled+0x1fcb>
 805e6c7:	90                   	nop
 805e6c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e6cc:	89 3c 24             	mov    %edi,(%esp)
 805e6cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e6d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e6d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e6db:	b9 fb f1 00 00       	mov    $0xf1fb,%ecx
 805e6e0:	e8 33 3d 00 00       	call   8062418 <__afl_maybe_log>
 805e6e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e6e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e6ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e6f1:	8b 3c 24             	mov    (%esp),%edi
 805e6f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e6f8:	89 d1                	mov    %edx,%ecx
 805e6fa:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805e6fe:	c0 e9 03             	shr    $0x3,%cl
 805e701:	83 e1 07             	and    $0x7,%ecx
 805e704:	83 c1 30             	add    $0x30,%ecx
 805e707:	88 4c 2b 02          	mov    %cl,0x2(%ebx,%ebp,1)
 805e70b:	90                   	nop
                        c = '0' + (c & 7);
 805e70c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e710:	89 3c 24             	mov    %edi,(%esp)
 805e713:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e717:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e71b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e71f:	b9 06 51 00 00       	mov    $0x5106,%ecx
 805e724:	e8 ef 3c 00 00       	call   8062418 <__afl_maybe_log>
 805e729:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e72d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e731:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e735:	8b 3c 24             	mov    (%esp),%edi
 805e738:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e73c:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805e73f:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805e742:	83 c2 30             	add    $0x30,%edx
 805e745:	8d 76 00             	lea    0x0(%esi),%esi
                    else if (is_right_quote)
                      {
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
 805e748:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e74c:	89 3c 24             	mov    %edi,(%esp)
 805e74f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e753:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e757:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e75b:	b9 d8 c0 00 00       	mov    $0xc0d8,%ecx
 805e760:	e8 b3 3c 00 00       	call   8062418 <__afl_maybe_log>
 805e765:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e769:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e76d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e771:	8b 3c 24             	mov    (%esp),%edi
 805e774:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e778:	8d 4e 01             	lea    0x1(%esi),%ecx
 805e77b:	39 4c 24 30          	cmp    %ecx,0x30(%esp)
 805e77f:	89 ce                	mov    %ecx,%esi
 805e781:	0f 86 2c 1b 00 00    	jbe    80602b3 <quotearg_buffer_restyled+0x3b73>
 805e787:	90                   	nop
 805e788:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e78c:	89 3c 24             	mov    %edi,(%esp)
 805e78f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e793:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e797:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e79b:	b9 1e d2 00 00       	mov    $0xd21e,%ecx
 805e7a0:	e8 73 3c 00 00       	call   8062418 <__afl_maybe_log>
 805e7a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e7a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e7ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e7b1:	8b 3c 24             	mov    (%esp),%edi
 805e7b4:	8d 64 24 10          	lea    0x10(%esp),%esp
                      break;
                    STORE (c);
 805e7b8:	39 c5                	cmp    %eax,%ebp
 805e7ba:	73 37                	jae    805e7f3 <quotearg_buffer_restyled+0x20b3>
 805e7bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e7c0:	89 3c 24             	mov    %edi,(%esp)
 805e7c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e7c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e7cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e7cf:	b9 c9 39 00 00       	mov    $0x39c9,%ecx
 805e7d4:	e8 3f 3c 00 00       	call   8062418 <__afl_maybe_log>
 805e7d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e7dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e7e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e7e5:	8b 3c 24             	mov    (%esp),%edi
 805e7e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e7ec:	8b 74 24 24          	mov    0x24(%esp),%esi
 805e7f0:	88 14 2e             	mov    %dl,(%esi,%ebp,1)
 805e7f3:	90                   	nop
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805e7f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e7f8:	89 3c 24             	mov    %edi,(%esp)
 805e7fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e7ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e803:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e807:	b9 9e a1 00 00       	mov    $0xa19e,%ecx
 805e80c:	e8 07 3c 00 00       	call   8062418 <__afl_maybe_log>
 805e811:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e815:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e819:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e81d:	8b 3c 24             	mov    (%esp),%edi
 805e820:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e824:	0f b6 5c 24 20       	movzbl 0x20(%esp),%ebx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805e829:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 805e82c:	0f b6 14 0f          	movzbl (%edi,%ecx,1),%edx
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805e830:	38 5c 24 0f          	cmp    %bl,0xf(%esp)
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
                    c = arg[++i];
 805e834:	88 54 24 2c          	mov    %dl,0x2c(%esp)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805e838:	0f 86 1a 0b 00 00    	jbe    805f358 <quotearg_buffer_restyled+0x2c18>
 805e83e:	66 90                	xchg   %ax,%ax
 805e840:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e844:	89 3c 24             	mov    %edi,(%esp)
 805e847:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e84b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e84f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e853:	b9 a6 b9 00 00       	mov    $0xb9a6,%ecx
 805e858:	e8 bb 3b 00 00       	call   8062418 <__afl_maybe_log>
 805e85d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e861:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e865:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e869:	8b 3c 24             	mov    (%esp),%edi
 805e86c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        if (elide_outer_quotes)
 805e870:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805e875:	0f 85 0a 19 00 00    	jne    8060185 <quotearg_buffer_restyled+0x3a45>
 805e87b:	90                   	nop
 805e87c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e880:	89 3c 24             	mov    %edi,(%esp)
 805e883:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e887:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e88b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e88f:	b9 88 3b 00 00       	mov    $0x3b88,%ecx
 805e894:	e8 7f 3b 00 00       	call   8062418 <__afl_maybe_log>
 805e899:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e89d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e8a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e8a5:	8b 3c 24             	mov    (%esp),%edi
 805e8a8:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805e8ac:	39 c5                	cmp    %eax,%ebp
 805e8ae:	73 38                	jae    805e8e8 <quotearg_buffer_restyled+0x21a8>
 805e8b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e8b4:	89 3c 24             	mov    %edi,(%esp)
 805e8b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e8bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e8bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e8c3:	b9 f9 b3 00 00       	mov    $0xb3f9,%ecx
 805e8c8:	e8 4b 3b 00 00       	call   8062418 <__afl_maybe_log>
 805e8cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e8d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e8d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e8d9:	8b 3c 24             	mov    (%esp),%edi
 805e8dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e8e0:	8b 54 24 24          	mov    0x24(%esp),%edx
 805e8e4:	c6 04 2a 5c          	movb   $0x5c,(%edx,%ebp,1)
 805e8e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e8ec:	89 3c 24             	mov    %edi,(%esp)
 805e8ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e8f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e8f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e8fb:	b9 81 0a 00 00       	mov    $0xa81,%ecx
 805e900:	e8 13 3b 00 00       	call   8062418 <__afl_maybe_log>
 805e905:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e909:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e90d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e911:	8b 3c 24             	mov    (%esp),%edi
 805e914:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e918:	8d 5d 01             	lea    0x1(%ebp),%ebx
                        STORE ('0' + (c >> 6));
 805e91b:	39 d8                	cmp    %ebx,%eax
 805e91d:	76 48                	jbe    805e967 <quotearg_buffer_restyled+0x2227>
 805e91f:	90                   	nop
 805e920:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e924:	89 3c 24             	mov    %edi,(%esp)
 805e927:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e92b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e92f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e933:	b9 9b 4e 00 00       	mov    $0x4e9b,%ecx
 805e938:	e8 db 3a 00 00       	call   8062418 <__afl_maybe_log>
 805e93d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e941:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e945:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e949:	8b 3c 24             	mov    (%esp),%edi
 805e94c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e950:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
 805e955:	c0 ea 06             	shr    $0x6,%dl
 805e958:	89 d6                	mov    %edx,%esi
 805e95a:	8b 54 24 24          	mov    0x24(%esp),%edx
 805e95e:	83 c6 30             	add    $0x30,%esi
 805e961:	89 f3                	mov    %esi,%ebx
 805e963:	88 5c 2a 01          	mov    %bl,0x1(%edx,%ebp,1)
 805e967:	90                   	nop
 805e968:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e96c:	89 3c 24             	mov    %edi,(%esp)
 805e96f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e973:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e977:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e97b:	b9 14 9b 00 00       	mov    $0x9b14,%ecx
 805e980:	e8 93 3a 00 00       	call   8062418 <__afl_maybe_log>
 805e985:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e989:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e98d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e991:	8b 3c 24             	mov    (%esp),%edi
 805e994:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e998:	8d 75 02             	lea    0x2(%ebp),%esi
                        STORE ('0' + ((c >> 3) & 7));
 805e99b:	39 f0                	cmp    %esi,%eax
 805e99d:	76 49                	jbe    805e9e8 <quotearg_buffer_restyled+0x22a8>
 805e99f:	90                   	nop
 805e9a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e9a4:	89 3c 24             	mov    %edi,(%esp)
 805e9a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e9ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e9af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e9b3:	b9 96 45 00 00       	mov    $0x4596,%ecx
 805e9b8:	e8 5b 3a 00 00       	call   8062418 <__afl_maybe_log>
 805e9bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e9c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e9c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e9c9:	8b 3c 24             	mov    (%esp),%edi
 805e9cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e9d0:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805e9d5:	8b 74 24 24          	mov    0x24(%esp),%esi
 805e9d9:	c0 eb 03             	shr    $0x3,%bl
 805e9dc:	89 da                	mov    %ebx,%edx
 805e9de:	83 e2 07             	and    $0x7,%edx
 805e9e1:	83 c2 30             	add    $0x30,%edx
 805e9e4:	88 54 2e 02          	mov    %dl,0x2(%esi,%ebp,1)
                        c = '0' + (c & 7);
 805e9e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e9ec:	89 3c 24             	mov    %edi,(%esp)
 805e9ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e9f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e9f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e9fb:	b9 c9 d4 00 00       	mov    $0xd4c9,%ecx
 805ea00:	e8 13 3a 00 00       	call   8062418 <__afl_maybe_log>
 805ea05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ea09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ea0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ea11:	8b 3c 24             	mov    (%esp),%edi
 805ea14:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ea18:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805ea1d:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805ea20:	83 e2 07             	and    $0x7,%edx
 805ea23:	8d 5a 30             	lea    0x30(%edx),%ebx
 805ea26:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
 805ea2a:	66 90                	xchg   %ax,%ax
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805ea2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ea30:	89 3c 24             	mov    %edi,(%esp)
 805ea33:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ea37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ea3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ea3f:	b9 3e 6e 00 00       	mov    $0x6e3e,%ecx
 805ea44:	e8 cf 39 00 00       	call   8062418 <__afl_maybe_log>
 805ea49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ea4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ea51:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ea55:	8b 3c 24             	mov    (%esp),%edi
 805ea58:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ea5c:	39 c5                	cmp    %eax,%ebp
 805ea5e:	73 3c                	jae    805ea9c <quotearg_buffer_restyled+0x235c>
 805ea60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ea64:	89 3c 24             	mov    %edi,(%esp)
 805ea67:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ea6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ea6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ea73:	b9 af 82 00 00       	mov    $0x82af,%ecx
 805ea78:	e8 9b 39 00 00       	call   8062418 <__afl_maybe_log>
 805ea7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ea81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ea85:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ea89:	8b 3c 24             	mov    (%esp),%edi
 805ea8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ea90:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
 805ea95:	8b 74 24 24          	mov    0x24(%esp),%esi
 805ea99:	88 14 2e             	mov    %dl,(%esi,%ebp,1)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805ea9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eaa0:	89 3c 24             	mov    %edi,(%esp)
 805eaa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eaa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eaab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eaaf:	b9 7a e9 00 00       	mov    $0xe97a,%ecx
 805eab4:	e8 5f 39 00 00       	call   8062418 <__afl_maybe_log>
 805eab9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eabd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eac1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eac5:	8b 3c 24             	mov    (%esp),%edi
 805eac8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805eacc:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805ead1:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 805ead4:	0f b6 5c 0f 01       	movzbl 0x1(%edi,%ecx,1),%ebx
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805ead9:	38 54 24 0f          	cmp    %dl,0xf(%esp)
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
                    c = arg[++i];
 805eadd:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805eae1:	0f 87 29 09 00 00    	ja     805f410 <quotearg_buffer_restyled+0x2cd0>
 805eae7:	90                   	nop
 805eae8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eaec:	89 3c 24             	mov    %edi,(%esp)
 805eaef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eaf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eaf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eafb:	b9 15 8a 00 00       	mov    $0x8a15,%ecx
 805eb00:	e8 13 39 00 00       	call   8062418 <__afl_maybe_log>
 805eb05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eb09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eb0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eb11:	8b 3c 24             	mov    (%esp),%edi
 805eb14:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805eb18:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805eb1d:	0f 84 a5 00 00 00    	je     805ebc8 <quotearg_buffer_restyled+0x2488>
 805eb23:	90                   	nop
 805eb24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eb28:	89 3c 24             	mov    %edi,(%esp)
 805eb2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eb2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eb33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eb37:	b9 10 ca 00 00       	mov    $0xca10,%ecx
 805eb3c:	e8 d7 38 00 00       	call   8062418 <__afl_maybe_log>
 805eb41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eb45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eb49:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eb4d:	8b 3c 24             	mov    (%esp),%edi
 805eb50:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805eb54:	39 c5                	cmp    %eax,%ebp
 805eb56:	73 38                	jae    805eb90 <quotearg_buffer_restyled+0x2450>
 805eb58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eb5c:	89 3c 24             	mov    %edi,(%esp)
 805eb5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eb63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eb67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eb6b:	b9 98 c8 00 00       	mov    $0xc898,%ecx
 805eb70:	e8 a3 38 00 00       	call   8062418 <__afl_maybe_log>
 805eb75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eb79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eb7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eb81:	8b 3c 24             	mov    (%esp),%edi
 805eb84:	8d 64 24 10          	lea    0x10(%esp),%esp
 805eb88:	8b 74 24 24          	mov    0x24(%esp),%esi
 805eb8c:	c6 04 2e 5c          	movb   $0x5c,(%esi,%ebp,1)
 805eb90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eb94:	89 3c 24             	mov    %edi,(%esp)
 805eb97:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eb9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eb9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eba3:	b9 dc a7 00 00       	mov    $0xa7dc,%ecx
 805eba8:	e8 6b 38 00 00       	call   8062418 <__afl_maybe_log>
 805ebad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ebb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ebb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ebb9:	8b 3c 24             	mov    (%esp),%edi
 805ebbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ebc0:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805ebc3:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805ebc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ebcc:	89 3c 24             	mov    %edi,(%esp)
 805ebcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ebd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ebd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ebdb:	b9 b6 b8 00 00       	mov    $0xb8b6,%ecx
 805ebe0:	e8 33 38 00 00       	call   8062418 <__afl_maybe_log>
 805ebe5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ebe9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ebed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ebf1:	8b 3c 24             	mov    (%esp),%edi
 805ebf4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ebf8:	39 c5                	cmp    %eax,%ebp
 805ebfa:	73 3c                	jae    805ec38 <quotearg_buffer_restyled+0x24f8>
 805ebfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ec00:	89 3c 24             	mov    %edi,(%esp)
 805ec03:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ec07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ec0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ec0f:	b9 99 36 00 00       	mov    $0x3699,%ecx
 805ec14:	e8 ff 37 00 00       	call   8062418 <__afl_maybe_log>
 805ec19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ec1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ec21:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ec25:	8b 3c 24             	mov    (%esp),%edi
 805ec28:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ec2c:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
 805ec31:	8b 74 24 24          	mov    0x24(%esp),%esi
 805ec35:	88 14 2e             	mov    %dl,(%esi,%ebp,1)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805ec38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ec3c:	89 3c 24             	mov    %edi,(%esp)
 805ec3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ec43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ec47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ec4b:	b9 8d 4f 00 00       	mov    $0x4f8d,%ecx
 805ec50:	e8 c3 37 00 00       	call   8062418 <__afl_maybe_log>
 805ec55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ec59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ec5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ec61:	8b 3c 24             	mov    (%esp),%edi
 805ec64:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ec68:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805ec6d:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 805ec70:	0f b6 5c 0f 02       	movzbl 0x2(%edi,%ecx,1),%ebx
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805ec75:	38 54 24 0f          	cmp    %dl,0xf(%esp)
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
                    c = arg[++i];
 805ec79:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805ec7d:	0f 87 4d 09 00 00    	ja     805f5d0 <quotearg_buffer_restyled+0x2e90>
 805ec83:	90                   	nop
 805ec84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ec88:	89 3c 24             	mov    %edi,(%esp)
 805ec8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ec8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ec93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ec97:	b9 91 29 00 00       	mov    $0x2991,%ecx
 805ec9c:	e8 77 37 00 00       	call   8062418 <__afl_maybe_log>
 805eca1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eca5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eca9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ecad:	8b 3c 24             	mov    (%esp),%edi
 805ecb0:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805ecb4:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805ecb9:	0f 84 a5 00 00 00    	je     805ed64 <quotearg_buffer_restyled+0x2624>
 805ecbf:	90                   	nop
 805ecc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ecc4:	89 3c 24             	mov    %edi,(%esp)
 805ecc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eccb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eccf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ecd3:	b9 68 d7 00 00       	mov    $0xd768,%ecx
 805ecd8:	e8 3b 37 00 00       	call   8062418 <__afl_maybe_log>
 805ecdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ece1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ece5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ece9:	8b 3c 24             	mov    (%esp),%edi
 805ecec:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805ecf0:	39 c5                	cmp    %eax,%ebp
 805ecf2:	73 38                	jae    805ed2c <quotearg_buffer_restyled+0x25ec>
 805ecf4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ecf8:	89 3c 24             	mov    %edi,(%esp)
 805ecfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ecff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ed03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ed07:	b9 44 6c 00 00       	mov    $0x6c44,%ecx
 805ed0c:	e8 07 37 00 00       	call   8062418 <__afl_maybe_log>
 805ed11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ed15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ed19:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ed1d:	8b 3c 24             	mov    (%esp),%edi
 805ed20:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ed24:	8b 74 24 24          	mov    0x24(%esp),%esi
 805ed28:	c6 04 2e 5c          	movb   $0x5c,(%esi,%ebp,1)
 805ed2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ed30:	89 3c 24             	mov    %edi,(%esp)
 805ed33:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ed37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ed3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ed3f:	b9 df 4a 00 00       	mov    $0x4adf,%ecx
 805ed44:	e8 cf 36 00 00       	call   8062418 <__afl_maybe_log>
 805ed49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ed4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ed51:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ed55:	8b 3c 24             	mov    (%esp),%edi
 805ed58:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ed5c:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805ed5f:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805ed64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ed68:	89 3c 24             	mov    %edi,(%esp)
 805ed6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ed6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ed73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ed77:	b9 fd af 00 00       	mov    $0xaffd,%ecx
 805ed7c:	e8 97 36 00 00       	call   8062418 <__afl_maybe_log>
 805ed81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ed85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ed89:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ed8d:	8b 3c 24             	mov    (%esp),%edi
 805ed90:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ed94:	39 c5                	cmp    %eax,%ebp
                    else if (is_right_quote)
                      {
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
 805ed96:	8d 71 03             	lea    0x3(%ecx),%esi
                      break;
                    STORE (c);
 805ed99:	73 3d                	jae    805edd8 <quotearg_buffer_restyled+0x2698>
 805ed9b:	90                   	nop
 805ed9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eda0:	89 3c 24             	mov    %edi,(%esp)
 805eda3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eda7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805edab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805edaf:	b9 a5 fb 00 00       	mov    $0xfba5,%ecx
 805edb4:	e8 5f 36 00 00       	call   8062418 <__afl_maybe_log>
 805edb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805edbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805edc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805edc5:	8b 3c 24             	mov    (%esp),%edi
 805edc8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805edcc:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805edd1:	8b 54 24 24          	mov    0x24(%esp),%edx
 805edd5:	88 1c 2a             	mov    %bl,(%edx,%ebp,1)
                    c = arg[++i];
 805edd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eddc:	89 3c 24             	mov    %edi,(%esp)
 805eddf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ede3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ede7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805edeb:	b9 13 e2 00 00       	mov    $0xe213,%ecx
 805edf0:	e8 23 36 00 00       	call   8062418 <__afl_maybe_log>
 805edf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805edf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805edfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ee01:	8b 3c 24             	mov    (%esp),%edi
 805ee04:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ee08:	0f b6 54 0f 03       	movzbl 0x3(%edi,%ecx,1),%edx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805ee0d:	83 c5 01             	add    $0x1,%ebp
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805ee10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ee14:	89 3c 24             	mov    %edi,(%esp)
 805ee17:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ee1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ee1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ee23:	b9 75 7e 00 00       	mov    $0x7e75,%ecx
 805ee28:	e8 eb 35 00 00       	call   8062418 <__afl_maybe_log>
 805ee2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ee31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ee35:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ee39:	8b 3c 24             	mov    (%esp),%edi
 805ee3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ee40:	0f b6 4c 24 20       	movzbl 0x20(%esp),%ecx
 805ee45:	38 4c 24 0f          	cmp    %cl,0xf(%esp)
 805ee49:	0f 87 51 f7 ff ff    	ja     805e5a0 <quotearg_buffer_restyled+0x1e60>
 805ee4f:	90                   	nop
 805ee50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ee54:	89 3c 24             	mov    %edi,(%esp)
 805ee57:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ee5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ee5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ee63:	b9 0a 52 00 00       	mov    $0x520a,%ecx
 805ee68:	e8 ab 35 00 00       	call   8062418 <__afl_maybe_log>
 805ee6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ee71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ee75:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ee79:	8b 3c 24             	mov    (%esp),%edi
 805ee7c:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805ee80:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805ee85:	0f 84 ba f8 ff ff    	je     805e745 <quotearg_buffer_restyled+0x2005>
 805ee8b:	90                   	nop
 805ee8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ee90:	89 3c 24             	mov    %edi,(%esp)
 805ee93:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ee97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ee9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ee9f:	b9 df 75 00 00       	mov    $0x75df,%ecx
 805eea4:	e8 6f 35 00 00       	call   8062418 <__afl_maybe_log>
 805eea9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eead:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eeb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eeb5:	8b 3c 24             	mov    (%esp),%edi
 805eeb8:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805eebc:	39 c5                	cmp    %eax,%ebp
 805eebe:	73 38                	jae    805eef8 <quotearg_buffer_restyled+0x27b8>
 805eec0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eec4:	89 3c 24             	mov    %edi,(%esp)
 805eec7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eecb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eecf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eed3:	b9 be 64 00 00       	mov    $0x64be,%ecx
 805eed8:	e8 3b 35 00 00       	call   8062418 <__afl_maybe_log>
 805eedd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eee1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eee5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eee9:	8b 3c 24             	mov    (%esp),%edi
 805eeec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805eef0:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805eef4:	c6 04 2b 5c          	movb   $0x5c,(%ebx,%ebp,1)
 805eef8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eefc:	89 3c 24             	mov    %edi,(%esp)
 805eeff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ef03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ef07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ef0b:	b9 f3 1f 00 00       	mov    $0x1ff3,%ecx
 805ef10:	e8 03 35 00 00       	call   8062418 <__afl_maybe_log>
 805ef15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ef19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ef1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ef21:	8b 3c 24             	mov    (%esp),%edi
 805ef24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ef28:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805ef2b:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 805ef30:	e9 10 f8 ff ff       	jmp    805e745 <quotearg_buffer_restyled+0x2005>
 805ef35:	8d 76 00             	lea    0x0(%esi),%esi

    case locale_quoting_style:
    case clocale_quoting_style:
    case custom_quoting_style:
      {
        if (quoting_style != custom_quoting_style)
 805ef38:	74 5c                	je     805ef96 <quotearg_buffer_restyled+0x2856>
 805ef3a:	66 90                	xchg   %ax,%ax
 805ef3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ef40:	89 3c 24             	mov    %edi,(%esp)
 805ef43:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ef47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ef4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ef4f:	b9 a9 d8 00 00       	mov    $0xd8a9,%ecx
 805ef54:	e8 bf 34 00 00       	call   8062418 <__afl_maybe_log>
 805ef59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ef5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ef61:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ef65:	8b 3c 24             	mov    (%esp),%edi
 805ef68:	8d 64 24 10          	lea    0x10(%esp),%esp
               for your locale.

               If you don't know what to put here, please see
               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
 805ef6c:	8b 54 24 74          	mov    0x74(%esp),%edx
 805ef70:	b8 1f 7d 06 08       	mov    $0x8067d1f,%eax
 805ef75:	e8 96 d3 ff ff       	call   805c310 <gettext_quote>
            right_quote = gettext_quote (N_("'"), quoting_style);
 805ef7a:	8b 54 24 74          	mov    0x74(%esp),%edx
               for your locale.

               If you don't know what to put here, please see
               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
 805ef7e:	89 84 24 80 00 00 00 	mov    %eax,0x80(%esp)
            right_quote = gettext_quote (N_("'"), quoting_style);
 805ef85:	b8 0b 7d 06 08       	mov    $0x8067d0b,%eax
 805ef8a:	e8 81 d3 ff ff       	call   805c310 <gettext_quote>
 805ef8f:	89 84 24 84 00 00 00 	mov    %eax,0x84(%esp)
 805ef96:	66 90                	xchg   %ax,%ax
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805ef98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ef9c:	89 3c 24             	mov    %edi,(%esp)
 805ef9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805efa3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805efa7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805efab:	b9 46 df 00 00       	mov    $0xdf46,%ecx
 805efb0:	e8 63 34 00 00       	call   8062418 <__afl_maybe_log>
 805efb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805efb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805efbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805efc1:	8b 3c 24             	mov    (%esp),%edi
 805efc4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805efc8:	31 ed                	xor    %ebp,%ebp
               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
            right_quote = gettext_quote (N_("'"), quoting_style);
          }
        if (!elide_outer_quotes)
 805efca:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805efcf:	0f 85 2f 01 00 00    	jne    805f104 <quotearg_buffer_restyled+0x29c4>
 805efd5:	8d 76 00             	lea    0x0(%esi),%esi
 805efd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805efdc:	89 3c 24             	mov    %edi,(%esp)
 805efdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805efe3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805efe7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805efeb:	b9 aa bd 00 00       	mov    $0xbdaa,%ecx
 805eff0:	e8 23 34 00 00       	call   8062418 <__afl_maybe_log>
 805eff5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eff9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805effd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f001:	8b 3c 24             	mov    (%esp),%edi
 805f004:	8d 64 24 10          	lea    0x10(%esp),%esp
          for (quote_string = left_quote; *quote_string; quote_string++)
 805f008:	8b 84 24 80 00 00 00 	mov    0x80(%esp),%eax
 805f00f:	0f b6 00             	movzbl (%eax),%eax
 805f012:	84 c0                	test   %al,%al
 805f014:	0f 84 ea 00 00 00    	je     805f104 <quotearg_buffer_restyled+0x29c4>
 805f01a:	66 90                	xchg   %ax,%ax
 805f01c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f020:	89 3c 24             	mov    %edi,(%esp)
 805f023:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f027:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f02b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f02f:	b9 79 f6 00 00       	mov    $0xf679,%ecx
 805f034:	e8 df 33 00 00       	call   8062418 <__afl_maybe_log>
 805f039:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f03d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f041:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f045:	8b 3c 24             	mov    (%esp),%edi
 805f048:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f04c:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 805f050:	8b 54 24 10          	mov    0x10(%esp),%edx
 805f054:	8b 8c 24 80 00 00 00 	mov    0x80(%esp),%ecx
 805f05b:	90                   	nop
 805f05c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
            STORE (*quote_string);
 805f060:	39 ea                	cmp    %ebp,%edx
 805f062:	76 33                	jbe    805f097 <quotearg_buffer_restyled+0x2957>
 805f064:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f068:	89 3c 24             	mov    %edi,(%esp)
 805f06b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f06f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f073:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f077:	b9 a5 6e 00 00       	mov    $0x6ea5,%ecx
 805f07c:	e8 97 33 00 00       	call   8062418 <__afl_maybe_log>
 805f081:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f085:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f089:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f08d:	8b 3c 24             	mov    (%esp),%edi
 805f090:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f094:	88 04 2b             	mov    %al,(%ebx,%ebp,1)
 805f097:	90                   	nop
 805f098:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f09c:	89 3c 24             	mov    %edi,(%esp)
 805f09f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f0a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f0a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f0ab:	b9 bc 13 00 00       	mov    $0x13bc,%ecx
 805f0b0:	e8 63 33 00 00       	call   8062418 <__afl_maybe_log>
 805f0b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f0b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f0bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f0c1:	8b 3c 24             	mov    (%esp),%edi
 805f0c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f0c8:	83 c5 01             	add    $0x1,%ebp
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
            right_quote = gettext_quote (N_("'"), quoting_style);
          }
        if (!elide_outer_quotes)
          for (quote_string = left_quote; *quote_string; quote_string++)
 805f0cb:	0f b6 04 29          	movzbl (%ecx,%ebp,1),%eax
 805f0cf:	84 c0                	test   %al,%al
 805f0d1:	75 8d                	jne    805f060 <quotearg_buffer_restyled+0x2920>
 805f0d3:	90                   	nop
 805f0d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f0d8:	89 3c 24             	mov    %edi,(%esp)
 805f0db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f0df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f0e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f0e7:	b9 d8 35 00 00       	mov    $0x35d8,%ecx
 805f0ec:	e8 27 33 00 00       	call   8062418 <__afl_maybe_log>
 805f0f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f0f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f0f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f0fd:	8b 3c 24             	mov    (%esp),%edi
 805f100:	8d 64 24 10          	lea    0x10(%esp),%esp
            STORE (*quote_string);
        backslash_escapes = true;
        quote_string = right_quote;
        quote_string_len = strlen (quote_string);
 805f104:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f108:	89 3c 24             	mov    %edi,(%esp)
 805f10b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f10f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f113:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f117:	b9 2d d9 00 00       	mov    $0xd92d,%ecx
 805f11c:	e8 f7 32 00 00       	call   8062418 <__afl_maybe_log>
 805f121:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f125:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f129:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f12d:	8b 3c 24             	mov    (%esp),%edi
 805f130:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f134:	83 ec 0c             	sub    $0xc,%esp
 805f137:	ff b4 24 90 00 00 00 	pushl  0x90(%esp)
 805f13e:	e8 1d a2 fe ff       	call   8049360 <strlen@plt>
 805f143:	83 c4 10             	add    $0x10,%esp
      }
      break;
 805f146:	8b b4 24 84 00 00 00 	mov    0x84(%esp),%esi
        if (!elide_outer_quotes)
          for (quote_string = left_quote; *quote_string; quote_string++)
            STORE (*quote_string);
        backslash_escapes = true;
        quote_string = right_quote;
        quote_string_len = strlen (quote_string);
 805f14d:	89 44 24 18          	mov    %eax,0x18(%esp)
            right_quote = gettext_quote (N_("'"), quoting_style);
          }
        if (!elide_outer_quotes)
          for (quote_string = left_quote; *quote_string; quote_string++)
            STORE (*quote_string);
        backslash_escapes = true;
 805f151:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
        quote_string = right_quote;
        quote_string_len = strlen (quote_string);
      }
      break;
 805f156:	89 74 24 28          	mov    %esi,0x28(%esp)
 805f15a:	e9 a9 d6 ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
 805f15f:	90                   	nop
      quote_string = "'";
      quote_string_len = 1;
      break;

    case literal_quoting_style:
      elide_outer_quotes = false;
 805f160:	c6 44 24 39 00       	movb   $0x0,0x39(%esp)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 805f165:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805f16a:	31 ed                	xor    %ebp,%ebp
  char const *quote_string = 0;
  size_t quote_string_len = 0;
 805f16c:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 805f173:	00 
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
 805f174:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
 805f17b:	00 
 805f17c:	e9 87 d6 ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
 805f181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805f188:	c6 44 24 39 01       	movb   $0x1,0x39(%esp)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 805f18d:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805f192:	31 ed                	xor    %ebp,%ebp
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 805f194:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805f19b:	00 
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
 805f19c:	c7 44 24 28 0b 7d 06 	movl   $0x8067d0b,0x28(%esp)
 805f1a3:	08 
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805f1a4:	c7 44 24 74 02 00 00 	movl   $0x2,0x74(%esp)
 805f1ab:	00 
 805f1ac:	e9 57 d6 ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
 805f1b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    case shell_quoting_style:
      quoting_style = shell_always_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
 805f1b8:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805f1bd:	0f 85 45 1b 00 00    	jne    8060d08 <quotearg_buffer_restyled+0x45c8>
 805f1c3:	90                   	nop
 805f1c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f1c8:	89 3c 24             	mov    %edi,(%esp)
 805f1cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f1cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f1d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f1d7:	b9 6a 60 00 00       	mov    $0x606a,%ecx
 805f1dc:	e8 37 32 00 00       	call   8062418 <__afl_maybe_log>
 805f1e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f1e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f1e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f1ed:	8b 3c 24             	mov    (%esp),%edi
 805f1f0:	8d 64 24 10          	lea    0x10(%esp),%esp
        STORE ('\'');
 805f1f4:	8b 74 24 10          	mov    0x10(%esp),%esi
 805f1f8:	85 f6                	test   %esi,%esi
 805f1fa:	0f 84 13 10 00 00    	je     8060213 <quotearg_buffer_restyled+0x3ad3>
 805f200:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f204:	89 3c 24             	mov    %edi,(%esp)
 805f207:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f20b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f20f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f213:	b9 dc 01 00 00       	mov    $0x1dc,%ecx
 805f218:	e8 fb 31 00 00       	call   8062418 <__afl_maybe_log>
 805f21d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f221:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f225:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f229:	8b 3c 24             	mov    (%esp),%edi
 805f22c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f230:	8b 6c 24 1c          	mov    0x1c(%esp),%ebp
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 805f234:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 805f239:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805f240:	00 
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
 805f241:	c7 44 24 28 0b 7d 06 	movl   $0x8067d0b,0x28(%esp)
 805f248:	08 
      quoting_style = shell_always_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
 805f249:	c6 45 00 27          	movb   $0x27,0x0(%ebp)
 805f24d:	bd 01 00 00 00       	mov    $0x1,%ebp
 805f252:	e9 b1 d5 ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
 805f257:	89 f6                	mov    %esi,%esi
 805f259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
    case c_maybe_quoting_style:
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
 805f260:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805f265:	0f 85 4f 1a 00 00    	jne    8060cba <quotearg_buffer_restyled+0x457a>
 805f26b:	90                   	nop
 805f26c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f270:	89 3c 24             	mov    %edi,(%esp)
 805f273:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f277:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f27b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f27f:	b9 f6 1d 00 00       	mov    $0x1df6,%ecx
 805f284:	e8 8f 31 00 00       	call   8062418 <__afl_maybe_log>
 805f289:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f28d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f291:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f295:	8b 3c 24             	mov    (%esp),%edi
 805f298:	8d 64 24 10          	lea    0x10(%esp),%esp
        STORE ('"');
 805f29c:	8b 4c 24 10          	mov    0x10(%esp),%ecx
 805f2a0:	85 c9                	test   %ecx,%ecx
 805f2a2:	0f 84 bb 0f 00 00    	je     8060263 <quotearg_buffer_restyled+0x3b23>
 805f2a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f2ac:	89 3c 24             	mov    %edi,(%esp)
 805f2af:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f2b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f2b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f2bb:	b9 23 3b 00 00       	mov    $0x3b23,%ecx
 805f2c0:	e8 53 31 00 00       	call   8062418 <__afl_maybe_log>
 805f2c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f2c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f2cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f2d1:	8b 3c 24             	mov    (%esp),%edi
 805f2d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f2d8:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
      backslash_escapes = true;
 805f2dc:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
 805f2e1:	bd 01 00 00 00       	mov    $0x1,%ebp
      backslash_escapes = true;
      quote_string = "\"";
      quote_string_len = 1;
 805f2e6:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805f2ed:	00 
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
 805f2ee:	c7 44 24 28 0d 7d 06 	movl   $0x8067d0d,0x28(%esp)
 805f2f5:	08 
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
 805f2f6:	c6 03 22             	movb   $0x22,(%ebx)
 805f2f9:	e9 0a d5 ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
 805f2fe:	66 90                	xchg   %ax,%ax
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805f300:	c6 44 24 39 01       	movb   $0x1,0x39(%esp)
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
 805f305:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805f30a:	31 ed                	xor    %ebp,%ebp
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
      quote_string_len = 1;
 805f30c:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805f313:	00 
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
 805f314:	c7 44 24 28 0d 7d 06 	movl   $0x8067d0d,0x28(%esp)
 805f31b:	08 
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805f31c:	c7 44 24 74 03 00 00 	movl   $0x3,0x74(%esp)
 805f323:	00 
 805f324:	e9 df d4 ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
 805f329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 805f330:	8b 44 24 14          	mov    0x14(%esp),%eax

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
    {
      unsigned char c;
      unsigned char esc;
      bool is_right_quote = false;
 805f334:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 805f339:	8d 1c 30             	lea    (%eax,%esi,1),%ebx
 805f33c:	e9 bf d7 ff ff       	jmp    805cb00 <quotearg_buffer_restyled+0x3c0>
 805f341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 805f348:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 805f34d:	e9 ae d7 ff ff       	jmp    805cb00 <quotearg_buffer_restyled+0x3c0>
 805f352:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805f358:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805f35d:	0f 84 c7 f6 ff ff    	je     805ea2a <quotearg_buffer_restyled+0x22ea>
 805f363:	90                   	nop
 805f364:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f368:	89 3c 24             	mov    %edi,(%esp)
 805f36b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f36f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f373:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f377:	b9 17 c3 00 00       	mov    $0xc317,%ecx
 805f37c:	e8 97 30 00 00       	call   8062418 <__afl_maybe_log>
 805f381:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f385:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f389:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f38d:	8b 3c 24             	mov    (%esp),%edi
 805f390:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805f394:	39 c5                	cmp    %eax,%ebp
 805f396:	73 38                	jae    805f3d0 <quotearg_buffer_restyled+0x2c90>
 805f398:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f39c:	89 3c 24             	mov    %edi,(%esp)
 805f39f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f3a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f3a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f3ab:	b9 15 06 00 00       	mov    $0x615,%ecx
 805f3b0:	e8 63 30 00 00       	call   8062418 <__afl_maybe_log>
 805f3b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f3b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f3bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f3c1:	8b 3c 24             	mov    (%esp),%edi
 805f3c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f3c8:	8b 74 24 24          	mov    0x24(%esp),%esi
 805f3cc:	c6 04 2e 5c          	movb   $0x5c,(%esi,%ebp,1)
 805f3d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f3d4:	89 3c 24             	mov    %edi,(%esp)
 805f3d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f3db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f3df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f3e3:	b9 f4 d9 00 00       	mov    $0xd9f4,%ecx
 805f3e8:	e8 2b 30 00 00       	call   8062418 <__afl_maybe_log>
 805f3ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f3f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f3f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f3f9:	8b 3c 24             	mov    (%esp),%edi
 805f3fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f400:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805f403:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 805f408:	e9 1d f6 ff ff       	jmp    805ea2a <quotearg_buffer_restyled+0x22ea>
 805f40d:	8d 76 00             	lea    0x0(%esi),%esi

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805f410:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805f415:	0f 85 6a 0d 00 00    	jne    8060185 <quotearg_buffer_restyled+0x3a45>
 805f41b:	90                   	nop
 805f41c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f420:	89 3c 24             	mov    %edi,(%esp)
 805f423:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f427:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f42b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f42f:	b9 99 48 00 00       	mov    $0x4899,%ecx
 805f434:	e8 df 2f 00 00       	call   8062418 <__afl_maybe_log>
 805f439:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f43d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f441:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f445:	8b 3c 24             	mov    (%esp),%edi
 805f448:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805f44c:	39 c5                	cmp    %eax,%ebp
 805f44e:	73 38                	jae    805f488 <quotearg_buffer_restyled+0x2d48>
 805f450:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f454:	89 3c 24             	mov    %edi,(%esp)
 805f457:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f45b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f45f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f463:	b9 ed 41 00 00       	mov    $0x41ed,%ecx
 805f468:	e8 ab 2f 00 00       	call   8062418 <__afl_maybe_log>
 805f46d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f471:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f475:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f479:	8b 3c 24             	mov    (%esp),%edi
 805f47c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f480:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805f484:	c6 04 2b 5c          	movb   $0x5c,(%ebx,%ebp,1)
 805f488:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f48c:	89 3c 24             	mov    %edi,(%esp)
 805f48f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f493:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f497:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f49b:	b9 a2 d7 00 00       	mov    $0xd7a2,%ecx
 805f4a0:	e8 73 2f 00 00       	call   8062418 <__afl_maybe_log>
 805f4a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f4a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f4ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f4b1:	8b 3c 24             	mov    (%esp),%edi
 805f4b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f4b8:	8d 55 01             	lea    0x1(%ebp),%edx
                        STORE ('0' + (c >> 6));
 805f4bb:	39 d0                	cmp    %edx,%eax
 805f4bd:	76 48                	jbe    805f507 <quotearg_buffer_restyled+0x2dc7>
 805f4bf:	90                   	nop
 805f4c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f4c4:	89 3c 24             	mov    %edi,(%esp)
 805f4c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f4cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f4cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f4d3:	b9 4c db 00 00       	mov    $0xdb4c,%ecx
 805f4d8:	e8 3b 2f 00 00       	call   8062418 <__afl_maybe_log>
 805f4dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f4e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f4e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f4e9:	8b 3c 24             	mov    (%esp),%edi
 805f4ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f4f0:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805f4f5:	8b 54 24 24          	mov    0x24(%esp),%edx
 805f4f9:	c0 eb 06             	shr    $0x6,%bl
 805f4fc:	89 de                	mov    %ebx,%esi
 805f4fe:	83 c6 30             	add    $0x30,%esi
 805f501:	89 f3                	mov    %esi,%ebx
 805f503:	88 5c 2a 01          	mov    %bl,0x1(%edx,%ebp,1)
 805f507:	90                   	nop
 805f508:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f50c:	89 3c 24             	mov    %edi,(%esp)
 805f50f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f513:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f517:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f51b:	b9 9c e7 00 00       	mov    $0xe79c,%ecx
 805f520:	e8 f3 2e 00 00       	call   8062418 <__afl_maybe_log>
 805f525:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f529:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f52d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f531:	8b 3c 24             	mov    (%esp),%edi
 805f534:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f538:	8d 75 02             	lea    0x2(%ebp),%esi
                        STORE ('0' + ((c >> 3) & 7));
 805f53b:	39 f0                	cmp    %esi,%eax
 805f53d:	76 49                	jbe    805f588 <quotearg_buffer_restyled+0x2e48>
 805f53f:	90                   	nop
 805f540:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f544:	89 3c 24             	mov    %edi,(%esp)
 805f547:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f54b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f54f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f553:	b9 f2 b8 00 00       	mov    $0xb8f2,%ecx
 805f558:	e8 bb 2e 00 00       	call   8062418 <__afl_maybe_log>
 805f55d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f561:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f565:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f569:	8b 3c 24             	mov    (%esp),%edi
 805f56c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f570:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805f575:	8b 74 24 24          	mov    0x24(%esp),%esi
 805f579:	c0 eb 03             	shr    $0x3,%bl
 805f57c:	89 da                	mov    %ebx,%edx
 805f57e:	83 e2 07             	and    $0x7,%edx
 805f581:	83 c2 30             	add    $0x30,%edx
 805f584:	88 54 2e 02          	mov    %dl,0x2(%esi,%ebp,1)
                        c = '0' + (c & 7);
 805f588:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f58c:	89 3c 24             	mov    %edi,(%esp)
 805f58f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f593:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f597:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f59b:	b9 5a 1d 00 00       	mov    $0x1d5a,%ecx
 805f5a0:	e8 73 2e 00 00       	call   8062418 <__afl_maybe_log>
 805f5a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f5a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f5ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f5b1:	8b 3c 24             	mov    (%esp),%edi
 805f5b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f5b8:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805f5bd:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805f5c0:	83 e2 07             	and    $0x7,%edx
 805f5c3:	8d 5a 30             	lea    0x30(%edx),%ebx
 805f5c6:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
 805f5ca:	e9 f9 f5 ff ff       	jmp    805ebc8 <quotearg_buffer_restyled+0x2488>
 805f5cf:	90                   	nop

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805f5d0:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805f5d5:	0f 85 aa 0b 00 00    	jne    8060185 <quotearg_buffer_restyled+0x3a45>
 805f5db:	90                   	nop
 805f5dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f5e0:	89 3c 24             	mov    %edi,(%esp)
 805f5e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f5e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f5eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f5ef:	b9 06 1a 00 00       	mov    $0x1a06,%ecx
 805f5f4:	e8 1f 2e 00 00       	call   8062418 <__afl_maybe_log>
 805f5f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f5fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f601:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f605:	8b 3c 24             	mov    (%esp),%edi
 805f608:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805f60c:	39 c5                	cmp    %eax,%ebp
 805f60e:	73 38                	jae    805f648 <quotearg_buffer_restyled+0x2f08>
 805f610:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f614:	89 3c 24             	mov    %edi,(%esp)
 805f617:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f61b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f61f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f623:	b9 af 7e 00 00       	mov    $0x7eaf,%ecx
 805f628:	e8 eb 2d 00 00       	call   8062418 <__afl_maybe_log>
 805f62d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f631:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f635:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f639:	8b 3c 24             	mov    (%esp),%edi
 805f63c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f640:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805f644:	c6 04 2b 5c          	movb   $0x5c,(%ebx,%ebp,1)
 805f648:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f64c:	89 3c 24             	mov    %edi,(%esp)
 805f64f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f653:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f657:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f65b:	b9 ad 16 00 00       	mov    $0x16ad,%ecx
 805f660:	e8 b3 2d 00 00       	call   8062418 <__afl_maybe_log>
 805f665:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f669:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f66d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f671:	8b 3c 24             	mov    (%esp),%edi
 805f674:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f678:	8d 55 01             	lea    0x1(%ebp),%edx
                        STORE ('0' + (c >> 6));
 805f67b:	39 d0                	cmp    %edx,%eax
 805f67d:	76 48                	jbe    805f6c7 <quotearg_buffer_restyled+0x2f87>
 805f67f:	90                   	nop
 805f680:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f684:	89 3c 24             	mov    %edi,(%esp)
 805f687:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f68b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f68f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f693:	b9 fb 38 00 00       	mov    $0x38fb,%ecx
 805f698:	e8 7b 2d 00 00       	call   8062418 <__afl_maybe_log>
 805f69d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f6a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f6a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f6a9:	8b 3c 24             	mov    (%esp),%edi
 805f6ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f6b0:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805f6b5:	8b 54 24 24          	mov    0x24(%esp),%edx
 805f6b9:	c0 eb 06             	shr    $0x6,%bl
 805f6bc:	89 de                	mov    %ebx,%esi
 805f6be:	83 c6 30             	add    $0x30,%esi
 805f6c1:	89 f3                	mov    %esi,%ebx
 805f6c3:	88 5c 2a 01          	mov    %bl,0x1(%edx,%ebp,1)
 805f6c7:	90                   	nop
 805f6c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f6cc:	89 3c 24             	mov    %edi,(%esp)
 805f6cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f6d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f6d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f6db:	b9 68 a1 00 00       	mov    $0xa168,%ecx
 805f6e0:	e8 33 2d 00 00       	call   8062418 <__afl_maybe_log>
 805f6e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f6e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f6ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f6f1:	8b 3c 24             	mov    (%esp),%edi
 805f6f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f6f8:	8d 75 02             	lea    0x2(%ebp),%esi
                        STORE ('0' + ((c >> 3) & 7));
 805f6fb:	39 f0                	cmp    %esi,%eax
 805f6fd:	76 49                	jbe    805f748 <quotearg_buffer_restyled+0x3008>
 805f6ff:	90                   	nop
 805f700:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f704:	89 3c 24             	mov    %edi,(%esp)
 805f707:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f70b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f70f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f713:	b9 bb 10 00 00       	mov    $0x10bb,%ecx
 805f718:	e8 fb 2c 00 00       	call   8062418 <__afl_maybe_log>
 805f71d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f721:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f725:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f729:	8b 3c 24             	mov    (%esp),%edi
 805f72c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f730:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805f735:	8b 74 24 24          	mov    0x24(%esp),%esi
 805f739:	c0 eb 03             	shr    $0x3,%bl
 805f73c:	89 da                	mov    %ebx,%edx
 805f73e:	83 e2 07             	and    $0x7,%edx
 805f741:	83 c2 30             	add    $0x30,%edx
 805f744:	88 54 2e 02          	mov    %dl,0x2(%esi,%ebp,1)
                        c = '0' + (c & 7);
 805f748:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f74c:	89 3c 24             	mov    %edi,(%esp)
 805f74f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f753:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f757:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f75b:	b9 02 89 00 00       	mov    $0x8902,%ecx
 805f760:	e8 b3 2c 00 00       	call   8062418 <__afl_maybe_log>
 805f765:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f769:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f76d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f771:	8b 3c 24             	mov    (%esp),%edi
 805f774:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f778:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805f77d:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805f780:	83 e2 07             	and    $0x7,%edx
 805f783:	8d 5a 30             	lea    0x30(%edx),%ebx
 805f786:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
 805f78a:	e9 d5 f5 ff ff       	jmp    805ed64 <quotearg_buffer_restyled+0x2624>
 805f78f:	90                   	nop
                mbstate_t mbstate;
                memset (&mbstate, 0, sizeof mbstate);

                m = 0;
                printable = true;
                if (argsize == SIZE_MAX)
 805f790:	83 ff ff             	cmp    $0xffffffff,%edi
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 805f793:	c7 44 24 48 00 00 00 	movl   $0x0,0x48(%esp)
 805f79a:	00 
 805f79b:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%esp)
 805f7a2:	00 
 805f7a3:	0f 84 18 0a 00 00    	je     80601c1 <quotearg_buffer_restyled+0x3a81>
 805f7a9:	8d 76 00             	lea    0x0(%esi),%esi
 805f7ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f7b0:	89 3c 24             	mov    %edi,(%esp)
 805f7b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f7b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f7bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f7bf:	b9 33 b7 00 00       	mov    $0xb733,%ecx
 805f7c4:	e8 4f 2c 00 00       	call   8062418 <__afl_maybe_log>
 805f7c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f7cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f7d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f7d5:	8b 3c 24             	mov    (%esp),%edi
 805f7d8:	8d 64 24 10          	lea    0x10(%esp),%esp
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
        case '\t': esc = 't'; goto c_and_shell_escape;
        case '\v': esc = 'v'; goto c_escape;
 805f7dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f7e0:	89 3c 24             	mov    %edi,(%esp)
 805f7e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f7e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f7eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f7ef:	b9 15 67 00 00       	mov    $0x6715,%ecx
 805f7f4:	e8 1f 2c 00 00       	call   8062418 <__afl_maybe_log>
 805f7f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f7fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f801:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f805:	8b 3c 24             	mov    (%esp),%edi
 805f808:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f80c:	c6 44 24 20 01       	movb   $0x1,0x20(%esp)
 805f811:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
 805f818:	00 
                                  break;
                                }
                          }

                        if (! iswprint (w))
                          printable = false;
 805f819:	89 74 24 2c          	mov    %esi,0x2c(%esp)
 805f81d:	89 6c 24 30          	mov    %ebp,0x30(%esp)
 805f821:	88 54 24 3b          	mov    %dl,0x3b(%esp)
 805f825:	89 5c 24 3c          	mov    %ebx,0x3c(%esp)
 805f829:	8d 76 00             	lea    0x0(%esi),%esi

                do
                  {
                    wchar_t w;
                    size_t bytes = mbrtowc (&w, &arg[i + m],
                                            argsize - (i + m), &mbstate);
 805f82c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f830:	89 3c 24             	mov    %edi,(%esp)
 805f833:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f837:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f83b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f83f:	b9 67 35 00 00       	mov    $0x3567,%ecx
 805f844:	e8 cf 2b 00 00       	call   8062418 <__afl_maybe_log>
 805f849:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f84d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f851:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f855:	8b 3c 24             	mov    (%esp),%edi
 805f858:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f85c:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805f860:	03 5c 24 2c          	add    0x2c(%esp),%ebx
                  argsize = strlen (arg);

                do
                  {
                    wchar_t w;
                    size_t bytes = mbrtowc (&w, &arg[i + m],
 805f864:	8d 4c 24 48          	lea    0x48(%esp),%ecx
 805f868:	8b 74 24 14          	mov    0x14(%esp),%esi
 805f86c:	89 fa                	mov    %edi,%edx
 805f86e:	51                   	push   %ecx
 805f86f:	8d 34 1e             	lea    (%esi,%ebx,1),%esi
 805f872:	29 da                	sub    %ebx,%edx
 805f874:	52                   	push   %edx
 805f875:	56                   	push   %esi
 805f876:	8d 44 24 50          	lea    0x50(%esp),%eax
 805f87a:	50                   	push   %eax
 805f87b:	e8 f0 99 fe ff       	call   8049270 <mbrtowc@plt>
                                            argsize - (i + m), &mbstate);
                    if (bytes == 0)
 805f880:	83 c4 10             	add    $0x10,%esp
 805f883:	85 c0                	test   %eax,%eax
                  argsize = strlen (arg);

                do
                  {
                    wchar_t w;
                    size_t bytes = mbrtowc (&w, &arg[i + m],
 805f885:	89 c5                	mov    %eax,%ebp
                                            argsize - (i + m), &mbstate);
                    if (bytes == 0)
 805f887:	0f 84 87 02 00 00    	je     805fb14 <quotearg_buffer_restyled+0x33d4>
 805f88d:	8d 76 00             	lea    0x0(%esi),%esi
 805f890:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f894:	89 3c 24             	mov    %edi,(%esp)
 805f897:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f89b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f89f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f8a3:	b9 c7 fe 00 00       	mov    $0xfec7,%ecx
 805f8a8:	e8 6b 2b 00 00       	call   8062418 <__afl_maybe_log>
 805f8ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f8b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f8b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f8b9:	8b 3c 24             	mov    (%esp),%edi
 805f8bc:	8d 64 24 10          	lea    0x10(%esp),%esp
                      break;
                    else if (bytes == (size_t) -1)
 805f8c0:	83 f8 ff             	cmp    $0xffffffff,%eax
 805f8c3:	0f 84 24 0b 00 00    	je     80603ed <quotearg_buffer_restyled+0x3cad>
 805f8c9:	8d 76 00             	lea    0x0(%esi),%esi
 805f8cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f8d0:	89 3c 24             	mov    %edi,(%esp)
 805f8d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f8d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f8db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f8df:	b9 d8 47 00 00       	mov    $0x47d8,%ecx
 805f8e4:	e8 2f 2b 00 00       	call   8062418 <__afl_maybe_log>
 805f8e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f8ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f8f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f8f5:	8b 3c 24             	mov    (%esp),%edi
 805f8f8:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        printable = false;
                        break;
                      }
                    else if (bytes == (size_t) -2)
 805f8fc:	83 f8 fe             	cmp    $0xfffffffe,%eax
 805f8ff:	0f 84 32 0b 00 00    	je     8060437 <quotearg_buffer_restyled+0x3cf7>
 805f905:	8d 76 00             	lea    0x0(%esi),%esi
 805f908:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f90c:	89 3c 24             	mov    %edi,(%esp)
 805f90f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f913:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f917:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f91b:	b9 40 a7 00 00       	mov    $0xa740,%ecx
 805f920:	e8 f3 2a 00 00       	call   8062418 <__afl_maybe_log>
 805f925:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f929:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f92d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f931:	8b 3c 24             	mov    (%esp),%edi
 805f934:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        /* Work around a bug with older shells that "see" a '\'
                           that is really the 2nd byte of a multibyte character.
                           In practice the problem is limited to ASCII
                           chars >= '@' that are shell special chars.  */
                        if ('[' == 0x5b && elide_outer_quotes
 805f938:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805f93d:	0f 84 35 01 00 00    	je     805fa78 <quotearg_buffer_restyled+0x3338>
 805f943:	90                   	nop
 805f944:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f948:	89 3c 24             	mov    %edi,(%esp)
 805f94b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f94f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f953:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f957:	b9 6a 2e 00 00       	mov    $0x2e6a,%ecx
 805f95c:	e8 b7 2a 00 00       	call   8062418 <__afl_maybe_log>
 805f961:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f965:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f969:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f96d:	8b 3c 24             	mov    (%esp),%edi
 805f970:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f974:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 805f979:	0f 85 f9 00 00 00    	jne    805fa78 <quotearg_buffer_restyled+0x3338>
 805f97f:	90                   	nop
 805f980:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f984:	89 3c 24             	mov    %edi,(%esp)
 805f987:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f98b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f98f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f993:	b9 98 bb 00 00       	mov    $0xbb98,%ecx
 805f998:	e8 7b 2a 00 00       	call   8062418 <__afl_maybe_log>
 805f99d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f9a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f9a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f9a9:	8b 3c 24             	mov    (%esp),%edi
 805f9ac:	8d 64 24 10          	lea    0x10(%esp),%esp
                            && quoting_style == shell_always_quoting_style)
                          {
                            size_t j;
                            for (j = 1; j < bytes; j++)
 805f9b0:	83 f8 01             	cmp    $0x1,%eax
 805f9b3:	0f 84 bf 00 00 00    	je     805fa78 <quotearg_buffer_restyled+0x3338>
 805f9b9:	8d 76 00             	lea    0x0(%esi),%esi
 805f9bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f9c0:	89 3c 24             	mov    %edi,(%esp)
 805f9c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f9c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f9cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f9cf:	b9 a0 de 00 00       	mov    $0xdea0,%ecx
 805f9d4:	e8 3f 2a 00 00       	call   8062418 <__afl_maybe_log>
 805f9d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f9dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f9e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f9e5:	8b 3c 24             	mov    (%esp),%edi
 805f9e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f9ec:	bb 01 00 00 00       	mov    $0x1,%ebx
 805f9f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
                              switch (arg[i + m + j])
 805f9f8:	0f b6 0c 1e          	movzbl (%esi,%ebx,1),%ecx
 805f9fc:	8d 51 a5             	lea    -0x5b(%ecx),%edx
 805f9ff:	80 fa 21             	cmp    $0x21,%dl
 805fa02:	77 3c                	ja     805fa40 <quotearg_buffer_restyled+0x3300>
 805fa04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fa08:	89 3c 24             	mov    %edi,(%esp)
 805fa0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fa0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fa13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fa17:	b9 ca 33 00 00       	mov    $0x33ca,%ecx
 805fa1c:	e8 f7 29 00 00       	call   8062418 <__afl_maybe_log>
 805fa21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fa25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fa29:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fa2d:	8b 3c 24             	mov    (%esp),%edi
 805fa30:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fa34:	0f b6 c2             	movzbl %dl,%eax
 805fa37:	ff 24 85 80 7f 06 08 	jmp    *0x8067f80(,%eax,4)
 805fa3e:	66 90                	xchg   %ax,%ax
                           chars >= '@' that are shell special chars.  */
                        if ('[' == 0x5b && elide_outer_quotes
                            && quoting_style == shell_always_quoting_style)
                          {
                            size_t j;
                            for (j = 1; j < bytes; j++)
 805fa40:	83 c3 01             	add    $0x1,%ebx
 805fa43:	39 eb                	cmp    %ebp,%ebx
 805fa45:	75 b1                	jne    805f9f8 <quotearg_buffer_restyled+0x32b8>
 805fa47:	90                   	nop
 805fa48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fa4c:	89 3c 24             	mov    %edi,(%esp)
 805fa4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fa53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fa57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fa5b:	b9 c5 6c 00 00       	mov    $0x6cc5,%ecx
 805fa60:	e8 b3 29 00 00       	call   8062418 <__afl_maybe_log>
 805fa65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fa69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fa6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fa71:	8b 3c 24             	mov    (%esp),%edi
 805fa74:	8d 64 24 10          	lea    0x10(%esp),%esp
                                default:
                                  break;
                                }
                          }

                        if (! iswprint (w))
 805fa78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fa7c:	89 3c 24             	mov    %edi,(%esp)
 805fa7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fa83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fa87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fa8b:	b9 7c 58 00 00       	mov    $0x587c,%ecx
 805fa90:	e8 83 29 00 00       	call   8062418 <__afl_maybe_log>
 805fa95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fa99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fa9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805faa1:	8b 3c 24             	mov    (%esp),%edi
 805faa4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805faa8:	83 ec 0c             	sub    $0xc,%esp
 805faab:	ff 74 24 50          	pushl  0x50(%esp)
 805faaf:	e8 4c 97 fe ff       	call   8049200 <iswprint@plt>
 805fab4:	5b                   	pop    %ebx
                          printable = false;
 805fab5:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805faba:	85 c0                	test   %eax,%eax
 805fabc:	b9 00 00 00 00       	mov    $0x0,%ecx
                        m += bytes;
                      }
                  }
                while (! mbsinit (&mbstate));
 805fac1:	8d 74 24 54          	lea    0x54(%esp),%esi
                                  break;
                                }
                          }

                        if (! iswprint (w))
                          printable = false;
 805fac5:	0f 44 d9             	cmove  %ecx,%ebx
                        m += bytes;
 805fac8:	01 6c 24 30          	add    %ebp,0x30(%esp)
                                  break;
                                }
                          }

                        if (! iswprint (w))
                          printable = false;
 805facc:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
                        m += bytes;
                      }
                  }
                while (! mbsinit (&mbstate));
 805fad0:	56                   	push   %esi
 805fad1:	e8 aa 96 fe ff       	call   8049180 <mbsinit@plt>
 805fad6:	83 c4 10             	add    $0x10,%esp
 805fad9:	85 c0                	test   %eax,%eax
 805fadb:	0f 84 48 fd ff ff    	je     805f829 <quotearg_buffer_restyled+0x30e9>
 805fae1:	8d 76 00             	lea    0x0(%esi),%esi
 805fae4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fae8:	89 3c 24             	mov    %edi,(%esp)
 805faeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805faef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805faf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805faf7:	b9 05 e9 00 00       	mov    $0xe905,%ecx
 805fafc:	e8 17 29 00 00       	call   8062418 <__afl_maybe_log>
 805fb01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fb05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fb09:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fb0d:	8b 3c 24             	mov    (%esp),%edi
 805fb10:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fb14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fb18:	89 3c 24             	mov    %edi,(%esp)
 805fb1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fb1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fb23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fb27:	b9 da f1 00 00       	mov    $0xf1da,%ecx
 805fb2c:	e8 e7 28 00 00       	call   8062418 <__afl_maybe_log>
 805fb31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fb35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fb39:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fb3d:	8b 3c 24             	mov    (%esp),%edi
 805fb40:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fb44:	0f b6 54 24 3b       	movzbl 0x3b(%esp),%edx
 805fb49:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 805fb4d:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 805fb51:	8d 76 00             	lea    0x0(%esi),%esi
              }

            if (1 < m || (backslash_escapes && ! printable))
 805fb54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fb58:	89 3c 24             	mov    %edi,(%esp)
 805fb5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fb5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fb63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fb67:	b9 44 c5 00 00       	mov    $0xc544,%ecx
 805fb6c:	e8 a7 28 00 00       	call   8062418 <__afl_maybe_log>
 805fb71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fb75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fb79:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fb7d:	8b 3c 24             	mov    (%esp),%edi
 805fb80:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fb84:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
 805fb89:	0f 87 b9 e3 ff ff    	ja     805df48 <quotearg_buffer_restyled+0x1808>
 805fb8f:	90                   	nop
 805fb90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fb94:	89 3c 24             	mov    %edi,(%esp)
 805fb97:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fb9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fb9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fba3:	b9 fe 06 00 00       	mov    $0x6fe,%ecx
 805fba8:	e8 6b 28 00 00       	call   8062418 <__afl_maybe_log>
 805fbad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fbb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fbb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fbb9:	8b 3c 24             	mov    (%esp),%edi
 805fbbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fbc0:	e9 10 e3 ff ff       	jmp    805ded5 <quotearg_buffer_restyled+0x1795>
 805fbc5:	8d 76 00             	lea    0x0(%esi),%esi
              /* We don't have to worry that this last '0' will be
                 backslash-escaped because, again, quote_string should
                 not start with it and because quote_these_too is
                 documented as not accepting it.  */
            }
          else if (flags & QA_ELIDE_NULL_BYTES)
 805fbc8:	f6 44 24 78 01       	testb  $0x1,0x78(%esp)
 805fbcd:	0f 84 5d d3 ff ff    	je     805cf30 <quotearg_buffer_restyled+0x7f0>
 805fbd3:	90                   	nop
 805fbd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fbd8:	89 3c 24             	mov    %edi,(%esp)
 805fbdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fbdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fbe3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fbe7:	b9 65 3c 00 00       	mov    $0x3c65,%ecx
 805fbec:	e8 27 28 00 00       	call   8062418 <__afl_maybe_log>
 805fbf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fbf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fbf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fbfd:	8b 3c 24             	mov    (%esp),%edi
 805fc00:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fc04:	83 c6 01             	add    $0x1,%esi
 805fc07:	e9 0a cc ff ff       	jmp    805c816 <quotearg_buffer_restyled+0xd6>
 805fc0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 805fc10:	89 5c 24 30          	mov    %ebx,0x30(%esp)
 805fc14:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 805fc18:	89 7c 24 70          	mov    %edi,0x70(%esp)
 805fc1c:	8b 44 24 10          	mov    0x10(%esp),%eax
 805fc20:	8b 7c 24 14          	mov    0x14(%esp),%edi
 805fc24:	89 5c 24 24          	mov    %ebx,0x24(%esp)
 805fc28:	e9 e3 f1 ff ff       	jmp    805ee10 <quotearg_buffer_restyled+0x26d0>
 805fc2d:	8d 76 00             	lea    0x0(%esi),%esi
              goto store_escape;
            }
          break;

        case '{': case '}': /* sometimes special if isolated */
          if (! (argsize == SIZE_MAX ? arg[1] == '\0' : argsize == 1))
 805fc30:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 805fc34:	80 7b 01 00          	cmpb   $0x0,0x1(%ebx)
 805fc38:	0f 95 c0             	setne  %al
 805fc3b:	e9 80 d9 ff ff       	jmp    805d5c0 <quotearg_buffer_restyled+0xe80>

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805fc40:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805fc45:	0f 85 25 db ff ff    	jne    805d770 <quotearg_buffer_restyled+0x1030>
 805fc4b:	90                   	nop
 805fc4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fc50:	89 3c 24             	mov    %edi,(%esp)
 805fc53:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fc57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fc5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fc5f:	b9 58 87 00 00       	mov    $0x8758,%ecx
 805fc64:	e8 af 27 00 00       	call   8062418 <__afl_maybe_log>
 805fc69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fc6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fc71:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fc75:	8b 3c 24             	mov    (%esp),%edi
 805fc78:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805fc7c:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805fc80:	73 3a                	jae    805fcbc <quotearg_buffer_restyled+0x357c>
 805fc82:	66 90                	xchg   %ax,%ax
 805fc84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fc88:	89 3c 24             	mov    %edi,(%esp)
 805fc8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fc8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fc93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fc97:	b9 b4 b3 00 00       	mov    $0xb3b4,%ecx
 805fc9c:	e8 77 27 00 00       	call   8062418 <__afl_maybe_log>
 805fca1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fca5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fca9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fcad:	8b 3c 24             	mov    (%esp),%edi
 805fcb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fcb4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805fcb8:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 805fcbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fcc0:	89 3c 24             	mov    %edi,(%esp)
 805fcc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fcc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fccb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fccf:	b9 f3 b8 00 00       	mov    $0xb8f3,%ecx
 805fcd4:	e8 3f 27 00 00       	call   8062418 <__afl_maybe_log>
 805fcd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fcdd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fce1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fce5:	8b 3c 24             	mov    (%esp),%edi
 805fce8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fcec:	8d 4d 01             	lea    0x1(%ebp),%ecx
                        STORE ('0' + (c >> 6));
 805fcef:	39 4c 24 10          	cmp    %ecx,0x10(%esp)
 805fcf3:	76 43                	jbe    805fd38 <quotearg_buffer_restyled+0x35f8>
 805fcf5:	8d 76 00             	lea    0x0(%esi),%esi
 805fcf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fcfc:	89 3c 24             	mov    %edi,(%esp)
 805fcff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fd03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fd07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fd0b:	b9 29 95 00 00       	mov    $0x9529,%ecx
 805fd10:	e8 03 27 00 00       	call   8062418 <__afl_maybe_log>
 805fd15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fd19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fd1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fd21:	8b 3c 24             	mov    (%esp),%edi
 805fd24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fd28:	89 d0                	mov    %edx,%eax
 805fd2a:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805fd2e:	c0 e8 06             	shr    $0x6,%al
 805fd31:	83 c0 30             	add    $0x30,%eax
 805fd34:	88 44 29 01          	mov    %al,0x1(%ecx,%ebp,1)
 805fd38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fd3c:	89 3c 24             	mov    %edi,(%esp)
 805fd3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fd43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fd47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fd4b:	b9 a8 03 00 00       	mov    $0x3a8,%ecx
 805fd50:	e8 c3 26 00 00       	call   8062418 <__afl_maybe_log>
 805fd55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fd59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fd5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fd61:	8b 3c 24             	mov    (%esp),%edi
 805fd64:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fd68:	8d 45 02             	lea    0x2(%ebp),%eax
                        STORE ('0' + ((c >> 3) & 7));
 805fd6b:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805fd6f:	76 46                	jbe    805fdb7 <quotearg_buffer_restyled+0x3677>
 805fd71:	8d 76 00             	lea    0x0(%esi),%esi
 805fd74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fd78:	89 3c 24             	mov    %edi,(%esp)
 805fd7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fd7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fd83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fd87:	b9 5e cb 00 00       	mov    $0xcb5e,%ecx
 805fd8c:	e8 87 26 00 00       	call   8062418 <__afl_maybe_log>
 805fd91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fd95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fd99:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fd9d:	8b 3c 24             	mov    (%esp),%edi
 805fda0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fda4:	89 d0                	mov    %edx,%eax
 805fda6:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805fdaa:	c0 e8 03             	shr    $0x3,%al
 805fdad:	83 e0 07             	and    $0x7,%eax
 805fdb0:	83 c0 30             	add    $0x30,%eax
 805fdb3:	88 44 29 02          	mov    %al,0x2(%ecx,%ebp,1)
 805fdb7:	90                   	nop
                        c = '0' + (c & 7);
 805fdb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fdbc:	89 3c 24             	mov    %edi,(%esp)
 805fdbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fdc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fdc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fdcb:	b9 52 aa 00 00       	mov    $0xaa52,%ecx
 805fdd0:	e8 43 26 00 00       	call   8062418 <__afl_maybe_log>
 805fdd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fdd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fddd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fde1:	8b 3c 24             	mov    (%esp),%edi
 805fde4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fde8:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805fdeb:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805fdee:	8d 52 30             	lea    0x30(%edx),%edx
 805fdf1:	e9 be e2 ff ff       	jmp    805e0b4 <quotearg_buffer_restyled+0x1974>
 805fdf6:	8d 76 00             	lea    0x0(%esi),%esi
 805fdf9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805fe00:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805fe05:	0f 85 65 d9 ff ff    	jne    805d770 <quotearg_buffer_restyled+0x1030>
 805fe0b:	90                   	nop
 805fe0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fe10:	89 3c 24             	mov    %edi,(%esp)
 805fe13:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fe17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fe1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fe1f:	b9 ce 02 00 00       	mov    $0x2ce,%ecx
 805fe24:	e8 ef 25 00 00       	call   8062418 <__afl_maybe_log>
 805fe29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fe2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fe31:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fe35:	8b 3c 24             	mov    (%esp),%edi
 805fe38:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805fe3c:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805fe40:	73 3a                	jae    805fe7c <quotearg_buffer_restyled+0x373c>
 805fe42:	66 90                	xchg   %ax,%ax
 805fe44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fe48:	89 3c 24             	mov    %edi,(%esp)
 805fe4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fe4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fe53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fe57:	b9 01 70 00 00       	mov    $0x7001,%ecx
 805fe5c:	e8 b7 25 00 00       	call   8062418 <__afl_maybe_log>
 805fe61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fe65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fe69:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fe6d:	8b 3c 24             	mov    (%esp),%edi
 805fe70:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fe74:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805fe78:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 805fe7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fe80:	89 3c 24             	mov    %edi,(%esp)
 805fe83:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fe87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fe8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fe8f:	b9 d6 92 00 00       	mov    $0x92d6,%ecx
 805fe94:	e8 7f 25 00 00       	call   8062418 <__afl_maybe_log>
 805fe99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fe9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fea1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fea5:	8b 3c 24             	mov    (%esp),%edi
 805fea8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805feac:	8d 45 01             	lea    0x1(%ebp),%eax
                        STORE ('0' + (c >> 6));
 805feaf:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805feb3:	76 43                	jbe    805fef8 <quotearg_buffer_restyled+0x37b8>
 805feb5:	8d 76 00             	lea    0x0(%esi),%esi
 805feb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805febc:	89 3c 24             	mov    %edi,(%esp)
 805febf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fec3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fec7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fecb:	b9 0c c8 00 00       	mov    $0xc80c,%ecx
 805fed0:	e8 43 25 00 00       	call   8062418 <__afl_maybe_log>
 805fed5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fed9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fedd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fee1:	8b 3c 24             	mov    (%esp),%edi
 805fee4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fee8:	89 d0                	mov    %edx,%eax
 805feea:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805feee:	c0 e8 06             	shr    $0x6,%al
 805fef1:	83 c0 30             	add    $0x30,%eax
 805fef4:	88 44 29 01          	mov    %al,0x1(%ecx,%ebp,1)
 805fef8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fefc:	89 3c 24             	mov    %edi,(%esp)
 805feff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ff03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ff07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ff0b:	b9 b4 4a 00 00       	mov    $0x4ab4,%ecx
 805ff10:	e8 03 25 00 00       	call   8062418 <__afl_maybe_log>
 805ff15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ff19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ff1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ff21:	8b 3c 24             	mov    (%esp),%edi
 805ff24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ff28:	8d 45 02             	lea    0x2(%ebp),%eax
                        STORE ('0' + ((c >> 3) & 7));
 805ff2b:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805ff2f:	76 46                	jbe    805ff77 <quotearg_buffer_restyled+0x3837>
 805ff31:	8d 76 00             	lea    0x0(%esi),%esi
 805ff34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ff38:	89 3c 24             	mov    %edi,(%esp)
 805ff3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ff3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ff43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ff47:	b9 11 de 00 00       	mov    $0xde11,%ecx
 805ff4c:	e8 c7 24 00 00       	call   8062418 <__afl_maybe_log>
 805ff51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ff55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ff59:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ff5d:	8b 3c 24             	mov    (%esp),%edi
 805ff60:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ff64:	89 d0                	mov    %edx,%eax
 805ff66:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805ff6a:	c0 e8 03             	shr    $0x3,%al
 805ff6d:	83 e0 07             	and    $0x7,%eax
 805ff70:	83 c0 30             	add    $0x30,%eax
 805ff73:	88 44 29 02          	mov    %al,0x2(%ecx,%ebp,1)
 805ff77:	90                   	nop
                        c = '0' + (c & 7);
 805ff78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ff7c:	89 3c 24             	mov    %edi,(%esp)
 805ff7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ff83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ff87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ff8b:	b9 78 5f 00 00       	mov    $0x5f78,%ecx
 805ff90:	e8 83 24 00 00       	call   8062418 <__afl_maybe_log>
 805ff95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ff99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ff9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ffa1:	8b 3c 24             	mov    (%esp),%edi
 805ffa4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ffa8:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805ffab:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805ffae:	8d 52 30             	lea    0x30(%edx),%edx
 805ffb1:	e9 4e e3 ff ff       	jmp    805e304 <quotearg_buffer_restyled+0x1bc4>
 805ffb6:	8d 76 00             	lea    0x0(%esi),%esi
 805ffb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805ffc0:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805ffc5:	0f 85 a5 d7 ff ff    	jne    805d770 <quotearg_buffer_restyled+0x1030>
 805ffcb:	90                   	nop
 805ffcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ffd0:	89 3c 24             	mov    %edi,(%esp)
 805ffd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ffd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ffdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ffdf:	b9 62 12 00 00       	mov    $0x1262,%ecx
 805ffe4:	e8 2f 24 00 00       	call   8062418 <__afl_maybe_log>
 805ffe9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ffed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fff1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fff5:	8b 3c 24             	mov    (%esp),%edi
 805fff8:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805fffc:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8060000:	73 3a                	jae    806003c <quotearg_buffer_restyled+0x38fc>
 8060002:	66 90                	xchg   %ax,%ax
 8060004:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060008:	89 3c 24             	mov    %edi,(%esp)
 806000b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806000f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060013:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060017:	b9 8b c8 00 00       	mov    $0xc88b,%ecx
 806001c:	e8 f7 23 00 00       	call   8062418 <__afl_maybe_log>
 8060021:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060025:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060029:	8b 54 24 04          	mov    0x4(%esp),%edx
 806002d:	8b 3c 24             	mov    (%esp),%edi
 8060030:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060034:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8060038:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 806003c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060040:	89 3c 24             	mov    %edi,(%esp)
 8060043:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060047:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806004b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806004f:	b9 20 bc 00 00       	mov    $0xbc20,%ecx
 8060054:	e8 bf 23 00 00       	call   8062418 <__afl_maybe_log>
 8060059:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806005d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060061:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060065:	8b 3c 24             	mov    (%esp),%edi
 8060068:	8d 64 24 10          	lea    0x10(%esp),%esp
 806006c:	8d 4d 01             	lea    0x1(%ebp),%ecx
                        STORE ('0' + (c >> 6));
 806006f:	39 4c 24 10          	cmp    %ecx,0x10(%esp)
 8060073:	76 43                	jbe    80600b8 <quotearg_buffer_restyled+0x3978>
 8060075:	8d 76 00             	lea    0x0(%esi),%esi
 8060078:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806007c:	89 3c 24             	mov    %edi,(%esp)
 806007f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060083:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060087:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806008b:	b9 62 35 00 00       	mov    $0x3562,%ecx
 8060090:	e8 83 23 00 00       	call   8062418 <__afl_maybe_log>
 8060095:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060099:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806009d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80600a1:	8b 3c 24             	mov    (%esp),%edi
 80600a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80600a8:	89 d0                	mov    %edx,%eax
 80600aa:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 80600ae:	c0 e8 06             	shr    $0x6,%al
 80600b1:	83 c0 30             	add    $0x30,%eax
 80600b4:	88 44 29 01          	mov    %al,0x1(%ecx,%ebp,1)
 80600b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80600bc:	89 3c 24             	mov    %edi,(%esp)
 80600bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80600c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80600c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80600cb:	b9 12 19 00 00       	mov    $0x1912,%ecx
 80600d0:	e8 43 23 00 00       	call   8062418 <__afl_maybe_log>
 80600d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80600d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80600dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80600e1:	8b 3c 24             	mov    (%esp),%edi
 80600e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80600e8:	8d 45 02             	lea    0x2(%ebp),%eax
                        STORE ('0' + ((c >> 3) & 7));
 80600eb:	39 44 24 10          	cmp    %eax,0x10(%esp)
 80600ef:	76 46                	jbe    8060137 <quotearg_buffer_restyled+0x39f7>
 80600f1:	8d 76 00             	lea    0x0(%esi),%esi
 80600f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80600f8:	89 3c 24             	mov    %edi,(%esp)
 80600fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80600ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060103:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060107:	b9 88 44 00 00       	mov    $0x4488,%ecx
 806010c:	e8 07 23 00 00       	call   8062418 <__afl_maybe_log>
 8060111:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060115:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060119:	8b 54 24 04          	mov    0x4(%esp),%edx
 806011d:	8b 3c 24             	mov    (%esp),%edi
 8060120:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060124:	89 d0                	mov    %edx,%eax
 8060126:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 806012a:	c0 e8 03             	shr    $0x3,%al
 806012d:	83 e0 07             	and    $0x7,%eax
 8060130:	83 c0 30             	add    $0x30,%eax
 8060133:	88 44 29 02          	mov    %al,0x2(%ecx,%ebp,1)
 8060137:	90                   	nop
                        c = '0' + (c & 7);
 8060138:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806013c:	89 3c 24             	mov    %edi,(%esp)
 806013f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060143:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060147:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806014b:	b9 bc e7 00 00       	mov    $0xe7bc,%ecx
 8060150:	e8 c3 22 00 00       	call   8062418 <__afl_maybe_log>
 8060155:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060159:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806015d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060161:	8b 3c 24             	mov    (%esp),%edi
 8060164:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060168:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 806016b:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 806016e:	8d 52 30             	lea    0x30(%edx),%edx
 8060171:	e9 5e e3 ff ff       	jmp    805e4d4 <quotearg_buffer_restyled+0x1d94>
 8060176:	8d 76 00             	lea    0x0(%esi),%esi
 8060179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
    case literal_quoting_style:
      elide_outer_quotes = false;
      break;

    default:
      abort ();
 8060180:	e8 5b 93 fe ff       	call   80494e0 <abort@plt>
 8060185:	8d 76 00             	lea    0x0(%esi),%esi
 8060188:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806018c:	89 3c 24             	mov    %edi,(%esp)
 806018f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060193:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060197:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806019b:	b9 b7 6e 00 00       	mov    $0x6eb7,%ecx
 80601a0:	e8 73 22 00 00       	call   8062418 <__afl_maybe_log>
 80601a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80601a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80601ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80601b1:	8b 3c 24             	mov    (%esp),%edi
 80601b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80601b8:	8b 7c 24 70          	mov    0x70(%esp),%edi
 80601bc:	e9 af d5 ff ff       	jmp    805d770 <quotearg_buffer_restyled+0x1030>
 80601c1:	8d 76 00             	lea    0x0(%esi),%esi
 80601c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80601c8:	89 3c 24             	mov    %edi,(%esp)
 80601cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80601cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80601d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80601d7:	b9 8f bd 00 00       	mov    $0xbd8f,%ecx
 80601dc:	e8 37 22 00 00       	call   8062418 <__afl_maybe_log>
 80601e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80601e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80601e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80601ed:	8b 3c 24             	mov    (%esp),%edi
 80601f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80601f4:	88 54 24 20          	mov    %dl,0x20(%esp)
                memset (&mbstate, 0, sizeof mbstate);

                m = 0;
                printable = true;
                if (argsize == SIZE_MAX)
                  argsize = strlen (arg);
 80601f8:	83 ec 0c             	sub    $0xc,%esp
 80601fb:	ff 74 24 20          	pushl  0x20(%esp)
 80601ff:	e8 5c 91 fe ff       	call   8049360 <strlen@plt>
 8060204:	83 c4 10             	add    $0x10,%esp
 8060207:	89 c7                	mov    %eax,%edi
 8060209:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
 806020e:	e9 c9 f5 ff ff       	jmp    805f7dc <quotearg_buffer_restyled+0x309c>
 8060213:	90                   	nop
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 8060214:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060218:	89 3c 24             	mov    %edi,(%esp)
 806021b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806021f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060223:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060227:	b9 71 f4 00 00       	mov    $0xf471,%ecx
 806022c:	e8 e7 21 00 00       	call   8062418 <__afl_maybe_log>
 8060231:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060235:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060239:	8b 54 24 04          	mov    0x4(%esp),%edx
 806023d:	8b 3c 24             	mov    (%esp),%edi
 8060240:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060244:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 8060249:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8060250:	00 
      quoting_style = shell_always_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
 8060251:	bd 01 00 00 00       	mov    $0x1,%ebp
      quote_string = "'";
 8060256:	c7 44 24 28 0b 7d 06 	movl   $0x8067d0b,0x28(%esp)
 806025d:	08 
 806025e:	e9 a5 c5 ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
 8060263:	90                   	nop
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
 8060264:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060268:	89 3c 24             	mov    %edi,(%esp)
 806026b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806026f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060273:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060277:	b9 6e 22 00 00       	mov    $0x226e,%ecx
 806027c:	e8 97 21 00 00       	call   8062418 <__afl_maybe_log>
 8060281:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060285:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060289:	8b 54 24 04          	mov    0x4(%esp),%edx
 806028d:	8b 3c 24             	mov    (%esp),%edi
 8060290:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060294:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
      quote_string = "\"";
      quote_string_len = 1;
 8060299:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 80602a0:	00 
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
 80602a1:	bd 01 00 00 00       	mov    $0x1,%ebp
      backslash_escapes = true;
      quote_string = "\"";
 80602a6:	c7 44 24 28 0d 7d 06 	movl   $0x8067d0d,0x28(%esp)
 80602ad:	08 
 80602ae:	e9 55 c5 ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
 80602b3:	90                   	nop
 80602b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80602b8:	89 3c 24             	mov    %edi,(%esp)
 80602bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80602bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80602c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80602c7:	b9 48 8c 00 00       	mov    $0x8c48,%ecx
 80602cc:	e8 47 21 00 00       	call   8062418 <__afl_maybe_log>
 80602d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80602d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80602d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80602dd:	8b 3c 24             	mov    (%esp),%edi
 80602e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80602e4:	8b 7c 24 70          	mov    0x70(%esp),%edi
 80602e8:	e9 b2 ce ff ff       	jmp    805d19f <quotearg_buffer_restyled+0xa5f>
 80602ed:	8d 76 00             	lea    0x0(%esi),%esi
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
                      {
                        STORE ('\\');
 80602f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80602f4:	89 3c 24             	mov    %edi,(%esp)
 80602f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80602fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80602ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060303:	b9 e4 b0 00 00       	mov    $0xb0e4,%ecx
 8060308:	e8 0b 21 00 00       	call   8062418 <__afl_maybe_log>
 806030d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060311:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060315:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060319:	8b 3c 24             	mov    (%esp),%edi
 806031c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060320:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8060324:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 8060328:	e9 4f dd ff ff       	jmp    805e07c <quotearg_buffer_restyled+0x193c>
 806032d:	8d 76 00             	lea    0x0(%esi),%esi
 8060330:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060334:	89 3c 24             	mov    %edi,(%esp)
 8060337:	89 54 24 04          	mov    %edx,0x4(%esp)
 806033b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806033f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060343:	b9 3c f4 00 00       	mov    $0xf43c,%ecx
 8060348:	e8 cb 20 00 00       	call   8062418 <__afl_maybe_log>
 806034d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060351:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060355:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060359:	8b 3c 24             	mov    (%esp),%edi
 806035c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060360:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8060364:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 8060368:	e9 5f df ff ff       	jmp    805e2cc <quotearg_buffer_restyled+0x1b8c>
 806036d:	8d 76 00             	lea    0x0(%esi),%esi
 8060370:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060374:	89 3c 24             	mov    %edi,(%esp)
 8060377:	89 54 24 04          	mov    %edx,0x4(%esp)
 806037b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806037f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060383:	b9 5f e9 00 00       	mov    $0xe95f,%ecx
 8060388:	e8 8b 20 00 00       	call   8062418 <__afl_maybe_log>
 806038d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060391:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060395:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060399:	8b 3c 24             	mov    (%esp),%edi
 806039c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80603a0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 80603a4:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 80603a8:	e9 ef e0 ff ff       	jmp    805e49c <quotearg_buffer_restyled+0x1d5c>
 80603ad:	8d 76 00             	lea    0x0(%esi),%esi
                 hard to imagine any locale that would use digits in
                 quotes, and set_custom_quoting is documented not to
                 accept them.  */
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
                {
                  STORE ('0');
 80603b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80603b4:	89 3c 24             	mov    %edi,(%esp)
 80603b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80603bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80603bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80603c3:	b9 bf 22 00 00       	mov    $0x22bf,%ecx
 80603c8:	e8 4b 20 00 00       	call   8062418 <__afl_maybe_log>
 80603cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80603d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80603d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80603d9:	8b 3c 24             	mov    (%esp),%edi
 80603dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80603e0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 80603e4:	c6 04 01 30          	movb   $0x30,(%ecx,%eax,1)
 80603e8:	e9 03 d7 ff ff       	jmp    805daf0 <quotearg_buffer_restyled+0x13b0>
 80603ed:	8d 76 00             	lea    0x0(%esi),%esi
 80603f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80603f4:	89 3c 24             	mov    %edi,(%esp)
 80603f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80603fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80603ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060403:	b9 fa 90 00 00       	mov    $0x90fa,%ecx
 8060408:	e8 0b 20 00 00       	call   8062418 <__afl_maybe_log>
 806040d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060411:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060415:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060419:	8b 3c 24             	mov    (%esp),%edi
 806041c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060420:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 8060424:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8060428:	0f b6 54 24 3b       	movzbl 0x3b(%esp),%edx
                                            argsize - (i + m), &mbstate);
                    if (bytes == 0)
                      break;
                    else if (bytes == (size_t) -1)
                      {
                        printable = false;
 806042d:	c6 44 24 20 00       	movb   $0x0,0x20(%esp)
 8060432:	e9 1a f7 ff ff       	jmp    805fb51 <quotearg_buffer_restyled+0x3411>
 8060437:	90                   	nop
 8060438:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806043c:	89 3c 24             	mov    %edi,(%esp)
 806043f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060443:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060447:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806044b:	b9 dc ab 00 00       	mov    $0xabdc,%ecx
 8060450:	e8 c3 1f 00 00       	call   8062418 <__afl_maybe_log>
 8060455:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060459:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806045d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060461:	8b 3c 24             	mov    (%esp),%edi
 8060464:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060468:	89 d8                	mov    %ebx,%eax
 806046a:	89 f1                	mov    %esi,%ecx
 806046c:	8b 6c 24 30          	mov    0x30(%esp),%ebp
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060470:	39 f8                	cmp    %edi,%eax
 8060472:	0f b6 54 24 3b       	movzbl 0x3b(%esp),%edx
 8060477:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 806047b:	8b 5c 24 3c          	mov    0x3c(%esp),%ebx
 806047f:	0f 83 fb 07 00 00    	jae    8060c80 <quotearg_buffer_restyled+0x4540>
 8060485:	8d 76 00             	lea    0x0(%esi),%esi
 8060488:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806048c:	89 3c 24             	mov    %edi,(%esp)
 806048f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060493:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060497:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806049b:	b9 38 1e 00 00       	mov    $0x1e38,%ecx
 80604a0:	e8 73 1f 00 00       	call   8062418 <__afl_maybe_log>
 80604a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80604a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80604ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80604b1:	8b 3c 24             	mov    (%esp),%edi
 80604b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80604b8:	80 39 00             	cmpb   $0x0,(%ecx)
 80604bb:	0f 84 bf 07 00 00    	je     8060c80 <quotearg_buffer_restyled+0x4540>
 80604c1:	8d 76 00             	lea    0x0(%esi),%esi
 80604c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80604c8:	89 3c 24             	mov    %edi,(%esp)
 80604cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80604cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80604d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80604d7:	b9 8a 2b 00 00       	mov    $0x2b8a,%ecx
 80604dc:	e8 37 1f 00 00       	call   8062418 <__afl_maybe_log>
 80604e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80604e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80604e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80604ed:	8b 3c 24             	mov    (%esp),%edi
 80604f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80604f4:	8b 4c 24 24          	mov    0x24(%esp),%ecx
 80604f8:	f7 d1                	not    %ecx
 80604fa:	29 f1                	sub    %esi,%ecx
 80604fc:	01 f9                	add    %edi,%ecx
 80604fe:	83 e1 07             	and    $0x7,%ecx
 8060501:	0f 84 a1 04 00 00    	je     80609a8 <quotearg_buffer_restyled+0x4268>
 8060507:	90                   	nop
 8060508:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806050c:	89 3c 24             	mov    %edi,(%esp)
 806050f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060513:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060517:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806051b:	b9 ad 41 00 00       	mov    $0x41ad,%ecx
 8060520:	e8 f3 1e 00 00       	call   8062418 <__afl_maybe_log>
 8060525:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060529:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806052d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060531:	8b 3c 24             	mov    (%esp),%edi
 8060534:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8060538:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 806053d:	8b 44 24 24          	mov    0x24(%esp),%eax
 8060541:	01 f0                	add    %esi,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060543:	39 c7                	cmp    %eax,%edi
 8060545:	0f 86 35 07 00 00    	jbe    8060c80 <quotearg_buffer_restyled+0x4540>
 806054b:	90                   	nop
 806054c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060550:	89 3c 24             	mov    %edi,(%esp)
 8060553:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060557:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806055b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806055f:	b9 fe 3e 00 00       	mov    $0x3efe,%ecx
 8060564:	e8 af 1e 00 00       	call   8062418 <__afl_maybe_log>
 8060569:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806056d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060571:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060575:	8b 3c 24             	mov    (%esp),%edi
 8060578:	8d 64 24 10          	lea    0x10(%esp),%esp
 806057c:	8b 44 24 24          	mov    0x24(%esp),%eax
 8060580:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 8060584:	0f 84 f6 06 00 00    	je     8060c80 <quotearg_buffer_restyled+0x4540>
 806058a:	66 90                	xchg   %ax,%ax
 806058c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060590:	89 3c 24             	mov    %edi,(%esp)
 8060593:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060597:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806059b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806059f:	b9 8e 2c 00 00       	mov    $0x2c8e,%ecx
 80605a4:	e8 6f 1e 00 00       	call   8062418 <__afl_maybe_log>
 80605a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80605ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80605b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80605b5:	8b 3c 24             	mov    (%esp),%edi
 80605b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80605bc:	83 f9 01             	cmp    $0x1,%ecx
 80605bf:	0f 84 e3 03 00 00    	je     80609a8 <quotearg_buffer_restyled+0x4268>
 80605c5:	8d 76 00             	lea    0x0(%esi),%esi
 80605c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80605cc:	89 3c 24             	mov    %edi,(%esp)
 80605cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80605d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80605d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80605db:	b9 31 22 00 00       	mov    $0x2231,%ecx
 80605e0:	e8 33 1e 00 00       	call   8062418 <__afl_maybe_log>
 80605e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80605e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80605ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80605f1:	8b 3c 24             	mov    (%esp),%edi
 80605f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80605f8:	83 f9 02             	cmp    $0x2,%ecx
 80605fb:	0f 84 33 03 00 00    	je     8060934 <quotearg_buffer_restyled+0x41f4>
 8060601:	8d 76 00             	lea    0x0(%esi),%esi
 8060604:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060608:	89 3c 24             	mov    %edi,(%esp)
 806060b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806060f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060613:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060617:	b9 6e 8c 00 00       	mov    $0x8c6e,%ecx
 806061c:	e8 f7 1d 00 00       	call   8062418 <__afl_maybe_log>
 8060621:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060625:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060629:	8b 54 24 04          	mov    0x4(%esp),%edx
 806062d:	8b 3c 24             	mov    (%esp),%edi
 8060630:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060634:	83 f9 03             	cmp    $0x3,%ecx
 8060637:	0f 84 83 02 00 00    	je     80608c0 <quotearg_buffer_restyled+0x4180>
 806063d:	8d 76 00             	lea    0x0(%esi),%esi
 8060640:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060644:	89 3c 24             	mov    %edi,(%esp)
 8060647:	89 54 24 04          	mov    %edx,0x4(%esp)
 806064b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806064f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060653:	b9 82 3a 00 00       	mov    $0x3a82,%ecx
 8060658:	e8 bb 1d 00 00       	call   8062418 <__afl_maybe_log>
 806065d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060661:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060665:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060669:	8b 3c 24             	mov    (%esp),%edi
 806066c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060670:	83 f9 04             	cmp    $0x4,%ecx
 8060673:	0f 84 d3 01 00 00    	je     806084c <quotearg_buffer_restyled+0x410c>
 8060679:	8d 76 00             	lea    0x0(%esi),%esi
 806067c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060680:	89 3c 24             	mov    %edi,(%esp)
 8060683:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060687:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806068b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806068f:	b9 1f d3 00 00       	mov    $0xd31f,%ecx
 8060694:	e8 7f 1d 00 00       	call   8062418 <__afl_maybe_log>
 8060699:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806069d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80606a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80606a5:	8b 3c 24             	mov    (%esp),%edi
 80606a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80606ac:	83 f9 05             	cmp    $0x5,%ecx
 80606af:	0f 84 23 01 00 00    	je     80607d8 <quotearg_buffer_restyled+0x4098>
 80606b5:	8d 76 00             	lea    0x0(%esi),%esi
 80606b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80606bc:	89 3c 24             	mov    %edi,(%esp)
 80606bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80606c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80606c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80606cb:	b9 ff 1b 00 00       	mov    $0x1bff,%ecx
 80606d0:	e8 43 1d 00 00       	call   8062418 <__afl_maybe_log>
 80606d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80606d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80606dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80606e1:	8b 3c 24             	mov    (%esp),%edi
 80606e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80606e8:	83 f9 06             	cmp    $0x6,%ecx
 80606eb:	74 77                	je     8060764 <quotearg_buffer_restyled+0x4024>
 80606ed:	8d 76 00             	lea    0x0(%esi),%esi
 80606f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80606f4:	89 3c 24             	mov    %edi,(%esp)
 80606f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80606fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80606ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060703:	b9 24 31 00 00       	mov    $0x3124,%ecx
 8060708:	e8 0b 1d 00 00       	call   8062418 <__afl_maybe_log>
 806070d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060711:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060715:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060719:	8b 3c 24             	mov    (%esp),%edi
 806071c:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8060720:	83 c0 01             	add    $0x1,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060723:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
                          m++;
 8060727:	89 44 24 24          	mov    %eax,0x24(%esp)
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 806072b:	0f 84 4f 05 00 00    	je     8060c80 <quotearg_buffer_restyled+0x4540>
 8060731:	8d 76 00             	lea    0x0(%esi),%esi
 8060734:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060738:	89 3c 24             	mov    %edi,(%esp)
 806073b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806073f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060743:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060747:	b9 60 94 00 00       	mov    $0x9460,%ecx
 806074c:	e8 c7 1c 00 00       	call   8062418 <__afl_maybe_log>
 8060751:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060755:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060759:	8b 54 24 04          	mov    0x4(%esp),%edx
 806075d:	8b 3c 24             	mov    (%esp),%edi
 8060760:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8060764:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060768:	89 3c 24             	mov    %edi,(%esp)
 806076b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806076f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060773:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060777:	b9 aa d8 00 00       	mov    $0xd8aa,%ecx
 806077c:	e8 97 1c 00 00       	call   8062418 <__afl_maybe_log>
 8060781:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060785:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060789:	8b 54 24 04          	mov    0x4(%esp),%edx
 806078d:	8b 3c 24             	mov    (%esp),%edi
 8060790:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060794:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 8060799:	8b 4c 24 24          	mov    0x24(%esp),%ecx
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 806079d:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 80607a1:	0f 84 d9 04 00 00    	je     8060c80 <quotearg_buffer_restyled+0x4540>
 80607a7:	90                   	nop
 80607a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80607ac:	89 3c 24             	mov    %edi,(%esp)
 80607af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80607b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80607b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80607bb:	b9 3f 0a 00 00       	mov    $0xa3f,%ecx
 80607c0:	e8 53 1c 00 00       	call   8062418 <__afl_maybe_log>
 80607c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80607c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80607cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80607d1:	8b 3c 24             	mov    (%esp),%edi
 80607d4:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 80607d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80607dc:	89 3c 24             	mov    %edi,(%esp)
 80607df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80607e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80607e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80607eb:	b9 f4 9f 00 00       	mov    $0x9ff4,%ecx
 80607f0:	e8 23 1c 00 00       	call   8062418 <__afl_maybe_log>
 80607f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80607f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80607fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060801:	8b 3c 24             	mov    (%esp),%edi
 8060804:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060808:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 806080d:	8b 44 24 24          	mov    0x24(%esp),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060811:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 8060815:	0f 84 65 04 00 00    	je     8060c80 <quotearg_buffer_restyled+0x4540>
 806081b:	90                   	nop
 806081c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060820:	89 3c 24             	mov    %edi,(%esp)
 8060823:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060827:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806082b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806082f:	b9 1c 7c 00 00       	mov    $0x7c1c,%ecx
 8060834:	e8 df 1b 00 00       	call   8062418 <__afl_maybe_log>
 8060839:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806083d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060841:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060845:	8b 3c 24             	mov    (%esp),%edi
 8060848:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 806084c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060850:	89 3c 24             	mov    %edi,(%esp)
 8060853:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060857:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806085b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806085f:	b9 41 b3 00 00       	mov    $0xb341,%ecx
 8060864:	e8 af 1b 00 00       	call   8062418 <__afl_maybe_log>
 8060869:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806086d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060871:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060875:	8b 3c 24             	mov    (%esp),%edi
 8060878:	8d 64 24 10          	lea    0x10(%esp),%esp
 806087c:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 8060881:	8b 4c 24 24          	mov    0x24(%esp),%ecx
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060885:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 8060889:	0f 84 f1 03 00 00    	je     8060c80 <quotearg_buffer_restyled+0x4540>
 806088f:	90                   	nop
 8060890:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060894:	89 3c 24             	mov    %edi,(%esp)
 8060897:	89 54 24 04          	mov    %edx,0x4(%esp)
 806089b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806089f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80608a3:	b9 6f 15 00 00       	mov    $0x156f,%ecx
 80608a8:	e8 6b 1b 00 00       	call   8062418 <__afl_maybe_log>
 80608ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80608b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80608b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80608b9:	8b 3c 24             	mov    (%esp),%edi
 80608bc:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 80608c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80608c4:	89 3c 24             	mov    %edi,(%esp)
 80608c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80608cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80608cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80608d3:	b9 a1 b7 00 00       	mov    $0xb7a1,%ecx
 80608d8:	e8 3b 1b 00 00       	call   8062418 <__afl_maybe_log>
 80608dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80608e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80608e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80608e9:	8b 3c 24             	mov    (%esp),%edi
 80608ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80608f0:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 80608f5:	8b 44 24 24          	mov    0x24(%esp),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 80608f9:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 80608fd:	0f 84 7d 03 00 00    	je     8060c80 <quotearg_buffer_restyled+0x4540>
 8060903:	90                   	nop
 8060904:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060908:	89 3c 24             	mov    %edi,(%esp)
 806090b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806090f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060913:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060917:	b9 77 25 00 00       	mov    $0x2577,%ecx
 806091c:	e8 f7 1a 00 00       	call   8062418 <__afl_maybe_log>
 8060921:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060925:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060929:	8b 54 24 04          	mov    0x4(%esp),%edx
 806092d:	8b 3c 24             	mov    (%esp),%edi
 8060930:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8060934:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060938:	89 3c 24             	mov    %edi,(%esp)
 806093b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806093f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060943:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060947:	b9 23 02 00 00       	mov    $0x223,%ecx
 806094c:	e8 c7 1a 00 00       	call   8062418 <__afl_maybe_log>
 8060951:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060955:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060959:	8b 54 24 04          	mov    0x4(%esp),%edx
 806095d:	8b 3c 24             	mov    (%esp),%edi
 8060960:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060964:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 8060969:	8b 4c 24 24          	mov    0x24(%esp),%ecx
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 806096d:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 8060971:	0f 84 09 03 00 00    	je     8060c80 <quotearg_buffer_restyled+0x4540>
 8060977:	90                   	nop
 8060978:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806097c:	89 3c 24             	mov    %edi,(%esp)
 806097f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060983:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060987:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806098b:	b9 4c ce 00 00       	mov    $0xce4c,%ecx
 8060990:	e8 83 1a 00 00       	call   8062418 <__afl_maybe_log>
 8060995:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060999:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806099d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80609a1:	8b 3c 24             	mov    (%esp),%edi
 80609a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80609a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80609ac:	89 3c 24             	mov    %edi,(%esp)
 80609af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80609b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80609b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80609bb:	b9 4a 5e 00 00       	mov    $0x5e4a,%ecx
 80609c0:	e8 53 1a 00 00       	call   8062418 <__afl_maybe_log>
 80609c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80609c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80609cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80609d1:	8b 3c 24             	mov    (%esp),%edi
 80609d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80609d8:	8b 44 24 24          	mov    0x24(%esp),%eax
 80609dc:	89 6c 24 20          	mov    %ebp,0x20(%esp)
                          m++;
 80609e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80609e4:	89 3c 24             	mov    %edi,(%esp)
 80609e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80609eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80609ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80609f3:	b9 6f 3d 00 00       	mov    $0x3d6f,%ecx
 80609f8:	e8 1b 1a 00 00       	call   8062418 <__afl_maybe_log>
 80609fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060a01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060a05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060a09:	8b 3c 24             	mov    (%esp),%edi
 8060a0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060a10:	8d 48 01             	lea    0x1(%eax),%ecx
 8060a13:	8d 2c 0e             	lea    (%esi,%ecx,1),%ebp
 8060a16:	89 c8                	mov    %ecx,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060a18:	39 ef                	cmp    %ebp,%edi
 8060a1a:	0f 86 28 02 00 00    	jbe    8060c48 <quotearg_buffer_restyled+0x4508>
 8060a20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060a24:	89 3c 24             	mov    %edi,(%esp)
 8060a27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060a2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060a2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060a33:	b9 99 cf 00 00       	mov    $0xcf99,%ecx
 8060a38:	e8 db 19 00 00       	call   8062418 <__afl_maybe_log>
 8060a3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060a41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060a45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060a49:	8b 3c 24             	mov    (%esp),%edi
 8060a4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060a50:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 8060a54:	0f 84 ee 01 00 00    	je     8060c48 <quotearg_buffer_restyled+0x4508>
 8060a5a:	66 90                	xchg   %ax,%ax
 8060a5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060a60:	89 3c 24             	mov    %edi,(%esp)
 8060a63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060a67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060a6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060a6f:	b9 6d b5 00 00       	mov    $0xb56d,%ecx
 8060a74:	e8 9f 19 00 00       	call   8062418 <__afl_maybe_log>
 8060a79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060a7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060a81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060a85:	8b 3c 24             	mov    (%esp),%edi
 8060a88:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8060a8c:	83 c0 01             	add    $0x1,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060a8f:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 8060a93:	0f 84 af 01 00 00    	je     8060c48 <quotearg_buffer_restyled+0x4508>
 8060a99:	8d 76 00             	lea    0x0(%esi),%esi
 8060a9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060aa0:	89 3c 24             	mov    %edi,(%esp)
 8060aa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060aa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060aab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060aaf:	b9 aa 69 00 00       	mov    $0x69aa,%ecx
 8060ab4:	e8 5f 19 00 00       	call   8062418 <__afl_maybe_log>
 8060ab9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060abd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060ac1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ac5:	8b 3c 24             	mov    (%esp),%edi
 8060ac8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060acc:	80 7c 0b 02 00       	cmpb   $0x0,0x2(%ebx,%ecx,1)
                          m++;
 8060ad1:	8d 41 02             	lea    0x2(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060ad4:	0f 84 6e 01 00 00    	je     8060c48 <quotearg_buffer_restyled+0x4508>
 8060ada:	66 90                	xchg   %ax,%ax
 8060adc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060ae0:	89 3c 24             	mov    %edi,(%esp)
 8060ae3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060ae7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060aeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060aef:	b9 40 1b 00 00       	mov    $0x1b40,%ecx
 8060af4:	e8 1f 19 00 00       	call   8062418 <__afl_maybe_log>
 8060af9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060afd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060b01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060b05:	8b 3c 24             	mov    (%esp),%edi
 8060b08:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060b0c:	80 7c 0b 03 00       	cmpb   $0x0,0x3(%ebx,%ecx,1)
                          m++;
 8060b11:	8d 41 03             	lea    0x3(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060b14:	0f 84 2e 01 00 00    	je     8060c48 <quotearg_buffer_restyled+0x4508>
 8060b1a:	66 90                	xchg   %ax,%ax
 8060b1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060b20:	89 3c 24             	mov    %edi,(%esp)
 8060b23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060b27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060b2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060b2f:	b9 ec 00 00 00       	mov    $0xec,%ecx
 8060b34:	e8 df 18 00 00       	call   8062418 <__afl_maybe_log>
 8060b39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060b3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060b41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060b45:	8b 3c 24             	mov    (%esp),%edi
 8060b48:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060b4c:	80 7c 0b 04 00       	cmpb   $0x0,0x4(%ebx,%ecx,1)
                          m++;
 8060b51:	8d 41 04             	lea    0x4(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060b54:	0f 84 ee 00 00 00    	je     8060c48 <quotearg_buffer_restyled+0x4508>
 8060b5a:	66 90                	xchg   %ax,%ax
 8060b5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060b60:	89 3c 24             	mov    %edi,(%esp)
 8060b63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060b67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060b6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060b6f:	b9 f8 ab 00 00       	mov    $0xabf8,%ecx
 8060b74:	e8 9f 18 00 00       	call   8062418 <__afl_maybe_log>
 8060b79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060b7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060b81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060b85:	8b 3c 24             	mov    (%esp),%edi
 8060b88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060b8c:	80 7c 0b 05 00       	cmpb   $0x0,0x5(%ebx,%ecx,1)
                          m++;
 8060b91:	8d 41 05             	lea    0x5(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060b94:	0f 84 ae 00 00 00    	je     8060c48 <quotearg_buffer_restyled+0x4508>
 8060b9a:	66 90                	xchg   %ax,%ax
 8060b9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060ba0:	89 3c 24             	mov    %edi,(%esp)
 8060ba3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060ba7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060bab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060baf:	b9 9b db 00 00       	mov    $0xdb9b,%ecx
 8060bb4:	e8 5f 18 00 00       	call   8062418 <__afl_maybe_log>
 8060bb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060bbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060bc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060bc5:	8b 3c 24             	mov    (%esp),%edi
 8060bc8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060bcc:	80 7c 0b 06 00       	cmpb   $0x0,0x6(%ebx,%ecx,1)
                          m++;
 8060bd1:	8d 41 06             	lea    0x6(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060bd4:	74 72                	je     8060c48 <quotearg_buffer_restyled+0x4508>
 8060bd6:	66 90                	xchg   %ax,%ax
 8060bd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060bdc:	89 3c 24             	mov    %edi,(%esp)
 8060bdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060be3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060be7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060beb:	b9 0d 5f 00 00       	mov    $0x5f0d,%ecx
 8060bf0:	e8 23 18 00 00       	call   8062418 <__afl_maybe_log>
 8060bf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060bf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060bfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060c01:	8b 3c 24             	mov    (%esp),%edi
 8060c04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060c08:	80 7c 0b 07 00       	cmpb   $0x0,0x7(%ebx,%ecx,1)
                          m++;
 8060c0d:	8d 41 07             	lea    0x7(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8060c10:	0f 85 ca fd ff ff    	jne    80609e0 <quotearg_buffer_restyled+0x42a0>
 8060c16:	66 90                	xchg   %ax,%ax
 8060c18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060c1c:	89 3c 24             	mov    %edi,(%esp)
 8060c1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060c23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060c27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060c2b:	b9 bb cf 00 00       	mov    $0xcfbb,%ecx
 8060c30:	e8 e3 17 00 00       	call   8062418 <__afl_maybe_log>
 8060c35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060c39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060c3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060c41:	8b 3c 24             	mov    (%esp),%edi
 8060c44:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060c48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060c4c:	89 3c 24             	mov    %edi,(%esp)
 8060c4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060c53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060c57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060c5b:	b9 cc 83 00 00       	mov    $0x83cc,%ecx
 8060c60:	e8 b3 17 00 00       	call   8062418 <__afl_maybe_log>
 8060c65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060c69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060c6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060c71:	8b 3c 24             	mov    (%esp),%edi
 8060c74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060c78:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 8060c7c:	89 44 24 24          	mov    %eax,0x24(%esp)
                        printable = false;
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
 8060c80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060c84:	89 3c 24             	mov    %edi,(%esp)
 8060c87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060c8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060c8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060c93:	b9 e9 c8 00 00       	mov    $0xc8e9,%ecx
 8060c98:	e8 7b 17 00 00       	call   8062418 <__afl_maybe_log>
 8060c9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ca1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060ca5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ca9:	8b 3c 24             	mov    (%esp),%edi
 8060cac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060cb0:	c6 44 24 20 00       	movb   $0x0,0x20(%esp)
 8060cb5:	e9 97 ee ff ff       	jmp    805fb51 <quotearg_buffer_restyled+0x3411>
 8060cba:	66 90                	xchg   %ax,%ax
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
 8060cbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060cc0:	89 3c 24             	mov    %edi,(%esp)
 8060cc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060cc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060ccb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060ccf:	b9 8c 6b 00 00       	mov    $0x6b8c,%ecx
 8060cd4:	e8 3f 17 00 00       	call   8062418 <__afl_maybe_log>
 8060cd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060cdd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060ce1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ce5:	8b 3c 24             	mov    (%esp),%edi
 8060ce8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060cec:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
      quote_string = "\"";
      quote_string_len = 1;
 8060cf1:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8060cf8:	00 
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 8060cf9:	31 ed                	xor    %ebp,%ebp
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
 8060cfb:	c7 44 24 28 0d 7d 06 	movl   $0x8067d0d,0x28(%esp)
 8060d02:	08 
 8060d03:	e9 00 bb ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 8060d08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060d0c:	89 3c 24             	mov    %edi,(%esp)
 8060d0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060d13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060d17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060d1b:	b9 eb f0 00 00       	mov    $0xf0eb,%ecx
 8060d20:	e8 f3 16 00 00       	call   8062418 <__afl_maybe_log>
 8060d25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060d29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060d2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060d31:	8b 3c 24             	mov    (%esp),%edi
 8060d34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060d38:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 8060d3d:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8060d44:	00 
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 8060d45:	31 ed                	xor    %ebp,%ebp
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
 8060d47:	c7 44 24 28 0b 7d 06 	movl   $0x8067d0b,0x28(%esp)
 8060d4e:	08 
 8060d4f:	e9 b4 ba ff ff       	jmp    805c808 <quotearg_buffer_restyled+0xc8>
 8060d54:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8060d5a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

08060d60 <quotearg_n_options>:
   N must be nonnegative.  N is deliberately declared with type "int"
   to allow for future extensions (using negative values).  */
static char *
quotearg_n_options (int n, char const *arg, size_t argsize,
                    struct quoting_options const *options)
{
 8060d60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060d64:	89 3c 24             	mov    %edi,(%esp)
 8060d67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060d6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060d6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060d73:	b9 d9 39 00 00       	mov    $0x39d9,%ecx
 8060d78:	e8 9b 16 00 00       	call   8062418 <__afl_maybe_log>
 8060d7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060d81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060d85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060d89:	8b 3c 24             	mov    (%esp),%edi
 8060d8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060d90:	55                   	push   %ebp
 8060d91:	57                   	push   %edi
 8060d92:	89 c7                	mov    %eax,%edi
 8060d94:	56                   	push   %esi
 8060d95:	53                   	push   %ebx
 8060d96:	83 ec 2c             	sub    $0x2c,%esp
 8060d99:	89 54 24 08          	mov    %edx,0x8(%esp)
 8060d9d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  int e = errno;
 8060da1:	e8 3a 86 fe ff       	call   80493e0 <__errno_location@plt>
 8060da6:	89 44 24 10          	mov    %eax,0x10(%esp)
 8060daa:	8b 00                	mov    (%eax),%eax

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;

  if (n < 0)
 8060dac:	85 ff                	test   %edi,%edi
   N must be nonnegative.  N is deliberately declared with type "int"
   to allow for future extensions (using negative values).  */
static char *
quotearg_n_options (int n, char const *arg, size_t argsize,
                    struct quoting_options const *options)
{
 8060dae:	8b 5c 24 40          	mov    0x40(%esp),%ebx
  int e = errno;

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;
 8060db2:	8b 35 90 b2 06 08    	mov    0x806b290,%esi
   to allow for future extensions (using negative values).  */
static char *
quotearg_n_options (int n, char const *arg, size_t argsize,
                    struct quoting_options const *options)
{
  int e = errno;
 8060db8:	89 44 24 14          	mov    %eax,0x14(%esp)

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;

  if (n < 0)
 8060dbc:	0f 88 28 03 00 00    	js     80610ea <quotearg_n_options+0x38a>
 8060dc2:	66 90                	xchg   %ax,%ax
 8060dc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060dc8:	89 3c 24             	mov    %edi,(%esp)
 8060dcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060dcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060dd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060dd7:	b9 35 4f 00 00       	mov    $0x4f35,%ecx
 8060ddc:	e8 37 16 00 00       	call   8062418 <__afl_maybe_log>
 8060de1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060de5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060de9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ded:	8b 3c 24             	mov    (%esp),%edi
 8060df0:	8d 64 24 10          	lea    0x10(%esp),%esp
    abort ();

  if (nslots <= n0)
 8060df4:	3b 3d 9c b2 06 08    	cmp    0x806b29c,%edi
 8060dfa:	0f 82 1d 01 00 00    	jb     8060f1d <quotearg_n_options+0x1bd>
 8060e00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060e04:	89 3c 24             	mov    %edi,(%esp)
 8060e07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060e0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060e0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060e13:	b9 0e 97 00 00       	mov    $0x970e,%ecx
 8060e18:	e8 fb 15 00 00       	call   8062418 <__afl_maybe_log>
 8060e1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060e21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060e25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060e29:	8b 3c 24             	mov    (%esp),%edi
 8060e2c:	8d 64 24 10          	lea    0x10(%esp),%esp
      /* FIXME: technically, the type of n1 should be 'unsigned int',
         but that evokes an unsuppressible warning from gcc-4.0.1 and
         older.  If gcc ever provides an option to suppress that warning,
         revert to the original type, so that the test in xalloc_oversized
         is once again performed only at compile time.  */
      size_t n1 = n0 + 1;
 8060e30:	8d 6f 01             	lea    0x1(%edi),%ebp
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
 8060e33:	81 fd ff ff ff 1f    	cmp    $0x1fffffff,%ebp
 8060e39:	0f 87 e2 02 00 00    	ja     8061121 <quotearg_n_options+0x3c1>
 8060e3f:	90                   	nop
 8060e40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060e44:	89 3c 24             	mov    %edi,(%esp)
 8060e47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060e4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060e4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060e53:	b9 40 12 00 00       	mov    $0x1240,%ecx
 8060e58:	e8 bb 15 00 00       	call   8062418 <__afl_maybe_log>
 8060e5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060e61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060e65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060e69:	8b 3c 24             	mov    (%esp),%edi
 8060e6c:	8d 64 24 10          	lea    0x10(%esp),%esp
        xalloc_die ();

      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
 8060e70:	81 fe 94 b2 06 08    	cmp    $0x806b294,%esi
 8060e76:	8d 14 ed 00 00 00 00 	lea    0x0(,%ebp,8),%edx
 8060e7d:	0f 84 3d 02 00 00    	je     80610c0 <quotearg_n_options+0x360>
 8060e83:	90                   	nop
 8060e84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060e88:	89 3c 24             	mov    %edi,(%esp)
 8060e8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060e8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060e93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060e97:	b9 0b 36 00 00       	mov    $0x360b,%ecx
 8060e9c:	e8 77 15 00 00       	call   8062418 <__afl_maybe_log>
 8060ea1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ea5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060ea9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ead:	8b 3c 24             	mov    (%esp),%edi
 8060eb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060eb4:	83 ec 08             	sub    $0x8,%esp
 8060eb7:	52                   	push   %edx
 8060eb8:	56                   	push   %esi
 8060eb9:	e8 42 26 00 00       	call   8063500 <xrealloc>
 8060ebe:	83 c4 10             	add    $0x10,%esp
 8060ec1:	89 c6                	mov    %eax,%esi
 8060ec3:	a3 90 b2 06 08       	mov    %eax,0x806b290
      if (preallocated)
        *sv = slotvec0;
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
 8060ec8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060ecc:	89 3c 24             	mov    %edi,(%esp)
 8060ecf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060ed3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060ed7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060edb:	b9 26 5a 00 00       	mov    $0x5a26,%ecx
 8060ee0:	e8 33 15 00 00       	call   8062418 <__afl_maybe_log>
 8060ee5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ee9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060eed:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ef1:	8b 3c 24             	mov    (%esp),%edi
 8060ef4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060ef8:	8b 15 9c b2 06 08    	mov    0x806b29c,%edx
 8060efe:	89 e9                	mov    %ebp,%ecx
 8060f00:	83 ec 04             	sub    $0x4,%esp
 8060f03:	29 d1                	sub    %edx,%ecx
 8060f05:	8d 04 d6             	lea    (%esi,%edx,8),%eax
 8060f08:	c1 e1 03             	shl    $0x3,%ecx
 8060f0b:	51                   	push   %ecx
 8060f0c:	6a 00                	push   $0x0
 8060f0e:	50                   	push   %eax
 8060f0f:	e8 ac 84 fe ff       	call   80493c0 <memset@plt>
      nslots = n1;
 8060f14:	89 2d 9c b2 06 08    	mov    %ebp,0x806b29c
 8060f1a:	83 c4 10             	add    $0x10,%esp
 8060f1d:	8d 76 00             	lea    0x0(%esi),%esi

  {
    size_t size = sv[n].size;
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
 8060f20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060f24:	89 3c 24             	mov    %edi,(%esp)
 8060f27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060f2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060f2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060f33:	b9 3d 2e 00 00       	mov    $0x2e3d,%ecx
 8060f38:	e8 db 14 00 00       	call   8062418 <__afl_maybe_log>
 8060f3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060f41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060f45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060f49:	8b 3c 24             	mov    (%esp),%edi
 8060f4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060f50:	8b 53 04             	mov    0x4(%ebx),%edx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
                                             options->style, flags,
                                             options->quote_these_too,
 8060f53:	8d 4b 08             	lea    0x8(%ebx),%ecx
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
      nslots = n1;
    }

  {
    size_t size = sv[n].size;
 8060f56:	8d 3c fe             	lea    (%esi,%edi,8),%edi
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
 8060f59:	83 ec 08             	sub    $0x8,%esp
                                             options->style, flags,
                                             options->quote_these_too,
 8060f5c:	89 4c 24 24          	mov    %ecx,0x24(%esp)
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
      nslots = n1;
    }

  {
    size_t size = sv[n].size;
 8060f60:	8b 2f                	mov    (%edi),%ebp
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
 8060f62:	83 ca 01             	or     $0x1,%edx
      nslots = n1;
    }

  {
    size_t size = sv[n].size;
    char *val = sv[n].val;
 8060f65:	8b 77 04             	mov    0x4(%edi),%esi
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
 8060f68:	89 54 24 20          	mov    %edx,0x20(%esp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
 8060f6c:	ff 73 2c             	pushl  0x2c(%ebx)
 8060f6f:	ff 73 28             	pushl  0x28(%ebx)
 8060f72:	51                   	push   %ecx
 8060f73:	52                   	push   %edx
 8060f74:	ff 33                	pushl  (%ebx)
 8060f76:	89 ea                	mov    %ebp,%edx
 8060f78:	ff 74 24 28          	pushl  0x28(%esp)
 8060f7c:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 8060f80:	89 f0                	mov    %esi,%eax
 8060f82:	e8 b9 b7 ff ff       	call   805c740 <quotearg_buffer_restyled>
                                             options->style, flags,
                                             options->quote_these_too,
                                             options->left_quote,
                                             options->right_quote);

    if (size <= qsize)
 8060f87:	83 c4 20             	add    $0x20,%esp
 8060f8a:	39 c5                	cmp    %eax,%ebp
 8060f8c:	0f 87 e2 00 00 00    	ja     8061074 <quotearg_n_options+0x314>
 8060f92:	66 90                	xchg   %ax,%ax
 8060f94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060f98:	89 3c 24             	mov    %edi,(%esp)
 8060f9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060f9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060fa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060fa7:	b9 c4 80 00 00       	mov    $0x80c4,%ecx
 8060fac:	e8 67 14 00 00       	call   8062418 <__afl_maybe_log>
 8060fb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060fb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060fb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060fbd:	8b 3c 24             	mov    (%esp),%edi
 8060fc0:	8d 64 24 10          	lea    0x10(%esp),%esp
      {
        sv[n].size = size = qsize + 1;
 8060fc4:	8d 68 01             	lea    0x1(%eax),%ebp
        if (val != slot0)
 8060fc7:	81 fe 80 bc 43 08    	cmp    $0x843bc80,%esi
                                             options->left_quote,
                                             options->right_quote);

    if (size <= qsize)
      {
        sv[n].size = size = qsize + 1;
 8060fcd:	89 2f                	mov    %ebp,(%edi)
        if (val != slot0)
 8060fcf:	74 3f                	je     8061010 <quotearg_n_options+0x2b0>
 8060fd1:	8d 76 00             	lea    0x0(%esi),%esi
 8060fd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060fd8:	89 3c 24             	mov    %edi,(%esp)
 8060fdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060fdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060fe3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060fe7:	b9 72 48 00 00       	mov    $0x4872,%ecx
 8060fec:	e8 27 14 00 00       	call   8062418 <__afl_maybe_log>
 8060ff1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ff5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060ff9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ffd:	8b 3c 24             	mov    (%esp),%edi
 8061000:	8d 64 24 10          	lea    0x10(%esp),%esp
          free (val);
 8061004:	83 ec 0c             	sub    $0xc,%esp
 8061007:	56                   	push   %esi
 8061008:	e8 53 81 fe ff       	call   8049160 <free@plt>
 806100d:	83 c4 10             	add    $0x10,%esp
XALLOC_INLINE char *xcharalloc (size_t n)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1));
XALLOC_INLINE char *
xcharalloc (size_t n)
{
  return XNMALLOC (n, char);
 8061010:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061014:	89 3c 24             	mov    %edi,(%esp)
 8061017:	89 54 24 04          	mov    %edx,0x4(%esp)
 806101b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806101f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061023:	b9 58 2f 00 00       	mov    $0x2f58,%ecx
 8061028:	e8 eb 13 00 00       	call   8062418 <__afl_maybe_log>
 806102d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061031:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061035:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061039:	8b 3c 24             	mov    (%esp),%edi
 806103c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061040:	83 ec 0c             	sub    $0xc,%esp
 8061043:	55                   	push   %ebp
 8061044:	e8 87 22 00 00       	call   80632d0 <xmalloc>
        sv[n].val = val = xcharalloc (size);
 8061049:	89 47 04             	mov    %eax,0x4(%edi)
 806104c:	89 c6                	mov    %eax,%esi
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
 806104e:	58                   	pop    %eax
 806104f:	5a                   	pop    %edx
 8061050:	ff 73 2c             	pushl  0x2c(%ebx)
 8061053:	ff 73 28             	pushl  0x28(%ebx)
 8061056:	89 ea                	mov    %ebp,%edx
 8061058:	ff 74 24 2c          	pushl  0x2c(%esp)
 806105c:	ff 74 24 2c          	pushl  0x2c(%esp)
 8061060:	89 f0                	mov    %esi,%eax
 8061062:	ff 33                	pushl  (%ebx)
 8061064:	ff 74 24 28          	pushl  0x28(%esp)
 8061068:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 806106c:	e8 cf b6 ff ff       	call   805c740 <quotearg_buffer_restyled>
 8061071:	83 c4 20             	add    $0x20,%esp
                                  flags, options->quote_these_too,
                                  options->left_quote,
                                  options->right_quote);
      }

    errno = e;
 8061074:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061078:	89 3c 24             	mov    %edi,(%esp)
 806107b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806107f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061083:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061087:	b9 b2 80 00 00       	mov    $0x80b2,%ecx
 806108c:	e8 87 13 00 00       	call   8062418 <__afl_maybe_log>
 8061091:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061095:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061099:	8b 54 24 04          	mov    0x4(%esp),%edx
 806109d:	8b 3c 24             	mov    (%esp),%edi
 80610a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80610a4:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 80610a8:	8b 44 24 14          	mov    0x14(%esp),%eax
 80610ac:	89 03                	mov    %eax,(%ebx)
    return val;
  }
}
 80610ae:	83 c4 2c             	add    $0x2c,%esp
 80610b1:	89 f0                	mov    %esi,%eax
 80610b3:	5b                   	pop    %ebx
 80610b4:	5e                   	pop    %esi
 80610b5:	5f                   	pop    %edi
 80610b6:	5d                   	pop    %ebp
 80610b7:	c3                   	ret    
 80610b8:	90                   	nop
 80610b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
        xalloc_die ();

      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
 80610c0:	83 ec 08             	sub    $0x8,%esp
 80610c3:	52                   	push   %edx
 80610c4:	6a 00                	push   $0x0
 80610c6:	e8 35 24 00 00       	call   8063500 <xrealloc>
      if (preallocated)
        *sv = slotvec0;
 80610cb:	8b 0d 94 b2 06 08    	mov    0x806b294,%ecx
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
        xalloc_die ();

      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
 80610d1:	89 c6                	mov    %eax,%esi
 80610d3:	a3 90 b2 06 08       	mov    %eax,0x806b290
      if (preallocated)
        *sv = slotvec0;
 80610d8:	a1 98 b2 06 08       	mov    0x806b298,%eax
 80610dd:	83 c4 10             	add    $0x10,%esp
 80610e0:	89 0e                	mov    %ecx,(%esi)
 80610e2:	89 46 04             	mov    %eax,0x4(%esi)
 80610e5:	e9 de fd ff ff       	jmp    8060ec8 <quotearg_n_options+0x168>
 80610ea:	66 90                	xchg   %ax,%ax

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;

  if (n < 0)
    abort ();
 80610ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80610f0:	89 3c 24             	mov    %edi,(%esp)
 80610f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80610f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80610fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80610ff:	b9 2e f5 00 00       	mov    $0xf52e,%ecx
 8061104:	e8 0f 13 00 00       	call   8062418 <__afl_maybe_log>
 8061109:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806110d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061111:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061115:	8b 3c 24             	mov    (%esp),%edi
 8061118:	8d 64 24 10          	lea    0x10(%esp),%esp
 806111c:	e8 bf 83 fe ff       	call   80494e0 <abort@plt>
 8061121:	8d 76 00             	lea    0x0(%esi),%esi
         is once again performed only at compile time.  */
      size_t n1 = n0 + 1;
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
        xalloc_die ();
 8061124:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061128:	89 3c 24             	mov    %edi,(%esp)
 806112b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806112f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061133:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061137:	b9 9f c7 00 00       	mov    $0xc79f,%ecx
 806113c:	e8 d7 12 00 00       	call   8062418 <__afl_maybe_log>
 8061141:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061145:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061149:	8b 54 24 04          	mov    0x4(%esp),%edx
 806114d:	8b 3c 24             	mov    (%esp),%edi
 8061150:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061154:	e8 57 2c 00 00       	call   8063db0 <xalloc_die>
 8061159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08061160 <clone_quoting_options>:
/* Allocate a new set of quoting options, with contents initially identical
   to O if O is not null, or to the default if O is null.
   It is the caller's responsibility to free the result.  */
struct quoting_options *
clone_quoting_options (struct quoting_options *o)
{
 8061160:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061164:	89 3c 24             	mov    %edi,(%esp)
 8061167:	89 54 24 04          	mov    %edx,0x4(%esp)
 806116b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806116f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061173:	b9 17 be 00 00       	mov    $0xbe17,%ecx
 8061178:	e8 9b 12 00 00       	call   8062418 <__afl_maybe_log>
 806117d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061181:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061185:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061189:	8b 3c 24             	mov    (%esp),%edi
 806118c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061190:	57                   	push   %edi
 8061191:	56                   	push   %esi
 8061192:	53                   	push   %ebx
 8061193:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  int e = errno;
 8061197:	e8 44 82 fe ff       	call   80493e0 <__errno_location@plt>
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
 806119c:	85 db                	test   %ebx,%ebx
   to O if O is not null, or to the default if O is null.
   It is the caller's responsibility to free the result.  */
struct quoting_options *
clone_quoting_options (struct quoting_options *o)
{
  int e = errno;
 806119e:	8b 38                	mov    (%eax),%edi
 80611a0:	89 c6                	mov    %eax,%esi
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
 80611a2:	b8 80 bd 43 08       	mov    $0x843bd80,%eax
 80611a7:	0f 44 d8             	cmove  %eax,%ebx
 80611aa:	83 ec 08             	sub    $0x8,%esp
 80611ad:	6a 30                	push   $0x30
 80611af:	53                   	push   %ebx
 80611b0:	e8 fb 29 00 00       	call   8063bb0 <xmemdup>
                                       sizeof *o);
  errno = e;
  return p;
 80611b5:	83 c4 10             	add    $0x10,%esp
clone_quoting_options (struct quoting_options *o)
{
  int e = errno;
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
                                       sizeof *o);
  errno = e;
 80611b8:	89 3e                	mov    %edi,(%esi)
  return p;
}
 80611ba:	5b                   	pop    %ebx
 80611bb:	5e                   	pop    %esi
 80611bc:	5f                   	pop    %edi
 80611bd:	c3                   	ret    
 80611be:	66 90                	xchg   %ax,%ax

080611c0 <get_quoting_style>:

/* Get the value of O's quoting style.  If O is null, use the default.  */
enum quoting_style
get_quoting_style (struct quoting_options *o)
{
 80611c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80611c4:	89 3c 24             	mov    %edi,(%esp)
 80611c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80611cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80611cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80611d3:	b9 44 eb 00 00       	mov    $0xeb44,%ecx
 80611d8:	e8 3b 12 00 00       	call   8062418 <__afl_maybe_log>
 80611dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80611e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80611e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80611e9:	8b 3c 24             	mov    (%esp),%edi
 80611ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80611f0:	8b 44 24 04          	mov    0x4(%esp),%eax
  return (o ? o : &default_quoting_options)->style;
 80611f4:	ba 80 bd 43 08       	mov    $0x843bd80,%edx
 80611f9:	85 c0                	test   %eax,%eax
 80611fb:	0f 44 c2             	cmove  %edx,%eax
 80611fe:	8b 00                	mov    (%eax),%eax
}
 8061200:	c3                   	ret    
 8061201:	eb 0d                	jmp    8061210 <set_quoting_style>
 8061203:	90                   	nop
 8061204:	90                   	nop
 8061205:	90                   	nop
 8061206:	90                   	nop
 8061207:	90                   	nop
 8061208:	90                   	nop
 8061209:	90                   	nop
 806120a:	90                   	nop
 806120b:	90                   	nop
 806120c:	90                   	nop
 806120d:	90                   	nop
 806120e:	90                   	nop
 806120f:	90                   	nop

08061210 <set_quoting_style>:

/* In O (or in the default if O is null),
   set the value of the quoting style to S.  */
void
set_quoting_style (struct quoting_options *o, enum quoting_style s)
{
 8061210:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061214:	89 3c 24             	mov    %edi,(%esp)
 8061217:	89 54 24 04          	mov    %edx,0x4(%esp)
 806121b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806121f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061223:	b9 2c 33 00 00       	mov    $0x332c,%ecx
 8061228:	e8 eb 11 00 00       	call   8062418 <__afl_maybe_log>
 806122d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061231:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061235:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061239:	8b 3c 24             	mov    (%esp),%edi
 806123c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061240:	8b 44 24 04          	mov    0x4(%esp),%eax
  (o ? o : &default_quoting_options)->style = s;
 8061244:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061248:	ba 80 bd 43 08       	mov    $0x843bd80,%edx
 806124d:	85 c0                	test   %eax,%eax
 806124f:	0f 44 c2             	cmove  %edx,%eax
 8061252:	89 08                	mov    %ecx,(%eax)
 8061254:	c3                   	ret    
 8061255:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8061259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08061260 <set_char_quoting>:
   Return the old value.  Currently, the only values defined for I are
   0 (the default) and 1 (which means to quote the character even if
   it would not otherwise be quoted).  */
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
 8061260:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061264:	89 3c 24             	mov    %edi,(%esp)
 8061267:	89 54 24 04          	mov    %edx,0x4(%esp)
 806126b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806126f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061273:	b9 24 89 00 00       	mov    $0x8924,%ecx
 8061278:	e8 9b 11 00 00       	call   8062418 <__afl_maybe_log>
 806127d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061281:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061285:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061289:	8b 3c 24             	mov    (%esp),%edi
 806128c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061290:	56                   	push   %esi
 8061291:	53                   	push   %ebx
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 8061292:	b9 80 bd 43 08       	mov    $0x843bd80,%ecx
   Return the old value.  Currently, the only values defined for I are
   0 (the default) and 1 (which means to quote the character even if
   it would not otherwise be quoted).  */
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
 8061297:	8b 54 24 0c          	mov    0xc(%esp),%edx
 806129b:	8b 44 24 10          	mov    0x10(%esp),%eax
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 806129f:	85 d2                	test   %edx,%edx
 80612a1:	0f 44 d1             	cmove  %ecx,%edx
  int shift = uc % INT_BITS;
 80612a4:	89 c1                	mov    %eax,%ecx
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 80612a6:	c0 e8 05             	shr    $0x5,%al
 80612a9:	0f b6 d8             	movzbl %al,%ebx
  int shift = uc % INT_BITS;
 80612ac:	83 e1 1f             	and    $0x1f,%ecx
 80612af:	8d 34 9a             	lea    (%edx,%ebx,4),%esi
  int r = (*p >> shift) & 1;
  *p ^= ((i & 1) ^ r) << shift;
 80612b2:	8b 54 24 14          	mov    0x14(%esp),%edx
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  int shift = uc % INT_BITS;
  int r = (*p >> shift) & 1;
 80612b6:	8b 5e 08             	mov    0x8(%esi),%ebx
 80612b9:	89 d8                	mov    %ebx,%eax
 80612bb:	d3 e8                	shr    %cl,%eax
  *p ^= ((i & 1) ^ r) << shift;
 80612bd:	31 c2                	xor    %eax,%edx
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  int shift = uc % INT_BITS;
  int r = (*p >> shift) & 1;
 80612bf:	83 e0 01             	and    $0x1,%eax
  *p ^= ((i & 1) ^ r) << shift;
 80612c2:	83 e2 01             	and    $0x1,%edx
 80612c5:	d3 e2                	shl    %cl,%edx
 80612c7:	31 da                	xor    %ebx,%edx
 80612c9:	89 56 08             	mov    %edx,0x8(%esi)
  return r;
}
 80612cc:	5b                   	pop    %ebx
 80612cd:	5e                   	pop    %esi
 80612ce:	c3                   	ret    
 80612cf:	90                   	nop

080612d0 <set_quoting_flags>:
   set the value of the quoting options flag to I, which can be a
   bitwise combination of enum quoting_flags, or 0 for default
   behavior.  Return the old value.  */
int
set_quoting_flags (struct quoting_options *o, int i)
{
 80612d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80612d4:	89 3c 24             	mov    %edi,(%esp)
 80612d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80612db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80612df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80612e3:	b9 2f dc 00 00       	mov    $0xdc2f,%ecx
 80612e8:	e8 2b 11 00 00       	call   8062418 <__afl_maybe_log>
 80612ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80612f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80612f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80612f9:	8b 3c 24             	mov    (%esp),%edi
 80612fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061300:	8b 44 24 04          	mov    0x4(%esp),%eax
  int r;
  if (!o)
    o = &default_quoting_options;
  r = o->flags;
  o->flags = i;
 8061304:	8b 4c 24 08          	mov    0x8(%esp),%ecx
int
set_quoting_flags (struct quoting_options *o, int i)
{
  int r;
  if (!o)
    o = &default_quoting_options;
 8061308:	ba 80 bd 43 08       	mov    $0x843bd80,%edx
 806130d:	85 c0                	test   %eax,%eax
 806130f:	0f 45 d0             	cmovne %eax,%edx
  r = o->flags;
 8061312:	8b 42 04             	mov    0x4(%edx),%eax
  o->flags = i;
 8061315:	89 4a 04             	mov    %ecx,0x4(%edx)
  return r;
}
 8061318:	c3                   	ret    
 8061319:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08061320 <set_custom_quoting>:

void
set_custom_quoting (struct quoting_options *o,
                    char const *left_quote, char const *right_quote)
{
 8061320:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061324:	89 3c 24             	mov    %edi,(%esp)
 8061327:	89 54 24 04          	mov    %edx,0x4(%esp)
 806132b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806132f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061333:	b9 05 6d 00 00       	mov    $0x6d05,%ecx
 8061338:	e8 db 10 00 00       	call   8062418 <__afl_maybe_log>
 806133d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061341:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061345:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061349:	8b 3c 24             	mov    (%esp),%edi
 806134c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061350:	53                   	push   %ebx
  if (!o)
    o = &default_quoting_options;
 8061351:	bb 80 bd 43 08       	mov    $0x843bd80,%ebx
}

void
set_custom_quoting (struct quoting_options *o,
                    char const *left_quote, char const *right_quote)
{
 8061356:	83 ec 08             	sub    $0x8,%esp
 8061359:	8b 44 24 10          	mov    0x10(%esp),%eax
 806135d:	8b 54 24 14          	mov    0x14(%esp),%edx
 8061361:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  if (!o)
    o = &default_quoting_options;
 8061365:	85 c0                	test   %eax,%eax
 8061367:	0f 44 c3             	cmove  %ebx,%eax
  o->style = custom_quoting_style;
  if (!left_quote || !right_quote)
 806136a:	85 d2                	test   %edx,%edx
set_custom_quoting (struct quoting_options *o,
                    char const *left_quote, char const *right_quote)
{
  if (!o)
    o = &default_quoting_options;
  o->style = custom_quoting_style;
 806136c:	c7 00 08 00 00 00    	movl   $0x8,(%eax)
  if (!left_quote || !right_quote)
 8061372:	74 6f                	je     80613e3 <set_custom_quoting+0xc3>
 8061374:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061378:	89 3c 24             	mov    %edi,(%esp)
 806137b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806137f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061383:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061387:	b9 64 2b 00 00       	mov    $0x2b64,%ecx
 806138c:	e8 87 10 00 00       	call   8062418 <__afl_maybe_log>
 8061391:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061395:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061399:	8b 54 24 04          	mov    0x4(%esp),%edx
 806139d:	8b 3c 24             	mov    (%esp),%edi
 80613a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80613a4:	85 c9                	test   %ecx,%ecx
 80613a6:	74 3b                	je     80613e3 <set_custom_quoting+0xc3>
 80613a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80613ac:	89 3c 24             	mov    %edi,(%esp)
 80613af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80613b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80613b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80613bb:	b9 d1 79 00 00       	mov    $0x79d1,%ecx
 80613c0:	e8 53 10 00 00       	call   8062418 <__afl_maybe_log>
 80613c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80613c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80613cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80613d1:	8b 3c 24             	mov    (%esp),%edi
 80613d4:	8d 64 24 10          	lea    0x10(%esp),%esp
    abort ();
  o->left_quote = left_quote;
 80613d8:	89 50 28             	mov    %edx,0x28(%eax)
  o->right_quote = right_quote;
 80613db:	89 48 2c             	mov    %ecx,0x2c(%eax)
}
 80613de:	83 c4 08             	add    $0x8,%esp
 80613e1:	5b                   	pop    %ebx
 80613e2:	c3                   	ret    
 80613e3:	90                   	nop
{
  if (!o)
    o = &default_quoting_options;
  o->style = custom_quoting_style;
  if (!left_quote || !right_quote)
    abort ();
 80613e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80613e8:	89 3c 24             	mov    %edi,(%esp)
 80613eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80613ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80613f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80613f7:	b9 ed c1 00 00       	mov    $0xc1ed,%ecx
 80613fc:	e8 17 10 00 00       	call   8062418 <__afl_maybe_log>
 8061401:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061405:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061409:	8b 54 24 04          	mov    0x4(%esp),%edx
 806140d:	8b 3c 24             	mov    (%esp),%edi
 8061410:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061414:	e8 c7 80 fe ff       	call   80494e0 <abort@plt>
 8061419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08061420 <quotearg_buffer>:
   ARGSIZE.  */
size_t
quotearg_buffer (char *buffer, size_t buffersize,
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
 8061420:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061424:	89 3c 24             	mov    %edi,(%esp)
 8061427:	89 54 24 04          	mov    %edx,0x4(%esp)
 806142b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806142f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061433:	b9 4e 6a 00 00       	mov    $0x6a4e,%ecx
 8061438:	e8 db 0f 00 00       	call   8062418 <__afl_maybe_log>
 806143d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061441:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061445:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061449:	8b 3c 24             	mov    (%esp),%edi
 806144c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061450:	57                   	push   %edi
 8061451:	56                   	push   %esi
 8061452:	53                   	push   %ebx
 8061453:	8b 44 24 20          	mov    0x20(%esp),%eax
  struct quoting_options const *p = o ? o : &default_quoting_options;
 8061457:	bb 80 bd 43 08       	mov    $0x843bd80,%ebx
 806145c:	85 c0                	test   %eax,%eax
 806145e:	0f 45 d8             	cmovne %eax,%ebx
  int e = errno;
 8061461:	e8 7a 7f fe ff       	call   80493e0 <__errno_location@plt>
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                       p->style, p->flags, p->quote_these_too,
 8061466:	8d 53 08             	lea    0x8(%ebx),%edx
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
 8061469:	83 ec 08             	sub    $0x8,%esp
quotearg_buffer (char *buffer, size_t buffersize,
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 806146c:	8b 38                	mov    (%eax),%edi
 806146e:	89 c6                	mov    %eax,%esi
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
 8061470:	ff 73 2c             	pushl  0x2c(%ebx)
 8061473:	ff 73 28             	pushl  0x28(%ebx)
 8061476:	52                   	push   %edx
 8061477:	ff 73 04             	pushl  0x4(%ebx)
 806147a:	ff 33                	pushl  (%ebx)
 806147c:	ff 74 24 38          	pushl  0x38(%esp)
 8061480:	8b 4c 24 38          	mov    0x38(%esp),%ecx
 8061484:	8b 54 24 34          	mov    0x34(%esp),%edx
 8061488:	8b 44 24 30          	mov    0x30(%esp),%eax
 806148c:	e8 af b2 ff ff       	call   805c740 <quotearg_buffer_restyled>
                                       p->style, p->flags, p->quote_these_too,
                                       p->left_quote, p->right_quote);
  errno = e;
  return r;
 8061491:	83 c4 20             	add    $0x20,%esp
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                       p->style, p->flags, p->quote_these_too,
                                       p->left_quote, p->right_quote);
  errno = e;
 8061494:	89 3e                	mov    %edi,(%esi)
  return r;
}
 8061496:	5b                   	pop    %ebx
 8061497:	5e                   	pop    %esi
 8061498:	5f                   	pop    %edi
 8061499:	c3                   	ret    
 806149a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080614a0 <quotearg_alloc_mem>:
   NULL, and set_quoting_flags has not set the null byte elision
   flag.  */
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
 80614a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80614a4:	89 3c 24             	mov    %edi,(%esp)
 80614a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80614ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80614af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80614b3:	b9 0e e2 00 00       	mov    $0xe20e,%ecx
 80614b8:	e8 5b 0f 00 00       	call   8062418 <__afl_maybe_log>
 80614bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80614c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80614c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80614c9:	8b 3c 24             	mov    (%esp),%edi
 80614cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80614d0:	55                   	push   %ebp
 80614d1:	57                   	push   %edi
 80614d2:	56                   	push   %esi
 80614d3:	53                   	push   %ebx
  struct quoting_options const *p = o ? o : &default_quoting_options;
 80614d4:	bb 80 bd 43 08       	mov    $0x843bd80,%ebx
   NULL, and set_quoting_flags has not set the null byte elision
   flag.  */
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
 80614d9:	83 ec 1c             	sub    $0x1c,%esp
 80614dc:	8b 44 24 3c          	mov    0x3c(%esp),%eax
  struct quoting_options const *p = o ? o : &default_quoting_options;
 80614e0:	85 c0                	test   %eax,%eax
 80614e2:	0f 45 d8             	cmovne %eax,%ebx
  int e = errno;
 80614e5:	e8 f6 7e fe ff       	call   80493e0 <__errno_location@plt>
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 80614ea:	8b 74 24 38          	mov    0x38(%esp),%esi
 80614ee:	31 c9                	xor    %ecx,%ecx
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 80614f0:	8b 10                	mov    (%eax),%edx
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
                                             flags, p->quote_these_too,
 80614f2:	8d 6b 08             	lea    0x8(%ebx),%ebp
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 80614f5:	89 c7                	mov    %eax,%edi
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 80614f7:	85 f6                	test   %esi,%esi
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 80614f9:	89 14 24             	mov    %edx,(%esp)
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 80614fc:	0f 94 c1             	sete   %cl
 80614ff:	0b 4b 04             	or     0x4(%ebx),%ecx
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
 8061502:	83 ec 08             	sub    $0x8,%esp
 8061505:	ff 73 2c             	pushl  0x2c(%ebx)
 8061508:	ff 73 28             	pushl  0x28(%ebx)
 806150b:	31 d2                	xor    %edx,%edx
 806150d:	55                   	push   %ebp
 806150e:	31 c0                	xor    %eax,%eax
 8061510:	51                   	push   %ecx
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 8061511:	89 ce                	mov    %ecx,%esi
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
 8061513:	ff 33                	pushl  (%ebx)
 8061515:	ff 74 24 50          	pushl  0x50(%esp)
 8061519:	8b 4c 24 50          	mov    0x50(%esp),%ecx
 806151d:	e8 1e b2 ff ff       	call   805c740 <quotearg_buffer_restyled>
 8061522:	89 44 24 2c          	mov    %eax,0x2c(%esp)
 8061526:	8d 40 01             	lea    0x1(%eax),%eax
 8061529:	83 c4 14             	add    $0x14,%esp
 806152c:	50                   	push   %eax
 806152d:	89 44 24 18          	mov    %eax,0x18(%esp)
 8061531:	e8 9a 1d 00 00       	call   80632d0 <xmalloc>
 8061536:	89 44 24 14          	mov    %eax,0x14(%esp)
                                             flags, p->quote_these_too,
                                             p->left_quote,
                                             p->right_quote) + 1;
  char *buf = xcharalloc (bufsize);
  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,
 806153a:	59                   	pop    %ecx
 806153b:	5a                   	pop    %edx
 806153c:	ff 73 2c             	pushl  0x2c(%ebx)
 806153f:	ff 73 28             	pushl  0x28(%ebx)
 8061542:	55                   	push   %ebp
 8061543:	56                   	push   %esi
 8061544:	ff 33                	pushl  (%ebx)
 8061546:	ff 74 24 50          	pushl  0x50(%esp)
 806154a:	8b 4c 24 50          	mov    0x50(%esp),%ecx
 806154e:	8b 54 24 28          	mov    0x28(%esp),%edx
 8061552:	e8 e9 b1 ff ff       	call   805c740 <quotearg_buffer_restyled>
                            p->quote_these_too,
                            p->left_quote, p->right_quote);
  errno = e;
 8061557:	8b 5c 24 20          	mov    0x20(%esp),%ebx
  if (size)
 806155b:	83 c4 20             	add    $0x20,%esp
                                             p->right_quote) + 1;
  char *buf = xcharalloc (bufsize);
  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,
                            p->quote_these_too,
                            p->left_quote, p->right_quote);
  errno = e;
 806155e:	89 1f                	mov    %ebx,(%edi)
  if (size)
 8061560:	8b 7c 24 38          	mov    0x38(%esp),%edi
 8061564:	85 ff                	test   %edi,%edi
 8061566:	74 3a                	je     80615a2 <quotearg_alloc_mem+0x102>
 8061568:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806156c:	89 3c 24             	mov    %edi,(%esp)
 806156f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061573:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061577:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806157b:	b9 74 c4 00 00       	mov    $0xc474,%ecx
 8061580:	e8 93 0e 00 00       	call   8062418 <__afl_maybe_log>
 8061585:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061589:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806158d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061591:	8b 3c 24             	mov    (%esp),%edi
 8061594:	8d 64 24 10          	lea    0x10(%esp),%esp
    *size = bufsize - 1;
 8061598:	8b 54 24 38          	mov    0x38(%esp),%edx
 806159c:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 80615a0:	89 0a                	mov    %ecx,(%edx)
 80615a2:	66 90                	xchg   %ax,%ax
  return buf;
}
 80615a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80615a8:	89 3c 24             	mov    %edi,(%esp)
 80615ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80615af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80615b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80615b7:	b9 28 03 00 00       	mov    $0x328,%ecx
 80615bc:	e8 57 0e 00 00       	call   8062418 <__afl_maybe_log>
 80615c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80615c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80615c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80615cd:	8b 3c 24             	mov    (%esp),%edi
 80615d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80615d4:	8b 44 24 04          	mov    0x4(%esp),%eax
 80615d8:	83 c4 1c             	add    $0x1c,%esp
 80615db:	5b                   	pop    %ebx
 80615dc:	5e                   	pop    %esi
 80615dd:	5f                   	pop    %edi
 80615de:	5d                   	pop    %ebp
 80615df:	c3                   	ret    

080615e0 <quotearg_alloc>:

/* Equivalent to quotearg_alloc (ARG, ARGSIZE, NULL, O).  */
char *
quotearg_alloc (char const *arg, size_t argsize,
                struct quoting_options const *o)
{
 80615e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80615e4:	89 3c 24             	mov    %edi,(%esp)
 80615e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80615eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80615ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80615f3:	b9 ef 60 00 00       	mov    $0x60ef,%ecx
 80615f8:	e8 1b 0e 00 00       	call   8062418 <__afl_maybe_log>
 80615fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061601:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061605:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061609:	8b 3c 24             	mov    (%esp),%edi
 806160c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061610:	83 ec 0c             	sub    $0xc,%esp
  return quotearg_alloc_mem (arg, argsize, NULL, o);
 8061613:	ff 74 24 18          	pushl  0x18(%esp)
 8061617:	6a 00                	push   $0x0
 8061619:	ff 74 24 1c          	pushl  0x1c(%esp)
 806161d:	ff 74 24 1c          	pushl  0x1c(%esp)
 8061621:	e8 7a fe ff ff       	call   80614a0 <quotearg_alloc_mem>
}
 8061626:	83 c4 1c             	add    $0x1c,%esp
 8061629:	c3                   	ret    
 806162a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08061630 <quotearg_free>:
static struct slotvec slotvec0 = {sizeof slot0, slot0};
static struct slotvec *slotvec = &slotvec0;

void
quotearg_free (void)
{
 8061630:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061634:	89 3c 24             	mov    %edi,(%esp)
 8061637:	89 54 24 04          	mov    %edx,0x4(%esp)
 806163b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806163f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061643:	b9 ab e2 00 00       	mov    $0xe2ab,%ecx
 8061648:	e8 cb 0d 00 00       	call   8062418 <__afl_maybe_log>
 806164d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061651:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061655:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061659:	8b 3c 24             	mov    (%esp),%edi
 806165c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061660:	55                   	push   %ebp
 8061661:	57                   	push   %edi
 8061662:	56                   	push   %esi
 8061663:	53                   	push   %ebx
 8061664:	83 ec 0c             	sub    $0xc,%esp
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061667:	8b 2d 9c b2 06 08    	mov    0x806b29c,%ebp
static struct slotvec *slotvec = &slotvec0;

void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
 806166d:	8b 35 90 b2 06 08    	mov    0x806b290,%esi
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061673:	83 fd 01             	cmp    $0x1,%ebp
 8061676:	0f 86 c4 04 00 00    	jbe    8061b40 <quotearg_free+0x510>
 806167c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061680:	89 3c 24             	mov    %edi,(%esp)
 8061683:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061687:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806168b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806168f:	b9 61 a9 00 00       	mov    $0xa961,%ecx
 8061694:	e8 7f 0d 00 00       	call   8062418 <__afl_maybe_log>
 8061699:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806169d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80616a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80616a5:	8b 3c 24             	mov    (%esp),%edi
 80616a8:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
 80616ac:	83 ec 0c             	sub    $0xc,%esp
 80616af:	8d 7d fe             	lea    -0x2(%ebp),%edi
 80616b2:	ff 76 0c             	pushl  0xc(%esi)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80616b5:	bb 02 00 00 00       	mov    $0x2,%ebx
    free (sv[i].val);
 80616ba:	e8 a1 7a fe ff       	call   8049160 <free@plt>
 80616bf:	83 e7 07             	and    $0x7,%edi
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80616c2:	83 c4 10             	add    $0x10,%esp
 80616c5:	39 eb                	cmp    %ebp,%ebx
 80616c7:	0f 84 73 04 00 00    	je     8061b40 <quotearg_free+0x510>
 80616cd:	8d 76 00             	lea    0x0(%esi),%esi
 80616d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80616d4:	89 3c 24             	mov    %edi,(%esp)
 80616d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80616db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80616df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80616e3:	b9 3d 86 00 00       	mov    $0x863d,%ecx
 80616e8:	e8 2b 0d 00 00       	call   8062418 <__afl_maybe_log>
 80616ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80616f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80616f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80616f9:	8b 3c 24             	mov    (%esp),%edi
 80616fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061700:	85 ff                	test   %edi,%edi
 8061702:	0f 84 78 03 00 00    	je     8061a80 <quotearg_free+0x450>
 8061708:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806170c:	89 3c 24             	mov    %edi,(%esp)
 806170f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061713:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061717:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806171b:	b9 02 85 00 00       	mov    $0x8502,%ecx
 8061720:	e8 f3 0c 00 00       	call   8062418 <__afl_maybe_log>
 8061725:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061729:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806172d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061731:	8b 3c 24             	mov    (%esp),%edi
 8061734:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061738:	83 ff 01             	cmp    $0x1,%edi
 806173b:	0f 84 c1 02 00 00    	je     8061a02 <quotearg_free+0x3d2>
 8061741:	8d 76 00             	lea    0x0(%esi),%esi
 8061744:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061748:	89 3c 24             	mov    %edi,(%esp)
 806174b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806174f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061753:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061757:	b9 2b 5a 00 00       	mov    $0x5a2b,%ecx
 806175c:	e8 b7 0c 00 00       	call   8062418 <__afl_maybe_log>
 8061761:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061765:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061769:	8b 54 24 04          	mov    0x4(%esp),%edx
 806176d:	8b 3c 24             	mov    (%esp),%edi
 8061770:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061774:	83 ff 02             	cmp    $0x2,%edi
 8061777:	0f 84 41 02 00 00    	je     80619be <quotearg_free+0x38e>
 806177d:	8d 76 00             	lea    0x0(%esi),%esi
 8061780:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061784:	89 3c 24             	mov    %edi,(%esp)
 8061787:	89 54 24 04          	mov    %edx,0x4(%esp)
 806178b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806178f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061793:	b9 74 86 00 00       	mov    $0x8674,%ecx
 8061798:	e8 7b 0c 00 00       	call   8062418 <__afl_maybe_log>
 806179d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80617a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80617a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80617a9:	8b 3c 24             	mov    (%esp),%edi
 80617ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80617b0:	83 ff 03             	cmp    $0x3,%edi
 80617b3:	0f 84 c1 01 00 00    	je     806197a <quotearg_free+0x34a>
 80617b9:	8d 76 00             	lea    0x0(%esi),%esi
 80617bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80617c0:	89 3c 24             	mov    %edi,(%esp)
 80617c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80617c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80617cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80617cf:	b9 48 38 00 00       	mov    $0x3848,%ecx
 80617d4:	e8 3f 0c 00 00       	call   8062418 <__afl_maybe_log>
 80617d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80617dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80617e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80617e5:	8b 3c 24             	mov    (%esp),%edi
 80617e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80617ec:	83 ff 04             	cmp    $0x4,%edi
 80617ef:	0f 84 41 01 00 00    	je     8061936 <quotearg_free+0x306>
 80617f5:	8d 76 00             	lea    0x0(%esi),%esi
 80617f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80617fc:	89 3c 24             	mov    %edi,(%esp)
 80617ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061803:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061807:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806180b:	b9 f6 54 00 00       	mov    $0x54f6,%ecx
 8061810:	e8 03 0c 00 00       	call   8062418 <__afl_maybe_log>
 8061815:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061819:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806181d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061821:	8b 3c 24             	mov    (%esp),%edi
 8061824:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061828:	83 ff 05             	cmp    $0x5,%edi
 806182b:	0f 84 c1 00 00 00    	je     80618f2 <quotearg_free+0x2c2>
 8061831:	8d 76 00             	lea    0x0(%esi),%esi
 8061834:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061838:	89 3c 24             	mov    %edi,(%esp)
 806183b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806183f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061843:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061847:	b9 e8 4d 00 00       	mov    $0x4de8,%ecx
 806184c:	e8 c7 0b 00 00       	call   8062418 <__afl_maybe_log>
 8061851:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061855:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061859:	8b 54 24 04          	mov    0x4(%esp),%edx
 806185d:	8b 3c 24             	mov    (%esp),%edi
 8061860:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061864:	83 ff 06             	cmp    $0x6,%edi
 8061867:	74 47                	je     80618b0 <quotearg_free+0x280>
 8061869:	8d 76 00             	lea    0x0(%esi),%esi
 806186c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061870:	89 3c 24             	mov    %edi,(%esp)
 8061873:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806187b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806187f:	b9 30 a4 00 00       	mov    $0xa430,%ecx
 8061884:	e8 8f 0b 00 00       	call   8062418 <__afl_maybe_log>
 8061889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806188d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061891:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061895:	8b 3c 24             	mov    (%esp),%edi
 8061898:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
 806189c:	83 ec 0c             	sub    $0xc,%esp
 806189f:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80618a3:	bb 03 00 00 00       	mov    $0x3,%ebx
    free (sv[i].val);
 80618a8:	e8 b3 78 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80618ad:	83 c4 10             	add    $0x10,%esp
    free (sv[i].val);
 80618b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80618b4:	89 3c 24             	mov    %edi,(%esp)
 80618b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80618bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80618bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80618c3:	b9 a8 71 00 00       	mov    $0x71a8,%ecx
 80618c8:	e8 4b 0b 00 00       	call   8062418 <__afl_maybe_log>
 80618cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80618d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80618d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80618d9:	8b 3c 24             	mov    (%esp),%edi
 80618dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80618e0:	83 ec 0c             	sub    $0xc,%esp
 80618e3:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80618e7:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 80618ea:	e8 71 78 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80618ef:	83 c4 10             	add    $0x10,%esp
 80618f2:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 80618f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80618f8:	89 3c 24             	mov    %edi,(%esp)
 80618fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80618ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061903:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061907:	b9 50 25 00 00       	mov    $0x2550,%ecx
 806190c:	e8 07 0b 00 00       	call   8062418 <__afl_maybe_log>
 8061911:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061915:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061919:	8b 54 24 04          	mov    0x4(%esp),%edx
 806191d:	8b 3c 24             	mov    (%esp),%edi
 8061920:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061924:	83 ec 0c             	sub    $0xc,%esp
 8061927:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 806192b:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 806192e:	e8 2d 78 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061933:	83 c4 10             	add    $0x10,%esp
 8061936:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 8061938:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806193c:	89 3c 24             	mov    %edi,(%esp)
 806193f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061943:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061947:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806194b:	b9 4f 88 00 00       	mov    $0x884f,%ecx
 8061950:	e8 c3 0a 00 00       	call   8062418 <__afl_maybe_log>
 8061955:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061959:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806195d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061961:	8b 3c 24             	mov    (%esp),%edi
 8061964:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061968:	83 ec 0c             	sub    $0xc,%esp
 806196b:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 806196f:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 8061972:	e8 e9 77 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061977:	83 c4 10             	add    $0x10,%esp
 806197a:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 806197c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061980:	89 3c 24             	mov    %edi,(%esp)
 8061983:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061987:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806198b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806198f:	b9 7f 08 00 00       	mov    $0x87f,%ecx
 8061994:	e8 7f 0a 00 00       	call   8062418 <__afl_maybe_log>
 8061999:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806199d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80619a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80619a5:	8b 3c 24             	mov    (%esp),%edi
 80619a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80619ac:	83 ec 0c             	sub    $0xc,%esp
 80619af:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80619b3:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 80619b6:	e8 a5 77 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80619bb:	83 c4 10             	add    $0x10,%esp
 80619be:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 80619c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80619c4:	89 3c 24             	mov    %edi,(%esp)
 80619c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80619cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80619cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80619d3:	b9 45 69 00 00       	mov    $0x6945,%ecx
 80619d8:	e8 3b 0a 00 00       	call   8062418 <__afl_maybe_log>
 80619dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80619e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80619e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80619e9:	8b 3c 24             	mov    (%esp),%edi
 80619ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80619f0:	83 ec 0c             	sub    $0xc,%esp
 80619f3:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80619f7:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 80619fa:	e8 61 77 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80619ff:	83 c4 10             	add    $0x10,%esp
 8061a02:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 8061a04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061a08:	89 3c 24             	mov    %edi,(%esp)
 8061a0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061a0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061a13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061a17:	b9 b3 ad 00 00       	mov    $0xadb3,%ecx
 8061a1c:	e8 f7 09 00 00       	call   8062418 <__afl_maybe_log>
 8061a21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061a25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061a29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061a2d:	8b 3c 24             	mov    (%esp),%edi
 8061a30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061a34:	83 ec 0c             	sub    $0xc,%esp
 8061a37:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061a3b:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 8061a3e:	e8 1d 77 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061a43:	83 c4 10             	add    $0x10,%esp
 8061a46:	39 eb                	cmp    %ebp,%ebx
 8061a48:	0f 84 f2 00 00 00    	je     8061b40 <quotearg_free+0x510>
 8061a4e:	66 90                	xchg   %ax,%ax
 8061a50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061a54:	89 3c 24             	mov    %edi,(%esp)
 8061a57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061a5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061a5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061a63:	b9 8c 62 00 00       	mov    $0x628c,%ecx
 8061a68:	e8 ab 09 00 00       	call   8062418 <__afl_maybe_log>
 8061a6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061a71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061a75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061a79:	8b 3c 24             	mov    (%esp),%edi
 8061a7c:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
 8061a80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061a84:	89 3c 24             	mov    %edi,(%esp)
 8061a87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061a8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061a8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061a93:	b9 41 50 00 00       	mov    $0x5041,%ecx
 8061a98:	e8 7b 09 00 00       	call   8062418 <__afl_maybe_log>
 8061a9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061aa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061aa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061aa9:	8b 3c 24             	mov    (%esp),%edi
 8061aac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061ab0:	83 ec 0c             	sub    $0xc,%esp
 8061ab3:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
 8061ab7:	e8 a4 76 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061abc:	58                   	pop    %eax
    free (sv[i].val);
 8061abd:	ff 74 de 0c          	pushl  0xc(%esi,%ebx,8)
 8061ac1:	e8 9a 76 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061ac6:	5a                   	pop    %edx
    free (sv[i].val);
 8061ac7:	ff 74 de 14          	pushl  0x14(%esi,%ebx,8)
 8061acb:	e8 90 76 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061ad0:	59                   	pop    %ecx
    free (sv[i].val);
 8061ad1:	ff 74 de 1c          	pushl  0x1c(%esi,%ebx,8)
 8061ad5:	e8 86 76 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061ada:	5f                   	pop    %edi
    free (sv[i].val);
 8061adb:	ff 74 de 24          	pushl  0x24(%esi,%ebx,8)
 8061adf:	e8 7c 76 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061ae4:	58                   	pop    %eax
    free (sv[i].val);
 8061ae5:	ff 74 de 2c          	pushl  0x2c(%esi,%ebx,8)
 8061ae9:	e8 72 76 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061aee:	58                   	pop    %eax
    free (sv[i].val);
 8061aef:	ff 74 de 34          	pushl  0x34(%esi,%ebx,8)
 8061af3:	e8 68 76 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061af8:	58                   	pop    %eax
    free (sv[i].val);
 8061af9:	ff 74 de 3c          	pushl  0x3c(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061afd:	83 c3 08             	add    $0x8,%ebx
    free (sv[i].val);
 8061b00:	e8 5b 76 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8061b05:	83 c4 10             	add    $0x10,%esp
 8061b08:	39 eb                	cmp    %ebp,%ebx
 8061b0a:	0f 85 70 ff ff ff    	jne    8061a80 <quotearg_free+0x450>
 8061b10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061b14:	89 3c 24             	mov    %edi,(%esp)
 8061b17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061b1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061b1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061b23:	b9 fd 70 00 00       	mov    $0x70fd,%ecx
 8061b28:	e8 eb 08 00 00       	call   8062418 <__afl_maybe_log>
 8061b2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061b31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061b35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061b39:	8b 3c 24             	mov    (%esp),%edi
 8061b3c:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
  if (sv[0].val != slot0)
 8061b40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061b44:	89 3c 24             	mov    %edi,(%esp)
 8061b47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061b4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061b4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061b53:	b9 3d 2d 00 00       	mov    $0x2d3d,%ecx
 8061b58:	e8 bb 08 00 00       	call   8062418 <__afl_maybe_log>
 8061b5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061b61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061b65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061b69:	8b 3c 24             	mov    (%esp),%edi
 8061b6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061b70:	8b 46 04             	mov    0x4(%esi),%eax
 8061b73:	3d 80 bc 43 08       	cmp    $0x843bc80,%eax
 8061b78:	74 52                	je     8061bcc <quotearg_free+0x59c>
 8061b7a:	66 90                	xchg   %ax,%ax
 8061b7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061b80:	89 3c 24             	mov    %edi,(%esp)
 8061b83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061b87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061b8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061b8f:	b9 74 4f 00 00       	mov    $0x4f74,%ecx
 8061b94:	e8 7f 08 00 00       	call   8062418 <__afl_maybe_log>
 8061b99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061b9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061ba1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061ba5:	8b 3c 24             	mov    (%esp),%edi
 8061ba8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      free (sv[0].val);
 8061bac:	83 ec 0c             	sub    $0xc,%esp
 8061baf:	50                   	push   %eax
 8061bb0:	e8 ab 75 fe ff       	call   8049160 <free@plt>
      slotvec0.size = sizeof slot0;
 8061bb5:	c7 05 94 b2 06 08 00 	movl   $0x100,0x806b294
 8061bbc:	01 00 00 
      slotvec0.val = slot0;
 8061bbf:	c7 05 98 b2 06 08 80 	movl   $0x843bc80,0x806b298
 8061bc6:	bc 43 08 
 8061bc9:	83 c4 10             	add    $0x10,%esp
    }
  if (sv != &slotvec0)
 8061bcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061bd0:	89 3c 24             	mov    %edi,(%esp)
 8061bd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061bd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061bdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061bdf:	b9 f2 ec 00 00       	mov    $0xecf2,%ecx
 8061be4:	e8 2f 08 00 00       	call   8062418 <__afl_maybe_log>
 8061be9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061bed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061bf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061bf5:	8b 3c 24             	mov    (%esp),%edi
 8061bf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061bfc:	81 fe 94 b2 06 08    	cmp    $0x806b294,%esi
 8061c02:	74 46                	je     8061c4a <quotearg_free+0x61a>
 8061c04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061c08:	89 3c 24             	mov    %edi,(%esp)
 8061c0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061c0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061c13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061c17:	b9 6a 25 00 00       	mov    $0x256a,%ecx
 8061c1c:	e8 f7 07 00 00       	call   8062418 <__afl_maybe_log>
 8061c21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061c25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061c29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061c2d:	8b 3c 24             	mov    (%esp),%edi
 8061c30:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      free (sv);
 8061c34:	83 ec 0c             	sub    $0xc,%esp
 8061c37:	56                   	push   %esi
 8061c38:	e8 23 75 fe ff       	call   8049160 <free@plt>
      slotvec = &slotvec0;
 8061c3d:	c7 05 90 b2 06 08 94 	movl   $0x806b294,0x806b290
 8061c44:	b2 06 08 
 8061c47:	83 c4 10             	add    $0x10,%esp
 8061c4a:	66 90                	xchg   %ax,%ax
    }
  nslots = 1;
 8061c4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061c50:	89 3c 24             	mov    %edi,(%esp)
 8061c53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061c57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061c5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061c5f:	b9 29 49 00 00       	mov    $0x4929,%ecx
 8061c64:	e8 af 07 00 00       	call   8062418 <__afl_maybe_log>
 8061c69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061c6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061c71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061c75:	8b 3c 24             	mov    (%esp),%edi
 8061c78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061c7c:	c7 05 9c b2 06 08 01 	movl   $0x1,0x806b29c
 8061c83:	00 00 00 
}
 8061c86:	83 c4 0c             	add    $0xc,%esp
 8061c89:	5b                   	pop    %ebx
 8061c8a:	5e                   	pop    %esi
 8061c8b:	5f                   	pop    %edi
 8061c8c:	5d                   	pop    %ebp
 8061c8d:	c3                   	ret    
 8061c8e:	66 90                	xchg   %ax,%ax

08061c90 <quotearg_n>:
  }
}

char *
quotearg_n (int n, char const *arg)
{
 8061c90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061c94:	89 3c 24             	mov    %edi,(%esp)
 8061c97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061c9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061c9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061ca3:	b9 53 73 00 00       	mov    $0x7353,%ecx
 8061ca8:	e8 6b 07 00 00       	call   8062418 <__afl_maybe_log>
 8061cad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061cb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061cb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061cb9:	8b 3c 24             	mov    (%esp),%edi
 8061cbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061cc0:	8b 44 24 04          	mov    0x4(%esp),%eax
  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);
 8061cc4:	8b 54 24 08          	mov    0x8(%esp),%edx
 8061cc8:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8061ccd:	c7 44 24 04 80 bd 43 	movl   $0x843bd80,0x4(%esp)
 8061cd4:	08 
 8061cd5:	e9 86 f0 ff ff       	jmp    8060d60 <quotearg_n_options>
 8061cda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08061ce0 <quotearg_n_mem>:
}

char *
quotearg_n_mem (int n, char const *arg, size_t argsize)
{
 8061ce0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061ce4:	89 3c 24             	mov    %edi,(%esp)
 8061ce7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061ceb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061cef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061cf3:	b9 e4 03 00 00       	mov    $0x3e4,%ecx
 8061cf8:	e8 1b 07 00 00       	call   8062418 <__afl_maybe_log>
 8061cfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061d01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061d05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061d09:	8b 3c 24             	mov    (%esp),%edi
 8061d0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061d10:	8b 44 24 04          	mov    0x4(%esp),%eax
  return quotearg_n_options (n, arg, argsize, &default_quoting_options);
 8061d14:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8061d18:	8b 54 24 08          	mov    0x8(%esp),%edx
 8061d1c:	c7 44 24 04 80 bd 43 	movl   $0x843bd80,0x4(%esp)
 8061d23:	08 
 8061d24:	e9 37 f0 ff ff       	jmp    8060d60 <quotearg_n_options>
 8061d29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08061d30 <quotearg>:
}

char *
quotearg (char const *arg)
{
 8061d30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061d34:	89 3c 24             	mov    %edi,(%esp)
 8061d37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061d3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061d3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061d43:	b9 59 ed 00 00       	mov    $0xed59,%ecx
 8061d48:	e8 cb 06 00 00       	call   8062418 <__afl_maybe_log>
 8061d4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061d51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061d55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061d59:	8b 3c 24             	mov    (%esp),%edi
 8061d5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061d60:	8b 54 24 04          	mov    0x4(%esp),%edx
}

char *
quotearg_n (int n, char const *arg)
{
  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);
 8061d64:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8061d69:	31 c0                	xor    %eax,%eax
 8061d6b:	c7 44 24 04 80 bd 43 	movl   $0x843bd80,0x4(%esp)
 8061d72:	08 
 8061d73:	e9 e8 ef ff ff       	jmp    8060d60 <quotearg_n_options>
 8061d78:	90                   	nop
 8061d79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08061d80 <quotearg_mem>:
  return quotearg_n (0, arg);
}

char *
quotearg_mem (char const *arg, size_t argsize)
{
 8061d80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061d84:	89 3c 24             	mov    %edi,(%esp)
 8061d87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061d8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061d8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061d93:	b9 a0 ec 00 00       	mov    $0xeca0,%ecx
 8061d98:	e8 7b 06 00 00       	call   8062418 <__afl_maybe_log>
 8061d9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061da1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061da5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061da9:	8b 3c 24             	mov    (%esp),%edi
 8061dac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061db0:	8b 54 24 04          	mov    0x4(%esp),%edx
}

char *
quotearg_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &default_quoting_options);
 8061db4:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061db8:	31 c0                	xor    %eax,%eax
 8061dba:	c7 44 24 04 80 bd 43 	movl   $0x843bd80,0x4(%esp)
 8061dc1:	08 
 8061dc2:	e9 99 ef ff ff       	jmp    8060d60 <quotearg_n_options>
 8061dc7:	89 f6                	mov    %esi,%esi
 8061dc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08061dd0 <quotearg_n_style>:
  return quotearg_n_mem (0, arg, argsize);
}

char *
quotearg_n_style (int n, enum quoting_style s, char const *arg)
{
 8061dd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061dd4:	89 3c 24             	mov    %edi,(%esp)
 8061dd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061ddb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061ddf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061de3:	b9 8c 75 00 00       	mov    $0x758c,%ecx
 8061de8:	e8 2b 06 00 00       	call   8062418 <__afl_maybe_log>
 8061ded:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061df1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061df5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061df9:	8b 3c 24             	mov    (%esp),%edi
 8061dfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061e00:	53                   	push   %ebx
 8061e01:	83 ec 38             	sub    $0x38,%esp
  struct quoting_options const o = quoting_options_from_style (s);
 8061e04:	8b 54 24 44          	mov    0x44(%esp),%edx
 8061e08:	89 e0                	mov    %esp,%eax
 8061e0a:	89 e3                	mov    %esp,%ebx
 8061e0c:	e8 af a0 ff ff       	call   805bec0 <quoting_options_from_style>
  return quotearg_n_options (n, arg, SIZE_MAX, &o);
 8061e11:	83 ec 0c             	sub    $0xc,%esp
 8061e14:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8061e19:	53                   	push   %ebx
 8061e1a:	8b 54 24 58          	mov    0x58(%esp),%edx
 8061e1e:	8b 44 24 50          	mov    0x50(%esp),%eax
 8061e22:	e8 39 ef ff ff       	call   8060d60 <quotearg_n_options>
}
 8061e27:	83 c4 48             	add    $0x48,%esp
 8061e2a:	5b                   	pop    %ebx
 8061e2b:	c3                   	ret    
 8061e2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08061e30 <quotearg_n_style_mem>:

char *
quotearg_n_style_mem (int n, enum quoting_style s,
                      char const *arg, size_t argsize)
{
 8061e30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061e34:	89 3c 24             	mov    %edi,(%esp)
 8061e37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061e3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061e3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061e43:	b9 5a 0b 00 00       	mov    $0xb5a,%ecx
 8061e48:	e8 cb 05 00 00       	call   8062418 <__afl_maybe_log>
 8061e4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061e51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061e55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061e59:	8b 3c 24             	mov    (%esp),%edi
 8061e5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061e60:	53                   	push   %ebx
 8061e61:	83 ec 38             	sub    $0x38,%esp
  struct quoting_options const o = quoting_options_from_style (s);
 8061e64:	8b 54 24 44          	mov    0x44(%esp),%edx
 8061e68:	89 e0                	mov    %esp,%eax
 8061e6a:	89 e3                	mov    %esp,%ebx
 8061e6c:	e8 4f a0 ff ff       	call   805bec0 <quoting_options_from_style>
  return quotearg_n_options (n, arg, argsize, &o);
 8061e71:	83 ec 0c             	sub    $0xc,%esp
 8061e74:	53                   	push   %ebx
 8061e75:	8b 4c 24 5c          	mov    0x5c(%esp),%ecx
 8061e79:	8b 54 24 58          	mov    0x58(%esp),%edx
 8061e7d:	8b 44 24 50          	mov    0x50(%esp),%eax
 8061e81:	e8 da ee ff ff       	call   8060d60 <quotearg_n_options>
}
 8061e86:	83 c4 48             	add    $0x48,%esp
 8061e89:	5b                   	pop    %ebx
 8061e8a:	c3                   	ret    
 8061e8b:	90                   	nop
 8061e8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08061e90 <quotearg_style>:

char *
quotearg_style (enum quoting_style s, char const *arg)
{
 8061e90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061e94:	89 3c 24             	mov    %edi,(%esp)
 8061e97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061e9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061e9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061ea3:	b9 f0 11 00 00       	mov    $0x11f0,%ecx
 8061ea8:	e8 6b 05 00 00       	call   8062418 <__afl_maybe_log>
 8061ead:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061eb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061eb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061eb9:	8b 3c 24             	mov    (%esp),%edi
 8061ebc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061ec0:	83 ec 10             	sub    $0x10,%esp
  return quotearg_n_style (0, s, arg);
 8061ec3:	ff 74 24 18          	pushl  0x18(%esp)
 8061ec7:	ff 74 24 18          	pushl  0x18(%esp)
 8061ecb:	6a 00                	push   $0x0
 8061ecd:	e8 fe fe ff ff       	call   8061dd0 <quotearg_n_style>
}
 8061ed2:	83 c4 1c             	add    $0x1c,%esp
 8061ed5:	c3                   	ret    
 8061ed6:	8d 76 00             	lea    0x0(%esi),%esi
 8061ed9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08061ee0 <quotearg_style_mem>:

char *
quotearg_style_mem (enum quoting_style s, char const *arg, size_t argsize)
{
 8061ee0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061ee4:	89 3c 24             	mov    %edi,(%esp)
 8061ee7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061eeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061eef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061ef3:	b9 21 a9 00 00       	mov    $0xa921,%ecx
 8061ef8:	e8 1b 05 00 00       	call   8062418 <__afl_maybe_log>
 8061efd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061f01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061f05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061f09:	8b 3c 24             	mov    (%esp),%edi
 8061f0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061f10:	83 ec 0c             	sub    $0xc,%esp
  return quotearg_n_style_mem (0, s, arg, argsize);
 8061f13:	ff 74 24 18          	pushl  0x18(%esp)
 8061f17:	ff 74 24 18          	pushl  0x18(%esp)
 8061f1b:	ff 74 24 18          	pushl  0x18(%esp)
 8061f1f:	6a 00                	push   $0x0
 8061f21:	e8 0a ff ff ff       	call   8061e30 <quotearg_n_style_mem>
}
 8061f26:	83 c4 1c             	add    $0x1c,%esp
 8061f29:	c3                   	ret    
 8061f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08061f30 <quotearg_char_mem>:

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
 8061f30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061f34:	89 3c 24             	mov    %edi,(%esp)
 8061f37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061f3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061f3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061f43:	b9 aa 93 00 00       	mov    $0x93aa,%ecx
 8061f48:	e8 cb 04 00 00       	call   8062418 <__afl_maybe_log>
 8061f4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061f51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061f55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061f59:	8b 3c 24             	mov    (%esp),%edi
 8061f5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061f60:	53                   	push   %ebx
 8061f61:	83 ec 38             	sub    $0x38,%esp
  struct quoting_options options;
  options = default_quoting_options;
 8061f64:	a1 80 bd 43 08       	mov    0x843bd80,%eax
 8061f69:	8b 15 84 bd 43 08    	mov    0x843bd84,%edx
 8061f6f:	8b 1d 88 bd 43 08    	mov    0x843bd88,%ebx
  return quotearg_n_style_mem (0, s, arg, argsize);
}

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
 8061f75:	8b 4c 24 48          	mov    0x48(%esp),%ecx
  struct quoting_options options;
  options = default_quoting_options;
 8061f79:	89 04 24             	mov    %eax,(%esp)
 8061f7c:	a1 8c bd 43 08       	mov    0x843bd8c,%eax
 8061f81:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061f85:	8b 15 90 bd 43 08    	mov    0x843bd90,%edx
 8061f8b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 8061f8f:	8b 1d 94 bd 43 08    	mov    0x843bd94,%ebx
 8061f95:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061f99:	a1 98 bd 43 08       	mov    0x843bd98,%eax
 8061f9e:	89 54 24 10          	mov    %edx,0x10(%esp)
 8061fa2:	8b 15 9c bd 43 08    	mov    0x843bd9c,%edx
 8061fa8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8061fac:	8b 1d a0 bd 43 08    	mov    0x843bda0,%ebx
 8061fb2:	89 44 24 18          	mov    %eax,0x18(%esp)
 8061fb6:	a1 a4 bd 43 08       	mov    0x843bda4,%eax
 8061fbb:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8061fbf:	8b 15 a8 bd 43 08    	mov    0x843bda8,%edx
 8061fc5:	89 5c 24 20          	mov    %ebx,0x20(%esp)
 8061fc9:	8b 1d ac bd 43 08    	mov    0x843bdac,%ebx
 8061fcf:	89 44 24 24          	mov    %eax,0x24(%esp)
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 8061fd3:	89 c8                	mov    %ecx,%eax
  int shift = uc % INT_BITS;
 8061fd5:	83 e1 1f             	and    $0x1f,%ecx
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 8061fd8:	c0 e8 05             	shr    $0x5,%al

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  struct quoting_options options;
  options = default_quoting_options;
 8061fdb:	89 54 24 28          	mov    %edx,0x28(%esp)
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 8061fdf:	0f b6 d0             	movzbl %al,%edx

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  struct quoting_options options;
  options = default_quoting_options;
 8061fe2:	89 5c 24 2c          	mov    %ebx,0x2c(%esp)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  int shift = uc % INT_BITS;
  int r = (*p >> shift) & 1;
 8061fe6:	8b 5c 94 08          	mov    0x8(%esp,%edx,4),%ebx
 8061fea:	89 d8                	mov    %ebx,%eax
 8061fec:	d3 e8                	shr    %cl,%eax
  *p ^= ((i & 1) ^ r) << shift;
 8061fee:	83 f0 01             	xor    $0x1,%eax
 8061ff1:	83 e0 01             	and    $0x1,%eax
 8061ff4:	d3 e0                	shl    %cl,%eax
 8061ff6:	31 d8                	xor    %ebx,%eax
 8061ff8:	89 44 94 08          	mov    %eax,0x8(%esp,%edx,4)
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  struct quoting_options options;
  options = default_quoting_options;
  set_char_quoting (&options, ch, 1);
  return quotearg_n_options (0, arg, argsize, &options);
 8061ffc:	83 ec 0c             	sub    $0xc,%esp
 8061fff:	31 c0                	xor    %eax,%eax
 8062001:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
 8062005:	51                   	push   %ecx
 8062006:	8b 4c 24 54          	mov    0x54(%esp),%ecx
 806200a:	8b 54 24 50          	mov    0x50(%esp),%edx
 806200e:	e8 4d ed ff ff       	call   8060d60 <quotearg_n_options>
}
 8062013:	83 c4 48             	add    $0x48,%esp
 8062016:	5b                   	pop    %ebx
 8062017:	c3                   	ret    
 8062018:	90                   	nop
 8062019:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08062020 <quotearg_char>:

char *
quotearg_char (char const *arg, char ch)
{
 8062020:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062024:	89 3c 24             	mov    %edi,(%esp)
 8062027:	89 54 24 04          	mov    %edx,0x4(%esp)
 806202b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806202f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062033:	b9 4e 19 00 00       	mov    $0x194e,%ecx
 8062038:	e8 db 03 00 00       	call   8062418 <__afl_maybe_log>
 806203d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062041:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062045:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062049:	8b 3c 24             	mov    (%esp),%edi
 806204c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062050:	83 ec 10             	sub    $0x10,%esp
  return quotearg_char_mem (arg, SIZE_MAX, ch);
 8062053:	0f be 44 24 18       	movsbl 0x18(%esp),%eax
 8062058:	50                   	push   %eax
 8062059:	6a ff                	push   $0xffffffff
 806205b:	ff 74 24 1c          	pushl  0x1c(%esp)
 806205f:	e8 cc fe ff ff       	call   8061f30 <quotearg_char_mem>
}
 8062064:	83 c4 1c             	add    $0x1c,%esp
 8062067:	c3                   	ret    
 8062068:	90                   	nop
 8062069:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08062070 <quotearg_colon>:

char *
quotearg_colon (char const *arg)
{
 8062070:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062074:	89 3c 24             	mov    %edi,(%esp)
 8062077:	89 54 24 04          	mov    %edx,0x4(%esp)
 806207b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806207f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062083:	b9 a1 b1 00 00       	mov    $0xb1a1,%ecx
 8062088:	e8 8b 03 00 00       	call   8062418 <__afl_maybe_log>
 806208d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062091:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062095:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062099:	8b 3c 24             	mov    (%esp),%edi
 806209c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80620a0:	83 ec 10             	sub    $0x10,%esp
}

char *
quotearg_char (char const *arg, char ch)
{
  return quotearg_char_mem (arg, SIZE_MAX, ch);
 80620a3:	6a 3a                	push   $0x3a
 80620a5:	6a ff                	push   $0xffffffff
 80620a7:	ff 74 24 1c          	pushl  0x1c(%esp)
 80620ab:	e8 80 fe ff ff       	call   8061f30 <quotearg_char_mem>

char *
quotearg_colon (char const *arg)
{
  return quotearg_char (arg, ':');
}
 80620b0:	83 c4 1c             	add    $0x1c,%esp
 80620b3:	c3                   	ret    
 80620b4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80620ba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

080620c0 <quotearg_colon_mem>:

char *
quotearg_colon_mem (char const *arg, size_t argsize)
{
 80620c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80620c4:	89 3c 24             	mov    %edi,(%esp)
 80620c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80620cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80620cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80620d3:	b9 6e e0 00 00       	mov    $0xe06e,%ecx
 80620d8:	e8 3b 03 00 00       	call   8062418 <__afl_maybe_log>
 80620dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80620e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80620e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80620e9:	8b 3c 24             	mov    (%esp),%edi
 80620ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80620f0:	83 ec 10             	sub    $0x10,%esp
  return quotearg_char_mem (arg, argsize, ':');
 80620f3:	6a 3a                	push   $0x3a
 80620f5:	ff 74 24 1c          	pushl  0x1c(%esp)
 80620f9:	ff 74 24 1c          	pushl  0x1c(%esp)
 80620fd:	e8 2e fe ff ff       	call   8061f30 <quotearg_char_mem>
}
 8062102:	83 c4 1c             	add    $0x1c,%esp
 8062105:	c3                   	ret    
 8062106:	8d 76 00             	lea    0x0(%esi),%esi
 8062109:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08062110 <quotearg_n_custom_mem>:

char *
quotearg_n_custom_mem (int n, char const *left_quote,
                       char const *right_quote,
                       char const *arg, size_t argsize)
{
 8062110:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062114:	89 3c 24             	mov    %edi,(%esp)
 8062117:	89 54 24 04          	mov    %edx,0x4(%esp)
 806211b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806211f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062123:	b9 94 82 00 00       	mov    $0x8294,%ecx
 8062128:	e8 eb 02 00 00       	call   8062418 <__afl_maybe_log>
 806212d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062131:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062135:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062139:	8b 3c 24             	mov    (%esp),%edi
 806213c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062140:	53                   	push   %ebx
 8062141:	83 ec 3c             	sub    $0x3c,%esp
  struct quoting_options o = default_quoting_options;
 8062144:	a1 80 bd 43 08       	mov    0x843bd80,%eax
 8062149:	8b 15 84 bd 43 08    	mov    0x843bd84,%edx
 806214f:	8b 0d 88 bd 43 08    	mov    0x843bd88,%ecx
 8062155:	8b 1d 8c bd 43 08    	mov    0x843bd8c,%ebx
 806215b:	89 44 24 04          	mov    %eax,0x4(%esp)
 806215f:	89 54 24 08          	mov    %edx,0x8(%esp)
 8062163:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 8062167:	89 5c 24 10          	mov    %ebx,0x10(%esp)
 806216b:	a1 90 bd 43 08       	mov    0x843bd90,%eax
 8062170:	8b 15 94 bd 43 08    	mov    0x843bd94,%edx
 8062176:	8b 0d 98 bd 43 08    	mov    0x843bd98,%ecx
 806217c:	8b 1d 9c bd 43 08    	mov    0x843bd9c,%ebx
 8062182:	89 44 24 14          	mov    %eax,0x14(%esp)
 8062186:	89 54 24 18          	mov    %edx,0x18(%esp)
 806218a:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 806218e:	89 5c 24 20          	mov    %ebx,0x20(%esp)
 8062192:	a1 a0 bd 43 08       	mov    0x843bda0,%eax
 8062197:	8b 15 a4 bd 43 08    	mov    0x843bda4,%edx
 806219d:	8b 0d a8 bd 43 08    	mov    0x843bda8,%ecx
 80621a3:	8b 1d ac bd 43 08    	mov    0x843bdac,%ebx
 80621a9:	89 44 24 24          	mov    %eax,0x24(%esp)
 80621ad:	89 54 24 28          	mov    %edx,0x28(%esp)
 80621b1:	89 4c 24 2c          	mov    %ecx,0x2c(%esp)
 80621b5:	89 5c 24 30          	mov    %ebx,0x30(%esp)
  set_custom_quoting (&o, left_quote, right_quote);
 80621b9:	ff 74 24 4c          	pushl  0x4c(%esp)
 80621bd:	ff 74 24 4c          	pushl  0x4c(%esp)
 80621c1:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
 80621c5:	53                   	push   %ebx
 80621c6:	e8 55 f1 ff ff       	call   8061320 <set_custom_quoting>
  return quotearg_n_options (n, arg, argsize, &o);
 80621cb:	8b 4c 24 60          	mov    0x60(%esp),%ecx
 80621cf:	8b 54 24 5c          	mov    0x5c(%esp),%edx
 80621d3:	8b 44 24 50          	mov    0x50(%esp),%eax
 80621d7:	89 1c 24             	mov    %ebx,(%esp)
 80621da:	e8 81 eb ff ff       	call   8060d60 <quotearg_n_options>
}
 80621df:	83 c4 48             	add    $0x48,%esp
 80621e2:	5b                   	pop    %ebx
 80621e3:	c3                   	ret    
 80621e4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80621ea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

080621f0 <quotearg_n_custom>:
}

char *
quotearg_n_custom (int n, char const *left_quote,
                   char const *right_quote, char const *arg)
{
 80621f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80621f4:	89 3c 24             	mov    %edi,(%esp)
 80621f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80621fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80621ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062203:	b9 48 bd 00 00       	mov    $0xbd48,%ecx
 8062208:	e8 0b 02 00 00       	call   8062418 <__afl_maybe_log>
 806220d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062211:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062215:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062219:	8b 3c 24             	mov    (%esp),%edi
 806221c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062220:	83 ec 18             	sub    $0x18,%esp
  return quotearg_n_custom_mem (n, left_quote, right_quote, arg,
 8062223:	6a ff                	push   $0xffffffff
 8062225:	ff 74 24 2c          	pushl  0x2c(%esp)
 8062229:	ff 74 24 2c          	pushl  0x2c(%esp)
 806222d:	ff 74 24 2c          	pushl  0x2c(%esp)
 8062231:	ff 74 24 2c          	pushl  0x2c(%esp)
 8062235:	e8 d6 fe ff ff       	call   8062110 <quotearg_n_custom_mem>
                                SIZE_MAX);
}
 806223a:	83 c4 2c             	add    $0x2c,%esp
 806223d:	c3                   	ret    
 806223e:	66 90                	xchg   %ax,%ax

08062240 <quotearg_custom>:
}

char *
quotearg_custom (char const *left_quote, char const *right_quote,
                 char const *arg)
{
 8062240:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062244:	89 3c 24             	mov    %edi,(%esp)
 8062247:	89 54 24 04          	mov    %edx,0x4(%esp)
 806224b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806224f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062253:	b9 21 8e 00 00       	mov    $0x8e21,%ecx
 8062258:	e8 bb 01 00 00       	call   8062418 <__afl_maybe_log>
 806225d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062261:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062265:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062269:	8b 3c 24             	mov    (%esp),%edi
 806226c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062270:	83 ec 18             	sub    $0x18,%esp

char *
quotearg_n_custom (int n, char const *left_quote,
                   char const *right_quote, char const *arg)
{
  return quotearg_n_custom_mem (n, left_quote, right_quote, arg,
 8062273:	6a ff                	push   $0xffffffff
 8062275:	ff 74 24 28          	pushl  0x28(%esp)
 8062279:	ff 74 24 28          	pushl  0x28(%esp)
 806227d:	ff 74 24 28          	pushl  0x28(%esp)
 8062281:	6a 00                	push   $0x0
 8062283:	e8 88 fe ff ff       	call   8062110 <quotearg_n_custom_mem>
char *
quotearg_custom (char const *left_quote, char const *right_quote,
                 char const *arg)
{
  return quotearg_n_custom (0, left_quote, right_quote, arg);
}
 8062288:	83 c4 2c             	add    $0x2c,%esp
 806228b:	c3                   	ret    
 806228c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08062290 <quotearg_custom_mem>:

char *
quotearg_custom_mem (char const *left_quote, char const *right_quote,
                     char const *arg, size_t argsize)
{
 8062290:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062294:	89 3c 24             	mov    %edi,(%esp)
 8062297:	89 54 24 04          	mov    %edx,0x4(%esp)
 806229b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806229f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80622a3:	b9 85 ce 00 00       	mov    $0xce85,%ecx
 80622a8:	e8 6b 01 00 00       	call   8062418 <__afl_maybe_log>
 80622ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80622b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80622b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80622b9:	8b 3c 24             	mov    (%esp),%edi
 80622bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80622c0:	83 ec 18             	sub    $0x18,%esp
  return quotearg_n_custom_mem (0, left_quote, right_quote, arg,
 80622c3:	ff 74 24 28          	pushl  0x28(%esp)
 80622c7:	ff 74 24 28          	pushl  0x28(%esp)
 80622cb:	ff 74 24 28          	pushl  0x28(%esp)
 80622cf:	ff 74 24 28          	pushl  0x28(%esp)
 80622d3:	6a 00                	push   $0x0
 80622d5:	e8 36 fe ff ff       	call   8062110 <quotearg_n_custom_mem>
                                argsize);
}
 80622da:	83 c4 2c             	add    $0x2c,%esp
 80622dd:	c3                   	ret    
 80622de:	66 90                	xchg   %ax,%ax

080622e0 <quote_n_mem>:
    NULL, NULL
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
 80622e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80622e4:	89 3c 24             	mov    %edi,(%esp)
 80622e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80622eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80622ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80622f3:	b9 d5 1f 00 00       	mov    $0x1fd5,%ecx
 80622f8:	e8 1b 01 00 00       	call   8062418 <__afl_maybe_log>
 80622fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062301:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062305:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062309:	8b 3c 24             	mov    (%esp),%edi
 806230c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062310:	8b 44 24 04          	mov    0x4(%esp),%eax
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 8062314:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8062318:	8b 54 24 08          	mov    0x8(%esp),%edx
 806231c:	c7 44 24 04 60 b2 06 	movl   $0x806b260,0x4(%esp)
 8062323:	08 
 8062324:	e9 37 ea ff ff       	jmp    8060d60 <quotearg_n_options>
 8062329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08062330 <quote_mem>:
}

char const *
quote_mem (char const *arg, size_t argsize)
{
 8062330:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062334:	89 3c 24             	mov    %edi,(%esp)
 8062337:	89 54 24 04          	mov    %edx,0x4(%esp)
 806233b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806233f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062343:	b9 35 e5 00 00       	mov    $0xe535,%ecx
 8062348:	e8 cb 00 00 00       	call   8062418 <__afl_maybe_log>
 806234d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062351:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062355:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062359:	8b 3c 24             	mov    (%esp),%edi
 806235c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062360:	8b 54 24 04          	mov    0x4(%esp),%edx
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 8062364:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062368:	31 c0                	xor    %eax,%eax
 806236a:	c7 44 24 04 60 b2 06 	movl   $0x806b260,0x4(%esp)
 8062371:	08 
 8062372:	e9 e9 e9 ff ff       	jmp    8060d60 <quotearg_n_options>
 8062377:	89 f6                	mov    %esi,%esi
 8062379:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08062380 <quote_n>:
  return quote_n_mem (0, arg, argsize);
}

char const *
quote_n (int n, char const *arg)
{
 8062380:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062384:	89 3c 24             	mov    %edi,(%esp)
 8062387:	89 54 24 04          	mov    %edx,0x4(%esp)
 806238b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806238f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062393:	b9 c6 1e 00 00       	mov    $0x1ec6,%ecx
 8062398:	e8 7b 00 00 00       	call   8062418 <__afl_maybe_log>
 806239d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80623a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80623a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80623a9:	8b 3c 24             	mov    (%esp),%edi
 80623ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80623b0:	8b 44 24 04          	mov    0x4(%esp),%eax
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 80623b4:	8b 54 24 08          	mov    0x8(%esp),%edx
 80623b8:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 80623bd:	c7 44 24 04 60 b2 06 	movl   $0x806b260,0x4(%esp)
 80623c4:	08 
 80623c5:	e9 96 e9 ff ff       	jmp    8060d60 <quotearg_n_options>
 80623ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080623d0 <quote>:
  return quote_n_mem (n, arg, SIZE_MAX);
}

char const *
quote (char const *arg)
{
 80623d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80623d4:	89 3c 24             	mov    %edi,(%esp)
 80623d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80623db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80623df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80623e3:	b9 9f 08 00 00       	mov    $0x89f,%ecx
 80623e8:	e8 2b 00 00 00       	call   8062418 <__afl_maybe_log>
 80623ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80623f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80623f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80623f9:	8b 3c 24             	mov    (%esp),%edi
 80623fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062400:	8b 54 24 04          	mov    0x4(%esp),%edx
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 8062404:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8062409:	31 c0                	xor    %eax,%eax
 806240b:	c7 44 24 04 60 b2 06 	movl   $0x806b260,0x4(%esp)
 8062412:	08 
 8062413:	e9 48 e9 ff ff       	jmp    8060d60 <quotearg_n_options>

08062418 <__afl_maybe_log>:
 8062418:	9f                   	lahf   
 8062419:	0f 90 c0             	seto   %al
 806241c:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 8062422:	85 d2                	test   %edx,%edx
 8062424:	74 22                	je     8062448 <__afl_setup>

08062426 <__afl_store>:
 8062426:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 806242c:	31 cf                	xor    %ecx,%edi
 806242e:	d1 e9                	shr    %ecx
 8062430:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 8062436:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 806243a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0806243e <__afl_return>:
 806243e:	04 7f                	add    $0x7f,%al
 8062440:	9e                   	sahf   
 8062441:	c3                   	ret    
 8062442:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08062448 <__afl_setup>:
 8062448:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 806244f:	75 ed                	jne    806243e <__afl_return>
 8062451:	50                   	push   %eax
 8062452:	51                   	push   %ecx
 8062453:	68 50 25 06 08       	push   $0x8062550
 8062458:	e8 53 6e fe ff       	call   80492b0 <getenv@plt>
 806245d:	83 c4 04             	add    $0x4,%esp
 8062460:	85 c0                	test   %eax,%eax
 8062462:	0f 84 db 00 00 00    	je     8062543 <__afl_setup_abort>
 8062468:	50                   	push   %eax
 8062469:	e8 12 70 fe ff       	call   8049480 <atoi@plt>
 806246e:	83 c4 04             	add    $0x4,%esp
 8062471:	6a 00                	push   $0x0
 8062473:	6a 00                	push   $0x0
 8062475:	50                   	push   %eax
 8062476:	e8 65 6d fe ff       	call   80491e0 <shmat@plt>
 806247b:	83 c4 0c             	add    $0xc,%esp
 806247e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8062481:	0f 84 bc 00 00 00    	je     8062543 <__afl_setup_abort>
 8062487:	c6 00 01             	movb   $0x1,(%eax)
 806248a:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 806248f:	89 c2                	mov    %eax,%edx
 8062491:	59                   	pop    %ecx
 8062492:	58                   	pop    %eax

08062493 <__afl_forkserver>:
 8062493:	50                   	push   %eax
 8062494:	51                   	push   %ecx
 8062495:	52                   	push   %edx
 8062496:	6a 04                	push   $0x4
 8062498:	68 e0 bd 43 08       	push   $0x843bde0
 806249d:	68 c7 00 00 00       	push   $0xc7
 80624a2:	e8 e9 6e fe ff       	call   8049390 <write@plt>
 80624a7:	83 c4 0c             	add    $0xc,%esp
 80624aa:	83 f8 04             	cmp    $0x4,%eax
 80624ad:	75 6e                	jne    806251d <__afl_fork_resume>

080624af <__afl_fork_wait_loop>:
 80624af:	6a 04                	push   $0x4
 80624b1:	68 e0 bd 43 08       	push   $0x843bde0
 80624b6:	68 c6 00 00 00       	push   $0xc6
 80624bb:	e8 60 6c fe ff       	call   8049120 <read@plt>
 80624c0:	83 c4 0c             	add    $0xc,%esp
 80624c3:	83 f8 04             	cmp    $0x4,%eax
 80624c6:	75 74                	jne    806253c <__afl_die>
 80624c8:	e8 53 6f fe ff       	call   8049420 <fork@plt>
 80624cd:	83 f8 00             	cmp    $0x0,%eax
 80624d0:	7c 6a                	jl     806253c <__afl_die>
 80624d2:	74 49                	je     806251d <__afl_fork_resume>
 80624d4:	a3 40 be 43 08       	mov    %eax,0x843be40
 80624d9:	6a 04                	push   $0x4
 80624db:	68 40 be 43 08       	push   $0x843be40
 80624e0:	68 c7 00 00 00       	push   $0xc7
 80624e5:	e8 a6 6e fe ff       	call   8049390 <write@plt>
 80624ea:	83 c4 0c             	add    $0xc,%esp
 80624ed:	6a 00                	push   $0x0
 80624ef:	68 e0 bd 43 08       	push   $0x843bde0
 80624f4:	ff 35 40 be 43 08    	pushl  0x843be40
 80624fa:	e8 41 6d fe ff       	call   8049240 <waitpid@plt>
 80624ff:	83 c4 0c             	add    $0xc,%esp
 8062502:	83 f8 00             	cmp    $0x0,%eax
 8062505:	7e 35                	jle    806253c <__afl_die>
 8062507:	6a 04                	push   $0x4
 8062509:	68 e0 bd 43 08       	push   $0x843bde0
 806250e:	68 c7 00 00 00       	push   $0xc7
 8062513:	e8 78 6e fe ff       	call   8049390 <write@plt>
 8062518:	83 c4 0c             	add    $0xc,%esp
 806251b:	eb 92                	jmp    80624af <__afl_fork_wait_loop>

0806251d <__afl_fork_resume>:
 806251d:	68 c6 00 00 00       	push   $0xc6
 8062522:	e8 d9 6f fe ff       	call   8049500 <close@plt>
 8062527:	68 c7 00 00 00       	push   $0xc7
 806252c:	e8 cf 6f fe ff       	call   8049500 <close@plt>
 8062531:	83 c4 08             	add    $0x8,%esp
 8062534:	5a                   	pop    %edx
 8062535:	59                   	pop    %ecx
 8062536:	58                   	pop    %eax
 8062537:	e9 ea fe ff ff       	jmp    8062426 <__afl_store>

0806253c <__afl_die>:
 806253c:	31 c0                	xor    %eax,%eax
 806253e:	e8 0d 6c fe ff       	call   8049150 <_exit@plt>

08062543 <__afl_setup_abort>:
 8062543:	fe 05 60 be 43 08    	incb   0x843be60
 8062549:	59                   	pop    %ecx
 806254a:	58                   	pop    %eax
 806254b:	e9 ee fe ff ff       	jmp    806243e <__afl_return>

08062550 <.AFL_SHM_ENV>:
 8062550:	5f                   	pop    %edi
 8062551:	5f                   	pop    %edi
 8062552:	41                   	inc    %ecx
 8062553:	46                   	inc    %esi
 8062554:	4c                   	dec    %esp
 8062555:	5f                   	pop    %edi
 8062556:	53                   	push   %ebx
 8062557:	48                   	dec    %eax
 8062558:	4d                   	dec    %ebp
 8062559:	5f                   	pop    %edi
 806255a:	49                   	dec    %ecx
 806255b:	44                   	inc    %esp
 806255c:	00 66 90             	add    %ah,-0x70(%esi)
 806255f:	90                   	nop

08062560 <dup_safer>:
/* Like dup, but do not return STDIN_FILENO, STDOUT_FILENO, or
   STDERR_FILENO.  */

int
dup_safer (int fd)
{
 8062560:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062564:	89 3c 24             	mov    %edi,(%esp)
 8062567:	89 54 24 04          	mov    %edx,0x4(%esp)
 806256b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806256f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062573:	b9 6b 32 00 00       	mov    $0x326b,%ecx
 8062578:	e8 2b 00 00 00       	call   80625a8 <__afl_maybe_log>
 806257d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062581:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062585:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062589:	8b 3c 24             	mov    (%esp),%edi
 806258c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062590:	83 ec 10             	sub    $0x10,%esp
  return fcntl (fd, F_DUPFD, STDERR_FILENO + 1);
 8062593:	6a 03                	push   $0x3
 8062595:	6a 00                	push   $0x0
 8062597:	ff 74 24 1c          	pushl  0x1c(%esp)
 806259b:	e8 40 1f 00 00       	call   80644e0 <rpl_fcntl>
}
 80625a0:	83 c4 1c             	add    $0x1c,%esp
 80625a3:	c3                   	ret    
 80625a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

080625a8 <__afl_maybe_log>:
 80625a8:	9f                   	lahf   
 80625a9:	0f 90 c0             	seto   %al
 80625ac:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 80625b2:	85 d2                	test   %edx,%edx
 80625b4:	74 22                	je     80625d8 <__afl_setup>

080625b6 <__afl_store>:
 80625b6:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 80625bc:	31 cf                	xor    %ecx,%edi
 80625be:	d1 e9                	shr    %ecx
 80625c0:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 80625c6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80625ca:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080625ce <__afl_return>:
 80625ce:	04 7f                	add    $0x7f,%al
 80625d0:	9e                   	sahf   
 80625d1:	c3                   	ret    
 80625d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080625d8 <__afl_setup>:
 80625d8:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 80625df:	75 ed                	jne    80625ce <__afl_return>
 80625e1:	50                   	push   %eax
 80625e2:	51                   	push   %ecx
 80625e3:	68 e0 26 06 08       	push   $0x80626e0
 80625e8:	e8 c3 6c fe ff       	call   80492b0 <getenv@plt>
 80625ed:	83 c4 04             	add    $0x4,%esp
 80625f0:	85 c0                	test   %eax,%eax
 80625f2:	0f 84 db 00 00 00    	je     80626d3 <__afl_setup_abort>
 80625f8:	50                   	push   %eax
 80625f9:	e8 82 6e fe ff       	call   8049480 <atoi@plt>
 80625fe:	83 c4 04             	add    $0x4,%esp
 8062601:	6a 00                	push   $0x0
 8062603:	6a 00                	push   $0x0
 8062605:	50                   	push   %eax
 8062606:	e8 d5 6b fe ff       	call   80491e0 <shmat@plt>
 806260b:	83 c4 0c             	add    $0xc,%esp
 806260e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8062611:	0f 84 bc 00 00 00    	je     80626d3 <__afl_setup_abort>
 8062617:	c6 00 01             	movb   $0x1,(%eax)
 806261a:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 806261f:	89 c2                	mov    %eax,%edx
 8062621:	59                   	pop    %ecx
 8062622:	58                   	pop    %eax

08062623 <__afl_forkserver>:
 8062623:	50                   	push   %eax
 8062624:	51                   	push   %ecx
 8062625:	52                   	push   %edx
 8062626:	6a 04                	push   $0x4
 8062628:	68 e0 bd 43 08       	push   $0x843bde0
 806262d:	68 c7 00 00 00       	push   $0xc7
 8062632:	e8 59 6d fe ff       	call   8049390 <write@plt>
 8062637:	83 c4 0c             	add    $0xc,%esp
 806263a:	83 f8 04             	cmp    $0x4,%eax
 806263d:	75 6e                	jne    80626ad <__afl_fork_resume>

0806263f <__afl_fork_wait_loop>:
 806263f:	6a 04                	push   $0x4
 8062641:	68 e0 bd 43 08       	push   $0x843bde0
 8062646:	68 c6 00 00 00       	push   $0xc6
 806264b:	e8 d0 6a fe ff       	call   8049120 <read@plt>
 8062650:	83 c4 0c             	add    $0xc,%esp
 8062653:	83 f8 04             	cmp    $0x4,%eax
 8062656:	75 74                	jne    80626cc <__afl_die>
 8062658:	e8 c3 6d fe ff       	call   8049420 <fork@plt>
 806265d:	83 f8 00             	cmp    $0x0,%eax
 8062660:	7c 6a                	jl     80626cc <__afl_die>
 8062662:	74 49                	je     80626ad <__afl_fork_resume>
 8062664:	a3 40 be 43 08       	mov    %eax,0x843be40
 8062669:	6a 04                	push   $0x4
 806266b:	68 40 be 43 08       	push   $0x843be40
 8062670:	68 c7 00 00 00       	push   $0xc7
 8062675:	e8 16 6d fe ff       	call   8049390 <write@plt>
 806267a:	83 c4 0c             	add    $0xc,%esp
 806267d:	6a 00                	push   $0x0
 806267f:	68 e0 bd 43 08       	push   $0x843bde0
 8062684:	ff 35 40 be 43 08    	pushl  0x843be40
 806268a:	e8 b1 6b fe ff       	call   8049240 <waitpid@plt>
 806268f:	83 c4 0c             	add    $0xc,%esp
 8062692:	83 f8 00             	cmp    $0x0,%eax
 8062695:	7e 35                	jle    80626cc <__afl_die>
 8062697:	6a 04                	push   $0x4
 8062699:	68 e0 bd 43 08       	push   $0x843bde0
 806269e:	68 c7 00 00 00       	push   $0xc7
 80626a3:	e8 e8 6c fe ff       	call   8049390 <write@plt>
 80626a8:	83 c4 0c             	add    $0xc,%esp
 80626ab:	eb 92                	jmp    806263f <__afl_fork_wait_loop>

080626ad <__afl_fork_resume>:
 80626ad:	68 c6 00 00 00       	push   $0xc6
 80626b2:	e8 49 6e fe ff       	call   8049500 <close@plt>
 80626b7:	68 c7 00 00 00       	push   $0xc7
 80626bc:	e8 3f 6e fe ff       	call   8049500 <close@plt>
 80626c1:	83 c4 08             	add    $0x8,%esp
 80626c4:	5a                   	pop    %edx
 80626c5:	59                   	pop    %ecx
 80626c6:	58                   	pop    %eax
 80626c7:	e9 ea fe ff ff       	jmp    80625b6 <__afl_store>

080626cc <__afl_die>:
 80626cc:	31 c0                	xor    %eax,%eax
 80626ce:	e8 7d 6a fe ff       	call   8049150 <_exit@plt>

080626d3 <__afl_setup_abort>:
 80626d3:	fe 05 60 be 43 08    	incb   0x843be60
 80626d9:	59                   	pop    %ecx
 80626da:	58                   	pop    %eax
 80626db:	e9 ee fe ff ff       	jmp    80625ce <__afl_return>

080626e0 <.AFL_SHM_ENV>:
 80626e0:	5f                   	pop    %edi
 80626e1:	5f                   	pop    %edi
 80626e2:	41                   	inc    %ecx
 80626e3:	46                   	inc    %esi
 80626e4:	4c                   	dec    %esp
 80626e5:	5f                   	pop    %edi
 80626e6:	53                   	push   %ebx
 80626e7:	48                   	dec    %eax
 80626e8:	4d                   	dec    %ebp
 80626e9:	5f                   	pop    %edi
 80626ea:	49                   	dec    %ecx
 80626eb:	44                   	inc    %esp
 80626ec:	00 66 90             	add    %ah,-0x70(%esi)
 80626ef:	90                   	nop

080626f0 <version_etc_arn>:
void
version_etc_arn (FILE *stream,
                 const char *command_name, const char *package,
                 const char *version,
                 const char * const * authors, size_t n_authors)
{
 80626f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80626f4:	89 3c 24             	mov    %edi,(%esp)
 80626f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80626fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80626ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062703:	b9 ee 7e 00 00       	mov    $0x7eee,%ecx
 8062708:	e8 73 0a 00 00       	call   8063180 <__afl_maybe_log>
 806270d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062711:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062715:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062719:	8b 3c 24             	mov    (%esp),%edi
 806271c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062720:	55                   	push   %ebp
 8062721:	57                   	push   %edi
 8062722:	56                   	push   %esi
 8062723:	53                   	push   %ebx
 8062724:	83 ec 2c             	sub    $0x2c,%esp
 8062727:	8b 44 24 44          	mov    0x44(%esp),%eax
 806272b:	8b 74 24 40          	mov    0x40(%esp),%esi
 806272f:	8b 54 24 48          	mov    0x48(%esp),%edx
 8062733:	8b 4c 24 4c          	mov    0x4c(%esp),%ecx
 8062737:	8b 5c 24 50          	mov    0x50(%esp),%ebx
 806273b:	8b 7c 24 54          	mov    0x54(%esp),%edi
  if (command_name)
 806273f:	85 c0                	test   %eax,%eax
 8062741:	0f 84 69 04 00 00    	je     8062bb0 <version_etc_arn+0x4c0>
 8062747:	90                   	nop
 8062748:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806274c:	89 3c 24             	mov    %edi,(%esp)
 806274f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062753:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062757:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806275b:	b9 12 57 00 00       	mov    $0x5712,%ecx
 8062760:	e8 1b 0a 00 00       	call   8063180 <__afl_maybe_log>
 8062765:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062769:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806276d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062771:	8b 3c 24             	mov    (%esp),%edi
 8062774:	8d 64 24 10          	lea    0x10(%esp),%esp

# ifdef __va_arg_pack
__fortify_function int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
 8062778:	83 ec 08             	sub    $0x8,%esp
 806277b:	51                   	push   %ecx
 806277c:	52                   	push   %edx
 806277d:	50                   	push   %eax
 806277e:	68 64 80 06 08       	push   $0x8068064
 8062783:	6a 01                	push   $0x1
 8062785:	56                   	push   %esi
 8062786:	e8 15 6d fe ff       	call   80494a0 <__fprintf_chk@plt>
 806278b:	83 c4 20             	add    $0x20,%esp
 806278e:	66 90                	xchg   %ax,%ax
#endif

  /* TRANSLATORS: Translate "(C)" to the copyright symbol
     (C-in-a-circle), if this symbol is available in the user's
     locale.  Otherwise, do not translate "(C)"; leave it as-is.  */
  fprintf (stream, version_etc_copyright, _("(C)"), COPYRIGHT_YEAR);
 8062790:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062794:	89 3c 24             	mov    %edi,(%esp)
 8062797:	89 54 24 04          	mov    %edx,0x4(%esp)
 806279b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806279f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80627a3:	b9 34 d6 00 00       	mov    $0xd634,%ecx
 80627a8:	e8 d3 09 00 00       	call   8063180 <__afl_maybe_log>
 80627ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80627b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80627b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80627b9:	8b 3c 24             	mov    (%esp),%edi
 80627bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80627c0:	83 ec 04             	sub    $0x4,%esp
 80627c3:	6a 05                	push   $0x5
 80627c5:	68 77 80 06 08       	push   $0x8068077
 80627ca:	6a 00                	push   $0x0
 80627cc:	e8 ff 69 fe ff       	call   80491d0 <dcgettext@plt>
 80627d1:	c7 04 24 df 07 00 00 	movl   $0x7df,(%esp)
 80627d8:	50                   	push   %eax
 80627d9:	68 80 83 06 08       	push   $0x8068380
 80627de:	6a 01                	push   $0x1
 80627e0:	56                   	push   %esi
 80627e1:	e8 ba 6c fe ff       	call   80494a0 <__fprintf_chk@plt>

  fputs (_("\
 80627e6:	83 c4 1c             	add    $0x1c,%esp
 80627e9:	6a 05                	push   $0x5
 80627eb:	68 00 81 06 08       	push   $0x8068100
 80627f0:	6a 00                	push   $0x0
 80627f2:	e8 d9 69 fe ff       	call   80491d0 <dcgettext@plt>
 80627f7:	5d                   	pop    %ebp
 80627f8:	5a                   	pop    %edx
 80627f9:	56                   	push   %esi
 80627fa:	50                   	push   %eax
 80627fb:	e8 20 6b fe ff       	call   8049320 <fputs_unlocked@plt>
There is NO WARRANTY, to the extent permitted by law.\n\
\n\
"),
         stream);

  switch (n_authors)
 8062800:	83 c4 10             	add    $0x10,%esp
 8062803:	83 ff 09             	cmp    $0x9,%edi
 8062806:	0f 87 c4 03 00 00    	ja     8062bd0 <version_etc_arn+0x4e0>
 806280c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062810:	89 3c 24             	mov    %edi,(%esp)
 8062813:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062817:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806281b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806281f:	b9 1e 9c 00 00       	mov    $0x9c1e,%ecx
 8062824:	e8 57 09 00 00       	call   8063180 <__afl_maybe_log>
 8062829:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806282d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062831:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062835:	8b 3c 24             	mov    (%esp),%edi
 8062838:	8d 64 24 10          	lea    0x10(%esp),%esp
 806283c:	ff 24 bd 44 83 06 08 	jmp    *0x8068344(,%edi,4)
 8062843:	90                   	nop
 8062844:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 8:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 8062848:	8b 6b 1c             	mov    0x1c(%ebx),%ebp
 806284b:	8b 53 10             	mov    0x10(%ebx),%edx
 806284e:	83 ec 04             	sub    $0x4,%esp
 8062851:	8b 4b 0c             	mov    0xc(%ebx),%ecx
 8062854:	8b 7b 08             	mov    0x8(%ebx),%edi
 8062857:	8b 43 18             	mov    0x18(%ebx),%eax
 806285a:	89 6c 24 1c          	mov    %ebp,0x1c(%esp)
 806285e:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8062862:	89 7c 24 14          	mov    %edi,0x14(%esp)
 8062866:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 806286a:	89 44 24 18          	mov    %eax,0x18(%esp)
 806286e:	8b 6b 14             	mov    0x14(%ebx),%ebp
 8062871:	8b 7b 04             	mov    0x4(%ebx),%edi
 8062874:	8b 1b                	mov    (%ebx),%ebx
 8062876:	6a 05                	push   $0x5
 8062878:	68 64 82 06 08       	push   $0x8068264
 806287d:	6a 00                	push   $0x0
 806287f:	e8 4c 69 fe ff       	call   80491d0 <dcgettext@plt>
 8062884:	83 c4 0c             	add    $0xc,%esp
 8062887:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 806288b:	52                   	push   %edx
 806288c:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8062890:	51                   	push   %ecx
 8062891:	55                   	push   %ebp
 8062892:	ff 74 24 18          	pushl  0x18(%esp)
 8062896:	ff 74 24 20          	pushl  0x20(%esp)
 806289a:	ff 74 24 28          	pushl  0x28(%esp)
 806289e:	57                   	push   %edi
 806289f:	90                   	nop
 80628a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80628a4:	89 3c 24             	mov    %edi,(%esp)
 80628a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80628ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80628af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80628b3:	b9 1f 6a 00 00       	mov    $0x6a1f,%ecx
 80628b8:	e8 c3 08 00 00       	call   8063180 <__afl_maybe_log>
 80628bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80628c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80628c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80628c9:	8b 3c 24             	mov    (%esp),%edi
 80628cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80628d0:	53                   	push   %ebx
 80628d1:	50                   	push   %eax
 80628d2:	6a 01                	push   $0x1
 80628d4:	56                   	push   %esi
 80628d5:	e8 c6 6b fe ff       	call   80494a0 <__fprintf_chk@plt>
 80628da:	83 c4 30             	add    $0x30,%esp
 80628dd:	8d 76 00             	lea    0x0(%esi),%esi
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 80628e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80628e4:	89 3c 24             	mov    %edi,(%esp)
 80628e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80628eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80628ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80628f3:	b9 87 51 00 00       	mov    $0x5187,%ecx
 80628f8:	e8 83 08 00 00       	call   8063180 <__afl_maybe_log>
 80628fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062901:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062905:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062909:	8b 3c 24             	mov    (%esp),%edi
 806290c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062910:	83 c4 2c             	add    $0x2c,%esp
 8062913:	5b                   	pop    %ebx
 8062914:	5e                   	pop    %esi
 8062915:	5f                   	pop    %edi
 8062916:	5d                   	pop    %ebp
 8062917:	c3                   	ret    
 8062918:	90                   	nop
 8062919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 9:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 8062920:	8b 53 20             	mov    0x20(%ebx),%edx
 8062923:	8b 43 1c             	mov    0x1c(%ebx),%eax
 8062926:	83 ec 04             	sub    $0x4,%esp
 8062929:	8b 7b 10             	mov    0x10(%ebx),%edi
 806292c:	8b 4b 14             	mov    0x14(%ebx),%ecx
 806292f:	8b 6b 18             	mov    0x18(%ebx),%ebp
 8062932:	89 54 24 20          	mov    %edx,0x20(%esp)
 8062936:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 806293a:	8b 53 0c             	mov    0xc(%ebx),%edx
 806293d:	8b 43 08             	mov    0x8(%ebx),%eax
 8062940:	89 7c 24 10          	mov    %edi,0x10(%esp)
 8062944:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 8062948:	8b 7b 04             	mov    0x4(%ebx),%edi
 806294b:	8b 1b                	mov    (%ebx),%ebx
 806294d:	89 54 24 14          	mov    %edx,0x14(%esp)
 8062951:	89 44 24 18          	mov    %eax,0x18(%esp)
 8062955:	6a 05                	push   $0x5
 8062957:	68 94 82 06 08       	push   $0x8068294
      /* 10 or more authors.  Use an abbreviation, since the human reader
         will probably not want to read the entire list anyway.  */
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 806295c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062960:	89 3c 24             	mov    %edi,(%esp)
 8062963:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062967:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806296b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806296f:	b9 92 5f 00 00       	mov    $0x5f92,%ecx
 8062974:	e8 07 08 00 00       	call   8063180 <__afl_maybe_log>
 8062979:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806297d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062981:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062985:	8b 3c 24             	mov    (%esp),%edi
 8062988:	8d 64 24 10          	lea    0x10(%esp),%esp
 806298c:	6a 00                	push   $0x0
 806298e:	e8 3d 68 fe ff       	call   80491d0 <dcgettext@plt>
 8062993:	8b 54 24 2c          	mov    0x2c(%esp),%edx
 8062997:	52                   	push   %edx
 8062998:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
 806299c:	51                   	push   %ecx
 806299d:	55                   	push   %ebp
 806299e:	ff 74 24 24          	pushl  0x24(%esp)
 80629a2:	ff 74 24 2c          	pushl  0x2c(%esp)
 80629a6:	ff 74 24 34          	pushl  0x34(%esp)
 80629aa:	ff 74 24 3c          	pushl  0x3c(%esp)
 80629ae:	57                   	push   %edi
 80629af:	53                   	push   %ebx
 80629b0:	50                   	push   %eax
 80629b1:	6a 01                	push   $0x1
 80629b3:	56                   	push   %esi
 80629b4:	e8 e7 6a fe ff       	call   80494a0 <__fprintf_chk@plt>
 80629b9:	83 c4 40             	add    $0x40,%esp
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 80629bc:	83 c4 2c             	add    $0x2c,%esp
 80629bf:	5b                   	pop    %ebx
 80629c0:	5e                   	pop    %esi
 80629c1:	5f                   	pop    %edi
 80629c2:	5d                   	pop    %ebp
 80629c3:	c3                   	ret    
 80629c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

  switch (n_authors)
    {
    case 0:
      /* The caller must provide at least one author name.  */
      abort ();
 80629c8:	e8 13 6b fe ff       	call   80494e0 <abort@plt>
 80629cd:	8d 76 00             	lea    0x0(%esi),%esi
    case 1:
      /* TRANSLATORS: %s denotes an author name.  */
      fprintf (stream, _("Written by %s.\n"), authors[0]);
 80629d0:	83 ec 04             	sub    $0x4,%esp
 80629d3:	8b 1b                	mov    (%ebx),%ebx
 80629d5:	6a 05                	push   $0x5
 80629d7:	68 7b 80 06 08       	push   $0x806807b
 80629dc:	6a 00                	push   $0x0
 80629de:	e8 ed 67 fe ff       	call   80491d0 <dcgettext@plt>
 80629e3:	89 5c 24 5c          	mov    %ebx,0x5c(%esp)
 80629e7:	89 74 24 50          	mov    %esi,0x50(%esp)
 80629eb:	89 44 24 58          	mov    %eax,0x58(%esp)
 80629ef:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%esp)
 80629f6:	00 
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 80629f7:	83 c4 3c             	add    $0x3c,%esp
 80629fa:	5b                   	pop    %ebx
 80629fb:	5e                   	pop    %esi
 80629fc:	5f                   	pop    %edi
 80629fd:	5d                   	pop    %ebp
 80629fe:	e9 9d 6a fe ff       	jmp    80494a0 <__fprintf_chk@plt>
 8062a03:	90                   	nop
 8062a04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      /* TRANSLATORS: %s denotes an author name.  */
      fprintf (stream, _("Written by %s.\n"), authors[0]);
      break;
    case 2:
      /* TRANSLATORS: Each %s denotes an author name.  */
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
 8062a08:	83 ec 04             	sub    $0x4,%esp
 8062a0b:	8b 6b 04             	mov    0x4(%ebx),%ebp
 8062a0e:	8b 3b                	mov    (%ebx),%edi
 8062a10:	6a 05                	push   $0x5
 8062a12:	68 8b 80 06 08       	push   $0x806808b
 8062a17:	6a 00                	push   $0x0
 8062a19:	e8 b2 67 fe ff       	call   80491d0 <dcgettext@plt>
 8062a1e:	89 6c 24 60          	mov    %ebp,0x60(%esp)
 8062a22:	89 7c 24 5c          	mov    %edi,0x5c(%esp)
 8062a26:	89 74 24 50          	mov    %esi,0x50(%esp)
 8062a2a:	89 44 24 58          	mov    %eax,0x58(%esp)
 8062a2e:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%esp)
 8062a35:	00 
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 8062a36:	83 c4 3c             	add    $0x3c,%esp
 8062a39:	5b                   	pop    %ebx
 8062a3a:	5e                   	pop    %esi
 8062a3b:	5f                   	pop    %edi
 8062a3c:	5d                   	pop    %ebp
 8062a3d:	e9 5e 6a fe ff       	jmp    80494a0 <__fprintf_chk@plt>
 8062a42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      /* TRANSLATORS: Each %s denotes an author name.  */
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
      break;
    case 3:
      /* TRANSLATORS: Each %s denotes an author name.  */
      fprintf (stream, _("Written by %s, %s, and %s.\n"),
 8062a48:	83 ec 04             	sub    $0x4,%esp
 8062a4b:	8b 6b 08             	mov    0x8(%ebx),%ebp
 8062a4e:	8b 7b 04             	mov    0x4(%ebx),%edi
 8062a51:	8b 1b                	mov    (%ebx),%ebx
 8062a53:	6a 05                	push   $0x5
 8062a55:	68 a2 80 06 08       	push   $0x80680a2
 8062a5a:	6a 00                	push   $0x0
 8062a5c:	e8 6f 67 fe ff       	call   80491d0 <dcgettext@plt>
 8062a61:	89 6c 24 64          	mov    %ebp,0x64(%esp)
 8062a65:	89 7c 24 60          	mov    %edi,0x60(%esp)
 8062a69:	89 5c 24 5c          	mov    %ebx,0x5c(%esp)
 8062a6d:	89 74 24 50          	mov    %esi,0x50(%esp)
 8062a71:	89 44 24 58          	mov    %eax,0x58(%esp)
 8062a75:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%esp)
 8062a7c:	00 
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 8062a7d:	83 c4 3c             	add    $0x3c,%esp
 8062a80:	5b                   	pop    %ebx
 8062a81:	5e                   	pop    %esi
 8062a82:	5f                   	pop    %edi
 8062a83:	5d                   	pop    %ebp
 8062a84:	e9 17 6a fe ff       	jmp    80494a0 <__fprintf_chk@plt>
 8062a89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 4:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\nand %s.\n"),
 8062a90:	8b 43 0c             	mov    0xc(%ebx),%eax
 8062a93:	83 ec 04             	sub    $0x4,%esp
 8062a96:	8b 6b 08             	mov    0x8(%ebx),%ebp
 8062a99:	8b 7b 04             	mov    0x4(%ebx),%edi
 8062a9c:	8b 1b                	mov    (%ebx),%ebx
 8062a9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062aa2:	6a 05                	push   $0x5
 8062aa4:	68 cc 81 06 08       	push   $0x80681cc
 8062aa9:	6a 00                	push   $0x0
 8062aab:	e8 20 67 fe ff       	call   80491d0 <dcgettext@plt>
 8062ab0:	83 c4 0c             	add    $0xc,%esp
 8062ab3:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8062ab7:	51                   	push   %ecx
 8062ab8:	55                   	push   %ebp
 8062ab9:	57                   	push   %edi
 8062aba:	53                   	push   %ebx
 8062abb:	50                   	push   %eax
 8062abc:	6a 01                	push   $0x1
 8062abe:	56                   	push   %esi
 8062abf:	e8 dc 69 fe ff       	call   80494a0 <__fprintf_chk@plt>
 8062ac4:	83 c4 20             	add    $0x20,%esp
 8062ac7:	e9 11 fe ff ff       	jmp    80628dd <version_etc_arn+0x1ed>
 8062acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 5:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\n%s, and %s.\n"),
 8062ad0:	8b 6b 0c             	mov    0xc(%ebx),%ebp
 8062ad3:	8b 43 10             	mov    0x10(%ebx),%eax
 8062ad6:	83 ec 04             	sub    $0x4,%esp
 8062ad9:	8b 7b 04             	mov    0x4(%ebx),%edi
 8062adc:	89 6c 24 0c          	mov    %ebp,0xc(%esp)
 8062ae0:	89 44 24 10          	mov    %eax,0x10(%esp)
 8062ae4:	8b 6b 08             	mov    0x8(%ebx),%ebp
 8062ae7:	8b 1b                	mov    (%ebx),%ebx
 8062ae9:	6a 05                	push   $0x5
 8062aeb:	68 ec 81 06 08       	push   $0x80681ec
 8062af0:	6a 00                	push   $0x0
 8062af2:	e8 d9 66 fe ff       	call   80491d0 <dcgettext@plt>
 8062af7:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8062afb:	51                   	push   %ecx
 8062afc:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8062b00:	52                   	push   %edx
 8062b01:	55                   	push   %ebp
 8062b02:	57                   	push   %edi
 8062b03:	53                   	push   %ebx
 8062b04:	50                   	push   %eax
 8062b05:	6a 01                	push   $0x1
 8062b07:	56                   	push   %esi
 8062b08:	e8 93 69 fe ff       	call   80494a0 <__fprintf_chk@plt>
 8062b0d:	83 c4 30             	add    $0x30,%esp
 8062b10:	e9 c8 fd ff ff       	jmp    80628dd <version_etc_arn+0x1ed>
 8062b15:	8d 76 00             	lea    0x0(%esi),%esi
      break;
    case 6:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, and %s.\n"),
 8062b18:	8b 6b 10             	mov    0x10(%ebx),%ebp
 8062b1b:	8b 53 04             	mov    0x4(%ebx),%edx
 8062b1e:	83 ec 04             	sub    $0x4,%esp
 8062b21:	8b 43 14             	mov    0x14(%ebx),%eax
 8062b24:	8b 7b 08             	mov    0x8(%ebx),%edi
 8062b27:	89 6c 24 10          	mov    %ebp,0x10(%esp)
 8062b2b:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8062b2f:	89 44 24 14          	mov    %eax,0x14(%esp)
 8062b33:	8b 6b 0c             	mov    0xc(%ebx),%ebp
 8062b36:	8b 1b                	mov    (%ebx),%ebx
 8062b38:	6a 05                	push   $0x5
 8062b3a:	68 10 82 06 08       	push   $0x8068210
 8062b3f:	6a 00                	push   $0x0
 8062b41:	e8 8a 66 fe ff       	call   80491d0 <dcgettext@plt>
 8062b46:	8b 4c 24 20          	mov    0x20(%esp),%ecx
 8062b4a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8062b4e:	89 0c 24             	mov    %ecx,(%esp)
 8062b51:	52                   	push   %edx
 8062b52:	55                   	push   %ebp
 8062b53:	57                   	push   %edi
 8062b54:	ff 74 24 24          	pushl  0x24(%esp)
 8062b58:	e9 42 fd ff ff       	jmp    806289f <version_etc_arn+0x1af>
 8062b5d:	8d 76 00             	lea    0x0(%esi),%esi
      break;
    case 7:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"),
 8062b60:	8b 6b 14             	mov    0x14(%ebx),%ebp
 8062b63:	8b 53 08             	mov    0x8(%ebx),%edx
 8062b66:	83 ec 04             	sub    $0x4,%esp
 8062b69:	8b 4b 04             	mov    0x4(%ebx),%ecx
 8062b6c:	8b 43 18             	mov    0x18(%ebx),%eax
 8062b6f:	8b 7b 0c             	mov    0xc(%ebx),%edi
 8062b72:	89 6c 24 14          	mov    %ebp,0x14(%esp)
 8062b76:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8062b7a:	89 44 24 18          	mov    %eax,0x18(%esp)
 8062b7e:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 8062b82:	8b 6b 10             	mov    0x10(%ebx),%ebp
 8062b85:	8b 1b                	mov    (%ebx),%ebx
 8062b87:	6a 05                	push   $0x5
 8062b89:	68 38 82 06 08       	push   $0x8068238
 8062b8e:	6a 00                	push   $0x0
 8062b90:	e8 3b 66 fe ff       	call   80491d0 <dcgettext@plt>
 8062b95:	5a                   	pop    %edx
 8062b96:	59                   	pop    %ecx
 8062b97:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8062b9b:	52                   	push   %edx
 8062b9c:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8062ba0:	51                   	push   %ecx
 8062ba1:	55                   	push   %ebp
 8062ba2:	57                   	push   %edi
 8062ba3:	ff 74 24 20          	pushl  0x20(%esp)
 8062ba7:	ff 74 24 28          	pushl  0x28(%esp)
 8062bab:	e9 ef fc ff ff       	jmp    806289f <version_etc_arn+0x1af>
 8062bb0:	83 ec 0c             	sub    $0xc,%esp
 8062bb3:	51                   	push   %ecx
 8062bb4:	52                   	push   %edx
 8062bb5:	68 70 80 06 08       	push   $0x8068070
 8062bba:	6a 01                	push   $0x1
 8062bbc:	56                   	push   %esi
 8062bbd:	e8 de 68 fe ff       	call   80494a0 <__fprintf_chk@plt>
 8062bc2:	83 c4 20             	add    $0x20,%esp
 8062bc5:	e9 c4 fb ff ff       	jmp    806278e <version_etc_arn+0x9e>
 8062bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      /* 10 or more authors.  Use an abbreviation, since the human reader
         will probably not want to read the entire list anyway.  */
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 8062bd0:	8b 4b 1c             	mov    0x1c(%ebx),%ecx
 8062bd3:	8b 6b 20             	mov    0x20(%ebx),%ebp
 8062bd6:	83 ec 04             	sub    $0x4,%esp
 8062bd9:	8b 7b 14             	mov    0x14(%ebx),%edi
 8062bdc:	8b 53 10             	mov    0x10(%ebx),%edx
 8062bdf:	8b 43 0c             	mov    0xc(%ebx),%eax
 8062be2:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 8062be6:	8b 4b 08             	mov    0x8(%ebx),%ecx
 8062be9:	89 6c 24 20          	mov    %ebp,0x20(%esp)
 8062bed:	89 7c 24 0c          	mov    %edi,0xc(%esp)
 8062bf1:	89 54 24 10          	mov    %edx,0x10(%esp)
 8062bf5:	89 44 24 14          	mov    %eax,0x14(%esp)
 8062bf9:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 8062bfd:	8b 6b 18             	mov    0x18(%ebx),%ebp
 8062c00:	8b 7b 04             	mov    0x4(%ebx),%edi
 8062c03:	8b 1b                	mov    (%ebx),%ebx
 8062c05:	6a 05                	push   $0x5
 8062c07:	68 c8 82 06 08       	push   $0x80682c8
 8062c0c:	e9 4b fd ff ff       	jmp    806295c <version_etc_arn+0x26c>
 8062c11:	eb 0d                	jmp    8062c20 <version_etc_ar>
 8062c13:	90                   	nop
 8062c14:	90                   	nop
 8062c15:	90                   	nop
 8062c16:	90                   	nop
 8062c17:	90                   	nop
 8062c18:	90                   	nop
 8062c19:	90                   	nop
 8062c1a:	90                   	nop
 8062c1b:	90                   	nop
 8062c1c:	90                   	nop
 8062c1d:	90                   	nop
 8062c1e:	90                   	nop
 8062c1f:	90                   	nop

08062c20 <version_etc_ar>:
   Author names are given in the NULL-terminated array AUTHORS. */
void
version_etc_ar (FILE *stream,
                const char *command_name, const char *package,
                const char *version, const char * const * authors)
{
 8062c20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062c24:	89 3c 24             	mov    %edi,(%esp)
 8062c27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062c2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062c2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062c33:	b9 03 69 00 00       	mov    $0x6903,%ecx
 8062c38:	e8 43 05 00 00       	call   8063180 <__afl_maybe_log>
 8062c3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062c41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062c45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062c49:	8b 3c 24             	mov    (%esp),%edi
 8062c4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062c50:	83 ec 0c             	sub    $0xc,%esp
  size_t n_authors;

  for (n_authors = 0; authors[n_authors]; n_authors++)
 8062c53:	31 c0                	xor    %eax,%eax
   Author names are given in the NULL-terminated array AUTHORS. */
void
version_etc_ar (FILE *stream,
                const char *command_name, const char *package,
                const char *version, const char * const * authors)
{
 8062c55:	8b 54 24 20          	mov    0x20(%esp),%edx
  size_t n_authors;

  for (n_authors = 0; authors[n_authors]; n_authors++)
 8062c59:	8b 0a                	mov    (%edx),%ecx
 8062c5b:	85 c9                	test   %ecx,%ecx
 8062c5d:	74 6d                	je     8062ccc <version_etc_ar+0xac>
 8062c5f:	90                   	nop
 8062c60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062c64:	89 3c 24             	mov    %edi,(%esp)
 8062c67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062c6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062c6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062c73:	b9 d3 9d 00 00       	mov    $0x9dd3,%ecx
 8062c78:	e8 03 05 00 00       	call   8063180 <__afl_maybe_log>
 8062c7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062c81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062c85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062c89:	8b 3c 24             	mov    (%esp),%edi
 8062c8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062c90:	83 c0 01             	add    $0x1,%eax
 8062c93:	8b 0c 82             	mov    (%edx,%eax,4),%ecx
 8062c96:	85 c9                	test   %ecx,%ecx
 8062c98:	75 f6                	jne    8062c90 <version_etc_ar+0x70>
 8062c9a:	66 90                	xchg   %ax,%ax
 8062c9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062ca0:	89 3c 24             	mov    %edi,(%esp)
 8062ca3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062ca7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062cab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062caf:	b9 dd 3e 00 00       	mov    $0x3edd,%ecx
 8062cb4:	e8 c7 04 00 00       	call   8063180 <__afl_maybe_log>
 8062cb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062cbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062cc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062cc5:	8b 3c 24             	mov    (%esp),%edi
 8062cc8:	8d 64 24 10          	lea    0x10(%esp),%esp
    ;
  version_etc_arn (stream, command_name, package, version, authors, n_authors);
 8062ccc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062cd0:	89 3c 24             	mov    %edi,(%esp)
 8062cd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062cd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062cdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062cdf:	b9 53 11 00 00       	mov    $0x1153,%ecx
 8062ce4:	e8 97 04 00 00       	call   8063180 <__afl_maybe_log>
 8062ce9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062ced:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062cf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062cf5:	8b 3c 24             	mov    (%esp),%edi
 8062cf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062cfc:	83 ec 08             	sub    $0x8,%esp
 8062cff:	50                   	push   %eax
 8062d00:	52                   	push   %edx
 8062d01:	ff 74 24 2c          	pushl  0x2c(%esp)
 8062d05:	ff 74 24 2c          	pushl  0x2c(%esp)
 8062d09:	ff 74 24 2c          	pushl  0x2c(%esp)
 8062d0d:	ff 74 24 2c          	pushl  0x2c(%esp)
 8062d11:	e8 da f9 ff ff       	call   80626f0 <version_etc_arn>
}
 8062d16:	83 c4 2c             	add    $0x2c,%esp
 8062d19:	c3                   	ret    
 8062d1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08062d20 <version_etc_va>:
   Author names are given in the NULL-terminated va_list AUTHORS. */
void
version_etc_va (FILE *stream,
                const char *command_name, const char *package,
                const char *version, va_list authors)
{
 8062d20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062d24:	89 3c 24             	mov    %edi,(%esp)
 8062d27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062d2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062d2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062d33:	b9 ef 95 00 00       	mov    $0x95ef,%ecx
 8062d38:	e8 43 04 00 00       	call   8063180 <__afl_maybe_log>
 8062d3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062d41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062d45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062d49:	8b 3c 24             	mov    (%esp),%edi
 8062d4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062d50:	83 ec 3c             	sub    $0x3c,%esp
 8062d53:	8b 44 24 50          	mov    0x50(%esp),%eax
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
 8062d57:	8b 10                	mov    (%eax),%edx
 8062d59:	85 d2                	test   %edx,%edx
 8062d5b:	89 54 24 08          	mov    %edx,0x8(%esp)
 8062d5f:	0f 84 9b 02 00 00    	je     8063000 <version_etc_va+0x2e0>
 8062d65:	8d 76 00             	lea    0x0(%esi),%esi
 8062d68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062d6c:	89 3c 24             	mov    %edi,(%esp)
 8062d6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062d73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062d77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062d7b:	b9 87 e7 00 00       	mov    $0xe787,%ecx
 8062d80:	e8 fb 03 00 00       	call   8063180 <__afl_maybe_log>
 8062d85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062d89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062d8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062d91:	8b 3c 24             	mov    (%esp),%edi
 8062d94:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062d98:	8b 48 04             	mov    0x4(%eax),%ecx
 8062d9b:	85 c9                	test   %ecx,%ecx
 8062d9d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 8062da1:	0f 84 61 02 00 00    	je     8063008 <version_etc_va+0x2e8>
 8062da7:	90                   	nop
 8062da8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062dac:	89 3c 24             	mov    %edi,(%esp)
 8062daf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062db3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062db7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062dbb:	b9 9c c8 00 00       	mov    $0xc89c,%ecx
 8062dc0:	e8 bb 03 00 00       	call   8063180 <__afl_maybe_log>
 8062dc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062dc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062dcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062dd1:	8b 3c 24             	mov    (%esp),%edi
 8062dd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062dd8:	8b 50 08             	mov    0x8(%eax),%edx
 8062ddb:	85 d2                	test   %edx,%edx
 8062ddd:	89 54 24 10          	mov    %edx,0x10(%esp)
 8062de1:	0f 84 29 02 00 00    	je     8063010 <version_etc_va+0x2f0>
 8062de7:	90                   	nop
 8062de8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062dec:	89 3c 24             	mov    %edi,(%esp)
 8062def:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062df3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062df7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062dfb:	b9 dd ec 00 00       	mov    $0xecdd,%ecx
 8062e00:	e8 7b 03 00 00       	call   8063180 <__afl_maybe_log>
 8062e05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062e09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062e0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062e11:	8b 3c 24             	mov    (%esp),%edi
 8062e14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062e18:	8b 48 0c             	mov    0xc(%eax),%ecx
 8062e1b:	85 c9                	test   %ecx,%ecx
 8062e1d:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 8062e21:	0f 84 f9 01 00 00    	je     8063020 <version_etc_va+0x300>
 8062e27:	90                   	nop
 8062e28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062e2c:	89 3c 24             	mov    %edi,(%esp)
 8062e2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062e33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062e37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062e3b:	b9 6a 4f 00 00       	mov    $0x4f6a,%ecx
 8062e40:	e8 3b 03 00 00       	call   8063180 <__afl_maybe_log>
 8062e45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062e49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062e4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062e51:	8b 3c 24             	mov    (%esp),%edi
 8062e54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062e58:	8b 50 10             	mov    0x10(%eax),%edx
 8062e5b:	85 d2                	test   %edx,%edx
 8062e5d:	89 54 24 18          	mov    %edx,0x18(%esp)
 8062e61:	0f 84 c9 01 00 00    	je     8063030 <version_etc_va+0x310>
 8062e67:	90                   	nop
 8062e68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062e6c:	89 3c 24             	mov    %edi,(%esp)
 8062e6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062e73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062e77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062e7b:	b9 96 74 00 00       	mov    $0x7496,%ecx
 8062e80:	e8 fb 02 00 00       	call   8063180 <__afl_maybe_log>
 8062e85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062e89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062e8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062e91:	8b 3c 24             	mov    (%esp),%edi
 8062e94:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062e98:	8b 48 14             	mov    0x14(%eax),%ecx
 8062e9b:	85 c9                	test   %ecx,%ecx
 8062e9d:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 8062ea1:	0f 84 99 01 00 00    	je     8063040 <version_etc_va+0x320>
 8062ea7:	90                   	nop
 8062ea8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062eac:	89 3c 24             	mov    %edi,(%esp)
 8062eaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062eb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062eb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062ebb:	b9 f6 9d 00 00       	mov    $0x9df6,%ecx
 8062ec0:	e8 bb 02 00 00       	call   8063180 <__afl_maybe_log>
 8062ec5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062ec9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062ecd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062ed1:	8b 3c 24             	mov    (%esp),%edi
 8062ed4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062ed8:	8b 50 18             	mov    0x18(%eax),%edx
 8062edb:	85 d2                	test   %edx,%edx
 8062edd:	89 54 24 20          	mov    %edx,0x20(%esp)
 8062ee1:	0f 84 69 01 00 00    	je     8063050 <version_etc_va+0x330>
 8062ee7:	90                   	nop
 8062ee8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062eec:	89 3c 24             	mov    %edi,(%esp)
 8062eef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062ef3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062ef7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062efb:	b9 ca b6 00 00       	mov    $0xb6ca,%ecx
 8062f00:	e8 7b 02 00 00       	call   8063180 <__afl_maybe_log>
 8062f05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062f09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062f0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062f11:	8b 3c 24             	mov    (%esp),%edi
 8062f14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062f18:	8b 48 1c             	mov    0x1c(%eax),%ecx
 8062f1b:	85 c9                	test   %ecx,%ecx
 8062f1d:	89 4c 24 24          	mov    %ecx,0x24(%esp)
 8062f21:	0f 84 39 01 00 00    	je     8063060 <version_etc_va+0x340>
 8062f27:	90                   	nop
 8062f28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062f2c:	89 3c 24             	mov    %edi,(%esp)
 8062f2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062f33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062f37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062f3b:	b9 c8 6d 00 00       	mov    $0x6dc8,%ecx
 8062f40:	e8 3b 02 00 00       	call   8063180 <__afl_maybe_log>
 8062f45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062f49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062f4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062f51:	8b 3c 24             	mov    (%esp),%edi
 8062f54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062f58:	8b 50 20             	mov    0x20(%eax),%edx
 8062f5b:	85 d2                	test   %edx,%edx
 8062f5d:	89 54 24 28          	mov    %edx,0x28(%esp)
 8062f61:	0f 84 09 01 00 00    	je     8063070 <version_etc_va+0x350>
 8062f67:	90                   	nop
 8062f68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062f6c:	89 3c 24             	mov    %edi,(%esp)
 8062f6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062f73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062f77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062f7b:	b9 8a cf 00 00       	mov    $0xcf8a,%ecx
 8062f80:	e8 fb 01 00 00       	call   8063180 <__afl_maybe_log>
 8062f85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062f89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062f8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062f91:	8b 3c 24             	mov    (%esp),%edi
 8062f94:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062f98:	8b 48 24             	mov    0x24(%eax),%ecx
       n_authors++)
 8062f9b:	83 f9 01             	cmp    $0x1,%ecx
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
 8062f9e:	89 4c 24 2c          	mov    %ecx,0x2c(%esp)
       n_authors++)
 8062fa2:	19 c0                	sbb    %eax,%eax
 8062fa4:	83 c0 0a             	add    $0xa,%eax
 8062fa7:	90                   	nop
    ;
  version_etc_arn (stream, command_name, package, version,
 8062fa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062fac:	89 3c 24             	mov    %edi,(%esp)
 8062faf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062fb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062fb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062fbb:	b9 2c 65 00 00       	mov    $0x652c,%ecx
 8062fc0:	e8 bb 01 00 00       	call   8063180 <__afl_maybe_log>
 8062fc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062fc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062fcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062fd1:	8b 3c 24             	mov    (%esp),%edi
 8062fd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062fd8:	83 ec 08             	sub    $0x8,%esp
 8062fdb:	50                   	push   %eax
 8062fdc:	8d 54 24 14          	lea    0x14(%esp),%edx
 8062fe0:	52                   	push   %edx
 8062fe1:	ff 74 24 5c          	pushl  0x5c(%esp)
 8062fe5:	ff 74 24 5c          	pushl  0x5c(%esp)
 8062fe9:	ff 74 24 5c          	pushl  0x5c(%esp)
 8062fed:	ff 74 24 5c          	pushl  0x5c(%esp)
 8062ff1:	e8 fa f6 ff ff       	call   80626f0 <version_etc_arn>
                   authtab, n_authors);
}
 8062ff6:	83 c4 5c             	add    $0x5c,%esp
 8062ff9:	c3                   	ret    
 8062ffa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
                const char *version, va_list authors)
{
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
 8063000:	31 c0                	xor    %eax,%eax
 8063002:	eb a3                	jmp    8062fa7 <version_etc_va+0x287>
 8063004:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
       n_authors++)
 8063008:	b8 01 00 00 00       	mov    $0x1,%eax
 806300d:	eb 98                	jmp    8062fa7 <version_etc_va+0x287>
 806300f:	90                   	nop
 8063010:	b8 02 00 00 00       	mov    $0x2,%eax
 8063015:	eb 90                	jmp    8062fa7 <version_etc_va+0x287>
 8063017:	89 f6                	mov    %esi,%esi
 8063019:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 8063020:	b8 03 00 00 00       	mov    $0x3,%eax
 8063025:	eb 80                	jmp    8062fa7 <version_etc_va+0x287>
 8063027:	89 f6                	mov    %esi,%esi
 8063029:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 8063030:	b8 04 00 00 00       	mov    $0x4,%eax
 8063035:	e9 6d ff ff ff       	jmp    8062fa7 <version_etc_va+0x287>
 806303a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8063040:	b8 05 00 00 00       	mov    $0x5,%eax
 8063045:	e9 5d ff ff ff       	jmp    8062fa7 <version_etc_va+0x287>
 806304a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8063050:	b8 06 00 00 00       	mov    $0x6,%eax
 8063055:	e9 4d ff ff ff       	jmp    8062fa7 <version_etc_va+0x287>
 806305a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8063060:	b8 07 00 00 00       	mov    $0x7,%eax
 8063065:	e9 3d ff ff ff       	jmp    8062fa7 <version_etc_va+0x287>
 806306a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8063070:	b8 08 00 00 00       	mov    $0x8,%eax
 8063075:	e9 2d ff ff ff       	jmp    8062fa7 <version_etc_va+0x287>
 806307a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08063080 <version_etc>:
   NULL argument at the end.  */
void
version_etc (FILE *stream,
             const char *command_name, const char *package,
             const char *version, /* const char *author1, ...*/ ...)
{
 8063080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063084:	89 3c 24             	mov    %edi,(%esp)
 8063087:	89 54 24 04          	mov    %edx,0x4(%esp)
 806308b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806308f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063093:	b9 fb af 00 00       	mov    $0xaffb,%ecx
 8063098:	e8 e3 00 00 00       	call   8063180 <__afl_maybe_log>
 806309d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80630a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80630a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80630a9:	8b 3c 24             	mov    (%esp),%edi
 80630ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80630b0:	83 ec 0c             	sub    $0xc,%esp
  va_list authors;

  va_start (authors, version);
 80630b3:	8d 44 24 20          	lea    0x20(%esp),%eax
  version_etc_va (stream, command_name, package, version, authors);
 80630b7:	83 ec 0c             	sub    $0xc,%esp
 80630ba:	50                   	push   %eax
 80630bb:	ff 74 24 2c          	pushl  0x2c(%esp)
 80630bf:	ff 74 24 2c          	pushl  0x2c(%esp)
 80630c3:	ff 74 24 2c          	pushl  0x2c(%esp)
 80630c7:	ff 74 24 2c          	pushl  0x2c(%esp)
 80630cb:	e8 50 fc ff ff       	call   8062d20 <version_etc_va>
  va_end (authors);
}
 80630d0:	83 c4 2c             	add    $0x2c,%esp
 80630d3:	c3                   	ret    
 80630d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80630da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

080630e0 <emit_bug_reporting_address>:

void
emit_bug_reporting_address (void)
{
 80630e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80630e4:	89 3c 24             	mov    %edi,(%esp)
 80630e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80630eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80630ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80630f3:	b9 49 9b 00 00       	mov    $0x9b49,%ecx
 80630f8:	e8 83 00 00 00       	call   8063180 <__afl_maybe_log>
 80630fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063101:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063105:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063109:	8b 3c 24             	mov    (%esp),%edi
 806310c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063110:	53                   	push   %ebx
 8063111:	83 ec 0c             	sub    $0xc,%esp
  /* TRANSLATORS: The placeholder indicates the bug-reporting address
     for this package.  Please add _another line_ saying
     "Report translation bugs to <...>\n" with the address for translation
     bugs (typically your translation team's web or email address).  */
  printf (_("\nReport bugs to: %s\n"), PACKAGE_BUGREPORT);
 8063114:	6a 05                	push   $0x5
 8063116:	68 be 80 06 08       	push   $0x80680be
 806311b:	6a 00                	push   $0x0
 806311d:	e8 ae 60 fe ff       	call   80491d0 <dcgettext@plt>
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 8063122:	83 c4 0c             	add    $0xc,%esp
 8063125:	68 d3 80 06 08       	push   $0x80680d3
 806312a:	50                   	push   %eax
 806312b:	6a 01                	push   $0x1
 806312d:	e8 de 62 fe ff       	call   8049410 <__printf_chk@plt>
#ifdef PACKAGE_PACKAGER_BUG_REPORTS
  printf (_("Report %s bugs to: %s\n"), PACKAGE_PACKAGER,
          PACKAGE_PACKAGER_BUG_REPORTS);
#endif
#ifdef PACKAGE_URL
  printf (_("%s home page: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
 8063132:	83 c4 0c             	add    $0xc,%esp
 8063135:	6a 05                	push   $0x5
 8063137:	68 e9 80 06 08       	push   $0x80680e9
 806313c:	6a 00                	push   $0x0
 806313e:	e8 8d 60 fe ff       	call   80491d0 <dcgettext@plt>
 8063143:	68 2c 77 06 08       	push   $0x806772c
 8063148:	68 6c 71 06 08       	push   $0x806716c
 806314d:	50                   	push   %eax
 806314e:	6a 01                	push   $0x1
 8063150:	e8 bb 62 fe ff       	call   8049410 <__printf_chk@plt>
#else
  printf (_("%s home page: <http://www.gnu.org/software/%s/>\n"),
          PACKAGE_NAME, PACKAGE);
#endif
  fputs (_("General help using GNU software: <http://www.gnu.org/gethelp/>\n"),
 8063155:	83 c4 1c             	add    $0x1c,%esp
 8063158:	8b 1d d8 b2 06 08    	mov    0x806b2d8,%ebx
 806315e:	6a 05                	push   $0x5
 8063160:	68 04 83 06 08       	push   $0x8068304
 8063165:	6a 00                	push   $0x0
 8063167:	e8 64 60 fe ff       	call   80491d0 <dcgettext@plt>
 806316c:	5a                   	pop    %edx
 806316d:	59                   	pop    %ecx
 806316e:	53                   	push   %ebx
 806316f:	50                   	push   %eax
 8063170:	e8 ab 61 fe ff       	call   8049320 <fputs_unlocked@plt>
         stdout);
}
 8063175:	83 c4 18             	add    $0x18,%esp
 8063178:	5b                   	pop    %ebx
 8063179:	c3                   	ret    
 806317a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08063180 <__afl_maybe_log>:
 8063180:	9f                   	lahf   
 8063181:	0f 90 c0             	seto   %al
 8063184:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 806318a:	85 d2                	test   %edx,%edx
 806318c:	74 22                	je     80631b0 <__afl_setup>

0806318e <__afl_store>:
 806318e:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 8063194:	31 cf                	xor    %ecx,%edi
 8063196:	d1 e9                	shr    %ecx
 8063198:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 806319e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80631a2:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080631a6 <__afl_return>:
 80631a6:	04 7f                	add    $0x7f,%al
 80631a8:	9e                   	sahf   
 80631a9:	c3                   	ret    
 80631aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080631b0 <__afl_setup>:
 80631b0:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 80631b7:	75 ed                	jne    80631a6 <__afl_return>
 80631b9:	50                   	push   %eax
 80631ba:	51                   	push   %ecx
 80631bb:	68 b8 32 06 08       	push   $0x80632b8
 80631c0:	e8 eb 60 fe ff       	call   80492b0 <getenv@plt>
 80631c5:	83 c4 04             	add    $0x4,%esp
 80631c8:	85 c0                	test   %eax,%eax
 80631ca:	0f 84 db 00 00 00    	je     80632ab <__afl_setup_abort>
 80631d0:	50                   	push   %eax
 80631d1:	e8 aa 62 fe ff       	call   8049480 <atoi@plt>
 80631d6:	83 c4 04             	add    $0x4,%esp
 80631d9:	6a 00                	push   $0x0
 80631db:	6a 00                	push   $0x0
 80631dd:	50                   	push   %eax
 80631de:	e8 fd 5f fe ff       	call   80491e0 <shmat@plt>
 80631e3:	83 c4 0c             	add    $0xc,%esp
 80631e6:	83 f8 ff             	cmp    $0xffffffff,%eax
 80631e9:	0f 84 bc 00 00 00    	je     80632ab <__afl_setup_abort>
 80631ef:	c6 00 01             	movb   $0x1,(%eax)
 80631f2:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 80631f7:	89 c2                	mov    %eax,%edx
 80631f9:	59                   	pop    %ecx
 80631fa:	58                   	pop    %eax

080631fb <__afl_forkserver>:
 80631fb:	50                   	push   %eax
 80631fc:	51                   	push   %ecx
 80631fd:	52                   	push   %edx
 80631fe:	6a 04                	push   $0x4
 8063200:	68 e0 bd 43 08       	push   $0x843bde0
 8063205:	68 c7 00 00 00       	push   $0xc7
 806320a:	e8 81 61 fe ff       	call   8049390 <write@plt>
 806320f:	83 c4 0c             	add    $0xc,%esp
 8063212:	83 f8 04             	cmp    $0x4,%eax
 8063215:	75 6e                	jne    8063285 <__afl_fork_resume>

08063217 <__afl_fork_wait_loop>:
 8063217:	6a 04                	push   $0x4
 8063219:	68 e0 bd 43 08       	push   $0x843bde0
 806321e:	68 c6 00 00 00       	push   $0xc6
 8063223:	e8 f8 5e fe ff       	call   8049120 <read@plt>
 8063228:	83 c4 0c             	add    $0xc,%esp
 806322b:	83 f8 04             	cmp    $0x4,%eax
 806322e:	75 74                	jne    80632a4 <__afl_die>
 8063230:	e8 eb 61 fe ff       	call   8049420 <fork@plt>
 8063235:	83 f8 00             	cmp    $0x0,%eax
 8063238:	7c 6a                	jl     80632a4 <__afl_die>
 806323a:	74 49                	je     8063285 <__afl_fork_resume>
 806323c:	a3 40 be 43 08       	mov    %eax,0x843be40
 8063241:	6a 04                	push   $0x4
 8063243:	68 40 be 43 08       	push   $0x843be40
 8063248:	68 c7 00 00 00       	push   $0xc7
 806324d:	e8 3e 61 fe ff       	call   8049390 <write@plt>
 8063252:	83 c4 0c             	add    $0xc,%esp
 8063255:	6a 00                	push   $0x0
 8063257:	68 e0 bd 43 08       	push   $0x843bde0
 806325c:	ff 35 40 be 43 08    	pushl  0x843be40
 8063262:	e8 d9 5f fe ff       	call   8049240 <waitpid@plt>
 8063267:	83 c4 0c             	add    $0xc,%esp
 806326a:	83 f8 00             	cmp    $0x0,%eax
 806326d:	7e 35                	jle    80632a4 <__afl_die>
 806326f:	6a 04                	push   $0x4
 8063271:	68 e0 bd 43 08       	push   $0x843bde0
 8063276:	68 c7 00 00 00       	push   $0xc7
 806327b:	e8 10 61 fe ff       	call   8049390 <write@plt>
 8063280:	83 c4 0c             	add    $0xc,%esp
 8063283:	eb 92                	jmp    8063217 <__afl_fork_wait_loop>

08063285 <__afl_fork_resume>:
 8063285:	68 c6 00 00 00       	push   $0xc6
 806328a:	e8 71 62 fe ff       	call   8049500 <close@plt>
 806328f:	68 c7 00 00 00       	push   $0xc7
 8063294:	e8 67 62 fe ff       	call   8049500 <close@plt>
 8063299:	83 c4 08             	add    $0x8,%esp
 806329c:	5a                   	pop    %edx
 806329d:	59                   	pop    %ecx
 806329e:	58                   	pop    %eax
 806329f:	e9 ea fe ff ff       	jmp    806318e <__afl_store>

080632a4 <__afl_die>:
 80632a4:	31 c0                	xor    %eax,%eax
 80632a6:	e8 a5 5e fe ff       	call   8049150 <_exit@plt>

080632ab <__afl_setup_abort>:
 80632ab:	fe 05 60 be 43 08    	incb   0x843be60
 80632b1:	59                   	pop    %ecx
 80632b2:	58                   	pop    %eax
 80632b3:	e9 ee fe ff ff       	jmp    80631a6 <__afl_return>

080632b8 <.AFL_SHM_ENV>:
 80632b8:	5f                   	pop    %edi
 80632b9:	5f                   	pop    %edi
 80632ba:	41                   	inc    %ecx
 80632bb:	46                   	inc    %esi
 80632bc:	4c                   	dec    %esp
 80632bd:	5f                   	pop    %edi
 80632be:	53                   	push   %ebx
 80632bf:	48                   	dec    %eax
 80632c0:	4d                   	dec    %ebp
 80632c1:	5f                   	pop    %edi
 80632c2:	49                   	dec    %ecx
 80632c3:	44                   	inc    %esp
 80632c4:	00 66 90             	add    %ah,-0x70(%esi)
 80632c7:	90                   	nop
 80632c8:	66 90                	xchg   %ax,%ax
 80632ca:	66 90                	xchg   %ax,%ax
 80632cc:	66 90                	xchg   %ax,%ax
 80632ce:	66 90                	xchg   %ax,%ax

080632d0 <xmalloc>:

/* Allocate N bytes of memory dynamically, with error checking.  */

void *
xmalloc (size_t n)
{
 80632d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80632d4:	89 3c 24             	mov    %edi,(%esp)
 80632d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80632db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80632df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80632e3:	b9 83 6a 00 00       	mov    $0x6a83,%ecx
 80632e8:	e8 73 09 00 00       	call   8063c60 <__afl_maybe_log>
 80632ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80632f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80632f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80632f9:	8b 3c 24             	mov    (%esp),%edi
 80632fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063300:	53                   	push   %ebx
 8063301:	83 ec 14             	sub    $0x14,%esp
 8063304:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  void *p = malloc (n);
 8063308:	53                   	push   %ebx
 8063309:	e8 c2 5f fe ff       	call   80492d0 <malloc@plt>
  if (!p && n != 0)
 806330e:	83 c4 10             	add    $0x10,%esp
 8063311:	85 c0                	test   %eax,%eax
 8063313:	75 67                	jne    806337c <xmalloc+0xac>
 8063315:	8d 76 00             	lea    0x0(%esi),%esi
 8063318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806331c:	89 3c 24             	mov    %edi,(%esp)
 806331f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806332b:	b9 9d fc 00 00       	mov    $0xfc9d,%ecx
 8063330:	e8 2b 09 00 00       	call   8063c60 <__afl_maybe_log>
 8063335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806333d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063341:	8b 3c 24             	mov    (%esp),%edi
 8063344:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063348:	85 db                	test   %ebx,%ebx
 806334a:	75 65                	jne    80633b1 <xmalloc+0xe1>
 806334c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063350:	89 3c 24             	mov    %edi,(%esp)
 8063353:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063357:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806335b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806335f:	b9 e9 82 00 00       	mov    $0x82e9,%ecx
 8063364:	e8 f7 08 00 00       	call   8063c60 <__afl_maybe_log>
 8063369:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806336d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063371:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063375:	8b 3c 24             	mov    (%esp),%edi
 8063378:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return p;
}
 806337c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063380:	89 3c 24             	mov    %edi,(%esp)
 8063383:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063387:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806338b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806338f:	b9 c3 8a 00 00       	mov    $0x8ac3,%ecx
 8063394:	e8 c7 08 00 00       	call   8063c60 <__afl_maybe_log>
 8063399:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806339d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80633a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80633a5:	8b 3c 24             	mov    (%esp),%edi
 80633a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80633ac:	83 c4 08             	add    $0x8,%esp
 80633af:	5b                   	pop    %ebx
 80633b0:	c3                   	ret    
 80633b1:	8d 76 00             	lea    0x0(%esi),%esi
void *
xmalloc (size_t n)
{
  void *p = malloc (n);
  if (!p && n != 0)
    xalloc_die ();
 80633b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80633b8:	89 3c 24             	mov    %edi,(%esp)
 80633bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80633bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80633c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80633c7:	b9 4e d2 00 00       	mov    $0xd24e,%ecx
 80633cc:	e8 8f 08 00 00       	call   8063c60 <__afl_maybe_log>
 80633d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80633d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80633d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80633dd:	8b 3c 24             	mov    (%esp),%edi
 80633e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80633e4:	e8 c7 09 00 00       	call   8063db0 <xalloc_die>
 80633e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

080633f0 <xnmalloc>:

XALLOC_INLINE void *xnmalloc (size_t n, size_t s)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1, 2));
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
 80633f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80633f4:	89 3c 24             	mov    %edi,(%esp)
 80633f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80633fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80633ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063403:	b9 5d 5e 00 00       	mov    $0x5e5d,%ecx
 8063408:	e8 53 08 00 00       	call   8063c60 <__afl_maybe_log>
 806340d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063411:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063415:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063419:	8b 3c 24             	mov    (%esp),%edi
 806341c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063420:	53                   	push   %ebx
  if (xalloc_oversized (n, s))
 8063421:	31 d2                	xor    %edx,%edx
 8063423:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

XALLOC_INLINE void *xnmalloc (size_t n, size_t s)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1, 2));
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
 8063428:	83 ec 08             	sub    $0x8,%esp
 806342b:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 806342f:	8b 4c 24 10          	mov    0x10(%esp),%ecx
  if (xalloc_oversized (n, s))
 8063433:	f7 f3                	div    %ebx
 8063435:	39 c8                	cmp    %ecx,%eax
 8063437:	72 43                	jb     806347c <xnmalloc+0x8c>
 8063439:	8d 76 00             	lea    0x0(%esi),%esi
 806343c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063440:	89 3c 24             	mov    %edi,(%esp)
 8063443:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063447:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806344b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806344f:	b9 9b ad 00 00       	mov    $0xad9b,%ecx
 8063454:	e8 07 08 00 00       	call   8063c60 <__afl_maybe_log>
 8063459:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806345d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063461:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063465:	8b 3c 24             	mov    (%esp),%edi
 8063468:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return xmalloc (n * s);
 806346c:	0f af cb             	imul   %ebx,%ecx
 806346f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
}
 8063473:	83 c4 08             	add    $0x8,%esp
 8063476:	5b                   	pop    %ebx
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
  return xmalloc (n * s);
 8063477:	e9 54 fe ff ff       	jmp    80632d0 <xmalloc>
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1, 2));
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
 806347c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063480:	89 3c 24             	mov    %edi,(%esp)
 8063483:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063487:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806348b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806348f:	b9 f8 d5 00 00       	mov    $0xd5f8,%ecx
 8063494:	e8 c7 07 00 00       	call   8063c60 <__afl_maybe_log>
 8063499:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806349d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80634a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80634a5:	8b 3c 24             	mov    (%esp),%edi
 80634a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80634ac:	e8 ff 08 00 00       	call   8063db0 <xalloc_die>
 80634b1:	eb 0d                	jmp    80634c0 <xcharalloc>
 80634b3:	90                   	nop
 80634b4:	90                   	nop
 80634b5:	90                   	nop
 80634b6:	90                   	nop
 80634b7:	90                   	nop
 80634b8:	90                   	nop
 80634b9:	90                   	nop
 80634ba:	90                   	nop
 80634bb:	90                   	nop
 80634bc:	90                   	nop
 80634bd:	90                   	nop
 80634be:	90                   	nop
 80634bf:	90                   	nop

080634c0 <xcharalloc>:
XALLOC_INLINE char *xcharalloc (size_t n)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1));
XALLOC_INLINE char *
xcharalloc (size_t n)
{
  return XNMALLOC (n, char);
 80634c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80634c4:	89 3c 24             	mov    %edi,(%esp)
 80634c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80634cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80634cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80634d3:	b9 c1 6c 00 00       	mov    $0x6cc1,%ecx
 80634d8:	e8 83 07 00 00       	call   8063c60 <__afl_maybe_log>
 80634dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80634e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80634e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80634e9:	8b 3c 24             	mov    (%esp),%edi
 80634ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80634f0:	e9 db fd ff ff       	jmp    80632d0 <xmalloc>
 80634f5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80634f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08063500 <xrealloc>:
/* Change the size of an allocated block of memory P to N bytes,
   with error checking.  */

void *
xrealloc (void *p, size_t n)
{
 8063500:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063504:	89 3c 24             	mov    %edi,(%esp)
 8063507:	89 54 24 04          	mov    %edx,0x4(%esp)
 806350b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806350f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063513:	b9 fd 9b 00 00       	mov    $0x9bfd,%ecx
 8063518:	e8 43 07 00 00       	call   8063c60 <__afl_maybe_log>
 806351d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063521:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063525:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063529:	8b 3c 24             	mov    (%esp),%edi
 806352c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063530:	53                   	push   %ebx
 8063531:	83 ec 08             	sub    $0x8,%esp
 8063534:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 8063538:	8b 44 24 10          	mov    0x10(%esp),%eax
  if (!n && p)
 806353c:	85 db                	test   %ebx,%ebx
 806353e:	75 68                	jne    80635a8 <xrealloc+0xa8>
 8063540:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063544:	89 3c 24             	mov    %edi,(%esp)
 8063547:	89 54 24 04          	mov    %edx,0x4(%esp)
 806354b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806354f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063553:	b9 f6 db 00 00       	mov    $0xdbf6,%ecx
 8063558:	e8 03 07 00 00       	call   8063c60 <__afl_maybe_log>
 806355d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063561:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063565:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063569:	8b 3c 24             	mov    (%esp),%edi
 806356c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063570:	85 c0                	test   %eax,%eax
 8063572:	0f 85 10 01 00 00    	jne    8063688 <xrealloc+0x188>
 8063578:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806357c:	89 3c 24             	mov    %edi,(%esp)
 806357f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063583:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063587:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806358b:	b9 e9 17 00 00       	mov    $0x17e9,%ecx
 8063590:	e8 cb 06 00 00       	call   8063c60 <__afl_maybe_log>
 8063595:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063599:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806359d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80635a1:	8b 3c 24             	mov    (%esp),%edi
 80635a4:	8d 64 24 10          	lea    0x10(%esp),%esp
         GNU, even if the underlying realloc is C99.  */
      free (p);
      return NULL;
    }

  p = realloc (p, n);
 80635a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80635ac:	89 3c 24             	mov    %edi,(%esp)
 80635af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80635b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80635b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80635bb:	b9 d5 55 00 00       	mov    $0x55d5,%ecx
 80635c0:	e8 9b 06 00 00       	call   8063c60 <__afl_maybe_log>
 80635c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80635c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80635cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80635d1:	8b 3c 24             	mov    (%esp),%edi
 80635d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80635d8:	83 ec 08             	sub    $0x8,%esp
 80635db:	53                   	push   %ebx
 80635dc:	50                   	push   %eax
 80635dd:	e8 de 5c fe ff       	call   80492c0 <realloc@plt>
  if (!p && n)
 80635e2:	83 c4 10             	add    $0x10,%esp
 80635e5:	85 c0                	test   %eax,%eax
 80635e7:	75 67                	jne    8063650 <xrealloc+0x150>
 80635e9:	8d 76 00             	lea    0x0(%esi),%esi
 80635ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80635f0:	89 3c 24             	mov    %edi,(%esp)
 80635f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80635f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80635fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80635ff:	b9 52 f6 00 00       	mov    $0xf652,%ecx
 8063604:	e8 57 06 00 00       	call   8063c60 <__afl_maybe_log>
 8063609:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806360d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063611:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063615:	8b 3c 24             	mov    (%esp),%edi
 8063618:	8d 64 24 10          	lea    0x10(%esp),%esp
 806361c:	85 db                	test   %ebx,%ebx
 806361e:	75 7b                	jne    806369b <xrealloc+0x19b>
 8063620:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063624:	89 3c 24             	mov    %edi,(%esp)
 8063627:	89 54 24 04          	mov    %edx,0x4(%esp)
 806362b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806362f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063633:	b9 f5 15 00 00       	mov    $0x15f5,%ecx
 8063638:	e8 23 06 00 00       	call   8063c60 <__afl_maybe_log>
 806363d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063641:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063645:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063649:	8b 3c 24             	mov    (%esp),%edi
 806364c:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return p;
}
 8063650:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063654:	89 3c 24             	mov    %edi,(%esp)
 8063657:	89 54 24 04          	mov    %edx,0x4(%esp)
 806365b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806365f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063663:	b9 1b 83 00 00       	mov    $0x831b,%ecx
 8063668:	e8 f3 05 00 00       	call   8063c60 <__afl_maybe_log>
 806366d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063671:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063675:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063679:	8b 3c 24             	mov    (%esp),%edi
 806367c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063680:	83 c4 08             	add    $0x8,%esp
 8063683:	5b                   	pop    %ebx
 8063684:	c3                   	ret    
 8063685:	8d 76 00             	lea    0x0(%esi),%esi
{
  if (!n && p)
    {
      /* The GNU and C99 realloc behaviors disagree here.  Act like
         GNU, even if the underlying realloc is C99.  */
      free (p);
 8063688:	83 ec 0c             	sub    $0xc,%esp
 806368b:	50                   	push   %eax
 806368c:	e8 cf 5a fe ff       	call   8049160 <free@plt>
      return NULL;
 8063691:	83 c4 10             	add    $0x10,%esp
 8063694:	31 c0                	xor    %eax,%eax

  p = realloc (p, n);
  if (!p && n)
    xalloc_die ();
  return p;
}
 8063696:	83 c4 08             	add    $0x8,%esp
 8063699:	5b                   	pop    %ebx
 806369a:	c3                   	ret    
 806369b:	90                   	nop
      return NULL;
    }

  p = realloc (p, n);
  if (!p && n)
    xalloc_die ();
 806369c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80636a0:	89 3c 24             	mov    %edi,(%esp)
 80636a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80636a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80636ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80636af:	b9 9a 49 00 00       	mov    $0x499a,%ecx
 80636b4:	e8 a7 05 00 00       	call   8063c60 <__afl_maybe_log>
 80636b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80636bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80636c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80636c5:	8b 3c 24             	mov    (%esp),%edi
 80636c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80636cc:	e8 df 06 00 00       	call   8063db0 <xalloc_die>
 80636d1:	eb 0d                	jmp    80636e0 <xnrealloc>
 80636d3:	90                   	nop
 80636d4:	90                   	nop
 80636d5:	90                   	nop
 80636d6:	90                   	nop
 80636d7:	90                   	nop
 80636d8:	90                   	nop
 80636d9:	90                   	nop
 80636da:	90                   	nop
 80636db:	90                   	nop
 80636dc:	90                   	nop
 80636dd:	90                   	nop
 80636de:	90                   	nop
 80636df:	90                   	nop

080636e0 <xnrealloc>:

XALLOC_INLINE void *xnrealloc (void *p, size_t n, size_t s)
                    _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
 80636e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80636e4:	89 3c 24             	mov    %edi,(%esp)
 80636e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80636eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80636ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80636f3:	b9 8f 9f 00 00       	mov    $0x9f8f,%ecx
 80636f8:	e8 63 05 00 00       	call   8063c60 <__afl_maybe_log>
 80636fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063701:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063705:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063709:	8b 3c 24             	mov    (%esp),%edi
 806370c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063710:	56                   	push   %esi
 8063711:	53                   	push   %ebx
  if (xalloc_oversized (n, s))
 8063712:	31 d2                	xor    %edx,%edx
 8063714:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

XALLOC_INLINE void *xnrealloc (void *p, size_t n, size_t s)
                    _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
 8063719:	83 ec 04             	sub    $0x4,%esp
 806371c:	8b 74 24 18          	mov    0x18(%esp),%esi
 8063720:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 8063724:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  if (xalloc_oversized (n, s))
 8063728:	f7 f6                	div    %esi
 806372a:	39 c8                	cmp    %ecx,%eax
 806372c:	72 47                	jb     8063775 <xnrealloc+0x95>
 806372e:	66 90                	xchg   %ax,%ax
 8063730:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063734:	89 3c 24             	mov    %edi,(%esp)
 8063737:	89 54 24 04          	mov    %edx,0x4(%esp)
 806373b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806373f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063743:	b9 37 46 00 00       	mov    $0x4637,%ecx
 8063748:	e8 13 05 00 00       	call   8063c60 <__afl_maybe_log>
 806374d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063751:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063755:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063759:	8b 3c 24             	mov    (%esp),%edi
 806375c:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return xrealloc (p, n * s);
 8063760:	0f af ce             	imul   %esi,%ecx
 8063763:	89 5c 24 10          	mov    %ebx,0x10(%esp)
 8063767:	89 4c 24 14          	mov    %ecx,0x14(%esp)
}
 806376b:	83 c4 04             	add    $0x4,%esp
 806376e:	5b                   	pop    %ebx
 806376f:	5e                   	pop    %esi
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
  return xrealloc (p, n * s);
 8063770:	e9 8b fd ff ff       	jmp    8063500 <xrealloc>
 8063775:	8d 76 00             	lea    0x0(%esi),%esi
                    _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
 8063778:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806377c:	89 3c 24             	mov    %edi,(%esp)
 806377f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063783:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063787:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806378b:	b9 f4 8a 00 00       	mov    $0x8af4,%ecx
 8063790:	e8 cb 04 00 00       	call   8063c60 <__afl_maybe_log>
 8063795:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063799:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806379d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80637a1:	8b 3c 24             	mov    (%esp),%edi
 80637a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80637a8:	e8 03 06 00 00       	call   8063db0 <xalloc_die>
 80637ad:	8d 76 00             	lea    0x0(%esi),%esi

080637b0 <x2nrealloc>:

   */

XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
 80637b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80637b4:	89 3c 24             	mov    %edi,(%esp)
 80637b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80637bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80637bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80637c3:	b9 f3 4d 00 00       	mov    $0x4df3,%ecx
 80637c8:	e8 93 04 00 00       	call   8063c60 <__afl_maybe_log>
 80637cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80637d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80637d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80637d9:	8b 3c 24             	mov    (%esp),%edi
 80637dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80637e0:	57                   	push   %edi
 80637e1:	56                   	push   %esi
 80637e2:	53                   	push   %ebx
 80637e3:	8b 74 24 10          	mov    0x10(%esp),%esi
 80637e7:	8b 7c 24 14          	mov    0x14(%esp),%edi
 80637eb:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  size_t n = *pn;

  if (! p)
 80637ef:	85 f6                	test   %esi,%esi
   */

XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  size_t n = *pn;
 80637f1:	8b 0f                	mov    (%edi),%ecx

  if (! p)
 80637f3:	0f 84 c7 00 00 00    	je     80638c0 <x2nrealloc+0x110>
 80637f9:	8d 76 00             	lea    0x0(%esi),%esi
 80637fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063800:	89 3c 24             	mov    %edi,(%esp)
 8063803:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063807:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806380b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806380f:	b9 15 58 00 00       	mov    $0x5815,%ecx
 8063814:	e8 47 04 00 00       	call   8063c60 <__afl_maybe_log>
 8063819:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806381d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063821:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063825:	8b 3c 24             	mov    (%esp),%edi
 8063828:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
 806382c:	31 d2                	xor    %edx,%edx
 806382e:	b8 aa aa aa aa       	mov    $0xaaaaaaaa,%eax
 8063833:	f7 f3                	div    %ebx
 8063835:	39 c1                	cmp    %eax,%ecx
 8063837:	0f 83 ce 00 00 00    	jae    806390b <x2nrealloc+0x15b>
 806383d:	8d 76 00             	lea    0x0(%esi),%esi
 8063840:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063844:	89 3c 24             	mov    %edi,(%esp)
 8063847:	89 54 24 04          	mov    %edx,0x4(%esp)
 806384b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806384f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063853:	b9 ba 81 00 00       	mov    $0x81ba,%ecx
 8063858:	e8 03 04 00 00       	call   8063c60 <__afl_maybe_log>
 806385d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063861:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063865:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063869:	8b 3c 24             	mov    (%esp),%edi
 806386c:	8d 64 24 10          	lea    0x10(%esp),%esp
        xalloc_die ();
      n += n / 2 + 1;
 8063870:	89 c8                	mov    %ecx,%eax
 8063872:	d1 e8                	shr    %eax
 8063874:	8d 4c 01 01          	lea    0x1(%ecx,%eax,1),%ecx
    }

  *pn = n;
 8063878:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806387c:	89 3c 24             	mov    %edi,(%esp)
 806387f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063883:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063887:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806388b:	b9 dc cd 00 00       	mov    $0xcddc,%ecx
 8063890:	e8 cb 03 00 00       	call   8063c60 <__afl_maybe_log>
 8063895:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063899:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806389d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80638a1:	8b 3c 24             	mov    (%esp),%edi
 80638a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80638a8:	89 0f                	mov    %ecx,(%edi)
  return xrealloc (p, n * s);
 80638aa:	89 74 24 10          	mov    %esi,0x10(%esp)
 80638ae:	0f af cb             	imul   %ebx,%ecx
 80638b1:	89 4c 24 14          	mov    %ecx,0x14(%esp)
}
 80638b5:	5b                   	pop    %ebx
 80638b6:	5e                   	pop    %esi
 80638b7:	5f                   	pop    %edi
        xalloc_die ();
      n += n / 2 + 1;
    }

  *pn = n;
  return xrealloc (p, n * s);
 80638b8:	e9 43 fc ff ff       	jmp    8063500 <xrealloc>
 80638bd:	8d 76 00             	lea    0x0(%esi),%esi
{
  size_t n = *pn;

  if (! p)
    {
      if (! n)
 80638c0:	85 c9                	test   %ecx,%ecx
 80638c2:	75 b4                	jne    8063878 <x2nrealloc+0xc8>
 80638c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80638c8:	89 3c 24             	mov    %edi,(%esp)
 80638cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80638cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80638d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80638d7:	b9 9d 3a 00 00       	mov    $0x3a9d,%ecx
 80638dc:	e8 7f 03 00 00       	call   8063c60 <__afl_maybe_log>
 80638e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80638e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80638e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80638ed:	8b 3c 24             	mov    (%esp),%edi
 80638f0:	8d 64 24 10          	lea    0x10(%esp),%esp
             requests, when the invoking code specifies an old size of
             zero.  This is the largest "small" request for the GNU C
             library malloc.  */
          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };

          n = DEFAULT_MXFAST / s;
 80638f4:	31 d2                	xor    %edx,%edx
 80638f6:	b8 40 00 00 00       	mov    $0x40,%eax
          n += !n;
 80638fb:	31 c9                	xor    %ecx,%ecx
             requests, when the invoking code specifies an old size of
             zero.  This is the largest "small" request for the GNU C
             library malloc.  */
          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };

          n = DEFAULT_MXFAST / s;
 80638fd:	f7 f3                	div    %ebx
          n += !n;
 80638ff:	85 c0                	test   %eax,%eax
 8063901:	0f 94 c1             	sete   %cl
 8063904:	01 c1                	add    %eax,%ecx
 8063906:	e9 6d ff ff ff       	jmp    8063878 <x2nrealloc+0xc8>
 806390b:	90                   	nop
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
        xalloc_die ();
 806390c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063910:	89 3c 24             	mov    %edi,(%esp)
 8063913:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806391b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806391f:	b9 95 7a 00 00       	mov    $0x7a95,%ecx
 8063924:	e8 37 03 00 00       	call   8063c60 <__afl_maybe_log>
 8063929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806392d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063931:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063935:	8b 3c 24             	mov    (%esp),%edi
 8063938:	8d 64 24 10          	lea    0x10(%esp),%esp
 806393c:	e8 6f 04 00 00       	call   8063db0 <xalloc_die>
 8063941:	eb 0d                	jmp    8063950 <x2realloc>
 8063943:	90                   	nop
 8063944:	90                   	nop
 8063945:	90                   	nop
 8063946:	90                   	nop
 8063947:	90                   	nop
 8063948:	90                   	nop
 8063949:	90                   	nop
 806394a:	90                   	nop
 806394b:	90                   	nop
 806394c:	90                   	nop
 806394d:	90                   	nop
 806394e:	90                   	nop
 806394f:	90                   	nop

08063950 <x2realloc>:
   return the pointer to the new block.  *PN is never set to zero, and
   the returned pointer is never null.  */

void *
x2realloc (void *p, size_t *pn)
{
 8063950:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063954:	89 3c 24             	mov    %edi,(%esp)
 8063957:	89 54 24 04          	mov    %edx,0x4(%esp)
 806395b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806395f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063963:	b9 93 16 00 00       	mov    $0x1693,%ecx
 8063968:	e8 f3 02 00 00       	call   8063c60 <__afl_maybe_log>
 806396d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063971:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063975:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063979:	8b 3c 24             	mov    (%esp),%edi
 806397c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063980:	53                   	push   %ebx
 8063981:	83 ec 08             	sub    $0x8,%esp
 8063984:	8b 54 24 10          	mov    0x10(%esp),%edx
 8063988:	8b 4c 24 14          	mov    0x14(%esp),%ecx
XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  size_t n = *pn;

  if (! p)
 806398c:	85 d2                	test   %edx,%edx
   */

XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  size_t n = *pn;
 806398e:	8b 01                	mov    (%ecx),%eax

  if (! p)
 8063990:	0f 84 ba 00 00 00    	je     8063a50 <x2realloc+0x100>
 8063996:	66 90                	xchg   %ax,%ax
 8063998:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806399c:	89 3c 24             	mov    %edi,(%esp)
 806399f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80639a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80639a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80639ab:	b9 7e 92 00 00       	mov    $0x927e,%ecx
 80639b0:	e8 ab 02 00 00       	call   8063c60 <__afl_maybe_log>
 80639b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80639b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80639bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80639c1:	8b 3c 24             	mov    (%esp),%edi
 80639c4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
 80639c8:	3d a9 aa aa aa       	cmp    $0xaaaaaaa9,%eax
 80639cd:	0f 87 89 00 00 00    	ja     8063a5c <x2realloc+0x10c>
 80639d3:	90                   	nop
 80639d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80639d8:	89 3c 24             	mov    %edi,(%esp)
 80639db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80639df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80639e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80639e7:	b9 88 20 00 00       	mov    $0x2088,%ecx
 80639ec:	e8 6f 02 00 00       	call   8063c60 <__afl_maybe_log>
 80639f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80639f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80639f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80639fd:	8b 3c 24             	mov    (%esp),%edi
 8063a00:	8d 64 24 10          	lea    0x10(%esp),%esp
        xalloc_die ();
      n += n / 2 + 1;
 8063a04:	89 c3                	mov    %eax,%ebx
 8063a06:	d1 eb                	shr    %ebx
 8063a08:	8d 44 03 01          	lea    0x1(%ebx,%eax,1),%eax
    }

  *pn = n;
 8063a0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063a10:	89 3c 24             	mov    %edi,(%esp)
 8063a13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063a17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063a1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063a1f:	b9 12 ef 00 00       	mov    $0xef12,%ecx
 8063a24:	e8 37 02 00 00       	call   8063c60 <__afl_maybe_log>
 8063a29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063a2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063a31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063a35:	8b 3c 24             	mov    (%esp),%edi
 8063a38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063a3c:	89 01                	mov    %eax,(%ecx)
  return xrealloc (p, n * s);
 8063a3e:	89 44 24 14          	mov    %eax,0x14(%esp)
 8063a42:	89 54 24 10          	mov    %edx,0x10(%esp)
  return x2nrealloc (p, pn, 1);
}
 8063a46:	83 c4 08             	add    $0x8,%esp
 8063a49:	5b                   	pop    %ebx
 8063a4a:	e9 b1 fa ff ff       	jmp    8063500 <xrealloc>
 8063a4f:	90                   	nop
             zero.  This is the largest "small" request for the GNU C
             library malloc.  */
          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };

          n = DEFAULT_MXFAST / s;
          n += !n;
 8063a50:	85 c0                	test   %eax,%eax
 8063a52:	bb 40 00 00 00       	mov    $0x40,%ebx
 8063a57:	0f 44 c3             	cmove  %ebx,%eax
 8063a5a:	eb b0                	jmp    8063a0c <x2realloc+0xbc>
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
        xalloc_die ();
 8063a5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063a60:	89 3c 24             	mov    %edi,(%esp)
 8063a63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063a67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063a6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063a6f:	b9 4a f7 00 00       	mov    $0xf74a,%ecx
 8063a74:	e8 e7 01 00 00       	call   8063c60 <__afl_maybe_log>
 8063a79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063a7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063a81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063a85:	8b 3c 24             	mov    (%esp),%edi
 8063a88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063a8c:	e8 1f 03 00 00       	call   8063db0 <xalloc_die>
 8063a91:	eb 0d                	jmp    8063aa0 <xzalloc>
 8063a93:	90                   	nop
 8063a94:	90                   	nop
 8063a95:	90                   	nop
 8063a96:	90                   	nop
 8063a97:	90                   	nop
 8063a98:	90                   	nop
 8063a99:	90                   	nop
 8063a9a:	90                   	nop
 8063a9b:	90                   	nop
 8063a9c:	90                   	nop
 8063a9d:	90                   	nop
 8063a9e:	90                   	nop
 8063a9f:	90                   	nop

08063aa0 <xzalloc>:
   There's no need for xnzalloc (N, S), since it would be equivalent
   to xcalloc (N, S).  */

void *
xzalloc (size_t s)
{
 8063aa0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063aa4:	89 3c 24             	mov    %edi,(%esp)
 8063aa7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063aab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063aaf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063ab3:	b9 34 0a 00 00       	mov    $0xa34,%ecx
 8063ab8:	e8 a3 01 00 00       	call   8063c60 <__afl_maybe_log>
 8063abd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063ac1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063ac5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063ac9:	8b 3c 24             	mov    (%esp),%edi
 8063acc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063ad0:	53                   	push   %ebx
 8063ad1:	83 ec 14             	sub    $0x14,%esp
 8063ad4:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  return memset (xmalloc (s), 0, s);
 8063ad8:	53                   	push   %ebx
 8063ad9:	e8 f2 f7 ff ff       	call   80632d0 <xmalloc>
 8063ade:	83 c4 0c             	add    $0xc,%esp
 8063ae1:	53                   	push   %ebx
 8063ae2:	6a 00                	push   $0x0
 8063ae4:	50                   	push   %eax
 8063ae5:	e8 d6 58 fe ff       	call   80493c0 <memset@plt>
}
 8063aea:	83 c4 18             	add    $0x18,%esp
 8063aed:	5b                   	pop    %ebx
 8063aee:	c3                   	ret    
 8063aef:	90                   	nop

08063af0 <xcalloc>:
/* Allocate zeroed memory for N elements of S bytes, with error
   checking.  S must be nonzero.  */

void *
xcalloc (size_t n, size_t s)
{
 8063af0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063af4:	89 3c 24             	mov    %edi,(%esp)
 8063af7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063afb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063aff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063b03:	b9 fa 66 00 00       	mov    $0x66fa,%ecx
 8063b08:	e8 53 01 00 00       	call   8063c60 <__afl_maybe_log>
 8063b0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063b11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063b15:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063b19:	8b 3c 24             	mov    (%esp),%edi
 8063b1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063b20:	83 ec 14             	sub    $0x14,%esp
  void *p;
  /* Test for overflow, since some calloc implementations don't have
     proper overflow checks.  But omit overflow and size-zero tests if
     HAVE_GNU_CALLOC, since GNU calloc catches overflow and never
     returns NULL if successful.  */
  if ((! HAVE_GNU_CALLOC && xalloc_oversized (n, s))
 8063b23:	ff 74 24 1c          	pushl  0x1c(%esp)
 8063b27:	ff 74 24 1c          	pushl  0x1c(%esp)
 8063b2b:	e8 00 5a fe ff       	call   8049530 <calloc@plt>
 8063b30:	83 c4 10             	add    $0x10,%esp
 8063b33:	85 c0                	test   %eax,%eax
 8063b35:	74 35                	je     8063b6c <xcalloc+0x7c>
 8063b37:	90                   	nop
 8063b38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063b3c:	89 3c 24             	mov    %edi,(%esp)
 8063b3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063b43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063b47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063b4b:	b9 cf 53 00 00       	mov    $0x53cf,%ecx
 8063b50:	e8 0b 01 00 00       	call   8063c60 <__afl_maybe_log>
 8063b55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063b59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063b5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063b61:	8b 3c 24             	mov    (%esp),%edi
 8063b64:	8d 64 24 10          	lea    0x10(%esp),%esp
      || (! (p = calloc (n, s)) && (HAVE_GNU_CALLOC || n != 0)))
    xalloc_die ();
  return p;
}
 8063b68:	83 c4 0c             	add    $0xc,%esp
 8063b6b:	c3                   	ret    
     proper overflow checks.  But omit overflow and size-zero tests if
     HAVE_GNU_CALLOC, since GNU calloc catches overflow and never
     returns NULL if successful.  */
  if ((! HAVE_GNU_CALLOC && xalloc_oversized (n, s))
      || (! (p = calloc (n, s)) && (HAVE_GNU_CALLOC || n != 0)))
    xalloc_die ();
 8063b6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063b70:	89 3c 24             	mov    %edi,(%esp)
 8063b73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063b77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063b7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063b7f:	b9 46 3d 00 00       	mov    $0x3d46,%ecx
 8063b84:	e8 d7 00 00 00       	call   8063c60 <__afl_maybe_log>
 8063b89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063b8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063b91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063b95:	8b 3c 24             	mov    (%esp),%edi
 8063b98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063b9c:	e8 0f 02 00 00       	call   8063db0 <xalloc_die>
 8063ba1:	eb 0d                	jmp    8063bb0 <xmemdup>
 8063ba3:	90                   	nop
 8063ba4:	90                   	nop
 8063ba5:	90                   	nop
 8063ba6:	90                   	nop
 8063ba7:	90                   	nop
 8063ba8:	90                   	nop
 8063ba9:	90                   	nop
 8063baa:	90                   	nop
 8063bab:	90                   	nop
 8063bac:	90                   	nop
 8063bad:	90                   	nop
 8063bae:	90                   	nop
 8063baf:	90                   	nop

08063bb0 <xmemdup>:
   for xnmemdup (P, N, S), since xmemdup (P, N * S) works without any
   need for an arithmetic overflow check.  */

void *
xmemdup (void const *p, size_t s)
{
 8063bb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063bb4:	89 3c 24             	mov    %edi,(%esp)
 8063bb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063bbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063bbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063bc3:	b9 06 9a 00 00       	mov    $0x9a06,%ecx
 8063bc8:	e8 93 00 00 00       	call   8063c60 <__afl_maybe_log>
 8063bcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063bd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063bd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063bd9:	8b 3c 24             	mov    (%esp),%edi
 8063bdc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063be0:	53                   	push   %ebx
 8063be1:	83 ec 14             	sub    $0x14,%esp
 8063be4:	8b 5c 24 20          	mov    0x20(%esp),%ebx
  return memcpy (xmalloc (s), p, s);
 8063be8:	53                   	push   %ebx
 8063be9:	e8 e2 f6 ff ff       	call   80632d0 <xmalloc>

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 8063bee:	83 c4 0c             	add    $0xc,%esp
 8063bf1:	53                   	push   %ebx
 8063bf2:	ff 74 24 18          	pushl  0x18(%esp)
 8063bf6:	50                   	push   %eax
 8063bf7:	e8 74 55 fe ff       	call   8049170 <memcpy@plt>
}
 8063bfc:	83 c4 18             	add    $0x18,%esp
 8063bff:	5b                   	pop    %ebx
 8063c00:	c3                   	ret    
 8063c01:	eb 0d                	jmp    8063c10 <xstrdup>
 8063c03:	90                   	nop
 8063c04:	90                   	nop
 8063c05:	90                   	nop
 8063c06:	90                   	nop
 8063c07:	90                   	nop
 8063c08:	90                   	nop
 8063c09:	90                   	nop
 8063c0a:	90                   	nop
 8063c0b:	90                   	nop
 8063c0c:	90                   	nop
 8063c0d:	90                   	nop
 8063c0e:	90                   	nop
 8063c0f:	90                   	nop

08063c10 <xstrdup>:

/* Clone STRING.  */

char *
xstrdup (char const *string)
{
 8063c10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063c14:	89 3c 24             	mov    %edi,(%esp)
 8063c17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063c1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063c1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063c23:	b9 23 9f 00 00       	mov    $0x9f23,%ecx
 8063c28:	e8 33 00 00 00       	call   8063c60 <__afl_maybe_log>
 8063c2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063c31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063c35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063c39:	8b 3c 24             	mov    (%esp),%edi
 8063c3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063c40:	53                   	push   %ebx
 8063c41:	83 ec 14             	sub    $0x14,%esp
 8063c44:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  return xmemdup (string, strlen (string) + 1);
 8063c48:	53                   	push   %ebx
 8063c49:	e8 12 57 fe ff       	call   8049360 <strlen@plt>
 8063c4e:	5a                   	pop    %edx
 8063c4f:	59                   	pop    %ecx
 8063c50:	83 c0 01             	add    $0x1,%eax
 8063c53:	50                   	push   %eax
 8063c54:	53                   	push   %ebx
 8063c55:	e8 56 ff ff ff       	call   8063bb0 <xmemdup>
}
 8063c5a:	83 c4 18             	add    $0x18,%esp
 8063c5d:	5b                   	pop    %ebx
 8063c5e:	c3                   	ret    
 8063c5f:	90                   	nop

08063c60 <__afl_maybe_log>:
 8063c60:	9f                   	lahf   
 8063c61:	0f 90 c0             	seto   %al
 8063c64:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 8063c6a:	85 d2                	test   %edx,%edx
 8063c6c:	74 22                	je     8063c90 <__afl_setup>

08063c6e <__afl_store>:
 8063c6e:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 8063c74:	31 cf                	xor    %ecx,%edi
 8063c76:	d1 e9                	shr    %ecx
 8063c78:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 8063c7e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8063c82:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08063c86 <__afl_return>:
 8063c86:	04 7f                	add    $0x7f,%al
 8063c88:	9e                   	sahf   
 8063c89:	c3                   	ret    
 8063c8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08063c90 <__afl_setup>:
 8063c90:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 8063c97:	75 ed                	jne    8063c86 <__afl_return>
 8063c99:	50                   	push   %eax
 8063c9a:	51                   	push   %ecx
 8063c9b:	68 98 3d 06 08       	push   $0x8063d98
 8063ca0:	e8 0b 56 fe ff       	call   80492b0 <getenv@plt>
 8063ca5:	83 c4 04             	add    $0x4,%esp
 8063ca8:	85 c0                	test   %eax,%eax
 8063caa:	0f 84 db 00 00 00    	je     8063d8b <__afl_setup_abort>
 8063cb0:	50                   	push   %eax
 8063cb1:	e8 ca 57 fe ff       	call   8049480 <atoi@plt>
 8063cb6:	83 c4 04             	add    $0x4,%esp
 8063cb9:	6a 00                	push   $0x0
 8063cbb:	6a 00                	push   $0x0
 8063cbd:	50                   	push   %eax
 8063cbe:	e8 1d 55 fe ff       	call   80491e0 <shmat@plt>
 8063cc3:	83 c4 0c             	add    $0xc,%esp
 8063cc6:	83 f8 ff             	cmp    $0xffffffff,%eax
 8063cc9:	0f 84 bc 00 00 00    	je     8063d8b <__afl_setup_abort>
 8063ccf:	c6 00 01             	movb   $0x1,(%eax)
 8063cd2:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 8063cd7:	89 c2                	mov    %eax,%edx
 8063cd9:	59                   	pop    %ecx
 8063cda:	58                   	pop    %eax

08063cdb <__afl_forkserver>:
 8063cdb:	50                   	push   %eax
 8063cdc:	51                   	push   %ecx
 8063cdd:	52                   	push   %edx
 8063cde:	6a 04                	push   $0x4
 8063ce0:	68 e0 bd 43 08       	push   $0x843bde0
 8063ce5:	68 c7 00 00 00       	push   $0xc7
 8063cea:	e8 a1 56 fe ff       	call   8049390 <write@plt>
 8063cef:	83 c4 0c             	add    $0xc,%esp
 8063cf2:	83 f8 04             	cmp    $0x4,%eax
 8063cf5:	75 6e                	jne    8063d65 <__afl_fork_resume>

08063cf7 <__afl_fork_wait_loop>:
 8063cf7:	6a 04                	push   $0x4
 8063cf9:	68 e0 bd 43 08       	push   $0x843bde0
 8063cfe:	68 c6 00 00 00       	push   $0xc6
 8063d03:	e8 18 54 fe ff       	call   8049120 <read@plt>
 8063d08:	83 c4 0c             	add    $0xc,%esp
 8063d0b:	83 f8 04             	cmp    $0x4,%eax
 8063d0e:	75 74                	jne    8063d84 <__afl_die>
 8063d10:	e8 0b 57 fe ff       	call   8049420 <fork@plt>
 8063d15:	83 f8 00             	cmp    $0x0,%eax
 8063d18:	7c 6a                	jl     8063d84 <__afl_die>
 8063d1a:	74 49                	je     8063d65 <__afl_fork_resume>
 8063d1c:	a3 40 be 43 08       	mov    %eax,0x843be40
 8063d21:	6a 04                	push   $0x4
 8063d23:	68 40 be 43 08       	push   $0x843be40
 8063d28:	68 c7 00 00 00       	push   $0xc7
 8063d2d:	e8 5e 56 fe ff       	call   8049390 <write@plt>
 8063d32:	83 c4 0c             	add    $0xc,%esp
 8063d35:	6a 00                	push   $0x0
 8063d37:	68 e0 bd 43 08       	push   $0x843bde0
 8063d3c:	ff 35 40 be 43 08    	pushl  0x843be40
 8063d42:	e8 f9 54 fe ff       	call   8049240 <waitpid@plt>
 8063d47:	83 c4 0c             	add    $0xc,%esp
 8063d4a:	83 f8 00             	cmp    $0x0,%eax
 8063d4d:	7e 35                	jle    8063d84 <__afl_die>
 8063d4f:	6a 04                	push   $0x4
 8063d51:	68 e0 bd 43 08       	push   $0x843bde0
 8063d56:	68 c7 00 00 00       	push   $0xc7
 8063d5b:	e8 30 56 fe ff       	call   8049390 <write@plt>
 8063d60:	83 c4 0c             	add    $0xc,%esp
 8063d63:	eb 92                	jmp    8063cf7 <__afl_fork_wait_loop>

08063d65 <__afl_fork_resume>:
 8063d65:	68 c6 00 00 00       	push   $0xc6
 8063d6a:	e8 91 57 fe ff       	call   8049500 <close@plt>
 8063d6f:	68 c7 00 00 00       	push   $0xc7
 8063d74:	e8 87 57 fe ff       	call   8049500 <close@plt>
 8063d79:	83 c4 08             	add    $0x8,%esp
 8063d7c:	5a                   	pop    %edx
 8063d7d:	59                   	pop    %ecx
 8063d7e:	58                   	pop    %eax
 8063d7f:	e9 ea fe ff ff       	jmp    8063c6e <__afl_store>

08063d84 <__afl_die>:
 8063d84:	31 c0                	xor    %eax,%eax
 8063d86:	e8 c5 53 fe ff       	call   8049150 <_exit@plt>

08063d8b <__afl_setup_abort>:
 8063d8b:	fe 05 60 be 43 08    	incb   0x843be60
 8063d91:	59                   	pop    %ecx
 8063d92:	58                   	pop    %eax
 8063d93:	e9 ee fe ff ff       	jmp    8063c86 <__afl_return>

08063d98 <.AFL_SHM_ENV>:
 8063d98:	5f                   	pop    %edi
 8063d99:	5f                   	pop    %edi
 8063d9a:	41                   	inc    %ecx
 8063d9b:	46                   	inc    %esi
 8063d9c:	4c                   	dec    %esp
 8063d9d:	5f                   	pop    %edi
 8063d9e:	53                   	push   %ebx
 8063d9f:	48                   	dec    %eax
 8063da0:	4d                   	dec    %ebp
 8063da1:	5f                   	pop    %edi
 8063da2:	49                   	dec    %ecx
 8063da3:	44                   	inc    %esp
 8063da4:	00 66 90             	add    %ah,-0x70(%esi)
 8063da7:	66 90                	xchg   %ax,%ax
 8063da9:	66 90                	xchg   %ax,%ax
 8063dab:	66 90                	xchg   %ax,%ax
 8063dad:	66 90                	xchg   %ax,%ax
 8063daf:	90                   	nop

08063db0 <xalloc_die>:
#include "gettext.h"
#define _(msgid) gettext (msgid)

void
xalloc_die (void)
{
 8063db0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063db4:	89 3c 24             	mov    %edi,(%esp)
 8063db7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063dbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063dbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063dc3:	b9 1a 51 00 00       	mov    $0x511a,%ecx
 8063dc8:	e8 43 00 00 00       	call   8063e10 <__afl_maybe_log>
 8063dcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063dd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063dd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063dd9:	8b 3c 24             	mov    (%esp),%edi
 8063ddc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063de0:	83 ec 10             	sub    $0x10,%esp
  error (exit_failure, 0, "%s", _("memory exhausted"));
 8063de3:	6a 05                	push   $0x5
 8063de5:	68 af 83 06 08       	push   $0x80683af
 8063dea:	6a 00                	push   $0x0
 8063dec:	e8 df 53 fe ff       	call   80491d0 <dcgettext@plt>
 8063df1:	8b 15 50 b2 06 08    	mov    0x806b250,%edx
 8063df7:	50                   	push   %eax
 8063df8:	68 45 7c 06 08       	push   $0x8067c45
 8063dfd:	6a 00                	push   $0x0
 8063dff:	52                   	push   %edx
 8063e00:	e8 8b 54 fe ff       	call   8049290 <error@plt>

  /* _Noreturn cannot be given to error, since it may return if
     its first argument is 0.  To help compilers understand the
     xalloc_die does not return, call abort.  Also, the abort is a
     safety feature if exit_failure is 0 (which shouldn't happen).  */
  abort ();
 8063e05:	83 c4 20             	add    $0x20,%esp
 8063e08:	e8 d3 56 fe ff       	call   80494e0 <abort@plt>
 8063e0d:	8d 76 00             	lea    0x0(%esi),%esi

08063e10 <__afl_maybe_log>:
 8063e10:	9f                   	lahf   
 8063e11:	0f 90 c0             	seto   %al
 8063e14:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 8063e1a:	85 d2                	test   %edx,%edx
 8063e1c:	74 22                	je     8063e40 <__afl_setup>

08063e1e <__afl_store>:
 8063e1e:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 8063e24:	31 cf                	xor    %ecx,%edi
 8063e26:	d1 e9                	shr    %ecx
 8063e28:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 8063e2e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8063e32:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08063e36 <__afl_return>:
 8063e36:	04 7f                	add    $0x7f,%al
 8063e38:	9e                   	sahf   
 8063e39:	c3                   	ret    
 8063e3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08063e40 <__afl_setup>:
 8063e40:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 8063e47:	75 ed                	jne    8063e36 <__afl_return>
 8063e49:	50                   	push   %eax
 8063e4a:	51                   	push   %ecx
 8063e4b:	68 48 3f 06 08       	push   $0x8063f48
 8063e50:	e8 5b 54 fe ff       	call   80492b0 <getenv@plt>
 8063e55:	83 c4 04             	add    $0x4,%esp
 8063e58:	85 c0                	test   %eax,%eax
 8063e5a:	0f 84 db 00 00 00    	je     8063f3b <__afl_setup_abort>
 8063e60:	50                   	push   %eax
 8063e61:	e8 1a 56 fe ff       	call   8049480 <atoi@plt>
 8063e66:	83 c4 04             	add    $0x4,%esp
 8063e69:	6a 00                	push   $0x0
 8063e6b:	6a 00                	push   $0x0
 8063e6d:	50                   	push   %eax
 8063e6e:	e8 6d 53 fe ff       	call   80491e0 <shmat@plt>
 8063e73:	83 c4 0c             	add    $0xc,%esp
 8063e76:	83 f8 ff             	cmp    $0xffffffff,%eax
 8063e79:	0f 84 bc 00 00 00    	je     8063f3b <__afl_setup_abort>
 8063e7f:	c6 00 01             	movb   $0x1,(%eax)
 8063e82:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 8063e87:	89 c2                	mov    %eax,%edx
 8063e89:	59                   	pop    %ecx
 8063e8a:	58                   	pop    %eax

08063e8b <__afl_forkserver>:
 8063e8b:	50                   	push   %eax
 8063e8c:	51                   	push   %ecx
 8063e8d:	52                   	push   %edx
 8063e8e:	6a 04                	push   $0x4
 8063e90:	68 e0 bd 43 08       	push   $0x843bde0
 8063e95:	68 c7 00 00 00       	push   $0xc7
 8063e9a:	e8 f1 54 fe ff       	call   8049390 <write@plt>
 8063e9f:	83 c4 0c             	add    $0xc,%esp
 8063ea2:	83 f8 04             	cmp    $0x4,%eax
 8063ea5:	75 6e                	jne    8063f15 <__afl_fork_resume>

08063ea7 <__afl_fork_wait_loop>:
 8063ea7:	6a 04                	push   $0x4
 8063ea9:	68 e0 bd 43 08       	push   $0x843bde0
 8063eae:	68 c6 00 00 00       	push   $0xc6
 8063eb3:	e8 68 52 fe ff       	call   8049120 <read@plt>
 8063eb8:	83 c4 0c             	add    $0xc,%esp
 8063ebb:	83 f8 04             	cmp    $0x4,%eax
 8063ebe:	75 74                	jne    8063f34 <__afl_die>
 8063ec0:	e8 5b 55 fe ff       	call   8049420 <fork@plt>
 8063ec5:	83 f8 00             	cmp    $0x0,%eax
 8063ec8:	7c 6a                	jl     8063f34 <__afl_die>
 8063eca:	74 49                	je     8063f15 <__afl_fork_resume>
 8063ecc:	a3 40 be 43 08       	mov    %eax,0x843be40
 8063ed1:	6a 04                	push   $0x4
 8063ed3:	68 40 be 43 08       	push   $0x843be40
 8063ed8:	68 c7 00 00 00       	push   $0xc7
 8063edd:	e8 ae 54 fe ff       	call   8049390 <write@plt>
 8063ee2:	83 c4 0c             	add    $0xc,%esp
 8063ee5:	6a 00                	push   $0x0
 8063ee7:	68 e0 bd 43 08       	push   $0x843bde0
 8063eec:	ff 35 40 be 43 08    	pushl  0x843be40
 8063ef2:	e8 49 53 fe ff       	call   8049240 <waitpid@plt>
 8063ef7:	83 c4 0c             	add    $0xc,%esp
 8063efa:	83 f8 00             	cmp    $0x0,%eax
 8063efd:	7e 35                	jle    8063f34 <__afl_die>
 8063eff:	6a 04                	push   $0x4
 8063f01:	68 e0 bd 43 08       	push   $0x843bde0
 8063f06:	68 c7 00 00 00       	push   $0xc7
 8063f0b:	e8 80 54 fe ff       	call   8049390 <write@plt>
 8063f10:	83 c4 0c             	add    $0xc,%esp
 8063f13:	eb 92                	jmp    8063ea7 <__afl_fork_wait_loop>

08063f15 <__afl_fork_resume>:
 8063f15:	68 c6 00 00 00       	push   $0xc6
 8063f1a:	e8 e1 55 fe ff       	call   8049500 <close@plt>
 8063f1f:	68 c7 00 00 00       	push   $0xc7
 8063f24:	e8 d7 55 fe ff       	call   8049500 <close@plt>
 8063f29:	83 c4 08             	add    $0x8,%esp
 8063f2c:	5a                   	pop    %edx
 8063f2d:	59                   	pop    %ecx
 8063f2e:	58                   	pop    %eax
 8063f2f:	e9 ea fe ff ff       	jmp    8063e1e <__afl_store>

08063f34 <__afl_die>:
 8063f34:	31 c0                	xor    %eax,%eax
 8063f36:	e8 15 52 fe ff       	call   8049150 <_exit@plt>

08063f3b <__afl_setup_abort>:
 8063f3b:	fe 05 60 be 43 08    	incb   0x843be60
 8063f41:	59                   	pop    %ecx
 8063f42:	58                   	pop    %eax
 8063f43:	e9 ee fe ff ff       	jmp    8063e36 <__afl_return>

08063f48 <.AFL_SHM_ENV>:
 8063f48:	5f                   	pop    %edi
 8063f49:	5f                   	pop    %edi
 8063f4a:	41                   	inc    %ecx
 8063f4b:	46                   	inc    %esi
 8063f4c:	4c                   	dec    %esp
 8063f4d:	5f                   	pop    %edi
 8063f4e:	53                   	push   %ebx
 8063f4f:	48                   	dec    %eax
 8063f50:	4d                   	dec    %ebp
 8063f51:	5f                   	pop    %edi
 8063f52:	49                   	dec    %ecx
 8063f53:	44                   	inc    %esp
 8063f54:	00 66 90             	add    %ah,-0x70(%esi)
 8063f57:	66 90                	xchg   %ax,%ax
 8063f59:	66 90                	xchg   %ax,%ax
 8063f5b:	66 90                	xchg   %ax,%ax
 8063f5d:	66 90                	xchg   %ax,%ax
 8063f5f:	90                   	nop

08063f60 <rpl_fclose>:

/* Override fclose() to call the overridden fflush() or close().  */

int
rpl_fclose (FILE *fp)
{
 8063f60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063f64:	89 3c 24             	mov    %edi,(%esp)
 8063f67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063f6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063f6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063f73:	b9 62 ed 00 00       	mov    $0xed62,%ecx
 8063f78:	e8 1b 04 00 00       	call   8064398 <__afl_maybe_log>
 8063f7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063f81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063f85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063f89:	8b 3c 24             	mov    (%esp),%edi
 8063f8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063f90:	57                   	push   %edi
 8063f91:	56                   	push   %esi
 8063f92:	53                   	push   %ebx
 8063f93:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  int saved_errno = 0;
  int fd;
  int result = 0;

  /* Don't change behavior on memstreams.  */
  fd = fileno (fp+(lava_get(371))*(0x6c6174ee==(lava_get(371))||0xee74616c==(lava_get(371))));
 8063f97:	83 ec 0c             	sub    $0xc,%esp
 8063f9a:	68 73 01 00 00       	push   $0x173
 8063f9f:	e8 bc 2c ff ff       	call   8056c60 <lava_get>
 8063fa4:	c7 04 24 73 01 00 00 	movl   $0x173,(%esp)
 8063fab:	89 c6                	mov    %eax,%esi
 8063fad:	e8 ae 2c ff ff       	call   8056c60 <lava_get>
 8063fb2:	83 c4 10             	add    $0x10,%esp
 8063fb5:	3d ee 74 61 6c       	cmp    $0x6c6174ee,%eax
 8063fba:	ba 01 00 00 00       	mov    $0x1,%edx
 8063fbf:	74 4d                	je     806400e <rpl_fclose+0xae>
 8063fc1:	8d 76 00             	lea    0x0(%esi),%esi
 8063fc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063fc8:	89 3c 24             	mov    %edi,(%esp)
 8063fcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063fcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063fd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063fd7:	b9 bf 0f 00 00       	mov    $0xfbf,%ecx
 8063fdc:	e8 b7 03 00 00       	call   8064398 <__afl_maybe_log>
 8063fe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063fe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063fe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063fed:	8b 3c 24             	mov    (%esp),%edi
 8063ff0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063ff4:	83 ec 0c             	sub    $0xc,%esp
 8063ff7:	68 73 01 00 00       	push   $0x173
 8063ffc:	e8 5f 2c ff ff       	call   8056c60 <lava_get>
 8064001:	31 d2                	xor    %edx,%edx
 8064003:	83 c4 10             	add    $0x10,%esp
 8064006:	3d 6c 61 74 ee       	cmp    $0xee74616c,%eax
 806400b:	0f 94 c2             	sete   %dl
 806400e:	66 90                	xchg   %ax,%ax
 8064010:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064014:	89 3c 24             	mov    %edi,(%esp)
 8064017:	89 54 24 04          	mov    %edx,0x4(%esp)
 806401b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806401f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064023:	b9 4b 0c 00 00       	mov    $0xc4b,%ecx
 8064028:	e8 6b 03 00 00       	call   8064398 <__afl_maybe_log>
 806402d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064031:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064035:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064039:	8b 3c 24             	mov    (%esp),%edi
 806403c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064040:	69 c6 94 00 00 00    	imul   $0x94,%esi,%eax
 8064046:	83 ec 0c             	sub    $0xc,%esp
 8064049:	0f af d0             	imul   %eax,%edx
 806404c:	01 da                	add    %ebx,%edx
 806404e:	52                   	push   %edx
 806404f:	e8 9c 53 fe ff       	call   80493f0 <fileno@plt>
  if (fd < 0)
 8064054:	83 c4 10             	add    $0x10,%esp
 8064057:	85 c0                	test   %eax,%eax
 8064059:	0f 88 29 03 00 00    	js     8064388 <rpl_fclose+0x428>
 806405f:	90                   	nop
 8064060:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064064:	89 3c 24             	mov    %edi,(%esp)
 8064067:	89 54 24 04          	mov    %edx,0x4(%esp)
 806406b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806406f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064073:	b9 a8 77 00 00       	mov    $0x77a8,%ecx
 8064078:	e8 1b 03 00 00       	call   8064398 <__afl_maybe_log>
 806407d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064081:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064085:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064089:	8b 3c 24             	mov    (%esp),%edi
 806408c:	8d 64 24 10          	lea    0x10(%esp),%esp
    return fclose_nothrow (fp);

  /* We only need to flush the file if it is not reading or if it is
     seekable.  This only guarantees the file position of input files
     if the fflush module is also in use.  */
  if ((!freading (fp) || lseek (fileno (fp+(lava_get(374))*(0x6c6174eb==(lava_get(374))||0xeb74616c==(lava_get(374))))+(lava_get(374))*(0x6c6174eb==(lava_get(374))||0xeb74616c==(lava_get(374))), 0, SEEK_CUR) != -1)
 8064090:	83 ec 0c             	sub    $0xc,%esp
 8064093:	53                   	push   %ebx
 8064094:	e8 47 52 fe ff       	call   80492e0 <__freading@plt>
 8064099:	83 c4 10             	add    $0x10,%esp
 806409c:	85 c0                	test   %eax,%eax
 806409e:	0f 84 e4 01 00 00    	je     8064288 <rpl_fclose+0x328>
 80640a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80640a8:	89 3c 24             	mov    %edi,(%esp)
 80640ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80640af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80640b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80640b7:	b9 81 e8 00 00       	mov    $0xe881,%ecx
 80640bc:	e8 d7 02 00 00       	call   8064398 <__afl_maybe_log>
 80640c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80640c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80640c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80640cd:	8b 3c 24             	mov    (%esp),%edi
 80640d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80640d4:	83 ec 0c             	sub    $0xc,%esp
 80640d7:	68 76 01 00 00       	push   $0x176
 80640dc:	e8 7f 2b ff ff       	call   8056c60 <lava_get>
 80640e1:	c7 04 24 76 01 00 00 	movl   $0x176,(%esp)
 80640e8:	89 c7                	mov    %eax,%edi
 80640ea:	e8 71 2b ff ff       	call   8056c60 <lava_get>
 80640ef:	83 c4 10             	add    $0x10,%esp
 80640f2:	3d eb 74 61 6c       	cmp    $0x6c6174eb,%eax
 80640f7:	b9 01 00 00 00       	mov    $0x1,%ecx
 80640fc:	74 4c                	je     806414a <rpl_fclose+0x1ea>
 80640fe:	66 90                	xchg   %ax,%ax
 8064100:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064104:	89 3c 24             	mov    %edi,(%esp)
 8064107:	89 54 24 04          	mov    %edx,0x4(%esp)
 806410b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806410f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064113:	b9 15 0d 00 00       	mov    $0xd15,%ecx
 8064118:	e8 7b 02 00 00       	call   8064398 <__afl_maybe_log>
 806411d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064121:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064125:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064129:	8b 3c 24             	mov    (%esp),%edi
 806412c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064130:	83 ec 0c             	sub    $0xc,%esp
 8064133:	68 76 01 00 00       	push   $0x176
 8064138:	e8 23 2b ff ff       	call   8056c60 <lava_get>
 806413d:	31 c9                	xor    %ecx,%ecx
 806413f:	83 c4 10             	add    $0x10,%esp
 8064142:	3d 6c 61 74 eb       	cmp    $0xeb74616c,%eax
 8064147:	0f 94 c1             	sete   %cl
 806414a:	66 90                	xchg   %ax,%ax
 806414c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064150:	89 3c 24             	mov    %edi,(%esp)
 8064153:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806415b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806415f:	b9 43 36 00 00       	mov    $0x3643,%ecx
 8064164:	e8 2f 02 00 00       	call   8064398 <__afl_maybe_log>
 8064169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806416d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064171:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064175:	8b 3c 24             	mov    (%esp),%edi
 8064178:	8d 64 24 10          	lea    0x10(%esp),%esp
 806417c:	69 f7 94 00 00 00    	imul   $0x94,%edi,%esi
 8064182:	83 ec 0c             	sub    $0xc,%esp
 8064185:	0f af ce             	imul   %esi,%ecx
 8064188:	01 d9                	add    %ebx,%ecx
 806418a:	51                   	push   %ecx
 806418b:	e8 60 52 fe ff       	call   80493f0 <fileno@plt>
 8064190:	c7 04 24 76 01 00 00 	movl   $0x176,(%esp)
 8064197:	89 c6                	mov    %eax,%esi
 8064199:	e8 c2 2a ff ff       	call   8056c60 <lava_get>
 806419e:	c7 04 24 76 01 00 00 	movl   $0x176,(%esp)
 80641a5:	89 c7                	mov    %eax,%edi
 80641a7:	e8 b4 2a ff ff       	call   8056c60 <lava_get>
 80641ac:	83 c4 10             	add    $0x10,%esp
 80641af:	3d eb 74 61 6c       	cmp    $0x6c6174eb,%eax
 80641b4:	ba 01 00 00 00       	mov    $0x1,%edx
 80641b9:	74 4b                	je     8064206 <rpl_fclose+0x2a6>
 80641bb:	90                   	nop
 80641bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80641c0:	89 3c 24             	mov    %edi,(%esp)
 80641c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80641c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80641cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80641cf:	b9 c3 c1 00 00       	mov    $0xc1c3,%ecx
 80641d4:	e8 bf 01 00 00       	call   8064398 <__afl_maybe_log>
 80641d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80641dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80641e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80641e5:	8b 3c 24             	mov    (%esp),%edi
 80641e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80641ec:	83 ec 0c             	sub    $0xc,%esp
 80641ef:	68 76 01 00 00       	push   $0x176
 80641f4:	e8 67 2a ff ff       	call   8056c60 <lava_get>
 80641f9:	31 d2                	xor    %edx,%edx
 80641fb:	83 c4 10             	add    $0x10,%esp
 80641fe:	3d 6c 61 74 eb       	cmp    $0xeb74616c,%eax
 8064203:	0f 94 c2             	sete   %dl
 8064206:	66 90                	xchg   %ax,%ax
 8064208:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806420c:	89 3c 24             	mov    %edi,(%esp)
 806420f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064213:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064217:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806421b:	b9 f8 4c 00 00       	mov    $0x4cf8,%ecx
 8064220:	e8 73 01 00 00       	call   8064398 <__afl_maybe_log>
 8064225:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064229:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806422d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064231:	8b 3c 24             	mov    (%esp),%edi
 8064234:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064238:	0f af fa             	imul   %edx,%edi
 806423b:	6a 01                	push   $0x1
 806423d:	6a 00                	push   $0x0
 806423f:	6a 00                	push   $0x0
 8064241:	01 fe                	add    %edi,%esi
 8064243:	56                   	push   %esi
 8064244:	e8 47 52 fe ff       	call   8049490 <lseek64@plt>
 8064249:	21 d0                	and    %edx,%eax
 806424b:	83 c4 10             	add    $0x10,%esp
 806424e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8064251:	0f 84 31 01 00 00    	je     8064388 <rpl_fclose+0x428>
 8064257:	90                   	nop
 8064258:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806425c:	89 3c 24             	mov    %edi,(%esp)
 806425f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064263:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064267:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806426b:	b9 72 03 00 00       	mov    $0x372,%ecx
 8064270:	e8 23 01 00 00       	call   8064398 <__afl_maybe_log>
 8064275:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064279:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806427d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064281:	8b 3c 24             	mov    (%esp),%edi
 8064284:	8d 64 24 10          	lea    0x10(%esp),%esp
      && fflush (fp))
 8064288:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806428c:	89 3c 24             	mov    %edi,(%esp)
 806428f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064293:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064297:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806429b:	b9 1c 4d 00 00       	mov    $0x4d1c,%ecx
 80642a0:	e8 f3 00 00 00       	call   8064398 <__afl_maybe_log>
 80642a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80642a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80642ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80642b1:	8b 3c 24             	mov    (%esp),%edi
 80642b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80642b8:	83 ec 0c             	sub    $0xc,%esp
 80642bb:	53                   	push   %ebx
 80642bc:	e8 4f 07 00 00       	call   8064a10 <rpl_fflush>
 80642c1:	83 c4 10             	add    $0x10,%esp
 80642c4:	85 c0                	test   %eax,%eax
 80642c6:	0f 84 bc 00 00 00    	je     8064388 <rpl_fclose+0x428>
 80642cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80642d0:	89 3c 24             	mov    %edi,(%esp)
 80642d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80642d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80642db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80642df:	b9 ee d5 00 00       	mov    $0xd5ee,%ecx
 80642e4:	e8 af 00 00 00       	call   8064398 <__afl_maybe_log>
 80642e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80642ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80642f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80642f5:	8b 3c 24             	mov    (%esp),%edi
 80642f8:	8d 64 24 10          	lea    0x10(%esp),%esp
    saved_errno = errno;
 80642fc:	e8 df 50 fe ff       	call   80493e0 <__errno_location@plt>
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8064301:	83 ec 0c             	sub    $0xc,%esp
  /* We only need to flush the file if it is not reading or if it is
     seekable.  This only guarantees the file position of input files
     if the fflush module is also in use.  */
  if ((!freading (fp) || lseek (fileno (fp+(lava_get(374))*(0x6c6174eb==(lava_get(374))||0xeb74616c==(lava_get(374))))+(lava_get(374))*(0x6c6174eb==(lava_get(374))||0xeb74616c==(lava_get(374))), 0, SEEK_CUR) != -1)
      && fflush (fp))
    saved_errno = errno;
 8064304:	8b 38                	mov    (%eax),%edi
 8064306:	89 c6                	mov    %eax,%esi
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8064308:	53                   	push   %ebx
 8064309:	e8 82 4e fe ff       	call   8049190 <fclose@plt>
# endif

#endif /* !WINDOWS_SOCKETS */

  if (saved_errno != 0)
 806430e:	83 c4 10             	add    $0x10,%esp
 8064311:	85 ff                	test   %edi,%edi
 8064313:	74 3a                	je     806434f <rpl_fclose+0x3ef>
 8064315:	8d 76 00             	lea    0x0(%esi),%esi
 8064318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806431c:	89 3c 24             	mov    %edi,(%esp)
 806431f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806432b:	b9 72 c1 00 00       	mov    $0xc172,%ecx
 8064330:	e8 63 00 00 00       	call   8064398 <__afl_maybe_log>
 8064335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806433d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064341:	8b 3c 24             	mov    (%esp),%edi
 8064344:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      errno = saved_errno;
 8064348:	89 3e                	mov    %edi,(%esi)
      result = EOF;
 806434a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 806434f:	90                   	nop
    }

  return result;
}
 8064350:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064354:	89 3c 24             	mov    %edi,(%esp)
 8064357:	89 54 24 04          	mov    %edx,0x4(%esp)
 806435b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806435f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064363:	b9 66 8e 00 00       	mov    $0x8e66,%ecx
 8064368:	e8 2b 00 00 00       	call   8064398 <__afl_maybe_log>
 806436d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064371:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064375:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064379:	8b 3c 24             	mov    (%esp),%edi
 806437c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064380:	5b                   	pop    %ebx
 8064381:	5e                   	pop    %esi
 8064382:	5f                   	pop    %edi
 8064383:	c3                   	ret    
 8064384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8064388:	89 5c 24 10          	mov    %ebx,0x10(%esp)
      errno = saved_errno;
      result = EOF;
    }

  return result;
}
 806438c:	5b                   	pop    %ebx
 806438d:	5e                   	pop    %esi
 806438e:	5f                   	pop    %edi
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 806438f:	e9 fc 4d fe ff       	jmp    8049190 <fclose@plt>
 8064394:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08064398 <__afl_maybe_log>:
 8064398:	9f                   	lahf   
 8064399:	0f 90 c0             	seto   %al
 806439c:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 80643a2:	85 d2                	test   %edx,%edx
 80643a4:	74 22                	je     80643c8 <__afl_setup>

080643a6 <__afl_store>:
 80643a6:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 80643ac:	31 cf                	xor    %ecx,%edi
 80643ae:	d1 e9                	shr    %ecx
 80643b0:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 80643b6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80643ba:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080643be <__afl_return>:
 80643be:	04 7f                	add    $0x7f,%al
 80643c0:	9e                   	sahf   
 80643c1:	c3                   	ret    
 80643c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080643c8 <__afl_setup>:
 80643c8:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 80643cf:	75 ed                	jne    80643be <__afl_return>
 80643d1:	50                   	push   %eax
 80643d2:	51                   	push   %ecx
 80643d3:	68 d0 44 06 08       	push   $0x80644d0
 80643d8:	e8 d3 4e fe ff       	call   80492b0 <getenv@plt>
 80643dd:	83 c4 04             	add    $0x4,%esp
 80643e0:	85 c0                	test   %eax,%eax
 80643e2:	0f 84 db 00 00 00    	je     80644c3 <__afl_setup_abort>
 80643e8:	50                   	push   %eax
 80643e9:	e8 92 50 fe ff       	call   8049480 <atoi@plt>
 80643ee:	83 c4 04             	add    $0x4,%esp
 80643f1:	6a 00                	push   $0x0
 80643f3:	6a 00                	push   $0x0
 80643f5:	50                   	push   %eax
 80643f6:	e8 e5 4d fe ff       	call   80491e0 <shmat@plt>
 80643fb:	83 c4 0c             	add    $0xc,%esp
 80643fe:	83 f8 ff             	cmp    $0xffffffff,%eax
 8064401:	0f 84 bc 00 00 00    	je     80644c3 <__afl_setup_abort>
 8064407:	c6 00 01             	movb   $0x1,(%eax)
 806440a:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 806440f:	89 c2                	mov    %eax,%edx
 8064411:	59                   	pop    %ecx
 8064412:	58                   	pop    %eax

08064413 <__afl_forkserver>:
 8064413:	50                   	push   %eax
 8064414:	51                   	push   %ecx
 8064415:	52                   	push   %edx
 8064416:	6a 04                	push   $0x4
 8064418:	68 e0 bd 43 08       	push   $0x843bde0
 806441d:	68 c7 00 00 00       	push   $0xc7
 8064422:	e8 69 4f fe ff       	call   8049390 <write@plt>
 8064427:	83 c4 0c             	add    $0xc,%esp
 806442a:	83 f8 04             	cmp    $0x4,%eax
 806442d:	75 6e                	jne    806449d <__afl_fork_resume>

0806442f <__afl_fork_wait_loop>:
 806442f:	6a 04                	push   $0x4
 8064431:	68 e0 bd 43 08       	push   $0x843bde0
 8064436:	68 c6 00 00 00       	push   $0xc6
 806443b:	e8 e0 4c fe ff       	call   8049120 <read@plt>
 8064440:	83 c4 0c             	add    $0xc,%esp
 8064443:	83 f8 04             	cmp    $0x4,%eax
 8064446:	75 74                	jne    80644bc <__afl_die>
 8064448:	e8 d3 4f fe ff       	call   8049420 <fork@plt>
 806444d:	83 f8 00             	cmp    $0x0,%eax
 8064450:	7c 6a                	jl     80644bc <__afl_die>
 8064452:	74 49                	je     806449d <__afl_fork_resume>
 8064454:	a3 40 be 43 08       	mov    %eax,0x843be40
 8064459:	6a 04                	push   $0x4
 806445b:	68 40 be 43 08       	push   $0x843be40
 8064460:	68 c7 00 00 00       	push   $0xc7
 8064465:	e8 26 4f fe ff       	call   8049390 <write@plt>
 806446a:	83 c4 0c             	add    $0xc,%esp
 806446d:	6a 00                	push   $0x0
 806446f:	68 e0 bd 43 08       	push   $0x843bde0
 8064474:	ff 35 40 be 43 08    	pushl  0x843be40
 806447a:	e8 c1 4d fe ff       	call   8049240 <waitpid@plt>
 806447f:	83 c4 0c             	add    $0xc,%esp
 8064482:	83 f8 00             	cmp    $0x0,%eax
 8064485:	7e 35                	jle    80644bc <__afl_die>
 8064487:	6a 04                	push   $0x4
 8064489:	68 e0 bd 43 08       	push   $0x843bde0
 806448e:	68 c7 00 00 00       	push   $0xc7
 8064493:	e8 f8 4e fe ff       	call   8049390 <write@plt>
 8064498:	83 c4 0c             	add    $0xc,%esp
 806449b:	eb 92                	jmp    806442f <__afl_fork_wait_loop>

0806449d <__afl_fork_resume>:
 806449d:	68 c6 00 00 00       	push   $0xc6
 80644a2:	e8 59 50 fe ff       	call   8049500 <close@plt>
 80644a7:	68 c7 00 00 00       	push   $0xc7
 80644ac:	e8 4f 50 fe ff       	call   8049500 <close@plt>
 80644b1:	83 c4 08             	add    $0x8,%esp
 80644b4:	5a                   	pop    %edx
 80644b5:	59                   	pop    %ecx
 80644b6:	58                   	pop    %eax
 80644b7:	e9 ea fe ff ff       	jmp    80643a6 <__afl_store>

080644bc <__afl_die>:
 80644bc:	31 c0                	xor    %eax,%eax
 80644be:	e8 8d 4c fe ff       	call   8049150 <_exit@plt>

080644c3 <__afl_setup_abort>:
 80644c3:	fe 05 60 be 43 08    	incb   0x843be60
 80644c9:	59                   	pop    %ecx
 80644ca:	58                   	pop    %eax
 80644cb:	e9 ee fe ff ff       	jmp    80643be <__afl_return>

080644d0 <.AFL_SHM_ENV>:
 80644d0:	5f                   	pop    %edi
 80644d1:	5f                   	pop    %edi
 80644d2:	41                   	inc    %ecx
 80644d3:	46                   	inc    %esi
 80644d4:	4c                   	dec    %esp
 80644d5:	5f                   	pop    %edi
 80644d6:	53                   	push   %ebx
 80644d7:	48                   	dec    %eax
 80644d8:	4d                   	dec    %ebp
 80644d9:	5f                   	pop    %edi
 80644da:	49                   	dec    %ecx
 80644db:	44                   	inc    %esp
 80644dc:	00 66 90             	add    %ah,-0x70(%esi)
 80644df:	90                   	nop

080644e0 <rpl_fcntl>:
   FD_CLOEXEC is portable, but other flags may be present); otherwise
   return -1 and set errno.  */

int
rpl_fcntl (int fd, int action, /* arg */...)
{
 80644e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80644e4:	89 3c 24             	mov    %edi,(%esp)
 80644e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80644eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80644ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80644f3:	b9 36 e5 00 00       	mov    $0xe536,%ecx
 80644f8:	e8 c3 03 00 00       	call   80648c0 <__afl_maybe_log>
 80644fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064501:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064505:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064509:	8b 3c 24             	mov    (%esp),%edi
 806450c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064510:	57                   	push   %edi
 8064511:	56                   	push   %esi
 8064512:	53                   	push   %ebx
 8064513:	8b 44 24 14          	mov    0x14(%esp),%eax
 8064517:	8b 74 24 10          	mov    0x10(%esp),%esi
  va_list arg;
  int result = -1;
  va_start (arg, action);
  switch (action)
 806451b:	3d 06 04 00 00       	cmp    $0x406,%eax
 8064520:	0f 85 3a 01 00 00    	jne    8064660 <rpl_fcntl+0x180>
 8064526:	66 90                	xchg   %ax,%ax
 8064528:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806452c:	89 3c 24             	mov    %edi,(%esp)
 806452f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064533:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064537:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806453b:	b9 9a eb 00 00       	mov    $0xeb9a,%ecx
 8064540:	e8 7b 03 00 00       	call   80648c0 <__afl_maybe_log>
 8064545:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064549:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806454d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064551:	8b 3c 24             	mov    (%esp),%edi
 8064554:	8d 64 24 10          	lea    0x10(%esp),%esp
           older kernel that does not support it.  Cache the
           information on whether the system call really works, but
           avoid caching failure if the corresponding F_DUPFD fails
           for any reason.  0 = unknown, 1 = yes, -1 = no.  */
        static int have_dupfd_cloexec = GNULIB_defined_F_DUPFD_CLOEXEC ? -1 : 0;
        if (0 <= have_dupfd_cloexec)
 8064558:	8b 15 b0 bd 43 08    	mov    0x843bdb0,%edx
      } /* F_DUPFD */
#endif /* FCNTL_DUPFD_BUGGY || REPLACE_FCHDIR */

    case F_DUPFD_CLOEXEC:
      {
        int target = va_arg (arg, int);
 806455e:	8b 7c 24 18          	mov    0x18(%esp),%edi
           older kernel that does not support it.  Cache the
           information on whether the system call really works, but
           avoid caching failure if the corresponding F_DUPFD fails
           for any reason.  0 = unknown, 1 = yes, -1 = no.  */
        static int have_dupfd_cloexec = GNULIB_defined_F_DUPFD_CLOEXEC ? -1 : 0;
        if (0 <= have_dupfd_cloexec)
 8064562:	85 d2                	test   %edx,%edx
 8064564:	0f 88 b6 01 00 00    	js     8064720 <rpl_fcntl+0x240>
 806456a:	66 90                	xchg   %ax,%ax
 806456c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064570:	89 3c 24             	mov    %edi,(%esp)
 8064573:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064577:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806457b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806457f:	b9 de 59 00 00       	mov    $0x59de,%ecx
 8064584:	e8 37 03 00 00       	call   80648c0 <__afl_maybe_log>
 8064589:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806458d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064591:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064595:	8b 3c 24             	mov    (%esp),%edi
 8064598:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            result = fcntl (fd, action, target);
 806459c:	83 ec 04             	sub    $0x4,%esp
 806459f:	57                   	push   %edi
 80645a0:	68 06 04 00 00       	push   $0x406
 80645a5:	56                   	push   %esi
 80645a6:	e8 f5 4d fe ff       	call   80493a0 <fcntl@plt>
            if (0 <= result || errno != EINVAL)
 80645ab:	83 c4 10             	add    $0x10,%esp
 80645ae:	85 c0                	test   %eax,%eax
           avoid caching failure if the corresponding F_DUPFD fails
           for any reason.  0 = unknown, 1 = yes, -1 = no.  */
        static int have_dupfd_cloexec = GNULIB_defined_F_DUPFD_CLOEXEC ? -1 : 0;
        if (0 <= have_dupfd_cloexec)
          {
            result = fcntl (fd, action, target);
 80645b0:	89 c3                	mov    %eax,%ebx
            if (0 <= result || errno != EINVAL)
 80645b2:	0f 88 c8 00 00 00    	js     8064680 <rpl_fcntl+0x1a0>
 80645b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80645bc:	89 3c 24             	mov    %edi,(%esp)
 80645bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80645c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80645c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80645cb:	b9 a1 91 00 00       	mov    $0x91a1,%ecx
 80645d0:	e8 eb 02 00 00       	call   80648c0 <__afl_maybe_log>
 80645d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80645d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80645dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80645e1:	8b 3c 24             	mov    (%esp),%edi
 80645e4:	8d 64 24 10          	lea    0x10(%esp),%esp
              {
                have_dupfd_cloexec = 1;
 80645e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80645ec:	89 3c 24             	mov    %edi,(%esp)
 80645ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80645f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80645f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80645fb:	b9 3b 87 00 00       	mov    $0x873b,%ecx
 8064600:	e8 bb 02 00 00       	call   80648c0 <__afl_maybe_log>
 8064605:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064609:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806460d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064611:	8b 3c 24             	mov    (%esp),%edi
 8064614:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064618:	c7 05 b0 bd 43 08 01 	movl   $0x1,0x843bdb0
 806461f:	00 00 00 
 8064622:	66 90                	xchg   %ax,%ax
        break;
      }
    }
  va_end (arg);
  return result;
}
 8064624:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064628:	89 3c 24             	mov    %edi,(%esp)
 806462b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806462f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064633:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064637:	b9 f0 e7 00 00       	mov    $0xe7f0,%ecx
 806463c:	e8 7f 02 00 00       	call   80648c0 <__afl_maybe_log>
 8064641:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064645:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064649:	8b 54 24 04          	mov    0x4(%esp),%edx
 806464d:	8b 3c 24             	mov    (%esp),%edi
 8064650:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064654:	89 d8                	mov    %ebx,%eax
 8064656:	5b                   	pop    %ebx
 8064657:	5e                   	pop    %esi
 8064658:	5f                   	pop    %edi
 8064659:	c3                   	ret    
 806465a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

    default:
      {
#if HAVE_FCNTL
        void *p = va_arg (arg, void *);
        result = fcntl (fd, action, p);
 8064660:	83 ec 04             	sub    $0x4,%esp
 8064663:	ff 74 24 1c          	pushl  0x1c(%esp)
 8064667:	50                   	push   %eax
 8064668:	56                   	push   %esi
 8064669:	e8 32 4d fe ff       	call   80493a0 <fcntl@plt>
#else
        errno = EINVAL;
#endif
        break;
 806466e:	83 c4 10             	add    $0x10,%esp

    default:
      {
#if HAVE_FCNTL
        void *p = va_arg (arg, void *);
        result = fcntl (fd, action, p);
 8064671:	89 c3                	mov    %eax,%ebx
        break;
      }
    }
  va_end (arg);
  return result;
}
 8064673:	89 d8                	mov    %ebx,%eax
 8064675:	5b                   	pop    %ebx
 8064676:	5e                   	pop    %esi
 8064677:	5f                   	pop    %edi
 8064678:	c3                   	ret    
 8064679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
           for any reason.  0 = unknown, 1 = yes, -1 = no.  */
        static int have_dupfd_cloexec = GNULIB_defined_F_DUPFD_CLOEXEC ? -1 : 0;
        if (0 <= have_dupfd_cloexec)
          {
            result = fcntl (fd, action, target);
            if (0 <= result || errno != EINVAL)
 8064680:	e8 5b 4d fe ff       	call   80493e0 <__errno_location@plt>
 8064685:	83 38 16             	cmpl   $0x16,(%eax)
 8064688:	0f 85 5a ff ff ff    	jne    80645e8 <rpl_fcntl+0x108>
 806468e:	66 90                	xchg   %ax,%ax
 8064690:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064694:	89 3c 24             	mov    %edi,(%esp)
 8064697:	89 54 24 04          	mov    %edx,0x4(%esp)
 806469b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806469f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80646a3:	b9 de 5a 00 00       	mov    $0x5ade,%ecx
 80646a8:	e8 13 02 00 00       	call   80648c0 <__afl_maybe_log>
 80646ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80646b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80646b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80646b9:	8b 3c 24             	mov    (%esp),%edi
 80646bc:	8d 64 24 10          	lea    0x10(%esp),%esp
                  result = _gl_register_dup (fd, result);
# endif
              }
            else
              {
                result = rpl_fcntl (fd, F_DUPFD, target);
 80646c0:	83 ec 04             	sub    $0x4,%esp
 80646c3:	57                   	push   %edi
 80646c4:	6a 00                	push   $0x0
 80646c6:	56                   	push   %esi
 80646c7:	e8 14 fe ff ff       	call   80644e0 <rpl_fcntl>
                if (result < 0)
 80646cc:	83 c4 10             	add    $0x10,%esp
 80646cf:	85 c0                	test   %eax,%eax
                  result = _gl_register_dup (fd, result);
# endif
              }
            else
              {
                result = rpl_fcntl (fd, F_DUPFD, target);
 80646d1:	89 c3                	mov    %eax,%ebx
                if (result < 0)
 80646d3:	0f 88 49 ff ff ff    	js     8064622 <rpl_fcntl+0x142>
 80646d9:	8d 76 00             	lea    0x0(%esi),%esi
 80646dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80646e0:	89 3c 24             	mov    %edi,(%esp)
 80646e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80646e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80646eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80646ef:	b9 8b ec 00 00       	mov    $0xec8b,%ecx
 80646f4:	e8 c7 01 00 00       	call   80648c0 <__afl_maybe_log>
 80646f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80646fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064701:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064705:	8b 3c 24             	mov    (%esp),%edi
 8064708:	8d 64 24 10          	lea    0x10(%esp),%esp
                  break;
                have_dupfd_cloexec = -1;
 806470c:	c7 05 b0 bd 43 08 ff 	movl   $0xffffffff,0x843bdb0
 8064713:	ff ff ff 
 8064716:	e9 91 00 00 00       	jmp    80647ac <rpl_fcntl+0x2cc>
 806471b:	90                   	nop
 806471c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
              }
          }
        else
          result = rpl_fcntl (fd, F_DUPFD, target);
 8064720:	83 ec 04             	sub    $0x4,%esp
 8064723:	57                   	push   %edi
 8064724:	6a 00                	push   $0x0
 8064726:	56                   	push   %esi
 8064727:	e8 b4 fd ff ff       	call   80644e0 <rpl_fcntl>
        if (0 <= result && have_dupfd_cloexec == -1)
 806472c:	83 c4 10             	add    $0x10,%esp
 806472f:	85 c0                	test   %eax,%eax
                  break;
                have_dupfd_cloexec = -1;
              }
          }
        else
          result = rpl_fcntl (fd, F_DUPFD, target);
 8064731:	89 c3                	mov    %eax,%ebx
        if (0 <= result && have_dupfd_cloexec == -1)
 8064733:	0f 88 e9 fe ff ff    	js     8064622 <rpl_fcntl+0x142>
 8064739:	8d 76 00             	lea    0x0(%esi),%esi
 806473c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064740:	89 3c 24             	mov    %edi,(%esp)
 8064743:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064747:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806474b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806474f:	b9 2a 78 00 00       	mov    $0x782a,%ecx
 8064754:	e8 67 01 00 00       	call   80648c0 <__afl_maybe_log>
 8064759:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806475d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064761:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064765:	8b 3c 24             	mov    (%esp),%edi
 8064768:	8d 64 24 10          	lea    0x10(%esp),%esp
 806476c:	83 3d b0 bd 43 08 ff 	cmpl   $0xffffffff,0x843bdb0
 8064773:	0f 85 a9 fe ff ff    	jne    8064622 <rpl_fcntl+0x142>
 8064779:	8d 76 00             	lea    0x0(%esi),%esi
 806477c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064780:	89 3c 24             	mov    %edi,(%esp)
 8064783:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806478b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806478f:	b9 01 af 00 00       	mov    $0xaf01,%ecx
 8064794:	e8 27 01 00 00       	call   80648c0 <__afl_maybe_log>
 8064799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806479d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80647a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80647a5:	8b 3c 24             	mov    (%esp),%edi
 80647a8:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            int flags = fcntl (result, F_GETFD);
 80647ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80647b0:	89 3c 24             	mov    %edi,(%esp)
 80647b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80647b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80647bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80647bf:	b9 fb 52 00 00       	mov    $0x52fb,%ecx
 80647c4:	e8 f7 00 00 00       	call   80648c0 <__afl_maybe_log>
 80647c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80647cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80647d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80647d5:	8b 3c 24             	mov    (%esp),%edi
 80647d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80647dc:	83 ec 08             	sub    $0x8,%esp
 80647df:	6a 01                	push   $0x1
 80647e1:	53                   	push   %ebx
 80647e2:	e8 b9 4b fe ff       	call   80493a0 <fcntl@plt>
            if (flags < 0 || fcntl (result, F_SETFD, flags | FD_CLOEXEC) == -1)
 80647e7:	83 c4 10             	add    $0x10,%esp
 80647ea:	85 c0                	test   %eax,%eax
 80647ec:	78 7e                	js     806486c <rpl_fcntl+0x38c>
 80647ee:	66 90                	xchg   %ax,%ax
 80647f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80647f4:	89 3c 24             	mov    %edi,(%esp)
 80647f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80647fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80647ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064803:	b9 33 84 00 00       	mov    $0x8433,%ecx
 8064808:	e8 b3 00 00 00       	call   80648c0 <__afl_maybe_log>
 806480d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064811:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064815:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064819:	8b 3c 24             	mov    (%esp),%edi
 806481c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064820:	83 ec 04             	sub    $0x4,%esp
 8064823:	83 c8 01             	or     $0x1,%eax
 8064826:	50                   	push   %eax
 8064827:	6a 02                	push   $0x2
 8064829:	53                   	push   %ebx
 806482a:	e8 71 4b fe ff       	call   80493a0 <fcntl@plt>
 806482f:	83 c4 10             	add    $0x10,%esp
 8064832:	83 f8 ff             	cmp    $0xffffffff,%eax
 8064835:	0f 85 e7 fd ff ff    	jne    8064622 <rpl_fcntl+0x142>
 806483b:	90                   	nop
 806483c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064840:	89 3c 24             	mov    %edi,(%esp)
 8064843:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064847:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806484b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806484f:	b9 45 cc 00 00       	mov    $0xcc45,%ecx
 8064854:	e8 67 00 00 00       	call   80648c0 <__afl_maybe_log>
 8064859:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806485d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064861:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064865:	8b 3c 24             	mov    (%esp),%edi
 8064868:	8d 64 24 10          	lea    0x10(%esp),%esp
              {
                int saved_errno = errno;
 806486c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064870:	89 3c 24             	mov    %edi,(%esp)
 8064873:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806487b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806487f:	b9 75 9a 00 00       	mov    $0x9a75,%ecx
 8064884:	e8 37 00 00 00       	call   80648c0 <__afl_maybe_log>
 8064889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806488d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064891:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064895:	8b 3c 24             	mov    (%esp),%edi
 8064898:	8d 64 24 10          	lea    0x10(%esp),%esp
 806489c:	e8 3f 4b fe ff       	call   80493e0 <__errno_location@plt>
                close (result);
 80648a1:	83 ec 0c             	sub    $0xc,%esp
        if (0 <= result && have_dupfd_cloexec == -1)
          {
            int flags = fcntl (result, F_GETFD);
            if (flags < 0 || fcntl (result, F_SETFD, flags | FD_CLOEXEC) == -1)
              {
                int saved_errno = errno;
 80648a4:	8b 38                	mov    (%eax),%edi
 80648a6:	89 c6                	mov    %eax,%esi
                close (result);
 80648a8:	53                   	push   %ebx
                errno = saved_errno;
                result = -1;
 80648a9:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
          {
            int flags = fcntl (result, F_GETFD);
            if (flags < 0 || fcntl (result, F_SETFD, flags | FD_CLOEXEC) == -1)
              {
                int saved_errno = errno;
                close (result);
 80648ae:	e8 4d 4c fe ff       	call   8049500 <close@plt>
                errno = saved_errno;
 80648b3:	89 3e                	mov    %edi,(%esi)
 80648b5:	83 c4 10             	add    $0x10,%esp
 80648b8:	e9 65 fd ff ff       	jmp    8064622 <rpl_fcntl+0x142>
 80648bd:	8d 76 00             	lea    0x0(%esi),%esi

080648c0 <__afl_maybe_log>:
 80648c0:	9f                   	lahf   
 80648c1:	0f 90 c0             	seto   %al
 80648c4:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 80648ca:	85 d2                	test   %edx,%edx
 80648cc:	74 22                	je     80648f0 <__afl_setup>

080648ce <__afl_store>:
 80648ce:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 80648d4:	31 cf                	xor    %ecx,%edi
 80648d6:	d1 e9                	shr    %ecx
 80648d8:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 80648de:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80648e2:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080648e6 <__afl_return>:
 80648e6:	04 7f                	add    $0x7f,%al
 80648e8:	9e                   	sahf   
 80648e9:	c3                   	ret    
 80648ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080648f0 <__afl_setup>:
 80648f0:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 80648f7:	75 ed                	jne    80648e6 <__afl_return>
 80648f9:	50                   	push   %eax
 80648fa:	51                   	push   %ecx
 80648fb:	68 f8 49 06 08       	push   $0x80649f8
 8064900:	e8 ab 49 fe ff       	call   80492b0 <getenv@plt>
 8064905:	83 c4 04             	add    $0x4,%esp
 8064908:	85 c0                	test   %eax,%eax
 806490a:	0f 84 db 00 00 00    	je     80649eb <__afl_setup_abort>
 8064910:	50                   	push   %eax
 8064911:	e8 6a 4b fe ff       	call   8049480 <atoi@plt>
 8064916:	83 c4 04             	add    $0x4,%esp
 8064919:	6a 00                	push   $0x0
 806491b:	6a 00                	push   $0x0
 806491d:	50                   	push   %eax
 806491e:	e8 bd 48 fe ff       	call   80491e0 <shmat@plt>
 8064923:	83 c4 0c             	add    $0xc,%esp
 8064926:	83 f8 ff             	cmp    $0xffffffff,%eax
 8064929:	0f 84 bc 00 00 00    	je     80649eb <__afl_setup_abort>
 806492f:	c6 00 01             	movb   $0x1,(%eax)
 8064932:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 8064937:	89 c2                	mov    %eax,%edx
 8064939:	59                   	pop    %ecx
 806493a:	58                   	pop    %eax

0806493b <__afl_forkserver>:
 806493b:	50                   	push   %eax
 806493c:	51                   	push   %ecx
 806493d:	52                   	push   %edx
 806493e:	6a 04                	push   $0x4
 8064940:	68 e0 bd 43 08       	push   $0x843bde0
 8064945:	68 c7 00 00 00       	push   $0xc7
 806494a:	e8 41 4a fe ff       	call   8049390 <write@plt>
 806494f:	83 c4 0c             	add    $0xc,%esp
 8064952:	83 f8 04             	cmp    $0x4,%eax
 8064955:	75 6e                	jne    80649c5 <__afl_fork_resume>

08064957 <__afl_fork_wait_loop>:
 8064957:	6a 04                	push   $0x4
 8064959:	68 e0 bd 43 08       	push   $0x843bde0
 806495e:	68 c6 00 00 00       	push   $0xc6
 8064963:	e8 b8 47 fe ff       	call   8049120 <read@plt>
 8064968:	83 c4 0c             	add    $0xc,%esp
 806496b:	83 f8 04             	cmp    $0x4,%eax
 806496e:	75 74                	jne    80649e4 <__afl_die>
 8064970:	e8 ab 4a fe ff       	call   8049420 <fork@plt>
 8064975:	83 f8 00             	cmp    $0x0,%eax
 8064978:	7c 6a                	jl     80649e4 <__afl_die>
 806497a:	74 49                	je     80649c5 <__afl_fork_resume>
 806497c:	a3 40 be 43 08       	mov    %eax,0x843be40
 8064981:	6a 04                	push   $0x4
 8064983:	68 40 be 43 08       	push   $0x843be40
 8064988:	68 c7 00 00 00       	push   $0xc7
 806498d:	e8 fe 49 fe ff       	call   8049390 <write@plt>
 8064992:	83 c4 0c             	add    $0xc,%esp
 8064995:	6a 00                	push   $0x0
 8064997:	68 e0 bd 43 08       	push   $0x843bde0
 806499c:	ff 35 40 be 43 08    	pushl  0x843be40
 80649a2:	e8 99 48 fe ff       	call   8049240 <waitpid@plt>
 80649a7:	83 c4 0c             	add    $0xc,%esp
 80649aa:	83 f8 00             	cmp    $0x0,%eax
 80649ad:	7e 35                	jle    80649e4 <__afl_die>
 80649af:	6a 04                	push   $0x4
 80649b1:	68 e0 bd 43 08       	push   $0x843bde0
 80649b6:	68 c7 00 00 00       	push   $0xc7
 80649bb:	e8 d0 49 fe ff       	call   8049390 <write@plt>
 80649c0:	83 c4 0c             	add    $0xc,%esp
 80649c3:	eb 92                	jmp    8064957 <__afl_fork_wait_loop>

080649c5 <__afl_fork_resume>:
 80649c5:	68 c6 00 00 00       	push   $0xc6
 80649ca:	e8 31 4b fe ff       	call   8049500 <close@plt>
 80649cf:	68 c7 00 00 00       	push   $0xc7
 80649d4:	e8 27 4b fe ff       	call   8049500 <close@plt>
 80649d9:	83 c4 08             	add    $0x8,%esp
 80649dc:	5a                   	pop    %edx
 80649dd:	59                   	pop    %ecx
 80649de:	58                   	pop    %eax
 80649df:	e9 ea fe ff ff       	jmp    80648ce <__afl_store>

080649e4 <__afl_die>:
 80649e4:	31 c0                	xor    %eax,%eax
 80649e6:	e8 65 47 fe ff       	call   8049150 <_exit@plt>

080649eb <__afl_setup_abort>:
 80649eb:	fe 05 60 be 43 08    	incb   0x843be60
 80649f1:	59                   	pop    %ecx
 80649f2:	58                   	pop    %eax
 80649f3:	e9 ee fe ff ff       	jmp    80648e6 <__afl_return>

080649f8 <.AFL_SHM_ENV>:
 80649f8:	5f                   	pop    %edi
 80649f9:	5f                   	pop    %edi
 80649fa:	41                   	inc    %ecx
 80649fb:	46                   	inc    %esi
 80649fc:	4c                   	dec    %esp
 80649fd:	5f                   	pop    %edi
 80649fe:	53                   	push   %ebx
 80649ff:	48                   	dec    %eax
 8064a00:	4d                   	dec    %ebp
 8064a01:	5f                   	pop    %edi
 8064a02:	49                   	dec    %ecx
 8064a03:	44                   	inc    %esp
 8064a04:	00 66 90             	add    %ah,-0x70(%esi)
 8064a07:	66 90                	xchg   %ax,%ax
 8064a09:	66 90                	xchg   %ax,%ax
 8064a0b:	66 90                	xchg   %ax,%ax
 8064a0d:	66 90                	xchg   %ax,%ax
 8064a0f:	90                   	nop

08064a10 <rpl_fflush>:

/* Flush all pending data on STREAM according to POSIX rules.  Both
   output and seekable input streams are supported.  */
int
rpl_fflush (FILE *stream)
{
 8064a10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064a14:	89 3c 24             	mov    %edi,(%esp)
 8064a17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064a1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064a1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064a23:	b9 87 0f 00 00       	mov    $0xf87,%ecx
 8064a28:	e8 8b 05 00 00       	call   8064fb8 <__afl_maybe_log>
 8064a2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064a31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064a35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064a39:	8b 3c 24             	mov    (%esp),%edi
 8064a3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064a40:	55                   	push   %ebp
 8064a41:	57                   	push   %edi
 8064a42:	56                   	push   %esi
 8064a43:	53                   	push   %ebx
 8064a44:	83 ec 0c             	sub    $0xc,%esp
 8064a47:	8b 74 24 20          	mov    0x20(%esp),%esi
     fflush in this case.

     We test ! freading (stream) here, rather than fwriting (stream), because
     what we need to know is whether the stream holds a "read buffer", and on
     mingw this is indicated by _IOREAD, regardless of _IOWRT.  */
  if (stream == NULL || ! freading (stream))
 8064a4b:	85 f6                	test   %esi,%esi
 8064a4d:	74 75                	je     8064ac4 <rpl_fflush+0xb4>
 8064a4f:	90                   	nop
 8064a50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064a54:	89 3c 24             	mov    %edi,(%esp)
 8064a57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064a5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064a5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064a63:	b9 f5 1b 00 00       	mov    $0x1bf5,%ecx
 8064a68:	e8 4b 05 00 00       	call   8064fb8 <__afl_maybe_log>
 8064a6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064a71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064a75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064a79:	8b 3c 24             	mov    (%esp),%edi
 8064a7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064a80:	83 ec 0c             	sub    $0xc,%esp
 8064a83:	56                   	push   %esi
 8064a84:	e8 57 48 fe ff       	call   80492e0 <__freading@plt>
 8064a89:	83 c4 10             	add    $0x10,%esp
 8064a8c:	85 c0                	test   %eax,%eax
 8064a8e:	0f 85 dc 03 00 00    	jne    8064e70 <rpl_fflush+0x460>
 8064a94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064a98:	89 3c 24             	mov    %edi,(%esp)
 8064a9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064a9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064aa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064aa7:	b9 f2 3e 00 00       	mov    $0x3ef2,%ecx
 8064aac:	e8 07 05 00 00       	call   8064fb8 <__afl_maybe_log>
 8064ab1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064ab5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064ab9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064abd:	8b 3c 24             	mov    (%esp),%edi
 8064ac0:	8d 64 24 10          	lea    0x10(%esp),%esp
    return fflush (stream+(lava_get(563))*(0x6c61742e==(lava_get(563))||0x2e74616c==(lava_get(563)))+(lava_get(565))*(0x6c61742c==(lava_get(565))||0x2c74616c==(lava_get(565)))+(lava_get(571))*(0x6c617426==(lava_get(571))||0x2674616c==(lava_get(571)))+(lava_get(572))*(0x6c617425==(lava_get(572))||0x2574616c==(lava_get(572)))+(lava_get(573))*(0x6c617424==(lava_get(573))||0x2474616c==(lava_get(573))));
 8064ac4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064ac8:	89 3c 24             	mov    %edi,(%esp)
 8064acb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064acf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064ad3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064ad7:	b9 05 d7 00 00       	mov    $0xd705,%ecx
 8064adc:	e8 d7 04 00 00       	call   8064fb8 <__afl_maybe_log>
 8064ae1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064ae5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064ae9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064aed:	8b 3c 24             	mov    (%esp),%edi
 8064af0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064af4:	83 ec 0c             	sub    $0xc,%esp
 8064af7:	68 33 02 00 00       	push   $0x233
 8064afc:	e8 5f 21 ff ff       	call   8056c60 <lava_get>
 8064b01:	c7 04 24 33 02 00 00 	movl   $0x233,(%esp)
 8064b08:	89 c7                	mov    %eax,%edi
 8064b0a:	e8 51 21 ff ff       	call   8056c60 <lava_get>
 8064b0f:	83 c4 10             	add    $0x10,%esp
 8064b12:	3d 2e 74 61 6c       	cmp    $0x6c61742e,%eax
 8064b17:	b9 01 00 00 00       	mov    $0x1,%ecx
 8064b1c:	74 4c                	je     8064b6a <rpl_fflush+0x15a>
 8064b1e:	66 90                	xchg   %ax,%ax
 8064b20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064b24:	89 3c 24             	mov    %edi,(%esp)
 8064b27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064b2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064b2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064b33:	b9 eb 66 00 00       	mov    $0x66eb,%ecx
 8064b38:	e8 7b 04 00 00       	call   8064fb8 <__afl_maybe_log>
 8064b3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064b41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064b45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064b49:	8b 3c 24             	mov    (%esp),%edi
 8064b4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064b50:	83 ec 0c             	sub    $0xc,%esp
 8064b53:	68 33 02 00 00       	push   $0x233
 8064b58:	e8 03 21 ff ff       	call   8056c60 <lava_get>
 8064b5d:	31 c9                	xor    %ecx,%ecx
 8064b5f:	83 c4 10             	add    $0x10,%esp
 8064b62:	3d 6c 61 74 2e       	cmp    $0x2e74616c,%eax
 8064b67:	0f 94 c1             	sete   %cl
 8064b6a:	66 90                	xchg   %ax,%ax
 8064b6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064b70:	89 3c 24             	mov    %edi,(%esp)
 8064b73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064b77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064b7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064b7f:	b9 52 06 00 00       	mov    $0x652,%ecx
 8064b84:	e8 2f 04 00 00       	call   8064fb8 <__afl_maybe_log>
 8064b89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064b8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064b91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064b95:	8b 3c 24             	mov    (%esp),%edi
 8064b98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064b9c:	83 ec 0c             	sub    $0xc,%esp
 8064b9f:	0f af cf             	imul   %edi,%ecx
 8064ba2:	68 35 02 00 00       	push   $0x235
 8064ba7:	89 cd                	mov    %ecx,%ebp
 8064ba9:	e8 b2 20 ff ff       	call   8056c60 <lava_get>
 8064bae:	c7 04 24 35 02 00 00 	movl   $0x235,(%esp)
 8064bb5:	89 c3                	mov    %eax,%ebx
 8064bb7:	e8 a4 20 ff ff       	call   8056c60 <lava_get>
 8064bbc:	83 c4 10             	add    $0x10,%esp
 8064bbf:	3d 2c 74 61 6c       	cmp    $0x6c61742c,%eax
 8064bc4:	ba 01 00 00 00       	mov    $0x1,%edx
 8064bc9:	74 4b                	je     8064c16 <rpl_fflush+0x206>
 8064bcb:	90                   	nop
 8064bcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064bd0:	89 3c 24             	mov    %edi,(%esp)
 8064bd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064bd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064bdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064bdf:	b9 74 e2 00 00       	mov    $0xe274,%ecx
 8064be4:	e8 cf 03 00 00       	call   8064fb8 <__afl_maybe_log>
 8064be9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064bed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064bf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064bf5:	8b 3c 24             	mov    (%esp),%edi
 8064bf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064bfc:	83 ec 0c             	sub    $0xc,%esp
 8064bff:	68 35 02 00 00       	push   $0x235
 8064c04:	e8 57 20 ff ff       	call   8056c60 <lava_get>
 8064c09:	31 d2                	xor    %edx,%edx
 8064c0b:	83 c4 10             	add    $0x10,%esp
 8064c0e:	3d 6c 61 74 2c       	cmp    $0x2c74616c,%eax
 8064c13:	0f 94 c2             	sete   %dl
 8064c16:	66 90                	xchg   %ax,%ax
 8064c18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064c1c:	89 3c 24             	mov    %edi,(%esp)
 8064c1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064c23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064c27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064c2b:	b9 e4 8d 00 00       	mov    $0x8de4,%ecx
 8064c30:	e8 83 03 00 00       	call   8064fb8 <__afl_maybe_log>
 8064c35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064c39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064c3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064c41:	8b 3c 24             	mov    (%esp),%edi
 8064c44:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064c48:	83 ec 0c             	sub    $0xc,%esp
 8064c4b:	0f af da             	imul   %edx,%ebx
 8064c4e:	68 3c 02 00 00       	push   $0x23c
 8064c53:	e8 08 20 ff ff       	call   8056c60 <lava_get>
 8064c58:	01 eb                	add    %ebp,%ebx
 8064c5a:	c7 04 24 3c 02 00 00 	movl   $0x23c,(%esp)
 8064c61:	89 c7                	mov    %eax,%edi
 8064c63:	e8 f8 1f ff ff       	call   8056c60 <lava_get>
 8064c68:	83 c4 10             	add    $0x10,%esp
 8064c6b:	3d 25 74 61 6c       	cmp    $0x6c617425,%eax
 8064c70:	b9 01 00 00 00       	mov    $0x1,%ecx
 8064c75:	74 4b                	je     8064cc2 <rpl_fflush+0x2b2>
 8064c77:	90                   	nop
 8064c78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064c7c:	89 3c 24             	mov    %edi,(%esp)
 8064c7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064c83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064c87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064c8b:	b9 39 a8 00 00       	mov    $0xa839,%ecx
 8064c90:	e8 23 03 00 00       	call   8064fb8 <__afl_maybe_log>
 8064c95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064c99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064c9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064ca1:	8b 3c 24             	mov    (%esp),%edi
 8064ca4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064ca8:	83 ec 0c             	sub    $0xc,%esp
 8064cab:	68 3c 02 00 00       	push   $0x23c
 8064cb0:	e8 ab 1f ff ff       	call   8056c60 <lava_get>
 8064cb5:	31 c9                	xor    %ecx,%ecx
 8064cb7:	83 c4 10             	add    $0x10,%esp
 8064cba:	3d 6c 61 74 25       	cmp    $0x2574616c,%eax
 8064cbf:	0f 94 c1             	sete   %cl
 8064cc2:	66 90                	xchg   %ax,%ax
 8064cc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064cc8:	89 3c 24             	mov    %edi,(%esp)
 8064ccb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064ccf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064cd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064cd7:	b9 6e 7d 00 00       	mov    $0x7d6e,%ecx
 8064cdc:	e8 d7 02 00 00       	call   8064fb8 <__afl_maybe_log>
 8064ce1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064ce5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064ce9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064ced:	8b 3c 24             	mov    (%esp),%edi
 8064cf0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064cf4:	83 ec 0c             	sub    $0xc,%esp
 8064cf7:	68 3b 02 00 00       	push   $0x23b
 8064cfc:	0f af f9             	imul   %ecx,%edi
 8064cff:	e8 5c 1f ff ff       	call   8056c60 <lava_get>
 8064d04:	c7 04 24 3b 02 00 00 	movl   $0x23b,(%esp)
 8064d0b:	89 c5                	mov    %eax,%ebp
 8064d0d:	e8 4e 1f ff ff       	call   8056c60 <lava_get>
 8064d12:	83 c4 10             	add    $0x10,%esp
 8064d15:	3d 26 74 61 6c       	cmp    $0x6c617426,%eax
 8064d1a:	ba 01 00 00 00       	mov    $0x1,%edx
 8064d1f:	74 4d                	je     8064d6e <rpl_fflush+0x35e>
 8064d21:	8d 76 00             	lea    0x0(%esi),%esi
 8064d24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064d28:	89 3c 24             	mov    %edi,(%esp)
 8064d2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064d2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064d33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064d37:	b9 38 f7 00 00       	mov    $0xf738,%ecx
 8064d3c:	e8 77 02 00 00       	call   8064fb8 <__afl_maybe_log>
 8064d41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064d45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064d49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064d4d:	8b 3c 24             	mov    (%esp),%edi
 8064d50:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064d54:	83 ec 0c             	sub    $0xc,%esp
 8064d57:	68 3b 02 00 00       	push   $0x23b
 8064d5c:	e8 ff 1e ff ff       	call   8056c60 <lava_get>
 8064d61:	31 d2                	xor    %edx,%edx
 8064d63:	83 c4 10             	add    $0x10,%esp
 8064d66:	3d 6c 61 74 26       	cmp    $0x2674616c,%eax
 8064d6b:	0f 94 c2             	sete   %dl
 8064d6e:	66 90                	xchg   %ax,%ax
 8064d70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064d74:	89 3c 24             	mov    %edi,(%esp)
 8064d77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064d7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064d7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064d83:	b9 4d d4 00 00       	mov    $0xd44d,%ecx
 8064d88:	e8 2b 02 00 00       	call   8064fb8 <__afl_maybe_log>
 8064d8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064d91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064d95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064d99:	8b 3c 24             	mov    (%esp),%edi
 8064d9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064da0:	83 ec 0c             	sub    $0xc,%esp
 8064da3:	01 fb                	add    %edi,%ebx
 8064da5:	0f af ea             	imul   %edx,%ebp
 8064da8:	68 3d 02 00 00       	push   $0x23d
 8064dad:	e8 ae 1e ff ff       	call   8056c60 <lava_get>
 8064db2:	8d 3c 2b             	lea    (%ebx,%ebp,1),%edi
 8064db5:	c7 04 24 3d 02 00 00 	movl   $0x23d,(%esp)
 8064dbc:	89 c3                	mov    %eax,%ebx
 8064dbe:	e8 9d 1e ff ff       	call   8056c60 <lava_get>
 8064dc3:	83 c4 10             	add    $0x10,%esp
 8064dc6:	3d 24 74 61 6c       	cmp    $0x6c617424,%eax
 8064dcb:	b9 01 00 00 00       	mov    $0x1,%ecx
 8064dd0:	74 4c                	je     8064e1e <rpl_fflush+0x40e>
 8064dd2:	66 90                	xchg   %ax,%ax
 8064dd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064dd8:	89 3c 24             	mov    %edi,(%esp)
 8064ddb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064ddf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064de3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064de7:	b9 70 b4 00 00       	mov    $0xb470,%ecx
 8064dec:	e8 c7 01 00 00       	call   8064fb8 <__afl_maybe_log>
 8064df1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064df5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064df9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064dfd:	8b 3c 24             	mov    (%esp),%edi
 8064e00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064e04:	83 ec 0c             	sub    $0xc,%esp
 8064e07:	68 3d 02 00 00       	push   $0x23d
 8064e0c:	e8 4f 1e ff ff       	call   8056c60 <lava_get>
 8064e11:	31 c9                	xor    %ecx,%ecx
 8064e13:	83 c4 10             	add    $0x10,%esp
 8064e16:	3d 6c 61 74 24       	cmp    $0x2474616c,%eax
 8064e1b:	0f 94 c1             	sete   %cl
 8064e1e:	66 90                	xchg   %ax,%ax
 8064e20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064e24:	89 3c 24             	mov    %edi,(%esp)
 8064e27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064e2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064e2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064e33:	b9 22 72 00 00       	mov    $0x7222,%ecx
 8064e38:	e8 7b 01 00 00       	call   8064fb8 <__afl_maybe_log>
 8064e3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064e41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064e45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064e49:	8b 3c 24             	mov    (%esp),%edi
 8064e4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064e50:	0f af d9             	imul   %ecx,%ebx
 8064e53:	01 fb                	add    %edi,%ebx
 8064e55:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
 8064e5b:	01 f0                	add    %esi,%eax
 8064e5d:	89 44 24 20          	mov    %eax,0x20(%esp)
    return 0;

# endif
  }
#endif
}
 8064e61:	83 c4 0c             	add    $0xc,%esp
 8064e64:	5b                   	pop    %ebx
 8064e65:	5e                   	pop    %esi
 8064e66:	5f                   	pop    %edi
 8064e67:	5d                   	pop    %ebp

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream+(lava_get(380))*(0x6c6174e5==(lava_get(380))||0xe574616c==(lava_get(380))));

  return fflush (stream);
 8064e68:	e9 d3 42 fe ff       	jmp    8049140 <fflush@plt>
 8064e6d:	8d 76 00             	lea    0x0(%esi),%esi
  if (stream == NULL || ! freading (stream))
    return fflush (stream+(lava_get(563))*(0x6c61742e==(lava_get(563))||0x2e74616c==(lava_get(563)))+(lava_get(565))*(0x6c61742c==(lava_get(565))||0x2c74616c==(lava_get(565)))+(lava_get(571))*(0x6c617426==(lava_get(571))||0x2674616c==(lava_get(571)))+(lava_get(572))*(0x6c617425==(lava_get(572))||0x2574616c==(lava_get(572)))+(lava_get(573))*(0x6c617424==(lava_get(573))||0x2474616c==(lava_get(573))));

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream+(lava_get(380))*(0x6c6174e5==(lava_get(380))||0xe574616c==(lava_get(380))));
 8064e70:	83 ec 0c             	sub    $0xc,%esp
 8064e73:	68 7c 01 00 00       	push   $0x17c
 8064e78:	e8 e3 1d ff ff       	call   8056c60 <lava_get>
 8064e7d:	c7 04 24 7c 01 00 00 	movl   $0x17c,(%esp)
 8064e84:	89 c3                	mov    %eax,%ebx
 8064e86:	e8 d5 1d ff ff       	call   8056c60 <lava_get>
 8064e8b:	83 c4 10             	add    $0x10,%esp
 8064e8e:	3d e5 74 61 6c       	cmp    $0x6c6174e5,%eax
 8064e93:	ba 01 00 00 00       	mov    $0x1,%edx
 8064e98:	74 4c                	je     8064ee6 <rpl_fflush+0x4d6>
 8064e9a:	66 90                	xchg   %ax,%ax
 8064e9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064ea0:	89 3c 24             	mov    %edi,(%esp)
 8064ea3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064ea7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064eab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064eaf:	b9 3c f5 00 00       	mov    $0xf53c,%ecx
 8064eb4:	e8 ff 00 00 00       	call   8064fb8 <__afl_maybe_log>
 8064eb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064ebd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064ec1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064ec5:	8b 3c 24             	mov    (%esp),%edi
 8064ec8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064ecc:	83 ec 0c             	sub    $0xc,%esp
 8064ecf:	68 7c 01 00 00       	push   $0x17c
 8064ed4:	e8 87 1d ff ff       	call   8056c60 <lava_get>
 8064ed9:	31 d2                	xor    %edx,%edx
 8064edb:	83 c4 10             	add    $0x10,%esp
 8064ede:	3d 6c 61 74 e5       	cmp    $0xe574616c,%eax
 8064ee3:	0f 94 c2             	sete   %dl
 8064ee6:	66 90                	xchg   %ax,%ax
 8064ee8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064eec:	89 3c 24             	mov    %edi,(%esp)
 8064eef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064ef3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064ef7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064efb:	b9 f1 37 00 00       	mov    $0x37f1,%ecx
 8064f00:	e8 b3 00 00 00       	call   8064fb8 <__afl_maybe_log>
 8064f05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064f09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064f0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064f11:	8b 3c 24             	mov    (%esp),%edi
 8064f14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064f18:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
 8064f1e:	0f af d0             	imul   %eax,%edx
 8064f21:	01 f2                	add    %esi,%edx

/* Clear the stream's ungetc buffer, preserving the value of ftello (fp).  */
static void
clear_ungetc_buffer_preserving_position (FILE *fp)
{
  if (fp->_flags & _IO_IN_BACKUP)
 8064f23:	f7 02 00 01 00 00    	testl  $0x100,(%edx)
 8064f29:	75 75                	jne    8064fa0 <rpl_fflush+0x590>
 8064f2b:	90                   	nop
 8064f2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064f30:	89 3c 24             	mov    %edi,(%esp)
 8064f33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064f37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064f3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064f3f:	b9 00 7f 00 00       	mov    $0x7f00,%ecx
 8064f44:	e8 6f 00 00 00       	call   8064fb8 <__afl_maybe_log>
 8064f49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064f4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064f51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064f55:	8b 3c 24             	mov    (%esp),%edi
 8064f58:	8d 64 24 10          	lea    0x10(%esp),%esp

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream+(lava_get(380))*(0x6c6174e5==(lava_get(380))||0xe574616c==(lava_get(380))));

  return fflush (stream);
 8064f5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064f60:	89 3c 24             	mov    %edi,(%esp)
 8064f63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064f67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064f6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064f6f:	b9 df 8d 00 00       	mov    $0x8ddf,%ecx
 8064f74:	e8 3f 00 00 00       	call   8064fb8 <__afl_maybe_log>
 8064f79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064f7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064f81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064f85:	8b 3c 24             	mov    (%esp),%edi
 8064f88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064f8c:	89 74 24 20          	mov    %esi,0x20(%esp)
    return 0;

# endif
  }
#endif
}
 8064f90:	83 c4 0c             	add    $0xc,%esp
 8064f93:	5b                   	pop    %ebx
 8064f94:	5e                   	pop    %esi
 8064f95:	5f                   	pop    %edi
 8064f96:	5d                   	pop    %ebp

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream+(lava_get(380))*(0x6c6174e5==(lava_get(380))||0xe574616c==(lava_get(380))));

  return fflush (stream);
 8064f97:	e9 a4 41 fe ff       	jmp    8049140 <fflush@plt>
 8064f9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
static void
clear_ungetc_buffer_preserving_position (FILE *fp)
{
  if (fp->_flags & _IO_IN_BACKUP)
    /* _IO_free_backup_area is a bit complicated.  Simply call fseek.  */
    fseeko (fp, 0, SEEK_CUR);
 8064fa0:	6a 01                	push   $0x1
 8064fa2:	6a 00                	push   $0x0
 8064fa4:	6a 00                	push   $0x0
 8064fa6:	52                   	push   %edx
 8064fa7:	e8 54 01 00 00       	call   8065100 <rpl_fseeko>
 8064fac:	83 c4 10             	add    $0x10,%esp
 8064faf:	eb ab                	jmp    8064f5c <rpl_fflush+0x54c>
 8064fb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08064fb8 <__afl_maybe_log>:
 8064fb8:	9f                   	lahf   
 8064fb9:	0f 90 c0             	seto   %al
 8064fbc:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 8064fc2:	85 d2                	test   %edx,%edx
 8064fc4:	74 22                	je     8064fe8 <__afl_setup>

08064fc6 <__afl_store>:
 8064fc6:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 8064fcc:	31 cf                	xor    %ecx,%edi
 8064fce:	d1 e9                	shr    %ecx
 8064fd0:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 8064fd6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8064fda:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08064fde <__afl_return>:
 8064fde:	04 7f                	add    $0x7f,%al
 8064fe0:	9e                   	sahf   
 8064fe1:	c3                   	ret    
 8064fe2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08064fe8 <__afl_setup>:
 8064fe8:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 8064fef:	75 ed                	jne    8064fde <__afl_return>
 8064ff1:	50                   	push   %eax
 8064ff2:	51                   	push   %ecx
 8064ff3:	68 f0 50 06 08       	push   $0x80650f0
 8064ff8:	e8 b3 42 fe ff       	call   80492b0 <getenv@plt>
 8064ffd:	83 c4 04             	add    $0x4,%esp
 8065000:	85 c0                	test   %eax,%eax
 8065002:	0f 84 db 00 00 00    	je     80650e3 <__afl_setup_abort>
 8065008:	50                   	push   %eax
 8065009:	e8 72 44 fe ff       	call   8049480 <atoi@plt>
 806500e:	83 c4 04             	add    $0x4,%esp
 8065011:	6a 00                	push   $0x0
 8065013:	6a 00                	push   $0x0
 8065015:	50                   	push   %eax
 8065016:	e8 c5 41 fe ff       	call   80491e0 <shmat@plt>
 806501b:	83 c4 0c             	add    $0xc,%esp
 806501e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8065021:	0f 84 bc 00 00 00    	je     80650e3 <__afl_setup_abort>
 8065027:	c6 00 01             	movb   $0x1,(%eax)
 806502a:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 806502f:	89 c2                	mov    %eax,%edx
 8065031:	59                   	pop    %ecx
 8065032:	58                   	pop    %eax

08065033 <__afl_forkserver>:
 8065033:	50                   	push   %eax
 8065034:	51                   	push   %ecx
 8065035:	52                   	push   %edx
 8065036:	6a 04                	push   $0x4
 8065038:	68 e0 bd 43 08       	push   $0x843bde0
 806503d:	68 c7 00 00 00       	push   $0xc7
 8065042:	e8 49 43 fe ff       	call   8049390 <write@plt>
 8065047:	83 c4 0c             	add    $0xc,%esp
 806504a:	83 f8 04             	cmp    $0x4,%eax
 806504d:	75 6e                	jne    80650bd <__afl_fork_resume>

0806504f <__afl_fork_wait_loop>:
 806504f:	6a 04                	push   $0x4
 8065051:	68 e0 bd 43 08       	push   $0x843bde0
 8065056:	68 c6 00 00 00       	push   $0xc6
 806505b:	e8 c0 40 fe ff       	call   8049120 <read@plt>
 8065060:	83 c4 0c             	add    $0xc,%esp
 8065063:	83 f8 04             	cmp    $0x4,%eax
 8065066:	75 74                	jne    80650dc <__afl_die>
 8065068:	e8 b3 43 fe ff       	call   8049420 <fork@plt>
 806506d:	83 f8 00             	cmp    $0x0,%eax
 8065070:	7c 6a                	jl     80650dc <__afl_die>
 8065072:	74 49                	je     80650bd <__afl_fork_resume>
 8065074:	a3 40 be 43 08       	mov    %eax,0x843be40
 8065079:	6a 04                	push   $0x4
 806507b:	68 40 be 43 08       	push   $0x843be40
 8065080:	68 c7 00 00 00       	push   $0xc7
 8065085:	e8 06 43 fe ff       	call   8049390 <write@plt>
 806508a:	83 c4 0c             	add    $0xc,%esp
 806508d:	6a 00                	push   $0x0
 806508f:	68 e0 bd 43 08       	push   $0x843bde0
 8065094:	ff 35 40 be 43 08    	pushl  0x843be40
 806509a:	e8 a1 41 fe ff       	call   8049240 <waitpid@plt>
 806509f:	83 c4 0c             	add    $0xc,%esp
 80650a2:	83 f8 00             	cmp    $0x0,%eax
 80650a5:	7e 35                	jle    80650dc <__afl_die>
 80650a7:	6a 04                	push   $0x4
 80650a9:	68 e0 bd 43 08       	push   $0x843bde0
 80650ae:	68 c7 00 00 00       	push   $0xc7
 80650b3:	e8 d8 42 fe ff       	call   8049390 <write@plt>
 80650b8:	83 c4 0c             	add    $0xc,%esp
 80650bb:	eb 92                	jmp    806504f <__afl_fork_wait_loop>

080650bd <__afl_fork_resume>:
 80650bd:	68 c6 00 00 00       	push   $0xc6
 80650c2:	e8 39 44 fe ff       	call   8049500 <close@plt>
 80650c7:	68 c7 00 00 00       	push   $0xc7
 80650cc:	e8 2f 44 fe ff       	call   8049500 <close@plt>
 80650d1:	83 c4 08             	add    $0x8,%esp
 80650d4:	5a                   	pop    %edx
 80650d5:	59                   	pop    %ecx
 80650d6:	58                   	pop    %eax
 80650d7:	e9 ea fe ff ff       	jmp    8064fc6 <__afl_store>

080650dc <__afl_die>:
 80650dc:	31 c0                	xor    %eax,%eax
 80650de:	e8 6d 40 fe ff       	call   8049150 <_exit@plt>

080650e3 <__afl_setup_abort>:
 80650e3:	fe 05 60 be 43 08    	incb   0x843be60
 80650e9:	59                   	pop    %ecx
 80650ea:	58                   	pop    %eax
 80650eb:	e9 ee fe ff ff       	jmp    8064fde <__afl_return>

080650f0 <.AFL_SHM_ENV>:
 80650f0:	5f                   	pop    %edi
 80650f1:	5f                   	pop    %edi
 80650f2:	41                   	inc    %ecx
 80650f3:	46                   	inc    %esi
 80650f4:	4c                   	dec    %esp
 80650f5:	5f                   	pop    %edi
 80650f6:	53                   	push   %ebx
 80650f7:	48                   	dec    %eax
 80650f8:	4d                   	dec    %ebp
 80650f9:	5f                   	pop    %edi
 80650fa:	49                   	dec    %ecx
 80650fb:	44                   	inc    %esp
 80650fc:	00 66 90             	add    %ah,-0x70(%esi)
 80650ff:	90                   	nop

08065100 <rpl_fseeko>:
#  define fseeko _fseeki64
# else /* mingw */
#  define fseeko fseeko64
# endif
#endif
{
 8065100:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065104:	89 3c 24             	mov    %edi,(%esp)
 8065107:	89 54 24 04          	mov    %edx,0x4(%esp)
 806510b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806510f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065113:	b9 4b 12 00 00       	mov    $0x124b,%ecx
 8065118:	e8 f3 01 00 00       	call   8065310 <__afl_maybe_log>
 806511d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065121:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065125:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065129:	8b 3c 24             	mov    (%esp),%edi
 806512c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065130:	55                   	push   %ebp
 8065131:	57                   	push   %edi
 8065132:	56                   	push   %esi
 8065133:	53                   	push   %ebx
 8065134:	83 ec 0c             	sub    $0xc,%esp
 8065137:	8b 5c 24 20          	mov    0x20(%esp),%ebx
 806513b:	8b 74 24 24          	mov    0x24(%esp),%esi
 806513f:	8b 7c 24 28          	mov    0x28(%esp),%edi
 8065143:	8b 6c 24 2c          	mov    0x2c(%esp),%ebp
    return EOF;
#endif

  /* These tests are based on fpurge.c.  */
#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
  if (fp->_IO_read_end == fp->_IO_read_ptr
 8065147:	8b 43 04             	mov    0x4(%ebx),%eax
 806514a:	39 43 08             	cmp    %eax,0x8(%ebx)
 806514d:	0f 84 7d 00 00 00    	je     80651d0 <rpl_fseeko+0xd0>
 8065153:	90                   	nop
 8065154:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065158:	89 3c 24             	mov    %edi,(%esp)
 806515b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806515f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065163:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065167:	b9 c1 a9 00 00       	mov    $0xa9c1,%ecx
 806516c:	e8 9f 01 00 00       	call   8065310 <__afl_maybe_log>
 8065171:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065175:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065179:	8b 54 24 04          	mov    0x4(%esp),%edx
 806517d:	8b 3c 24             	mov    (%esp),%edi
 8065180:	8d 64 24 10          	lea    0x10(%esp),%esp
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
 8065184:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065188:	89 3c 24             	mov    %edi,(%esp)
 806518b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806518f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065193:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065197:	b9 ec 1e 00 00       	mov    $0x1eec,%ecx
 806519c:	e8 6f 01 00 00       	call   8065310 <__afl_maybe_log>
 80651a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80651a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80651a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80651ad:	8b 3c 24             	mov    (%esp),%edi
 80651b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80651b4:	89 6c 24 2c          	mov    %ebp,0x2c(%esp)
 80651b8:	89 74 24 24          	mov    %esi,0x24(%esp)
 80651bc:	89 7c 24 28          	mov    %edi,0x28(%esp)
 80651c0:	89 5c 24 20          	mov    %ebx,0x20(%esp)
}
 80651c4:	83 c4 0c             	add    $0xc,%esp
 80651c7:	5b                   	pop    %ebx
 80651c8:	5e                   	pop    %esi
 80651c9:	5f                   	pop    %edi
 80651ca:	5d                   	pop    %ebp
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
 80651cb:	e9 d0 3f fe ff       	jmp    80491a0 <fseeko64@plt>
#endif

  /* These tests are based on fpurge.c.  */
#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
  if (fp->_IO_read_end == fp->_IO_read_ptr
      && fp->_IO_write_ptr == fp->_IO_write_base
 80651d0:	8b 53 10             	mov    0x10(%ebx),%edx
 80651d3:	39 53 14             	cmp    %edx,0x14(%ebx)
 80651d6:	75 ac                	jne    8065184 <rpl_fseeko+0x84>
 80651d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80651dc:	89 3c 24             	mov    %edi,(%esp)
 80651df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80651e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80651e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80651eb:	b9 52 21 00 00       	mov    $0x2152,%ecx
 80651f0:	e8 1b 01 00 00       	call   8065310 <__afl_maybe_log>
 80651f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80651f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80651fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065201:	8b 3c 24             	mov    (%esp),%edi
 8065204:	8d 64 24 10          	lea    0x10(%esp),%esp
      && fp->_IO_save_base == NULL)
 8065208:	8b 4b 24             	mov    0x24(%ebx),%ecx
 806520b:	85 c9                	test   %ecx,%ecx
 806520d:	0f 85 71 ff ff ff    	jne    8065184 <rpl_fseeko+0x84>
 8065213:	90                   	nop
 8065214:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065218:	89 3c 24             	mov    %edi,(%esp)
 806521b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806521f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065223:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065227:	b9 9e 54 00 00       	mov    $0x549e,%ecx
 806522c:	e8 df 00 00 00       	call   8065310 <__afl_maybe_log>
 8065231:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065235:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065239:	8b 54 24 04          	mov    0x4(%esp),%edx
 806523d:	8b 3c 24             	mov    (%esp),%edi
 8065240:	8d 64 24 10          	lea    0x10(%esp),%esp
#endif
    {
      /* We get here when an fflush() call immediately preceded this one (or
         if ftell() has created buffers but no I/O has occurred on a
         newly-opened stream).  We know there are no buffers.  */
      off_t pos = lseek (fileno (fp), offset, whence);
 8065244:	83 ec 0c             	sub    $0xc,%esp
 8065247:	53                   	push   %ebx
 8065248:	e8 a3 41 fe ff       	call   80493f0 <fileno@plt>
 806524d:	55                   	push   %ebp
 806524e:	57                   	push   %edi
 806524f:	56                   	push   %esi
 8065250:	50                   	push   %eax
 8065251:	e8 3a 42 fe ff       	call   8049490 <lseek64@plt>
      if (pos == -1)
 8065256:	89 c6                	mov    %eax,%esi
 8065258:	83 c4 20             	add    $0x20,%esp
 806525b:	21 d6                	and    %edx,%esi
 806525d:	83 fe ff             	cmp    $0xffffffff,%esi
 8065260:	74 76                	je     80652d8 <rpl_fseeko+0x1d8>
 8065262:	66 90                	xchg   %ax,%ax
 8065264:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065268:	89 3c 24             	mov    %edi,(%esp)
 806526b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806526f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065273:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065277:	b9 02 46 00 00       	mov    $0x4602,%ecx
 806527c:	e8 8f 00 00 00       	call   8065310 <__afl_maybe_log>
 8065281:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065285:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065289:	8b 54 24 04          	mov    0x4(%esp),%edx
 806528d:	8b 3c 24             	mov    (%esp),%edi
 8065290:	8d 64 24 10          	lea    0x10(%esp),%esp
#endif
          return -1;
        }

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
      fp->_flags &= ~_IO_EOF_SEEN;
 8065294:	83 23 ef             	andl   $0xffffffef,(%ebx)
      fp->_offset = pos;
 8065297:	89 43 4c             	mov    %eax,0x4c(%ebx)
      fp->_flag &= ~_IOEOF;
#elif defined __MINT__              /* Atari FreeMiNT */
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
 806529a:	31 c0                	xor    %eax,%eax
          return -1;
        }

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
      fp->_flags &= ~_IO_EOF_SEEN;
      fp->_offset = pos;
 806529c:	89 53 50             	mov    %edx,0x50(%ebx)
 806529f:	90                   	nop
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
}
 80652a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80652a4:	89 3c 24             	mov    %edi,(%esp)
 80652a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80652ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80652af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80652b3:	b9 29 00 00 00       	mov    $0x29,%ecx
 80652b8:	e8 53 00 00 00       	call   8065310 <__afl_maybe_log>
 80652bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80652c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80652c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80652c9:	8b 3c 24             	mov    (%esp),%edi
 80652cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80652d0:	83 c4 0c             	add    $0xc,%esp
 80652d3:	5b                   	pop    %ebx
 80652d4:	5e                   	pop    %esi
 80652d5:	5f                   	pop    %edi
 80652d6:	5d                   	pop    %ebp
 80652d7:	c3                   	ret    
        {
#if defined __sferror || defined __DragonFly__ || defined __ANDROID__
          /* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin, Android */
          fp_->_flags &= ~__SOFF;
#endif
          return -1;
 80652d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80652dc:	89 3c 24             	mov    %edi,(%esp)
 80652df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80652e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80652e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80652eb:	b9 1a f0 00 00       	mov    $0xf01a,%ecx
 80652f0:	e8 1b 00 00 00       	call   8065310 <__afl_maybe_log>
 80652f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80652f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80652fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065301:	8b 3c 24             	mov    (%esp),%edi
 8065304:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065308:	83 c8 ff             	or     $0xffffffff,%eax
 806530b:	eb 92                	jmp    806529f <rpl_fseeko+0x19f>
 806530d:	8d 76 00             	lea    0x0(%esi),%esi

08065310 <__afl_maybe_log>:
 8065310:	9f                   	lahf   
 8065311:	0f 90 c0             	seto   %al
 8065314:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 806531a:	85 d2                	test   %edx,%edx
 806531c:	74 22                	je     8065340 <__afl_setup>

0806531e <__afl_store>:
 806531e:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 8065324:	31 cf                	xor    %ecx,%edi
 8065326:	d1 e9                	shr    %ecx
 8065328:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 806532e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8065332:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08065336 <__afl_return>:
 8065336:	04 7f                	add    $0x7f,%al
 8065338:	9e                   	sahf   
 8065339:	c3                   	ret    
 806533a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08065340 <__afl_setup>:
 8065340:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 8065347:	75 ed                	jne    8065336 <__afl_return>
 8065349:	50                   	push   %eax
 806534a:	51                   	push   %ecx
 806534b:	68 48 54 06 08       	push   $0x8065448
 8065350:	e8 5b 3f fe ff       	call   80492b0 <getenv@plt>
 8065355:	83 c4 04             	add    $0x4,%esp
 8065358:	85 c0                	test   %eax,%eax
 806535a:	0f 84 db 00 00 00    	je     806543b <__afl_setup_abort>
 8065360:	50                   	push   %eax
 8065361:	e8 1a 41 fe ff       	call   8049480 <atoi@plt>
 8065366:	83 c4 04             	add    $0x4,%esp
 8065369:	6a 00                	push   $0x0
 806536b:	6a 00                	push   $0x0
 806536d:	50                   	push   %eax
 806536e:	e8 6d 3e fe ff       	call   80491e0 <shmat@plt>
 8065373:	83 c4 0c             	add    $0xc,%esp
 8065376:	83 f8 ff             	cmp    $0xffffffff,%eax
 8065379:	0f 84 bc 00 00 00    	je     806543b <__afl_setup_abort>
 806537f:	c6 00 01             	movb   $0x1,(%eax)
 8065382:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 8065387:	89 c2                	mov    %eax,%edx
 8065389:	59                   	pop    %ecx
 806538a:	58                   	pop    %eax

0806538b <__afl_forkserver>:
 806538b:	50                   	push   %eax
 806538c:	51                   	push   %ecx
 806538d:	52                   	push   %edx
 806538e:	6a 04                	push   $0x4
 8065390:	68 e0 bd 43 08       	push   $0x843bde0
 8065395:	68 c7 00 00 00       	push   $0xc7
 806539a:	e8 f1 3f fe ff       	call   8049390 <write@plt>
 806539f:	83 c4 0c             	add    $0xc,%esp
 80653a2:	83 f8 04             	cmp    $0x4,%eax
 80653a5:	75 6e                	jne    8065415 <__afl_fork_resume>

080653a7 <__afl_fork_wait_loop>:
 80653a7:	6a 04                	push   $0x4
 80653a9:	68 e0 bd 43 08       	push   $0x843bde0
 80653ae:	68 c6 00 00 00       	push   $0xc6
 80653b3:	e8 68 3d fe ff       	call   8049120 <read@plt>
 80653b8:	83 c4 0c             	add    $0xc,%esp
 80653bb:	83 f8 04             	cmp    $0x4,%eax
 80653be:	75 74                	jne    8065434 <__afl_die>
 80653c0:	e8 5b 40 fe ff       	call   8049420 <fork@plt>
 80653c5:	83 f8 00             	cmp    $0x0,%eax
 80653c8:	7c 6a                	jl     8065434 <__afl_die>
 80653ca:	74 49                	je     8065415 <__afl_fork_resume>
 80653cc:	a3 40 be 43 08       	mov    %eax,0x843be40
 80653d1:	6a 04                	push   $0x4
 80653d3:	68 40 be 43 08       	push   $0x843be40
 80653d8:	68 c7 00 00 00       	push   $0xc7
 80653dd:	e8 ae 3f fe ff       	call   8049390 <write@plt>
 80653e2:	83 c4 0c             	add    $0xc,%esp
 80653e5:	6a 00                	push   $0x0
 80653e7:	68 e0 bd 43 08       	push   $0x843bde0
 80653ec:	ff 35 40 be 43 08    	pushl  0x843be40
 80653f2:	e8 49 3e fe ff       	call   8049240 <waitpid@plt>
 80653f7:	83 c4 0c             	add    $0xc,%esp
 80653fa:	83 f8 00             	cmp    $0x0,%eax
 80653fd:	7e 35                	jle    8065434 <__afl_die>
 80653ff:	6a 04                	push   $0x4
 8065401:	68 e0 bd 43 08       	push   $0x843bde0
 8065406:	68 c7 00 00 00       	push   $0xc7
 806540b:	e8 80 3f fe ff       	call   8049390 <write@plt>
 8065410:	83 c4 0c             	add    $0xc,%esp
 8065413:	eb 92                	jmp    80653a7 <__afl_fork_wait_loop>

08065415 <__afl_fork_resume>:
 8065415:	68 c6 00 00 00       	push   $0xc6
 806541a:	e8 e1 40 fe ff       	call   8049500 <close@plt>
 806541f:	68 c7 00 00 00       	push   $0xc7
 8065424:	e8 d7 40 fe ff       	call   8049500 <close@plt>
 8065429:	83 c4 08             	add    $0x8,%esp
 806542c:	5a                   	pop    %edx
 806542d:	59                   	pop    %ecx
 806542e:	58                   	pop    %eax
 806542f:	e9 ea fe ff ff       	jmp    806531e <__afl_store>

08065434 <__afl_die>:
 8065434:	31 c0                	xor    %eax,%eax
 8065436:	e8 15 3d fe ff       	call   8049150 <_exit@plt>

0806543b <__afl_setup_abort>:
 806543b:	fe 05 60 be 43 08    	incb   0x843be60
 8065441:	59                   	pop    %ecx
 8065442:	58                   	pop    %eax
 8065443:	e9 ee fe ff ff       	jmp    8065336 <__afl_return>

08065448 <.AFL_SHM_ENV>:
 8065448:	5f                   	pop    %edi
 8065449:	5f                   	pop    %edi
 806544a:	41                   	inc    %ecx
 806544b:	46                   	inc    %esi
 806544c:	4c                   	dec    %esp
 806544d:	5f                   	pop    %edi
 806544e:	53                   	push   %ebx
 806544f:	48                   	dec    %eax
 8065450:	4d                   	dec    %ebp
 8065451:	5f                   	pop    %edi
 8065452:	49                   	dec    %ecx
 8065453:	44                   	inc    %esp
 8065454:	00 66 90             	add    %ah,-0x70(%esi)
 8065457:	66 90                	xchg   %ax,%ax
 8065459:	66 90                	xchg   %ax,%ax
 806545b:	66 90                	xchg   %ax,%ax
 806545d:	66 90                	xchg   %ax,%ax
 806545f:	90                   	nop

08065460 <c_strcasecmp>:

#include "c-ctype.h"

int
c_strcasecmp (const char *s1, const char *s2)
{
 8065460:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065464:	89 3c 24             	mov    %edi,(%esp)
 8065467:	89 54 24 04          	mov    %edx,0x4(%esp)
 806546b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806546f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065473:	b9 91 07 00 00       	mov    $0x791,%ecx
 8065478:	e8 9b 01 00 00       	call   8065618 <__afl_maybe_log>
 806547d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065481:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065485:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065489:	8b 3c 24             	mov    (%esp),%edi
 806548c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065490:	55                   	push   %ebp
 8065491:	57                   	push   %edi
 8065492:	56                   	push   %esi
 8065493:	53                   	push   %ebx
 8065494:	8b 74 24 14          	mov    0x14(%esp),%esi
 8065498:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  register const unsigned char *p1 = (const unsigned char *) s1;
  register const unsigned char *p2 = (const unsigned char *) s2;
  unsigned char c1, c2;

  if (p1 == p2)
 806549c:	39 de                	cmp    %ebx,%esi
 806549e:	75 78                	jne    8065518 <c_strcasecmp+0xb8>
 80654a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80654a4:	89 3c 24             	mov    %edi,(%esp)
 80654a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80654ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80654af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80654b3:	b9 d2 4a 00 00       	mov    $0x4ad2,%ecx
 80654b8:	e8 5b 01 00 00       	call   8065618 <__afl_maybe_log>
 80654bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80654c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80654c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80654c9:	8b 3c 24             	mov    (%esp),%edi
 80654cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80654d0:	e9 08 01 00 00       	jmp    80655dd <c_strcasecmp+0x17d>
 80654d5:	8d 76 00             	lea    0x0(%esi),%esi
      c2 = c_tolower (*p2);

      if (c1 == '\0')
        break;

      ++p1;
 80654d8:	83 c6 01             	add    $0x1,%esi
      ++p2;
 80654db:	83 c3 01             	add    $0x1,%ebx
    }
  while (c1 == c2);
 80654de:	38 d0                	cmp    %dl,%al
 80654e0:	0f 85 ba 00 00 00    	jne    80655a0 <c_strcasecmp+0x140>
 80654e6:	66 90                	xchg   %ax,%ax
 80654e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80654ec:	89 3c 24             	mov    %edi,(%esp)
 80654ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80654f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80654f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80654fb:	b9 25 74 00 00       	mov    $0x7425,%ecx
 8065500:	e8 13 01 00 00       	call   8065618 <__afl_maybe_log>
 8065505:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065509:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806550d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065511:	8b 3c 24             	mov    (%esp),%edi
 8065514:	8d 64 24 10          	lea    0x10(%esp),%esp
  if (p1 == p2)
    return 0;

  do
    {
      c1 = c_tolower (*p1);
 8065518:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806551c:	89 3c 24             	mov    %edi,(%esp)
 806551f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065523:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065527:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806552b:	b9 b5 fc 00 00       	mov    $0xfcb5,%ecx
 8065530:	e8 e3 00 00 00       	call   8065618 <__afl_maybe_log>
 8065535:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065539:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806553d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065541:	8b 3c 24             	mov    (%esp),%edi
 8065544:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065548:	0f b6 06             	movzbl (%esi),%eax
 806554b:	8d 48 bf             	lea    -0x41(%eax),%ecx
 806554e:	8d 50 20             	lea    0x20(%eax),%edx
 8065551:	83 f9 19             	cmp    $0x19,%ecx
      c2 = c_tolower (*p2);
 8065554:	0f b6 0b             	movzbl (%ebx),%ecx
  if (p1 == p2)
    return 0;

  do
    {
      c1 = c_tolower (*p1);
 8065557:	0f 46 c2             	cmovbe %edx,%eax
      c2 = c_tolower (*p2);
 806555a:	8d 69 bf             	lea    -0x41(%ecx),%ebp
 806555d:	8d 51 20             	lea    0x20(%ecx),%edx
 8065560:	83 fd 19             	cmp    $0x19,%ebp
 8065563:	0f 47 d1             	cmova  %ecx,%edx

      if (c1 == '\0')
 8065566:	84 c0                	test   %al,%al
 8065568:	0f 85 6a ff ff ff    	jne    80654d8 <c_strcasecmp+0x78>
 806556e:	66 90                	xchg   %ax,%ax
 8065570:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065574:	89 3c 24             	mov    %edi,(%esp)
 8065577:	89 54 24 04          	mov    %edx,0x4(%esp)
 806557b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806557f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065583:	b9 2a 04 00 00       	mov    $0x42a,%ecx
 8065588:	e8 8b 00 00 00       	call   8065618 <__afl_maybe_log>
 806558d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065591:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065595:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065599:	8b 3c 24             	mov    (%esp),%edi
 806559c:	8d 64 24 10          	lea    0x10(%esp),%esp
      ++p2;
    }
  while (c1 == c2);

  if (UCHAR_MAX <= INT_MAX)
    return c1 - c2;
 80655a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80655a4:	89 3c 24             	mov    %edi,(%esp)
 80655a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80655ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80655af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80655b3:	b9 d1 d9 00 00       	mov    $0xd9d1,%ecx
 80655b8:	e8 5b 00 00 00       	call   8065618 <__afl_maybe_log>
 80655bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80655c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80655c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80655c9:	8b 3c 24             	mov    (%esp),%edi
 80655cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80655d0:	0f b6 f2             	movzbl %dl,%esi
 80655d3:	0f b6 c0             	movzbl %al,%eax
  else
    /* On machines where 'char' and 'int' are types of the same size, the
       difference of two 'unsigned char' values - including the sign bit -
       doesn't fit in an 'int'.  */
    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
}
 80655d6:	5b                   	pop    %ebx
      ++p2;
    }
  while (c1 == c2);

  if (UCHAR_MAX <= INT_MAX)
    return c1 - c2;
 80655d7:	29 f0                	sub    %esi,%eax
  else
    /* On machines where 'char' and 'int' are types of the same size, the
       difference of two 'unsigned char' values - including the sign bit -
       doesn't fit in an 'int'.  */
    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
}
 80655d9:	5e                   	pop    %esi
 80655da:	5f                   	pop    %edi
 80655db:	5d                   	pop    %ebp
 80655dc:	c3                   	ret    
 80655dd:	8d 76 00             	lea    0x0(%esi),%esi
 80655e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80655e4:	89 3c 24             	mov    %edi,(%esp)
 80655e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80655eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80655ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80655f3:	b9 0c 06 00 00       	mov    $0x60c,%ecx
 80655f8:	e8 1b 00 00 00       	call   8065618 <__afl_maybe_log>
 80655fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065601:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065605:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065609:	8b 3c 24             	mov    (%esp),%edi
 806560c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065610:	5b                   	pop    %ebx
  register const unsigned char *p1 = (const unsigned char *) s1;
  register const unsigned char *p2 = (const unsigned char *) s2;
  unsigned char c1, c2;

  if (p1 == p2)
    return 0;
 8065611:	31 c0                	xor    %eax,%eax
  else
    /* On machines where 'char' and 'int' are types of the same size, the
       difference of two 'unsigned char' values - including the sign bit -
       doesn't fit in an 'int'.  */
    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
}
 8065613:	5e                   	pop    %esi
 8065614:	5f                   	pop    %edi
 8065615:	5d                   	pop    %ebp
 8065616:	c3                   	ret    
 8065617:	90                   	nop

08065618 <__afl_maybe_log>:
 8065618:	9f                   	lahf   
 8065619:	0f 90 c0             	seto   %al
 806561c:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 8065622:	85 d2                	test   %edx,%edx
 8065624:	74 22                	je     8065648 <__afl_setup>

08065626 <__afl_store>:
 8065626:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 806562c:	31 cf                	xor    %ecx,%edi
 806562e:	d1 e9                	shr    %ecx
 8065630:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 8065636:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 806563a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0806563e <__afl_return>:
 806563e:	04 7f                	add    $0x7f,%al
 8065640:	9e                   	sahf   
 8065641:	c3                   	ret    
 8065642:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08065648 <__afl_setup>:
 8065648:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 806564f:	75 ed                	jne    806563e <__afl_return>
 8065651:	50                   	push   %eax
 8065652:	51                   	push   %ecx
 8065653:	68 50 57 06 08       	push   $0x8065750
 8065658:	e8 53 3c fe ff       	call   80492b0 <getenv@plt>
 806565d:	83 c4 04             	add    $0x4,%esp
 8065660:	85 c0                	test   %eax,%eax
 8065662:	0f 84 db 00 00 00    	je     8065743 <__afl_setup_abort>
 8065668:	50                   	push   %eax
 8065669:	e8 12 3e fe ff       	call   8049480 <atoi@plt>
 806566e:	83 c4 04             	add    $0x4,%esp
 8065671:	6a 00                	push   $0x0
 8065673:	6a 00                	push   $0x0
 8065675:	50                   	push   %eax
 8065676:	e8 65 3b fe ff       	call   80491e0 <shmat@plt>
 806567b:	83 c4 0c             	add    $0xc,%esp
 806567e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8065681:	0f 84 bc 00 00 00    	je     8065743 <__afl_setup_abort>
 8065687:	c6 00 01             	movb   $0x1,(%eax)
 806568a:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 806568f:	89 c2                	mov    %eax,%edx
 8065691:	59                   	pop    %ecx
 8065692:	58                   	pop    %eax

08065693 <__afl_forkserver>:
 8065693:	50                   	push   %eax
 8065694:	51                   	push   %ecx
 8065695:	52                   	push   %edx
 8065696:	6a 04                	push   $0x4
 8065698:	68 e0 bd 43 08       	push   $0x843bde0
 806569d:	68 c7 00 00 00       	push   $0xc7
 80656a2:	e8 e9 3c fe ff       	call   8049390 <write@plt>
 80656a7:	83 c4 0c             	add    $0xc,%esp
 80656aa:	83 f8 04             	cmp    $0x4,%eax
 80656ad:	75 6e                	jne    806571d <__afl_fork_resume>

080656af <__afl_fork_wait_loop>:
 80656af:	6a 04                	push   $0x4
 80656b1:	68 e0 bd 43 08       	push   $0x843bde0
 80656b6:	68 c6 00 00 00       	push   $0xc6
 80656bb:	e8 60 3a fe ff       	call   8049120 <read@plt>
 80656c0:	83 c4 0c             	add    $0xc,%esp
 80656c3:	83 f8 04             	cmp    $0x4,%eax
 80656c6:	75 74                	jne    806573c <__afl_die>
 80656c8:	e8 53 3d fe ff       	call   8049420 <fork@plt>
 80656cd:	83 f8 00             	cmp    $0x0,%eax
 80656d0:	7c 6a                	jl     806573c <__afl_die>
 80656d2:	74 49                	je     806571d <__afl_fork_resume>
 80656d4:	a3 40 be 43 08       	mov    %eax,0x843be40
 80656d9:	6a 04                	push   $0x4
 80656db:	68 40 be 43 08       	push   $0x843be40
 80656e0:	68 c7 00 00 00       	push   $0xc7
 80656e5:	e8 a6 3c fe ff       	call   8049390 <write@plt>
 80656ea:	83 c4 0c             	add    $0xc,%esp
 80656ed:	6a 00                	push   $0x0
 80656ef:	68 e0 bd 43 08       	push   $0x843bde0
 80656f4:	ff 35 40 be 43 08    	pushl  0x843be40
 80656fa:	e8 41 3b fe ff       	call   8049240 <waitpid@plt>
 80656ff:	83 c4 0c             	add    $0xc,%esp
 8065702:	83 f8 00             	cmp    $0x0,%eax
 8065705:	7e 35                	jle    806573c <__afl_die>
 8065707:	6a 04                	push   $0x4
 8065709:	68 e0 bd 43 08       	push   $0x843bde0
 806570e:	68 c7 00 00 00       	push   $0xc7
 8065713:	e8 78 3c fe ff       	call   8049390 <write@plt>
 8065718:	83 c4 0c             	add    $0xc,%esp
 806571b:	eb 92                	jmp    80656af <__afl_fork_wait_loop>

0806571d <__afl_fork_resume>:
 806571d:	68 c6 00 00 00       	push   $0xc6
 8065722:	e8 d9 3d fe ff       	call   8049500 <close@plt>
 8065727:	68 c7 00 00 00       	push   $0xc7
 806572c:	e8 cf 3d fe ff       	call   8049500 <close@plt>
 8065731:	83 c4 08             	add    $0x8,%esp
 8065734:	5a                   	pop    %edx
 8065735:	59                   	pop    %ecx
 8065736:	58                   	pop    %eax
 8065737:	e9 ea fe ff ff       	jmp    8065626 <__afl_store>

0806573c <__afl_die>:
 806573c:	31 c0                	xor    %eax,%eax
 806573e:	e8 0d 3a fe ff       	call   8049150 <_exit@plt>

08065743 <__afl_setup_abort>:
 8065743:	fe 05 60 be 43 08    	incb   0x843be60
 8065749:	59                   	pop    %ecx
 806574a:	58                   	pop    %eax
 806574b:	e9 ee fe ff ff       	jmp    806563e <__afl_return>

08065750 <.AFL_SHM_ENV>:
 8065750:	5f                   	pop    %edi
 8065751:	5f                   	pop    %edi
 8065752:	41                   	inc    %ecx
 8065753:	46                   	inc    %esi
 8065754:	4c                   	dec    %esp
 8065755:	5f                   	pop    %edi
 8065756:	53                   	push   %ebx
 8065757:	48                   	dec    %eax
 8065758:	4d                   	dec    %ebp
 8065759:	5f                   	pop    %edi
 806575a:	49                   	dec    %ecx
 806575b:	44                   	inc    %esp
 806575c:	00 66 90             	add    %ah,-0x70(%esi)
 806575f:	90                   	nop

08065760 <close_stream>:
   that writes to STREAM -- just let the internal stream state record
   the failure.  That's what the ferror test is checking below.  */

int
close_stream (FILE *stream)
{
 8065760:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065764:	89 3c 24             	mov    %edi,(%esp)
 8065767:	89 54 24 04          	mov    %edx,0x4(%esp)
 806576b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806576f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065773:	b9 9c 7f 00 00       	mov    $0x7f9c,%ecx
 8065778:	e8 bb 05 00 00       	call   8065d38 <__afl_maybe_log>
 806577d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065781:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065785:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065789:	8b 3c 24             	mov    (%esp),%edi
 806578c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065790:	55                   	push   %ebp
 8065791:	57                   	push   %edi
 8065792:	56                   	push   %esi
 8065793:	53                   	push   %ebx
 8065794:	83 ec 18             	sub    $0x18,%esp
 8065797:	8b 74 24 2c          	mov    0x2c(%esp),%esi
  const bool some_pending = (__fpending (stream+(lava_get(547))*(0x6c61743e==(lava_get(547))||0x3e74616c==(lava_get(547)))+(lava_get(549))*(0x6c61743c==(lava_get(549))||0x3c74616c==(lava_get(549)))+(lava_get(555))*(0x6c617436==(lava_get(555))||0x3674616c==(lava_get(555)))+(lava_get(556))*(0x6c617435==(lava_get(556))||0x3574616c==(lava_get(556)))+(lava_get(554))*(0x6c617437==(lava_get(554))||0x3774616c==(lava_get(554)))+(lava_get(557))*(0x6c617434==(lava_get(557))||0x3474616c==(lava_get(557)))) != 0);
 806579b:	68 23 02 00 00       	push   $0x223
 80657a0:	e8 bb 14 ff ff       	call   8056c60 <lava_get>
 80657a5:	c7 04 24 23 02 00 00 	movl   $0x223,(%esp)
 80657ac:	89 c5                	mov    %eax,%ebp
 80657ae:	e8 ad 14 ff ff       	call   8056c60 <lava_get>
 80657b3:	83 c4 10             	add    $0x10,%esp
 80657b6:	3d 3e 74 61 6c       	cmp    $0x6c61743e,%eax
 80657bb:	ba 01 00 00 00       	mov    $0x1,%edx
 80657c0:	74 4c                	je     806580e <close_stream+0xae>
 80657c2:	66 90                	xchg   %ax,%ax
 80657c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80657c8:	89 3c 24             	mov    %edi,(%esp)
 80657cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80657cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80657d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80657d7:	b9 09 0e 00 00       	mov    $0xe09,%ecx
 80657dc:	e8 57 05 00 00       	call   8065d38 <__afl_maybe_log>
 80657e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80657e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80657e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80657ed:	8b 3c 24             	mov    (%esp),%edi
 80657f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80657f4:	83 ec 0c             	sub    $0xc,%esp
 80657f7:	68 23 02 00 00       	push   $0x223
 80657fc:	e8 5f 14 ff ff       	call   8056c60 <lava_get>
 8065801:	31 d2                	xor    %edx,%edx
 8065803:	83 c4 10             	add    $0x10,%esp
 8065806:	3d 6c 61 74 3e       	cmp    $0x3e74616c,%eax
 806580b:	0f 94 c2             	sete   %dl
 806580e:	66 90                	xchg   %ax,%ax
 8065810:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065814:	89 3c 24             	mov    %edi,(%esp)
 8065817:	89 54 24 04          	mov    %edx,0x4(%esp)
 806581b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806581f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065823:	b9 b9 f2 00 00       	mov    $0xf2b9,%ecx
 8065828:	e8 0b 05 00 00       	call   8065d38 <__afl_maybe_log>
 806582d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065831:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065835:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065839:	8b 3c 24             	mov    (%esp),%edi
 806583c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065840:	83 ec 0c             	sub    $0xc,%esp
 8065843:	0f af d5             	imul   %ebp,%edx
 8065846:	68 25 02 00 00       	push   $0x225
 806584b:	89 d3                	mov    %edx,%ebx
 806584d:	e8 0e 14 ff ff       	call   8056c60 <lava_get>
 8065852:	c7 04 24 25 02 00 00 	movl   $0x225,(%esp)
 8065859:	89 c7                	mov    %eax,%edi
 806585b:	e8 00 14 ff ff       	call   8056c60 <lava_get>
 8065860:	83 c4 10             	add    $0x10,%esp
 8065863:	3d 3c 74 61 6c       	cmp    $0x6c61743c,%eax
 8065868:	b9 01 00 00 00       	mov    $0x1,%ecx
 806586d:	74 4b                	je     80658ba <close_stream+0x15a>
 806586f:	90                   	nop
 8065870:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065874:	89 3c 24             	mov    %edi,(%esp)
 8065877:	89 54 24 04          	mov    %edx,0x4(%esp)
 806587b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806587f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065883:	b9 24 f8 00 00       	mov    $0xf824,%ecx
 8065888:	e8 ab 04 00 00       	call   8065d38 <__afl_maybe_log>
 806588d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065891:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065895:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065899:	8b 3c 24             	mov    (%esp),%edi
 806589c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80658a0:	83 ec 0c             	sub    $0xc,%esp
 80658a3:	68 25 02 00 00       	push   $0x225
 80658a8:	e8 b3 13 ff ff       	call   8056c60 <lava_get>
 80658ad:	31 c9                	xor    %ecx,%ecx
 80658af:	83 c4 10             	add    $0x10,%esp
 80658b2:	3d 6c 61 74 3c       	cmp    $0x3c74616c,%eax
 80658b7:	0f 94 c1             	sete   %cl
 80658ba:	66 90                	xchg   %ax,%ax
 80658bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80658c0:	89 3c 24             	mov    %edi,(%esp)
 80658c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80658c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80658cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80658cf:	b9 4d b8 00 00       	mov    $0xb84d,%ecx
 80658d4:	e8 5f 04 00 00       	call   8065d38 <__afl_maybe_log>
 80658d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80658dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80658e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80658e5:	8b 3c 24             	mov    (%esp),%edi
 80658e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80658ec:	83 ec 0c             	sub    $0xc,%esp
 80658ef:	0f af f9             	imul   %ecx,%edi
 80658f2:	68 2c 02 00 00       	push   $0x22c
 80658f7:	e8 64 13 ff ff       	call   8056c60 <lava_get>
 80658fc:	8d 2c 1f             	lea    (%edi,%ebx,1),%ebp
 80658ff:	c7 04 24 2c 02 00 00 	movl   $0x22c,(%esp)
 8065906:	89 c7                	mov    %eax,%edi
 8065908:	e8 53 13 ff ff       	call   8056c60 <lava_get>
 806590d:	83 c4 10             	add    $0x10,%esp
 8065910:	3d 35 74 61 6c       	cmp    $0x6c617435,%eax
 8065915:	ba 01 00 00 00       	mov    $0x1,%edx
 806591a:	74 4a                	je     8065966 <close_stream+0x206>
 806591c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065920:	89 3c 24             	mov    %edi,(%esp)
 8065923:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065927:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806592b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806592f:	b9 4f b7 00 00       	mov    $0xb74f,%ecx
 8065934:	e8 ff 03 00 00       	call   8065d38 <__afl_maybe_log>
 8065939:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806593d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065941:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065945:	8b 3c 24             	mov    (%esp),%edi
 8065948:	8d 64 24 10          	lea    0x10(%esp),%esp
 806594c:	83 ec 0c             	sub    $0xc,%esp
 806594f:	68 2c 02 00 00       	push   $0x22c
 8065954:	e8 07 13 ff ff       	call   8056c60 <lava_get>
 8065959:	31 d2                	xor    %edx,%edx
 806595b:	83 c4 10             	add    $0x10,%esp
 806595e:	3d 6c 61 74 35       	cmp    $0x3574616c,%eax
 8065963:	0f 94 c2             	sete   %dl
 8065966:	66 90                	xchg   %ax,%ax
 8065968:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806596c:	89 3c 24             	mov    %edi,(%esp)
 806596f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065973:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065977:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806597b:	b9 e9 17 00 00       	mov    $0x17e9,%ecx
 8065980:	e8 b3 03 00 00       	call   8065d38 <__afl_maybe_log>
 8065985:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065989:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806598d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065991:	8b 3c 24             	mov    (%esp),%edi
 8065994:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065998:	83 ec 0c             	sub    $0xc,%esp
 806599b:	68 2b 02 00 00       	push   $0x22b
 80659a0:	0f af fa             	imul   %edx,%edi
 80659a3:	e8 b8 12 ff ff       	call   8056c60 <lava_get>
 80659a8:	c7 04 24 2b 02 00 00 	movl   $0x22b,(%esp)
 80659af:	89 c3                	mov    %eax,%ebx
 80659b1:	e8 aa 12 ff ff       	call   8056c60 <lava_get>
 80659b6:	83 c4 10             	add    $0x10,%esp
 80659b9:	3d 36 74 61 6c       	cmp    $0x6c617436,%eax
 80659be:	b9 01 00 00 00       	mov    $0x1,%ecx
 80659c3:	74 4d                	je     8065a12 <close_stream+0x2b2>
 80659c5:	8d 76 00             	lea    0x0(%esi),%esi
 80659c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80659cc:	89 3c 24             	mov    %edi,(%esp)
 80659cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80659d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80659d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80659db:	b9 d7 bd 00 00       	mov    $0xbdd7,%ecx
 80659e0:	e8 53 03 00 00       	call   8065d38 <__afl_maybe_log>
 80659e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80659e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80659ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80659f1:	8b 3c 24             	mov    (%esp),%edi
 80659f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80659f8:	83 ec 0c             	sub    $0xc,%esp
 80659fb:	68 2b 02 00 00       	push   $0x22b
 8065a00:	e8 5b 12 ff ff       	call   8056c60 <lava_get>
 8065a05:	31 c9                	xor    %ecx,%ecx
 8065a07:	83 c4 10             	add    $0x10,%esp
 8065a0a:	3d 6c 61 74 36       	cmp    $0x3674616c,%eax
 8065a0f:	0f 94 c1             	sete   %cl
 8065a12:	66 90                	xchg   %ax,%ax
 8065a14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065a18:	89 3c 24             	mov    %edi,(%esp)
 8065a1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065a1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065a23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065a27:	b9 ec e5 00 00       	mov    $0xe5ec,%ecx
 8065a2c:	e8 07 03 00 00       	call   8065d38 <__afl_maybe_log>
 8065a31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065a35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065a39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065a3d:	8b 3c 24             	mov    (%esp),%edi
 8065a40:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065a44:	83 ec 0c             	sub    $0xc,%esp
 8065a47:	01 ef                	add    %ebp,%edi
 8065a49:	0f af d9             	imul   %ecx,%ebx
 8065a4c:	68 2d 02 00 00       	push   $0x22d
 8065a51:	e8 0a 12 ff ff       	call   8056c60 <lava_get>
 8065a56:	8d 2c 1f             	lea    (%edi,%ebx,1),%ebp
 8065a59:	c7 04 24 2d 02 00 00 	movl   $0x22d,(%esp)
 8065a60:	89 c7                	mov    %eax,%edi
 8065a62:	e8 f9 11 ff ff       	call   8056c60 <lava_get>
 8065a67:	83 c4 10             	add    $0x10,%esp
 8065a6a:	3d 34 74 61 6c       	cmp    $0x6c617434,%eax
 8065a6f:	ba 01 00 00 00       	mov    $0x1,%edx
 8065a74:	74 4c                	je     8065ac2 <close_stream+0x362>
 8065a76:	66 90                	xchg   %ax,%ax
 8065a78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065a7c:	89 3c 24             	mov    %edi,(%esp)
 8065a7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065a83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065a87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065a8b:	b9 3b 1c 00 00       	mov    $0x1c3b,%ecx
 8065a90:	e8 a3 02 00 00       	call   8065d38 <__afl_maybe_log>
 8065a95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065a99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065a9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065aa1:	8b 3c 24             	mov    (%esp),%edi
 8065aa4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065aa8:	83 ec 0c             	sub    $0xc,%esp
 8065aab:	68 2d 02 00 00       	push   $0x22d
 8065ab0:	e8 ab 11 ff ff       	call   8056c60 <lava_get>
 8065ab5:	31 d2                	xor    %edx,%edx
 8065ab7:	83 c4 10             	add    $0x10,%esp
 8065aba:	3d 6c 61 74 34       	cmp    $0x3474616c,%eax
 8065abf:	0f 94 c2             	sete   %dl
 8065ac2:	66 90                	xchg   %ax,%ax
 8065ac4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065ac8:	89 3c 24             	mov    %edi,(%esp)
 8065acb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065acf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065ad3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065ad7:	b9 eb cf 00 00       	mov    $0xcfeb,%ecx
 8065adc:	e8 57 02 00 00       	call   8065d38 <__afl_maybe_log>
 8065ae1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065ae5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065ae9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065aed:	8b 3c 24             	mov    (%esp),%edi
 8065af0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065af4:	83 ec 0c             	sub    $0xc,%esp
 8065af7:	68 2a 02 00 00       	push   $0x22a
 8065afc:	0f af fa             	imul   %edx,%edi
 8065aff:	e8 5c 11 ff ff       	call   8056c60 <lava_get>
 8065b04:	c7 04 24 2a 02 00 00 	movl   $0x22a,(%esp)
 8065b0b:	89 c3                	mov    %eax,%ebx
 8065b0d:	e8 4e 11 ff ff       	call   8056c60 <lava_get>
 8065b12:	83 c4 10             	add    $0x10,%esp
 8065b15:	3d 37 74 61 6c       	cmp    $0x6c617437,%eax
 8065b1a:	b9 01 00 00 00       	mov    $0x1,%ecx
 8065b1f:	74 4d                	je     8065b6e <close_stream+0x40e>
 8065b21:	8d 76 00             	lea    0x0(%esi),%esi
 8065b24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065b28:	89 3c 24             	mov    %edi,(%esp)
 8065b2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065b2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065b33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065b37:	b9 1a 1c 00 00       	mov    $0x1c1a,%ecx
 8065b3c:	e8 f7 01 00 00       	call   8065d38 <__afl_maybe_log>
 8065b41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065b45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065b49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065b4d:	8b 3c 24             	mov    (%esp),%edi
 8065b50:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065b54:	83 ec 0c             	sub    $0xc,%esp
 8065b57:	68 2a 02 00 00       	push   $0x22a
 8065b5c:	e8 ff 10 ff ff       	call   8056c60 <lava_get>
 8065b61:	31 c9                	xor    %ecx,%ecx
 8065b63:	83 c4 10             	add    $0x10,%esp
 8065b66:	3d 6c 61 74 37       	cmp    $0x3774616c,%eax
 8065b6b:	0f 94 c1             	sete   %cl
 8065b6e:	66 90                	xchg   %ax,%ax
 8065b70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065b74:	89 3c 24             	mov    %edi,(%esp)
 8065b77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065b7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065b7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065b83:	b9 af de 00 00       	mov    $0xdeaf,%ecx
 8065b88:	e8 ab 01 00 00       	call   8065d38 <__afl_maybe_log>
 8065b8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065b91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065b95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065b99:	8b 3c 24             	mov    (%esp),%edi
 8065b9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065ba0:	0f af d9             	imul   %ecx,%ebx
 8065ba3:	01 ef                	add    %ebp,%edi
 8065ba5:	83 ec 0c             	sub    $0xc,%esp
 8065ba8:	01 fb                	add    %edi,%ebx
 8065baa:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
 8065bb0:	01 f0                	add    %esi,%eax
 8065bb2:	50                   	push   %eax
 8065bb3:	e8 a8 36 fe ff       	call   8049260 <__fpending@plt>

/* Faster versions when locking is not required.  */
__STDIO_INLINE int
__NTH (ferror_unlocked (FILE *__stream))
{
  return _IO_ferror_unlocked (__stream);
 8065bb8:	8b 1e                	mov    (%esi),%ebx
 8065bba:	89 c5                	mov    %eax,%ebp
  const bool prev_fail = (ferror (stream) != 0);
  const bool fclose_fail = (fclose (stream) != 0);
 8065bbc:	89 34 24             	mov    %esi,(%esp)
 8065bbf:	e8 9c e3 ff ff       	call   8063f60 <rpl_fclose>
 8065bc4:	83 c4 10             	add    $0x10,%esp
 8065bc7:	83 e3 20             	and    $0x20,%ebx
 8065bca:	85 c0                	test   %eax,%eax
 8065bcc:	0f 95 c2             	setne  %dl
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8065bcf:	85 db                	test   %ebx,%ebx
 8065bd1:	0f 85 e9 00 00 00    	jne    8065cc0 <close_stream+0x560>
 8065bd7:	90                   	nop
 8065bd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065bdc:	89 3c 24             	mov    %edi,(%esp)
 8065bdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065be3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065be7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065beb:	b9 df fd 00 00       	mov    $0xfddf,%ecx
 8065bf0:	e8 43 01 00 00       	call   8065d38 <__afl_maybe_log>
 8065bf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065bf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065bfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065c01:	8b 3c 24             	mov    (%esp),%edi
 8065c04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065c08:	84 d2                	test   %dl,%dl
 8065c0a:	74 70                	je     8065c7c <close_stream+0x51c>
 8065c0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065c10:	89 3c 24             	mov    %edi,(%esp)
 8065c13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065c17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065c1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065c1f:	b9 1f d3 00 00       	mov    $0xd31f,%ecx
 8065c24:	e8 0f 01 00 00       	call   8065d38 <__afl_maybe_log>
 8065c29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065c2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065c31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065c35:	8b 3c 24             	mov    (%esp),%edi
 8065c38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065c3c:	85 ed                	test   %ebp,%ebp
    {
      if (! fclose_fail)
        errno = 0;
      return EOF;
 8065c3e:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8065c43:	0f 84 cf 00 00 00    	je     8065d18 <close_stream+0x5b8>
 8065c49:	8d 76 00             	lea    0x0(%esi),%esi
 8065c4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065c50:	89 3c 24             	mov    %edi,(%esp)
 8065c53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065c57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065c5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065c5f:	b9 7c 81 00 00       	mov    $0x817c,%ecx
 8065c64:	e8 cf 00 00 00       	call   8065d38 <__afl_maybe_log>
 8065c69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065c6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065c71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065c75:	8b 3c 24             	mov    (%esp),%edi
 8065c78:	8d 64 24 10          	lea    0x10(%esp),%esp
        errno = 0;
      return EOF;
    }

  return 0;
}
 8065c7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065c80:	89 3c 24             	mov    %edi,(%esp)
 8065c83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065c87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065c8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065c8f:	b9 ee 65 00 00       	mov    $0x65ee,%ecx
 8065c94:	e8 9f 00 00 00       	call   8065d38 <__afl_maybe_log>
 8065c99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065c9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065ca1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065ca5:	8b 3c 24             	mov    (%esp),%edi
 8065ca8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065cac:	83 c4 0c             	add    $0xc,%esp
 8065caf:	89 d8                	mov    %ebx,%eax
 8065cb1:	5b                   	pop    %ebx
 8065cb2:	5e                   	pop    %esi
 8065cb3:	5f                   	pop    %edi
 8065cb4:	5d                   	pop    %ebp
 8065cb5:	c3                   	ret    
 8065cb6:	8d 76 00             	lea    0x0(%esi),%esi
 8065cb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
    {
      if (! fclose_fail)
 8065cc0:	84 d2                	test   %dl,%dl
        errno = 0;
      return EOF;
 8065cc2:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
    {
      if (! fclose_fail)
 8065cc7:	75 b3                	jne    8065c7c <close_stream+0x51c>
 8065cc9:	8d 76 00             	lea    0x0(%esi),%esi
 8065ccc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065cd0:	89 3c 24             	mov    %edi,(%esp)
 8065cd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065cd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065cdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065cdf:	b9 a8 58 00 00       	mov    $0x58a8,%ecx
 8065ce4:	e8 4f 00 00 00       	call   8065d38 <__afl_maybe_log>
 8065ce9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065ced:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065cf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065cf5:	8b 3c 24             	mov    (%esp),%edi
 8065cf8:	8d 64 24 10          	lea    0x10(%esp),%esp
        errno = 0;
 8065cfc:	e8 df 36 fe ff       	call   80493e0 <__errno_location@plt>
 8065d01:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      return EOF;
    }

  return 0;
}
 8065d07:	83 c4 0c             	add    $0xc,%esp
 8065d0a:	89 d8                	mov    %ebx,%eax
 8065d0c:	5b                   	pop    %ebx
 8065d0d:	5e                   	pop    %esi
 8065d0e:	5f                   	pop    %edi
 8065d0f:	5d                   	pop    %ebp
 8065d10:	c3                   	ret    
 8065d11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8065d18:	e8 c3 36 fe ff       	call   80493e0 <__errno_location@plt>
 8065d1d:	31 db                	xor    %ebx,%ebx
 8065d1f:	83 38 09             	cmpl   $0x9,(%eax)
 8065d22:	0f 95 c3             	setne  %bl
        errno = 0;
      return EOF;
    }

  return 0;
}
 8065d25:	83 c4 0c             	add    $0xc,%esp
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8065d28:	f7 db                	neg    %ebx
        errno = 0;
      return EOF;
    }

  return 0;
}
 8065d2a:	89 d8                	mov    %ebx,%eax
 8065d2c:	5b                   	pop    %ebx
 8065d2d:	5e                   	pop    %esi
 8065d2e:	5f                   	pop    %edi
 8065d2f:	5d                   	pop    %ebp
 8065d30:	c3                   	ret    
 8065d31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08065d38 <__afl_maybe_log>:
 8065d38:	9f                   	lahf   
 8065d39:	0f 90 c0             	seto   %al
 8065d3c:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 8065d42:	85 d2                	test   %edx,%edx
 8065d44:	74 22                	je     8065d68 <__afl_setup>

08065d46 <__afl_store>:
 8065d46:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 8065d4c:	31 cf                	xor    %ecx,%edi
 8065d4e:	d1 e9                	shr    %ecx
 8065d50:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 8065d56:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8065d5a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08065d5e <__afl_return>:
 8065d5e:	04 7f                	add    $0x7f,%al
 8065d60:	9e                   	sahf   
 8065d61:	c3                   	ret    
 8065d62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08065d68 <__afl_setup>:
 8065d68:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 8065d6f:	75 ed                	jne    8065d5e <__afl_return>
 8065d71:	50                   	push   %eax
 8065d72:	51                   	push   %ecx
 8065d73:	68 70 5e 06 08       	push   $0x8065e70
 8065d78:	e8 33 35 fe ff       	call   80492b0 <getenv@plt>
 8065d7d:	83 c4 04             	add    $0x4,%esp
 8065d80:	85 c0                	test   %eax,%eax
 8065d82:	0f 84 db 00 00 00    	je     8065e63 <__afl_setup_abort>
 8065d88:	50                   	push   %eax
 8065d89:	e8 f2 36 fe ff       	call   8049480 <atoi@plt>
 8065d8e:	83 c4 04             	add    $0x4,%esp
 8065d91:	6a 00                	push   $0x0
 8065d93:	6a 00                	push   $0x0
 8065d95:	50                   	push   %eax
 8065d96:	e8 45 34 fe ff       	call   80491e0 <shmat@plt>
 8065d9b:	83 c4 0c             	add    $0xc,%esp
 8065d9e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8065da1:	0f 84 bc 00 00 00    	je     8065e63 <__afl_setup_abort>
 8065da7:	c6 00 01             	movb   $0x1,(%eax)
 8065daa:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 8065daf:	89 c2                	mov    %eax,%edx
 8065db1:	59                   	pop    %ecx
 8065db2:	58                   	pop    %eax

08065db3 <__afl_forkserver>:
 8065db3:	50                   	push   %eax
 8065db4:	51                   	push   %ecx
 8065db5:	52                   	push   %edx
 8065db6:	6a 04                	push   $0x4
 8065db8:	68 e0 bd 43 08       	push   $0x843bde0
 8065dbd:	68 c7 00 00 00       	push   $0xc7
 8065dc2:	e8 c9 35 fe ff       	call   8049390 <write@plt>
 8065dc7:	83 c4 0c             	add    $0xc,%esp
 8065dca:	83 f8 04             	cmp    $0x4,%eax
 8065dcd:	75 6e                	jne    8065e3d <__afl_fork_resume>

08065dcf <__afl_fork_wait_loop>:
 8065dcf:	6a 04                	push   $0x4
 8065dd1:	68 e0 bd 43 08       	push   $0x843bde0
 8065dd6:	68 c6 00 00 00       	push   $0xc6
 8065ddb:	e8 40 33 fe ff       	call   8049120 <read@plt>
 8065de0:	83 c4 0c             	add    $0xc,%esp
 8065de3:	83 f8 04             	cmp    $0x4,%eax
 8065de6:	75 74                	jne    8065e5c <__afl_die>
 8065de8:	e8 33 36 fe ff       	call   8049420 <fork@plt>
 8065ded:	83 f8 00             	cmp    $0x0,%eax
 8065df0:	7c 6a                	jl     8065e5c <__afl_die>
 8065df2:	74 49                	je     8065e3d <__afl_fork_resume>
 8065df4:	a3 40 be 43 08       	mov    %eax,0x843be40
 8065df9:	6a 04                	push   $0x4
 8065dfb:	68 40 be 43 08       	push   $0x843be40
 8065e00:	68 c7 00 00 00       	push   $0xc7
 8065e05:	e8 86 35 fe ff       	call   8049390 <write@plt>
 8065e0a:	83 c4 0c             	add    $0xc,%esp
 8065e0d:	6a 00                	push   $0x0
 8065e0f:	68 e0 bd 43 08       	push   $0x843bde0
 8065e14:	ff 35 40 be 43 08    	pushl  0x843be40
 8065e1a:	e8 21 34 fe ff       	call   8049240 <waitpid@plt>
 8065e1f:	83 c4 0c             	add    $0xc,%esp
 8065e22:	83 f8 00             	cmp    $0x0,%eax
 8065e25:	7e 35                	jle    8065e5c <__afl_die>
 8065e27:	6a 04                	push   $0x4
 8065e29:	68 e0 bd 43 08       	push   $0x843bde0
 8065e2e:	68 c7 00 00 00       	push   $0xc7
 8065e33:	e8 58 35 fe ff       	call   8049390 <write@plt>
 8065e38:	83 c4 0c             	add    $0xc,%esp
 8065e3b:	eb 92                	jmp    8065dcf <__afl_fork_wait_loop>

08065e3d <__afl_fork_resume>:
 8065e3d:	68 c6 00 00 00       	push   $0xc6
 8065e42:	e8 b9 36 fe ff       	call   8049500 <close@plt>
 8065e47:	68 c7 00 00 00       	push   $0xc7
 8065e4c:	e8 af 36 fe ff       	call   8049500 <close@plt>
 8065e51:	83 c4 08             	add    $0x8,%esp
 8065e54:	5a                   	pop    %edx
 8065e55:	59                   	pop    %ecx
 8065e56:	58                   	pop    %eax
 8065e57:	e9 ea fe ff ff       	jmp    8065d46 <__afl_store>

08065e5c <__afl_die>:
 8065e5c:	31 c0                	xor    %eax,%eax
 8065e5e:	e8 ed 32 fe ff       	call   8049150 <_exit@plt>

08065e63 <__afl_setup_abort>:
 8065e63:	fe 05 60 be 43 08    	incb   0x843be60
 8065e69:	59                   	pop    %ecx
 8065e6a:	58                   	pop    %eax
 8065e6b:	e9 ee fe ff ff       	jmp    8065d5e <__afl_return>

08065e70 <.AFL_SHM_ENV>:
 8065e70:	5f                   	pop    %edi
 8065e71:	5f                   	pop    %edi
 8065e72:	41                   	inc    %ecx
 8065e73:	46                   	inc    %esi
 8065e74:	4c                   	dec    %esp
 8065e75:	5f                   	pop    %edi
 8065e76:	53                   	push   %ebx
 8065e77:	48                   	dec    %eax
 8065e78:	4d                   	dec    %ebp
 8065e79:	5f                   	pop    %edi
 8065e7a:	49                   	dec    %ecx
 8065e7b:	44                   	inc    %esp
 8065e7c:	00 66 90             	add    %ah,-0x70(%esi)
 8065e7f:	90                   	nop

08065e80 <locale_charset>:
#ifdef STATIC
STATIC
#endif
const char *
locale_charset (void)
{
 8065e80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065e84:	89 3c 24             	mov    %edi,(%esp)
 8065e87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065e8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065e8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065e93:	b9 37 94 00 00       	mov    $0x9437,%ecx
 8065e98:	e8 6b 0e 00 00       	call   8066d08 <__afl_maybe_log>
 8065e9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065ea1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065ea5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065ea9:	8b 3c 24             	mov    (%esp),%edi
 8065eac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065eb0:	55                   	push   %ebp
 8065eb1:	57                   	push   %edi
 8065eb2:	56                   	push   %esi
 8065eb3:	53                   	push   %ebx

#endif

  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";
 8065eb4:	be bd 80 06 08       	mov    $0x80680bd,%esi
#ifdef STATIC
STATIC
#endif
const char *
locale_charset (void)
{
 8065eb9:	81 ec 98 00 00 00    	sub    $0x98,%esp
#if !(defined WINDOWS_NATIVE || defined OS2)

# if HAVE_LANGINFO_CODESET

  /* Most systems support nl_langinfo (CODESET) nowadays.  */
  codeset = nl_langinfo (CODESET);
 8065ebf:	6a 0e                	push   $0xe
 8065ec1:	e8 7a 35 fe ff       	call   8049440 <nl_langinfo@plt>
static const char *
get_charset_aliases (void)
{
  const char *cp;

  cp = charset_aliases;
 8065ec6:	8b 1d b4 bd 43 08    	mov    0x843bdb4,%ebx
        }
    }

#endif

  if (codeset == NULL)
 8065ecc:	83 c4 10             	add    $0x10,%esp
    /* The canonical name cannot be determined.  */
    codeset = "";
 8065ecf:	85 c0                	test   %eax,%eax
 8065ed1:	0f 45 f0             	cmovne %eax,%esi
get_charset_aliases (void)
{
  const char *cp;

  cp = charset_aliases;
  if (cp == NULL)
 8065ed4:	85 db                	test   %ebx,%ebx
 8065ed6:	0f 84 7e 02 00 00    	je     806615a <locale_charset+0x2da>
 8065edc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065ee0:	89 3c 24             	mov    %edi,(%esp)
 8065ee3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065ee7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065eeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065eef:	b9 55 ab 00 00       	mov    $0xab55,%ecx
 8065ef4:	e8 0f 0e 00 00       	call   8066d08 <__afl_maybe_log>
 8065ef9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065efd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065f01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065f05:	8b 3c 24             	mov    (%esp),%edi
 8065f08:	8d 64 24 10          	lea    0x10(%esp),%esp
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
       *aliases != '\0';
 8065f0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065f10:	89 3c 24             	mov    %edi,(%esp)
 8065f13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065f17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065f1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065f1f:	b9 91 db 00 00       	mov    $0xdb91,%ecx
 8065f24:	e8 df 0d 00 00       	call   8066d08 <__afl_maybe_log>
 8065f29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065f2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065f31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065f35:	8b 3c 24             	mov    (%esp),%edi
 8065f38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065f3c:	0f b6 2b             	movzbl (%ebx),%ebp
  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
 8065f3f:	89 ea                	mov    %ebp,%edx
 8065f41:	84 d2                	test   %dl,%dl
 8065f43:	0f 85 9b 00 00 00    	jne    8065fe4 <locale_charset+0x164>
 8065f49:	8d 76 00             	lea    0x0(%esi),%esi
 8065f4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065f50:	89 3c 24             	mov    %edi,(%esp)
 8065f53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065f57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065f5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065f5f:	b9 19 03 00 00       	mov    $0x319,%ecx
 8065f64:	e8 9f 0d 00 00       	call   8066d08 <__afl_maybe_log>
 8065f69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065f6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065f71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065f75:	8b 3c 24             	mov    (%esp),%edi
 8065f78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065f7c:	e9 93 01 00 00       	jmp    8066114 <locale_charset+0x294>
 8065f81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *aliases != '\0';
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
 8065f88:	83 ec 0c             	sub    $0xc,%esp
 8065f8b:	53                   	push   %ebx
 8065f8c:	e8 cf 33 fe ff       	call   8049360 <strlen@plt>
 8065f91:	8d 5c 03 01          	lea    0x1(%ebx,%eax,1),%ebx
 8065f95:	89 1c 24             	mov    %ebx,(%esp)
 8065f98:	e8 c3 33 fe ff       	call   8049360 <strlen@plt>
 8065f9d:	8d 5c 03 01          	lea    0x1(%ebx,%eax,1),%ebx
 8065fa1:	83 c4 10             	add    $0x10,%esp
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
       *aliases != '\0';
 8065fa4:	0f b6 2b             	movzbl (%ebx),%ebp
  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
 8065fa7:	89 e9                	mov    %ebp,%ecx
 8065fa9:	84 c9                	test   %cl,%cl
 8065fab:	0f 84 63 01 00 00    	je     8066114 <locale_charset+0x294>
 8065fb1:	8d 76 00             	lea    0x0(%esi),%esi
 8065fb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065fb8:	89 3c 24             	mov    %edi,(%esp)
 8065fbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065fbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065fc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065fc7:	b9 e0 38 00 00       	mov    $0x38e0,%ecx
 8065fcc:	e8 37 0d 00 00       	call   8066d08 <__afl_maybe_log>
 8065fd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065fd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065fd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065fdd:	8b 3c 24             	mov    (%esp),%edi
 8065fe0:	8d 64 24 10          	lea    0x10(%esp),%esp
       *aliases != '\0';
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
    if (strcmp (codeset, aliases) == 0
 8065fe4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065fe8:	89 3c 24             	mov    %edi,(%esp)
 8065feb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065fef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065ff3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065ff7:	b9 8e 50 00 00       	mov    $0x508e,%ecx
 8065ffc:	e8 07 0d 00 00       	call   8066d08 <__afl_maybe_log>
 8066001:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066005:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066009:	8b 54 24 04          	mov    0x4(%esp),%edx
 806600d:	8b 3c 24             	mov    (%esp),%edi
 8066010:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066014:	83 ec 08             	sub    $0x8,%esp
 8066017:	53                   	push   %ebx
 8066018:	56                   	push   %esi
 8066019:	e8 d2 30 fe ff       	call   80490f0 <strcmp@plt>
 806601e:	83 c4 10             	add    $0x10,%esp
 8066021:	85 c0                	test   %eax,%eax
 8066023:	0f 84 ab 00 00 00    	je     80660d4 <locale_charset+0x254>
 8066029:	8d 76 00             	lea    0x0(%esi),%esi
 806602c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066030:	89 3c 24             	mov    %edi,(%esp)
 8066033:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066037:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806603b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806603f:	b9 7d 67 00 00       	mov    $0x677d,%ecx
 8066044:	e8 bf 0c 00 00       	call   8066d08 <__afl_maybe_log>
 8066049:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806604d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066051:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066055:	8b 3c 24             	mov    (%esp),%edi
 8066058:	8d 64 24 10          	lea    0x10(%esp),%esp
        || (aliases[0] == '*' && aliases[1] == '\0'))
 806605c:	89 e8                	mov    %ebp,%eax
 806605e:	3c 2a                	cmp    $0x2a,%al
 8066060:	0f 85 22 ff ff ff    	jne    8065f88 <locale_charset+0x108>
 8066066:	66 90                	xchg   %ax,%ax
 8066068:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806606c:	89 3c 24             	mov    %edi,(%esp)
 806606f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066073:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066077:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806607b:	b9 7e 1f 00 00       	mov    $0x1f7e,%ecx
 8066080:	e8 83 0c 00 00       	call   8066d08 <__afl_maybe_log>
 8066085:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066089:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806608d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066091:	8b 3c 24             	mov    (%esp),%edi
 8066094:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066098:	80 7b 01 00          	cmpb   $0x0,0x1(%ebx)
 806609c:	0f 85 e6 fe ff ff    	jne    8065f88 <locale_charset+0x108>
 80660a2:	66 90                	xchg   %ax,%ax
 80660a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80660a8:	89 3c 24             	mov    %edi,(%esp)
 80660ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80660af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80660b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80660b7:	b9 36 d7 00 00       	mov    $0xd736,%ecx
 80660bc:	e8 47 0c 00 00       	call   8066d08 <__afl_maybe_log>
 80660c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80660c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80660c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80660cd:	8b 3c 24             	mov    (%esp),%edi
 80660d0:	8d 64 24 10          	lea    0x10(%esp),%esp
      {
        codeset = aliases + strlen (aliases) + 1;
 80660d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80660d8:	89 3c 24             	mov    %edi,(%esp)
 80660db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80660df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80660e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80660e7:	b9 04 c8 00 00       	mov    $0xc804,%ecx
 80660ec:	e8 17 0c 00 00       	call   8066d08 <__afl_maybe_log>
 80660f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80660f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80660f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80660fd:	8b 3c 24             	mov    (%esp),%edi
 8066100:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066104:	83 ec 0c             	sub    $0xc,%esp
 8066107:	53                   	push   %ebx
 8066108:	e8 53 32 fe ff       	call   8049360 <strlen@plt>
 806610d:	8d 74 03 01          	lea    0x1(%ebx,%eax,1),%esi
 8066111:	83 c4 10             	add    $0x10,%esp

  /* Don't return an empty string.  GNU libc and GNU libiconv interpret
     the empty string as denoting "the locale's character encoding",
     thus GNU libiconv would call this function a second time.  */
  if (codeset[0] == '\0')
    codeset = "ASCII";
 8066114:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066118:	89 3c 24             	mov    %edi,(%esp)
 806611b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806611f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066123:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066127:	b9 91 fa 00 00       	mov    $0xfa91,%ecx
 806612c:	e8 d7 0b 00 00       	call   8066d08 <__afl_maybe_log>
 8066131:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066135:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066139:	8b 54 24 04          	mov    0x4(%esp),%edx
 806613d:	8b 3c 24             	mov    (%esp),%edi
 8066140:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066144:	80 3e 00             	cmpb   $0x0,(%esi)
 8066147:	b8 cf 83 06 08       	mov    $0x80683cf,%eax
 806614c:	0f 45 c6             	cmovne %esi,%eax
  if (strcmp (codeset, "UTF-8") == 0 && MB_CUR_MAX_L (uselocale (NULL)) <= 1)
    codeset = "ASCII";
#endif

  return codeset;
}
 806614f:	81 c4 8c 00 00 00    	add    $0x8c,%esp
 8066155:	5b                   	pop    %ebx
 8066156:	5e                   	pop    %esi
 8066157:	5f                   	pop    %edi
 8066158:	5d                   	pop    %ebp
 8066159:	c3                   	ret    
 806615a:	66 90                	xchg   %ax,%ax
      const char *base = "charset.alias";
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
 806615c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066160:	89 3c 24             	mov    %edi,(%esp)
 8066163:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066167:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806616b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806616f:	b9 99 a9 00 00       	mov    $0xa999,%ecx
 8066174:	e8 8f 0b 00 00       	call   8066d08 <__afl_maybe_log>
 8066179:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806617d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066181:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066185:	8b 3c 24             	mov    (%esp),%edi
 8066188:	8d 64 24 10          	lea    0x10(%esp),%esp
 806618c:	83 ec 0c             	sub    $0xc,%esp
 806618f:	68 d5 83 06 08       	push   $0x80683d5
 8066194:	e8 17 31 fe ff       	call   80492b0 <getenv@plt>
      if (dir == NULL || dir[0] == '\0')
 8066199:	83 c4 10             	add    $0x10,%esp
 806619c:	85 c0                	test   %eax,%eax
      const char *base = "charset.alias";
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
 806619e:	89 c5                	mov    %eax,%ebp
      if (dir == NULL || dir[0] == '\0')
 80661a0:	0f 84 c5 06 00 00    	je     806686b <locale_charset+0x9eb>
 80661a6:	66 90                	xchg   %ax,%ax
 80661a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80661ac:	89 3c 24             	mov    %edi,(%esp)
 80661af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80661b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80661b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80661bb:	b9 bc 53 00 00       	mov    $0x53bc,%ecx
 80661c0:	e8 43 0b 00 00       	call   8066d08 <__afl_maybe_log>
 80661c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80661c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80661cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80661d1:	8b 3c 24             	mov    (%esp),%edi
 80661d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80661d8:	80 38 00             	cmpb   $0x0,(%eax)
 80661db:	0f 84 8a 06 00 00    	je     806686b <locale_charset+0x9eb>
 80661e1:	8d 76 00             	lea    0x0(%esi),%esi
 80661e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80661e8:	89 3c 24             	mov    %edi,(%esp)
 80661eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80661ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80661f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80661f7:	b9 e0 6b 00 00       	mov    $0x6be0,%ecx
 80661fc:	e8 07 0b 00 00       	call   8066d08 <__afl_maybe_log>
 8066201:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066205:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066209:	8b 54 24 04          	mov    0x4(%esp),%edx
 806620d:	8b 3c 24             	mov    (%esp),%edi
 8066210:	8d 64 24 10          	lea    0x10(%esp),%esp
        dir = relocate (LIBDIR);

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
 8066214:	83 ec 0c             	sub    $0xc,%esp
 8066217:	50                   	push   %eax
 8066218:	e8 43 31 fe ff       	call   8049360 <strlen@plt>
 806621d:	83 c4 10             	add    $0x10,%esp
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
 8066220:	85 c0                	test   %eax,%eax
      if (dir == NULL || dir[0] == '\0')
        dir = relocate (LIBDIR);

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
 8066222:	89 c7                	mov    %eax,%edi
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
 8066224:	0f 85 a0 0a 00 00    	jne    8066cca <locale_charset+0xe4a>
 806622a:	66 90                	xchg   %ax,%ax
 806622c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066230:	89 3c 24             	mov    %edi,(%esp)
 8066233:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066237:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806623b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806623f:	b9 e7 cb 00 00       	mov    $0xcbe7,%ecx
 8066244:	e8 bf 0a 00 00       	call   8066d08 <__afl_maybe_log>
 8066249:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806624d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066251:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066255:	8b 3c 24             	mov    (%esp),%edi
 8066258:	8d 64 24 10          	lea    0x10(%esp),%esp
 806625c:	b8 0e 00 00 00       	mov    $0xe,%eax
 8066261:	8d 76 00             	lea    0x0(%esi),%esi
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
 8066264:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066268:	89 3c 24             	mov    %edi,(%esp)
 806626b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806626f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066273:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066277:	b9 97 00 00 00       	mov    $0x97,%ecx
 806627c:	e8 87 0a 00 00       	call   8066d08 <__afl_maybe_log>
 8066281:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066285:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066289:	8b 54 24 04          	mov    0x4(%esp),%edx
 806628d:	8b 3c 24             	mov    (%esp),%edi
 8066290:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066294:	83 ec 0c             	sub    $0xc,%esp
 8066297:	50                   	push   %eax
 8066298:	e8 33 30 fe ff       	call   80492d0 <malloc@plt>
 806629d:	89 44 24 14          	mov    %eax,0x14(%esp)
        if (file_name != NULL)
 80662a1:	83 c4 10             	add    $0x10,%esp
 80662a4:	85 c0                	test   %eax,%eax
 80662a6:	0f 84 91 09 00 00    	je     8066c3d <locale_charset+0xdbd>
 80662ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80662b0:	89 3c 24             	mov    %edi,(%esp)
 80662b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80662b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80662bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80662bf:	b9 62 ee 00 00       	mov    $0xee62,%ecx
 80662c4:	e8 3f 0a 00 00       	call   8066d08 <__afl_maybe_log>
 80662c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80662cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80662d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80662d5:	8b 3c 24             	mov    (%esp),%edi
 80662d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80662dc:	83 ec 04             	sub    $0x4,%esp
 80662df:	57                   	push   %edi
 80662e0:	55                   	push   %ebp
 80662e1:	ff 74 24 10          	pushl  0x10(%esp)
 80662e5:	e8 86 2e fe ff       	call   8049170 <memcpy@plt>
 80662ea:	83 c4 10             	add    $0x10,%esp
 80662ed:	8d 76 00             	lea    0x0(%esi),%esi
          {
            memcpy (file_name, dir, dir_len);
            if (add_slash)
              file_name[dir_len] = DIRECTORY_SEPARATOR;
            memcpy (file_name + dir_len + add_slash, base, base_len + 1);
 80662f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80662f4:	89 3c 24             	mov    %edi,(%esp)
 80662f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80662fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80662ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066303:	b9 08 70 00 00       	mov    $0x7008,%ecx
 8066308:	e8 fb 09 00 00       	call   8066d08 <__afl_maybe_log>
 806630d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066311:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066315:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066319:	8b 3c 24             	mov    (%esp),%edi
 806631c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066320:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 8066324:	bd 73 00 00 00       	mov    $0x73,%ebp
      if (__OPEN_NEEDS_MODE (__oflag) && __va_arg_pack_len () < 1)
	{
	  __open_missing_mode ();
	  return __open_2 (__path, __oflag);
	}
      return __open_alias (__path, __oflag, __va_arg_pack ());
 8066329:	83 ec 08             	sub    $0x8,%esp
 806632c:	89 c8                	mov    %ecx,%eax
 806632e:	01 f8                	add    %edi,%eax
 8066330:	66 89 68 0c          	mov    %bp,0xc(%eax)
 8066334:	c7 00 63 68 61 72    	movl   $0x72616863,(%eax)
 806633a:	c7 40 04 73 65 74 2e 	movl   $0x2e746573,0x4(%eax)
 8066341:	c7 40 08 61 6c 69 61 	movl   $0x61696c61,0x8(%eax)
 8066348:	68 00 00 02 00       	push   $0x20000
 806634d:	51                   	push   %ecx
 806634e:	e8 ad 2d fe ff       	call   8049100 <open64@plt>
             a symbolic link to that file under the name "charset.alias" in
             some writable directory and defining the environment variable
             CHARSETALIASDIR to point to that directory.  */
          fd = open (file_name,
                     O_RDONLY | (HAVE_WORKING_O_NOFOLLOW ? O_NOFOLLOW : 0));
          if (fd < 0)
 8066353:	83 c4 10             	add    $0x10,%esp
 8066356:	85 c0                	test   %eax,%eax
 8066358:	89 c5                	mov    %eax,%ebp
 806635a:	0f 88 4c 08 00 00    	js     8066bac <locale_charset+0xd2c>
 8066360:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066364:	89 3c 24             	mov    %edi,(%esp)
 8066367:	89 54 24 04          	mov    %edx,0x4(%esp)
 806636b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806636f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066373:	b9 38 cb 00 00       	mov    $0xcb38,%ecx
 8066378:	e8 8b 09 00 00       	call   8066d08 <__afl_maybe_log>
 806637d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066381:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066385:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066389:	8b 3c 24             	mov    (%esp),%edi
 806638c:	8d 64 24 10          	lea    0x10(%esp),%esp
            cp = "";
          else
            {
              FILE *fp;

              fp = fdopen (fd, "r");
 8066390:	83 ec 08             	sub    $0x8,%esp
 8066393:	68 b3 71 06 08       	push   $0x80671b3
 8066398:	50                   	push   %eax
 8066399:	e8 72 2f fe ff       	call   8049310 <fdopen@plt>
              if (fp == NULL)
 806639e:	83 c4 10             	add    $0x10,%esp
 80663a1:	85 c0                	test   %eax,%eax
            cp = "";
          else
            {
              FILE *fp;

              fp = fdopen (fd, "r");
 80663a3:	89 c7                	mov    %eax,%edi
              if (fp == NULL)
 80663a5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 80663ac:	0f 84 bb 07 00 00    	je     8066b6d <locale_charset+0xced>
 80663b2:	66 90                	xchg   %ax,%ax
 80663b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80663b8:	89 3c 24             	mov    %edi,(%esp)
 80663bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80663bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80663c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80663c7:	b9 8c d5 00 00       	mov    $0xd58c,%ecx
 80663cc:	e8 37 09 00 00       	call   8066d08 <__afl_maybe_log>
 80663d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80663d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80663d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80663dd:	8b 3c 24             	mov    (%esp),%edi
 80663e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80663e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
# ifdef __USE_POSIX
/* This is defined in POSIX.1:1996.  */
__STDIO_INLINE int
getc_unlocked (FILE *__fp)
{
  return _IO_getc_unlocked (__fp);
 80663e8:	8b 4f 04             	mov    0x4(%edi),%ecx
 80663eb:	3b 4f 08             	cmp    0x8(%edi),%ecx
 80663ee:	0f 83 08 03 00 00    	jae    80666fc <locale_charset+0x87c>
 80663f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80663f8:	89 3c 24             	mov    %edi,(%esp)
 80663fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80663ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066403:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066407:	b9 1b 26 00 00       	mov    $0x261b,%ecx
 806640c:	e8 f7 08 00 00       	call   8066d08 <__afl_maybe_log>
 8066411:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066415:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066419:	8b 54 24 04          	mov    0x4(%esp),%edx
 806641d:	8b 3c 24             	mov    (%esp),%edi
 8066420:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066424:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066428:	89 3c 24             	mov    %edi,(%esp)
 806642b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806642f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066433:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066437:	b9 ed 30 00 00       	mov    $0x30ed,%ecx
 806643c:	e8 c7 08 00 00       	call   8066d08 <__afl_maybe_log>
 8066441:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066445:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066449:	8b 54 24 04          	mov    0x4(%esp),%edx
 806644d:	8b 3c 24             	mov    (%esp),%edi
 8066450:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066454:	8d 51 01             	lea    0x1(%ecx),%edx
 8066457:	89 57 04             	mov    %edx,0x4(%edi)
 806645a:	0f b6 01             	movzbl (%ecx),%eax
 806645d:	8d 76 00             	lea    0x0(%esi),%esi
                      char *old_res_ptr;

                      c = getc (fp);
                      if (c == EOF)
                        break;
                      if (c == '\n' || c == ' ' || c == '\t')
 8066460:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066464:	89 3c 24             	mov    %edi,(%esp)
 8066467:	89 54 24 04          	mov    %edx,0x4(%esp)
 806646b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806646f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066473:	b9 7c 77 00 00       	mov    $0x777c,%ecx
 8066478:	e8 8b 08 00 00       	call   8066d08 <__afl_maybe_log>
 806647d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066481:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066485:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066489:	8b 3c 24             	mov    (%esp),%edi
 806648c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066490:	8d 68 f7             	lea    -0x9(%eax),%ebp
 8066493:	83 fd 01             	cmp    $0x1,%ebp
 8066496:	0f 86 4c ff ff ff    	jbe    80663e8 <locale_charset+0x568>
 806649c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80664a0:	89 3c 24             	mov    %edi,(%esp)
 80664a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80664a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80664ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80664af:	b9 12 38 00 00       	mov    $0x3812,%ecx
 80664b4:	e8 4f 08 00 00       	call   8066d08 <__afl_maybe_log>
 80664b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80664bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80664c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80664c5:	8b 3c 24             	mov    (%esp),%edi
 80664c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80664cc:	83 f8 20             	cmp    $0x20,%eax
 80664cf:	0f 84 13 ff ff ff    	je     80663e8 <locale_charset+0x568>
 80664d5:	8d 76 00             	lea    0x0(%esi),%esi
 80664d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80664dc:	89 3c 24             	mov    %edi,(%esp)
 80664df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80664e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80664e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80664eb:	b9 bd 7a 00 00       	mov    $0x7abd,%ecx
 80664f0:	e8 13 08 00 00       	call   8066d08 <__afl_maybe_log>
 80664f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80664f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80664fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066501:	8b 3c 24             	mov    (%esp),%edi
 8066504:	8d 64 24 10          	lea    0x10(%esp),%esp
                        continue;
                      if (c == '#')
 8066508:	83 f8 23             	cmp    $0x23,%eax
 806650b:	0f 84 33 05 00 00    	je     8066a44 <locale_charset+0xbc4>
 8066511:	8d 76 00             	lea    0x0(%esi),%esi
 8066514:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066518:	89 3c 24             	mov    %edi,(%esp)
 806651b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806651f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066523:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066527:	b9 29 8d 00 00       	mov    $0x8d29,%ecx
 806652c:	e8 d7 07 00 00       	call   8066d08 <__afl_maybe_log>
 8066531:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066535:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066539:	8b 54 24 04          	mov    0x4(%esp),%edx
 806653d:	8b 3c 24             	mov    (%esp),%edi
 8066540:	8d 64 24 10          	lea    0x10(%esp),%esp
                          while (!(c == EOF || c == '\n'));
                          if (c == EOF)
                            break;
                          continue;
                        }
                      ungetc (c, fp);
 8066544:	83 ec 08             	sub    $0x8,%esp
 8066547:	57                   	push   %edi
 8066548:	50                   	push   %eax
 8066549:	e8 82 2e fe ff       	call   80493d0 <ungetc@plt>
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
 806654e:	8d 44 24 5d          	lea    0x5d(%esp),%eax
 8066552:	50                   	push   %eax
 8066553:	8d 4c 24 2e          	lea    0x2e(%esp),%ecx
 8066557:	51                   	push   %ecx
 8066558:	68 e5 83 06 08       	push   $0x80683e5
 806655d:	57                   	push   %edi
 806655e:	e8 ed 2d fe ff       	call   8049350 <fscanf@plt>
 8066563:	83 c4 20             	add    $0x20,%esp
 8066566:	83 f8 01             	cmp    $0x1,%eax
 8066569:	0f 8e 05 02 00 00    	jle    8066774 <locale_charset+0x8f4>
 806656f:	90                   	nop
 8066570:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066574:	89 3c 24             	mov    %edi,(%esp)
 8066577:	89 54 24 04          	mov    %edx,0x4(%esp)
 806657b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806657f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066583:	b9 41 58 00 00       	mov    $0x5841,%ecx
 8066588:	e8 7b 07 00 00       	call   8066d08 <__afl_maybe_log>
 806658d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066591:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066595:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066599:	8b 3c 24             	mov    (%esp),%edi
 806659c:	8d 64 24 10          	lea    0x10(%esp),%esp
                        break;
                      l1 = strlen (buf1);
 80665a0:	83 ec 0c             	sub    $0xc,%esp
 80665a3:	8d 54 24 26          	lea    0x26(%esp),%edx
 80665a7:	52                   	push   %edx
 80665a8:	e8 b3 2d fe ff       	call   8049360 <strlen@plt>
 80665ad:	59                   	pop    %ecx
                      l2 = strlen (buf2);
 80665ae:	8d 6c 24 59          	lea    0x59(%esp),%ebp
                          continue;
                        }
                      ungetc (c, fp);
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
                        break;
                      l1 = strlen (buf1);
 80665b2:	89 44 24 14          	mov    %eax,0x14(%esp)
                      l2 = strlen (buf2);
 80665b6:	55                   	push   %ebp
 80665b7:	e8 a4 2d fe ff       	call   8049360 <strlen@plt>
 80665bc:	83 c4 10             	add    $0x10,%esp
 80665bf:	89 c1                	mov    %eax,%ecx
                      old_res_ptr = res_ptr;
                      if (res_size == 0)
 80665c1:	8b 14 24             	mov    (%esp),%edx
                        {
                          res_size = l1 + 1 + l2 + 1;
 80665c4:	8b 44 24 08          	mov    0x8(%esp),%eax
 80665c8:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 80665cc:	01 c8                	add    %ecx,%eax
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
                        break;
                      l1 = strlen (buf1);
                      l2 = strlen (buf2);
                      old_res_ptr = res_ptr;
                      if (res_size == 0)
 80665ce:	85 d2                	test   %edx,%edx
 80665d0:	0f 85 10 06 00 00    	jne    8066be6 <locale_charset+0xd66>
 80665d6:	66 90                	xchg   %ax,%ax
 80665d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80665dc:	89 3c 24             	mov    %edi,(%esp)
 80665df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80665e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80665e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80665eb:	b9 82 e1 00 00       	mov    $0xe182,%ecx
 80665f0:	e8 13 07 00 00       	call   8066d08 <__afl_maybe_log>
 80665f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80665f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80665fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066601:	8b 3c 24             	mov    (%esp),%edi
 8066604:	8d 64 24 10          	lea    0x10(%esp),%esp
                        {
                          res_size = l1 + 1 + l2 + 1;
 8066608:	8d 50 02             	lea    0x2(%eax),%edx
                          res_ptr = (char *) malloc (res_size + 1);
 806660b:	83 ec 0c             	sub    $0xc,%esp
 806660e:	83 c0 03             	add    $0x3,%eax
                      l1 = strlen (buf1);
                      l2 = strlen (buf2);
                      old_res_ptr = res_ptr;
                      if (res_size == 0)
                        {
                          res_size = l1 + 1 + l2 + 1;
 8066611:	89 54 24 0c          	mov    %edx,0xc(%esp)
                          res_ptr = (char *) malloc (res_size + 1);
 8066615:	50                   	push   %eax
 8066616:	e8 b5 2c fe ff       	call   80492d0 <malloc@plt>
 806661b:	83 c4 10             	add    $0x10,%esp
 806661e:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8066622:	89 c5                	mov    %eax,%ebp
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
                        }
                      if (res_ptr == NULL)
 8066624:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066628:	89 3c 24             	mov    %edi,(%esp)
 806662b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806662f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066633:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066637:	b9 92 8f 00 00       	mov    $0x8f92,%ecx
 806663c:	e8 c7 06 00 00       	call   8066d08 <__afl_maybe_log>
 8066641:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066645:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066649:	8b 54 24 04          	mov    0x4(%esp),%edx
 806664d:	8b 3c 24             	mov    (%esp),%edi
 8066650:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066654:	85 ed                	test   %ebp,%ebp
 8066656:	0f 84 1e 06 00 00    	je     8066c7a <locale_charset+0xdfa>
 806665c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066660:	89 3c 24             	mov    %edi,(%esp)
 8066663:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066667:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806666b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806666f:	b9 77 6a 00 00       	mov    $0x6a77,%ecx
 8066674:	e8 8f 06 00 00       	call   8066d08 <__afl_maybe_log>
 8066679:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806667d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066681:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066685:	8b 3c 24             	mov    (%esp),%edi
 8066688:	8d 64 24 10          	lea    0x10(%esp),%esp
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
 806668c:	8b 1c 24             	mov    (%esp),%ebx
#endif

__fortify_function char *
__NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
{
  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));
 806668f:	83 ec 08             	sub    $0x8,%esp
 8066692:	8d 44 24 22          	lea    0x22(%esp),%eax
 8066696:	29 cb                	sub    %ecx,%ebx
 8066698:	50                   	push   %eax
 8066699:	89 d9                	mov    %ebx,%ecx
 806669b:	2b 4c 24 14          	sub    0x14(%esp),%ecx
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
 806669f:	8d 5c 1d ff          	lea    -0x1(%ebp,%ebx,1),%ebx
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
 80666a3:	8d 54 0d fe          	lea    -0x2(%ebp,%ecx,1),%edx
 80666a7:	52                   	push   %edx
 80666a8:	e8 a3 2b fe ff       	call   8049250 <strcpy@plt>
 80666ad:	58                   	pop    %eax
 80666ae:	5a                   	pop    %edx
 80666af:	8d 44 24 55          	lea    0x55(%esp),%eax
 80666b3:	50                   	push   %eax
 80666b4:	53                   	push   %ebx
 80666b5:	89 eb                	mov    %ebp,%ebx
 80666b7:	e8 94 2b fe ff       	call   8049250 <strcpy@plt>
 80666bc:	83 c4 10             	add    $0x10,%esp
 80666bf:	8b 4f 04             	mov    0x4(%edi),%ecx
 80666c2:	3b 4f 08             	cmp    0x8(%edi),%ecx
 80666c5:	0f 82 59 fd ff ff    	jb     8066424 <locale_charset+0x5a4>
 80666cb:	90                   	nop
 80666cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80666d0:	89 3c 24             	mov    %edi,(%esp)
 80666d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80666d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80666db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80666df:	b9 79 4e 00 00       	mov    $0x4e79,%ecx
 80666e4:	e8 1f 06 00 00       	call   8066d08 <__afl_maybe_log>
 80666e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80666ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80666f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80666f5:	8b 3c 24             	mov    (%esp),%edi
 80666f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80666fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066700:	89 3c 24             	mov    %edi,(%esp)
 8066703:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066707:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806670b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806670f:	b9 01 c1 00 00       	mov    $0xc101,%ecx
 8066714:	e8 ef 05 00 00       	call   8066d08 <__afl_maybe_log>
 8066719:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806671d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066721:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066725:	8b 3c 24             	mov    (%esp),%edi
 8066728:	8d 64 24 10          	lea    0x10(%esp),%esp
 806672c:	83 ec 0c             	sub    $0xc,%esp
 806672f:	57                   	push   %edi
 8066730:	e8 fb 2c fe ff       	call   8049430 <__uflow@plt>
                      char buf2[50+1];
                      size_t l1, l2;
                      char *old_res_ptr;

                      c = getc (fp);
                      if (c == EOF)
 8066735:	83 c4 10             	add    $0x10,%esp
 8066738:	83 f8 ff             	cmp    $0xffffffff,%eax
 806673b:	0f 85 1c fd ff ff    	jne    806645d <locale_charset+0x5dd>
 8066741:	8d 76 00             	lea    0x0(%esi),%esi
 8066744:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066748:	89 3c 24             	mov    %edi,(%esp)
 806674b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806674f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066753:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066757:	b9 f6 6e 00 00       	mov    $0x6ef6,%ecx
 806675c:	e8 a7 05 00 00       	call   8066d08 <__afl_maybe_log>
 8066761:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066765:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066769:	8b 54 24 04          	mov    0x4(%esp),%edx
 806676d:	8b 3c 24             	mov    (%esp),%edi
 8066770:	8d 64 24 10          	lea    0x10(%esp),%esp
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
                    }
                  fclose (fp);
 8066774:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066778:	89 3c 24             	mov    %edi,(%esp)
 806677b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806677f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066783:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066787:	b9 d1 e1 00 00       	mov    $0xe1d1,%ecx
 806678c:	e8 77 05 00 00       	call   8066d08 <__afl_maybe_log>
 8066791:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066795:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066799:	8b 54 24 04          	mov    0x4(%esp),%edx
 806679d:	8b 3c 24             	mov    (%esp),%edi
 80667a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80667a4:	83 ec 0c             	sub    $0xc,%esp
 80667a7:	57                   	push   %edi
 80667a8:	e8 b3 d7 ff ff       	call   8063f60 <rpl_fclose>
                  if (res_size == 0)
 80667ad:	83 c4 10             	add    $0x10,%esp
 80667b0:	8b 3c 24             	mov    (%esp),%edi
 80667b3:	85 ff                	test   %edi,%edi
 80667b5:	0f 84 f1 03 00 00    	je     8066bac <locale_charset+0xd2c>
 80667bb:	90                   	nop
 80667bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80667c0:	89 3c 24             	mov    %edi,(%esp)
 80667c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80667c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80667cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80667cf:	b9 f4 50 00 00       	mov    $0x50f4,%ecx
 80667d4:	e8 2f 05 00 00       	call   8066d08 <__afl_maybe_log>
 80667d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80667dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80667e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80667e5:	8b 3c 24             	mov    (%esp),%edi
 80667e8:	8d 64 24 10          	lea    0x10(%esp),%esp
                    cp = "";
                  else
                    {
                      *(res_ptr + res_size) = '\0';
 80667ec:	c6 04 3b 00          	movb   $0x0,(%ebx,%edi,1)
                      cp = res_ptr;
                    }
                }
            }

          free (file_name);
 80667f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80667f4:	89 3c 24             	mov    %edi,(%esp)
 80667f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80667fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80667ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066803:	b9 76 20 00 00       	mov    $0x2076,%ecx
 8066808:	e8 fb 04 00 00       	call   8066d08 <__afl_maybe_log>
 806680d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066811:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066815:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066819:	8b 3c 24             	mov    (%esp),%edi
 806681c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066820:	83 ec 0c             	sub    $0xc,%esp
 8066823:	ff 74 24 10          	pushl  0x10(%esp)
 8066827:	e8 34 29 fe ff       	call   8049160 <free@plt>
 806682c:	83 c4 10             	add    $0x10,%esp
 806682f:	90                   	nop
           "CP1386" "\0" "GBK" "\0"
           "CP3372" "\0" "EUC-JP" "\0";
# endif
#endif

      charset_aliases = cp;
 8066830:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066834:	89 3c 24             	mov    %edi,(%esp)
 8066837:	89 54 24 04          	mov    %edx,0x4(%esp)
 806683b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806683f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066843:	b9 e7 3d 00 00       	mov    $0x3de7,%ecx
 8066848:	e8 bb 04 00 00       	call   8066d08 <__afl_maybe_log>
 806684d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066851:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066855:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066859:	8b 3c 24             	mov    (%esp),%edi
 806685c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066860:	89 1d b4 bd 43 08    	mov    %ebx,0x843bdb4
 8066866:	e9 a1 f6 ff ff       	jmp    8065f0c <locale_charset+0x8c>
 806686b:	90                   	nop
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
      if (dir == NULL || dir[0] == '\0')
 806686c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066870:	89 3c 24             	mov    %edi,(%esp)
 8066873:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806687b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806687f:	b9 ec d7 00 00       	mov    $0xd7ec,%ecx
 8066884:	e8 7f 04 00 00       	call   8066d08 <__afl_maybe_log>
 8066889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806688d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066891:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066895:	8b 3c 24             	mov    (%esp),%edi
 8066898:	8d 64 24 10          	lea    0x10(%esp),%esp
 806689c:	ba 0d 00 00 00       	mov    $0xd,%edx
        dir = relocate (LIBDIR);

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
 80668a1:	bf 0e 00 00 00       	mov    $0xe,%edi
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
      if (dir == NULL || dir[0] == '\0')
 80668a6:	bd c0 83 06 08       	mov    $0x80683c0,%ebp
 80668ab:	90                   	nop

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
 80668ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80668b0:	89 3c 24             	mov    %edi,(%esp)
 80668b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80668b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80668bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80668bf:	b9 1c 04 00 00       	mov    $0x41c,%ecx
 80668c4:	e8 3f 04 00 00       	call   8066d08 <__afl_maybe_log>
 80668c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80668cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80668d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80668d5:	8b 3c 24             	mov    (%esp),%edi
 80668d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80668dc:	80 7c 15 00 2f       	cmpb   $0x2f,0x0(%ebp,%edx,1)
 80668e1:	0f 84 da 01 00 00    	je     8066ac1 <locale_charset+0xc41>
 80668e7:	90                   	nop
 80668e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80668ec:	89 3c 24             	mov    %edi,(%esp)
 80668ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80668f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80668f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80668fb:	b9 fb 47 00 00       	mov    $0x47fb,%ecx
 8066900:	e8 03 04 00 00       	call   8066d08 <__afl_maybe_log>
 8066905:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066909:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806690d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066911:	8b 3c 24             	mov    (%esp),%edi
 8066914:	8d 64 24 10          	lea    0x10(%esp),%esp
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
 8066918:	8d 4f 0f             	lea    0xf(%edi),%ecx
 806691b:	83 ec 0c             	sub    $0xc,%esp
 806691e:	51                   	push   %ecx
 806691f:	e8 ac 29 fe ff       	call   80492d0 <malloc@plt>
 8066924:	89 44 24 14          	mov    %eax,0x14(%esp)
        if (file_name != NULL)
 8066928:	83 c4 10             	add    $0x10,%esp
 806692b:	85 c0                	test   %eax,%eax
 806692d:	0f 84 0a 03 00 00    	je     8066c3d <locale_charset+0xdbd>
 8066933:	90                   	nop
 8066934:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066938:	89 3c 24             	mov    %edi,(%esp)
 806693b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806693f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066943:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066947:	b9 a7 be 00 00       	mov    $0xbea7,%ecx
 806694c:	e8 b7 03 00 00       	call   8066d08 <__afl_maybe_log>
 8066951:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066955:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066959:	8b 54 24 04          	mov    0x4(%esp),%edx
 806695d:	8b 3c 24             	mov    (%esp),%edi
 8066960:	8d 64 24 10          	lea    0x10(%esp),%esp
      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
 8066964:	8d 47 01             	lea    0x1(%edi),%eax

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 8066967:	83 ec 04             	sub    $0x4,%esp
 806696a:	89 44 24 04          	mov    %eax,0x4(%esp)
 806696e:	57                   	push   %edi
 806696f:	55                   	push   %ebp
 8066970:	8b 6c 24 10          	mov    0x10(%esp),%ebp
 8066974:	55                   	push   %ebp
 8066975:	e8 f6 27 fe ff       	call   8049170 <memcpy@plt>
        if (file_name != NULL)
          {
            memcpy (file_name, dir, dir_len);
            if (add_slash)
              file_name[dir_len] = DIRECTORY_SEPARATOR;
 806697a:	83 c4 10             	add    $0x10,%esp
 806697d:	c6 44 3d 00 2f       	movb   $0x2f,0x0(%ebp,%edi,1)
 8066982:	8b 3c 24             	mov    (%esp),%edi
 8066985:	e9 63 f9 ff ff       	jmp    80662ed <locale_charset+0x46d>
 806698a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8066990:	8d 4d 01             	lea    0x1(%ebp),%ecx
 8066993:	89 4f 04             	mov    %ecx,0x4(%edi)
 8066996:	0f b6 45 00          	movzbl 0x0(%ebp),%eax
 806699a:	66 90                	xchg   %ax,%ax
                      if (c == '#')
                        {
                          /* Skip comment, to end of line.  */
                          do
                            c = getc (fp);
                          while (!(c == EOF || c == '\n'));
 806699c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80669a0:	89 3c 24             	mov    %edi,(%esp)
 80669a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80669a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80669ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80669af:	b9 e8 16 00 00       	mov    $0x16e8,%ecx
 80669b4:	e8 4f 03 00 00       	call   8066d08 <__afl_maybe_log>
 80669b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80669bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80669c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80669c5:	8b 3c 24             	mov    (%esp),%edi
 80669c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80669cc:	83 f8 0a             	cmp    $0xa,%eax
 80669cf:	0f 84 27 01 00 00    	je     8066afc <locale_charset+0xc7c>
 80669d5:	8d 76 00             	lea    0x0(%esi),%esi
 80669d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80669dc:	89 3c 24             	mov    %edi,(%esp)
 80669df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80669e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80669e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80669eb:	b9 21 ee 00 00       	mov    $0xee21,%ecx
 80669f0:	e8 13 03 00 00       	call   8066d08 <__afl_maybe_log>
 80669f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80669f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80669fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066a01:	8b 3c 24             	mov    (%esp),%edi
 8066a04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066a08:	83 f8 ff             	cmp    $0xffffffff,%eax
 8066a0b:	0f 84 eb 00 00 00    	je     8066afc <locale_charset+0xc7c>
 8066a11:	8d 76 00             	lea    0x0(%esi),%esi
 8066a14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066a18:	89 3c 24             	mov    %edi,(%esp)
 8066a1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066a1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066a23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066a27:	b9 68 88 00 00       	mov    $0x8868,%ecx
 8066a2c:	e8 d7 02 00 00       	call   8066d08 <__afl_maybe_log>
 8066a31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066a35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066a39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066a3d:	8b 3c 24             	mov    (%esp),%edi
 8066a40:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066a44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066a48:	89 3c 24             	mov    %edi,(%esp)
 8066a4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066a4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066a53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066a57:	b9 ef 1f 00 00       	mov    $0x1fef,%ecx
 8066a5c:	e8 a7 02 00 00       	call   8066d08 <__afl_maybe_log>
 8066a61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066a65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066a69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066a6d:	8b 3c 24             	mov    (%esp),%edi
 8066a70:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066a74:	8b 6f 04             	mov    0x4(%edi),%ebp
 8066a77:	3b 6f 08             	cmp    0x8(%edi),%ebp
 8066a7a:	0f 82 10 ff ff ff    	jb     8066990 <locale_charset+0xb10>
 8066a80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066a84:	89 3c 24             	mov    %edi,(%esp)
 8066a87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066a8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066a8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066a93:	b9 7d 8a 00 00       	mov    $0x8a7d,%ecx
 8066a98:	e8 6b 02 00 00       	call   8066d08 <__afl_maybe_log>
 8066a9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066aa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066aa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066aa9:	8b 3c 24             	mov    (%esp),%edi
 8066aac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066ab0:	83 ec 0c             	sub    $0xc,%esp
 8066ab3:	57                   	push   %edi
 8066ab4:	e8 77 29 fe ff       	call   8049430 <__uflow@plt>
 8066ab9:	83 c4 10             	add    $0x10,%esp
 8066abc:	e9 d9 fe ff ff       	jmp    806699a <locale_charset+0xb1a>
 8066ac1:	8d 76 00             	lea    0x0(%esi),%esi
 8066ac4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066ac8:	89 3c 24             	mov    %edi,(%esp)
 8066acb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066acf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066ad3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066ad7:	b9 08 1c 00 00       	mov    $0x1c08,%ecx
 8066adc:	e8 27 02 00 00       	call   8066d08 <__afl_maybe_log>
 8066ae1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066ae5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066ae9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066aed:	8b 3c 24             	mov    (%esp),%edi
 8066af0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066af4:	8d 47 0e             	lea    0xe(%edi),%eax
 8066af7:	e9 65 f7 ff ff       	jmp    8066261 <locale_charset+0x3e1>
                          if (c == EOF)
 8066afc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066b00:	89 3c 24             	mov    %edi,(%esp)
 8066b03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066b07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066b0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066b0f:	b9 d3 8d 00 00       	mov    $0x8dd3,%ecx
 8066b14:	e8 ef 01 00 00       	call   8066d08 <__afl_maybe_log>
 8066b19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066b1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066b21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066b25:	8b 3c 24             	mov    (%esp),%edi
 8066b28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066b2c:	83 f8 ff             	cmp    $0xffffffff,%eax
 8066b2f:	0f 85 b3 f8 ff ff    	jne    80663e8 <locale_charset+0x568>
 8066b35:	8d 76 00             	lea    0x0(%esi),%esi
 8066b38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066b3c:	89 3c 24             	mov    %edi,(%esp)
 8066b3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066b43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066b47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066b4b:	b9 e6 82 00 00       	mov    $0x82e6,%ecx
 8066b50:	e8 b3 01 00 00       	call   8066d08 <__afl_maybe_log>
 8066b55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066b59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066b5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066b61:	8b 3c 24             	mov    (%esp),%edi
 8066b64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066b68:	e9 07 fc ff ff       	jmp    8066774 <locale_charset+0x8f4>
 8066b6d:	8d 76 00             	lea    0x0(%esi),%esi

              fp = fdopen (fd, "r");
              if (fp == NULL)
                {
                  /* Out of memory.  Treat the file as empty.  */
                  close (fd);
 8066b70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066b74:	89 3c 24             	mov    %edi,(%esp)
 8066b77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066b7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066b7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066b83:	b9 65 e8 00 00       	mov    $0xe865,%ecx
 8066b88:	e8 7b 01 00 00       	call   8066d08 <__afl_maybe_log>
 8066b8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066b91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066b95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066b99:	8b 3c 24             	mov    (%esp),%edi
 8066b9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066ba0:	83 ec 0c             	sub    $0xc,%esp
 8066ba3:	55                   	push   %ebp
 8066ba4:	e8 57 29 fe ff       	call   8049500 <close@plt>
 8066ba9:	83 c4 10             	add    $0x10,%esp
                  cp = "";
 8066bac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066bb0:	89 3c 24             	mov    %edi,(%esp)
 8066bb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066bb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066bbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066bbf:	b9 4f 05 00 00       	mov    $0x54f,%ecx
 8066bc4:	e8 3f 01 00 00       	call   8066d08 <__afl_maybe_log>
 8066bc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066bcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066bd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066bd5:	8b 3c 24             	mov    (%esp),%edi
 8066bd8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066bdc:	bb bd 80 06 08       	mov    $0x80680bd,%ebx
 8066be1:	e9 0a fc ff ff       	jmp    80667f0 <locale_charset+0x970>
 8066be6:	66 90                	xchg   %ax,%ax
                          res_size = l1 + 1 + l2 + 1;
                          res_ptr = (char *) malloc (res_size + 1);
                        }
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
 8066be8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066bec:	89 3c 24             	mov    %edi,(%esp)
 8066bef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066bf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066bf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066bfb:	b9 b7 a6 00 00       	mov    $0xa6b7,%ecx
 8066c00:	e8 03 01 00 00       	call   8066d08 <__afl_maybe_log>
 8066c05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066c09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066c0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066c11:	8b 3c 24             	mov    (%esp),%edi
 8066c14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066c18:	03 04 24             	add    (%esp),%eax
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
 8066c1b:	83 ec 08             	sub    $0x8,%esp
                          res_size = l1 + 1 + l2 + 1;
                          res_ptr = (char *) malloc (res_size + 1);
                        }
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
 8066c1e:	8d 68 02             	lea    0x2(%eax),%ebp
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
 8066c21:	83 c0 03             	add    $0x3,%eax
                          res_size = l1 + 1 + l2 + 1;
                          res_ptr = (char *) malloc (res_size + 1);
                        }
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
 8066c24:	89 6c 24 08          	mov    %ebp,0x8(%esp)
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
 8066c28:	50                   	push   %eax
 8066c29:	53                   	push   %ebx
 8066c2a:	e8 91 26 fe ff       	call   80492c0 <realloc@plt>
 8066c2f:	83 c4 10             	add    $0x10,%esp
 8066c32:	89 c5                	mov    %eax,%ebp
 8066c34:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8066c38:	e9 e7 f9 ff ff       	jmp    8066624 <locale_charset+0x7a4>
 8066c3d:	8d 76 00             	lea    0x0(%esi),%esi
          }
      }

      if (file_name == NULL)
        /* Out of memory.  Treat the file as empty.  */
        cp = "";
 8066c40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066c44:	89 3c 24             	mov    %edi,(%esp)
 8066c47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066c4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066c4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066c53:	b9 60 37 00 00       	mov    $0x3760,%ecx
 8066c58:	e8 ab 00 00 00       	call   8066d08 <__afl_maybe_log>
 8066c5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066c61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066c65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066c69:	8b 3c 24             	mov    (%esp),%edi
 8066c6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066c70:	bb bd 80 06 08       	mov    $0x80680bd,%ebx
 8066c75:	e9 b5 fb ff ff       	jmp    806682f <locale_charset+0x9af>
 8066c7a:	66 90                	xchg   %ax,%ax
                        }
                      if (res_ptr == NULL)
                        {
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
 8066c7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066c80:	89 3c 24             	mov    %edi,(%esp)
 8066c83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066c87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066c8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066c8f:	b9 cf 5a 00 00       	mov    $0x5acf,%ecx
 8066c94:	e8 6f 00 00 00       	call   8066d08 <__afl_maybe_log>
 8066c99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066c9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066ca1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066ca5:	8b 3c 24             	mov    (%esp),%edi
 8066ca8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066cac:	83 ec 0c             	sub    $0xc,%esp
 8066caf:	53                   	push   %ebx
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
                    }
                  fclose (fp);
                  if (res_size == 0)
                    cp = "";
 8066cb0:	bb bd 80 06 08       	mov    $0x80680bd,%ebx
                        }
                      if (res_ptr == NULL)
                        {
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
 8066cb5:	e8 a6 24 fe ff       	call   8049160 <free@plt>
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
                    }
                  fclose (fp);
 8066cba:	89 3c 24             	mov    %edi,(%esp)
 8066cbd:	e8 9e d2 ff ff       	call   8063f60 <rpl_fclose>
 8066cc2:	83 c4 10             	add    $0x10,%esp
 8066cc5:	e9 26 fb ff ff       	jmp    80667f0 <locale_charset+0x970>
 8066cca:	66 90                	xchg   %ax,%ax
 8066ccc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8066cd0:	89 3c 24             	mov    %edi,(%esp)
 8066cd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8066cd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8066cdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066cdf:	b9 15 a4 00 00       	mov    $0xa415,%ecx
 8066ce4:	e8 1f 00 00 00       	call   8066d08 <__afl_maybe_log>
 8066ce9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066ced:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8066cf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8066cf5:	8b 3c 24             	mov    (%esp),%edi
 8066cf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8066cfc:	8d 50 ff             	lea    -0x1(%eax),%edx
 8066cff:	e9 a7 fb ff ff       	jmp    80668ab <locale_charset+0xa2b>
 8066d04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08066d08 <__afl_maybe_log>:
 8066d08:	9f                   	lahf   
 8066d09:	0f 90 c0             	seto   %al
 8066d0c:	8b 15 c0 bd 43 08    	mov    0x843bdc0,%edx
 8066d12:	85 d2                	test   %edx,%edx
 8066d14:	74 22                	je     8066d38 <__afl_setup>

08066d16 <__afl_store>:
 8066d16:	8b 3d 20 be 43 08    	mov    0x843be20,%edi
 8066d1c:	31 cf                	xor    %ecx,%edi
 8066d1e:	d1 e9                	shr    %ecx
 8066d20:	89 0d 20 be 43 08    	mov    %ecx,0x843be20
 8066d26:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8066d2a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08066d2e <__afl_return>:
 8066d2e:	04 7f                	add    $0x7f,%al
 8066d30:	9e                   	sahf   
 8066d31:	c3                   	ret    
 8066d32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08066d38 <__afl_setup>:
 8066d38:	80 3d 60 be 43 08 00 	cmpb   $0x0,0x843be60
 8066d3f:	75 ed                	jne    8066d2e <__afl_return>
 8066d41:	50                   	push   %eax
 8066d42:	51                   	push   %ecx
 8066d43:	68 40 6e 06 08       	push   $0x8066e40
 8066d48:	e8 63 25 fe ff       	call   80492b0 <getenv@plt>
 8066d4d:	83 c4 04             	add    $0x4,%esp
 8066d50:	85 c0                	test   %eax,%eax
 8066d52:	0f 84 db 00 00 00    	je     8066e33 <__afl_setup_abort>
 8066d58:	50                   	push   %eax
 8066d59:	e8 22 27 fe ff       	call   8049480 <atoi@plt>
 8066d5e:	83 c4 04             	add    $0x4,%esp
 8066d61:	6a 00                	push   $0x0
 8066d63:	6a 00                	push   $0x0
 8066d65:	50                   	push   %eax
 8066d66:	e8 75 24 fe ff       	call   80491e0 <shmat@plt>
 8066d6b:	83 c4 0c             	add    $0xc,%esp
 8066d6e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8066d71:	0f 84 bc 00 00 00    	je     8066e33 <__afl_setup_abort>
 8066d77:	c6 00 01             	movb   $0x1,(%eax)
 8066d7a:	a3 c0 bd 43 08       	mov    %eax,0x843bdc0
 8066d7f:	89 c2                	mov    %eax,%edx
 8066d81:	59                   	pop    %ecx
 8066d82:	58                   	pop    %eax

08066d83 <__afl_forkserver>:
 8066d83:	50                   	push   %eax
 8066d84:	51                   	push   %ecx
 8066d85:	52                   	push   %edx
 8066d86:	6a 04                	push   $0x4
 8066d88:	68 e0 bd 43 08       	push   $0x843bde0
 8066d8d:	68 c7 00 00 00       	push   $0xc7
 8066d92:	e8 f9 25 fe ff       	call   8049390 <write@plt>
 8066d97:	83 c4 0c             	add    $0xc,%esp
 8066d9a:	83 f8 04             	cmp    $0x4,%eax
 8066d9d:	75 6e                	jne    8066e0d <__afl_fork_resume>

08066d9f <__afl_fork_wait_loop>:
 8066d9f:	6a 04                	push   $0x4
 8066da1:	68 e0 bd 43 08       	push   $0x843bde0
 8066da6:	68 c6 00 00 00       	push   $0xc6
 8066dab:	e8 70 23 fe ff       	call   8049120 <read@plt>
 8066db0:	83 c4 0c             	add    $0xc,%esp
 8066db3:	83 f8 04             	cmp    $0x4,%eax
 8066db6:	75 74                	jne    8066e2c <__afl_die>
 8066db8:	e8 63 26 fe ff       	call   8049420 <fork@plt>
 8066dbd:	83 f8 00             	cmp    $0x0,%eax
 8066dc0:	7c 6a                	jl     8066e2c <__afl_die>
 8066dc2:	74 49                	je     8066e0d <__afl_fork_resume>
 8066dc4:	a3 40 be 43 08       	mov    %eax,0x843be40
 8066dc9:	6a 04                	push   $0x4
 8066dcb:	68 40 be 43 08       	push   $0x843be40
 8066dd0:	68 c7 00 00 00       	push   $0xc7
 8066dd5:	e8 b6 25 fe ff       	call   8049390 <write@plt>
 8066dda:	83 c4 0c             	add    $0xc,%esp
 8066ddd:	6a 00                	push   $0x0
 8066ddf:	68 e0 bd 43 08       	push   $0x843bde0
 8066de4:	ff 35 40 be 43 08    	pushl  0x843be40
 8066dea:	e8 51 24 fe ff       	call   8049240 <waitpid@plt>
 8066def:	83 c4 0c             	add    $0xc,%esp
 8066df2:	83 f8 00             	cmp    $0x0,%eax
 8066df5:	7e 35                	jle    8066e2c <__afl_die>
 8066df7:	6a 04                	push   $0x4
 8066df9:	68 e0 bd 43 08       	push   $0x843bde0
 8066dfe:	68 c7 00 00 00       	push   $0xc7
 8066e03:	e8 88 25 fe ff       	call   8049390 <write@plt>
 8066e08:	83 c4 0c             	add    $0xc,%esp
 8066e0b:	eb 92                	jmp    8066d9f <__afl_fork_wait_loop>

08066e0d <__afl_fork_resume>:
 8066e0d:	68 c6 00 00 00       	push   $0xc6
 8066e12:	e8 e9 26 fe ff       	call   8049500 <close@plt>
 8066e17:	68 c7 00 00 00       	push   $0xc7
 8066e1c:	e8 df 26 fe ff       	call   8049500 <close@plt>
 8066e21:	83 c4 08             	add    $0x8,%esp
 8066e24:	5a                   	pop    %edx
 8066e25:	59                   	pop    %ecx
 8066e26:	58                   	pop    %eax
 8066e27:	e9 ea fe ff ff       	jmp    8066d16 <__afl_store>

08066e2c <__afl_die>:
 8066e2c:	31 c0                	xor    %eax,%eax
 8066e2e:	e8 1d 23 fe ff       	call   8049150 <_exit@plt>

08066e33 <__afl_setup_abort>:
 8066e33:	fe 05 60 be 43 08    	incb   0x843be60
 8066e39:	59                   	pop    %ecx
 8066e3a:	58                   	pop    %eax
 8066e3b:	e9 ee fe ff ff       	jmp    8066d2e <__afl_return>

08066e40 <.AFL_SHM_ENV>:
 8066e40:	5f                   	pop    %edi
 8066e41:	5f                   	pop    %edi
 8066e42:	41                   	inc    %ecx
 8066e43:	46                   	inc    %esi
 8066e44:	4c                   	dec    %esp
 8066e45:	5f                   	pop    %edi
 8066e46:	53                   	push   %ebx
 8066e47:	48                   	dec    %eax
 8066e48:	4d                   	dec    %ebp
 8066e49:	5f                   	pop    %edi
 8066e4a:	49                   	dec    %ecx
 8066e4b:	44                   	inc    %esp
 8066e4c:	00 66 90             	add    %ah,-0x70(%esi)
 8066e4f:	90                   	nop

08066e50 <__umoddi3>:
 8066e50:	55                   	push   %ebp
 8066e51:	57                   	push   %edi
 8066e52:	56                   	push   %esi
 8066e53:	83 ec 20             	sub    $0x20,%esp
 8066e56:	8b 44 24 34          	mov    0x34(%esp),%eax
 8066e5a:	8b 4c 24 30          	mov    0x30(%esp),%ecx
 8066e5e:	8b 7c 24 38          	mov    0x38(%esp),%edi
 8066e62:	89 c6                	mov    %eax,%esi
 8066e64:	89 44 24 10          	mov    %eax,0x10(%esp)
 8066e68:	8b 44 24 3c          	mov    0x3c(%esp),%eax
 8066e6c:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 8066e70:	89 7c 24 0c          	mov    %edi,0xc(%esp)
 8066e74:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 8066e78:	89 74 24 18          	mov    %esi,0x18(%esp)
 8066e7c:	85 c0                	test   %eax,%eax
 8066e7e:	89 c2                	mov    %eax,%edx
 8066e80:	75 1e                	jne    8066ea0 <__umoddi3+0x50>
 8066e82:	39 f7                	cmp    %esi,%edi
 8066e84:	76 52                	jbe    8066ed8 <__umoddi3+0x88>
 8066e86:	89 c8                	mov    %ecx,%eax
 8066e88:	89 f2                	mov    %esi,%edx
 8066e8a:	f7 f7                	div    %edi
 8066e8c:	89 d0                	mov    %edx,%eax
 8066e8e:	31 d2                	xor    %edx,%edx
 8066e90:	83 c4 20             	add    $0x20,%esp
 8066e93:	5e                   	pop    %esi
 8066e94:	5f                   	pop    %edi
 8066e95:	5d                   	pop    %ebp
 8066e96:	c3                   	ret    
 8066e97:	89 f6                	mov    %esi,%esi
 8066e99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 8066ea0:	39 f0                	cmp    %esi,%eax
 8066ea2:	77 5c                	ja     8066f00 <__umoddi3+0xb0>
 8066ea4:	0f bd e8             	bsr    %eax,%ebp
 8066ea7:	83 f5 1f             	xor    $0x1f,%ebp
 8066eaa:	75 64                	jne    8066f10 <__umoddi3+0xc0>
 8066eac:	8b 6c 24 14          	mov    0x14(%esp),%ebp
 8066eb0:	39 6c 24 0c          	cmp    %ebp,0xc(%esp)
 8066eb4:	0f 86 f6 00 00 00    	jbe    8066fb0 <__umoddi3+0x160>
 8066eba:	3b 44 24 18          	cmp    0x18(%esp),%eax
 8066ebe:	0f 82 ec 00 00 00    	jb     8066fb0 <__umoddi3+0x160>
 8066ec4:	8b 44 24 14          	mov    0x14(%esp),%eax
 8066ec8:	8b 54 24 18          	mov    0x18(%esp),%edx
 8066ecc:	83 c4 20             	add    $0x20,%esp
 8066ecf:	5e                   	pop    %esi
 8066ed0:	5f                   	pop    %edi
 8066ed1:	5d                   	pop    %ebp
 8066ed2:	c3                   	ret    
 8066ed3:	90                   	nop
 8066ed4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8066ed8:	85 ff                	test   %edi,%edi
 8066eda:	89 fd                	mov    %edi,%ebp
 8066edc:	75 0b                	jne    8066ee9 <__umoddi3+0x99>
 8066ede:	b8 01 00 00 00       	mov    $0x1,%eax
 8066ee3:	31 d2                	xor    %edx,%edx
 8066ee5:	f7 f7                	div    %edi
 8066ee7:	89 c5                	mov    %eax,%ebp
 8066ee9:	8b 44 24 10          	mov    0x10(%esp),%eax
 8066eed:	31 d2                	xor    %edx,%edx
 8066eef:	f7 f5                	div    %ebp
 8066ef1:	89 c8                	mov    %ecx,%eax
 8066ef3:	f7 f5                	div    %ebp
 8066ef5:	eb 95                	jmp    8066e8c <__umoddi3+0x3c>
 8066ef7:	89 f6                	mov    %esi,%esi
 8066ef9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 8066f00:	89 c8                	mov    %ecx,%eax
 8066f02:	89 f2                	mov    %esi,%edx
 8066f04:	83 c4 20             	add    $0x20,%esp
 8066f07:	5e                   	pop    %esi
 8066f08:	5f                   	pop    %edi
 8066f09:	5d                   	pop    %ebp
 8066f0a:	c3                   	ret    
 8066f0b:	90                   	nop
 8066f0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8066f10:	b8 20 00 00 00       	mov    $0x20,%eax
 8066f15:	89 e9                	mov    %ebp,%ecx
 8066f17:	29 e8                	sub    %ebp,%eax
 8066f19:	d3 e2                	shl    %cl,%edx
 8066f1b:	89 c7                	mov    %eax,%edi
 8066f1d:	89 44 24 18          	mov    %eax,0x18(%esp)
 8066f21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066f25:	89 f9                	mov    %edi,%ecx
 8066f27:	d3 e8                	shr    %cl,%eax
 8066f29:	89 c1                	mov    %eax,%ecx
 8066f2b:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8066f2f:	09 d1                	or     %edx,%ecx
 8066f31:	89 fa                	mov    %edi,%edx
 8066f33:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 8066f37:	89 e9                	mov    %ebp,%ecx
 8066f39:	d3 e0                	shl    %cl,%eax
 8066f3b:	89 f9                	mov    %edi,%ecx
 8066f3d:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8066f41:	89 f0                	mov    %esi,%eax
 8066f43:	d3 e8                	shr    %cl,%eax
 8066f45:	89 e9                	mov    %ebp,%ecx
 8066f47:	89 c7                	mov    %eax,%edi
 8066f49:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8066f4d:	d3 e6                	shl    %cl,%esi
 8066f4f:	89 d1                	mov    %edx,%ecx
 8066f51:	89 fa                	mov    %edi,%edx
 8066f53:	d3 e8                	shr    %cl,%eax
 8066f55:	89 e9                	mov    %ebp,%ecx
 8066f57:	09 f0                	or     %esi,%eax
 8066f59:	8b 74 24 1c          	mov    0x1c(%esp),%esi
 8066f5d:	f7 74 24 10          	divl   0x10(%esp)
 8066f61:	d3 e6                	shl    %cl,%esi
 8066f63:	89 d1                	mov    %edx,%ecx
 8066f65:	f7 64 24 0c          	mull   0xc(%esp)
 8066f69:	39 d1                	cmp    %edx,%ecx
 8066f6b:	89 74 24 14          	mov    %esi,0x14(%esp)
 8066f6f:	89 d7                	mov    %edx,%edi
 8066f71:	89 c6                	mov    %eax,%esi
 8066f73:	72 0a                	jb     8066f7f <__umoddi3+0x12f>
 8066f75:	39 44 24 14          	cmp    %eax,0x14(%esp)
 8066f79:	73 10                	jae    8066f8b <__umoddi3+0x13b>
 8066f7b:	39 d1                	cmp    %edx,%ecx
 8066f7d:	75 0c                	jne    8066f8b <__umoddi3+0x13b>
 8066f7f:	89 d7                	mov    %edx,%edi
 8066f81:	89 c6                	mov    %eax,%esi
 8066f83:	2b 74 24 0c          	sub    0xc(%esp),%esi
 8066f87:	1b 7c 24 10          	sbb    0x10(%esp),%edi
 8066f8b:	89 ca                	mov    %ecx,%edx
 8066f8d:	89 e9                	mov    %ebp,%ecx
 8066f8f:	8b 44 24 14          	mov    0x14(%esp),%eax
 8066f93:	29 f0                	sub    %esi,%eax
 8066f95:	19 fa                	sbb    %edi,%edx
 8066f97:	d3 e8                	shr    %cl,%eax
 8066f99:	0f b6 4c 24 18       	movzbl 0x18(%esp),%ecx
 8066f9e:	89 d7                	mov    %edx,%edi
 8066fa0:	d3 e7                	shl    %cl,%edi
 8066fa2:	89 e9                	mov    %ebp,%ecx
 8066fa4:	09 f8                	or     %edi,%eax
 8066fa6:	d3 ea                	shr    %cl,%edx
 8066fa8:	83 c4 20             	add    $0x20,%esp
 8066fab:	5e                   	pop    %esi
 8066fac:	5f                   	pop    %edi
 8066fad:	5d                   	pop    %ebp
 8066fae:	c3                   	ret    
 8066faf:	90                   	nop
 8066fb0:	8b 74 24 10          	mov    0x10(%esp),%esi
 8066fb4:	29 f9                	sub    %edi,%ecx
 8066fb6:	19 c6                	sbb    %eax,%esi
 8066fb8:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 8066fbc:	89 74 24 18          	mov    %esi,0x18(%esp)
 8066fc0:	e9 ff fe ff ff       	jmp    8066ec4 <__umoddi3+0x74>
 8066fc5:	66 90                	xchg   %ax,%ax
 8066fc7:	66 90                	xchg   %ax,%ax
 8066fc9:	66 90                	xchg   %ax,%ax
 8066fcb:	66 90                	xchg   %ax,%ax
 8066fcd:	66 90                	xchg   %ax,%ax
 8066fcf:	90                   	nop

08066fd0 <__libc_csu_init>:
 8066fd0:	55                   	push   %ebp
 8066fd1:	57                   	push   %edi
 8066fd2:	31 ff                	xor    %edi,%edi
 8066fd4:	56                   	push   %esi
 8066fd5:	53                   	push   %ebx
 8066fd6:	e8 15 f0 fe ff       	call   8055ff0 <__x86.get_pc_thunk.bx>
 8066fdb:	81 c3 31 41 00 00    	add    $0x4131,%ebx
 8066fe1:	83 ec 1c             	sub    $0x1c,%esp
 8066fe4:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8066fe8:	8d b3 f8 fe ff ff    	lea    -0x108(%ebx),%esi
 8066fee:	e8 c1 20 fe ff       	call   80490b4 <_init>
 8066ff3:	8d 83 f4 fe ff ff    	lea    -0x10c(%ebx),%eax
 8066ff9:	29 c6                	sub    %eax,%esi
 8066ffb:	c1 fe 02             	sar    $0x2,%esi
 8066ffe:	85 f6                	test   %esi,%esi
 8067000:	74 27                	je     8067029 <__libc_csu_init+0x59>
 8067002:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8067008:	8b 44 24 38          	mov    0x38(%esp),%eax
 806700c:	89 2c 24             	mov    %ebp,(%esp)
 806700f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8067013:	8b 44 24 34          	mov    0x34(%esp),%eax
 8067017:	89 44 24 04          	mov    %eax,0x4(%esp)
 806701b:	ff 94 bb f4 fe ff ff 	call   *-0x10c(%ebx,%edi,4)
 8067022:	83 c7 01             	add    $0x1,%edi
 8067025:	39 f7                	cmp    %esi,%edi
 8067027:	75 df                	jne    8067008 <__libc_csu_init+0x38>
 8067029:	83 c4 1c             	add    $0x1c,%esp
 806702c:	5b                   	pop    %ebx
 806702d:	5e                   	pop    %esi
 806702e:	5f                   	pop    %edi
 806702f:	5d                   	pop    %ebp
 8067030:	c3                   	ret    
 8067031:	eb 0d                	jmp    8067040 <__libc_csu_fini>
 8067033:	90                   	nop
 8067034:	90                   	nop
 8067035:	90                   	nop
 8067036:	90                   	nop
 8067037:	90                   	nop
 8067038:	90                   	nop
 8067039:	90                   	nop
 806703a:	90                   	nop
 806703b:	90                   	nop
 806703c:	90                   	nop
 806703d:	90                   	nop
 806703e:	90                   	nop
 806703f:	90                   	nop

08067040 <__libc_csu_fini>:
 8067040:	f3 c3                	repz ret 
 8067042:	66 90                	xchg   %ax,%ax
 8067044:	66 90                	xchg   %ax,%ax
 8067046:	66 90                	xchg   %ax,%ax
 8067048:	66 90                	xchg   %ax,%ax
 806704a:	66 90                	xchg   %ax,%ax
 806704c:	66 90                	xchg   %ax,%ax
 806704e:	66 90                	xchg   %ax,%ax

08067050 <atexit>:
 8067050:	53                   	push   %ebx
 8067051:	e8 9a ef fe ff       	call   8055ff0 <__x86.get_pc_thunk.bx>
 8067056:	81 c3 b6 40 00 00    	add    $0x40b6,%ebx
 806705c:	83 ec 18             	sub    $0x18,%esp
 806705f:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8067065:	85 c0                	test   %eax,%eax
 8067067:	74 1f                	je     8067088 <atexit+0x38>
 8067069:	8b 00                	mov    (%eax),%eax
 806706b:	89 44 24 08          	mov    %eax,0x8(%esp)
 806706f:	8b 44 24 20          	mov    0x20(%esp),%eax
 8067073:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 806707a:	00 
 806707b:	89 04 24             	mov    %eax,(%esp)
 806707e:	e8 fd 21 fe ff       	call   8049280 <__cxa_atexit@plt>
 8067083:	83 c4 18             	add    $0x18,%esp
 8067086:	5b                   	pop    %ebx
 8067087:	c3                   	ret    
 8067088:	31 c0                	xor    %eax,%eax
 806708a:	eb df                	jmp    806706b <atexit+0x1b>

Disassembly of section .fini:

0806708c <_fini>:
 806708c:	53                   	push   %ebx
 806708d:	83 ec 08             	sub    $0x8,%esp
 8067090:	e8 5b ef fe ff       	call   8055ff0 <__x86.get_pc_thunk.bx>
 8067095:	81 c3 77 40 00 00    	add    $0x4077,%ebx
 806709b:	83 c4 08             	add    $0x8,%esp
 806709e:	5b                   	pop    %ebx
 806709f:	c3                   	ret    
