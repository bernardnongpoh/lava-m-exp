
src/uniq:     file format elf32-i386


Disassembly of section .init:

080490d4 <_init>:
 80490d4:	53                   	push   %ebx
 80490d5:	83 ec 08             	sub    $0x8,%esp
 80490d8:	e8 e3 7d 00 00       	call   8050ec0 <__x86.get_pc_thunk.bx>
 80490dd:	81 c3 2f 10 02 00    	add    $0x2102f,%ebx
 80490e3:	8b 83 f8 ff ff ff    	mov    -0x8(%ebx),%eax
 80490e9:	85 c0                	test   %eax,%eax
 80490eb:	74 05                	je     80490f2 <_init+0x1e>
 80490ed:	e8 2e 02 00 00       	call   8049320 <__gmon_start__@plt>
 80490f2:	83 c4 08             	add    $0x8,%esp
 80490f5:	5b                   	pop    %ebx
 80490f6:	c3                   	ret    

Disassembly of section .plt:

08049100 <__ctype_toupper_loc@plt-0x10>:
 8049100:	ff 35 10 a1 06 08    	pushl  0x806a110
 8049106:	ff 25 14 a1 06 08    	jmp    *0x806a114
 804910c:	00 00                	add    %al,(%eax)
	...

08049110 <__ctype_toupper_loc@plt>:
 8049110:	ff 25 18 a1 06 08    	jmp    *0x806a118
 8049116:	68 00 00 00 00       	push   $0x0
 804911b:	e9 e0 ff ff ff       	jmp    8049100 <_init+0x2c>

08049120 <freopen64@plt>:
 8049120:	ff 25 1c a1 06 08    	jmp    *0x806a11c
 8049126:	68 08 00 00 00       	push   $0x8
 804912b:	e9 d0 ff ff ff       	jmp    8049100 <_init+0x2c>

08049130 <dup2@plt>:
 8049130:	ff 25 20 a1 06 08    	jmp    *0x806a120
 8049136:	68 10 00 00 00       	push   $0x10
 804913b:	e9 c0 ff ff ff       	jmp    8049100 <_init+0x2c>

08049140 <strcmp@plt>:
 8049140:	ff 25 24 a1 06 08    	jmp    *0x806a124
 8049146:	68 18 00 00 00       	push   $0x18
 804914b:	e9 b0 ff ff ff       	jmp    8049100 <_init+0x2c>

08049150 <open64@plt>:
 8049150:	ff 25 28 a1 06 08    	jmp    *0x806a128
 8049156:	68 20 00 00 00       	push   $0x20
 804915b:	e9 a0 ff ff ff       	jmp    8049100 <_init+0x2c>

08049160 <read@plt>:
 8049160:	ff 25 2c a1 06 08    	jmp    *0x806a12c
 8049166:	68 28 00 00 00       	push   $0x28
 804916b:	e9 90 ff ff ff       	jmp    8049100 <_init+0x2c>

08049170 <printf@plt>:
 8049170:	ff 25 30 a1 06 08    	jmp    *0x806a130
 8049176:	68 30 00 00 00       	push   $0x30
 804917b:	e9 80 ff ff ff       	jmp    8049100 <_init+0x2c>

08049180 <fflush@plt>:
 8049180:	ff 25 34 a1 06 08    	jmp    *0x806a134
 8049186:	68 38 00 00 00       	push   $0x38
 804918b:	e9 70 ff ff ff       	jmp    8049100 <_init+0x2c>

08049190 <_exit@plt>:
 8049190:	ff 25 38 a1 06 08    	jmp    *0x806a138
 8049196:	68 40 00 00 00       	push   $0x40
 804919b:	e9 60 ff ff ff       	jmp    8049100 <_init+0x2c>

080491a0 <free@plt>:
 80491a0:	ff 25 3c a1 06 08    	jmp    *0x806a13c
 80491a6:	68 48 00 00 00       	push   $0x48
 80491ab:	e9 50 ff ff ff       	jmp    8049100 <_init+0x2c>

080491b0 <memcpy@plt>:
 80491b0:	ff 25 40 a1 06 08    	jmp    *0x806a140
 80491b6:	68 50 00 00 00       	push   $0x50
 80491bb:	e9 40 ff ff ff       	jmp    8049100 <_init+0x2c>

080491c0 <mbsinit@plt>:
 80491c0:	ff 25 44 a1 06 08    	jmp    *0x806a144
 80491c6:	68 58 00 00 00       	push   $0x58
 80491cb:	e9 30 ff ff ff       	jmp    8049100 <_init+0x2c>

080491d0 <fclose@plt>:
 80491d0:	ff 25 48 a1 06 08    	jmp    *0x806a148
 80491d6:	68 60 00 00 00       	push   $0x60
 80491db:	e9 20 ff ff ff       	jmp    8049100 <_init+0x2c>

080491e0 <fseeko64@plt>:
 80491e0:	ff 25 4c a1 06 08    	jmp    *0x806a14c
 80491e6:	68 68 00 00 00       	push   $0x68
 80491eb:	e9 10 ff ff ff       	jmp    8049100 <_init+0x2c>

080491f0 <memcmp@plt>:
 80491f0:	ff 25 50 a1 06 08    	jmp    *0x806a150
 80491f6:	68 70 00 00 00       	push   $0x70
 80491fb:	e9 00 ff ff ff       	jmp    8049100 <_init+0x2c>

08049200 <dprintf@plt>:
 8049200:	ff 25 54 a1 06 08    	jmp    *0x806a154
 8049206:	68 78 00 00 00       	push   $0x78
 804920b:	e9 f0 fe ff ff       	jmp    8049100 <_init+0x2c>

08049210 <dcgettext@plt>:
 8049210:	ff 25 58 a1 06 08    	jmp    *0x806a158
 8049216:	68 80 00 00 00       	push   $0x80
 804921b:	e9 e0 fe ff ff       	jmp    8049100 <_init+0x2c>

08049220 <shmat@plt>:
 8049220:	ff 25 5c a1 06 08    	jmp    *0x806a15c
 8049226:	68 88 00 00 00       	push   $0x88
 804922b:	e9 d0 fe ff ff       	jmp    8049100 <_init+0x2c>

08049230 <textdomain@plt>:
 8049230:	ff 25 60 a1 06 08    	jmp    *0x806a160
 8049236:	68 90 00 00 00       	push   $0x90
 804923b:	e9 c0 fe ff ff       	jmp    8049100 <_init+0x2c>

08049240 <iswprint@plt>:
 8049240:	ff 25 64 a1 06 08    	jmp    *0x806a164
 8049246:	68 98 00 00 00       	push   $0x98
 804924b:	e9 b0 fe ff ff       	jmp    8049100 <_init+0x2c>

08049250 <fwrite@plt>:
 8049250:	ff 25 68 a1 06 08    	jmp    *0x806a168
 8049256:	68 a0 00 00 00       	push   $0xa0
 804925b:	e9 a0 fe ff ff       	jmp    8049100 <_init+0x2c>

08049260 <__ctype_get_mb_cur_max@plt>:
 8049260:	ff 25 6c a1 06 08    	jmp    *0x806a16c
 8049266:	68 a8 00 00 00       	push   $0xa8
 804926b:	e9 90 fe ff ff       	jmp    8049100 <_init+0x2c>

08049270 <waitpid@plt>:
 8049270:	ff 25 70 a1 06 08    	jmp    *0x806a170
 8049276:	68 b0 00 00 00       	push   $0xb0
 804927b:	e9 80 fe ff ff       	jmp    8049100 <_init+0x2c>

08049280 <strcpy@plt>:
 8049280:	ff 25 74 a1 06 08    	jmp    *0x806a174
 8049286:	68 b8 00 00 00       	push   $0xb8
 804928b:	e9 70 fe ff ff       	jmp    8049100 <_init+0x2c>

08049290 <__fpending@plt>:
 8049290:	ff 25 78 a1 06 08    	jmp    *0x806a178
 8049296:	68 c0 00 00 00       	push   $0xc0
 804929b:	e9 60 fe ff ff       	jmp    8049100 <_init+0x2c>

080492a0 <mbrtowc@plt>:
 80492a0:	ff 25 7c a1 06 08    	jmp    *0x806a17c
 80492a6:	68 c8 00 00 00       	push   $0xc8
 80492ab:	e9 50 fe ff ff       	jmp    8049100 <_init+0x2c>

080492b0 <__cxa_atexit@plt>:
 80492b0:	ff 25 80 a1 06 08    	jmp    *0x806a180
 80492b6:	68 d0 00 00 00       	push   $0xd0
 80492bb:	e9 40 fe ff ff       	jmp    8049100 <_init+0x2c>

080492c0 <error@plt>:
 80492c0:	ff 25 84 a1 06 08    	jmp    *0x806a184
 80492c6:	68 d8 00 00 00       	push   $0xd8
 80492cb:	e9 30 fe ff ff       	jmp    8049100 <_init+0x2c>

080492d0 <strcoll@plt>:
 80492d0:	ff 25 88 a1 06 08    	jmp    *0x806a188
 80492d6:	68 e0 00 00 00       	push   $0xe0
 80492db:	e9 20 fe ff ff       	jmp    8049100 <_init+0x2c>

080492e0 <getenv@plt>:
 80492e0:	ff 25 8c a1 06 08    	jmp    *0x806a18c
 80492e6:	68 e8 00 00 00       	push   $0xe8
 80492eb:	e9 10 fe ff ff       	jmp    8049100 <_init+0x2c>

080492f0 <realloc@plt>:
 80492f0:	ff 25 90 a1 06 08    	jmp    *0x806a190
 80492f6:	68 f0 00 00 00       	push   $0xf0
 80492fb:	e9 00 fe ff ff       	jmp    8049100 <_init+0x2c>

08049300 <malloc@plt>:
 8049300:	ff 25 94 a1 06 08    	jmp    *0x806a194
 8049306:	68 f8 00 00 00       	push   $0xf8
 804930b:	e9 f0 fd ff ff       	jmp    8049100 <_init+0x2c>

08049310 <__freading@plt>:
 8049310:	ff 25 98 a1 06 08    	jmp    *0x806a198
 8049316:	68 00 01 00 00       	push   $0x100
 804931b:	e9 e0 fd ff ff       	jmp    8049100 <_init+0x2c>

08049320 <__gmon_start__@plt>:
 8049320:	ff 25 9c a1 06 08    	jmp    *0x806a19c
 8049326:	68 08 01 00 00       	push   $0x108
 804932b:	e9 d0 fd ff ff       	jmp    8049100 <_init+0x2c>

08049330 <exit@plt>:
 8049330:	ff 25 a0 a1 06 08    	jmp    *0x806a1a0
 8049336:	68 10 01 00 00       	push   $0x110
 804933b:	e9 c0 fd ff ff       	jmp    8049100 <_init+0x2c>

08049340 <fdopen@plt>:
 8049340:	ff 25 a4 a1 06 08    	jmp    *0x806a1a4
 8049346:	68 18 01 00 00       	push   $0x118
 804934b:	e9 b0 fd ff ff       	jmp    8049100 <_init+0x2c>

08049350 <fputs_unlocked@plt>:
 8049350:	ff 25 a8 a1 06 08    	jmp    *0x806a1a8
 8049356:	68 20 01 00 00       	push   $0x120
 804935b:	e9 a0 fd ff ff       	jmp    8049100 <_init+0x2c>

08049360 <getopt_long@plt>:
 8049360:	ff 25 ac a1 06 08    	jmp    *0x806a1ac
 8049366:	68 28 01 00 00       	push   $0x128
 804936b:	e9 90 fd ff ff       	jmp    8049100 <_init+0x2c>

08049370 <strtoul@plt>:
 8049370:	ff 25 b0 a1 06 08    	jmp    *0x806a1b0
 8049376:	68 30 01 00 00       	push   $0x130
 804937b:	e9 80 fd ff ff       	jmp    8049100 <_init+0x2c>

08049380 <strchr@plt>:
 8049380:	ff 25 b4 a1 06 08    	jmp    *0x806a1b4
 8049386:	68 38 01 00 00       	push   $0x138
 804938b:	e9 70 fd ff ff       	jmp    8049100 <_init+0x2c>

08049390 <fscanf@plt>:
 8049390:	ff 25 b8 a1 06 08    	jmp    *0x806a1b8
 8049396:	68 40 01 00 00       	push   $0x140
 804939b:	e9 60 fd ff ff       	jmp    8049100 <_init+0x2c>

080493a0 <strlen@plt>:
 80493a0:	ff 25 bc a1 06 08    	jmp    *0x806a1bc
 80493a6:	68 48 01 00 00       	push   $0x148
 80493ab:	e9 50 fd ff ff       	jmp    8049100 <_init+0x2c>

080493b0 <__libc_start_main@plt>:
 80493b0:	ff 25 c0 a1 06 08    	jmp    *0x806a1c0
 80493b6:	68 50 01 00 00       	push   $0x150
 80493bb:	e9 40 fd ff ff       	jmp    8049100 <_init+0x2c>

080493c0 <fprintf@plt>:
 80493c0:	ff 25 c4 a1 06 08    	jmp    *0x806a1c4
 80493c6:	68 58 01 00 00       	push   $0x158
 80493cb:	e9 30 fd ff ff       	jmp    8049100 <_init+0x2c>

080493d0 <write@plt>:
 80493d0:	ff 25 c8 a1 06 08    	jmp    *0x806a1c8
 80493d6:	68 60 01 00 00       	push   $0x160
 80493db:	e9 20 fd ff ff       	jmp    8049100 <_init+0x2c>

080493e0 <memset@plt>:
 80493e0:	ff 25 cc a1 06 08    	jmp    *0x806a1cc
 80493e6:	68 68 01 00 00       	push   $0x168
 80493eb:	e9 10 fd ff ff       	jmp    8049100 <_init+0x2c>

080493f0 <ungetc@plt>:
 80493f0:	ff 25 d0 a1 06 08    	jmp    *0x806a1d0
 80493f6:	68 70 01 00 00       	push   $0x170
 80493fb:	e9 00 fd ff ff       	jmp    8049100 <_init+0x2c>

08049400 <__errno_location@plt>:
 8049400:	ff 25 d4 a1 06 08    	jmp    *0x806a1d4
 8049406:	68 78 01 00 00       	push   $0x178
 804940b:	e9 f0 fc ff ff       	jmp    8049100 <_init+0x2c>

08049410 <fileno@plt>:
 8049410:	ff 25 d8 a1 06 08    	jmp    *0x806a1d8
 8049416:	68 80 01 00 00       	push   $0x180
 804941b:	e9 e0 fc ff ff       	jmp    8049100 <_init+0x2c>

08049420 <fwrite_unlocked@plt>:
 8049420:	ff 25 dc a1 06 08    	jmp    *0x806a1dc
 8049426:	68 88 01 00 00       	push   $0x188
 804942b:	e9 d0 fc ff ff       	jmp    8049100 <_init+0x2c>

08049430 <__printf_chk@plt>:
 8049430:	ff 25 e0 a1 06 08    	jmp    *0x806a1e0
 8049436:	68 90 01 00 00       	push   $0x190
 804943b:	e9 c0 fc ff ff       	jmp    8049100 <_init+0x2c>

08049440 <fork@plt>:
 8049440:	ff 25 e4 a1 06 08    	jmp    *0x806a1e4
 8049446:	68 98 01 00 00       	push   $0x198
 804944b:	e9 b0 fc ff ff       	jmp    8049100 <_init+0x2c>

08049450 <__uflow@plt>:
 8049450:	ff 25 e8 a1 06 08    	jmp    *0x806a1e8
 8049456:	68 a0 01 00 00       	push   $0x1a0
 804945b:	e9 a0 fc ff ff       	jmp    8049100 <_init+0x2c>

08049460 <nl_langinfo@plt>:
 8049460:	ff 25 ec a1 06 08    	jmp    *0x806a1ec
 8049466:	68 a8 01 00 00       	push   $0x1a8
 804946b:	e9 90 fc ff ff       	jmp    8049100 <_init+0x2c>

08049470 <setlocale@plt>:
 8049470:	ff 25 f0 a1 06 08    	jmp    *0x806a1f0
 8049476:	68 b0 01 00 00       	push   $0x1b0
 804947b:	e9 80 fc ff ff       	jmp    8049100 <_init+0x2c>

08049480 <strrchr@plt>:
 8049480:	ff 25 f4 a1 06 08    	jmp    *0x806a1f4
 8049486:	68 b8 01 00 00       	push   $0x1b8
 804948b:	e9 70 fc ff ff       	jmp    8049100 <_init+0x2c>

08049490 <__overflow@plt>:
 8049490:	ff 25 f8 a1 06 08    	jmp    *0x806a1f8
 8049496:	68 c0 01 00 00       	push   $0x1c0
 804949b:	e9 60 fc ff ff       	jmp    8049100 <_init+0x2c>

080494a0 <atoi@plt>:
 80494a0:	ff 25 fc a1 06 08    	jmp    *0x806a1fc
 80494a6:	68 c8 01 00 00       	push   $0x1c8
 80494ab:	e9 50 fc ff ff       	jmp    8049100 <_init+0x2c>

080494b0 <lseek64@plt>:
 80494b0:	ff 25 00 a2 06 08    	jmp    *0x806a200
 80494b6:	68 d0 01 00 00       	push   $0x1d0
 80494bb:	e9 40 fc ff ff       	jmp    8049100 <_init+0x2c>

080494c0 <__fprintf_chk@plt>:
 80494c0:	ff 25 04 a2 06 08    	jmp    *0x806a204
 80494c6:	68 d8 01 00 00       	push   $0x1d8
 80494cb:	e9 30 fc ff ff       	jmp    8049100 <_init+0x2c>

080494d0 <bindtextdomain@plt>:
 80494d0:	ff 25 08 a2 06 08    	jmp    *0x806a208
 80494d6:	68 e0 01 00 00       	push   $0x1e0
 80494db:	e9 20 fc ff ff       	jmp    8049100 <_init+0x2c>

080494e0 <posix_fadvise64@plt>:
 80494e0:	ff 25 0c a2 06 08    	jmp    *0x806a20c
 80494e6:	68 e8 01 00 00       	push   $0x1e8
 80494eb:	e9 10 fc ff ff       	jmp    8049100 <_init+0x2c>

080494f0 <strncmp@plt>:
 80494f0:	ff 25 10 a2 06 08    	jmp    *0x806a210
 80494f6:	68 f0 01 00 00       	push   $0x1f0
 80494fb:	e9 00 fc ff ff       	jmp    8049100 <_init+0x2c>

08049500 <abort@plt>:
 8049500:	ff 25 14 a2 06 08    	jmp    *0x806a214
 8049506:	68 f8 01 00 00       	push   $0x1f8
 804950b:	e9 f0 fb ff ff       	jmp    8049100 <_init+0x2c>

08049510 <strtol@plt>:
 8049510:	ff 25 18 a2 06 08    	jmp    *0x806a218
 8049516:	68 00 02 00 00       	push   $0x200
 804951b:	e9 e0 fb ff ff       	jmp    8049100 <_init+0x2c>

08049520 <close@plt>:
 8049520:	ff 25 1c a2 06 08    	jmp    *0x806a21c
 8049526:	68 08 02 00 00       	push   $0x208
 804952b:	e9 d0 fb ff ff       	jmp    8049100 <_init+0x2c>

08049530 <__assert_fail@plt>:
 8049530:	ff 25 20 a2 06 08    	jmp    *0x806a220
 8049536:	68 10 02 00 00       	push   $0x210
 804953b:	e9 c0 fb ff ff       	jmp    8049100 <_init+0x2c>

08049540 <__ctype_b_loc@plt>:
 8049540:	ff 25 24 a2 06 08    	jmp    *0x806a224
 8049546:	68 18 02 00 00       	push   $0x218
 804954b:	e9 b0 fb ff ff       	jmp    8049100 <_init+0x2c>

08049550 <calloc@plt>:
 8049550:	ff 25 28 a2 06 08    	jmp    *0x806a228
 8049556:	68 20 02 00 00       	push   $0x220
 804955b:	e9 a0 fb ff ff       	jmp    8049100 <_init+0x2c>

Disassembly of section .text:

08049560 <main>:



int
main (int argc, char **argv)
{
 8049560:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049564:	89 3c 24             	mov    %edi,(%esp)
 8049567:	89 54 24 04          	mov    %edx,0x4(%esp)
 804956b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804956f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049573:	b9 19 2d 00 00       	mov    $0x2d19,%ecx
 8049578:	e8 cb b3 00 00       	call   8054948 <__afl_maybe_log>
 804957d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049581:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049585:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049589:	8b 3c 24             	mov    (%esp),%edi
 804958c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049590:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8049594:	83 e4 f0             	and    $0xfffffff0,%esp
 8049597:	ff 71 fc             	pushl  -0x4(%ecx)
 804959a:	55                   	push   %ebp
 804959b:	89 e5                	mov    %esp,%ebp
 804959d:	57                   	push   %edi
 804959e:	56                   	push   %esi
 804959f:	53                   	push   %ebx
 80495a0:	51                   	push   %ecx
 80495a1:	83 ec 74             	sub    $0x74,%esp
 80495a4:	8b 41 04             	mov    0x4(%ecx),%eax
 80495a7:	8b 39                	mov    (%ecx),%edi
  	

int optc = 0;
  bool posixly_correct = (getenv ("POSIXLY_CORRECT") != NULL);
 80495a9:	68 b7 5b 06 08       	push   $0x8065bb7



int
main (int argc, char **argv)
{
 80495ae:	89 c6                	mov    %eax,%esi
 80495b0:	89 45 b8             	mov    %eax,-0x48(%ebp)
  	

int optc = 0;
  bool posixly_correct = (getenv ("POSIXLY_CORRECT") != NULL);
 80495b3:	e8 28 fd ff ff       	call   80492e0 <getenv@plt>
 80495b8:	5a                   	pop    %edx
  char delimiter = '\n';	/* change with --zero-terminated, -z */
  bool output_option_used = false;   /* if true, one of -u/-d/-D/-c was used */

  file[0] = file[1] = "-";
  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
 80495b9:	ff 36                	pushl  (%esi)
main (int argc, char **argv)
{
  	

int optc = 0;
  bool posixly_correct = (getenv ("POSIXLY_CORRECT") != NULL);
 80495bb:	85 c0                	test   %eax,%eax
  int nfiles = 0;
  char const *file[2];
  char delimiter = '\n';	/* change with --zero-terminated, -z */
  bool output_option_used = false;   /* if true, one of -u/-d/-D/-c was used */

  file[0] = file[1] = "-";
 80495bd:	c7 45 cc 1e 67 06 08 	movl   $0x806671e,-0x34(%ebp)
main (int argc, char **argv)
{
  	

int optc = 0;
  bool posixly_correct = (getenv ("POSIXLY_CORRECT") != NULL);
 80495c4:	0f 95 45 c0          	setne  -0x40(%ebp)
  int nfiles = 0;
  char const *file[2];
  char delimiter = '\n';	/* change with --zero-terminated, -z */
  bool output_option_used = false;   /* if true, one of -u/-d/-D/-c was used */

  file[0] = file[1] = "-";
 80495c8:	c7 45 c8 1e 67 06 08 	movl   $0x806671e,-0x38(%ebp)
  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
 80495cf:	e8 2c eb 00 00       	call   8058100 <set_program_name>
  setlocale (LC_ALL, "");
 80495d4:	59                   	pop    %ecx
 80495d5:	5b                   	pop    %ebx
 80495d6:	68 dd 6a 06 08       	push   $0x8066add
 80495db:	6a 06                	push   $0x6
  	

int optc = 0;
  bool posixly_correct = (getenv ("POSIXLY_CORRECT") != NULL);
  enum Skip_field_option_type skip_field_option_type = SFO_NONE;
  int nfiles = 0;
 80495dd:	31 db                	xor    %ebx,%ebx
  bool output_option_used = false;   /* if true, one of -u/-d/-D/-c was used */

  file[0] = file[1] = "-";
  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
  setlocale (LC_ALL, "");
 80495df:	e8 8c fe ff ff       	call   8049470 <setlocale@plt>
  bindtextdomain (PACKAGE, LOCALEDIR);
 80495e4:	5e                   	pop    %esi
 80495e5:	58                   	pop    %eax
 80495e6:	68 c7 5b 06 08       	push   $0x8065bc7
 80495eb:	68 a9 5b 06 08       	push   $0x8065ba9
int
main (int argc, char **argv)
{
  	

int optc = 0;
 80495f0:	31 f6                	xor    %esi,%esi

  file[0] = file[1] = "-";
  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
  setlocale (LC_ALL, "");
  bindtextdomain (PACKAGE, LOCALEDIR);
 80495f2:	e8 d9 fe ff ff       	call   80494d0 <bindtextdomain@plt>
  textdomain (PACKAGE);
 80495f7:	c7 04 24 a9 5b 06 08 	movl   $0x8065ba9,(%esp)
 80495fe:	e8 2d fc ff ff       	call   8049230 <textdomain@plt>
  hard_LC_COLLATE = hard_locale (LC_COLLATE);
 8049603:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
 804960a:	e8 d1 d0 00 00       	call   80566e0 <hard_locale>

  atexit (close_stdout);
 804960f:	c7 04 24 00 57 05 08 	movl   $0x8055700,(%esp)
  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
  setlocale (LC_ALL, "");
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);
  hard_LC_COLLATE = hard_locale (LC_COLLATE);
 8049616:	a2 1c a3 06 08       	mov    %al,0x806a31c

  atexit (close_stdout);
 804961b:	e8 60 c4 01 00       	call   8065a80 <atexit>

  skip_chars = 0;
 8049620:	c7 05 14 a3 06 08 00 	movl   $0x0,0x806a314
 8049627:	00 00 00 
  skip_fields = 0;
 804962a:	c7 05 18 a3 06 08 00 	movl   $0x0,0x806a318
 8049631:	00 00 00 
  check_chars = SIZE_MAX;
  output_unique = output_first_repeated = true;
  output_later_repeated = false;
  countmode = count_none;
  delimit_groups = DM_NONE;
 8049634:	83 c4 10             	add    $0x10,%esp

  atexit (close_stdout);

  skip_chars = 0;
  skip_fields = 0;
  check_chars = SIZE_MAX;
 8049637:	c7 05 10 a3 06 08 ff 	movl   $0xffffffff,0x806a310
 804963e:	ff ff ff 
  output_unique = output_first_repeated = true;
 8049641:	c6 05 0a a3 06 08 01 	movb   $0x1,0x806a30a
 8049648:	c6 05 0b a3 06 08 01 	movb   $0x1,0x806a30b
  output_later_repeated = false;
 804964f:	c6 05 09 a3 06 08 00 	movb   $0x0,0x806a309
  countmode = count_none;
 8049656:	c7 05 0c a3 06 08 01 	movl   $0x1,0x806a30c
 804965d:	00 00 00 
  delimit_groups = DM_NONE;
 8049660:	c7 05 04 a3 06 08 00 	movl   $0x0,0x806a304
 8049667:	00 00 00 
  bool posixly_correct = (getenv ("POSIXLY_CORRECT") != NULL);
  enum Skip_field_option_type skip_field_option_type = SFO_NONE;
  int nfiles = 0;
  char const *file[2];
  char delimiter = '\n';	/* change with --zero-terminated, -z */
  bool output_option_used = false;   /* if true, one of -u/-d/-D/-c was used */
 804966a:	c6 45 b0 00          	movb   $0x0,-0x50(%ebp)
int optc = 0;
  bool posixly_correct = (getenv ("POSIXLY_CORRECT") != NULL);
  enum Skip_field_option_type skip_field_option_type = SFO_NONE;
  int nfiles = 0;
  char const *file[2];
  char delimiter = '\n';	/* change with --zero-terminated, -z */
 804966e:	c6 45 9e 0a          	movb   $0xa,-0x62(%ebp)
{
  	

int optc = 0;
  bool posixly_correct = (getenv ("POSIXLY_CORRECT") != NULL);
  enum Skip_field_option_type skip_field_option_type = SFO_NONE;
 8049672:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
 8049679:	8d 76 00             	lea    0x0(%esi),%esi
         seen; or if pedantic and a file was seen; or if not
         obsolete.  */

      
// ABS Label 466
if(optc < 0)  {
 804967c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049680:	89 3c 24             	mov    %edi,(%esp)
 8049683:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049687:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804968b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804968f:	b9 4b fd 00 00       	mov    $0xfd4b,%ecx
 8049694:	e8 af b2 00 00       	call   8054948 <__afl_maybe_log>
 8049699:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804969d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80496a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80496a5:	8b 3c 24             	mov    (%esp),%edi
 80496a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80496ac:	85 f6                	test   %esi,%esi
 80496ae:	0f 88 50 07 00 00    	js     8049e04 <main+0x8a4>
 80496b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80496b8:	89 3c 24             	mov    %edi,(%esp)
 80496bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80496bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80496c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80496c7:	b9 5f d4 00 00       	mov    $0xd45f,%ecx
 80496cc:	e8 77 b2 00 00       	call   8054948 <__afl_maybe_log>
 80496d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80496d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80496d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80496dd:	8b 3c 24             	mov    (%esp),%edi
 80496e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80496e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	report_label_coverage("ABS", 466);
}

// COR Label 467
if((optc == -1 && (posixly_correct && nfiles != 0)) != (optc == -1 || (posixly_correct && nfiles != 0)))  {
 80496e8:	85 db                	test   %ebx,%ebx
 80496ea:	0f 95 45 c4          	setne  -0x3c(%ebp)
 80496ee:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 80496f2:	22 55 c0             	and    -0x40(%ebp),%dl
 80496f5:	88 55 bc             	mov    %dl,-0x44(%ebp)
 80496f8:	0f 85 d2 0a 00 00    	jne    804a1d0 <main+0xc70>
 80496fe:	66 90                	xchg   %ax,%ax
 8049700:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049704:	89 3c 24             	mov    %edi,(%esp)
 8049707:	89 54 24 04          	mov    %edx,0x4(%esp)
 804970b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804970f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049713:	b9 a9 f5 00 00       	mov    $0xf5a9,%ecx
 8049718:	e8 2b b2 00 00       	call   8054948 <__afl_maybe_log>
 804971d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049721:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049725:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049729:	8b 3c 24             	mov    (%esp),%edi
 804972c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 467);
}

// ROR Label 468
if((optc != -1) != (optc == -1))  {
 8049730:	83 fe ff             	cmp    $0xffffffff,%esi
 8049733:	0f 94 c0             	sete   %al
 8049736:	8d 76 00             	lea    0x0(%esi),%esi
 8049739:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
	report_label_coverage("ROR", 468);
 8049740:	83 ec 08             	sub    $0x8,%esp
 8049743:	88 45 b4             	mov    %al,-0x4c(%ebp)
 8049746:	68 d4 01 00 00       	push   $0x1d4
 804974b:	68 17 5b 06 08       	push   $0x8065b17
 8049750:	e8 2b 79 00 00       	call   8051080 <report_label_coverage>
 8049755:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
 8049759:	83 c4 10             	add    $0x10,%esp
}

// MCC Label 469
if(optc == -1 && ( posixly_correct && nfiles != 0 ) ) {
 804975c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049760:	89 3c 24             	mov    %edi,(%esp)
 8049763:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049767:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804976b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804976f:	b9 d5 a4 00 00       	mov    $0xa4d5,%ecx
 8049774:	e8 cf b1 00 00       	call   8054948 <__afl_maybe_log>
 8049779:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804977d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049781:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049785:	8b 3c 24             	mov    (%esp),%edi
 8049788:	8d 64 24 10          	lea    0x10(%esp),%esp
 804978c:	84 c0                	test   %al,%al
 804978e:	0f 85 4c 07 00 00    	jne    8049ee0 <main+0x980>
 8049794:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049798:	89 3c 24             	mov    %edi,(%esp)
 804979b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804979f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80497a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80497a7:	b9 44 33 00 00       	mov    $0x3344,%ecx
 80497ac:	e8 97 b1 00 00       	call   8054948 <__afl_maybe_log>
 80497b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80497b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80497b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80497bd:	8b 3c 24             	mov    (%esp),%edi
 80497c0:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 472
if(optc == -1 && ( !(posixly_correct) && !(nfiles != 0) ) ) {
	report_label_coverage("MCC", 472);
}
// MCC Label 473
if(!(optc == -1) && ( posixly_correct && nfiles != 0 ) ) {
 80497c4:	80 7d bc 00          	cmpb   $0x0,-0x44(%ebp)
 80497c8:	0f 85 1a 0d 00 00    	jne    804a4e8 <main+0xf88>
 80497ce:	66 90                	xchg   %ax,%ax
 80497d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80497d4:	89 3c 24             	mov    %edi,(%esp)
 80497d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80497db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80497df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80497e3:	b9 ae cb 00 00       	mov    $0xcbae,%ecx
 80497e8:	e8 5b b1 00 00       	call   8054948 <__afl_maybe_log>
 80497ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80497f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80497f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80497f9:	8b 3c 24             	mov    (%esp),%edi
 80497fc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 473);
}
// MCC Label 474
if(!(optc == -1) && ( posixly_correct && !(nfiles != 0) ) ) {
 8049800:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049804:	89 3c 24             	mov    %edi,(%esp)
 8049807:	89 54 24 04          	mov    %edx,0x4(%esp)
 804980b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804980f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049813:	b9 3d 5a 00 00       	mov    $0x5a3d,%ecx
 8049818:	e8 2b b1 00 00       	call   8054948 <__afl_maybe_log>
 804981d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049821:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049825:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049829:	8b 3c 24             	mov    (%esp),%edi
 804982c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049830:	85 db                	test   %ebx,%ebx
 8049832:	0f 94 c0             	sete   %al
 8049835:	0f 85 85 00 00 00    	jne    80498c0 <main+0x360>
 804983b:	90                   	nop
 804983c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049840:	89 3c 24             	mov    %edi,(%esp)
 8049843:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049847:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804984b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804984f:	b9 61 82 00 00       	mov    $0x8261,%ecx
 8049854:	e8 ef b0 00 00       	call   8054948 <__afl_maybe_log>
 8049859:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804985d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049861:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049865:	8b 3c 24             	mov    (%esp),%edi
 8049868:	8d 64 24 10          	lea    0x10(%esp),%esp
 804986c:	80 7d c0 00          	cmpb   $0x0,-0x40(%ebp)
 8049870:	74 4e                	je     80498c0 <main+0x360>
 8049872:	66 90                	xchg   %ax,%ax
 8049874:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049878:	89 3c 24             	mov    %edi,(%esp)
 804987b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804987f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049883:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049887:	b9 ea 30 00 00       	mov    $0x30ea,%ecx
 804988c:	e8 b7 b0 00 00       	call   8054948 <__afl_maybe_log>
 8049891:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049895:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049899:	8b 54 24 04          	mov    0x4(%esp),%edx
 804989d:	8b 3c 24             	mov    (%esp),%edi
 80498a0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 474);
 80498a4:	83 ec 08             	sub    $0x8,%esp
 80498a7:	88 45 b4             	mov    %al,-0x4c(%ebp)
 80498aa:	68 da 01 00 00       	push   $0x1da
 80498af:	68 1b 5b 06 08       	push   $0x8065b1b
 80498b4:	e8 c7 77 00 00       	call   8051080 <report_label_coverage>
 80498b9:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
 80498bd:	83 c4 10             	add    $0x10,%esp
}
// MCC Label 475
if(!(optc == -1) && ( !(posixly_correct) && nfiles != 0 ) ) {
 80498c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80498c4:	89 3c 24             	mov    %edi,(%esp)
 80498c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80498cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80498cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80498d3:	b9 82 29 00 00       	mov    $0x2982,%ecx
 80498d8:	e8 6b b0 00 00       	call   8054948 <__afl_maybe_log>
 80498dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80498e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80498e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80498e9:	8b 3c 24             	mov    (%esp),%edi
 80498ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80498f0:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 80498f4:	38 55 c0             	cmp    %dl,-0x40(%ebp)
 80498f7:	0f 82 c3 0b 00 00    	jb     804a4c0 <main+0xf60>
 80498fd:	8d 76 00             	lea    0x0(%esi),%esi
 8049900:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049904:	89 3c 24             	mov    %edi,(%esp)
 8049907:	89 54 24 04          	mov    %edx,0x4(%esp)
 804990b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804990f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049913:	b9 6c a0 00 00       	mov    $0xa06c,%ecx
 8049918:	e8 2b b0 00 00       	call   8054948 <__afl_maybe_log>
 804991d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049921:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049925:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049929:	8b 3c 24             	mov    (%esp),%edi
 804992c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 475);
}
// MCC Label 476
if(!(optc == -1) && ( !(posixly_correct) && !(nfiles != 0) ) ) {
 8049930:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049934:	89 3c 24             	mov    %edi,(%esp)
 8049937:	89 54 24 04          	mov    %edx,0x4(%esp)
 804993b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804993f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049943:	b9 c6 63 00 00       	mov    $0x63c6,%ecx
 8049948:	e8 fb af 00 00       	call   8054948 <__afl_maybe_log>
 804994d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049951:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049955:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049959:	8b 3c 24             	mov    (%esp),%edi
 804995c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049960:	38 45 c0             	cmp    %al,-0x40(%ebp)
 8049963:	0f 82 37 0b 00 00    	jb     804a4a0 <main+0xf40>
 8049969:	8d 76 00             	lea    0x0(%esi),%esi
 804996c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049970:	89 3c 24             	mov    %edi,(%esp)
 8049973:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049977:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804997b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804997f:	b9 c8 5b 00 00       	mov    $0x5bc8,%ecx
 8049984:	e8 bf af 00 00       	call   8054948 <__afl_maybe_log>
 8049989:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804998d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049991:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049995:	8b 3c 24             	mov    (%esp),%edi
 8049998:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 476);
}
if (optc == -1 || (posixly_correct && nfiles != 0))
 804999c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80499a0:	89 3c 24             	mov    %edi,(%esp)
 80499a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80499a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80499ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80499af:	b9 4d 29 00 00       	mov    $0x294d,%ecx
 80499b4:	e8 8f af 00 00       	call   8054948 <__afl_maybe_log>
 80499b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80499bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80499c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80499c5:	8b 3c 24             	mov    (%esp),%edi
 80499c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80499cc:	80 7d bc 00          	cmpb   $0x0,-0x44(%ebp)
 80499d0:	0f 84 92 08 00 00    	je     804a268 <main+0xd08>
 80499d6:	66 90                	xchg   %ax,%ax
 80499d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80499dc:	89 3c 24             	mov    %edi,(%esp)
 80499df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80499e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80499e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80499eb:	b9 f8 64 00 00       	mov    $0x64f8,%ecx
 80499f0:	e8 53 af 00 00       	call   8054948 <__afl_maybe_log>
 80499f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80499f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80499fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049a01:	8b 3c 24             	mov    (%esp),%edi
 8049a04:	8d 64 24 10          	lea    0x10(%esp),%esp
    if (((optc = temp_1) == temp_2))
      label_3:
        {
            
// ABS Label 477
if(argc < 0)  {
 8049a08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049a0c:	89 3c 24             	mov    %edi,(%esp)
 8049a0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049a13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049a17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049a1b:	b9 ec 83 00 00       	mov    $0x83ec,%ecx
 8049a20:	e8 23 af 00 00       	call   8054948 <__afl_maybe_log>
 8049a25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049a29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049a2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049a31:	8b 3c 24             	mov    (%esp),%edi
 8049a34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049a38:	85 ff                	test   %edi,%edi
 8049a3a:	0f 88 e8 06 00 00    	js     804a128 <main+0xbc8>
 8049a40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049a44:	89 3c 24             	mov    %edi,(%esp)
 8049a47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049a4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049a4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049a53:	b9 32 0d 00 00       	mov    $0xd32,%ecx
 8049a58:	e8 eb ae 00 00       	call   8054948 <__afl_maybe_log>
 8049a5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049a61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049a65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049a69:	8b 3c 24             	mov    (%esp),%edi
 8049a6c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 477);
}
// ABS Label 478
if(optind < 0)  {
 8049a70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049a74:	89 3c 24             	mov    %edi,(%esp)
 8049a77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049a7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049a7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049a83:	b9 01 2f 00 00       	mov    $0x2f01,%ecx
 8049a88:	e8 bb ae 00 00       	call   8054948 <__afl_maybe_log>
 8049a8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049a91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049a95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049a99:	8b 3c 24             	mov    (%esp),%edi
 8049a9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049aa0:	a1 cc a2 06 08       	mov    0x806a2cc,%eax
 8049aa5:	85 c0                	test   %eax,%eax
 8049aa7:	0f 88 03 07 00 00    	js     804a1b0 <main+0xc50>
 8049aad:	8d 76 00             	lea    0x0(%esi),%esi
 8049ab0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ab4:	89 3c 24             	mov    %edi,(%esp)
 8049ab7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049abb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049abf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049ac3:	b9 c6 96 00 00       	mov    $0x96c6,%ecx
 8049ac8:	e8 7b ae 00 00       	call   8054948 <__afl_maybe_log>
 8049acd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ad1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ad5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049ad9:	8b 3c 24             	mov    (%esp),%edi
 8049adc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 478);
}

// ROR Label 479
if((argc < optind) != (argc <= optind))  {
 8049ae0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ae4:	89 3c 24             	mov    %edi,(%esp)
 8049ae7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049aeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049aef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049af3:	b9 60 e9 00 00       	mov    $0xe960,%ecx
 8049af8:	e8 4b ae 00 00       	call   8054948 <__afl_maybe_log>
 8049afd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049b01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049b05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049b09:	8b 3c 24             	mov    (%esp),%edi
 8049b0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049b10:	39 c7                	cmp    %eax,%edi
 8049b12:	0f 9e c2             	setle  %dl
 8049b15:	0f 9c c1             	setl   %cl
 8049b18:	38 d1                	cmp    %dl,%cl
 8049b1a:	74 4f                	je     8049b6b <main+0x60b>
 8049b1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049b20:	89 3c 24             	mov    %edi,(%esp)
 8049b23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049b27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049b2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049b2f:	b9 e2 53 00 00       	mov    $0x53e2,%ecx
 8049b34:	e8 0f ae 00 00       	call   8054948 <__afl_maybe_log>
 8049b39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049b3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049b41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049b45:	8b 3c 24             	mov    (%esp),%edi
 8049b48:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 479);
 8049b4c:	83 ec 08             	sub    $0x8,%esp
 8049b4f:	68 df 01 00 00       	push   $0x1df
 8049b54:	68 17 5b 06 08       	push   $0x8065b17
 8049b59:	e8 22 75 00 00       	call   8051080 <report_label_coverage>
 8049b5e:	a1 cc a2 06 08       	mov    0x806a2cc,%eax
 8049b63:	83 c4 10             	add    $0x10,%esp
 8049b66:	39 c7                	cmp    %eax,%edi
 8049b68:	0f 9e c2             	setle  %dl
 8049b6b:	90                   	nop
}
// ROR Label 480
if((argc > optind) != (argc <= optind))  {
 8049b6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049b70:	89 3c 24             	mov    %edi,(%esp)
 8049b73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049b77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049b7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049b7f:	b9 d3 e7 00 00       	mov    $0xe7d3,%ecx
 8049b84:	e8 bf ad 00 00       	call   8054948 <__afl_maybe_log>
 8049b89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049b8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049b91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049b95:	8b 3c 24             	mov    (%esp),%edi
 8049b98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049b9c:	39 c7                	cmp    %eax,%edi
 8049b9e:	0f 9f c1             	setg   %cl
 8049ba1:	38 d1                	cmp    %dl,%cl
 8049ba3:	74 52                	je     8049bf7 <main+0x697>
 8049ba5:	8d 76 00             	lea    0x0(%esi),%esi
 8049ba8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049bac:	89 3c 24             	mov    %edi,(%esp)
 8049baf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049bb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049bb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049bbb:	b9 f8 22 00 00       	mov    $0x22f8,%ecx
 8049bc0:	e8 83 ad 00 00       	call   8054948 <__afl_maybe_log>
 8049bc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049bc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049bcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049bd1:	8b 3c 24             	mov    (%esp),%edi
 8049bd4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 480);
 8049bd8:	83 ec 08             	sub    $0x8,%esp
 8049bdb:	68 e0 01 00 00       	push   $0x1e0
 8049be0:	68 17 5b 06 08       	push   $0x8065b17
 8049be5:	e8 96 74 00 00       	call   8051080 <report_label_coverage>
 8049bea:	a1 cc a2 06 08       	mov    0x806a2cc,%eax
 8049bef:	83 c4 10             	add    $0x10,%esp
 8049bf2:	39 f8                	cmp    %edi,%eax
 8049bf4:	0f 9d c2             	setge  %dl
 8049bf7:	90                   	nop
}
// ROR Label 481
if((argc >= optind) != (argc <= optind))  {
 8049bf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049bfc:	89 3c 24             	mov    %edi,(%esp)
 8049bff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049c03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049c07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049c0b:	b9 c9 8c 00 00       	mov    $0x8cc9,%ecx
 8049c10:	e8 33 ad 00 00       	call   8054948 <__afl_maybe_log>
 8049c15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049c19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049c1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049c21:	8b 3c 24             	mov    (%esp),%edi
 8049c24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049c28:	39 f8                	cmp    %edi,%eax
 8049c2a:	0f 9e c1             	setle  %cl
 8049c2d:	38 d1                	cmp    %dl,%cl
 8049c2f:	74 4d                	je     8049c7e <main+0x71e>
 8049c31:	8d 76 00             	lea    0x0(%esi),%esi
 8049c34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049c38:	89 3c 24             	mov    %edi,(%esp)
 8049c3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049c3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049c43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049c47:	b9 e3 ae 00 00       	mov    $0xaee3,%ecx
 8049c4c:	e8 f7 ac 00 00       	call   8054948 <__afl_maybe_log>
 8049c51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049c55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049c59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049c5d:	8b 3c 24             	mov    (%esp),%edi
 8049c60:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 481);
 8049c64:	83 ec 08             	sub    $0x8,%esp
 8049c67:	68 e1 01 00 00       	push   $0x1e1
 8049c6c:	68 17 5b 06 08       	push   $0x8065b17
 8049c71:	e8 0a 74 00 00       	call   8051080 <report_label_coverage>
 8049c76:	a1 cc a2 06 08       	mov    0x806a2cc,%eax
 8049c7b:	83 c4 10             	add    $0x10,%esp
 8049c7e:	66 90                	xchg   %ax,%ax
}
if (argc <= optind)
 8049c80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049c84:	89 3c 24             	mov    %edi,(%esp)
 8049c87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049c8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049c8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049c93:	b9 98 94 00 00       	mov    $0x9498,%ecx
 8049c98:	e8 ab ac 00 00       	call   8054948 <__afl_maybe_log>
 8049c9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ca1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ca5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049ca9:	8b 3c 24             	mov    (%esp),%edi
 8049cac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049cb0:	39 c7                	cmp    %eax,%edi
 8049cb2:	0f 8e e3 0d 00 00    	jle    804aa9b <main+0x153b>
 8049cb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049cbc:	89 3c 24             	mov    %edi,(%esp)
 8049cbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049cc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049cc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049ccb:	b9 f3 f9 00 00       	mov    $0xf9f3,%ecx
 8049cd0:	e8 73 ac 00 00       	call   8054948 <__afl_maybe_log>
 8049cd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049cd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049cdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049ce1:	8b 3c 24             	mov    (%esp),%edi
 8049ce4:	8d 64 24 10          	lea    0x10(%esp),%esp
if(nfiles < 0)  {
	report_label_coverage("ABS", 482);
}

// ROR Label 483
if((nfiles != 2) != (nfiles == 2))  {
 8049ce8:	83 fb 02             	cmp    $0x2,%ebx
 8049ceb:	0f 94 c2             	sete   %dl
 8049cee:	0f 95 c1             	setne  %cl
 8049cf1:	38 d1                	cmp    %dl,%cl
 8049cf3:	74 54                	je     8049d49 <main+0x7e9>
 8049cf5:	8d 76 00             	lea    0x0(%esi),%esi
 8049cf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049cfc:	89 3c 24             	mov    %edi,(%esp)
 8049cff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049d03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049d07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049d0b:	b9 a3 b7 00 00       	mov    $0xb7a3,%ecx
 8049d10:	e8 33 ac 00 00       	call   8054948 <__afl_maybe_log>
 8049d15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049d19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049d1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049d21:	8b 3c 24             	mov    (%esp),%edi
 8049d24:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 483);
 8049d28:	83 ec 08             	sub    $0x8,%esp
 8049d2b:	88 55 c4             	mov    %dl,-0x3c(%ebp)
 8049d2e:	68 e3 01 00 00       	push   $0x1e3
 8049d33:	68 17 5b 06 08       	push   $0x8065b17
 8049d38:	e8 43 73 00 00       	call   8051080 <report_label_coverage>
 8049d3d:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 8049d41:	a1 cc a2 06 08       	mov    0x806a2cc,%eax
 8049d46:	83 c4 10             	add    $0x10,%esp
 8049d49:	8d 76 00             	lea    0x0(%esi),%esi
}
if (nfiles == 2) {
 8049d4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049d50:	89 3c 24             	mov    %edi,(%esp)
 8049d53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049d57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049d5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049d5f:	b9 a0 bb 00 00       	mov    $0xbba0,%ecx
 8049d64:	e8 df ab 00 00       	call   8054948 <__afl_maybe_log>
 8049d69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049d6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049d71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049d75:	8b 3c 24             	mov    (%esp),%edi
 8049d78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049d7c:	84 d2                	test   %dl,%dl
 8049d7e:	0f 85 8f 6c 00 00    	jne    8050a13 <main+0x74b3>
 8049d84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049d88:	89 3c 24             	mov    %edi,(%esp)
 8049d8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049d8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049d93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049d97:	b9 9e de 00 00       	mov    $0xde9e,%ecx
 8049d9c:	e8 a7 ab 00 00       	call   8054948 <__afl_maybe_log>
 8049da1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049da5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049da9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049dad:	8b 3c 24             	mov    (%esp),%edi
 8049db0:	8d 64 24 10          	lea    0x10(%esp),%esp
                error(0, 0, gettext("extra operand %s"), quote(argv[optind]));
                usage(1);
            }
            file[nfiles++] = argv[optind++];
 8049db4:	8b 55 b8             	mov    -0x48(%ebp),%edx
 8049db7:	8d 48 01             	lea    0x1(%eax),%ecx
 8049dba:	89 0d cc a2 06 08    	mov    %ecx,0x806a2cc
 8049dc0:	8b 04 82             	mov    (%edx,%eax,4),%eax
 8049dc3:	89 44 9d c8          	mov    %eax,-0x38(%ebp,%ebx,4)
 8049dc7:	83 c3 01             	add    $0x1,%ebx
         seen; or if pedantic and a file was seen; or if not
         obsolete.  */

      
// ABS Label 466
if(optc < 0)  {
 8049dca:	85 f6                	test   %esi,%esi
 8049dcc:	0f 89 16 f9 ff ff    	jns    80496e8 <main+0x188>
 8049dd2:	66 90                	xchg   %ax,%ax
 8049dd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049dd8:	89 3c 24             	mov    %edi,(%esp)
 8049ddb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049ddf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049de3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049de7:	b9 88 07 00 00       	mov    $0x788,%ecx
 8049dec:	e8 57 ab 00 00       	call   8054948 <__afl_maybe_log>
 8049df1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049df5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049df9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049dfd:	8b 3c 24             	mov    (%esp),%edi
 8049e00:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 466);
 8049e04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049e08:	89 3c 24             	mov    %edi,(%esp)
 8049e0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049e0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049e13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049e17:	b9 f1 59 00 00       	mov    $0x59f1,%ecx
 8049e1c:	e8 27 ab 00 00       	call   8054948 <__afl_maybe_log>
 8049e21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049e25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049e29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049e2d:	8b 3c 24             	mov    (%esp),%edi
 8049e30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049e34:	83 ec 08             	sub    $0x8,%esp
 8049e37:	68 d2 01 00 00       	push   $0x1d2
 8049e3c:	68 2d 5b 06 08       	push   $0x8065b2d
 8049e41:	e8 3a 72 00 00       	call   8051080 <report_label_coverage>
}

// COR Label 467
if((optc == -1 && (posixly_correct && nfiles != 0)) != (optc == -1 || (posixly_correct && nfiles != 0)))  {
 8049e46:	83 c4 10             	add    $0x10,%esp
 8049e49:	83 fe ff             	cmp    $0xffffffff,%esi
 8049e4c:	0f 85 96 f8 ff ff    	jne    80496e8 <main+0x188>
 8049e52:	66 90                	xchg   %ax,%ax
 8049e54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049e58:	89 3c 24             	mov    %edi,(%esp)
 8049e5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049e5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049e63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049e67:	b9 75 e0 00 00       	mov    $0xe075,%ecx
 8049e6c:	e8 d7 aa 00 00       	call   8054948 <__afl_maybe_log>
 8049e71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049e75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049e79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049e7d:	8b 3c 24             	mov    (%esp),%edi
 8049e80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049e84:	85 db                	test   %ebx,%ebx
 8049e86:	0f 95 45 c4          	setne  -0x3c(%ebp)
 8049e8a:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
 8049e8e:	22 4d c0             	and    -0x40(%ebp),%cl
 8049e91:	88 4d bc             	mov    %cl,-0x44(%ebp)
 8049e94:	0f 84 3d 03 00 00    	je     804a1d7 <main+0xc77>
 8049e9a:	66 90                	xchg   %ax,%ax
 8049e9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ea0:	89 3c 24             	mov    %edi,(%esp)
 8049ea3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049ea7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049eab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049eaf:	b9 dd d0 00 00       	mov    $0xd0dd,%ecx
 8049eb4:	e8 8f aa 00 00       	call   8054948 <__afl_maybe_log>
 8049eb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ebd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ec1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049ec5:	8b 3c 24             	mov    (%esp),%edi
 8049ec8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049ecc:	0f b6 45 bc          	movzbl -0x44(%ebp),%eax
 8049ed0:	88 45 c4             	mov    %al,-0x3c(%ebp)
 8049ed3:	e9 68 f8 ff ff       	jmp    8049740 <main+0x1e0>
 8049ed8:	90                   	nop
 8049ed9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
if((optc != -1) != (optc == -1))  {
	report_label_coverage("ROR", 468);
}

// MCC Label 469
if(optc == -1 && ( posixly_correct && nfiles != 0 ) ) {
 8049ee0:	80 7d bc 00          	cmpb   $0x0,-0x44(%ebp)
 8049ee4:	0f 85 1e 06 00 00    	jne    804a508 <main+0xfa8>
 8049eea:	66 90                	xchg   %ax,%ax
 8049eec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ef0:	89 3c 24             	mov    %edi,(%esp)
 8049ef3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049ef7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049efb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049eff:	b9 3e ba 00 00       	mov    $0xba3e,%ecx
 8049f04:	e8 3f aa 00 00       	call   8054948 <__afl_maybe_log>
 8049f09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049f0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049f11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f15:	8b 3c 24             	mov    (%esp),%edi
 8049f18:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 469);
}
// MCC Label 470
if(optc == -1 && ( posixly_correct && !(nfiles != 0) ) ) {
 8049f1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049f20:	89 3c 24             	mov    %edi,(%esp)
 8049f23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049f27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049f2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049f2f:	b9 ac b0 00 00       	mov    $0xb0ac,%ecx
 8049f34:	e8 0f aa 00 00       	call   8054948 <__afl_maybe_log>
 8049f39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049f3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049f41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f45:	8b 3c 24             	mov    (%esp),%edi
 8049f48:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049f4c:	85 db                	test   %ebx,%ebx
 8049f4e:	0f 94 c0             	sete   %al
 8049f51:	89 c6                	mov    %eax,%esi
 8049f53:	0f 85 80 00 00 00    	jne    8049fd9 <main+0xa79>
 8049f59:	8d 76 00             	lea    0x0(%esi),%esi
 8049f5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049f60:	89 3c 24             	mov    %edi,(%esp)
 8049f63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049f67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049f6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049f6f:	b9 18 29 00 00       	mov    $0x2918,%ecx
 8049f74:	e8 cf a9 00 00       	call   8054948 <__afl_maybe_log>
 8049f79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049f7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049f81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f85:	8b 3c 24             	mov    (%esp),%edi
 8049f88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049f8c:	80 7d c0 00          	cmpb   $0x0,-0x40(%ebp)
 8049f90:	74 47                	je     8049fd9 <main+0xa79>
 8049f92:	66 90                	xchg   %ax,%ax
 8049f94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049f98:	89 3c 24             	mov    %edi,(%esp)
 8049f9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049f9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049fa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049fa7:	b9 45 92 00 00       	mov    $0x9245,%ecx
 8049fac:	e8 97 a9 00 00       	call   8054948 <__afl_maybe_log>
 8049fb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049fb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049fb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049fbd:	8b 3c 24             	mov    (%esp),%edi
 8049fc0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 470);
 8049fc4:	83 ec 08             	sub    $0x8,%esp
 8049fc7:	68 d6 01 00 00       	push   $0x1d6
 8049fcc:	68 1b 5b 06 08       	push   $0x8065b1b
 8049fd1:	e8 aa 70 00 00       	call   8051080 <report_label_coverage>
 8049fd6:	83 c4 10             	add    $0x10,%esp
 8049fd9:	8d 76 00             	lea    0x0(%esi),%esi
}
// MCC Label 471
if(optc == -1 && ( !(posixly_correct) && nfiles != 0 ) ) {
 8049fdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049fe0:	89 3c 24             	mov    %edi,(%esp)
 8049fe3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049fe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049feb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049fef:	b9 94 eb 00 00       	mov    $0xeb94,%ecx
 8049ff4:	e8 4f a9 00 00       	call   8054948 <__afl_maybe_log>
 8049ff9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ffd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a001:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a005:	8b 3c 24             	mov    (%esp),%edi
 804a008:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a00c:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
 804a010:	38 4d c0             	cmp    %cl,-0x40(%ebp)
 804a013:	0f 82 2f 05 00 00    	jb     804a548 <main+0xfe8>
 804a019:	8d 76 00             	lea    0x0(%esi),%esi
 804a01c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a020:	89 3c 24             	mov    %edi,(%esp)
 804a023:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a027:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a02b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a02f:	b9 30 42 00 00       	mov    $0x4230,%ecx
 804a034:	e8 0f a9 00 00       	call   8054948 <__afl_maybe_log>
 804a039:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a03d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a041:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a045:	8b 3c 24             	mov    (%esp),%edi
 804a048:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 471);
}
// MCC Label 472
if(optc == -1 && ( !(posixly_correct) && !(nfiles != 0) ) ) {
 804a04c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a050:	89 3c 24             	mov    %edi,(%esp)
 804a053:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a057:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a05b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a05f:	b9 bf 7a 00 00       	mov    $0x7abf,%ecx
 804a064:	e8 df a8 00 00       	call   8054948 <__afl_maybe_log>
 804a069:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a06d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a071:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a075:	8b 3c 24             	mov    (%esp),%edi
 804a078:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a07c:	89 f2                	mov    %esi,%edx
 804a07e:	38 55 c0             	cmp    %dl,-0x40(%ebp)
 804a081:	0f 82 a1 04 00 00    	jb     804a528 <main+0xfc8>
 804a087:	90                   	nop
 804a088:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a08c:	89 3c 24             	mov    %edi,(%esp)
 804a08f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a093:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a097:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a09b:	b9 d3 9b 00 00       	mov    $0x9bd3,%ecx
 804a0a0:	e8 a3 a8 00 00       	call   8054948 <__afl_maybe_log>
 804a0a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a0a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a0ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a0b1:	8b 3c 24             	mov    (%esp),%edi
 804a0b4:	8d 64 24 10          	lea    0x10(%esp),%esp
    if (((optc = temp_1) == temp_2))
      label_3:
        {
            
// ABS Label 477
if(argc < 0)  {
 804a0b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a0bc:	89 3c 24             	mov    %edi,(%esp)
 804a0bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a0c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a0c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a0cb:	b9 22 49 00 00       	mov    $0x4922,%ecx
 804a0d0:	e8 73 a8 00 00       	call   8054948 <__afl_maybe_log>
 804a0d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a0d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a0dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a0e1:	8b 3c 24             	mov    (%esp),%edi
 804a0e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a0e8:	85 ff                	test   %edi,%edi
if((optc == -1 && (posixly_correct && nfiles != 0)) != (optc == -1 || (posixly_correct && nfiles != 0)))  {
	report_label_coverage("COR", 467);
}

// ROR Label 468
if((optc != -1) != (optc == -1))  {
 804a0ea:	be ff ff ff ff       	mov    $0xffffffff,%esi
    if (((optc = temp_1) == temp_2))
      label_3:
        {
            
// ABS Label 477
if(argc < 0)  {
 804a0ef:	0f 89 7b f9 ff ff    	jns    8049a70 <main+0x510>
 804a0f5:	8d 76 00             	lea    0x0(%esi),%esi
 804a0f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a0fc:	89 3c 24             	mov    %edi,(%esp)
 804a0ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a103:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a107:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a10b:	b9 bd 2e 00 00       	mov    $0x2ebd,%ecx
 804a110:	e8 33 a8 00 00       	call   8054948 <__afl_maybe_log>
 804a115:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a119:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a11d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a121:	8b 3c 24             	mov    (%esp),%edi
 804a124:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 477);
 804a128:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a12c:	89 3c 24             	mov    %edi,(%esp)
 804a12f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a133:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a137:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a13b:	b9 2d d0 00 00       	mov    $0xd02d,%ecx
 804a140:	e8 03 a8 00 00       	call   8054948 <__afl_maybe_log>
 804a145:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a149:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a14d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a151:	8b 3c 24             	mov    (%esp),%edi
 804a154:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a158:	83 ec 08             	sub    $0x8,%esp
 804a15b:	68 dd 01 00 00       	push   $0x1dd
 804a160:	68 2d 5b 06 08       	push   $0x8065b2d
 804a165:	e8 16 6f 00 00       	call   8051080 <report_label_coverage>
}
// ABS Label 478
if(optind < 0)  {
 804a16a:	a1 cc a2 06 08       	mov    0x806a2cc,%eax
      label_3:
        {
            
// ABS Label 477
if(argc < 0)  {
	report_label_coverage("ABS", 477);
 804a16f:	83 c4 10             	add    $0x10,%esp
}
// ABS Label 478
if(optind < 0)  {
 804a172:	85 c0                	test   %eax,%eax
 804a174:	0f 89 66 f9 ff ff    	jns    8049ae0 <main+0x580>
 804a17a:	66 90                	xchg   %ax,%ax
 804a17c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a180:	89 3c 24             	mov    %edi,(%esp)
 804a183:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a187:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a18b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a18f:	b9 9b 31 00 00       	mov    $0x319b,%ecx
 804a194:	e8 af a7 00 00       	call   8054948 <__afl_maybe_log>
 804a199:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a19d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a1a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a1a5:	8b 3c 24             	mov    (%esp),%edi
 804a1a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a1ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	report_label_coverage("ABS", 478);
 804a1b0:	83 ec 08             	sub    $0x8,%esp
 804a1b3:	68 de 01 00 00       	push   $0x1de
 804a1b8:	68 2d 5b 06 08       	push   $0x8065b2d
 804a1bd:	e8 be 6e 00 00       	call   8051080 <report_label_coverage>
 804a1c2:	a1 cc a2 06 08       	mov    0x806a2cc,%eax
 804a1c7:	83 c4 10             	add    $0x10,%esp
 804a1ca:	e9 11 f9 ff ff       	jmp    8049ae0 <main+0x580>
 804a1cf:	90                   	nop
if(optc < 0)  {
	report_label_coverage("ABS", 466);
}

// COR Label 467
if((optc == -1 && (posixly_correct && nfiles != 0)) != (optc == -1 || (posixly_correct && nfiles != 0)))  {
 804a1d0:	0f b6 4d bc          	movzbl -0x44(%ebp),%ecx
 804a1d4:	88 4d c4             	mov    %cl,-0x3c(%ebp)
 804a1d7:	90                   	nop
	report_label_coverage("COR", 467);
 804a1d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a1dc:	89 3c 24             	mov    %edi,(%esp)
 804a1df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a1e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a1e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a1eb:	b9 2c 13 00 00       	mov    $0x132c,%ecx
 804a1f0:	e8 53 a7 00 00       	call   8054948 <__afl_maybe_log>
 804a1f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a1f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a1fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a201:	8b 3c 24             	mov    (%esp),%edi
 804a204:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a208:	83 ec 08             	sub    $0x8,%esp
 804a20b:	68 d3 01 00 00       	push   $0x1d3
 804a210:	68 13 5b 06 08       	push   $0x8065b13
 804a215:	e8 66 6e 00 00       	call   8051080 <report_label_coverage>
}

// ROR Label 468
if((optc != -1) != (optc == -1))  {
 804a21a:	83 c4 10             	add    $0x10,%esp
 804a21d:	83 fe ff             	cmp    $0xffffffff,%esi
 804a220:	0f 94 c0             	sete   %al
 804a223:	0f 95 c2             	setne  %dl
 804a226:	38 c2                	cmp    %al,%dl
 804a228:	0f 84 2e f5 ff ff    	je     804975c <main+0x1fc>
 804a22e:	66 90                	xchg   %ax,%ax
 804a230:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a234:	89 3c 24             	mov    %edi,(%esp)
 804a237:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a23b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a23f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a243:	b9 33 17 00 00       	mov    $0x1733,%ecx
 804a248:	e8 fb a6 00 00       	call   8054948 <__afl_maybe_log>
 804a24d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a251:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a255:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a259:	8b 3c 24             	mov    (%esp),%edi
 804a25c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a260:	e9 db f4 ff ff       	jmp    8049740 <main+0x1e0>
 804a265:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("MCC", 476);
}
if (optc == -1 || (posixly_correct && nfiles != 0))
    goto label_3;
else {
    int temp_1 = getopt_long(argc, argv, "-0123456789Dcdf:is:uw:z", longopts, ((void *)0));
 804a268:	83 ec 0c             	sub    $0xc,%esp
 804a26b:	6a 00                	push   $0x0
 804a26d:	68 40 65 06 08       	push   $0x8066540
 804a272:	68 df 5b 06 08       	push   $0x8065bdf
 804a277:	ff 75 b8             	pushl  -0x48(%ebp)
 804a27a:	57                   	push   %edi
 804a27b:	e8 e0 f0 ff ff       	call   8049360 <getopt_long@plt>
    int temp_2 = -1;
    if (((optc = temp_1) == temp_2))
 804a280:	83 c4 20             	add    $0x20,%esp
 804a283:	83 f8 ff             	cmp    $0xffffffff,%eax
	report_label_coverage("MCC", 476);
}
if (optc == -1 || (posixly_correct && nfiles != 0))
    goto label_3;
else {
    int temp_1 = getopt_long(argc, argv, "-0123456789Dcdf:is:uw:z", longopts, ((void *)0));
 804a286:	89 c6                	mov    %eax,%esi
    int temp_2 = -1;
    if (((optc = temp_1) == temp_2))
 804a288:	0f 84 7a f7 ff ff    	je     8049a08 <main+0x4a8>
 804a28e:	66 90                	xchg   %ax,%ax
 804a290:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a294:	89 3c 24             	mov    %edi,(%esp)
 804a297:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a29b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a29f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a2a3:	b9 71 d1 00 00       	mov    $0xd171,%ecx
 804a2a8:	e8 9b a6 00 00       	call   8054948 <__afl_maybe_log>
 804a2ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a2b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a2b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a2b9:	8b 3c 24             	mov    (%esp),%edi
 804a2bc:	8d 64 24 10          	lea    0x10(%esp),%esp
                usage(1);
            }
            file[nfiles++] = argv[optind++];
        }
    else
        switch (optc) {
 804a2c0:	83 f8 64             	cmp    $0x64,%eax
 804a2c3:	0f 84 f7 0f 00 00    	je     804b2c0 <main+0x1d60>
 804a2c9:	8d 76 00             	lea    0x0(%esi),%esi
 804a2cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a2d0:	89 3c 24             	mov    %edi,(%esp)
 804a2d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a2d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a2db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a2df:	b9 af 3f 00 00       	mov    $0x3faf,%ecx
 804a2e4:	e8 5f a6 00 00       	call   8054948 <__afl_maybe_log>
 804a2e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a2ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a2f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a2f5:	8b 3c 24             	mov    (%esp),%edi
 804a2f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a2fc:	0f 8e 66 02 00 00    	jle    804a568 <main+0x1008>
 804a302:	66 90                	xchg   %ax,%ax
 804a304:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a308:	89 3c 24             	mov    %edi,(%esp)
 804a30b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a30f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a313:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a317:	b9 c5 f4 00 00       	mov    $0xf4c5,%ecx
 804a31c:	e8 27 a6 00 00       	call   8054948 <__afl_maybe_log>
 804a321:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a325:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a329:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a32d:	8b 3c 24             	mov    (%esp),%edi
 804a330:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a334:	83 f8 75             	cmp    $0x75,%eax
 804a337:	0f 84 43 0f 00 00    	je     804b280 <main+0x1d20>
 804a33d:	8d 76 00             	lea    0x0(%esi),%esi
 804a340:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a344:	89 3c 24             	mov    %edi,(%esp)
 804a347:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a34b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a34f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a353:	b9 03 d3 00 00       	mov    $0xd303,%ecx
 804a358:	e8 eb a5 00 00       	call   8054948 <__afl_maybe_log>
 804a35d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a361:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a365:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a369:	8b 3c 24             	mov    (%esp),%edi
 804a36c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a370:	0f 8f 5a 03 00 00    	jg     804a6d0 <main+0x1170>
 804a376:	66 90                	xchg   %ax,%ax
 804a378:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a37c:	89 3c 24             	mov    %edi,(%esp)
 804a37f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a383:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a387:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a38b:	b9 0f 8a 00 00       	mov    $0x8a0f,%ecx
 804a390:	e8 b3 a5 00 00       	call   8054948 <__afl_maybe_log>
 804a395:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a399:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a39d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a3a1:	8b 3c 24             	mov    (%esp),%edi
 804a3a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a3a8:	83 f8 69             	cmp    $0x69,%eax
 804a3ab:	0f 84 a0 05 00 00    	je     804a951 <main+0x13f1>
 804a3b1:	8d 76 00             	lea    0x0(%esi),%esi
 804a3b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a3b8:	89 3c 24             	mov    %edi,(%esp)
 804a3bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a3bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a3c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a3c7:	b9 43 ca 00 00       	mov    $0xca43,%ecx
 804a3cc:	e8 77 a5 00 00       	call   8054948 <__afl_maybe_log>
 804a3d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a3d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a3d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a3dd:	8b 3c 24             	mov    (%esp),%edi
 804a3e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a3e4:	83 f8 73             	cmp    $0x73,%eax
 804a3e7:	0f 84 19 0d 00 00    	je     804b106 <main+0x1ba6>
 804a3ed:	8d 76 00             	lea    0x0(%esi),%esi
 804a3f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a3f4:	89 3c 24             	mov    %edi,(%esp)
 804a3f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a3fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a3ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a403:	b9 e9 33 00 00       	mov    $0x33e9,%ecx
 804a408:	e8 3b a5 00 00       	call   8054948 <__afl_maybe_log>
 804a40d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a411:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a415:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a419:	8b 3c 24             	mov    (%esp),%edi
 804a41c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a420:	83 f8 66             	cmp    $0x66,%eax
 804a423:	0f 84 67 05 00 00    	je     804a990 <main+0x1430>
 804a429:	8d 76 00             	lea    0x0(%esi),%esi
 804a42c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a430:	89 3c 24             	mov    %edi,(%esp)
 804a433:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a437:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a43b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a43f:	b9 c3 c7 00 00       	mov    $0xc7c3,%ecx
 804a444:	e8 ff a4 00 00       	call   8054948 <__afl_maybe_log>
 804a449:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a44d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a451:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a455:	8b 3c 24             	mov    (%esp),%edi
 804a458:	8d 64 24 10          	lea    0x10(%esp),%esp
            version_etc(stdout, "uniq", "GNU coreutils", Version, ("Richard M. Stallman"), ("David MacKenzie"), (char *)((void *)0));
            exit(0);
            break;
            ;
          default:
            usage(1);
 804a45c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a460:	89 3c 24             	mov    %edi,(%esp)
 804a463:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a467:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a46b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a46f:	b9 e5 a4 00 00       	mov    $0xa4e5,%ecx
 804a474:	e8 cf a4 00 00       	call   8054948 <__afl_maybe_log>
 804a479:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a47d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a481:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a485:	8b 3c 24             	mov    (%esp),%edi
 804a488:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a48c:	83 ec 0c             	sub    $0xc,%esp
 804a48f:	6a 01                	push   $0x1
 804a491:	e8 da 9a 00 00       	call   8053f70 <usage>
 804a496:	8d 76 00             	lea    0x0(%esi),%esi
 804a499:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
if(!(optc == -1) && ( !(posixly_correct) && nfiles != 0 ) ) {
	report_label_coverage("MCC", 475);
}
// MCC Label 476
if(!(optc == -1) && ( !(posixly_correct) && !(nfiles != 0) ) ) {
	report_label_coverage("MCC", 476);
 804a4a0:	83 ec 08             	sub    $0x8,%esp
 804a4a3:	68 dc 01 00 00       	push   $0x1dc
 804a4a8:	68 1b 5b 06 08       	push   $0x8065b1b
 804a4ad:	e8 ce 6b 00 00       	call   8051080 <report_label_coverage>
 804a4b2:	83 c4 10             	add    $0x10,%esp
 804a4b5:	e9 e2 f4 ff ff       	jmp    804999c <main+0x43c>
 804a4ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
if(!(optc == -1) && ( posixly_correct && !(nfiles != 0) ) ) {
	report_label_coverage("MCC", 474);
}
// MCC Label 475
if(!(optc == -1) && ( !(posixly_correct) && nfiles != 0 ) ) {
	report_label_coverage("MCC", 475);
 804a4c0:	83 ec 08             	sub    $0x8,%esp
 804a4c3:	88 45 c4             	mov    %al,-0x3c(%ebp)
 804a4c6:	68 db 01 00 00       	push   $0x1db
 804a4cb:	68 1b 5b 06 08       	push   $0x8065b1b
 804a4d0:	e8 ab 6b 00 00       	call   8051080 <report_label_coverage>
 804a4d5:	83 c4 10             	add    $0x10,%esp
 804a4d8:	0f b6 45 c4          	movzbl -0x3c(%ebp),%eax
 804a4dc:	e9 4f f4 ff ff       	jmp    8049930 <main+0x3d0>
 804a4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
if(optc == -1 && ( !(posixly_correct) && !(nfiles != 0) ) ) {
	report_label_coverage("MCC", 472);
}
// MCC Label 473
if(!(optc == -1) && ( posixly_correct && nfiles != 0 ) ) {
	report_label_coverage("MCC", 473);
 804a4e8:	83 ec 08             	sub    $0x8,%esp
 804a4eb:	68 d9 01 00 00       	push   $0x1d9
 804a4f0:	68 1b 5b 06 08       	push   $0x8065b1b
 804a4f5:	e8 86 6b 00 00       	call   8051080 <report_label_coverage>
 804a4fa:	83 c4 10             	add    $0x10,%esp
 804a4fd:	e9 fe f2 ff ff       	jmp    8049800 <main+0x2a0>
 804a502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
	report_label_coverage("ROR", 468);
}

// MCC Label 469
if(optc == -1 && ( posixly_correct && nfiles != 0 ) ) {
	report_label_coverage("MCC", 469);
 804a508:	83 ec 08             	sub    $0x8,%esp
 804a50b:	68 d5 01 00 00       	push   $0x1d5
 804a510:	68 1b 5b 06 08       	push   $0x8065b1b
 804a515:	e8 66 6b 00 00       	call   8051080 <report_label_coverage>
 804a51a:	83 c4 10             	add    $0x10,%esp
 804a51d:	e9 fa f9 ff ff       	jmp    8049f1c <main+0x9bc>
 804a522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
if(optc == -1 && ( !(posixly_correct) && nfiles != 0 ) ) {
	report_label_coverage("MCC", 471);
}
// MCC Label 472
if(optc == -1 && ( !(posixly_correct) && !(nfiles != 0) ) ) {
	report_label_coverage("MCC", 472);
 804a528:	83 ec 08             	sub    $0x8,%esp
 804a52b:	68 d8 01 00 00       	push   $0x1d8
 804a530:	68 1b 5b 06 08       	push   $0x8065b1b
 804a535:	e8 46 6b 00 00       	call   8051080 <report_label_coverage>
 804a53a:	83 c4 10             	add    $0x10,%esp
 804a53d:	e9 76 fb ff ff       	jmp    804a0b8 <main+0xb58>
 804a542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
if(optc == -1 && ( posixly_correct && !(nfiles != 0) ) ) {
	report_label_coverage("MCC", 470);
}
// MCC Label 471
if(optc == -1 && ( !(posixly_correct) && nfiles != 0 ) ) {
	report_label_coverage("MCC", 471);
 804a548:	83 ec 08             	sub    $0x8,%esp
 804a54b:	68 d7 01 00 00       	push   $0x1d7
 804a550:	68 1b 5b 06 08       	push   $0x8065b1b
 804a555:	e8 26 6b 00 00       	call   8051080 <report_label_coverage>
 804a55a:	83 c4 10             	add    $0x10,%esp
 804a55d:	e9 ea fa ff ff       	jmp    804a04c <main+0xaec>
 804a562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
                usage(1);
            }
            file[nfiles++] = argv[optind++];
        }
    else
        switch (optc) {
 804a568:	83 f8 39             	cmp    $0x39,%eax
 804a56b:	0f 8f 6f 04 00 00    	jg     804a9e0 <main+0x1480>
 804a571:	8d 76 00             	lea    0x0(%esi),%esi
 804a574:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a578:	89 3c 24             	mov    %edi,(%esp)
 804a57b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a57f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a583:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a587:	b9 e8 46 00 00       	mov    $0x46e8,%ecx
 804a58c:	e8 b7 a3 00 00       	call   8054948 <__afl_maybe_log>
 804a591:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a595:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a599:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a59d:	8b 3c 24             	mov    (%esp),%edi
 804a5a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a5a4:	83 f8 30             	cmp    $0x30,%eax
 804a5a7:	0f 8d d9 09 00 00    	jge    804af86 <main+0x1a26>
 804a5ad:	8d 76 00             	lea    0x0(%esi),%esi
 804a5b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a5b4:	89 3c 24             	mov    %edi,(%esp)
 804a5b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a5bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a5bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a5c3:	b9 9b 00 00 00       	mov    $0x9b,%ecx
 804a5c8:	e8 7b a3 00 00       	call   8054948 <__afl_maybe_log>
 804a5cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a5d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a5d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a5d9:	8b 3c 24             	mov    (%esp),%edi
 804a5dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a5e0:	3d 7e ff ff ff       	cmp    $0xffffff7e,%eax
 804a5e5:	0f 84 61 09 00 00    	je     804af4c <main+0x19ec>
 804a5eb:	90                   	nop
 804a5ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a5f0:	89 3c 24             	mov    %edi,(%esp)
 804a5f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a5f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a5fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a5ff:	b9 cb 59 00 00       	mov    $0x59cb,%ecx
 804a604:	e8 3f a3 00 00       	call   8054948 <__afl_maybe_log>
 804a609:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a60d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a611:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a615:	8b 3c 24             	mov    (%esp),%edi
 804a618:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a61c:	83 f8 01             	cmp    $0x1,%eax
 804a61f:	0f 84 78 01 00 00    	je     804a79d <main+0x123d>
 804a625:	8d 76 00             	lea    0x0(%esi),%esi
 804a628:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a62c:	89 3c 24             	mov    %edi,(%esp)
 804a62f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a633:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a637:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a63b:	b9 8c 2f 00 00       	mov    $0x2f8c,%ecx
 804a640:	e8 03 a3 00 00       	call   8054948 <__afl_maybe_log>
 804a645:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a649:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a64d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a651:	8b 3c 24             	mov    (%esp),%edi
 804a654:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a658:	3d 7d ff ff ff       	cmp    $0xffffff7d,%eax
 804a65d:	0f 85 f9 fd ff ff    	jne    804a45c <main+0xefc>
 804a663:	90                   	nop
 804a664:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a668:	89 3c 24             	mov    %edi,(%esp)
 804a66b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a66f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a673:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a677:	b9 4e cf 00 00       	mov    $0xcf4e,%ecx
 804a67c:	e8 c7 a2 00 00       	call   8054948 <__afl_maybe_log>
 804a681:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a685:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a689:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a68d:	8b 3c 24             	mov    (%esp),%edi
 804a690:	8d 64 24 10          	lea    0x10(%esp),%esp
          case GETOPT_HELP_CHAR:
            usage(0);
            break;
            ;
          case GETOPT_VERSION_CHAR:
            version_etc(stdout, "uniq", "GNU coreutils", Version, ("Richard M. Stallman"), ("David MacKenzie"), (char *)((void *)0));
 804a694:	53                   	push   %ebx
 804a695:	6a 00                	push   $0x0
 804a697:	68 1f 5c 06 08       	push   $0x8065c1f
 804a69c:	68 2f 5c 06 08       	push   $0x8065c2f
 804a6a1:	ff 35 48 a2 06 08    	pushl  0x806a248
 804a6a7:	68 a5 5b 06 08       	push   $0x8065ba5
 804a6ac:	68 28 5b 06 08       	push   $0x8065b28
 804a6b1:	ff 35 d8 a2 06 08    	pushl  0x806a2d8
 804a6b7:	e8 f4 4d 01 00       	call   805f4b0 <version_etc>
            exit(0);
 804a6bc:	83 c4 14             	add    $0x14,%esp
 804a6bf:	6a 00                	push   $0x0
 804a6c1:	e8 6a ec ff ff       	call   8049330 <exit@plt>
 804a6c6:	8d 76 00             	lea    0x0(%esi),%esi
 804a6c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
                usage(1);
            }
            file[nfiles++] = argv[optind++];
        }
    else
        switch (optc) {
 804a6d0:	83 f8 7a             	cmp    $0x7a,%eax
 804a6d3:	0f 84 3c 02 00 00    	je     804a915 <main+0x13b5>
 804a6d9:	8d 76 00             	lea    0x0(%esi),%esi
 804a6dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a6e0:	89 3c 24             	mov    %edi,(%esp)
 804a6e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a6e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a6eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a6ef:	b9 c9 6d 00 00       	mov    $0x6dc9,%ecx
 804a6f4:	e8 4f a2 00 00       	call   8054948 <__afl_maybe_log>
 804a6f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a6fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a701:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a705:	8b 3c 24             	mov    (%esp),%edi
 804a708:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a70c:	3d 80 00 00 00       	cmp    $0x80,%eax
 804a711:	0f 84 3a 0a 00 00    	je     804b151 <main+0x1bf1>
 804a717:	90                   	nop
 804a718:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a71c:	89 3c 24             	mov    %edi,(%esp)
 804a71f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a723:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a727:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a72b:	b9 4f a2 00 00       	mov    $0xa24f,%ecx
 804a730:	e8 13 a2 00 00       	call   8054948 <__afl_maybe_log>
 804a735:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a739:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a73d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a741:	8b 3c 24             	mov    (%esp),%edi
 804a744:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a748:	83 f8 77             	cmp    $0x77,%eax
 804a74b:	0f 85 0b fd ff ff    	jne    804a45c <main+0xefc>
 804a751:	8d 76 00             	lea    0x0(%esi),%esi
 804a754:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a758:	89 3c 24             	mov    %edi,(%esp)
 804a75b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a75f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a763:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a767:	b9 77 fc 00 00       	mov    $0xfc77,%ecx
 804a76c:	e8 d7 a1 00 00       	call   8054948 <__afl_maybe_log>
 804a771:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a775:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a779:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a77d:	8b 3c 24             	mov    (%esp),%edi
 804a780:	8d 64 24 10          	lea    0x10(%esp),%esp
          case 'u':
            output_first_repeated = 0;
            output_option_used = 1;
            break;
          case 'w':
            check_chars = size_opt(optarg, "invalid number of bytes to compare");
 804a784:	a1 e0 a2 06 08       	mov    0x806a2e0,%eax
 804a789:	ba 60 64 06 08       	mov    $0x8066460,%edx
 804a78e:	e8 fd 67 00 00       	call   8050f90 <size_opt>
 804a793:	a3 10 a3 06 08       	mov    %eax,0x806a310
            break;
 804a798:	e9 4b ef ff ff       	jmp    80496e8 <main+0x188>
 804a79d:	8d 76 00             	lea    0x0(%esi),%esi
    else
        switch (optc) {
          case 1:
            {
                unsigned long size;
                if (optarg[0] == '+' && posix2_version() < 200112 && xstrtoul(optarg, ((void *)0), 10, &size, "") == LONGINT_OK && size <= (18446744073709551615UL))
 804a7a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a7a4:	89 3c 24             	mov    %edi,(%esp)
 804a7a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a7ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a7af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a7b3:	b9 c8 23 00 00       	mov    $0x23c8,%ecx
 804a7b8:	e8 8b a1 00 00       	call   8054948 <__afl_maybe_log>
 804a7bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a7c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a7c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a7c9:	8b 3c 24             	mov    (%esp),%edi
 804a7cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a7d0:	8b 0d e0 a2 06 08    	mov    0x806a2e0,%ecx
 804a7d6:	80 39 2b             	cmpb   $0x2b,(%ecx)
 804a7d9:	0f 84 2a 31 00 00    	je     804d909 <main+0x43a9>
 804a7df:	90                   	nop
 804a7e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a7e4:	89 3c 24             	mov    %edi,(%esp)
 804a7e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a7eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a7ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a7f3:	b9 55 c8 00 00       	mov    $0xc855,%ecx
 804a7f8:	e8 4b a1 00 00       	call   8054948 <__afl_maybe_log>
 804a7fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a801:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a805:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a809:	8b 3c 24             	mov    (%esp),%edi
 804a80c:	8d 64 24 10          	lea    0x10(%esp),%esp
if(nfiles < 0)  {
	report_label_coverage("ABS", 484);
}

// ROR Label 485
if((nfiles != 2) != (nfiles == 2))  {
 804a810:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a814:	89 3c 24             	mov    %edi,(%esp)
 804a817:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a81b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a81f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a823:	b9 66 d7 00 00       	mov    $0xd766,%ecx
 804a828:	e8 1b a1 00 00       	call   8054948 <__afl_maybe_log>
 804a82d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a831:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a835:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a839:	8b 3c 24             	mov    (%esp),%edi
 804a83c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a840:	83 fb 02             	cmp    $0x2,%ebx
 804a843:	0f 94 c1             	sete   %cl
 804a846:	0f 95 c2             	setne  %dl
 804a849:	38 ca                	cmp    %cl,%dl
 804a84b:	74 4e                	je     804a89b <main+0x133b>
 804a84d:	8d 76 00             	lea    0x0(%esi),%esi
 804a850:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a854:	89 3c 24             	mov    %edi,(%esp)
 804a857:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a85b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a85f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a863:	b9 de a4 00 00       	mov    $0xa4de,%ecx
 804a868:	e8 db a0 00 00       	call   8054948 <__afl_maybe_log>
 804a86d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a871:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a875:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a879:	8b 3c 24             	mov    (%esp),%edi
 804a87c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 485);
 804a880:	50                   	push   %eax
 804a881:	50                   	push   %eax
 804a882:	68 e5 01 00 00       	push   $0x1e5
 804a887:	68 17 5b 06 08       	push   $0x8065b17
 804a88c:	88 4d c4             	mov    %cl,-0x3c(%ebp)
 804a88f:	e8 ec 67 00 00       	call   8051080 <report_label_coverage>
 804a894:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
 804a898:	83 c4 10             	add    $0x10,%esp
 804a89b:	90                   	nop
}
if (nfiles == 2) {
 804a89c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a8a0:	89 3c 24             	mov    %edi,(%esp)
 804a8a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a8a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a8ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a8af:	b9 31 3c 00 00       	mov    $0x3c31,%ecx
 804a8b4:	e8 8f a0 00 00       	call   8054948 <__afl_maybe_log>
 804a8b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a8bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a8c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a8c5:	8b 3c 24             	mov    (%esp),%edi
 804a8c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a8cc:	84 c9                	test   %cl,%cl
 804a8ce:	0f 85 3d 65 00 00    	jne    8050e11 <main+0x78b1>
 804a8d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a8d8:	89 3c 24             	mov    %edi,(%esp)
 804a8db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a8df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a8e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a8e7:	b9 43 d2 00 00       	mov    $0xd243,%ecx
 804a8ec:	e8 57 a0 00 00       	call   8054948 <__afl_maybe_log>
 804a8f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a8f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a8f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a8fd:	8b 3c 24             	mov    (%esp),%edi
 804a900:	8d 64 24 10          	lea    0x10(%esp),%esp
                    error(0, 0, gettext("extra operand %s"), quote(optarg));
                    usage(1);
                } else
                    file[nfiles++] = optarg;}
 804a904:	a1 e0 a2 06 08       	mov    0x806a2e0,%eax
 804a909:	89 44 9d c8          	mov    %eax,-0x38(%ebp,%ebx,4)
 804a90d:	83 c3 01             	add    $0x1,%ebx
;
            }
            break;
 804a910:	e9 d3 ed ff ff       	jmp    80496e8 <main+0x188>
 804a915:	8d 76 00             	lea    0x0(%esi),%esi
            break;
          case 'w':
            check_chars = size_opt(optarg, "invalid number of bytes to compare");
            break;
          case 'z':
            delimiter = '\x00';
 804a918:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a91c:	89 3c 24             	mov    %edi,(%esp)
 804a91f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a923:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a927:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a92b:	b9 95 ea 00 00       	mov    $0xea95,%ecx
 804a930:	e8 13 a0 00 00       	call   8054948 <__afl_maybe_log>
 804a935:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a939:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a93d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a941:	8b 3c 24             	mov    (%esp),%edi
 804a944:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a948:	c6 45 9e 00          	movb   $0x0,-0x62(%ebp)
 804a94c:	e9 97 ed ff ff       	jmp    80496e8 <main+0x188>
 804a951:	8d 76 00             	lea    0x0(%esi),%esi
          case 'f':
            skip_field_option_type = SFO_NEW;
            skip_fields = size_opt(optarg, "invalid number of fields to skip");
            break;
          case 'i':
            ignore_case = 1;
 804a954:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a958:	89 3c 24             	mov    %edi,(%esp)
 804a95b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a95f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a963:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a967:	b9 ac 83 00 00       	mov    $0x83ac,%ecx
 804a96c:	e8 d7 9f 00 00       	call   8054948 <__afl_maybe_log>
 804a971:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a975:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a979:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a97d:	8b 3c 24             	mov    (%esp),%edi
 804a980:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a984:	c6 05 08 a3 06 08 01 	movb   $0x1,0x806a308
            break;
 804a98b:	e9 58 ed ff ff       	jmp    80496e8 <main+0x188>
            else
                grouping = ((grouping_method_map)[__xargmatch_internal("--group", optarg, grouping_method_string, (const char *)(grouping_method_map), sizeof *(grouping_method_map), argmatch_die)]);
            break;
          case 'f':
            skip_field_option_type = SFO_NEW;
            skip_fields = size_opt(optarg, "invalid number of fields to skip");
 804a990:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a994:	89 3c 24             	mov    %edi,(%esp)
 804a997:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a99b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a99f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a9a3:	b9 40 a1 00 00       	mov    $0xa140,%ecx
 804a9a8:	e8 9b 9f 00 00       	call   8054948 <__afl_maybe_log>
 804a9ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a9b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a9b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a9b9:	8b 3c 24             	mov    (%esp),%edi
 804a9bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a9c0:	a1 e0 a2 06 08       	mov    0x806a2e0,%eax
 804a9c5:	ba 1c 64 06 08       	mov    $0x806641c,%edx
 804a9ca:	e8 c1 65 00 00       	call   8050f90 <size_opt>
                grouping = GM_SEPARATE;
            else
                grouping = ((grouping_method_map)[__xargmatch_internal("--group", optarg, grouping_method_string, (const char *)(grouping_method_map), sizeof *(grouping_method_map), argmatch_die)]);
            break;
          case 'f':
            skip_field_option_type = SFO_NEW;
 804a9cf:	c7 45 ac 02 00 00 00 	movl   $0x2,-0x54(%ebp)
            skip_fields = size_opt(optarg, "invalid number of fields to skip");
 804a9d6:	a3 18 a3 06 08       	mov    %eax,0x806a318
            break;
 804a9db:	e9 08 ed ff ff       	jmp    80496e8 <main+0x188>
                usage(1);
            }
            file[nfiles++] = argv[optind++];
        }
    else
        switch (optc) {
 804a9e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a9e4:	89 3c 24             	mov    %edi,(%esp)
 804a9e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a9eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a9ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a9f3:	b9 c5 13 00 00       	mov    $0x13c5,%ecx
 804a9f8:	e8 4b 9f 00 00       	call   8054948 <__afl_maybe_log>
 804a9fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aa01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aa05:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aa09:	8b 3c 24             	mov    (%esp),%edi
 804aa0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aa10:	83 f8 44             	cmp    $0x44,%eax
 804aa13:	0f 84 e7 08 00 00    	je     804b300 <main+0x1da0>
 804aa19:	8d 76 00             	lea    0x0(%esi),%esi
 804aa1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aa20:	89 3c 24             	mov    %edi,(%esp)
 804aa23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aa27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aa2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aa2f:	b9 53 11 00 00       	mov    $0x1153,%ecx
 804aa34:	e8 0f 9f 00 00       	call   8054948 <__afl_maybe_log>
 804aa39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aa3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aa41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aa45:	8b 3c 24             	mov    (%esp),%edi
 804aa48:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aa4c:	83 f8 63             	cmp    $0x63,%eax
 804aa4f:	0f 85 07 fa ff ff    	jne    804a45c <main+0xefc>
 804aa55:	8d 76 00             	lea    0x0(%esi),%esi
 804aa58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aa5c:	89 3c 24             	mov    %edi,(%esp)
 804aa5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aa63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aa67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aa6b:	b9 2e 00 00 00       	mov    $0x2e,%ecx
 804aa70:	e8 d3 9e 00 00       	call   8054948 <__afl_maybe_log>
 804aa75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aa79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aa7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aa81:	8b 3c 24             	mov    (%esp),%edi
 804aa84:	8d 64 24 10          	lea    0x10(%esp),%esp

            skip_field_option_type = SFO_OBSOLETE;
            }
            break;
          case 'c':
            countmode = count_occurrences;
 804aa88:	c7 05 0c a3 06 08 00 	movl   $0x0,0x806a30c
 804aa8f:	00 00 00 
            output_option_used = 1;
 804aa92:	c6 45 b0 01          	movb   $0x1,-0x50(%ebp)
            break;
 804aa96:	e9 4d ec ff ff       	jmp    80496e8 <main+0x188>
 804aa9b:	90                   	nop
     avoid the need to specify a grouping method to --all-repeated.
     It was thought best to avoid deprecating those parameters though
     and keep --group separate to other options.  */
  
// COR Label 491
if((grouping != GM_NONE || output_option_used) != (grouping != GM_NONE && output_option_used))  {
 804aa9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aaa0:	89 3c 24             	mov    %edi,(%esp)
 804aaa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aaa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aaab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aaaf:	b9 7a 53 00 00       	mov    $0x537a,%ecx
 804aab4:	e8 8f 9e 00 00       	call   8054948 <__afl_maybe_log>
 804aab9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aabd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aac1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aac5:	8b 3c 24             	mov    (%esp),%edi
 804aac8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aacc:	8b 35 00 a3 06 08    	mov    0x806a300,%esi
 804aad2:	85 f6                	test   %esi,%esi
 804aad4:	0f 85 62 09 00 00    	jne    804b43c <main+0x1edc>
 804aada:	66 90                	xchg   %ax,%ax
 804aadc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aae0:	89 3c 24             	mov    %edi,(%esp)
 804aae3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aae7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aaeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aaef:	b9 ea c4 00 00       	mov    $0xc4ea,%ecx
 804aaf4:	e8 4f 9e 00 00       	call   8054948 <__afl_maybe_log>
 804aaf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aafd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ab01:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ab05:	8b 3c 24             	mov    (%esp),%edi
 804ab08:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ab0c:	0f b6 55 b0          	movzbl -0x50(%ebp),%edx
 804ab10:	31 c9                	xor    %ecx,%ecx
 804ab12:	66 90                	xchg   %ax,%ax
 804ab14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ab18:	89 3c 24             	mov    %edi,(%esp)
 804ab1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ab1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ab23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ab27:	b9 d0 65 00 00       	mov    $0x65d0,%ecx
 804ab2c:	e8 17 9e 00 00       	call   8054948 <__afl_maybe_log>
 804ab31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ab35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ab39:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ab3d:	8b 3c 24             	mov    (%esp),%edi
 804ab40:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ab44:	39 d1                	cmp    %edx,%ecx
 804ab46:	0f 85 7c 62 00 00    	jne    8050dc8 <main+0x7868>
 804ab4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ab50:	89 3c 24             	mov    %edi,(%esp)
 804ab53:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ab57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ab5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ab5f:	b9 5c 62 00 00       	mov    $0x625c,%ecx
 804ab64:	e8 df 9d 00 00       	call   8054948 <__afl_maybe_log>
 804ab69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ab6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ab71:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ab75:	8b 3c 24             	mov    (%esp),%edi
 804ab78:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 491);
}

// ROR Label 492
if((grouping == GM_NONE) != (grouping != GM_NONE))  {
 804ab7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ab80:	89 3c 24             	mov    %edi,(%esp)
 804ab83:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ab87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ab8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ab8f:	b9 c1 f1 00 00       	mov    $0xf1c1,%ecx
 804ab94:	e8 af 9d 00 00       	call   8054948 <__afl_maybe_log>
 804ab99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ab9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aba1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aba5:	8b 3c 24             	mov    (%esp),%edi
 804aba8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804abac:	85 f6                	test   %esi,%esi
	report_label_coverage("ROR", 492);
 804abae:	51                   	push   %ecx
 804abaf:	51                   	push   %ecx
 804abb0:	68 ec 01 00 00       	push   $0x1ec
 804abb5:	68 17 5b 06 08       	push   $0x8065b17
if((grouping != GM_NONE || output_option_used) != (grouping != GM_NONE && output_option_used))  {
	report_label_coverage("COR", 491);
}

// ROR Label 492
if((grouping == GM_NONE) != (grouping != GM_NONE))  {
 804abba:	0f 94 c0             	sete   %al
 804abbd:	0f 95 c3             	setne  %bl
 804abc0:	89 c7                	mov    %eax,%edi
	report_label_coverage("ROR", 492);
 804abc2:	e8 b9 64 00 00       	call   8051080 <report_label_coverage>
}

// MCC Label 493
if(grouping != GM_NONE && output_option_used ) {
 804abc7:	83 c4 10             	add    $0x10,%esp
 804abca:	84 db                	test   %bl,%bl
 804abcc:	0f 85 e0 09 00 00    	jne    804b5b2 <main+0x2052>
 804abd2:	66 90                	xchg   %ax,%ax
 804abd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804abd8:	89 3c 24             	mov    %edi,(%esp)
 804abdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804abdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804abe3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804abe7:	b9 24 75 00 00       	mov    $0x7524,%ecx
 804abec:	e8 57 9d 00 00       	call   8054948 <__afl_maybe_log>
 804abf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804abf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804abf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804abfd:	8b 3c 24             	mov    (%esp),%edi
 804ac00:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 494
if(grouping != GM_NONE && !(output_option_used) ) {
	report_label_coverage("MCC", 494);
}
// MCC Label 495
if(!(grouping != GM_NONE) && output_option_used ) {
 804ac04:	80 7d b0 00          	cmpb   $0x0,-0x50(%ebp)
 804ac08:	0f 85 27 2b 00 00    	jne    804d735 <main+0x41d5>
 804ac0e:	66 90                	xchg   %ax,%ax
 804ac10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ac14:	89 3c 24             	mov    %edi,(%esp)
 804ac17:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ac1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ac1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ac23:	b9 eb 97 00 00       	mov    $0x97eb,%ecx
 804ac28:	e8 1b 9d 00 00       	call   8054948 <__afl_maybe_log>
 804ac2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ac31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ac35:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ac39:	8b 3c 24             	mov    (%esp),%edi
 804ac3c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 495);
}
// MCC Label 496
if(!(grouping != GM_NONE) && !(output_option_used) ) {
	report_label_coverage("MCC", 496);
 804ac40:	50                   	push   %eax
 804ac41:	50                   	push   %eax
 804ac42:	68 f0 01 00 00       	push   $0x1f0
 804ac47:	68 1b 5b 06 08       	push   $0x8065b1b
 804ac4c:	e8 2f 64 00 00       	call   8051080 <report_label_coverage>
 804ac51:	83 c4 10             	add    $0x10,%esp
      usage (EXIT_FAILURE);
    }

  
// COR Label 497
if((grouping != GM_NONE || countmode != count_none) != (grouping != GM_NONE && countmode != count_none))  {
 804ac54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ac58:	89 3c 24             	mov    %edi,(%esp)
 804ac5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ac5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ac63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ac67:	b9 50 76 00 00       	mov    $0x7650,%ecx
 804ac6c:	e8 d7 9c 00 00       	call   8054948 <__afl_maybe_log>
 804ac71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ac75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ac79:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ac7d:	8b 3c 24             	mov    (%esp),%edi
 804ac80:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ac84:	83 3d 0c a3 06 08 01 	cmpl   $0x1,0x806a30c
 804ac8b:	0f 85 e3 09 00 00    	jne    804b674 <main+0x2114>
 804ac91:	8d 76 00             	lea    0x0(%esi),%esi
 804ac94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ac98:	89 3c 24             	mov    %edi,(%esp)
 804ac9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ac9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aca3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aca7:	b9 60 48 00 00       	mov    $0x4860,%ecx
 804acac:	e8 97 9c 00 00       	call   8054948 <__afl_maybe_log>
 804acb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804acb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804acb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804acbd:	8b 3c 24             	mov    (%esp),%edi
 804acc0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 497);
}

// ROR Label 498
if((grouping == GM_NONE) != (grouping != GM_NONE))  {
 804acc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804acc8:	89 3c 24             	mov    %edi,(%esp)
 804accb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804accf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804acd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804acd7:	b9 e0 10 00 00       	mov    $0x10e0,%ecx
 804acdc:	e8 67 9c 00 00       	call   8054948 <__afl_maybe_log>
 804ace1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ace5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ace9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aced:	8b 3c 24             	mov    (%esp),%edi
 804acf0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804acf4:	89 f9                	mov    %edi,%ecx
 804acf6:	38 d9                	cmp    %bl,%cl
 804acf8:	74 46                	je     804ad40 <main+0x17e0>
 804acfa:	66 90                	xchg   %ax,%ax
 804acfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ad00:	89 3c 24             	mov    %edi,(%esp)
 804ad03:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ad07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ad0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ad0f:	b9 39 e9 00 00       	mov    $0xe939,%ecx
 804ad14:	e8 2f 9c 00 00       	call   8054948 <__afl_maybe_log>
 804ad19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ad1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ad21:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ad25:	8b 3c 24             	mov    (%esp),%edi
 804ad28:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 498);
 804ad2c:	50                   	push   %eax
 804ad2d:	50                   	push   %eax
 804ad2e:	68 f2 01 00 00       	push   $0x1f2
 804ad33:	68 17 5b 06 08       	push   $0x8065b17
 804ad38:	e8 43 63 00 00       	call   8051080 <report_label_coverage>
 804ad3d:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 499
if((countmode == count_none) != (countmode != count_none))  {
 804ad40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ad44:	89 3c 24             	mov    %edi,(%esp)
 804ad47:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ad4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ad4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ad53:	b9 ef ec 00 00       	mov    $0xecef,%ecx
 804ad58:	e8 eb 9b 00 00       	call   8054948 <__afl_maybe_log>
 804ad5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ad61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ad65:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ad69:	8b 3c 24             	mov    (%esp),%edi
 804ad6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ad70:	8b 35 0c a3 06 08    	mov    0x806a30c,%esi
 804ad76:	83 fe 01             	cmp    $0x1,%esi
 804ad79:	0f 94 c2             	sete   %dl
 804ad7c:	0f 95 c0             	setne  %al
 804ad7f:	38 c2                	cmp    %al,%dl
 804ad81:	89 d7                	mov    %edx,%edi
 804ad83:	74 4e                	je     804add3 <main+0x1873>
 804ad85:	8d 76 00             	lea    0x0(%esi),%esi
 804ad88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ad8c:	89 3c 24             	mov    %edi,(%esp)
 804ad8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ad93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ad97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ad9b:	b9 53 76 00 00       	mov    $0x7653,%ecx
 804ada0:	e8 a3 9b 00 00       	call   8054948 <__afl_maybe_log>
 804ada5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ada9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804adad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804adb1:	8b 3c 24             	mov    (%esp),%edi
 804adb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804adb8:	88 45 c4             	mov    %al,-0x3c(%ebp)
	report_label_coverage("ROR", 499);
 804adbb:	50                   	push   %eax
 804adbc:	50                   	push   %eax
 804adbd:	68 f3 01 00 00       	push   $0x1f3
 804adc2:	68 17 5b 06 08       	push   $0x8065b17
 804adc7:	e8 b4 62 00 00       	call   8051080 <report_label_coverage>
 804adcc:	0f b6 45 c4          	movzbl -0x3c(%ebp),%eax
 804add0:	83 c4 10             	add    $0x10,%esp
 804add3:	90                   	nop
}

// MCC Label 500
if(grouping != GM_NONE && countmode != count_none ) {
 804add4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804add8:	89 3c 24             	mov    %edi,(%esp)
 804addb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804addf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ade3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ade7:	b9 59 bb 00 00       	mov    $0xbb59,%ecx
 804adec:	e8 57 9b 00 00       	call   8054948 <__afl_maybe_log>
 804adf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804adf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804adf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804adfd:	8b 3c 24             	mov    (%esp),%edi
 804ae00:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ae04:	84 db                	test   %bl,%bl
 804ae06:	0f 84 b1 08 00 00    	je     804b6bd <main+0x215d>
 804ae0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ae10:	89 3c 24             	mov    %edi,(%esp)
 804ae13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ae1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ae1f:	b9 f1 39 00 00       	mov    $0x39f1,%ecx
 804ae24:	e8 1f 9b 00 00       	call   8054948 <__afl_maybe_log>
 804ae29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ae2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ae31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ae35:	8b 3c 24             	mov    (%esp),%edi
 804ae38:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ae3c:	84 c0                	test   %al,%al
 804ae3e:	0f 84 7c 27 00 00    	je     804d5c0 <main+0x4060>
 804ae44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ae48:	89 3c 24             	mov    %edi,(%esp)
 804ae4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ae53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ae57:	b9 43 09 00 00       	mov    $0x943,%ecx
 804ae5c:	e8 e7 9a 00 00       	call   8054948 <__afl_maybe_log>
 804ae61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ae65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ae69:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ae6d:	8b 3c 24             	mov    (%esp),%edi
 804ae70:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 500);
 804ae74:	50                   	push   %eax
 804ae75:	50                   	push   %eax
 804ae76:	68 f4 01 00 00       	push   $0x1f4
 804ae7b:	68 1b 5b 06 08       	push   $0x8065b1b
 804ae80:	e8 fb 61 00 00       	call   8051080 <report_label_coverage>
}
// MCC Label 501
if(grouping != GM_NONE && !(countmode != count_none) ) {
 804ae85:	89 f9                	mov    %edi,%ecx
 804ae87:	83 c4 10             	add    $0x10,%esp
 804ae8a:	84 c9                	test   %cl,%cl
 804ae8c:	0f 85 ed 57 00 00    	jne    805067f <main+0x711f>
 804ae92:	66 90                	xchg   %ax,%ax
 804ae94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ae98:	89 3c 24             	mov    %edi,(%esp)
 804ae9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aea3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aea7:	b9 7e 29 00 00       	mov    $0x297e,%ecx
 804aeac:	e8 97 9a 00 00       	call   8054948 <__afl_maybe_log>
 804aeb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aeb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aeb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aebd:	8b 3c 24             	mov    (%esp),%edi
 804aec0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 503);
}
if (grouping != GM_NONE && countmode != count_none)
    {
      error (0, 0,
           _("grouping and printing repeat counts is meaningless"));
 804aec4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aec8:	89 3c 24             	mov    %edi,(%esp)
 804aecb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aecf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aed3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aed7:	b9 35 83 00 00       	mov    $0x8335,%ecx
 804aedc:	e8 67 9a 00 00       	call   8054948 <__afl_maybe_log>
 804aee1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aee5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aee9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aeed:	8b 3c 24             	mov    (%esp),%edi
 804aef0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aef4:	56                   	push   %esi
 804aef5:	6a 05                	push   $0x5
 804aef7:	68 b4 64 06 08       	push   $0x80664b4
	report_label_coverage("MCC", 509);
}
if (countmode == count_occurrences && output_later_repeated)
    {
      error (0, 0,
           _("printing all duplicated lines and repeat counts is meaningless"));
 804aefc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804af00:	89 3c 24             	mov    %edi,(%esp)
 804af03:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804af0f:	b9 8e 8f 00 00       	mov    $0x8f8e,%ecx
 804af14:	e8 2f 9a 00 00       	call   8054948 <__afl_maybe_log>
 804af19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804af1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804af21:	8b 54 24 04          	mov    0x4(%esp),%edx
 804af25:	8b 3c 24             	mov    (%esp),%edi
 804af28:	8d 64 24 10          	lea    0x10(%esp),%esp
 804af2c:	6a 00                	push   $0x0
 804af2e:	e8 dd e2 ff ff       	call   8049210 <dcgettext@plt>
if(!(countmode == count_occurrences) && !(output_later_repeated) ) {
	report_label_coverage("MCC", 509);
}
if (countmode == count_occurrences && output_later_repeated)
    {
      error (0, 0,
 804af33:	83 c4 0c             	add    $0xc,%esp
 804af36:	50                   	push   %eax
 804af37:	6a 00                	push   $0x0
 804af39:	6a 00                	push   $0x0
 804af3b:	e8 80 e3 ff ff       	call   80492c0 <error@plt>
           _("printing all duplicated lines and repeat counts is meaningless"));
      usage (EXIT_FAILURE);
 804af40:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804af47:	e8 24 90 00 00       	call   8053f70 <usage>
            break;
          case 'z':
            delimiter = '\x00';
            break;
          case GETOPT_HELP_CHAR:
            usage(0);
 804af4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804af50:	89 3c 24             	mov    %edi,(%esp)
 804af53:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804af5f:	b9 e8 18 00 00       	mov    $0x18e8,%ecx
 804af64:	e8 df 99 00 00       	call   8054948 <__afl_maybe_log>
 804af69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804af6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804af71:	8b 54 24 04          	mov    0x4(%esp),%edx
 804af75:	8b 3c 24             	mov    (%esp),%edi
 804af78:	8d 64 24 10          	lea    0x10(%esp),%esp
 804af7c:	83 ec 0c             	sub    $0xc,%esp
 804af7f:	6a 00                	push   $0x0
 804af81:	e8 ea 8f 00 00       	call   8053f70 <usage>
 804af86:	66 90                	xchg   %ax,%ax
          case '8':
          case '9':
            {
                
// ROR Label 486
if((skip_field_option_type != SFO_NEW) != (skip_field_option_type == SFO_NEW))  {
 804af88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804af8c:	89 3c 24             	mov    %edi,(%esp)
 804af8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804af9b:	b9 42 10 00 00       	mov    $0x1042,%ecx
 804afa0:	e8 a3 99 00 00       	call   8054948 <__afl_maybe_log>
 804afa5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804afa9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804afad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804afb1:	8b 3c 24             	mov    (%esp),%edi
 804afb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804afb8:	8b 4d ac             	mov    -0x54(%ebp),%ecx
 804afbb:	83 f9 02             	cmp    $0x2,%ecx
 804afbe:	0f 94 c1             	sete   %cl
 804afc1:	0f 95 c2             	setne  %dl
 804afc4:	38 ca                	cmp    %cl,%dl
 804afc6:	74 4b                	je     804b013 <main+0x1ab3>
 804afc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804afcc:	89 3c 24             	mov    %edi,(%esp)
 804afcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804afd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804afd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804afdb:	b9 76 4a 00 00       	mov    $0x4a76,%ecx
 804afe0:	e8 63 99 00 00       	call   8054948 <__afl_maybe_log>
 804afe5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804afe9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804afed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aff1:	8b 3c 24             	mov    (%esp),%edi
 804aff4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 486);
 804aff8:	50                   	push   %eax
 804aff9:	50                   	push   %eax
 804affa:	68 e6 01 00 00       	push   $0x1e6
 804afff:	68 17 5b 06 08       	push   $0x8065b17
 804b004:	88 4d c4             	mov    %cl,-0x3c(%ebp)
 804b007:	e8 74 60 00 00       	call   8051080 <report_label_coverage>
 804b00c:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
 804b010:	83 c4 10             	add    $0x10,%esp
 804b013:	90                   	nop
}
if (skip_field_option_type == SFO_NEW)
 804b014:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b018:	89 3c 24             	mov    %edi,(%esp)
 804b01b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b01f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b023:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b027:	b9 0f a8 00 00       	mov    $0xa80f,%ecx
 804b02c:	e8 17 99 00 00       	call   8054948 <__afl_maybe_log>
 804b031:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b035:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b039:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b03d:	8b 3c 24             	mov    (%esp),%edi
 804b040:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b044:	84 c9                	test   %cl,%cl
 804b046:	8d 56 d0             	lea    -0x30(%esi),%edx
 804b049:	0f 85 21 05 00 00    	jne    804b570 <main+0x2010>
 804b04f:	90                   	nop
 804b050:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b054:	89 3c 24             	mov    %edi,(%esp)
 804b057:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b05b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b05f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b063:	b9 49 7c 00 00       	mov    $0x7c49,%ecx
 804b068:	e8 db 98 00 00       	call   8054948 <__afl_maybe_log>
 804b06d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b071:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b075:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b079:	8b 3c 24             	mov    (%esp),%edi
 804b07c:	8d 64 24 10          	lea    0x10(%esp),%esp
              skip_fields = 0;

            if (!DECIMAL_DIGIT_ACCUMULATE (skip_fields, optc - '0', size_t))
 804b080:	a1 18 a3 06 08       	mov    0x806a318,%eax
 804b085:	3d 99 99 99 19       	cmp    $0x19999999,%eax
 804b08a:	0f 86 6f 04 00 00    	jbe    804b4ff <main+0x1f9f>
 804b090:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b094:	89 3c 24             	mov    %edi,(%esp)
 804b097:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b09b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b09f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b0a3:	b9 5b 09 00 00       	mov    $0x95b,%ecx
 804b0a8:	e8 9b 98 00 00       	call   8054948 <__afl_maybe_log>
 804b0ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b0b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b0b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b0b9:	8b 3c 24             	mov    (%esp),%edi
 804b0bc:	8d 64 24 10          	lea    0x10(%esp),%esp
              skip_fields = SIZE_MAX;
 804b0c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b0c4:	89 3c 24             	mov    %edi,(%esp)
 804b0c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b0cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b0cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b0d3:	b9 65 23 00 00       	mov    $0x2365,%ecx
 804b0d8:	e8 6b 98 00 00       	call   8054948 <__afl_maybe_log>
 804b0dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b0e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b0e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b0e9:	8b 3c 24             	mov    (%esp),%edi
 804b0ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b0f0:	c7 05 18 a3 06 08 ff 	movl   $0xffffffff,0x806a318
 804b0f7:	ff ff ff 

            skip_field_option_type = SFO_OBSOLETE;
 804b0fa:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
 804b101:	e9 73 e5 ff ff       	jmp    8049679 <main+0x119>
 804b106:	66 90                	xchg   %ax,%ax
            break;
          case 'i':
            ignore_case = 1;
            break;
          case 's':
            skip_chars = size_opt(optarg, "invalid number of bytes to skip");
 804b108:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b10c:	89 3c 24             	mov    %edi,(%esp)
 804b10f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b113:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b117:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b11b:	b9 b6 21 00 00       	mov    $0x21b6,%ecx
 804b120:	e8 23 98 00 00       	call   8054948 <__afl_maybe_log>
 804b125:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b129:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b12d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b131:	8b 3c 24             	mov    (%esp),%edi
 804b134:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b138:	a1 e0 a2 06 08       	mov    0x806a2e0,%eax
 804b13d:	ba 40 64 06 08       	mov    $0x8066440,%edx
 804b142:	e8 49 5e 00 00       	call   8050f90 <size_opt>
 804b147:	a3 14 a3 06 08       	mov    %eax,0x806a314
            break;
 804b14c:	e9 97 e5 ff ff       	jmp    80496e8 <main+0x188>
 804b151:	8d 76 00             	lea    0x0(%esi),%esi
if(optarg < 0)  {
	report_label_coverage("ABS", 489);
}

// ROR Label 490
if((optarg != ((void *)0)) != (optarg == ((void *)0)))  {
 804b154:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b158:	89 3c 24             	mov    %edi,(%esp)
 804b15b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b15f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b163:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b167:	b9 0d 7d 00 00       	mov    $0x7d0d,%ecx
 804b16c:	e8 d7 97 00 00       	call   8054948 <__afl_maybe_log>
 804b171:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b175:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b179:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b17d:	8b 3c 24             	mov    (%esp),%edi
 804b180:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b184:	a1 e0 a2 06 08       	mov    0x806a2e0,%eax
 804b189:	85 c0                	test   %eax,%eax
 804b18b:	0f 95 c1             	setne  %cl
 804b18e:	0f 94 c2             	sete   %dl
 804b191:	38 d1                	cmp    %dl,%cl
 804b193:	74 4c                	je     804b1e1 <main+0x1c81>
 804b195:	8d 76 00             	lea    0x0(%esi),%esi
 804b198:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b19c:	89 3c 24             	mov    %edi,(%esp)
 804b19f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b1a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b1a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b1ab:	b9 09 11 00 00       	mov    $0x1109,%ecx
 804b1b0:	e8 93 97 00 00       	call   8054948 <__afl_maybe_log>
 804b1b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b1b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b1bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b1c1:	8b 3c 24             	mov    (%esp),%edi
 804b1c4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 490);
 804b1c8:	51                   	push   %ecx
 804b1c9:	51                   	push   %ecx
 804b1ca:	68 ea 01 00 00       	push   $0x1ea
 804b1cf:	68 17 5b 06 08       	push   $0x8065b17
 804b1d4:	e8 a7 5e 00 00       	call   8051080 <report_label_coverage>
 804b1d9:	a1 e0 a2 06 08       	mov    0x806a2e0,%eax
 804b1de:	83 c4 10             	add    $0x10,%esp
 804b1e1:	8d 76 00             	lea    0x0(%esi),%esi
}
if (optarg == ((void *)0))
 804b1e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b1e8:	89 3c 24             	mov    %edi,(%esp)
 804b1eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b1ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b1f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b1f7:	b9 b0 1f 00 00       	mov    $0x1fb0,%ecx
 804b1fc:	e8 47 97 00 00       	call   8054948 <__afl_maybe_log>
 804b201:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b205:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b209:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b20d:	8b 3c 24             	mov    (%esp),%edi
 804b210:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b214:	85 c0                	test   %eax,%eax
 804b216:	0f 84 5e 02 00 00    	je     804b47a <main+0x1f1a>
 804b21c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b220:	89 3c 24             	mov    %edi,(%esp)
 804b223:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b227:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b22b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b22f:	b9 ed f3 00 00       	mov    $0xf3ed,%ecx
 804b234:	e8 0f 97 00 00       	call   8054948 <__afl_maybe_log>
 804b239:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b23d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b241:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b245:	8b 3c 24             	mov    (%esp),%edi
 804b248:	8d 64 24 10          	lea    0x10(%esp),%esp
                grouping = GM_SEPARATE;
            else
                grouping = ((grouping_method_map)[__xargmatch_internal("--group", optarg, grouping_method_string, (const char *)(grouping_method_map), sizeof *(grouping_method_map), argmatch_die)]);
 804b24c:	52                   	push   %edx
 804b24d:	52                   	push   %edx
 804b24e:	ff 35 4c a2 06 08    	pushl  0x806a24c
 804b254:	6a 04                	push   $0x4
 804b256:	68 10 66 06 08       	push   $0x8066610
 804b25b:	68 20 66 06 08       	push   $0x8066620
 804b260:	50                   	push   %eax
 804b261:	68 17 5c 06 08       	push   $0x8065c17
 804b266:	e8 25 a0 00 00       	call   8055290 <__xargmatch_internal>
 804b26b:	8b 0c 85 10 66 06 08 	mov    0x8066610(,%eax,4),%ecx
 804b272:	83 c4 20             	add    $0x20,%esp
 804b275:	89 0d 00 a3 06 08    	mov    %ecx,0x806a300
 804b27b:	e9 68 e4 ff ff       	jmp    80496e8 <main+0x188>
            break;
          case 's':
            skip_chars = size_opt(optarg, "invalid number of bytes to skip");
            break;
          case 'u':
            output_first_repeated = 0;
 804b280:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b284:	89 3c 24             	mov    %edi,(%esp)
 804b287:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b28b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b28f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b293:	b9 66 d8 00 00       	mov    $0xd866,%ecx
 804b298:	e8 ab 96 00 00       	call   8054948 <__afl_maybe_log>
 804b29d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b2a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b2a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b2a9:	8b 3c 24             	mov    (%esp),%edi
 804b2ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b2b0:	c6 05 0a a3 06 08 00 	movb   $0x0,0x806a30a
            output_option_used = 1;
 804b2b7:	c6 45 b0 01          	movb   $0x1,-0x50(%ebp)
            break;
 804b2bb:	e9 28 e4 ff ff       	jmp    80496e8 <main+0x188>
          case 'c':
            countmode = count_occurrences;
            output_option_used = 1;
            break;
          case 'd':
            output_unique = 0;
 804b2c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b2c4:	89 3c 24             	mov    %edi,(%esp)
 804b2c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b2cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b2cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b2d3:	b9 21 f7 00 00       	mov    $0xf721,%ecx
 804b2d8:	e8 6b 96 00 00       	call   8054948 <__afl_maybe_log>
 804b2dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b2e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b2e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b2e9:	8b 3c 24             	mov    (%esp),%edi
 804b2ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b2f0:	c6 05 0b a3 06 08 00 	movb   $0x0,0x806a30b
            output_option_used = 1;
 804b2f7:	c6 45 b0 01          	movb   $0x1,-0x50(%ebp)
            break;
 804b2fb:	e9 e8 e3 ff ff       	jmp    80496e8 <main+0x188>
if(optarg < 0)  {
	report_label_coverage("ABS", 487);
}

// ROR Label 488
if((optarg != ((void *)0)) != (optarg == ((void *)0)))  {
 804b300:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b304:	89 3c 24             	mov    %edi,(%esp)
 804b307:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b30b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b30f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b313:	b9 bb ac 00 00       	mov    $0xacbb,%ecx
 804b318:	e8 2b 96 00 00       	call   8054948 <__afl_maybe_log>
 804b31d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b321:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b325:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b329:	8b 3c 24             	mov    (%esp),%edi
 804b32c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b330:	a1 e0 a2 06 08       	mov    0x806a2e0,%eax
          case 'd':
            output_unique = 0;
            output_option_used = 1;
            break;
          case 'D':
            output_unique = 0;
 804b335:	c6 05 0b a3 06 08 00 	movb   $0x0,0x806a30b
            output_later_repeated = 1;
 804b33c:	c6 05 09 a3 06 08 01 	movb   $0x1,0x806a309
if(optarg < 0)  {
	report_label_coverage("ABS", 487);
}

// ROR Label 488
if((optarg != ((void *)0)) != (optarg == ((void *)0)))  {
 804b343:	85 c0                	test   %eax,%eax
 804b345:	0f 95 c1             	setne  %cl
 804b348:	0f 94 c2             	sete   %dl
 804b34b:	38 d1                	cmp    %dl,%cl
 804b34d:	74 4a                	je     804b399 <main+0x1e39>
 804b34f:	90                   	nop
 804b350:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b354:	89 3c 24             	mov    %edi,(%esp)
 804b357:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b35b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b35f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b363:	b9 2c 41 00 00       	mov    $0x412c,%ecx
 804b368:	e8 db 95 00 00       	call   8054948 <__afl_maybe_log>
 804b36d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b371:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b375:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b379:	8b 3c 24             	mov    (%esp),%edi
 804b37c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 488);
 804b380:	51                   	push   %ecx
 804b381:	51                   	push   %ecx
 804b382:	68 e8 01 00 00       	push   $0x1e8
 804b387:	68 17 5b 06 08       	push   $0x8065b17
 804b38c:	e8 ef 5c 00 00       	call   8051080 <report_label_coverage>
 804b391:	a1 e0 a2 06 08       	mov    0x806a2e0,%eax
 804b396:	83 c4 10             	add    $0x10,%esp
 804b399:	8d 76 00             	lea    0x0(%esi),%esi
}
if (optarg == ((void *)0))
 804b39c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b3a0:	89 3c 24             	mov    %edi,(%esp)
 804b3a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b3a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b3ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b3af:	b9 ff 07 00 00       	mov    $0x7ff,%ecx
 804b3b4:	e8 8f 95 00 00       	call   8054948 <__afl_maybe_log>
 804b3b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b3bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b3c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b3c5:	8b 3c 24             	mov    (%esp),%edi
 804b3c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b3cc:	85 c0                	test   %eax,%eax
 804b3ce:	0f 84 e7 00 00 00    	je     804b4bb <main+0x1f5b>
 804b3d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b3d8:	89 3c 24             	mov    %edi,(%esp)
 804b3db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b3df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b3e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b3e7:	b9 af 53 00 00       	mov    $0x53af,%ecx
 804b3ec:	e8 57 95 00 00       	call   8054948 <__afl_maybe_log>
 804b3f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b3f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b3f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b3fd:	8b 3c 24             	mov    (%esp),%edi
 804b400:	8d 64 24 10          	lea    0x10(%esp),%esp
                delimit_groups = DM_NONE;
            else
                delimit_groups = ((delimit_method_map)[__xargmatch_internal("--all-repeated", optarg, delimit_method_string, (const char *)(delimit_method_map), sizeof *(delimit_method_map), argmatch_die)]);
 804b404:	52                   	push   %edx
 804b405:	52                   	push   %edx
 804b406:	ff 35 4c a2 06 08    	pushl  0x806a24c
 804b40c:	6a 04                	push   $0x4
 804b40e:	68 34 66 06 08       	push   $0x8066634
 804b413:	68 40 66 06 08       	push   $0x8066640
 804b418:	50                   	push   %eax
 804b419:	68 08 5c 06 08       	push   $0x8065c08
 804b41e:	e8 6d 9e 00 00       	call   8055290 <__xargmatch_internal>
 804b423:	8b 0c 85 34 66 06 08 	mov    0x8066634(,%eax,4),%ecx
 804b42a:	83 c4 20             	add    $0x20,%esp
            output_option_used = 1;
 804b42d:	c6 45 b0 01          	movb   $0x1,-0x50(%ebp)
	report_label_coverage("ROR", 488);
}
if (optarg == ((void *)0))
                delimit_groups = DM_NONE;
            else
                delimit_groups = ((delimit_method_map)[__xargmatch_internal("--all-repeated", optarg, delimit_method_string, (const char *)(delimit_method_map), sizeof *(delimit_method_map), argmatch_die)]);
 804b431:	89 0d 04 a3 06 08    	mov    %ecx,0x806a304
 804b437:	e9 ac e2 ff ff       	jmp    80496e8 <main+0x188>
     avoid the need to specify a grouping method to --all-repeated.
     It was thought best to avoid deprecating those parameters though
     and keep --group separate to other options.  */
  
// COR Label 491
if((grouping != GM_NONE || output_option_used) != (grouping != GM_NONE && output_option_used))  {
 804b43c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b440:	89 3c 24             	mov    %edi,(%esp)
 804b443:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b447:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b44b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b44f:	b9 9b f9 00 00       	mov    $0xf99b,%ecx
 804b454:	e8 ef 94 00 00       	call   8054948 <__afl_maybe_log>
 804b459:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b45d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b461:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b465:	8b 3c 24             	mov    (%esp),%edi
 804b468:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b46c:	0f b6 4d b0          	movzbl -0x50(%ebp),%ecx
 804b470:	ba 01 00 00 00       	mov    $0x1,%edx
 804b475:	e9 98 f6 ff ff       	jmp    804ab12 <main+0x15b2>
 804b47a:	66 90                	xchg   %ax,%ax
// ROR Label 490
if((optarg != ((void *)0)) != (optarg == ((void *)0)))  {
	report_label_coverage("ROR", 490);
}
if (optarg == ((void *)0))
                grouping = GM_SEPARATE;
 804b47c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b480:	89 3c 24             	mov    %edi,(%esp)
 804b483:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b487:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b48b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b48f:	b9 3d 13 00 00       	mov    $0x133d,%ecx
 804b494:	e8 af 94 00 00       	call   8054948 <__afl_maybe_log>
 804b499:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b49d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b4a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b4a5:	8b 3c 24             	mov    (%esp),%edi
 804b4a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b4ac:	c7 05 00 a3 06 08 03 	movl   $0x3,0x806a300
 804b4b3:	00 00 00 
 804b4b6:	e9 2d e2 ff ff       	jmp    80496e8 <main+0x188>
 804b4bb:	90                   	nop
// ROR Label 488
if((optarg != ((void *)0)) != (optarg == ((void *)0)))  {
	report_label_coverage("ROR", 488);
}
if (optarg == ((void *)0))
                delimit_groups = DM_NONE;
 804b4bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b4c0:	89 3c 24             	mov    %edi,(%esp)
 804b4c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b4c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b4cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b4cf:	b9 2e ec 00 00       	mov    $0xec2e,%ecx
 804b4d4:	e8 6f 94 00 00       	call   8054948 <__afl_maybe_log>
 804b4d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b4dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b4e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b4e5:	8b 3c 24             	mov    (%esp),%edi
 804b4e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b4ec:	c7 05 04 a3 06 08 00 	movl   $0x0,0x806a304
 804b4f3:	00 00 00 
            else
                delimit_groups = ((delimit_method_map)[__xargmatch_internal("--all-repeated", optarg, delimit_method_string, (const char *)(delimit_method_map), sizeof *(delimit_method_map), argmatch_die)]);
            output_option_used = 1;
 804b4f6:	c6 45 b0 01          	movb   $0x1,-0x50(%ebp)
 804b4fa:	e9 e9 e1 ff ff       	jmp    80496e8 <main+0x188>
 804b4ff:	90                   	nop
	report_label_coverage("ROR", 486);
}
if (skip_field_option_type == SFO_NEW)
              skip_fields = 0;

            if (!DECIMAL_DIGIT_ACCUMULATE (skip_fields, optc - '0', size_t))
 804b500:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b504:	89 3c 24             	mov    %edi,(%esp)
 804b507:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b50b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b50f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b513:	b9 0f 03 00 00       	mov    $0x30f,%ecx
 804b518:	e8 2b 94 00 00       	call   8054948 <__afl_maybe_log>
 804b51d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b521:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b525:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b529:	8b 3c 24             	mov    (%esp),%edi
 804b52c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b530:	6b d0 0a             	imul   $0xa,%eax,%edx
 804b533:	8d 54 16 d0          	lea    -0x30(%esi,%edx,1),%edx
 804b537:	39 d0                	cmp    %edx,%eax
 804b539:	0f 87 81 fb ff ff    	ja     804b0c0 <main+0x1b60>
 804b53f:	90                   	nop
 804b540:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b544:	89 3c 24             	mov    %edi,(%esp)
 804b547:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b54b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b54f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b553:	b9 2c 0f 00 00       	mov    $0xf2c,%ecx
 804b558:	e8 eb 93 00 00       	call   8054948 <__afl_maybe_log>
 804b55d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b561:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b565:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b569:	8b 3c 24             	mov    (%esp),%edi
 804b56c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b570:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b574:	89 3c 24             	mov    %edi,(%esp)
 804b577:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b57b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b57f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b583:	b9 e8 1f 00 00       	mov    $0x1fe8,%ecx
 804b588:	e8 bb 93 00 00       	call   8054948 <__afl_maybe_log>
 804b58d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b591:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b595:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b599:	8b 3c 24             	mov    (%esp),%edi
 804b59c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b5a0:	89 15 18 a3 06 08    	mov    %edx,0x806a318
              skip_fields = SIZE_MAX;

            skip_field_option_type = SFO_OBSOLETE;
 804b5a6:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
 804b5ad:	e9 c7 e0 ff ff       	jmp    8049679 <main+0x119>
 804b5b2:	66 90                	xchg   %ax,%ax
if((grouping == GM_NONE) != (grouping != GM_NONE))  {
	report_label_coverage("ROR", 492);
}

// MCC Label 493
if(grouping != GM_NONE && output_option_used ) {
 804b5b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b5b8:	89 3c 24             	mov    %edi,(%esp)
 804b5bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b5bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b5c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b5c7:	b9 cf bc 00 00       	mov    $0xbccf,%ecx
 804b5cc:	e8 77 93 00 00       	call   8054948 <__afl_maybe_log>
 804b5d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b5d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b5d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b5dd:	8b 3c 24             	mov    (%esp),%edi
 804b5e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b5e4:	80 7d b0 00          	cmpb   $0x0,-0x50(%ebp)
 804b5e8:	0f 85 93 21 00 00    	jne    804d781 <main+0x4221>
 804b5ee:	66 90                	xchg   %ax,%ax
 804b5f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b5f4:	89 3c 24             	mov    %edi,(%esp)
 804b5f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b5fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b5ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b603:	b9 a0 c4 00 00       	mov    $0xc4a0,%ecx
 804b608:	e8 3b 93 00 00       	call   8054948 <__afl_maybe_log>
 804b60d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b611:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b615:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b619:	8b 3c 24             	mov    (%esp),%edi
 804b61c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 493);
}
// MCC Label 494
if(grouping != GM_NONE && !(output_option_used) ) {
	report_label_coverage("MCC", 494);
 804b620:	50                   	push   %eax
 804b621:	50                   	push   %eax
 804b622:	68 ee 01 00 00       	push   $0x1ee
 804b627:	68 1b 5b 06 08       	push   $0x8065b1b
 804b62c:	e8 4f 5a 00 00       	call   8051080 <report_label_coverage>
      usage (EXIT_FAILURE);
    }

  
// COR Label 497
if((grouping != GM_NONE || countmode != count_none) != (grouping != GM_NONE && countmode != count_none))  {
 804b631:	83 c4 10             	add    $0x10,%esp
 804b634:	83 3d 0c a3 06 08 01 	cmpl   $0x1,0x806a30c
 804b63b:	0f 85 83 f6 ff ff    	jne    804acc4 <main+0x1764>
 804b641:	8d 76 00             	lea    0x0(%esi),%esi
 804b644:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b648:	89 3c 24             	mov    %edi,(%esp)
 804b64b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b64f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b653:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b657:	b9 ed 7b 00 00       	mov    $0x7bed,%ecx
 804b65c:	e8 e7 92 00 00       	call   8054948 <__afl_maybe_log>
 804b661:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b665:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b669:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b66d:	8b 3c 24             	mov    (%esp),%edi
 804b670:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 497);
 804b674:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b678:	89 3c 24             	mov    %edi,(%esp)
 804b67b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b67f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b683:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b687:	b9 74 05 00 00       	mov    $0x574,%ecx
 804b68c:	e8 b7 92 00 00       	call   8054948 <__afl_maybe_log>
 804b691:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b695:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b699:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b69d:	8b 3c 24             	mov    (%esp),%edi
 804b6a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b6a4:	50                   	push   %eax
 804b6a5:	50                   	push   %eax
 804b6a6:	68 f1 01 00 00       	push   $0x1f1
 804b6ab:	68 13 5b 06 08       	push   $0x8065b13
 804b6b0:	e8 cb 59 00 00       	call   8051080 <report_label_coverage>
 804b6b5:	83 c4 10             	add    $0x10,%esp
 804b6b8:	e9 07 f6 ff ff       	jmp    804acc4 <main+0x1764>
 804b6bd:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 501
if(grouping != GM_NONE && !(countmode != count_none) ) {
	report_label_coverage("MCC", 501);
}
// MCC Label 502
if(!(grouping != GM_NONE) && countmode != count_none ) {
 804b6c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b6c4:	89 3c 24             	mov    %edi,(%esp)
 804b6c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b6cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b6cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b6d3:	b9 f9 d5 00 00       	mov    $0xd5f9,%ecx
 804b6d8:	e8 6b 92 00 00       	call   8054948 <__afl_maybe_log>
 804b6dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b6e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b6e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b6e9:	8b 3c 24             	mov    (%esp),%edi
 804b6ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b6f0:	84 c0                	test   %al,%al
 804b6f2:	74 44                	je     804b738 <main+0x21d8>
 804b6f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b6f8:	89 3c 24             	mov    %edi,(%esp)
 804b6fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b6ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b703:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b707:	b9 ef af 00 00       	mov    $0xafef,%ecx
 804b70c:	e8 37 92 00 00       	call   8054948 <__afl_maybe_log>
 804b711:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b715:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b719:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b71d:	8b 3c 24             	mov    (%esp),%edi
 804b720:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 502);
 804b724:	50                   	push   %eax
 804b725:	50                   	push   %eax
 804b726:	68 f6 01 00 00       	push   $0x1f6
 804b72b:	68 1b 5b 06 08       	push   $0x8065b1b
 804b730:	e8 4b 59 00 00       	call   8051080 <report_label_coverage>
 804b735:	83 c4 10             	add    $0x10,%esp
}
// MCC Label 503
if(!(grouping != GM_NONE) && !(countmode != count_none) ) {
 804b738:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b73c:	89 3c 24             	mov    %edi,(%esp)
 804b73f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b743:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b747:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b74b:	b9 45 83 00 00       	mov    $0x8345,%ecx
 804b750:	e8 f3 91 00 00       	call   8054948 <__afl_maybe_log>
 804b755:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b759:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b75d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b761:	8b 3c 24             	mov    (%esp),%edi
 804b764:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b768:	89 fb                	mov    %edi,%ebx
 804b76a:	84 db                	test   %bl,%bl
 804b76c:	0f 85 63 4d 00 00    	jne    80504d5 <main+0x6f75>
 804b772:	66 90                	xchg   %ax,%ax
 804b774:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b778:	89 3c 24             	mov    %edi,(%esp)
 804b77b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b77f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b783:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b787:	b9 57 48 00 00       	mov    $0x4857,%ecx
 804b78c:	e8 b7 91 00 00       	call   8054948 <__afl_maybe_log>
 804b791:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b795:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b799:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b79d:	8b 3c 24             	mov    (%esp),%edi
 804b7a0:	8d 64 24 10          	lea    0x10(%esp),%esp
      usage (EXIT_FAILURE);
    }

  
// COR Label 504
if((countmode == count_occurrences || output_later_repeated) != (countmode == count_occurrences && output_later_repeated))  {
 804b7a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b7a8:	89 3c 24             	mov    %edi,(%esp)
 804b7ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b7af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b7b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b7b7:	b9 8a 42 00 00       	mov    $0x428a,%ecx
 804b7bc:	e8 87 91 00 00       	call   8054948 <__afl_maybe_log>
 804b7c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b7c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b7c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b7cd:	8b 3c 24             	mov    (%esp),%edi
 804b7d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b7d4:	85 f6                	test   %esi,%esi
 804b7d6:	0f 85 60 1e 00 00    	jne    804d63c <main+0x40dc>
 804b7dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b7e0:	89 3c 24             	mov    %edi,(%esp)
 804b7e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b7e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b7eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b7ef:	b9 bb dd 00 00       	mov    $0xddbb,%ecx
 804b7f4:	e8 4f 91 00 00       	call   8054948 <__afl_maybe_log>
 804b7f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b7fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b801:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b805:	8b 3c 24             	mov    (%esp),%edi
 804b808:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b80c:	80 3d 09 a3 06 08 00 	cmpb   $0x0,0x806a309
 804b813:	75 77                	jne    804b88c <main+0x232c>
 804b815:	8d 76 00             	lea    0x0(%esi),%esi
 804b818:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b81c:	89 3c 24             	mov    %edi,(%esp)
 804b81f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b823:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b827:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b82b:	b9 c5 97 00 00       	mov    $0x97c5,%ecx
 804b830:	e8 13 91 00 00       	call   8054948 <__afl_maybe_log>
 804b835:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b839:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b83d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b841:	8b 3c 24             	mov    (%esp),%edi
 804b844:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 504);
 804b848:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b84c:	89 3c 24             	mov    %edi,(%esp)
 804b84f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b853:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b857:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b85b:	b9 0a b2 00 00       	mov    $0xb20a,%ecx
 804b860:	e8 e3 90 00 00       	call   8054948 <__afl_maybe_log>
 804b865:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b869:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b86d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b871:	8b 3c 24             	mov    (%esp),%edi
 804b874:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b878:	53                   	push   %ebx
 804b879:	53                   	push   %ebx
 804b87a:	68 f8 01 00 00       	push   $0x1f8
 804b87f:	68 13 5b 06 08       	push   $0x8065b13
 804b884:	e8 f7 57 00 00       	call   8051080 <report_label_coverage>
 804b889:	83 c4 10             	add    $0x10,%esp
}

// ROR Label 505
if((countmode != count_occurrences) != (countmode == count_occurrences))  {
 804b88c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b890:	89 3c 24             	mov    %edi,(%esp)
 804b893:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b897:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b89b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b89f:	b9 90 0d 00 00       	mov    $0xd90,%ecx
 804b8a4:	e8 9f 90 00 00       	call   8054948 <__afl_maybe_log>
 804b8a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b8ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b8b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b8b5:	8b 3c 24             	mov    (%esp),%edi
 804b8b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b8bc:	85 f6                	test   %esi,%esi
 804b8be:	0f 94 c3             	sete   %bl
 804b8c1:	0f 95 c1             	setne  %cl
 804b8c4:	38 d9                	cmp    %bl,%cl
 804b8c6:	74 44                	je     804b90c <main+0x23ac>
 804b8c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b8cc:	89 3c 24             	mov    %edi,(%esp)
 804b8cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b8d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b8d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b8db:	b9 87 93 00 00       	mov    $0x9387,%ecx
 804b8e0:	e8 63 90 00 00       	call   8054948 <__afl_maybe_log>
 804b8e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b8e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b8ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b8f1:	8b 3c 24             	mov    (%esp),%edi
 804b8f4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 505);
 804b8f8:	51                   	push   %ecx
 804b8f9:	51                   	push   %ecx
 804b8fa:	68 f9 01 00 00       	push   $0x1f9
 804b8ff:	68 17 5b 06 08       	push   $0x8065b17
 804b904:	e8 77 57 00 00       	call   8051080 <report_label_coverage>
 804b909:	83 c4 10             	add    $0x10,%esp
}

// MCC Label 506
if(countmode == count_occurrences && output_later_repeated ) {
 804b90c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b910:	89 3c 24             	mov    %edi,(%esp)
 804b913:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b91b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b91f:	b9 df d9 00 00       	mov    $0xd9df,%ecx
 804b924:	e8 1f 90 00 00       	call   8054948 <__afl_maybe_log>
 804b929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b92d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b931:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b935:	8b 3c 24             	mov    (%esp),%edi
 804b938:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b93c:	84 db                	test   %bl,%bl
 804b93e:	0f 84 69 1a 00 00    	je     804d3ad <main+0x3e4d>
 804b944:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b948:	89 3c 24             	mov    %edi,(%esp)
 804b94b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b94f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b953:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b957:	b9 f5 a8 00 00       	mov    $0xa8f5,%ecx
 804b95c:	e8 e7 8f 00 00       	call   8054948 <__afl_maybe_log>
 804b961:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b965:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b969:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b96d:	8b 3c 24             	mov    (%esp),%edi
 804b970:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b974:	80 3d 09 a3 06 08 00 	cmpb   $0x0,0x806a309
 804b97b:	0f 85 9c 1e 00 00    	jne    804d81d <main+0x42bd>
 804b981:	8d 76 00             	lea    0x0(%esi),%esi
 804b984:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b988:	89 3c 24             	mov    %edi,(%esp)
 804b98b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b98f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b993:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b997:	b9 61 e4 00 00       	mov    $0xe461,%ecx
 804b99c:	e8 a7 8f 00 00       	call   8054948 <__afl_maybe_log>
 804b9a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b9a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b9a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b9ad:	8b 3c 24             	mov    (%esp),%edi
 804b9b0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 506);
}
// MCC Label 507
if(countmode == count_occurrences && !(output_later_repeated) ) {
	report_label_coverage("MCC", 507);
 804b9b4:	53                   	push   %ebx
 804b9b5:	53                   	push   %ebx
 804b9b6:	68 fb 01 00 00       	push   $0x1fb
 804b9bb:	68 1b 5b 06 08       	push   $0x8065b1b
 804b9c0:	e8 bb 56 00 00       	call   8051080 <report_label_coverage>
 804b9c5:	83 c4 10             	add    $0x10,%esp

// ABS Label 465
if(delimiter < 0)  {
	report_label_coverage("ABS", 465);
}
check_file (file[0], file[1], delimiter);
 804b9c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b9cc:	89 3c 24             	mov    %edi,(%esp)
 804b9cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b9d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b9d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b9db:	b9 2e 73 00 00       	mov    $0x732e,%ecx
 804b9e0:	e8 63 8f 00 00       	call   8054948 <__afl_maybe_log>
 804b9e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b9e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b9ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b9f1:	8b 3c 24             	mov    (%esp),%edi
 804b9f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b9f8:	8b 7d c8             	mov    -0x38(%ebp),%edi
 804b9fb:	8b 75 cc             	mov    -0x34(%ebp),%esi
{
  struct linebuffer lb1, lb2;
  struct linebuffer *thisline, *prevline;

  {
    int temp_1 = !((strcmp(infile, "-") == 0) || freopen_safer(infile, "r", stdin));
 804b9fe:	80 3f 2d             	cmpb   $0x2d,(%edi)

// ABS Label 465
if(delimiter < 0)  {
	report_label_coverage("ABS", 465);
}
check_file (file[0], file[1], delimiter);
 804ba01:	89 7d 98             	mov    %edi,-0x68(%ebp)
{
  struct linebuffer lb1, lb2;
  struct linebuffer *thisline, *prevline;

  {
    int temp_1 = !((strcmp(infile, "-") == 0) || freopen_safer(infile, "r", stdin));
 804ba04:	0f 84 17 16 00 00    	je     804d021 <main+0x3ac1>
 804ba0a:	66 90                	xchg   %ax,%ax
 804ba0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ba10:	89 3c 24             	mov    %edi,(%esp)
 804ba13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ba17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ba1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ba1f:	b9 23 26 00 00       	mov    $0x2623,%ecx
 804ba24:	e8 1f 8f 00 00       	call   8054948 <__afl_maybe_log>
 804ba29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ba2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ba31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ba35:	8b 3c 24             	mov    (%esp),%edi
 804ba38:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ba3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ba40:	89 3c 24             	mov    %edi,(%esp)
 804ba43:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ba47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ba4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ba4f:	b9 a2 b4 00 00       	mov    $0xb4a2,%ecx
 804ba54:	e8 ef 8e 00 00       	call   8054948 <__afl_maybe_log>
 804ba59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ba5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ba61:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ba65:	8b 3c 24             	mov    (%esp),%edi
 804ba68:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ba6c:	50                   	push   %eax
 804ba6d:	ff 35 d0 a2 06 08    	pushl  0x806a2d0
 804ba73:	68 b9 66 06 08       	push   $0x80666b9
 804ba78:	ff 75 98             	pushl  -0x68(%ebp)
 804ba7b:	e8 f0 a3 00 00       	call   8055e70 <freopen_safer>
    
// ABS Label 249
if(temp_1 < 0)  {
	report_label_coverage("ABS", 249);
}
if (temp_1)
 804ba80:	83 c4 10             	add    $0x10,%esp
 804ba83:	85 c0                	test   %eax,%eax
 804ba85:	75 4a                	jne    804bad1 <main+0x2571>
 804ba87:	90                   	nop
 804ba88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ba8c:	89 3c 24             	mov    %edi,(%esp)
 804ba8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ba93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ba97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ba9b:	b9 38 75 00 00       	mov    $0x7538,%ecx
 804baa0:	e8 a3 8e 00 00       	call   8054948 <__afl_maybe_log>
 804baa5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804baa9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804baad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bab1:	8b 3c 24             	mov    (%esp),%edi
 804bab4:	8d 64 24 10          	lea    0x10(%esp),%esp
        error(1, (*__errno_location()), "%s", infile);
 804bab8:	e8 43 d9 ff ff       	call   8049400 <__errno_location@plt>
 804babd:	ff 75 98             	pushl  -0x68(%ebp)
 804bac0:	68 ac 66 06 08       	push   $0x80666ac
 804bac5:	ff 30                	pushl  (%eax)
 804bac7:	6a 01                	push   $0x1
 804bac9:	e8 f2 d7 ff ff       	call   80492c0 <error@plt>
 804bace:	83 c4 10             	add    $0x10,%esp
 804bad1:	8d 76 00             	lea    0x0(%esi),%esi
}
;
  {
    int temp_1 = !((strcmp(outfile, "-") == 0) || freopen_safer(outfile, "w", stdout));
 804bad4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bad8:	89 3c 24             	mov    %edi,(%esp)
 804badb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804badf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bae3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bae7:	b9 d1 7e 00 00       	mov    $0x7ed1,%ecx
 804baec:	e8 57 8e 00 00       	call   8054948 <__afl_maybe_log>
 804baf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804baf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804baf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bafd:	8b 3c 24             	mov    (%esp),%edi
 804bb00:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bb04:	80 3e 2d             	cmpb   $0x2d,(%esi)
 804bb07:	0f 84 a0 14 00 00    	je     804cfad <main+0x3a4d>
 804bb0d:	8d 76 00             	lea    0x0(%esi),%esi
 804bb10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bb14:	89 3c 24             	mov    %edi,(%esp)
 804bb17:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bb1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bb1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bb23:	b9 ac 55 00 00       	mov    $0x55ac,%ecx
 804bb28:	e8 1b 8e 00 00       	call   8054948 <__afl_maybe_log>
 804bb2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bb31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bb35:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bb39:	8b 3c 24             	mov    (%esp),%edi
 804bb3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bb40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bb44:	89 3c 24             	mov    %edi,(%esp)
 804bb47:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bb4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bb4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bb53:	b9 c2 83 00 00       	mov    $0x83c2,%ecx
 804bb58:	e8 eb 8d 00 00       	call   8054948 <__afl_maybe_log>
 804bb5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bb61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bb65:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bb69:	8b 3c 24             	mov    (%esp),%edi
 804bb6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bb70:	50                   	push   %eax
 804bb71:	ff 35 d8 a2 06 08    	pushl  0x806a2d8
 804bb77:	68 43 5c 06 08       	push   $0x8065c43
 804bb7c:	56                   	push   %esi
 804bb7d:	e8 ee a2 00 00       	call   8055e70 <freopen_safer>
    
// ABS Label 250
if(temp_1 < 0)  {
	report_label_coverage("ABS", 250);
}
if (temp_1)
 804bb82:	83 c4 10             	add    $0x10,%esp
 804bb85:	85 c0                	test   %eax,%eax
 804bb87:	75 4a                	jne    804bbd3 <main+0x2673>
 804bb89:	8d 76 00             	lea    0x0(%esi),%esi
 804bb8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bb90:	89 3c 24             	mov    %edi,(%esp)
 804bb93:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bb97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bb9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bb9f:	b9 2f 63 00 00       	mov    $0x632f,%ecx
 804bba4:	e8 9f 8d 00 00       	call   8054948 <__afl_maybe_log>
 804bba9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bbad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bbb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bbb5:	8b 3c 24             	mov    (%esp),%edi
 804bbb8:	8d 64 24 10          	lea    0x10(%esp),%esp
        error(1, (*__errno_location()), "%s", outfile);
 804bbbc:	e8 3f d8 ff ff       	call   8049400 <__errno_location@plt>
 804bbc1:	56                   	push   %esi
 804bbc2:	68 ac 66 06 08       	push   $0x80666ac
 804bbc7:	ff 30                	pushl  (%eax)
 804bbc9:	6a 01                	push   $0x1
 804bbcb:	e8 f0 d6 ff ff       	call   80492c0 <error@plt>
 804bbd0:	83 c4 10             	add    $0x10,%esp
 804bbd3:	90                   	nop
  
// ABS Label 246
if(stdin < 0)  {
	report_label_coverage("ABS", 246);
}
fadvise (stdin, FADVISE_SEQUENTIAL);
 804bbd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bbd8:	89 3c 24             	mov    %edi,(%esp)
 804bbdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bbdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bbe3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bbe7:	b9 5c d4 00 00       	mov    $0xd45c,%ecx
 804bbec:	e8 57 8d 00 00       	call   8054948 <__afl_maybe_log>
 804bbf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bbf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bbf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bbfd:	8b 3c 24             	mov    (%esp),%edi
 804bc00:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bc04:	50                   	push   %eax
 804bc05:	50                   	push   %eax
 804bc06:	6a 02                	push   $0x2
 804bc08:	ff 35 d0 a2 06 08    	pushl  0x806a2d0
 804bc0e:	e8 2d 9f 00 00       	call   8055b40 <fadvise>
  
// ABS Label 247
if(thisline < 0)  {
	report_label_coverage("ABS", 247);
}
initbuffer (thisline);
 804bc13:	8d 45 d0             	lea    -0x30(%ebp),%eax
 804bc16:	89 04 24             	mov    %eax,(%esp)
 804bc19:	e8 32 ad 00 00       	call   8056950 <initbuffer>
  
// ABS Label 248
if(prevline < 0)  {
	report_label_coverage("ABS", 248);
}
initbuffer (prevline);
 804bc1e:	8d 55 dc             	lea    -0x24(%ebp),%edx
 804bc21:	89 14 24             	mov    %edx,(%esp)
 804bc24:	e8 27 ad 00 00       	call   8056950 <initbuffer>

     3. All other cases.
  */
  
// COR Label 251
if((output_unique && output_first_repeated || countmode == count_none) != (output_unique && output_first_repeated && countmode == count_none))  {
 804bc29:	0f b6 0d 0b a3 06 08 	movzbl 0x806a30b,%ecx
 804bc30:	83 c4 10             	add    $0x10,%esp
 804bc33:	84 c9                	test   %cl,%cl
 804bc35:	0f 84 f6 12 00 00    	je     804cf31 <main+0x39d1>
 804bc3b:	90                   	nop
 804bc3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bc40:	89 3c 24             	mov    %edi,(%esp)
 804bc43:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bc47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bc4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bc4f:	b9 75 52 00 00       	mov    $0x5275,%ecx
 804bc54:	e8 ef 8c 00 00       	call   8054948 <__afl_maybe_log>
 804bc59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bc5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bc61:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bc65:	8b 3c 24             	mov    (%esp),%edi
 804bc68:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bc6c:	80 3d 0a a3 06 08 00 	cmpb   $0x0,0x806a30a
 804bc73:	0f 84 b8 12 00 00    	je     804cf31 <main+0x39d1>
 804bc79:	8d 76 00             	lea    0x0(%esi),%esi
 804bc7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bc80:	89 3c 24             	mov    %edi,(%esp)
 804bc83:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bc87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bc8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bc8f:	b9 e8 7e 00 00       	mov    $0x7ee8,%ecx
 804bc94:	e8 af 8c 00 00       	call   8054948 <__afl_maybe_log>
 804bc99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bc9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bca1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bca5:	8b 3c 24             	mov    (%esp),%edi
 804bca8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bcac:	83 3d 0c a3 06 08 01 	cmpl   $0x1,0x806a30c
 804bcb3:	0f 84 34 16 00 00    	je     804d2ed <main+0x3d8d>
 804bcb9:	8d 76 00             	lea    0x0(%esi),%esi
 804bcbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bcc0:	89 3c 24             	mov    %edi,(%esp)
 804bcc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bcc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bccb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bccf:	b9 80 3b 00 00       	mov    $0x3b80,%ecx
 804bcd4:	e8 6f 8c 00 00       	call   8054948 <__afl_maybe_log>
 804bcd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bcdd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bce1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bce5:	8b 3c 24             	mov    (%esp),%edi
 804bce8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 251);
 804bcec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bcf0:	89 3c 24             	mov    %edi,(%esp)
 804bcf3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bcf7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bcfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bcff:	b9 c1 7c 00 00       	mov    $0x7cc1,%ecx
 804bd04:	e8 3f 8c 00 00       	call   8054948 <__afl_maybe_log>
 804bd09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bd0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bd11:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bd15:	8b 3c 24             	mov    (%esp),%edi
 804bd18:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bd1c:	50                   	push   %eax
 804bd1d:	50                   	push   %eax
 804bd1e:	68 fb 00 00 00       	push   $0xfb
 804bd23:	68 13 5b 06 08       	push   $0x8065b13
 804bd28:	88 4d c4             	mov    %cl,-0x3c(%ebp)
 804bd2b:	e8 50 53 00 00       	call   8051080 <report_label_coverage>
 804bd30:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
 804bd34:	83 c4 10             	add    $0x10,%esp
 804bd37:	90                   	nop
}
// COR Label 252
if((output_unique || output_first_repeated) != (output_unique && output_first_repeated))  {
 804bd38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bd3c:	89 3c 24             	mov    %edi,(%esp)
 804bd3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bd43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bd47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bd4b:	b9 df c5 00 00       	mov    $0xc5df,%ecx
 804bd50:	e8 f3 8b 00 00       	call   8054948 <__afl_maybe_log>
 804bd55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bd59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bd5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bd61:	8b 3c 24             	mov    (%esp),%edi
 804bd64:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bd68:	84 c9                	test   %cl,%cl
 804bd6a:	0f 85 7d 15 00 00    	jne    804d2ed <main+0x3d8d>
 804bd70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bd74:	89 3c 24             	mov    %edi,(%esp)
 804bd77:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bd7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bd7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bd83:	b9 0d ac 00 00       	mov    $0xac0d,%ecx
 804bd88:	e8 bb 8b 00 00       	call   8054948 <__afl_maybe_log>
 804bd8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bd91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bd95:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bd99:	8b 3c 24             	mov    (%esp),%edi
 804bd9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bda0:	80 3d 0a a3 06 08 00 	cmpb   $0x0,0x806a30a
 804bda7:	0f 85 c3 17 00 00    	jne    804d570 <main+0x4010>
 804bdad:	8d 76 00             	lea    0x0(%esi),%esi
 804bdb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bdb4:	89 3c 24             	mov    %edi,(%esp)
 804bdb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bdbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bdbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bdc3:	b9 4c 93 00 00       	mov    $0x934c,%ecx
 804bdc8:	e8 7b 8b 00 00       	call   8054948 <__afl_maybe_log>
 804bdcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bdd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bdd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bdd9:	8b 3c 24             	mov    (%esp),%edi
 804bddc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 252);
}

// ROR Label 253
if((countmode != count_none) != (countmode == count_none))  {
 804bde0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bde4:	89 3c 24             	mov    %edi,(%esp)
 804bde7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bdeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bdef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bdf3:	b9 8f 0a 00 00       	mov    $0xa8f,%ecx
 804bdf8:	e8 4b 8b 00 00       	call   8054948 <__afl_maybe_log>
 804bdfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804be01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804be05:	8b 54 24 04          	mov    0x4(%esp),%edx
 804be09:	8b 3c 24             	mov    (%esp),%edi
 804be0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804be10:	8b 35 0c a3 06 08    	mov    0x806a30c,%esi
 804be16:	83 ee 01             	sub    $0x1,%esi
 804be19:	0f 95 c2             	setne  %dl
 804be1c:	0f 94 c0             	sete   %al
 804be1f:	38 c2                	cmp    %al,%dl
 804be21:	0f 84 8a 00 00 00    	je     804beb1 <main+0x2951>
 804be27:	90                   	nop
 804be28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804be2c:	89 3c 24             	mov    %edi,(%esp)
 804be2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804be33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804be37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804be3b:	b9 de 97 00 00       	mov    $0x97de,%ecx
 804be40:	e8 03 8b 00 00       	call   8054948 <__afl_maybe_log>
 804be45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804be49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804be4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804be51:	8b 3c 24             	mov    (%esp),%edi
 804be54:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 253);
 804be58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804be5c:	89 3c 24             	mov    %edi,(%esp)
 804be5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804be63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804be67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804be6b:	b9 8c b5 00 00       	mov    $0xb58c,%ecx
 804be70:	e8 d3 8a 00 00       	call   8054948 <__afl_maybe_log>
 804be75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804be79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804be7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804be81:	8b 3c 24             	mov    (%esp),%edi
 804be84:	8d 64 24 10          	lea    0x10(%esp),%esp
 804be88:	56                   	push   %esi
 804be89:	56                   	push   %esi
 804be8a:	68 fd 00 00 00       	push   $0xfd
 804be8f:	68 17 5b 06 08       	push   $0x8065b17
 804be94:	88 45 bc             	mov    %al,-0x44(%ebp)
 804be97:	88 55 c0             	mov    %dl,-0x40(%ebp)
 804be9a:	88 4d c4             	mov    %cl,-0x3c(%ebp)
 804be9d:	e8 de 51 00 00       	call   8051080 <report_label_coverage>
 804bea2:	0f b6 45 bc          	movzbl -0x44(%ebp),%eax
 804bea6:	0f b6 55 c0          	movzbl -0x40(%ebp),%edx
 804beaa:	83 c4 10             	add    $0x10,%esp
 804bead:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
 804beb1:	8d 76 00             	lea    0x0(%esi),%esi
}

// MCC Label 254
if(output_unique && output_first_repeated && countmode == count_none ) {
 804beb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804beb8:	89 3c 24             	mov    %edi,(%esp)
 804bebb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bebf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bec3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bec7:	b9 c2 23 00 00       	mov    $0x23c2,%ecx
 804becc:	e8 77 8a 00 00       	call   8054948 <__afl_maybe_log>
 804bed1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bed5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bed9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bedd:	8b 3c 24             	mov    (%esp),%edi
 804bee0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bee4:	84 c9                	test   %cl,%cl
 804bee6:	0f 84 a9 11 00 00    	je     804d095 <main+0x3b35>
 804beec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bef0:	89 3c 24             	mov    %edi,(%esp)
 804bef3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bef7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804befb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804beff:	b9 94 05 00 00       	mov    $0x594,%ecx
 804bf04:	e8 3f 8a 00 00       	call   8054948 <__afl_maybe_log>
 804bf09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bf0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bf11:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bf15:	8b 3c 24             	mov    (%esp),%edi
 804bf18:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bf1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bf20:	89 3c 24             	mov    %edi,(%esp)
 804bf23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bf27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bf2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bf2f:	b9 85 fb 00 00       	mov    $0xfb85,%ecx
 804bf34:	e8 0f 8a 00 00       	call   8054948 <__afl_maybe_log>
 804bf39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bf3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bf41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bf45:	8b 3c 24             	mov    (%esp),%edi
 804bf48:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bf4c:	0f b6 0d 0a a3 06 08 	movzbl 0x806a30a,%ecx
 804bf53:	89 c3                	mov    %eax,%ebx
 804bf55:	20 cb                	and    %cl,%bl
 804bf57:	88 5d 9d             	mov    %bl,-0x63(%ebp)
 804bf5a:	0f 85 7b 48 00 00    	jne    80507db <main+0x727b>
 804bf60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bf64:	89 3c 24             	mov    %edi,(%esp)
 804bf67:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bf6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bf6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bf73:	b9 a5 11 00 00       	mov    $0x11a5,%ecx
 804bf78:	e8 cb 89 00 00       	call   8054948 <__afl_maybe_log>
 804bf7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bf81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bf85:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bf89:	8b 3c 24             	mov    (%esp),%edi
 804bf8c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 254);
}
// MCC Label 255
if(output_unique && output_first_repeated && !(countmode == count_none) ) {
 804bf90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bf94:	89 3c 24             	mov    %edi,(%esp)
 804bf97:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bf9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bf9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bfa3:	b9 d4 ea 00 00       	mov    $0xead4,%ecx
 804bfa8:	e8 9b 89 00 00       	call   8054948 <__afl_maybe_log>
 804bfad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bfb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bfb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bfb9:	8b 3c 24             	mov    (%esp),%edi
 804bfbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bfc0:	84 d2                	test   %dl,%dl
 804bfc2:	0f 84 8d 00 00 00    	je     804c055 <main+0x2af5>
 804bfc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bfcc:	89 3c 24             	mov    %edi,(%esp)
 804bfcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bfd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bfd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bfdb:	b9 aa 59 00 00       	mov    $0x59aa,%ecx
 804bfe0:	e8 63 89 00 00       	call   8054948 <__afl_maybe_log>
 804bfe5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bfe9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bfed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bff1:	8b 3c 24             	mov    (%esp),%edi
 804bff4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bff8:	84 c9                	test   %cl,%cl
 804bffa:	74 59                	je     804c055 <main+0x2af5>
 804bffc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c000:	89 3c 24             	mov    %edi,(%esp)
 804c003:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c007:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c00b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c00f:	b9 67 6c 00 00       	mov    $0x6c67,%ecx
 804c014:	e8 2f 89 00 00       	call   8054948 <__afl_maybe_log>
 804c019:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c01d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c021:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c025:	8b 3c 24             	mov    (%esp),%edi
 804c028:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c02c:	88 4d bc             	mov    %cl,-0x44(%ebp)
	report_label_coverage("MCC", 255);
 804c02f:	51                   	push   %ecx
 804c030:	51                   	push   %ecx
 804c031:	68 ff 00 00 00       	push   $0xff
 804c036:	68 1b 5b 06 08       	push   $0x8065b1b
 804c03b:	88 45 c0             	mov    %al,-0x40(%ebp)
 804c03e:	88 55 c4             	mov    %dl,-0x3c(%ebp)
 804c041:	e8 3a 50 00 00       	call   8051080 <report_label_coverage>
 804c046:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 804c04a:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
 804c04e:	83 c4 10             	add    $0x10,%esp
 804c051:	0f b6 4d bc          	movzbl -0x44(%ebp),%ecx
 804c055:	8d 76 00             	lea    0x0(%esi),%esi
}
// MCC Label 256
if(output_unique && !(output_first_repeated) && countmode == count_none ) {
 804c058:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c05c:	89 3c 24             	mov    %edi,(%esp)
 804c05f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c063:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c067:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c06b:	b9 4f 9d 00 00       	mov    $0x9d4f,%ecx
 804c070:	e8 d3 88 00 00       	call   8054948 <__afl_maybe_log>
 804c075:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c079:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c07d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c081:	8b 3c 24             	mov    (%esp),%edi
 804c084:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c088:	38 c8                	cmp    %cl,%al
 804c08a:	0f 87 f2 46 00 00    	ja     8050782 <main+0x7222>
 804c090:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c094:	89 3c 24             	mov    %edi,(%esp)
 804c097:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c09b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c09f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c0a3:	b9 02 eb 00 00       	mov    $0xeb02,%ecx
 804c0a8:	e8 9b 88 00 00       	call   8054948 <__afl_maybe_log>
 804c0ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c0b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c0b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c0b9:	8b 3c 24             	mov    (%esp),%edi
 804c0bc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 256);
}
// MCC Label 257
if(output_unique && !(output_first_repeated) && !(countmode == count_none) ) {
 804c0c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c0c4:	89 3c 24             	mov    %edi,(%esp)
 804c0c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c0cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c0cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c0d3:	b9 46 bd 00 00       	mov    $0xbd46,%ecx
 804c0d8:	e8 6b 88 00 00       	call   8054948 <__afl_maybe_log>
 804c0dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c0e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c0e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c0e9:	8b 3c 24             	mov    (%esp),%edi
 804c0ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c0f0:	38 ca                	cmp    %cl,%dl
 804c0f2:	76 44                	jbe    804c138 <main+0x2bd8>
 804c0f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c0f8:	89 3c 24             	mov    %edi,(%esp)
 804c0fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c0ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c103:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c107:	b9 c7 3f 00 00       	mov    $0x3fc7,%ecx
 804c10c:	e8 37 88 00 00       	call   8054948 <__afl_maybe_log>
 804c111:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c115:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c119:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c11d:	8b 3c 24             	mov    (%esp),%edi
 804c120:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 257);
 804c124:	50                   	push   %eax
 804c125:	50                   	push   %eax
 804c126:	68 01 01 00 00       	push   $0x101
 804c12b:	68 1b 5b 06 08       	push   $0x8065b1b
 804c130:	e8 4b 4f 00 00       	call   8051080 <report_label_coverage>
 804c135:	83 c4 10             	add    $0x10,%esp
}
// MCC Label 261
if(!(output_unique) && !(output_first_repeated) && !(countmode == count_none) ) {
	report_label_coverage("MCC", 261);
}
if (output_unique && output_first_repeated && countmode == count_none)
 804c138:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c13c:	89 3c 24             	mov    %edi,(%esp)
 804c13f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c143:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c147:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c14b:	b9 21 5b 00 00       	mov    $0x5b21,%ecx
 804c150:	e8 f3 87 00 00       	call   8054948 <__afl_maybe_log>
 804c155:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c159:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c15d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c161:	8b 3c 24             	mov    (%esp),%edi
 804c164:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c168:	80 7d 9d 00          	cmpb   $0x0,-0x63(%ebp)
 804c16c:	0f 85 bb 18 00 00    	jne    804da2d <main+0x44cd>
 804c172:	66 90                	xchg   %ax,%ax
 804c174:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c178:	89 3c 24             	mov    %edi,(%esp)
 804c17b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c17f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c183:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c187:	b9 90 88 00 00       	mov    $0x8890,%ecx
 804c18c:	e8 b7 87 00 00       	call   8054948 <__afl_maybe_log>
 804c191:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c195:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c199:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c19d:	8b 3c 24             	mov    (%esp),%edi
 804c1a0:	8d 64 24 10          	lea    0x10(%esp),%esp
      size_t prevlen;
      uintmax_t match_count = 0;
      bool first_delimiter = true;

      {
    struct linebuffer *temp_1 = readlinebuffer_delim(prevline, stdin, delimiter);
 804c1a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c1a8:	89 3c 24             	mov    %edi,(%esp)
 804c1ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c1af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c1b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c1b7:	b9 83 8c 00 00       	mov    $0x8c83,%ecx
 804c1bc:	e8 87 87 00 00       	call   8054948 <__afl_maybe_log>
 804c1c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c1c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c1c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c1cd:	8b 3c 24             	mov    (%esp),%edi
 804c1d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c1d4:	0f be 75 9e          	movsbl -0x62(%ebp),%esi
 804c1d8:	8d 7d dc             	lea    -0x24(%ebp),%edi
 804c1db:	51                   	push   %ecx
 804c1dc:	56                   	push   %esi
 804c1dd:	ff 35 d0 a2 06 08    	pushl  0x806a2d0
 804c1e3:	57                   	push   %edi
 804c1e4:	89 75 ac             	mov    %esi,-0x54(%ebp)
 804c1e7:	e8 b4 a7 00 00       	call   80569a0 <readlinebuffer_delim>
if(temp_1 < 0)  {
	report_label_coverage("ABS", 432);
}

// ROR Label 433
if((temp_1 != 0) != (temp_1 == 0))  {
 804c1ec:	83 c4 10             	add    $0x10,%esp
 804c1ef:	85 c0                	test   %eax,%eax
 804c1f1:	0f 94 c2             	sete   %dl
 804c1f4:	0f 95 c0             	setne  %al
 804c1f7:	38 d0                	cmp    %dl,%al
 804c1f9:	74 4c                	je     804c247 <main+0x2ce7>
 804c1fb:	90                   	nop
 804c1fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c200:	89 3c 24             	mov    %edi,(%esp)
 804c203:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c207:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c20b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c20f:	b9 e1 24 00 00       	mov    $0x24e1,%ecx
 804c214:	e8 2f 87 00 00       	call   8054948 <__afl_maybe_log>
 804c219:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c21d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c221:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c225:	8b 3c 24             	mov    (%esp),%edi
 804c228:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c22c:	88 55 c4             	mov    %dl,-0x3c(%ebp)
	report_label_coverage("ROR", 433);
 804c22f:	52                   	push   %edx
 804c230:	52                   	push   %edx
 804c231:	68 b1 01 00 00       	push   $0x1b1
 804c236:	68 17 5b 06 08       	push   $0x8065b17
 804c23b:	e8 40 4e 00 00       	call   8051080 <report_label_coverage>
 804c240:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 804c244:	83 c4 10             	add    $0x10,%esp
 804c247:	90                   	nop
}
if (temp_1 == 0)
 804c248:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c24c:	89 3c 24             	mov    %edi,(%esp)
 804c24f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c253:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c257:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c25b:	b9 85 2d 00 00       	mov    $0x2d85,%ecx
 804c260:	e8 e3 86 00 00       	call   8054948 <__afl_maybe_log>
 804c265:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c269:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c26d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c271:	8b 3c 24             	mov    (%esp),%edi
 804c274:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c278:	84 d2                	test   %dl,%dl
 804c27a:	0f 85 8d 05 00 00    	jne    804c80d <main+0x32ad>
 804c280:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c284:	89 3c 24             	mov    %edi,(%esp)
 804c287:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c28b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c28f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c293:	b9 6c 76 00 00       	mov    $0x766c,%ecx
 804c298:	e8 ab 86 00 00       	call   8054948 <__afl_maybe_log>
 804c29d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c2a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c2a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c2a9:	8b 3c 24             	mov    (%esp),%edi
 804c2ac:	8d 64 24 10          	lea    0x10(%esp),%esp
        goto closefiles;
}
;
      prevfield = find_field (prevline);
 804c2b0:	8d 55 e4             	lea    -0x1c(%ebp),%edx
 804c2b3:	8d 45 e0             	lea    -0x20(%ebp),%eax
if(stdin < 0)  {
	report_label_coverage("ABS", 246);
}
fadvise (stdin, FADVISE_SEQUENTIAL);

  thisline = &lb1;
 804c2b6:	8d 5d d0             	lea    -0x30(%ebp),%ebx
}
if (temp_1 == 0)
        goto closefiles;
}
;
      prevfield = find_field (prevline);
 804c2b9:	e8 02 4e 00 00       	call   80510c0 <find_field.isra.3>
      prevlen = prevline->length - 1 - (prevfield - prevline->buffer);
 804c2be:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 804c2c1:	8b 75 e0             	mov    -0x20(%ebp),%esi
}
if (temp_1 == 0)
        goto closefiles;
}
;
      prevfield = find_field (prevline);
 804c2c4:	89 45 bc             	mov    %eax,-0x44(%ebp)
  else
    {
      char *prevfield;
      size_t prevlen;
      uintmax_t match_count = 0;
      bool first_delimiter = true;
 804c2c7:	c6 45 9f 01          	movb   $0x1,-0x61(%ebp)
if (temp_1 == 0)
        goto closefiles;
}
;
      prevfield = find_field (prevline);
      prevlen = prevline->length - 1 - (prevfield - prevline->buffer);
 804c2cb:	29 c1                	sub    %eax,%ecx
	report_label_coverage("ABS", 246);
}
fadvise (stdin, FADVISE_SEQUENTIAL);

  thisline = &lb1;
  prevline = &lb2;
 804c2cd:	8d 45 dc             	lea    -0x24(%ebp),%eax
if (temp_1 == 0)
        goto closefiles;
}
;
      prevfield = find_field (prevline);
      prevlen = prevline->length - 1 - (prevfield - prevline->buffer);
 804c2d0:	8d 7c 0e ff          	lea    -0x1(%esi,%ecx,1),%edi
    }
  else
    {
      char *prevfield;
      size_t prevlen;
      uintmax_t match_count = 0;
 804c2d4:	31 f6                	xor    %esi,%esi
	report_label_coverage("ABS", 246);
}
fadvise (stdin, FADVISE_SEQUENTIAL);

  thisline = &lb1;
  prevline = &lb2;
 804c2d6:	89 45 b0             	mov    %eax,-0x50(%ebp)
if (temp_1 == 0)
        goto closefiles;
}
;
      prevfield = find_field (prevline);
      prevlen = prevline->length - 1 - (prevfield - prevline->buffer);
 804c2d9:	89 7d b8             	mov    %edi,-0x48(%ebp)
    }
  else
    {
      char *prevfield;
      size_t prevlen;
      uintmax_t match_count = 0;
 804c2dc:	31 ff                	xor    %edi,%edi
 804c2de:	66 90                	xchg   %ax,%ax
      prevlen = prevline->length - 1 - (prevfield - prevline->buffer);

      while (1)
    {
        {
            int temp_1 = !(!feof_unlocked(stdin));
 804c2e0:	8b 15 d0 a2 06 08    	mov    0x806a2d0,%edx
            
// ABS Label 434
if(temp_1 < 0)  {
	report_label_coverage("ABS", 434);
}
if (temp_1)
 804c2e6:	f6 02 10             	testb  $0x10,(%edx)
 804c2e9:	0f 85 dd 04 00 00    	jne    804c7cc <main+0x326c>
 804c2ef:	90                   	nop
 804c2f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c2f4:	89 3c 24             	mov    %edi,(%esp)
 804c2f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c2fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c2ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c303:	b9 f2 71 00 00       	mov    $0x71f2,%ecx
 804c308:	e8 3b 86 00 00       	call   8054948 <__afl_maybe_log>
 804c30d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c311:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c315:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c319:	8b 3c 24             	mov    (%esp),%edi
 804c31c:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
            _Bool match;
            char *thisfield;
            size_t thislen;
            {
                struct linebuffer *temp_3 = readlinebuffer_delim(thisline, stdin, delimiter);
 804c320:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c324:	89 3c 24             	mov    %edi,(%esp)
 804c327:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c32b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c32f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c333:	b9 b7 d3 00 00       	mov    $0xd3b7,%ecx
 804c338:	e8 0b 86 00 00       	call   8054948 <__afl_maybe_log>
 804c33d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c341:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c345:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c349:	8b 3c 24             	mov    (%esp),%edi
 804c34c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c350:	83 ec 04             	sub    $0x4,%esp
 804c353:	ff 75 ac             	pushl  -0x54(%ebp)
 804c356:	52                   	push   %edx
 804c357:	53                   	push   %ebx
 804c358:	e8 43 a6 00 00       	call   80569a0 <readlinebuffer_delim>
if(temp_3 < 0)  {
	report_label_coverage("ABS", 435);
}

// ROR Label 436
if((temp_3 != 0) != (temp_3 == 0))  {
 804c35d:	83 c4 10             	add    $0x10,%esp
 804c360:	85 c0                	test   %eax,%eax
 804c362:	0f 94 c0             	sete   %al
 804c365:	0f 95 c1             	setne  %cl
 804c368:	38 c1                	cmp    %al,%cl
 804c36a:	74 4c                	je     804c3b8 <main+0x2e58>
 804c36c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c370:	89 3c 24             	mov    %edi,(%esp)
 804c373:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c377:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c37b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c37f:	b9 43 a7 00 00       	mov    $0xa743,%ecx
 804c384:	e8 bf 85 00 00       	call   8054948 <__afl_maybe_log>
 804c389:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c38d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c391:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c395:	8b 3c 24             	mov    (%esp),%edi
 804c398:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 436);
 804c39c:	83 ec 08             	sub    $0x8,%esp
 804c39f:	88 45 c4             	mov    %al,-0x3c(%ebp)
 804c3a2:	68 b4 01 00 00       	push   $0x1b4
 804c3a7:	68 17 5b 06 08       	push   $0x8065b17
 804c3ac:	e8 cf 4c 00 00       	call   8051080 <report_label_coverage>
 804c3b1:	0f b6 45 c4          	movzbl -0x3c(%ebp),%eax
 804c3b5:	83 c4 10             	add    $0x10,%esp
}
if (temp_3 == 0) {
 804c3b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c3bc:	89 3c 24             	mov    %edi,(%esp)
 804c3bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c3c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c3c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c3cb:	b9 51 2a 00 00       	mov    $0x2a51,%ecx
 804c3d0:	e8 73 85 00 00       	call   8054948 <__afl_maybe_log>
 804c3d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c3d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c3dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c3e1:	8b 3c 24             	mov    (%esp),%edi
 804c3e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c3e8:	84 c0                	test   %al,%al
 804c3ea:	0f 85 49 10 00 00    	jne    804d439 <main+0x3ed9>
 804c3f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c3f4:	89 3c 24             	mov    %edi,(%esp)
 804c3f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c3fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c3ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c403:	b9 1f 26 00 00       	mov    $0x261f,%ecx
 804c408:	e8 3b 85 00 00       	call   8054948 <__afl_maybe_log>
 804c40d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c411:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c415:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c419:	8b 3c 24             	mov    (%esp),%edi
 804c41c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c420:	8d 53 08             	lea    0x8(%ebx),%edx
 804c423:	8d 43 04             	lea    0x4(%ebx),%eax
                            goto closefiles;
                    }
                    break;
                }
            }
            thisfield = find_field(thisline);
 804c426:	e8 95 4c 00 00       	call   80510c0 <find_field.isra.3>
 804c42b:	89 c1                	mov    %eax,%ecx
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
 804c42d:	8b 43 08             	mov    0x8(%ebx),%eax
 804c430:	8b 53 04             	mov    0x4(%ebx),%edx
 804c433:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
            match = !different(thisfield, prevfield, thislen, prevlen);
 804c436:	83 ec 0c             	sub    $0xc,%esp
 804c439:	ff 75 b8             	pushl  -0x48(%ebp)
                    }
                    break;
                }
            }
            thisfield = find_field(thisline);
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
 804c43c:	29 c8                	sub    %ecx,%eax
 804c43e:	8d 4c 02 ff          	lea    -0x1(%edx,%eax,1),%ecx
            match = !different(thisfield, prevfield, thislen, prevlen);
 804c442:	8b 55 bc             	mov    -0x44(%ebp),%edx
 804c445:	8b 45 c4             	mov    -0x3c(%ebp),%eax
                    }
                    break;
                }
            }
            thisfield = find_field(thisline);
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
 804c448:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
            match = !different(thisfield, prevfield, thislen, prevlen);
 804c44b:	e8 40 6c 00 00       	call   8053090 <different>
 804c450:	83 f0 01             	xor    $0x1,%eax
            match_count += match;
 804c453:	31 d2                	xor    %edx,%edx
                    break;
                }
            }
            thisfield = find_field(thisline);
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
            match = !different(thisfield, prevfield, thislen, prevlen);
 804c455:	88 45 c0             	mov    %al,-0x40(%ebp)
            match_count += match;
 804c458:	0f b6 c0             	movzbl %al,%eax
 804c45b:	01 c6                	add    %eax,%esi
 804c45d:	89 45 a8             	mov    %eax,-0x58(%ebp)
 804c460:	11 d7                	adc    %edx,%edi
if(match_count < 0)  {
	report_label_coverage("ABS", 438);
}

// ROR Label 439
if((match_count != (18446744073709551615UL)) != (match_count == (18446744073709551615UL)))  {
 804c462:	89 f1                	mov    %esi,%ecx
 804c464:	83 c4 10             	add    $0x10,%esp
 804c467:	21 f9                	and    %edi,%ecx
 804c469:	83 f9 ff             	cmp    $0xffffffff,%ecx
 804c46c:	0f 94 c0             	sete   %al
 804c46f:	0f 95 c2             	setne  %dl
 804c472:	38 c2                	cmp    %al,%dl
 804c474:	74 4e                	je     804c4c4 <main+0x2f64>
 804c476:	66 90                	xchg   %ax,%ax
 804c478:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c47c:	89 3c 24             	mov    %edi,(%esp)
 804c47f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c483:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c487:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c48b:	b9 dc 81 00 00       	mov    $0x81dc,%ecx
 804c490:	e8 b3 84 00 00       	call   8054948 <__afl_maybe_log>
 804c495:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c499:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c49d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c4a1:	8b 3c 24             	mov    (%esp),%edi
 804c4a4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 439);
 804c4a8:	83 ec 08             	sub    $0x8,%esp
 804c4ab:	88 45 a4             	mov    %al,-0x5c(%ebp)
 804c4ae:	68 b7 01 00 00       	push   $0x1b7
 804c4b3:	68 17 5b 06 08       	push   $0x8065b17
 804c4b8:	e8 c3 4b 00 00       	call   8051080 <report_label_coverage>
 804c4bd:	0f b6 45 a4          	movzbl -0x5c(%ebp),%eax
 804c4c1:	83 c4 10             	add    $0x10,%esp
}
if (match_count == (18446744073709551615UL)) {
 804c4c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c4c8:	89 3c 24             	mov    %edi,(%esp)
 804c4cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c4cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c4d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c4d7:	b9 e5 ed 00 00       	mov    $0xede5,%ecx
 804c4dc:	e8 67 84 00 00       	call   8054948 <__afl_maybe_log>
 804c4e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c4e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c4e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c4ed:	8b 3c 24             	mov    (%esp),%edi
 804c4f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c4f4:	84 c0                	test   %al,%al
 804c4f6:	0f 85 b4 05 00 00    	jne    804cab0 <main+0x3550>
 804c4fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c500:	89 3c 24             	mov    %edi,(%esp)
 804c503:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c507:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c50b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c50f:	b9 4d 8b 00 00       	mov    $0x8b4d,%ecx
 804c514:	e8 2f 84 00 00       	call   8054948 <__afl_maybe_log>
 804c519:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c51d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c521:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c525:	8b 3c 24             	mov    (%esp),%edi
 804c528:	8d 64 24 10          	lea    0x10(%esp),%esp
                    error(1, 0, gettext("too many repeated lines"));
                match_count--;
            }
            
// ROR Label 440
if((delimit_groups == DM_NONE) != (delimit_groups != DM_NONE))  {
 804c52c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c530:	89 3c 24             	mov    %edi,(%esp)
 804c533:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c537:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c53b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c53f:	b9 b4 db 00 00       	mov    $0xdbb4,%ecx
 804c544:	e8 ff 83 00 00       	call   8054948 <__afl_maybe_log>
 804c549:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c54d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c551:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c555:	8b 3c 24             	mov    (%esp),%edi
 804c558:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c55c:	8b 0d 04 a3 06 08    	mov    0x806a304,%ecx
 804c562:	85 c9                	test   %ecx,%ecx
 804c564:	0f 95 c0             	setne  %al
 804c567:	0f 94 c2             	sete   %dl
 804c56a:	38 c2                	cmp    %al,%dl
 804c56c:	74 54                	je     804c5c2 <main+0x3062>
 804c56e:	66 90                	xchg   %ax,%ax
 804c570:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c574:	89 3c 24             	mov    %edi,(%esp)
 804c577:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c57b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c57f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c583:	b9 e8 f9 00 00       	mov    $0xf9e8,%ecx
 804c588:	e8 bb 83 00 00       	call   8054948 <__afl_maybe_log>
 804c58d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c591:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c595:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c599:	8b 3c 24             	mov    (%esp),%edi
 804c59c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 440);
 804c5a0:	83 ec 08             	sub    $0x8,%esp
 804c5a3:	88 45 a0             	mov    %al,-0x60(%ebp)
 804c5a6:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
 804c5a9:	68 b8 01 00 00       	push   $0x1b8
 804c5ae:	68 17 5b 06 08       	push   $0x8065b17
 804c5b3:	e8 c8 4a 00 00       	call   8051080 <report_label_coverage>
 804c5b8:	0f b6 45 a0          	movzbl -0x60(%ebp),%eax
 804c5bc:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
 804c5bf:	83 c4 10             	add    $0x10,%esp
 804c5c2:	66 90                	xchg   %ax,%ax
}
if (delimit_groups != DM_NONE) {
 804c5c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c5c8:	89 3c 24             	mov    %edi,(%esp)
 804c5cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c5cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c5d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c5d7:	b9 31 7d 00 00       	mov    $0x7d31,%ecx
 804c5dc:	e8 67 83 00 00       	call   8054948 <__afl_maybe_log>
 804c5e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c5e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c5e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c5ed:	8b 3c 24             	mov    (%esp),%edi
 804c5f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c5f4:	84 c0                	test   %al,%al
 804c5f6:	0f 84 ec 03 00 00    	je     804c9e8 <main+0x3488>
 804c5fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c600:	89 3c 24             	mov    %edi,(%esp)
 804c603:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c607:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c60b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c60f:	b9 4b 3b 00 00       	mov    $0x3b4b,%ecx
 804c614:	e8 2f 83 00 00       	call   8054948 <__afl_maybe_log>
 804c619:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c61d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c621:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c625:	8b 3c 24             	mov    (%esp),%edi
 804c628:	8d 64 24 10          	lea    0x10(%esp),%esp
                if (!match) {
 804c62c:	80 7d c0 00          	cmpb   $0x0,-0x40(%ebp)
 804c630:	0f 85 ba 04 00 00    	jne    804caf0 <main+0x3590>
 804c636:	66 90                	xchg   %ax,%ax
 804c638:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c63c:	89 3c 24             	mov    %edi,(%esp)
 804c63f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c643:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c647:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c64b:	b9 7a 84 00 00       	mov    $0x847a,%ecx
 804c650:	e8 f3 82 00 00       	call   8054948 <__afl_maybe_log>
 804c655:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c659:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c65d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c661:	8b 3c 24             	mov    (%esp),%edi
 804c664:	8d 64 24 10          	lea    0x10(%esp),%esp
// ABS Label 441
if(match_count < 0)  {
	report_label_coverage("ABS", 441);
}
if (match_count)
                        first_delimiter = 0;
 804c668:	0f b6 4d 9f          	movzbl -0x61(%ebp),%ecx
 804c66c:	89 fa                	mov    %edi,%edx
 804c66e:	b8 00 00 00 00       	mov    $0x0,%eax
 804c673:	09 f2                	or     %esi,%edx
 804c675:	0f 45 c8             	cmovne %eax,%ecx
 804c678:	88 4d 9f             	mov    %cl,-0x61(%ebp)
 804c67b:	90                   	nop
                };}

            }
            
// COR Label 453
if((!match && output_later_repeated) != (!match || output_later_repeated))  {
 804c67c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c680:	89 3c 24             	mov    %edi,(%esp)
 804c683:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c687:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c68b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c68f:	b9 25 cb 00 00       	mov    $0xcb25,%ecx
 804c694:	e8 af 82 00 00       	call   8054948 <__afl_maybe_log>
 804c699:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c69d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c6a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c6a5:	8b 3c 24             	mov    (%esp),%edi
 804c6a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c6ac:	80 3d 09 a3 06 08 00 	cmpb   $0x0,0x806a309
 804c6b3:	0f 84 07 04 00 00    	je     804cac0 <main+0x3560>
 804c6b9:	8d 76 00             	lea    0x0(%esi),%esi
 804c6bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c6c0:	89 3c 24             	mov    %edi,(%esp)
 804c6c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c6c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c6cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c6cf:	b9 c7 f3 00 00       	mov    $0xf3c7,%ecx
 804c6d4:	e8 6f 82 00 00       	call   8054948 <__afl_maybe_log>
 804c6d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c6dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c6e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c6e5:	8b 3c 24             	mov    (%esp),%edi
 804c6e8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 453);
}

// MCC Label 454
if(!match && output_later_repeated ) {
	report_label_coverage("MCC", 454);
 804c6ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c6f0:	89 3c 24             	mov    %edi,(%esp)
 804c6f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c6f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c6fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c6ff:	b9 2f 8f 00 00       	mov    $0x8f2f,%ecx
 804c704:	e8 3f 82 00 00       	call   8054948 <__afl_maybe_log>
 804c709:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c70d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c711:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c715:	8b 3c 24             	mov    (%esp),%edi
 804c718:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c71c:	50                   	push   %eax
 804c71d:	50                   	push   %eax
 804c71e:	68 c6 01 00 00       	push   $0x1c6
 804c723:	68 1b 5b 06 08       	push   $0x8065b1b
 804c728:	e8 53 49 00 00       	call   8051080 <report_label_coverage>
 804c72d:	83 c4 10             	add    $0x10,%esp

// ABS Label 459
if(match_count < 0)  {
	report_label_coverage("ABS", 459);
}
writeline(prevline, match, match_count);
 804c730:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c734:	89 3c 24             	mov    %edi,(%esp)
 804c737:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c73b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c73f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c743:	b9 ad ba 00 00       	mov    $0xbaad,%ecx
 804c748:	e8 fb 81 00 00       	call   8054948 <__afl_maybe_log>
 804c74d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c751:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c755:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c759:	8b 3c 24             	mov    (%esp),%edi
 804c75c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c760:	83 ec 08             	sub    $0x8,%esp
 804c763:	31 d2                	xor    %edx,%edx
 804c765:	57                   	push   %edi
 804c766:	56                   	push   %esi
 804c767:	8b 75 b0             	mov    -0x50(%ebp),%esi
 804c76a:	89 f0                	mov    %esi,%eax
 804c76c:	e8 5f 6e 00 00       	call   80535d0 <writeline>
                    _tmp = (prevline);
                    (prevline) = (thisline);
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
                prevlen = thislen;
 804c771:	8b 7d b4             	mov    -0x4c(%ebp),%edi
      prevlen = prevline->length - 1 - (prevfield - prevline->buffer);

      while (1)
    {
        {
            int temp_1 = !(!feof_unlocked(stdin));
 804c774:	8b 15 d0 a2 06 08    	mov    0x806a2d0,%edx

// ABS Label 459
if(match_count < 0)  {
	report_label_coverage("ABS", 459);
}
writeline(prevline, match, match_count);
 804c77a:	89 d8                	mov    %ebx,%eax
 804c77c:	83 c4 10             	add    $0x10,%esp
 804c77f:	89 f3                	mov    %esi,%ebx
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
                prevlen = thislen;
                if (!match)
                    match_count = 0;
 804c781:	31 f6                	xor    %esi,%esi
                    struct linebuffer *_tmp;
                    _tmp = (prevline);
                    (prevline) = (thisline);
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
 804c783:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

// ABS Label 459
if(match_count < 0)  {
	report_label_coverage("ABS", 459);
}
writeline(prevline, match, match_count);
 804c786:	89 45 b0             	mov    %eax,-0x50(%ebp)
                    _tmp = (prevline);
                    (prevline) = (thisline);
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
                prevlen = thislen;
 804c789:	89 7d b8             	mov    %edi,-0x48(%ebp)
                if (!match)
                    match_count = 0;
 804c78c:	31 ff                	xor    %edi,%edi
            
// ABS Label 434
if(temp_1 < 0)  {
	report_label_coverage("ABS", 434);
}
if (temp_1)
 804c78e:	f6 02 10             	testb  $0x10,(%edx)
                    struct linebuffer *_tmp;
                    _tmp = (prevline);
                    (prevline) = (thisline);
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
 804c791:	89 4d bc             	mov    %ecx,-0x44(%ebp)
            
// ABS Label 434
if(temp_1 < 0)  {
	report_label_coverage("ABS", 434);
}
if (temp_1)
 804c794:	0f 84 86 fb ff ff    	je     804c320 <main+0x2dc0>
 804c79a:	66 90                	xchg   %ax,%ax
 804c79c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c7a0:	89 3c 24             	mov    %edi,(%esp)
 804c7a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c7a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c7ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c7af:	b9 60 36 00 00       	mov    $0x3660,%ecx
 804c7b4:	e8 8f 81 00 00       	call   8054948 <__afl_maybe_log>
 804c7b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c7bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c7c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c7c5:	8b 3c 24             	mov    (%esp),%edi
 804c7c8:	8d 64 24 10          	lea    0x10(%esp),%esp
      
// ABS Label 431
if(match_count < 0)  {
	report_label_coverage("ABS", 431);
}
writeline (prevline, false, match_count);
 804c7cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c7d0:	89 3c 24             	mov    %edi,(%esp)
 804c7d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c7d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c7db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c7df:	b9 9e 1c 00 00       	mov    $0x1c9e,%ecx
 804c7e4:	e8 5f 81 00 00       	call   8054948 <__afl_maybe_log>
 804c7e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c7ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c7f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c7f5:	8b 3c 24             	mov    (%esp),%edi
 804c7f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c7fc:	50                   	push   %eax
 804c7fd:	50                   	push   %eax
 804c7fe:	31 d2                	xor    %edx,%edx
 804c800:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804c803:	57                   	push   %edi
 804c804:	56                   	push   %esi
 804c805:	e8 c6 6d 00 00       	call   80535d0 <writeline>
 804c80a:	83 c4 10             	add    $0x10,%esp
 804c80d:	8d 76 00             	lea    0x0(%esi),%esi
    }

 closefiles:
  {
    int temp_2 = ferror_unlocked(stdin);
 804c810:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c814:	89 3c 24             	mov    %edi,(%esp)
 804c817:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c81b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c81f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c823:	b9 7e 46 00 00       	mov    $0x467e,%ecx
 804c828:	e8 1b 81 00 00       	call   8054948 <__afl_maybe_log>
 804c82d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c831:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c835:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c839:	8b 3c 24             	mov    (%esp),%edi
 804c83c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c840:	8b 1d d0 a2 06 08    	mov    0x806a2d0,%ebx
    
// ABS Label 460
if(temp_2 < 0)  {
	report_label_coverage("ABS", 460);
}
if (temp_2)
 804c846:	f6 03 20             	testb  $0x20,(%ebx)
 804c849:	0f 85 f1 00 00 00    	jne    804c940 <main+0x33e0>
 804c84f:	90                   	nop
 804c850:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c854:	89 3c 24             	mov    %edi,(%esp)
 804c857:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c85b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c85f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c863:	b9 95 63 00 00       	mov    $0x6395,%ecx
 804c868:	e8 db 80 00 00       	call   8054948 <__afl_maybe_log>
 804c86d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c871:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c875:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c879:	8b 3c 24             	mov    (%esp),%edi
 804c87c:	8d 64 24 10          	lea    0x10(%esp),%esp
        goto label_2;
    else {
        int temp_1 = rpl_fclose(stdin);
 804c880:	83 ec 0c             	sub    $0xc,%esp
 804c883:	53                   	push   %ebx
 804c884:	e8 17 5c 01 00       	call   80624a0 <rpl_fclose>
        
// ABS Label 461
if(temp_1 < 0)  {
 804c889:	83 c4 10             	add    $0x10,%esp
 804c88c:	85 c0                	test   %eax,%eax
 804c88e:	0f 88 01 3d 00 00    	js     8050595 <main+0x7035>
 804c894:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c898:	89 3c 24             	mov    %edi,(%esp)
 804c89b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c89f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c8a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c8a7:	b9 c5 10 00 00       	mov    $0x10c5,%ecx
 804c8ac:	e8 97 80 00 00       	call   8054948 <__afl_maybe_log>
 804c8b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c8b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c8b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c8bd:	8b 3c 24             	mov    (%esp),%edi
 804c8c0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 461);
}

// ROR Label 462
if((temp_1 == 0) != (temp_1 != 0))  {
 804c8c4:	0f 95 c3             	setne  %bl
 804c8c7:	90                   	nop
	report_label_coverage("ROR", 462);
 804c8c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c8cc:	89 3c 24             	mov    %edi,(%esp)
 804c8cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c8d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c8d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c8db:	b9 46 64 00 00       	mov    $0x6446,%ecx
 804c8e0:	e8 63 80 00 00       	call   8054948 <__afl_maybe_log>
 804c8e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c8e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c8ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c8f1:	8b 3c 24             	mov    (%esp),%edi
 804c8f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c8f8:	56                   	push   %esi
 804c8f9:	56                   	push   %esi
 804c8fa:	68 ce 01 00 00       	push   $0x1ce
 804c8ff:	68 17 5b 06 08       	push   $0x8065b17
 804c904:	e8 77 47 00 00       	call   8051080 <report_label_coverage>
 804c909:	83 c4 10             	add    $0x10,%esp
}
if (temp_1 != 0)
 804c90c:	84 db                	test   %bl,%bl
 804c90e:	74 7f                	je     804c98f <main+0x342f>
 804c910:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c914:	89 3c 24             	mov    %edi,(%esp)
 804c917:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c91b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c91f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c923:	b9 41 f0 00 00       	mov    $0xf041,%ecx
 804c928:	e8 1b 80 00 00       	call   8054948 <__afl_maybe_log>
 804c92d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c931:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c935:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c939:	8b 3c 24             	mov    (%esp),%edi
 804c93c:	8d 64 24 10          	lea    0x10(%esp),%esp
          label_2:
            error(1, 0, gettext("error reading %s"), infile);
 804c940:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c944:	89 3c 24             	mov    %edi,(%esp)
 804c947:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c94b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c94f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c953:	b9 b4 90 00 00       	mov    $0x90b4,%ecx
 804c958:	e8 eb 7f 00 00       	call   8054948 <__afl_maybe_log>
 804c95d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c961:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c965:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c969:	8b 3c 24             	mov    (%esp),%edi
 804c96c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c970:	50                   	push   %eax
 804c971:	6a 05                	push   $0x5
 804c973:	68 45 5c 06 08       	push   $0x8065c45
 804c978:	6a 00                	push   $0x0
 804c97a:	e8 91 c8 ff ff       	call   8049210 <dcgettext@plt>
 804c97f:	ff 75 98             	pushl  -0x68(%ebp)
 804c982:	50                   	push   %eax
 804c983:	6a 00                	push   $0x0
 804c985:	6a 01                	push   $0x1
 804c987:	e8 34 c9 ff ff       	call   80492c0 <error@plt>
 804c98c:	83 c4 20             	add    $0x20,%esp
 804c98f:	90                   	nop
}
;

  /* stdout is handled via the atexit-invoked close_stdout function.  */

  free (lb1.buffer);
 804c990:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c994:	89 3c 24             	mov    %edi,(%esp)
 804c997:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c99b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c99f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c9a3:	b9 c2 ee 00 00       	mov    $0xeec2,%ecx
 804c9a8:	e8 9b 7f 00 00       	call   8054948 <__afl_maybe_log>
 804c9ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c9b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c9b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c9b9:	8b 3c 24             	mov    (%esp),%edi
 804c9bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c9c0:	83 ec 0c             	sub    $0xc,%esp
 804c9c3:	ff 75 d8             	pushl  -0x28(%ebp)
 804c9c6:	e8 d5 c7 ff ff       	call   80491a0 <free@plt>
  free (lb2.buffer);
 804c9cb:	58                   	pop    %eax
 804c9cc:	ff 75 e4             	pushl  -0x1c(%ebp)
 804c9cf:	e8 cc c7 ff ff       	call   80491a0 <free@plt>
 804c9d4:	83 c4 10             	add    $0x10,%esp
}
check_file (file[0], file[1], delimiter);

  	
return EXIT_SUCCESS;
}
 804c9d7:	8d 65 f0             	lea    -0x10(%ebp),%esp
 804c9da:	31 c0                	xor    %eax,%eax
 804c9dc:	5a                   	pop    %edx
 804c9dd:	5b                   	pop    %ebx
 804c9de:	5e                   	pop    %esi
 804c9df:	5f                   	pop    %edi
 804c9e0:	5d                   	pop    %ebp
 804c9e1:	8d 62 fc             	lea    -0x4(%edx),%esp
 804c9e4:	c3                   	ret    
 804c9e5:	8d 76 00             	lea    0x0(%esi),%esi
                };}

            }
            
// COR Label 453
if((!match && output_later_repeated) != (!match || output_later_repeated))  {
 804c9e8:	80 7d c0 00          	cmpb   $0x0,-0x40(%ebp)
 804c9ec:	0f 84 89 fc ff ff    	je     804c67b <main+0x311b>
 804c9f2:	66 90                	xchg   %ax,%ax
 804c9f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c9f8:	89 3c 24             	mov    %edi,(%esp)
 804c9fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c9ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ca03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ca07:	b9 0e 2a 00 00       	mov    $0x2a0e,%ecx
 804ca0c:	e8 37 7f 00 00       	call   8054948 <__afl_maybe_log>
 804ca11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ca15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ca19:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ca1d:	8b 3c 24             	mov    (%esp),%edi
 804ca20:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ca24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ca28:	89 3c 24             	mov    %edi,(%esp)
 804ca2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ca2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ca33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ca37:	b9 3b ce 00 00       	mov    $0xce3b,%ecx
 804ca3c:	e8 07 7f 00 00       	call   8054948 <__afl_maybe_log>
 804ca41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ca45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ca49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ca4d:	8b 3c 24             	mov    (%esp),%edi
 804ca50:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ca54:	80 3d 09 a3 06 08 00 	cmpb   $0x0,0x806a309
 804ca5b:	0f 85 50 0a 00 00    	jne    804d4b1 <main+0x3f51>
 804ca61:	8d 76 00             	lea    0x0(%esi),%esi
 804ca64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ca68:	89 3c 24             	mov    %edi,(%esp)
 804ca6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ca6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ca73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ca77:	b9 aa 76 00 00       	mov    $0x76aa,%ecx
 804ca7c:	e8 c7 7e 00 00       	call   8054948 <__afl_maybe_log>
 804ca81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ca85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ca89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ca8d:	8b 3c 24             	mov    (%esp),%edi
 804ca90:	8d 64 24 10          	lea    0x10(%esp),%esp
if(!(!match) && output_later_repeated ) {
	report_label_coverage("MCC", 456);
}
// MCC Label 457
if(!(!match) && !(output_later_repeated) ) {
	report_label_coverage("MCC", 457);
 804ca94:	83 ec 08             	sub    $0x8,%esp
 804ca97:	68 c9 01 00 00       	push   $0x1c9
 804ca9c:	68 1b 5b 06 08       	push   $0x8065b1b
 804caa1:	e8 da 45 00 00       	call   8051080 <report_label_coverage>
 804caa6:	83 c4 10             	add    $0x10,%esp
 804caa9:	e9 32 f8 ff ff       	jmp    804c2e0 <main+0x2d80>
 804caae:	66 90                	xchg   %ax,%ax
	report_label_coverage("ROR", 439);
}
if (match_count == (18446744073709551615UL)) {
                if (count_occurrences)
                    error(1, 0, gettext("too many repeated lines"));
                match_count--;
 804cab0:	be fe ff ff ff       	mov    $0xfffffffe,%esi
 804cab5:	bf ff ff ff ff       	mov    $0xffffffff,%edi
 804caba:	e9 6d fa ff ff       	jmp    804c52c <main+0x2fcc>
 804cabf:	90                   	nop

            }
            
// COR Label 453
if((!match && output_later_repeated) != (!match || output_later_repeated))  {
	report_label_coverage("COR", 453);
 804cac0:	83 ec 08             	sub    $0x8,%esp
 804cac3:	68 c5 01 00 00       	push   $0x1c5
 804cac8:	68 13 5b 06 08       	push   $0x8065b13
 804cacd:	e8 ae 45 00 00       	call   8051080 <report_label_coverage>
}

// MCC Label 454
if(!match && output_later_repeated ) {
 804cad2:	58                   	pop    %eax
 804cad3:	5a                   	pop    %edx
	report_label_coverage("MCC", 454);
}
// MCC Label 455
if(!match && !(output_later_repeated) ) {
	report_label_coverage("MCC", 455);
 804cad4:	68 c7 01 00 00       	push   $0x1c7
 804cad9:	68 1b 5b 06 08       	push   $0x8065b1b
 804cade:	e8 9d 45 00 00       	call   8051080 <report_label_coverage>
 804cae3:	83 c4 10             	add    $0x10,%esp
 804cae6:	e9 45 fc ff ff       	jmp    804c730 <main+0x31d0>
 804caeb:	90                   	nop
 804caec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
if(match_count < 0)  {
	report_label_coverage("ABS", 442);
}

// ROR Label 443
if((match_count != 1) != (match_count == 1))  {
 804caf0:	89 f2                	mov    %esi,%edx
 804caf2:	89 f8                	mov    %edi,%eax
 804caf4:	83 f2 01             	xor    $0x1,%edx
 804caf7:	09 d0                	or     %edx,%eax
 804caf9:	0f 94 c2             	sete   %dl
 804cafc:	0f 95 c0             	setne  %al
 804caff:	38 d0                	cmp    %dl,%al
 804cb01:	74 52                	je     804cb55 <main+0x35f5>
 804cb03:	90                   	nop
 804cb04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cb08:	89 3c 24             	mov    %edi,(%esp)
 804cb0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cb0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cb13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cb17:	b9 ea 00 00 00       	mov    $0xea,%ecx
 804cb1c:	e8 27 7e 00 00       	call   8054948 <__afl_maybe_log>
 804cb21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cb25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cb29:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cb2d:	8b 3c 24             	mov    (%esp),%edi
 804cb30:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 443);
 804cb34:	50                   	push   %eax
 804cb35:	50                   	push   %eax
 804cb36:	68 bb 01 00 00       	push   $0x1bb
 804cb3b:	68 17 5b 06 08       	push   $0x8065b17
 804cb40:	88 55 a0             	mov    %dl,-0x60(%ebp)
 804cb43:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
 804cb46:	e8 35 45 00 00       	call   8051080 <report_label_coverage>
 804cb4b:	0f b6 55 a0          	movzbl -0x60(%ebp),%edx
 804cb4f:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
 804cb52:	83 c4 10             	add    $0x10,%esp
 804cb55:	8d 76 00             	lea    0x0(%esi),%esi
}
if (match_count == 1) {
 804cb58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cb5c:	89 3c 24             	mov    %edi,(%esp)
 804cb5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cb63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cb67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cb6b:	b9 6f 8d 00 00       	mov    $0x8d6f,%ecx
 804cb70:	e8 d3 7d 00 00       	call   8054948 <__afl_maybe_log>
 804cb75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cb79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cb7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cb81:	8b 3c 24             	mov    (%esp),%edi
 804cb84:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cb88:	84 d2                	test   %dl,%dl
 804cb8a:	0f 84 94 fe ff ff    	je     804ca24 <main+0x34c4>
 804cb90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cb94:	89 3c 24             	mov    %edi,(%esp)
 804cb97:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cb9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cb9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cba3:	b9 87 91 00 00       	mov    $0x9187,%ecx
 804cba8:	e8 9b 7d 00 00       	call   8054948 <__afl_maybe_log>
 804cbad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cbb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cbb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cbb9:	8b 3c 24             	mov    (%esp),%edi
 804cbbc:	8d 64 24 10          	lea    0x10(%esp),%esp
                    
// COR Label 444
if(((delimit_groups == DM_PREPEND) && (delimit_groups == DM_SEPARATE && !first_delimiter)) != ((delimit_groups == DM_PREPEND) || (delimit_groups == DM_SEPARATE && !first_delimiter)))  {
 804cbc0:	83 f9 01             	cmp    $0x1,%ecx
 804cbc3:	0f 84 a7 0c 00 00    	je     804d870 <main+0x4310>
 804cbc9:	8d 76 00             	lea    0x0(%esi),%esi
 804cbcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cbd0:	89 3c 24             	mov    %edi,(%esp)
 804cbd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cbd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cbdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cbdf:	b9 fc 97 00 00       	mov    $0x97fc,%ecx
 804cbe4:	e8 5f 7d 00 00       	call   8054948 <__afl_maybe_log>
 804cbe9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cbed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cbf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cbf5:	8b 3c 24             	mov    (%esp),%edi
 804cbf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cbfc:	83 f9 02             	cmp    $0x2,%ecx
 804cbff:	0f 95 c0             	setne  %al
 804cc02:	80 7d 9f 00          	cmpb   $0x0,-0x61(%ebp)
 804cc06:	0f 85 96 00 00 00    	jne    804cca2 <main+0x3742>
 804cc0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cc10:	89 3c 24             	mov    %edi,(%esp)
 804cc13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cc17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cc1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cc1f:	b9 cb ec 00 00       	mov    $0xeccb,%ecx
 804cc24:	e8 1f 7d 00 00       	call   8054948 <__afl_maybe_log>
 804cc29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cc2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cc31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cc35:	8b 3c 24             	mov    (%esp),%edi
 804cc38:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cc3c:	84 c0                	test   %al,%al
 804cc3e:	75 62                	jne    804cca2 <main+0x3742>
 804cc40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cc44:	89 3c 24             	mov    %edi,(%esp)
 804cc47:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cc4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cc4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cc53:	b9 5f a0 00 00       	mov    $0xa05f,%ecx
 804cc58:	e8 eb 7c 00 00       	call   8054948 <__afl_maybe_log>
 804cc5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cc61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cc65:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cc69:	8b 3c 24             	mov    (%esp),%edi
 804cc6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cc70:	88 45 a4             	mov    %al,-0x5c(%ebp)
	report_label_coverage("COR", 444);
 804cc73:	50                   	push   %eax
 804cc74:	50                   	push   %eax
 804cc75:	68 bc 01 00 00       	push   $0x1bc
 804cc7a:	68 13 5b 06 08       	push   $0x8065b13
 804cc7f:	89 4d a0             	mov    %ecx,-0x60(%ebp)
 804cc82:	e8 f9 43 00 00       	call   8051080 <report_label_coverage>
if(( delimit_groups == DM_PREPEND ) && ( !(delimit_groups == DM_SEPARATE) && !(!first_delimiter) ) ) {
	report_label_coverage("MCC", 448);
}
// MCC Label 449
if(( !(delimit_groups == DM_PREPEND) ) && ( delimit_groups == DM_SEPARATE && !first_delimiter ) ) {
	report_label_coverage("MCC", 449);
 804cc87:	58                   	pop    %eax
 804cc88:	5a                   	pop    %edx
 804cc89:	68 c1 01 00 00       	push   $0x1c1
 804cc8e:	68 1b 5b 06 08       	push   $0x8065b1b
 804cc93:	e8 e8 43 00 00       	call   8051080 <report_label_coverage>
 804cc98:	0f b6 45 a4          	movzbl -0x5c(%ebp),%eax
 804cc9c:	8b 4d a0             	mov    -0x60(%ebp),%ecx
 804cc9f:	83 c4 10             	add    $0x10,%esp
 804cca2:	66 90                	xchg   %ax,%ax
}
// MCC Label 450
if(( !(delimit_groups == DM_PREPEND) ) && ( delimit_groups == DM_SEPARATE && !(!first_delimiter) ) ) {
 804cca4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cca8:	89 3c 24             	mov    %edi,(%esp)
 804ccab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ccaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ccb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ccb7:	b9 0b 4d 00 00       	mov    $0x4d0b,%ecx
 804ccbc:	e8 87 7c 00 00       	call   8054948 <__afl_maybe_log>
 804ccc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ccc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ccc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cccd:	8b 3c 24             	mov    (%esp),%edi
 804ccd0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ccd4:	83 f9 02             	cmp    $0x2,%ecx
 804ccd7:	0f 94 c2             	sete   %dl
 804ccda:	80 7d 9f 00          	cmpb   $0x0,-0x61(%ebp)
 804ccde:	0f 84 cd 09 00 00    	je     804d6b1 <main+0x4151>
 804cce4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cce8:	89 3c 24             	mov    %edi,(%esp)
 804cceb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ccef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ccf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ccf7:	b9 a3 99 00 00       	mov    $0x99a3,%ecx
 804ccfc:	e8 47 7c 00 00       	call   8054948 <__afl_maybe_log>
 804cd01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cd05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cd09:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cd0d:	8b 3c 24             	mov    (%esp),%edi
 804cd10:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cd14:	84 d2                	test   %dl,%dl
 804cd16:	0f 85 0a 39 00 00    	jne    8050626 <main+0x70c6>
 804cd1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cd20:	89 3c 24             	mov    %edi,(%esp)
 804cd23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cd27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cd2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cd2f:	b9 a0 44 00 00       	mov    $0x44a0,%ecx
 804cd34:	e8 0f 7c 00 00       	call   8054948 <__afl_maybe_log>
 804cd39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cd3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cd41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cd45:	8b 3c 24             	mov    (%esp),%edi
 804cd48:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 450);
}
// MCC Label 451
if(( !(delimit_groups == DM_PREPEND) ) && ( !(delimit_groups == DM_SEPARATE) && !first_delimiter ) ) {
 804cd4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cd50:	89 3c 24             	mov    %edi,(%esp)
 804cd53:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cd57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cd5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cd5f:	b9 75 27 00 00       	mov    $0x2775,%ecx
 804cd64:	e8 df 7b 00 00       	call   8054948 <__afl_maybe_log>
 804cd69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cd6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cd71:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cd75:	8b 3c 24             	mov    (%esp),%edi
 804cd78:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cd7c:	80 7d 9f 00          	cmpb   $0x0,-0x61(%ebp)
 804cd80:	0f 84 2b 09 00 00    	je     804d6b1 <main+0x4151>
 804cd86:	66 90                	xchg   %ax,%ax
 804cd88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cd8c:	89 3c 24             	mov    %edi,(%esp)
 804cd8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cd93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cd97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cd9b:	b9 3c 38 00 00       	mov    $0x383c,%ecx
 804cda0:	e8 a3 7b 00 00       	call   8054948 <__afl_maybe_log>
 804cda5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cda9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cdad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cdb1:	8b 3c 24             	mov    (%esp),%edi
 804cdb4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 451);
}
// MCC Label 452
if(( !(delimit_groups == DM_PREPEND) ) && ( !(delimit_groups == DM_SEPARATE) && !(!first_delimiter) ) ) {
 804cdb8:	84 c0                	test   %al,%al
 804cdba:	74 4b                	je     804ce07 <main+0x38a7>
 804cdbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cdc0:	89 3c 24             	mov    %edi,(%esp)
 804cdc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cdc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cdcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cdcf:	b9 70 5d 00 00       	mov    $0x5d70,%ecx
 804cdd4:	e8 6f 7b 00 00       	call   8054948 <__afl_maybe_log>
 804cdd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cddd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cde1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cde5:	8b 3c 24             	mov    (%esp),%edi
 804cde8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 452);
 804cdec:	50                   	push   %eax
 804cded:	50                   	push   %eax
 804cdee:	68 c4 01 00 00       	push   $0x1c4
 804cdf3:	68 1b 5b 06 08       	push   $0x8065b1b
 804cdf8:	88 55 a4             	mov    %dl,-0x5c(%ebp)
 804cdfb:	e8 80 42 00 00       	call   8051080 <report_label_coverage>
 804ce00:	0f b6 55 a4          	movzbl -0x5c(%ebp),%edx
 804ce04:	83 c4 10             	add    $0x10,%esp
 804ce07:	90                   	nop
}
if ((delimit_groups == DM_PREPEND) || (delimit_groups == DM_SEPARATE && !first_delimiter))
 804ce08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ce0c:	89 3c 24             	mov    %edi,(%esp)
 804ce0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ce13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ce17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ce1b:	b9 72 3f 00 00       	mov    $0x3f72,%ecx
 804ce20:	e8 23 7b 00 00       	call   8054948 <__afl_maybe_log>
 804ce25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ce29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ce2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ce31:	8b 3c 24             	mov    (%esp),%edi
 804ce34:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ce38:	84 d2                	test   %dl,%dl
 804ce3a:	0f 84 e4 fb ff ff    	je     804ca24 <main+0x34c4>
 804ce40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ce44:	89 3c 24             	mov    %edi,(%esp)
 804ce47:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ce4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ce4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ce53:	b9 6c 5a 00 00       	mov    $0x5a6c,%ecx
 804ce58:	e8 eb 7a 00 00       	call   8054948 <__afl_maybe_log>
 804ce5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ce61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ce65:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ce69:	8b 3c 24             	mov    (%esp),%edi
 804ce6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ce70:	80 7d 9f 00          	cmpb   $0x0,-0x61(%ebp)
 804ce74:	0f 85 aa fb ff ff    	jne    804ca24 <main+0x34c4>
 804ce7a:	66 90                	xchg   %ax,%ax
 804ce7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ce80:	89 3c 24             	mov    %edi,(%esp)
 804ce83:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ce87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ce8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ce8f:	b9 0a a0 00 00       	mov    $0xa00a,%ecx
 804ce94:	e8 af 7a 00 00       	call   8054948 <__afl_maybe_log>
 804ce99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ce9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cea1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cea5:	8b 3c 24             	mov    (%esp),%edi
 804cea8:	8d 64 24 10          	lea    0x10(%esp),%esp

/* This is defined in POSIX.1:1996.  */
__STDIO_INLINE int
putchar_unlocked (int __c)
{
  return _IO_putc_unlocked (__c, stdout);
 804ceac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ceb0:	89 3c 24             	mov    %edi,(%esp)
 804ceb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ceb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cebb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cebf:	b9 54 05 00 00       	mov    $0x554,%ecx
 804cec4:	e8 7f 7a 00 00       	call   8054948 <__afl_maybe_log>
 804cec9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cecd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ced1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ced5:	8b 3c 24             	mov    (%esp),%edi
 804ced8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cedc:	a1 d8 a2 06 08       	mov    0x806a2d8,%eax
 804cee1:	8b 50 14             	mov    0x14(%eax),%edx
 804cee4:	3b 50 18             	cmp    0x18(%eax),%edx
 804cee7:	0f 83 e0 3a 00 00    	jae    80509cd <main+0x746d>
 804ceed:	8d 76 00             	lea    0x0(%esi),%esi
 804cef0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cef4:	89 3c 24             	mov    %edi,(%esp)
 804cef7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cefb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ceff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cf03:	b9 eb fe 00 00       	mov    $0xfeeb,%ecx
 804cf08:	e8 3b 7a 00 00       	call   8054948 <__afl_maybe_log>
 804cf0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cf11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cf15:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cf19:	8b 3c 24             	mov    (%esp),%edi
 804cf1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cf20:	8d 4a 01             	lea    0x1(%edx),%ecx
 804cf23:	89 48 14             	mov    %ecx,0x14(%eax)
 804cf26:	0f b6 45 9e          	movzbl -0x62(%ebp),%eax
 804cf2a:	88 02                	mov    %al,(%edx)
 804cf2c:	e9 f3 fa ff ff       	jmp    804ca24 <main+0x34c4>
 804cf31:	8d 76 00             	lea    0x0(%esi),%esi

     3. All other cases.
  */
  
// COR Label 251
if((output_unique && output_first_repeated || countmode == count_none) != (output_unique && output_first_repeated && countmode == count_none))  {
 804cf34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cf38:	89 3c 24             	mov    %edi,(%esp)
 804cf3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cf3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cf43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cf47:	b9 3e d8 00 00       	mov    $0xd83e,%ecx
 804cf4c:	e8 f7 79 00 00       	call   8054948 <__afl_maybe_log>
 804cf51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cf55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cf59:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cf5d:	8b 3c 24             	mov    (%esp),%edi
 804cf60:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cf64:	31 db                	xor    %ebx,%ebx
 804cf66:	83 3d 0c a3 06 08 01 	cmpl   $0x1,0x806a30c
 804cf6d:	0f 94 c3             	sete   %bl
 804cf70:	85 db                	test   %ebx,%ebx
 804cf72:	0f 84 bf ed ff ff    	je     804bd37 <main+0x27d7>
 804cf78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cf7c:	89 3c 24             	mov    %edi,(%esp)
 804cf7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cf83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cf87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cf8b:	b9 d0 3c 00 00       	mov    $0x3cd0,%ecx
 804cf90:	e8 b3 79 00 00       	call   8054948 <__afl_maybe_log>
 804cf95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cf99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cf9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cfa1:	8b 3c 24             	mov    (%esp),%edi
 804cfa4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cfa8:	e9 3f ed ff ff       	jmp    804bcec <main+0x278c>
 804cfad:	8d 76 00             	lea    0x0(%esi),%esi
if (temp_1)
        error(1, (*__errno_location()), "%s", infile);
}
;
  {
    int temp_1 = !((strcmp(outfile, "-") == 0) || freopen_safer(outfile, "w", stdout));
 804cfb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cfb4:	89 3c 24             	mov    %edi,(%esp)
 804cfb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cfbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cfbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cfc3:	b9 77 68 00 00       	mov    $0x6877,%ecx
 804cfc8:	e8 7b 79 00 00       	call   8054948 <__afl_maybe_log>
 804cfcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cfd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cfd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cfd9:	8b 3c 24             	mov    (%esp),%edi
 804cfdc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cfe0:	80 7e 01 00          	cmpb   $0x0,0x1(%esi)
 804cfe4:	0f 84 e9 eb ff ff    	je     804bbd3 <main+0x2673>
 804cfea:	66 90                	xchg   %ax,%ax
 804cfec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cff0:	89 3c 24             	mov    %edi,(%esp)
 804cff3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cff7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cffb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cfff:	b9 cb 6b 00 00       	mov    $0x6bcb,%ecx
 804d004:	e8 3f 79 00 00       	call   8054948 <__afl_maybe_log>
 804d009:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d00d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d011:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d015:	8b 3c 24             	mov    (%esp),%edi
 804d018:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d01c:	e9 1f eb ff ff       	jmp    804bb40 <main+0x25e0>
 804d021:	8d 76 00             	lea    0x0(%esi),%esi
{
  struct linebuffer lb1, lb2;
  struct linebuffer *thisline, *prevline;

  {
    int temp_1 = !((strcmp(infile, "-") == 0) || freopen_safer(infile, "r", stdin));
 804d024:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d028:	89 3c 24             	mov    %edi,(%esp)
 804d02b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d02f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d033:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d037:	b9 2c 27 00 00       	mov    $0x272c,%ecx
 804d03c:	e8 07 79 00 00       	call   8054948 <__afl_maybe_log>
 804d041:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d045:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d049:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d04d:	8b 3c 24             	mov    (%esp),%edi
 804d050:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d054:	80 7f 01 00          	cmpb   $0x0,0x1(%edi)
 804d058:	0f 84 73 ea ff ff    	je     804bad1 <main+0x2571>
 804d05e:	66 90                	xchg   %ax,%ax
 804d060:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d064:	89 3c 24             	mov    %edi,(%esp)
 804d067:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d06b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d06f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d073:	b9 7b 0d 00 00       	mov    $0xd7b,%ecx
 804d078:	e8 cb 78 00 00       	call   8054948 <__afl_maybe_log>
 804d07d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d081:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d085:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d089:	8b 3c 24             	mov    (%esp),%edi
 804d08c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d090:	e9 a7 e9 ff ff       	jmp    804ba3c <main+0x24dc>
 804d095:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 257
if(output_unique && !(output_first_repeated) && !(countmode == count_none) ) {
	report_label_coverage("MCC", 257);
}
// MCC Label 258
if(!(output_unique) && output_first_repeated && countmode == count_none ) {
 804d098:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d09c:	89 3c 24             	mov    %edi,(%esp)
 804d09f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d0a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d0a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d0ab:	b9 23 f6 00 00       	mov    $0xf623,%ecx
 804d0b0:	e8 93 78 00 00       	call   8054948 <__afl_maybe_log>
 804d0b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d0b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d0bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d0c1:	8b 3c 24             	mov    (%esp),%edi
 804d0c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d0c8:	84 c0                	test   %al,%al
 804d0ca:	0f b6 1d 0a a3 06 08 	movzbl 0x806a30a,%ebx
 804d0d1:	74 69                	je     804d13c <main+0x3bdc>
 804d0d3:	90                   	nop
 804d0d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d0d8:	89 3c 24             	mov    %edi,(%esp)
 804d0db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d0df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d0e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d0e7:	b9 26 eb 00 00       	mov    $0xeb26,%ecx
 804d0ec:	e8 57 78 00 00       	call   8054948 <__afl_maybe_log>
 804d0f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d0f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d0f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d0fd:	8b 3c 24             	mov    (%esp),%edi
 804d100:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d104:	84 db                	test   %bl,%bl
 804d106:	0f 85 17 36 00 00    	jne    8050723 <main+0x71c3>
 804d10c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d110:	89 3c 24             	mov    %edi,(%esp)
 804d113:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d117:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d11b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d11f:	b9 7e 85 00 00       	mov    $0x857e,%ecx
 804d124:	e8 1f 78 00 00       	call   8054948 <__afl_maybe_log>
 804d129:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d12d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d131:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d135:	8b 3c 24             	mov    (%esp),%edi
 804d138:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 258);
}
// MCC Label 259
if(!(output_unique) && output_first_repeated && !(countmode == count_none) ) {
 804d13c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d140:	89 3c 24             	mov    %edi,(%esp)
 804d143:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d147:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d14b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d14f:	b9 d0 8e 00 00       	mov    $0x8ed0,%ecx
 804d154:	e8 ef 77 00 00       	call   8054948 <__afl_maybe_log>
 804d159:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d15d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d161:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d165:	8b 3c 24             	mov    (%esp),%edi
 804d168:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d16c:	84 d2                	test   %dl,%dl
 804d16e:	0f 84 8d 00 00 00    	je     804d201 <main+0x3ca1>
 804d174:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d178:	89 3c 24             	mov    %edi,(%esp)
 804d17b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d17f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d183:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d187:	b9 25 07 00 00       	mov    $0x725,%ecx
 804d18c:	e8 b7 77 00 00       	call   8054948 <__afl_maybe_log>
 804d191:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d195:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d199:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d19d:	8b 3c 24             	mov    (%esp),%edi
 804d1a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d1a4:	84 db                	test   %bl,%bl
 804d1a6:	74 59                	je     804d201 <main+0x3ca1>
 804d1a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d1ac:	89 3c 24             	mov    %edi,(%esp)
 804d1af:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d1b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d1b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d1bb:	b9 c8 e7 00 00       	mov    $0xe7c8,%ecx
 804d1c0:	e8 83 77 00 00       	call   8054948 <__afl_maybe_log>
 804d1c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d1c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d1cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d1d1:	8b 3c 24             	mov    (%esp),%edi
 804d1d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d1d8:	88 45 c0             	mov    %al,-0x40(%ebp)
	report_label_coverage("MCC", 259);
 804d1db:	50                   	push   %eax
 804d1dc:	50                   	push   %eax
 804d1dd:	68 03 01 00 00       	push   $0x103
 804d1e2:	68 1b 5b 06 08       	push   $0x8065b1b
 804d1e7:	88 5d bc             	mov    %bl,-0x44(%ebp)
 804d1ea:	88 55 c4             	mov    %dl,-0x3c(%ebp)
 804d1ed:	e8 8e 3e 00 00       	call   8051080 <report_label_coverage>
 804d1f2:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 804d1f6:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
 804d1fa:	83 c4 10             	add    $0x10,%esp
 804d1fd:	0f b6 5d bc          	movzbl -0x44(%ebp),%ebx
 804d201:	8d 76 00             	lea    0x0(%esi),%esi
}
// MCC Label 260
if(!(output_unique) && !(output_first_repeated) && countmode == count_none ) {
 804d204:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d208:	89 3c 24             	mov    %edi,(%esp)
 804d20b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d20f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d213:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d217:	b9 0e a9 00 00       	mov    $0xa90e,%ecx
 804d21c:	e8 27 77 00 00       	call   8054948 <__afl_maybe_log>
 804d221:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d225:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d229:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d22d:	8b 3c 24             	mov    (%esp),%edi
 804d230:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d234:	38 d8                	cmp    %bl,%al
 804d236:	0f 87 8d 34 00 00    	ja     80506c9 <main+0x7169>
 804d23c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d240:	89 3c 24             	mov    %edi,(%esp)
 804d243:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d247:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d24b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d24f:	b9 e6 30 00 00       	mov    $0x30e6,%ecx
 804d254:	e8 ef 76 00 00       	call   8054948 <__afl_maybe_log>
 804d259:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d25d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d261:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d265:	8b 3c 24             	mov    (%esp),%edi
 804d268:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 260);
}
// MCC Label 261
if(!(output_unique) && !(output_first_repeated) && !(countmode == count_none) ) {
 804d26c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d270:	89 3c 24             	mov    %edi,(%esp)
 804d273:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d277:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d27b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d27f:	b9 c6 28 00 00       	mov    $0x28c6,%ecx
 804d284:	e8 bf 76 00 00       	call   8054948 <__afl_maybe_log>
 804d289:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d28d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d291:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d295:	8b 3c 24             	mov    (%esp),%edi
 804d298:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d29c:	38 da                	cmp    %bl,%dl
 804d29e:	0f 86 00 ef ff ff    	jbe    804c1a4 <main+0x2c44>
 804d2a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d2a8:	89 3c 24             	mov    %edi,(%esp)
 804d2ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d2af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d2b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d2b7:	b9 25 41 00 00       	mov    $0x4125,%ecx
 804d2bc:	e8 87 76 00 00       	call   8054948 <__afl_maybe_log>
 804d2c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d2c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d2c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d2cd:	8b 3c 24             	mov    (%esp),%edi
 804d2d0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 261);
 804d2d4:	50                   	push   %eax
 804d2d5:	50                   	push   %eax
 804d2d6:	68 05 01 00 00       	push   $0x105
 804d2db:	68 1b 5b 06 08       	push   $0x8065b1b
 804d2e0:	e8 9b 3d 00 00       	call   8051080 <report_label_coverage>
 804d2e5:	83 c4 10             	add    $0x10,%esp
 804d2e8:	e9 b7 ee ff ff       	jmp    804c1a4 <main+0x2c44>
 804d2ed:	8d 76 00             	lea    0x0(%esi),%esi
// COR Label 251
if((output_unique && output_first_repeated || countmode == count_none) != (output_unique && output_first_repeated && countmode == count_none))  {
	report_label_coverage("COR", 251);
}
// COR Label 252
if((output_unique || output_first_repeated) != (output_unique && output_first_repeated))  {
 804d2f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d2f4:	89 3c 24             	mov    %edi,(%esp)
 804d2f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d2fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d2ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d303:	b9 43 c0 00 00       	mov    $0xc043,%ecx
 804d308:	e8 3b 76 00 00       	call   8054948 <__afl_maybe_log>
 804d30d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d311:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d315:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d319:	8b 3c 24             	mov    (%esp),%edi
 804d31c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d320:	80 3d 0a a3 06 08 00 	cmpb   $0x0,0x806a30a
 804d327:	0f 84 43 02 00 00    	je     804d570 <main+0x4010>
 804d32d:	8d 76 00             	lea    0x0(%esi),%esi
 804d330:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d334:	89 3c 24             	mov    %edi,(%esp)
 804d337:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d33b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d33f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d343:	b9 3f 71 00 00       	mov    $0x713f,%ecx
 804d348:	e8 fb 75 00 00       	call   8054948 <__afl_maybe_log>
 804d34d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d351:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d355:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d359:	8b 3c 24             	mov    (%esp),%edi
 804d35c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 252);
}

// ROR Label 253
if((countmode != count_none) != (countmode == count_none))  {
 804d360:	8b 3d 0c a3 06 08    	mov    0x806a30c,%edi
 804d366:	83 ef 01             	sub    $0x1,%edi
 804d369:	0f 95 c2             	setne  %dl
 804d36c:	0f 94 c0             	sete   %al
 804d36f:	38 c2                	cmp    %al,%dl
 804d371:	0f 85 e1 ea ff ff    	jne    804be58 <main+0x28f8>
 804d377:	90                   	nop
 804d378:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d37c:	89 3c 24             	mov    %edi,(%esp)
 804d37f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d383:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d387:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d38b:	b9 91 a7 00 00       	mov    $0xa791,%ecx
 804d390:	e8 b3 75 00 00       	call   8054948 <__afl_maybe_log>
 804d395:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d399:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d39d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d3a1:	8b 3c 24             	mov    (%esp),%edi
 804d3a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d3a8:	e9 6f eb ff ff       	jmp    804bf1c <main+0x29bc>
 804d3ad:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 507
if(countmode == count_occurrences && !(output_later_repeated) ) {
	report_label_coverage("MCC", 507);
}
// MCC Label 508
if(!(countmode == count_occurrences) && output_later_repeated ) {
 804d3b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d3b4:	89 3c 24             	mov    %edi,(%esp)
 804d3b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d3bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d3bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d3c3:	b9 90 31 00 00       	mov    $0x3190,%ecx
 804d3c8:	e8 7b 75 00 00       	call   8054948 <__afl_maybe_log>
 804d3cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d3d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d3d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d3d9:	8b 3c 24             	mov    (%esp),%edi
 804d3dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d3e0:	80 3d 09 a3 06 08 00 	cmpb   $0x0,0x806a309
 804d3e7:	0f 85 e7 03 00 00    	jne    804d7d4 <main+0x4274>
 804d3ed:	8d 76 00             	lea    0x0(%esi),%esi
 804d3f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d3f4:	89 3c 24             	mov    %edi,(%esp)
 804d3f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d3fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d3ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d403:	b9 e1 95 00 00       	mov    $0x95e1,%ecx
 804d408:	e8 3b 75 00 00       	call   8054948 <__afl_maybe_log>
 804d40d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d411:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d415:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d419:	8b 3c 24             	mov    (%esp),%edi
 804d41c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 508);
}
// MCC Label 509
if(!(countmode == count_occurrences) && !(output_later_repeated) ) {
	report_label_coverage("MCC", 509);
 804d420:	50                   	push   %eax
 804d421:	50                   	push   %eax
 804d422:	68 fd 01 00 00       	push   $0x1fd
 804d427:	68 1b 5b 06 08       	push   $0x8065b1b
 804d42c:	e8 4f 3c 00 00       	call   8051080 <report_label_coverage>
 804d431:	83 c4 10             	add    $0x10,%esp
 804d434:	e9 8f e5 ff ff       	jmp    804b9c8 <main+0x2468>
 804d439:	8d 76 00             	lea    0x0(%esi),%esi
                        
// ABS Label 437
if(temp_2 < 0)  {
	report_label_coverage("ABS", 437);
}
if (temp_2)
 804d43c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d440:	89 3c 24             	mov    %edi,(%esp)
 804d443:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d447:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d44b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d44f:	b9 8d 8f 00 00       	mov    $0x8f8d,%ecx
 804d454:	e8 ef 74 00 00       	call   8054948 <__afl_maybe_log>
 804d459:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d45d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d461:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d465:	8b 3c 24             	mov    (%esp),%edi
 804d468:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d46c:	8b 15 d0 a2 06 08    	mov    0x806a2d0,%edx
 804d472:	f6 02 20             	testb  $0x20,(%edx)
 804d475:	0f 84 51 f3 ff ff    	je     804c7cc <main+0x326c>
 804d47b:	90                   	nop
 804d47c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d480:	89 3c 24             	mov    %edi,(%esp)
 804d483:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d487:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d48b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d48f:	b9 27 91 00 00       	mov    $0x9127,%ecx
 804d494:	e8 af 74 00 00       	call   8054948 <__afl_maybe_log>
 804d499:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d49d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d4a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d4a5:	8b 3c 24             	mov    (%esp),%edi
 804d4a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d4ac:	e9 8f f4 ff ff       	jmp    804c940 <main+0x33e0>
 804d4b1:	8d 76 00             	lea    0x0(%esi),%esi

            }
            
// COR Label 453
if((!match && output_later_repeated) != (!match || output_later_repeated))  {
	report_label_coverage("COR", 453);
 804d4b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d4b8:	89 3c 24             	mov    %edi,(%esp)
 804d4bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d4bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d4c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d4c7:	b9 9e a9 00 00       	mov    $0xa99e,%ecx
 804d4cc:	e8 77 74 00 00       	call   8054948 <__afl_maybe_log>
 804d4d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d4d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d4d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d4dd:	8b 3c 24             	mov    (%esp),%edi
 804d4e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d4e4:	52                   	push   %edx
 804d4e5:	52                   	push   %edx
 804d4e6:	68 c5 01 00 00       	push   $0x1c5
 804d4eb:	68 13 5b 06 08       	push   $0x8065b13
 804d4f0:	e8 8b 3b 00 00       	call   8051080 <report_label_coverage>
}

// MCC Label 454
if(!match && output_later_repeated ) {
 804d4f5:	83 c4 10             	add    $0x10,%esp
 804d4f8:	80 7d c0 00          	cmpb   $0x0,-0x40(%ebp)
 804d4fc:	0f 84 ea f1 ff ff    	je     804c6ec <main+0x318c>
 804d502:	66 90                	xchg   %ax,%ax
 804d504:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d508:	89 3c 24             	mov    %edi,(%esp)
 804d50b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d50f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d513:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d517:	b9 17 9e 00 00       	mov    $0x9e17,%ecx
 804d51c:	e8 27 74 00 00       	call   8054948 <__afl_maybe_log>
 804d521:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d525:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d529:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d52d:	8b 3c 24             	mov    (%esp),%edi
 804d530:	8d 64 24 10          	lea    0x10(%esp),%esp
if(!match && !(output_later_repeated) ) {
	report_label_coverage("MCC", 455);
}
// MCC Label 456
if(!(!match) && output_later_repeated ) {
	report_label_coverage("MCC", 456);
 804d534:	50                   	push   %eax
 804d535:	50                   	push   %eax
 804d536:	68 c8 01 00 00       	push   $0x1c8
 804d53b:	68 1b 5b 06 08       	push   $0x8065b1b
 804d540:	e8 3b 3b 00 00       	call   8051080 <report_label_coverage>

// ABS Label 459
if(match_count < 0)  {
	report_label_coverage("ABS", 459);
}
writeline(prevline, match, match_count);
 804d545:	58                   	pop    %eax
 804d546:	5a                   	pop    %edx
 804d547:	8b 45 b0             	mov    -0x50(%ebp),%eax
 804d54a:	8b 55 a8             	mov    -0x58(%ebp),%edx
 804d54d:	57                   	push   %edi
 804d54e:	56                   	push   %esi
 804d54f:	e8 7c 60 00 00       	call   80535d0 <writeline>
                    _tmp = (prevline);
                    (prevline) = (thisline);
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
                prevlen = thislen;
 804d554:	8b 55 b4             	mov    -0x4c(%ebp),%edx
                    struct linebuffer *_tmp;
                    _tmp = (prevline);
                    (prevline) = (thisline);
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
 804d557:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

// ABS Label 459
if(match_count < 0)  {
	report_label_coverage("ABS", 459);
}
writeline(prevline, match, match_count);
 804d55a:	89 d8                	mov    %ebx,%eax
 804d55c:	83 c4 10             	add    $0x10,%esp
 804d55f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
 804d562:	89 45 b0             	mov    %eax,-0x50(%ebp)
                    _tmp = (prevline);
                    (prevline) = (thisline);
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
                prevlen = thislen;
 804d565:	89 55 b8             	mov    %edx,-0x48(%ebp)
                    struct linebuffer *_tmp;
                    _tmp = (prevline);
                    (prevline) = (thisline);
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
 804d568:	89 4d bc             	mov    %ecx,-0x44(%ebp)
 804d56b:	e9 70 ed ff ff       	jmp    804c2e0 <main+0x2d80>
if((output_unique && output_first_repeated || countmode == count_none) != (output_unique && output_first_repeated && countmode == count_none))  {
	report_label_coverage("COR", 251);
}
// COR Label 252
if((output_unique || output_first_repeated) != (output_unique && output_first_repeated))  {
	report_label_coverage("COR", 252);
 804d570:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d574:	89 3c 24             	mov    %edi,(%esp)
 804d577:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d57b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d57f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d583:	b9 94 f9 00 00       	mov    $0xf994,%ecx
 804d588:	e8 bb 73 00 00       	call   8054948 <__afl_maybe_log>
 804d58d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d591:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d595:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d599:	8b 3c 24             	mov    (%esp),%edi
 804d59c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d5a0:	57                   	push   %edi
 804d5a1:	57                   	push   %edi
 804d5a2:	68 fc 00 00 00       	push   $0xfc
 804d5a7:	68 13 5b 06 08       	push   $0x8065b13
 804d5ac:	88 4d c4             	mov    %cl,-0x3c(%ebp)
 804d5af:	e8 cc 3a 00 00       	call   8051080 <report_label_coverage>
 804d5b4:	83 c4 10             	add    $0x10,%esp
 804d5b7:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
 804d5bb:	e9 20 e8 ff ff       	jmp    804bde0 <main+0x2880>
// MCC Label 500
if(grouping != GM_NONE && countmode != count_none ) {
	report_label_coverage("MCC", 500);
}
// MCC Label 501
if(grouping != GM_NONE && !(countmode != count_none) ) {
 804d5c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d5c4:	89 3c 24             	mov    %edi,(%esp)
 804d5c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d5cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d5cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d5d3:	b9 b0 06 00 00       	mov    $0x6b0,%ecx
 804d5d8:	e8 6b 73 00 00       	call   8054948 <__afl_maybe_log>
 804d5dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d5e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d5e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d5e9:	8b 3c 24             	mov    (%esp),%edi
 804d5ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d5f0:	89 fa                	mov    %edi,%edx
 804d5f2:	84 d2                	test   %dl,%dl
 804d5f4:	74 46                	je     804d63c <main+0x40dc>
 804d5f6:	66 90                	xchg   %ax,%ax
 804d5f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d5fc:	89 3c 24             	mov    %edi,(%esp)
 804d5ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d603:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d607:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d60b:	b9 cd 06 00 00       	mov    $0x6cd,%ecx
 804d610:	e8 33 73 00 00       	call   8054948 <__afl_maybe_log>
 804d615:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d619:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d61d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d621:	8b 3c 24             	mov    (%esp),%edi
 804d624:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 501);
 804d628:	57                   	push   %edi
 804d629:	57                   	push   %edi
 804d62a:	68 f5 01 00 00       	push   $0x1f5
 804d62f:	68 1b 5b 06 08       	push   $0x8065b1b
 804d634:	e8 47 3a 00 00       	call   8051080 <report_label_coverage>
 804d639:	83 c4 10             	add    $0x10,%esp
      usage (EXIT_FAILURE);
    }

  
// COR Label 504
if((countmode == count_occurrences || output_later_repeated) != (countmode == count_occurrences && output_later_repeated))  {
 804d63c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d640:	89 3c 24             	mov    %edi,(%esp)
 804d643:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d647:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d64b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d64f:	b9 2e 69 00 00       	mov    $0x692e,%ecx
 804d654:	e8 ef 72 00 00       	call   8054948 <__afl_maybe_log>
 804d659:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d65d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d661:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d665:	8b 3c 24             	mov    (%esp),%edi
 804d668:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d66c:	80 3d 09 a3 06 08 00 	cmpb   $0x0,0x806a309
 804d673:	0f 84 13 e2 ff ff    	je     804b88c <main+0x232c>
 804d679:	8d 76 00             	lea    0x0(%esi),%esi
 804d67c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d680:	89 3c 24             	mov    %edi,(%esp)
 804d683:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d687:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d68b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d68f:	b9 20 5e 00 00       	mov    $0x5e20,%ecx
 804d694:	e8 af 72 00 00       	call   8054948 <__afl_maybe_log>
 804d699:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d69d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d6a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d6a5:	8b 3c 24             	mov    (%esp),%edi
 804d6a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d6ac:	e9 97 e1 ff ff       	jmp    804b848 <main+0x22e8>
 804d6b1:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 450
if(( !(delimit_groups == DM_PREPEND) ) && ( delimit_groups == DM_SEPARATE && !(!first_delimiter) ) ) {
	report_label_coverage("MCC", 450);
}
// MCC Label 451
if(( !(delimit_groups == DM_PREPEND) ) && ( !(delimit_groups == DM_SEPARATE) && !first_delimiter ) ) {
 804d6b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d6b8:	89 3c 24             	mov    %edi,(%esp)
 804d6bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d6bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d6c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d6c7:	b9 85 67 00 00       	mov    $0x6785,%ecx
 804d6cc:	e8 77 72 00 00       	call   8054948 <__afl_maybe_log>
 804d6d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d6d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d6d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d6dd:	8b 3c 24             	mov    (%esp),%edi
 804d6e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d6e4:	84 d2                	test   %dl,%dl
 804d6e6:	0f 85 1b f7 ff ff    	jne    804ce07 <main+0x38a7>
 804d6ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d6f0:	89 3c 24             	mov    %edi,(%esp)
 804d6f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d6f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d6fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d6ff:	b9 f8 92 00 00       	mov    $0x92f8,%ecx
 804d704:	e8 3f 72 00 00       	call   8054948 <__afl_maybe_log>
 804d709:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d70d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d711:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d715:	8b 3c 24             	mov    (%esp),%edi
 804d718:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 451);
 804d71c:	50                   	push   %eax
 804d71d:	50                   	push   %eax
 804d71e:	68 c3 01 00 00       	push   $0x1c3
 804d723:	68 1b 5b 06 08       	push   $0x8065b1b
 804d728:	e8 53 39 00 00       	call   8051080 <report_label_coverage>
 804d72d:	83 c4 10             	add    $0x10,%esp
 804d730:	e9 ef f2 ff ff       	jmp    804ca24 <main+0x34c4>
 804d735:	8d 76 00             	lea    0x0(%esi),%esi
if(grouping != GM_NONE && !(output_option_used) ) {
	report_label_coverage("MCC", 494);
}
// MCC Label 495
if(!(grouping != GM_NONE) && output_option_used ) {
	report_label_coverage("MCC", 495);
 804d738:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d73c:	89 3c 24             	mov    %edi,(%esp)
 804d73f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d743:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d747:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d74b:	b9 3b 1d 00 00       	mov    $0x1d3b,%ecx
 804d750:	e8 f3 71 00 00       	call   8054948 <__afl_maybe_log>
 804d755:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d759:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d75d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d761:	8b 3c 24             	mov    (%esp),%edi
 804d764:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d768:	50                   	push   %eax
 804d769:	50                   	push   %eax
 804d76a:	68 ef 01 00 00       	push   $0x1ef
 804d76f:	68 1b 5b 06 08       	push   $0x8065b1b
 804d774:	e8 07 39 00 00       	call   8051080 <report_label_coverage>
 804d779:	83 c4 10             	add    $0x10,%esp
 804d77c:	e9 d3 d4 ff ff       	jmp    804ac54 <main+0x16f4>
 804d781:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ROR", 492);
}

// MCC Label 493
if(grouping != GM_NONE && output_option_used ) {
	report_label_coverage("MCC", 493);
 804d784:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d788:	89 3c 24             	mov    %edi,(%esp)
 804d78b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d78f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d793:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d797:	b9 83 50 00 00       	mov    $0x5083,%ecx
 804d79c:	e8 a7 71 00 00       	call   8054948 <__afl_maybe_log>
 804d7a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d7a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d7a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d7ad:	8b 3c 24             	mov    (%esp),%edi
 804d7b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d7b4:	52                   	push   %edx
 804d7b5:	52                   	push   %edx
 804d7b6:	68 ed 01 00 00       	push   $0x1ed
 804d7bb:	68 1b 5b 06 08       	push   $0x8065b1b
 804d7c0:	e8 bb 38 00 00       	call   8051080 <report_label_coverage>
if(!(grouping != GM_NONE) && !(output_option_used) ) {
	report_label_coverage("MCC", 496);
}
if (grouping != GM_NONE && output_option_used)
    {
      error (0, 0, _("--group is mutually exclusive with -c/-d/-D/-u"));
 804d7c5:	83 c4 0c             	add    $0xc,%esp
 804d7c8:	6a 05                	push   $0x5
 804d7ca:	68 84 64 06 08       	push   $0x8066484
 804d7cf:	e9 28 d7 ff ff       	jmp    804aefc <main+0x199c>
if(countmode == count_occurrences && !(output_later_repeated) ) {
	report_label_coverage("MCC", 507);
}
// MCC Label 508
if(!(countmode == count_occurrences) && output_later_repeated ) {
	report_label_coverage("MCC", 508);
 804d7d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d7d8:	89 3c 24             	mov    %edi,(%esp)
 804d7db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d7df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d7e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d7e7:	b9 42 e1 00 00       	mov    $0xe142,%ecx
 804d7ec:	e8 57 71 00 00       	call   8054948 <__afl_maybe_log>
 804d7f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d7f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d7f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d7fd:	8b 3c 24             	mov    (%esp),%edi
 804d800:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d804:	50                   	push   %eax
 804d805:	50                   	push   %eax
 804d806:	68 fc 01 00 00       	push   $0x1fc
 804d80b:	68 1b 5b 06 08       	push   $0x8065b1b
 804d810:	e8 6b 38 00 00       	call   8051080 <report_label_coverage>
 804d815:	83 c4 10             	add    $0x10,%esp
 804d818:	e9 ab e1 ff ff       	jmp    804b9c8 <main+0x2468>
 804d81d:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ROR", 505);
}

// MCC Label 506
if(countmode == count_occurrences && output_later_repeated ) {
	report_label_coverage("MCC", 506);
 804d820:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d824:	89 3c 24             	mov    %edi,(%esp)
 804d827:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d82b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d82f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d833:	b9 8a 93 00 00       	mov    $0x938a,%ecx
 804d838:	e8 0b 71 00 00       	call   8054948 <__afl_maybe_log>
 804d83d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d841:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d845:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d849:	8b 3c 24             	mov    (%esp),%edi
 804d84c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d850:	52                   	push   %edx
 804d851:	52                   	push   %edx
 804d852:	68 fa 01 00 00       	push   $0x1fa
 804d857:	68 1b 5b 06 08       	push   $0x8065b1b
 804d85c:	e8 1f 38 00 00       	call   8051080 <report_label_coverage>
	report_label_coverage("MCC", 509);
}
if (countmode == count_occurrences && output_later_repeated)
    {
      error (0, 0,
           _("printing all duplicated lines and repeat counts is meaningless"));
 804d861:	83 c4 0c             	add    $0xc,%esp
 804d864:	6a 05                	push   $0x5
 804d866:	68 e8 64 06 08       	push   $0x80664e8
 804d86b:	e9 8c d6 ff ff       	jmp    804aefc <main+0x199c>
}
if (match_count == 1) {
                    
// COR Label 444
if(((delimit_groups == DM_PREPEND) && (delimit_groups == DM_SEPARATE && !first_delimiter)) != ((delimit_groups == DM_PREPEND) || (delimit_groups == DM_SEPARATE && !first_delimiter)))  {
	report_label_coverage("COR", 444);
 804d870:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d874:	89 3c 24             	mov    %edi,(%esp)
 804d877:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d87b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d87f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d883:	b9 20 c1 00 00       	mov    $0xc120,%ecx
 804d888:	e8 bb 70 00 00       	call   8054948 <__afl_maybe_log>
 804d88d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d891:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d895:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d899:	8b 3c 24             	mov    (%esp),%edi
 804d89c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d8a0:	50                   	push   %eax
 804d8a1:	50                   	push   %eax
 804d8a2:	68 bc 01 00 00       	push   $0x1bc
 804d8a7:	68 13 5b 06 08       	push   $0x8065b13
 804d8ac:	e8 cf 37 00 00       	call   8051080 <report_label_coverage>
// MCC Label 446
if(( delimit_groups == DM_PREPEND ) && ( delimit_groups == DM_SEPARATE && !(!first_delimiter) ) ) {
	report_label_coverage("MCC", 446);
}
// MCC Label 447
if(( delimit_groups == DM_PREPEND ) && ( !(delimit_groups == DM_SEPARATE) && !first_delimiter ) ) {
 804d8b1:	83 c4 10             	add    $0x10,%esp
 804d8b4:	80 7d 9f 00          	cmpb   $0x0,-0x61(%ebp)
 804d8b8:	0f 84 24 01 00 00    	je     804d9e2 <main+0x4482>
 804d8be:	66 90                	xchg   %ax,%ax
 804d8c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d8c4:	89 3c 24             	mov    %edi,(%esp)
 804d8c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d8cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d8cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d8d3:	b9 28 03 00 00       	mov    $0x328,%ecx
 804d8d8:	e8 6b 70 00 00       	call   8054948 <__afl_maybe_log>
 804d8dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d8e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d8e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d8e9:	8b 3c 24             	mov    (%esp),%edi
 804d8ec:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 447);
}
// MCC Label 448
if(( delimit_groups == DM_PREPEND ) && ( !(delimit_groups == DM_SEPARATE) && !(!first_delimiter) ) ) {
	report_label_coverage("MCC", 448);
 804d8f0:	50                   	push   %eax
 804d8f1:	50                   	push   %eax
 804d8f2:	68 c0 01 00 00       	push   $0x1c0
 804d8f7:	68 1b 5b 06 08       	push   $0x8065b1b
 804d8fc:	e8 7f 37 00 00       	call   8051080 <report_label_coverage>
 804d901:	83 c4 10             	add    $0x10,%esp
 804d904:	e9 a3 f5 ff ff       	jmp    804ceac <main+0x394c>
 804d909:	8d 76 00             	lea    0x0(%esi),%esi
    else
        switch (optc) {
          case 1:
            {
                unsigned long size;
                if (optarg[0] == '+' && posix2_version() < 200112 && xstrtoul(optarg, ((void *)0), 10, &size, "") == LONGINT_OK && size <= (18446744073709551615UL))
 804d90c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d910:	89 3c 24             	mov    %edi,(%esp)
 804d913:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d91b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d91f:	b9 cc 9d 00 00       	mov    $0x9dcc,%ecx
 804d924:	e8 1f 70 00 00       	call   8054948 <__afl_maybe_log>
 804d929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d92d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d931:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d935:	8b 3c 24             	mov    (%esp),%edi
 804d938:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d93c:	e8 5f a5 00 00       	call   8057ea0 <posix2_version>
 804d941:	3d af 0d 03 00       	cmp    $0x30daf,%eax
 804d946:	0f 8f c4 ce ff ff    	jg     804a810 <main+0x12b0>
 804d94c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d950:	89 3c 24             	mov    %edi,(%esp)
 804d953:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d957:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d95b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d95f:	b9 ed 68 00 00       	mov    $0x68ed,%ecx
 804d964:	e8 df 6f 00 00       	call   8054948 <__afl_maybe_log>
 804d969:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d96d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d971:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d975:	8b 3c 24             	mov    (%esp),%edi
 804d978:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d97c:	8d 45 dc             	lea    -0x24(%ebp),%eax
 804d97f:	83 ec 0c             	sub    $0xc,%esp
 804d982:	68 dd 6a 06 08       	push   $0x8066add
 804d987:	50                   	push   %eax
 804d988:	6a 0a                	push   $0xa
 804d98a:	6a 00                	push   $0x0
 804d98c:	ff 35 e0 a2 06 08    	pushl  0x806a2e0
 804d992:	e8 89 2f 01 00       	call   8060920 <xstrtoul>
 804d997:	83 c4 20             	add    $0x20,%esp
 804d99a:	85 c0                	test   %eax,%eax
 804d99c:	0f 85 6e ce ff ff    	jne    804a810 <main+0x12b0>
 804d9a2:	66 90                	xchg   %ax,%ax
 804d9a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d9a8:	89 3c 24             	mov    %edi,(%esp)
 804d9ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d9af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d9b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d9b7:	b9 34 e5 00 00       	mov    $0xe534,%ecx
 804d9bc:	e8 87 6f 00 00       	call   8054948 <__afl_maybe_log>
 804d9c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d9c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d9c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d9cd:	8b 3c 24             	mov    (%esp),%edi
 804d9d0:	8d 64 24 10          	lea    0x10(%esp),%esp
                    skip_chars = size;
 804d9d4:	8b 55 dc             	mov    -0x24(%ebp),%edx
 804d9d7:	89 15 14 a3 06 08    	mov    %edx,0x806a314
 804d9dd:	e9 06 bd ff ff       	jmp    80496e8 <main+0x188>
 804d9e2:	66 90                	xchg   %ax,%ax
if(( delimit_groups == DM_PREPEND ) && ( delimit_groups == DM_SEPARATE && !(!first_delimiter) ) ) {
	report_label_coverage("MCC", 446);
}
// MCC Label 447
if(( delimit_groups == DM_PREPEND ) && ( !(delimit_groups == DM_SEPARATE) && !first_delimiter ) ) {
	report_label_coverage("MCC", 447);
 804d9e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d9e8:	89 3c 24             	mov    %edi,(%esp)
 804d9eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d9ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d9f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d9f7:	b9 1f e1 00 00       	mov    $0xe11f,%ecx
 804d9fc:	e8 47 6f 00 00       	call   8054948 <__afl_maybe_log>
 804da01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804da05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804da09:	8b 54 24 04          	mov    0x4(%esp),%edx
 804da0d:	8b 3c 24             	mov    (%esp),%edi
 804da10:	8d 64 24 10          	lea    0x10(%esp),%esp
 804da14:	50                   	push   %eax
 804da15:	50                   	push   %eax
 804da16:	68 bf 01 00 00       	push   $0x1bf
 804da1b:	68 1b 5b 06 08       	push   $0x8065b1b
 804da20:	e8 5b 36 00 00       	call   8051080 <report_label_coverage>
 804da25:	83 c4 10             	add    $0x10,%esp
 804da28:	e9 7f f4 ff ff       	jmp    804ceac <main+0x394c>
 804da2d:	8d 76 00             	lea    0x0(%esi),%esi
        {
            char *thisfield;
            size_t thislen;
            _Bool new_group;
            {
                struct linebuffer *temp_2 = readlinebuffer_delim(thisline + (lava_get(215)) * (1818326410 == (lava_get(215)) || 2322948460U == (lava_get(215))), stdin, delimiter);
 804da30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804da34:	89 3c 24             	mov    %edi,(%esp)
 804da37:	89 54 24 04          	mov    %edx,0x4(%esp)
 804da3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804da3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804da43:	b9 dd 43 00 00       	mov    $0x43dd,%ecx
 804da48:	e8 fb 6e 00 00       	call   8054948 <__afl_maybe_log>
 804da4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804da51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804da55:	8b 54 24 04          	mov    0x4(%esp),%edx
 804da59:	8b 3c 24             	mov    (%esp),%edi
 804da5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804da60:	0f be 45 9e          	movsbl -0x62(%ebp),%eax
}
// MCC Label 261
if(!(output_unique) && !(output_first_repeated) && !(countmode == count_none) ) {
	report_label_coverage("MCC", 261);
}
if (output_unique && output_first_repeated && countmode == count_none)
 804da64:	8d 4d dc             	lea    -0x24(%ebp),%ecx
 804da67:	8d 75 d0             	lea    -0x30(%ebp),%esi
 804da6a:	31 db                	xor    %ebx,%ebx
 804da6c:	89 4d a0             	mov    %ecx,-0x60(%ebp)
 804da6f:	89 75 b4             	mov    %esi,-0x4c(%ebp)
        {
            char *thisfield;
            size_t thislen;
            _Bool new_group;
            {
                struct linebuffer *temp_2 = readlinebuffer_delim(thisline + (lava_get(215)) * (1818326410 == (lava_get(215)) || 2322948460U == (lava_get(215))), stdin, delimiter);
 804da72:	89 45 94             	mov    %eax,-0x6c(%ebp)
 804da75:	8d 76 00             	lea    0x0(%esi),%esi
      bool first_group_printed = false;

      while (1)
    {
        {
            int temp_1 = !(!feof_unlocked(stdin));
 804da78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804da7c:	89 3c 24             	mov    %edi,(%esp)
 804da7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804da83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804da87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804da8b:	b9 a3 9b 00 00       	mov    $0x9ba3,%ecx
 804da90:	e8 b3 6e 00 00       	call   8054948 <__afl_maybe_log>
 804da95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804da99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804da9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804daa1:	8b 3c 24             	mov    (%esp),%edi
 804daa4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804daa8:	8b 3d d0 a2 06 08    	mov    0x806a2d0,%edi
            
// ABS Label 262
if(temp_1 < 0)  {
	report_label_coverage("ABS", 262);
}
if (temp_1)
 804daae:	8b 17                	mov    (%edi),%edx
 804dab0:	83 e2 10             	and    $0x10,%edx
 804dab3:	89 55 c0             	mov    %edx,-0x40(%ebp)
 804dab6:	0f 85 dc 25 00 00    	jne    8050098 <main+0x6b38>
 804dabc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dac0:	89 3c 24             	mov    %edi,(%esp)
 804dac3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dac7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dacb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dacf:	b9 a0 1f 00 00       	mov    $0x1fa0,%ecx
 804dad4:	e8 6f 6e 00 00       	call   8054948 <__afl_maybe_log>
 804dad9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dadd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dae1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dae5:	8b 3c 24             	mov    (%esp),%edi
 804dae8:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
            char *thisfield;
            size_t thislen;
            _Bool new_group;
            {
                struct linebuffer *temp_2 = readlinebuffer_delim(thisline + (lava_get(215)) * (1818326410 == (lava_get(215)) || 2322948460U == (lava_get(215))), stdin, delimiter);
 804daec:	83 ec 0c             	sub    $0xc,%esp
 804daef:	68 d7 00 00 00       	push   $0xd7
 804daf4:	e8 d7 5d 00 00       	call   80538d0 <lava_get>
 804daf9:	c7 04 24 d7 00 00 00 	movl   $0xd7,(%esp)
 804db00:	89 c6                	mov    %eax,%esi
 804db02:	e8 c9 5d 00 00       	call   80538d0 <lava_get>
 804db07:	83 c4 10             	add    $0x10,%esp
 804db0a:	3d 8a 75 61 6c       	cmp    $0x6c61758a,%eax
 804db0f:	b9 01 00 00 00       	mov    $0x1,%ecx
 804db14:	74 4c                	je     804db62 <main+0x4602>
 804db16:	66 90                	xchg   %ax,%ax
 804db18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804db1c:	89 3c 24             	mov    %edi,(%esp)
 804db1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804db23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804db27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804db2b:	b9 ff 3e 00 00       	mov    $0x3eff,%ecx
 804db30:	e8 13 6e 00 00       	call   8054948 <__afl_maybe_log>
 804db35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804db39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804db3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804db41:	8b 3c 24             	mov    (%esp),%edi
 804db44:	8d 64 24 10          	lea    0x10(%esp),%esp
 804db48:	83 ec 0c             	sub    $0xc,%esp
 804db4b:	68 d7 00 00 00       	push   $0xd7
 804db50:	e8 7b 5d 00 00       	call   80538d0 <lava_get>
 804db55:	31 c9                	xor    %ecx,%ecx
 804db57:	83 c4 10             	add    $0x10,%esp
 804db5a:	3d 6c 61 75 8a       	cmp    $0x8a75616c,%eax
 804db5f:	0f 94 c1             	sete   %cl
 804db62:	66 90                	xchg   %ax,%ax
 804db64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804db68:	89 3c 24             	mov    %edi,(%esp)
 804db6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804db6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804db73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804db77:	b9 09 99 00 00       	mov    $0x9909,%ecx
 804db7c:	e8 c7 6d 00 00       	call   8054948 <__afl_maybe_log>
 804db81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804db85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804db89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804db8d:	8b 3c 24             	mov    (%esp),%edi
 804db90:	8d 64 24 10          	lea    0x10(%esp),%esp
 804db94:	50                   	push   %eax
 804db95:	ff 75 94             	pushl  -0x6c(%ebp)
 804db98:	6b c6 0c             	imul   $0xc,%esi,%eax
 804db9b:	57                   	push   %edi
 804db9c:	0f af c8             	imul   %eax,%ecx
 804db9f:	03 4d b4             	add    -0x4c(%ebp),%ecx
 804dba2:	51                   	push   %ecx
 804dba3:	e8 f8 8d 00 00       	call   80569a0 <readlinebuffer_delim>
if(temp_2 < 0)  {
	report_label_coverage("ABS", 263);
}

// ROR Label 264
if((temp_2 != 0) != (temp_2 == 0))  {
 804dba8:	83 c4 10             	add    $0x10,%esp
 804dbab:	85 c0                	test   %eax,%eax
 804dbad:	0f 94 45 c4          	sete   -0x3c(%ebp)
 804dbb1:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 804dbb5:	0f 95 c1             	setne  %cl
 804dbb8:	38 d1                	cmp    %dl,%cl
 804dbba:	74 44                	je     804dc00 <main+0x46a0>
 804dbbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dbc0:	89 3c 24             	mov    %edi,(%esp)
 804dbc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dbc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dbcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dbcf:	b9 ef ae 00 00       	mov    $0xaeef,%ecx
 804dbd4:	e8 6f 6d 00 00       	call   8054948 <__afl_maybe_log>
 804dbd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dbdd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dbe1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dbe5:	8b 3c 24             	mov    (%esp),%edi
 804dbe8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 264);
 804dbec:	56                   	push   %esi
 804dbed:	56                   	push   %esi
 804dbee:	68 08 01 00 00       	push   $0x108
 804dbf3:	68 17 5b 06 08       	push   $0x8065b17
 804dbf8:	e8 83 34 00 00       	call   8051080 <report_label_coverage>
 804dbfd:	83 c4 10             	add    $0x10,%esp
}
if (temp_2 == 0)
 804dc00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dc04:	89 3c 24             	mov    %edi,(%esp)
 804dc07:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dc0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dc13:	b9 2f d6 00 00       	mov    $0xd62f,%ecx
 804dc18:	e8 2b 6d 00 00       	call   8054948 <__afl_maybe_log>
 804dc1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dc21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dc25:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dc29:	8b 3c 24             	mov    (%esp),%edi
 804dc2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dc30:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
 804dc34:	0f 85 5e 24 00 00    	jne    8050098 <main+0x6b38>
 804dc3a:	66 90                	xchg   %ax,%ax
 804dc3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dc40:	89 3c 24             	mov    %edi,(%esp)
 804dc43:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dc4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dc4f:	b9 11 7b 00 00       	mov    $0x7b11,%ecx
 804dc54:	e8 ef 6c 00 00       	call   8054948 <__afl_maybe_log>
 804dc59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dc5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dc61:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dc65:	8b 3c 24             	mov    (%esp),%edi
 804dc68:	8d 64 24 10          	lea    0x10(%esp),%esp
                    break;
            }
            thisfield = ({
                char *kbcieiubweuhc1967513926 = find_field(thisline + (lava_get(169)) * (1818326456 == (lava_get(169)) || 3094700396U == (lava_get(169))) + (lava_get(171)) * (1818326454 == (lava_get(171)) || 3061145964U == (lava_get(171))) + (lava_get(170)) * (1818326455 == (lava_get(170)) || 3077923180U == (lava_get(170))));
 804dc6c:	83 ec 0c             	sub    $0xc,%esp
 804dc6f:	68 a9 00 00 00       	push   $0xa9
 804dc74:	e8 57 5c 00 00       	call   80538d0 <lava_get>
 804dc79:	c7 04 24 a9 00 00 00 	movl   $0xa9,(%esp)
 804dc80:	89 c6                	mov    %eax,%esi
 804dc82:	e8 49 5c 00 00       	call   80538d0 <lava_get>
 804dc87:	83 c4 10             	add    $0x10,%esp
 804dc8a:	3d b8 75 61 6c       	cmp    $0x6c6175b8,%eax
 804dc8f:	ba 01 00 00 00       	mov    $0x1,%edx
 804dc94:	74 4c                	je     804dce2 <main+0x4782>
 804dc96:	66 90                	xchg   %ax,%ax
 804dc98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dc9c:	89 3c 24             	mov    %edi,(%esp)
 804dc9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dca3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dca7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dcab:	b9 86 81 00 00       	mov    $0x8186,%ecx
 804dcb0:	e8 93 6c 00 00       	call   8054948 <__afl_maybe_log>
 804dcb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dcb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dcbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dcc1:	8b 3c 24             	mov    (%esp),%edi
 804dcc4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dcc8:	83 ec 0c             	sub    $0xc,%esp
 804dccb:	68 a9 00 00 00       	push   $0xa9
 804dcd0:	e8 fb 5b 00 00       	call   80538d0 <lava_get>
 804dcd5:	31 d2                	xor    %edx,%edx
 804dcd7:	83 c4 10             	add    $0x10,%esp
 804dcda:	3d 6c 61 75 b8       	cmp    $0xb875616c,%eax
 804dcdf:	0f 94 c2             	sete   %dl
 804dce2:	66 90                	xchg   %ax,%ax
 804dce4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dce8:	89 3c 24             	mov    %edi,(%esp)
 804dceb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dcef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dcf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dcf7:	b9 94 2e 00 00       	mov    $0x2e94,%ecx
 804dcfc:	e8 47 6c 00 00       	call   8054948 <__afl_maybe_log>
 804dd01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dd05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dd09:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dd0d:	8b 3c 24             	mov    (%esp),%edi
 804dd10:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dd14:	83 ec 0c             	sub    $0xc,%esp
 804dd17:	89 d7                	mov    %edx,%edi
 804dd19:	68 ab 00 00 00       	push   $0xab
 804dd1e:	0f af fe             	imul   %esi,%edi
 804dd21:	e8 aa 5b 00 00       	call   80538d0 <lava_get>
 804dd26:	c7 04 24 ab 00 00 00 	movl   $0xab,(%esp)
 804dd2d:	89 c6                	mov    %eax,%esi
 804dd2f:	e8 9c 5b 00 00       	call   80538d0 <lava_get>
 804dd34:	83 c4 10             	add    $0x10,%esp
 804dd37:	3d b6 75 61 6c       	cmp    $0x6c6175b6,%eax
 804dd3c:	b9 01 00 00 00       	mov    $0x1,%ecx
 804dd41:	74 4b                	je     804dd8e <main+0x482e>
 804dd43:	90                   	nop
 804dd44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dd48:	89 3c 24             	mov    %edi,(%esp)
 804dd4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dd4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dd53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dd57:	b9 b3 31 00 00       	mov    $0x31b3,%ecx
 804dd5c:	e8 e7 6b 00 00       	call   8054948 <__afl_maybe_log>
 804dd61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dd65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dd69:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dd6d:	8b 3c 24             	mov    (%esp),%edi
 804dd70:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dd74:	83 ec 0c             	sub    $0xc,%esp
 804dd77:	68 ab 00 00 00       	push   $0xab
 804dd7c:	e8 4f 5b 00 00       	call   80538d0 <lava_get>
 804dd81:	31 c9                	xor    %ecx,%ecx
 804dd83:	83 c4 10             	add    $0x10,%esp
 804dd86:	3d 6c 61 75 b6       	cmp    $0xb675616c,%eax
 804dd8b:	0f 94 c1             	sete   %cl
 804dd8e:	66 90                	xchg   %ax,%ax
 804dd90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dd94:	89 3c 24             	mov    %edi,(%esp)
 804dd97:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dd9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dd9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dda3:	b9 ee 94 00 00       	mov    $0x94ee,%ecx
 804dda8:	e8 9b 6b 00 00       	call   8054948 <__afl_maybe_log>
 804ddad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ddb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ddb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ddb9:	8b 3c 24             	mov    (%esp),%edi
 804ddbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ddc0:	83 ec 0c             	sub    $0xc,%esp
 804ddc3:	0f af f1             	imul   %ecx,%esi
 804ddc6:	68 aa 00 00 00       	push   $0xaa
 804ddcb:	e8 00 5b 00 00       	call   80538d0 <lava_get>
 804ddd0:	01 f7                	add    %esi,%edi
 804ddd2:	c7 04 24 aa 00 00 00 	movl   $0xaa,(%esp)
 804ddd9:	89 c6                	mov    %eax,%esi
 804dddb:	e8 f0 5a 00 00       	call   80538d0 <lava_get>
 804dde0:	83 c4 10             	add    $0x10,%esp
 804dde3:	3d b7 75 61 6c       	cmp    $0x6c6175b7,%eax
 804dde8:	ba 01 00 00 00       	mov    $0x1,%edx
 804dded:	74 4b                	je     804de3a <main+0x48da>
 804ddef:	90                   	nop
 804ddf0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ddf4:	89 3c 24             	mov    %edi,(%esp)
 804ddf7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ddfb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ddff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804de03:	b9 83 de 00 00       	mov    $0xde83,%ecx
 804de08:	e8 3b 6b 00 00       	call   8054948 <__afl_maybe_log>
 804de0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804de11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804de15:	8b 54 24 04          	mov    0x4(%esp),%edx
 804de19:	8b 3c 24             	mov    (%esp),%edi
 804de1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804de20:	83 ec 0c             	sub    $0xc,%esp
 804de23:	68 aa 00 00 00       	push   $0xaa
 804de28:	e8 a3 5a 00 00       	call   80538d0 <lava_get>
 804de2d:	31 d2                	xor    %edx,%edx
 804de2f:	83 c4 10             	add    $0x10,%esp
 804de32:	3d 6c 61 75 b7       	cmp    $0xb775616c,%eax
 804de37:	0f 94 c2             	sete   %dl
 804de3a:	66 90                	xchg   %ax,%ax
 804de3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804de40:	89 3c 24             	mov    %edi,(%esp)
 804de43:	89 54 24 04          	mov    %edx,0x4(%esp)
 804de47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804de4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804de4f:	b9 62 0b 00 00       	mov    $0xb62,%ecx
 804de54:	e8 ef 6a 00 00       	call   8054948 <__afl_maybe_log>
 804de59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804de5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804de61:	8b 54 24 04          	mov    0x4(%esp),%edx
 804de65:	8b 3c 24             	mov    (%esp),%edi
 804de68:	8d 64 24 10          	lea    0x10(%esp),%esp
 804de6c:	89 d0                	mov    %edx,%eax
 804de6e:	0f af c6             	imul   %esi,%eax
 804de71:	01 f8                	add    %edi,%eax
 804de73:	8b 7d b4             	mov    -0x4c(%ebp),%edi
 804de76:	6b c0 0c             	imul   $0xc,%eax,%eax
 804de79:	01 f8                	add    %edi,%eax
 804de7b:	8d 50 08             	lea    0x8(%eax),%edx
 804de7e:	83 c0 04             	add    $0x4,%eax
 804de81:	e8 3a 32 00 00       	call   80510c0 <find_field.isra.3>
if(((kbcieiubweuhc1967513926) || (kbcieiubweuhc1967513926)) != ((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926)))  {
	report_label_coverage("COR", 266);
}

// MCC Label 267
if((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926) ) {
 804de86:	85 c0                	test   %eax,%eax
}
if (temp_2 == 0)
                    break;
            }
            thisfield = ({
                char *kbcieiubweuhc1967513926 = find_field(thisline + (lava_get(169)) * (1818326456 == (lava_get(169)) || 3094700396U == (lava_get(169))) + (lava_get(171)) * (1818326454 == (lava_get(171)) || 3061145964U == (lava_get(171))) + (lava_get(170)) * (1818326455 == (lava_get(170)) || 3077923180U == (lava_get(170))));
 804de88:	89 c6                	mov    %eax,%esi
if(((kbcieiubweuhc1967513926) || (kbcieiubweuhc1967513926)) != ((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926)))  {
	report_label_coverage("COR", 266);
}

// MCC Label 267
if((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926) ) {
 804de8a:	0f 84 2d 1f 00 00    	je     804fdbd <main+0x685d>
 804de90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804de94:	89 3c 24             	mov    %edi,(%esp)
 804de97:	89 54 24 04          	mov    %edx,0x4(%esp)
 804de9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804de9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dea3:	b9 5c 60 00 00       	mov    $0x605c,%ecx
 804dea8:	e8 9b 6a 00 00       	call   8054948 <__afl_maybe_log>
 804dead:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804deb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804deb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804deb9:	8b 3c 24             	mov    (%esp),%edi
 804debc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 267);
 804dec0:	51                   	push   %ecx
 804dec1:	51                   	push   %ecx
 804dec2:	68 0b 01 00 00       	push   $0x10b
 804dec7:	68 1b 5b 06 08       	push   $0x8065b1b
 804decc:	e8 af 31 00 00       	call   8051080 <report_label_coverage>
	report_label_coverage("MCC", 270);
}
if ((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926)) {
                    int lava_443 = 0;
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[0] << (0 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[1] << (1 * 8);
 804ded1:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[2] << (2 * 8);
 804ded5:	0f b6 46 02          	movzbl 0x2(%esi),%eax
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
            new_group = (prevline->length == 0 || ({
 804ded9:	83 c4 10             	add    $0x10,%esp
if ((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926)) {
                    int lava_443 = 0;
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[0] << (0 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[1] << (1 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[2] << (2 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[3] << (3 * 8);
 804dedc:	0f b6 56 03          	movzbl 0x3(%esi),%edx
	report_label_coverage("MCC", 270);
}
if ((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926)) {
                    int lava_443 = 0;
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[0] << (0 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[1] << (1 * 8);
 804dee0:	c1 e1 08             	shl    $0x8,%ecx
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[2] << (2 * 8);
 804dee3:	c1 e0 10             	shl    $0x10,%eax
 804dee6:	09 c8                	or     %ecx,%eax
if(!((kbcieiubweuhc1967513926)) && !((kbcieiubweuhc1967513926)) ) {
	report_label_coverage("MCC", 270);
}
if ((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926)) {
                    int lava_443 = 0;
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[0] << (0 * 8);
 804dee8:	0f b6 0e             	movzbl (%esi),%ecx
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[1] << (1 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[2] << (2 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[3] << (3 * 8);
 804deeb:	c1 e2 18             	shl    $0x18,%edx
}
if ((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926)) {
                    int lava_443 = 0;
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[0] << (0 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[1] << (1 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[2] << (2 * 8);
 804deee:	09 c1                	or     %eax,%ecx
                    lava_393 |= ((unsigned char *)kbcieiubweuhc1967513926)[3] << (3 * 8);
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
 804def0:	8b 47 08             	mov    0x8(%edi),%eax
if ((kbcieiubweuhc1967513926) && (kbcieiubweuhc1967513926)) {
                    int lava_443 = 0;
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[0] << (0 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[1] << (1 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[2] << (2 * 8);
                    lava_443 |= ((unsigned char *)kbcieiubweuhc1967513926)[3] << (3 * 8);
 804def3:	09 ca                	or     %ecx,%edx
 804def5:	8b 4f 04             	mov    0x4(%edi),%ecx
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
            new_group = (prevline->length == 0 || ({
 804def8:	8b 7d a0             	mov    -0x60(%ebp),%edi
#include <stdio.h>
extern unsigned int lava_get(unsigned int) ;
void lava_set(unsigned int bn, unsigned int val);
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804defb:	89 15 2c aa 06 08    	mov    %edx,0x806aa2c
 804df01:	89 15 d4 a7 06 08    	mov    %edx,0x806a7d4
                    lava_393 |= ((unsigned char *)kbcieiubweuhc1967513926)[3] << (3 * 8);
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
 804df07:	89 45 bc             	mov    %eax,-0x44(%ebp)
 804df0a:	29 f0                	sub    %esi,%eax
#include <stdio.h>
extern unsigned int lava_get(unsigned int) ;
void lava_set(unsigned int bn, unsigned int val);
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804df0c:	89 15 38 a8 06 08    	mov    %edx,0x806a838
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
            new_group = (prevline->length == 0 || ({
 804df12:	83 7f 04 00          	cmpl   $0x0,0x4(%edi)
#include <stdio.h>
extern unsigned int lava_get(unsigned int) ;
void lava_set(unsigned int bn, unsigned int val);
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804df16:	89 15 90 aa 06 08    	mov    %edx,0x806aa90
 804df1c:	89 15 00 a9 06 08    	mov    %edx,0x806a900
 804df22:	89 15 64 a9 06 08    	mov    %edx,0x806a964
                    lava_393 |= ((unsigned char *)kbcieiubweuhc1967513926)[3] << (3 * 8);
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
 804df28:	8d 54 01 ff          	lea    -0x1(%ecx,%eax,1),%edx
 804df2c:	89 55 a8             	mov    %edx,-0x58(%ebp)
            new_group = (prevline->length == 0 || ({
 804df2f:	0f 84 88 1b 00 00    	je     804fabd <main+0x655d>
 804df35:	8d 76 00             	lea    0x0(%esi),%esi
 804df38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804df3c:	89 3c 24             	mov    %edi,(%esp)
 804df3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804df43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804df47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804df4b:	b9 9d af 00 00       	mov    $0xaf9d,%ecx
 804df50:	e8 f3 69 00 00       	call   8054948 <__afl_maybe_log>
 804df55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804df59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804df5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804df61:	8b 3c 24             	mov    (%esp),%edi
 804df64:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 272);
}

// MCC Label 273
if(((thisfield)) && ((thisfield)) ) {
	report_label_coverage("MCC", 273);
 804df68:	50                   	push   %eax
 804df69:	50                   	push   %eax
 804df6a:	68 11 01 00 00       	push   $0x111
 804df6f:	68 1b 5b 06 08       	push   $0x8065b1b
 804df74:	e8 07 31 00 00       	call   8051080 <report_label_coverage>
	report_label_coverage("MCC", 276);
}
if (((thisfield)) && ((thisfield))) {
                    int lava_446 = 0;
                    lava_446 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
                    lava_446 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
 804df79:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
                    lava_446 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
 804df7d:	0f b6 46 02          	movzbl 0x2(%esi),%eax
if(!(((thisfield))) && !(((thisfield))) ) {
	report_label_coverage("MCC", 276);
}
if (((thisfield)) && ((thisfield))) {
                    int lava_446 = 0;
                    lava_446 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
 804df81:	0f b6 3e             	movzbl (%esi),%edi
                    lava_396 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
                    lava_396 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
                    lava_396 |= ((unsigned char *)(thisfield))[3] << (3 * 8);
                    lava_set(396, lava_396);
                }
                _Bool kbcieiubweuhc1365180540 = different(thisfield, prevfield, thislen, prevlen);
 804df84:	8b 55 90             	mov    -0x70(%ebp),%edx
	report_label_coverage("MCC", 276);
}
if (((thisfield)) && ((thisfield))) {
                    int lava_446 = 0;
                    lava_446 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
                    lava_446 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
 804df87:	c1 e1 08             	shl    $0x8,%ecx
                    lava_446 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
 804df8a:	c1 e0 10             	shl    $0x10,%eax
 804df8d:	09 c8                	or     %ecx,%eax
                    lava_446 |= ((unsigned char *)(thisfield))[3] << (3 * 8);
 804df8f:	0f b6 4e 03          	movzbl 0x3(%esi),%ecx
}
if (((thisfield)) && ((thisfield))) {
                    int lava_446 = 0;
                    lava_446 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
                    lava_446 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
                    lava_446 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
 804df93:	09 c7                	or     %eax,%edi
                    lava_396 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
                    lava_396 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
                    lava_396 |= ((unsigned char *)(thisfield))[3] << (3 * 8);
                    lava_set(396, lava_396);
                }
                _Bool kbcieiubweuhc1365180540 = different(thisfield, prevfield, thislen, prevlen);
 804df95:	58                   	pop    %eax
 804df96:	ff 75 8c             	pushl  -0x74(%ebp)
 804df99:	89 f0                	mov    %esi,%eax
if (((thisfield)) && ((thisfield))) {
                    int lava_446 = 0;
                    lava_446 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
                    lava_446 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
                    lava_446 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
                    lava_446 |= ((unsigned char *)(thisfield))[3] << (3 * 8);
 804df9b:	c1 e1 18             	shl    $0x18,%ecx
 804df9e:	09 f9                	or     %edi,%ecx
#include <stdio.h>
extern unsigned int lava_get(unsigned int) ;
void lava_set(unsigned int bn, unsigned int val);
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804dfa0:	89 0d 38 aa 06 08    	mov    %ecx,0x806aa38
 804dfa6:	89 0d e0 a7 06 08    	mov    %ecx,0x806a7e0
 804dfac:	89 0d a8 a8 06 08    	mov    %ecx,0x806a8a8
 804dfb2:	89 0d 44 a8 06 08    	mov    %ecx,0x806a844
 804dfb8:	89 0d 9c aa 06 08    	mov    %ecx,0x806aa9c
 804dfbe:	89 0d 0c a9 06 08    	mov    %ecx,0x806a90c
 804dfc4:	89 0d 70 a9 06 08    	mov    %ecx,0x806a970
                    lava_396 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
                    lava_396 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
                    lava_396 |= ((unsigned char *)(thisfield))[3] << (3 * 8);
                    lava_set(396, lava_396);
                }
                _Bool kbcieiubweuhc1365180540 = different(thisfield, prevfield, thislen, prevlen);
 804dfca:	8b 4d a8             	mov    -0x58(%ebp),%ecx
 804dfcd:	e8 be 50 00 00       	call   8053090 <different>
 804dfd2:	89 c7                	mov    %eax,%edi
	report_label_coverage("COR", 278);
}

// MCC Label 279
if(((thisfield)) && ((thisfield)) ) {
	report_label_coverage("MCC", 279);
 804dfd4:	58                   	pop    %eax
 804dfd5:	5a                   	pop    %edx
 804dfd6:	68 17 01 00 00       	push   $0x117
 804dfdb:	68 1b 5b 06 08       	push   $0x8065b1b
 804dfe0:	e8 9b 30 00 00       	call   8051080 <report_label_coverage>
	report_label_coverage("MCC", 282);
}
if (((thisfield)) && ((thisfield))) {
                    int lava_447 = 0;
                    lava_447 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
                    lava_447 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
 804dfe5:	0f b6 56 01          	movzbl 0x1(%esi),%edx
                    lava_447 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
 804dfe9:	0f b6 46 02          	movzbl 0x2(%esi),%eax
#include <stdio.h>
extern unsigned int lava_get(unsigned int) ;
void lava_set(unsigned int bn, unsigned int val);
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804dfed:	83 c4 10             	add    $0x10,%esp
if (((thisfield)) && ((thisfield))) {
                    int lava_447 = 0;
                    lava_447 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
                    lava_447 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
                    lava_447 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
                    lava_447 |= ((unsigned char *)(thisfield))[3] << (3 * 8);
 804dff0:	0f b6 4e 03          	movzbl 0x3(%esi),%ecx
	report_label_coverage("MCC", 282);
}
if (((thisfield)) && ((thisfield))) {
                    int lava_447 = 0;
                    lava_447 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
                    lava_447 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
 804dff4:	c1 e2 08             	shl    $0x8,%edx
                    lava_447 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
 804dff7:	c1 e0 10             	shl    $0x10,%eax
 804dffa:	09 d0                	or     %edx,%eax
if(!(((thisfield))) && !(((thisfield))) ) {
	report_label_coverage("MCC", 282);
}
if (((thisfield)) && ((thisfield))) {
                    int lava_447 = 0;
                    lava_447 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
 804dffc:	0f b6 16             	movzbl (%esi),%edx
                    lava_447 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
                    lava_447 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
                    lava_447 |= ((unsigned char *)(thisfield))[3] << (3 * 8);
 804dfff:	c1 e1 18             	shl    $0x18,%ecx
}
if (((thisfield)) && ((thisfield))) {
                    int lava_447 = 0;
                    lava_447 |= ((unsigned char *)(thisfield))[0] << (0 * 8);
                    lava_447 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
                    lava_447 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
 804e002:	09 d0                	or     %edx,%eax
                    lava_447 |= ((unsigned char *)(thisfield))[3] << (3 * 8);
 804e004:	09 c1                	or     %eax,%ecx
#include <stdio.h>
extern unsigned int lava_get(unsigned int) ;
void lava_set(unsigned int bn, unsigned int val);
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804e006:	89 0d 3c aa 06 08    	mov    %ecx,0x806aa3c
 804e00c:	89 0d e4 a7 06 08    	mov    %ecx,0x806a7e4
 804e012:	89 0d ac a8 06 08    	mov    %ecx,0x806a8ac
 804e018:	89 0d 48 a8 06 08    	mov    %ecx,0x806a848
 804e01e:	89 0d a0 aa 06 08    	mov    %ecx,0x806aaa0
 804e024:	89 0d 10 a9 06 08    	mov    %ecx,0x806a910
 804e02a:	89 0d 74 a9 06 08    	mov    %ecx,0x806a974
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
            new_group = (prevline->length == 0 || ({
 804e030:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e034:	89 3c 24             	mov    %edi,(%esp)
 804e037:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e03b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e03f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e043:	b9 6e d4 00 00       	mov    $0xd46e,%ecx
 804e048:	e8 fb 68 00 00       	call   8054948 <__afl_maybe_log>
 804e04d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e051:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e055:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e059:	8b 3c 24             	mov    (%esp),%edi
 804e05c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e060:	89 f8                	mov    %edi,%eax
 804e062:	84 c0                	test   %al,%al
 804e064:	0f 85 53 1a 00 00    	jne    804fabd <main+0x655d>
 804e06a:	66 90                	xchg   %ax,%ax
 804e06c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e070:	89 3c 24             	mov    %edi,(%esp)
 804e073:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e077:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e07b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e07f:	b9 44 51 00 00       	mov    $0x5144,%ecx
 804e084:	e8 bf 68 00 00       	call   8054948 <__afl_maybe_log>
 804e089:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e08d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e091:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e095:	8b 3c 24             	mov    (%esp),%edi
 804e098:	8d 64 24 10          	lea    0x10(%esp),%esp
                }
                kbcieiubweuhc1365180540;
            }));
            
// COR Label 283
if((new_group && grouping != GM_NONE || (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))) != (new_group && grouping != GM_NONE && (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))))  {
 804e09c:	8b 3d 00 a3 06 08    	mov    0x806a300,%edi
 804e0a2:	83 ff 04             	cmp    $0x4,%edi
 804e0a5:	74 6d                	je     804e114 <main+0x4bb4>
 804e0a7:	90                   	nop
 804e0a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e0ac:	89 3c 24             	mov    %edi,(%esp)
 804e0af:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e0b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e0b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e0bb:	b9 04 45 00 00       	mov    $0x4504,%ecx
 804e0c0:	e8 83 68 00 00       	call   8054948 <__afl_maybe_log>
 804e0c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e0c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e0cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e0d1:	8b 3c 24             	mov    (%esp),%edi
 804e0d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e0d8:	83 ff 01             	cmp    $0x1,%edi
 804e0db:	0f 85 30 1c 00 00    	jne    804fd11 <main+0x67b1>
 804e0e1:	8d 76 00             	lea    0x0(%esi),%esi
 804e0e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e0e8:	89 3c 24             	mov    %edi,(%esp)
 804e0eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e0ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e0f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e0f7:	b9 34 7b 00 00       	mov    $0x7b34,%ecx
 804e0fc:	e8 47 68 00 00       	call   8054948 <__afl_maybe_log>
 804e101:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e105:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e109:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e10d:	8b 3c 24             	mov    (%esp),%edi
 804e110:	8d 64 24 10          	lea    0x10(%esp),%esp
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
            new_group = (prevline->length == 0 || ({
 804e114:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e118:	89 3c 24             	mov    %edi,(%esp)
 804e11b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e11f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e123:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e127:	b9 3a 62 00 00       	mov    $0x623a,%ecx
 804e12c:	e8 17 68 00 00       	call   8054948 <__afl_maybe_log>
 804e131:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e135:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e139:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e13d:	8b 3c 24             	mov    (%esp),%edi
 804e140:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e144:	31 ff                	xor    %edi,%edi
 804e146:	66 90                	xchg   %ax,%ax
                kbcieiubweuhc1365180540;
            }));
            
// COR Label 283
if((new_group && grouping != GM_NONE || (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))) != (new_group && grouping != GM_NONE && (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))))  {
	report_label_coverage("COR", 283);
 804e148:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e14c:	89 3c 24             	mov    %edi,(%esp)
 804e14f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e153:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e157:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e15b:	b9 52 94 00 00       	mov    $0x9452,%ecx
 804e160:	e8 e3 67 00 00       	call   8054948 <__afl_maybe_log>
 804e165:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e169:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e16d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e171:	8b 3c 24             	mov    (%esp),%edi
 804e174:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e178:	50                   	push   %eax
 804e179:	50                   	push   %eax
 804e17a:	68 1b 01 00 00       	push   $0x11b
 804e17f:	68 13 5b 06 08       	push   $0x8065b13
 804e184:	e8 f7 2e 00 00       	call   8051080 <report_label_coverage>
 804e189:	83 c4 10             	add    $0x10,%esp
}
// COR Label 284
if((new_group || grouping != GM_NONE) != (new_group && grouping != GM_NONE))  {
 804e18c:	85 ff                	test   %edi,%edi
 804e18e:	8b 0d 00 a3 06 08    	mov    0x806a300,%ecx
 804e194:	0f 85 b8 1a 00 00    	jne    804fc52 <main+0x66f2>
 804e19a:	66 90                	xchg   %ax,%ax
 804e19c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e1a0:	89 3c 24             	mov    %edi,(%esp)
 804e1a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e1a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e1ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e1af:	b9 96 29 00 00       	mov    $0x2996,%ecx
 804e1b4:	e8 8f 67 00 00       	call   8054948 <__afl_maybe_log>
 804e1b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e1bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e1c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e1c5:	8b 3c 24             	mov    (%esp),%edi
 804e1c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e1cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e1d0:	89 3c 24             	mov    %edi,(%esp)
 804e1d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e1d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e1db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e1df:	b9 da ef 00 00       	mov    $0xefda,%ecx
 804e1e4:	e8 5f 67 00 00       	call   8054948 <__afl_maybe_log>
 804e1e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e1ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e1f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e1f5:	8b 3c 24             	mov    (%esp),%edi
 804e1f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e1fc:	83 3d 00 a3 06 08 00 	cmpl   $0x0,0x806a300
 804e203:	0f 85 be 1a 00 00    	jne    804fcc7 <main+0x6767>
 804e209:	8d 76 00             	lea    0x0(%esi),%esi
 804e20c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e210:	89 3c 24             	mov    %edi,(%esp)
 804e213:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e217:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e21b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e21f:	b9 ff 1d 00 00       	mov    $0x1dff,%ecx
 804e224:	e8 1f 67 00 00       	call   8054948 <__afl_maybe_log>
 804e229:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e22d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e231:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e235:	8b 3c 24             	mov    (%esp),%edi
 804e238:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 284);
}

// ROR Label 285
if((grouping == GM_NONE) != (grouping != GM_NONE))  {
 804e23c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e240:	89 3c 24             	mov    %edi,(%esp)
 804e243:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e247:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e24b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e24f:	b9 c3 ed 00 00       	mov    $0xedc3,%ecx
 804e254:	e8 ef 66 00 00       	call   8054948 <__afl_maybe_log>
 804e259:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e25d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e261:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e265:	8b 3c 24             	mov    (%esp),%edi
 804e268:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e26c:	8b 3d 00 a3 06 08    	mov    0x806a300,%edi
 804e272:	85 ff                	test   %edi,%edi
 804e274:	0f 94 45 c4          	sete   -0x3c(%ebp)
 804e278:	0f b6 4d c4          	movzbl -0x3c(%ebp),%ecx
 804e27c:	0f 95 c0             	setne  %al
 804e27f:	88 45 b0             	mov    %al,-0x50(%ebp)
 804e282:	38 c1                	cmp    %al,%cl
 804e284:	0f 84 84 00 00 00    	je     804e30e <main+0x4dae>
 804e28a:	66 90                	xchg   %ax,%ax
 804e28c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e290:	89 3c 24             	mov    %edi,(%esp)
 804e293:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e297:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e29b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e29f:	b9 2c 50 00 00       	mov    $0x502c,%ecx
 804e2a4:	e8 9f 66 00 00       	call   8054948 <__afl_maybe_log>
 804e2a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e2ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e2b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e2b5:	8b 3c 24             	mov    (%esp),%edi
 804e2b8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 285);
 804e2bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e2c0:	89 3c 24             	mov    %edi,(%esp)
 804e2c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e2c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e2cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e2cf:	b9 32 1f 00 00       	mov    $0x1f32,%ecx
 804e2d4:	e8 6f 66 00 00       	call   8054948 <__afl_maybe_log>
 804e2d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e2dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e2e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e2e5:	8b 3c 24             	mov    (%esp),%edi
 804e2e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e2ec:	51                   	push   %ecx
 804e2ed:	51                   	push   %ecx
 804e2ee:	68 1d 01 00 00       	push   $0x11d
 804e2f3:	68 17 5b 06 08       	push   $0x8065b17
 804e2f8:	88 45 bc             	mov    %al,-0x44(%ebp)
 804e2fb:	e8 80 2d 00 00       	call   8051080 <report_label_coverage>
 804e300:	0f b6 45 bc          	movzbl -0x44(%ebp),%eax
 804e304:	83 c4 10             	add    $0x10,%esp
 804e307:	88 45 b0             	mov    %al,-0x50(%ebp)
 804e30a:	0f b6 45 c4          	movzbl -0x3c(%ebp),%eax
 804e30e:	66 90                	xchg   %ax,%ax
 804e310:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e314:	89 3c 24             	mov    %edi,(%esp)
 804e317:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e31b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e31f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e323:	b9 8c 80 00 00       	mov    $0x808c,%ecx
 804e328:	e8 1b 66 00 00       	call   8054948 <__afl_maybe_log>
 804e32d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e331:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e335:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e339:	8b 3c 24             	mov    (%esp),%edi
 804e33c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e340:	83 ff 02             	cmp    $0x2,%edi
 804e343:	0f 94 45 a4          	sete   -0x5c(%ebp)
 804e347:	83 ff 03             	cmp    $0x3,%edi
 804e34a:	0f 94 45 9f          	sete   -0x61(%ebp)
// MCC Label 296
if(new_group && grouping != GM_NONE && ( grouping == GM_PREPEND && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 296);
}
// MCC Label 297
if(new_group && grouping != GM_NONE && ( grouping == GM_PREPEND && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804e34e:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
 804e352:	0f 95 45 c4          	setne  -0x3c(%ebp)
 804e356:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 804e35a:	23 55 b0             	and    -0x50(%ebp),%edx
 804e35d:	83 ff 01             	cmp    $0x1,%edi
 804e360:	0f 94 45 b8          	sete   -0x48(%ebp)
 804e364:	0f b6 4d b8          	movzbl -0x48(%ebp),%ecx
 804e368:	88 55 ac             	mov    %dl,-0x54(%ebp)
 804e36b:	20 d1                	and    %dl,%cl
 804e36d:	0f 84 84 00 00 00    	je     804e3f7 <main+0x4e97>
 804e373:	90                   	nop
 804e374:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e378:	89 3c 24             	mov    %edi,(%esp)
 804e37b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e37f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e383:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e387:	b9 67 f2 00 00       	mov    $0xf267,%ecx
 804e38c:	e8 b7 65 00 00       	call   8054948 <__afl_maybe_log>
 804e391:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e395:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e399:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e39d:	8b 3c 24             	mov    (%esp),%edi
 804e3a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e3a4:	84 db                	test   %bl,%bl
 804e3a6:	0f 84 a5 12 00 00    	je     804f651 <main+0x60f1>
 804e3ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e3b0:	89 3c 24             	mov    %edi,(%esp)
 804e3b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e3b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e3bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e3bf:	b9 16 17 00 00       	mov    $0x1716,%ecx
 804e3c4:	e8 7f 65 00 00       	call   8054948 <__afl_maybe_log>
 804e3c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e3cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e3d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e3d5:	8b 3c 24             	mov    (%esp),%edi
 804e3d8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 297);
 804e3dc:	52                   	push   %edx
 804e3dd:	52                   	push   %edx
 804e3de:	68 29 01 00 00       	push   $0x129
 804e3e3:	68 1b 5b 06 08       	push   $0x8065b1b
 804e3e8:	88 45 bc             	mov    %al,-0x44(%ebp)
 804e3eb:	e8 90 2c 00 00       	call   8051080 <report_label_coverage>
 804e3f0:	0f b6 45 bc          	movzbl -0x44(%ebp),%eax
 804e3f4:	83 c4 10             	add    $0x10,%esp
 804e3f7:	90                   	nop
// MCC Label 304
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && grouping == GM_BOTH && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 304);
}
// MCC Label 305
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && grouping == GM_BOTH && ( first_group_printed && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804e3f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e3fc:	89 3c 24             	mov    %edi,(%esp)
 804e3ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e403:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e407:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e40b:	b9 21 85 00 00       	mov    $0x8521,%ecx
 804e410:	e8 33 65 00 00       	call   8054948 <__afl_maybe_log>
 804e415:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e419:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e41d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e421:	8b 3c 24             	mov    (%esp),%edi
 804e424:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e428:	83 ff 04             	cmp    $0x4,%edi
 804e42b:	0f 94 45 bc          	sete   -0x44(%ebp)
 804e42f:	0f b6 4d bc          	movzbl -0x44(%ebp),%ecx
 804e433:	89 ca                	mov    %ecx,%edx
 804e435:	22 55 ac             	and    -0x54(%ebp),%dl
 804e438:	0f 84 85 00 00 00    	je     804e4c3 <main+0x4f63>
 804e43e:	66 90                	xchg   %ax,%ax
 804e440:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e444:	89 3c 24             	mov    %edi,(%esp)
 804e447:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e44b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e44f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e453:	b9 45 ed 00 00       	mov    $0xed45,%ecx
 804e458:	e8 eb 64 00 00       	call   8054948 <__afl_maybe_log>
 804e45d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e461:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e465:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e469:	8b 3c 24             	mov    (%esp),%edi
 804e46c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e470:	84 db                	test   %bl,%bl
 804e472:	0f 84 64 12 00 00    	je     804f6dc <main+0x617c>
 804e478:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e47c:	89 3c 24             	mov    %edi,(%esp)
 804e47f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e483:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e487:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e48b:	b9 92 df 00 00       	mov    $0xdf92,%ecx
 804e490:	e8 b3 64 00 00       	call   8054948 <__afl_maybe_log>
 804e495:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e499:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e49d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e4a1:	8b 3c 24             	mov    (%esp),%edi
 804e4a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e4a8:	88 45 9c             	mov    %al,-0x64(%ebp)
	report_label_coverage("MCC", 305);
 804e4ab:	50                   	push   %eax
 804e4ac:	50                   	push   %eax
 804e4ad:	68 31 01 00 00       	push   $0x131
 804e4b2:	68 1b 5b 06 08       	push   $0x8065b1b
 804e4b7:	e8 c4 2b 00 00       	call   8051080 <report_label_coverage>
 804e4bc:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 804e4c0:	83 c4 10             	add    $0x10,%esp
 804e4c3:	90                   	nop
// MCC Label 310
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 310);
}
// MCC Label 311
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
 804e4c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e4c8:	89 3c 24             	mov    %edi,(%esp)
 804e4cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e4cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e4d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e4d7:	b9 a8 66 00 00       	mov    $0x66a8,%ecx
 804e4dc:	e8 67 64 00 00       	call   8054948 <__afl_maybe_log>
 804e4e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e4e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e4e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e4ed:	8b 3c 24             	mov    (%esp),%edi
 804e4f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e4f4:	80 7d ac 00          	cmpb   $0x0,-0x54(%ebp)
 804e4f8:	0f 84 f1 03 00 00    	je     804e8ef <main+0x538f>
 804e4fe:	66 90                	xchg   %ax,%ax
 804e500:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e504:	89 3c 24             	mov    %edi,(%esp)
 804e507:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e50b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e50f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e513:	b9 57 10 00 00       	mov    $0x1057,%ecx
 804e518:	e8 2b 64 00 00       	call   8054948 <__afl_maybe_log>
 804e51d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e521:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e525:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e529:	8b 3c 24             	mov    (%esp),%edi
 804e52c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e530:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e534:	89 3c 24             	mov    %edi,(%esp)
 804e537:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e53b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e53f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e543:	b9 ea 84 00 00       	mov    $0x84ea,%ecx
 804e548:	e8 fb 63 00 00       	call   8054948 <__afl_maybe_log>
 804e54d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e551:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e555:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e559:	8b 3c 24             	mov    (%esp),%edi
 804e55c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e560:	80 7d a4 00          	cmpb   $0x0,-0x5c(%ebp)
 804e564:	74 6a                	je     804e5d0 <main+0x5070>
 804e566:	66 90                	xchg   %ax,%ax
 804e568:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e56c:	89 3c 24             	mov    %edi,(%esp)
 804e56f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e573:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e577:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e57b:	b9 4c 01 00 00       	mov    $0x14c,%ecx
 804e580:	e8 c3 63 00 00       	call   8054948 <__afl_maybe_log>
 804e585:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e589:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e58d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e591:	8b 3c 24             	mov    (%esp),%edi
 804e594:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e598:	84 db                	test   %bl,%bl
 804e59a:	0f 85 38 27 00 00    	jne    8050cd8 <main+0x7778>
 804e5a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e5a4:	89 3c 24             	mov    %edi,(%esp)
 804e5a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e5ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e5af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e5b3:	b9 0d b4 00 00       	mov    $0xb40d,%ecx
 804e5b8:	e8 8b 63 00 00       	call   8054948 <__afl_maybe_log>
 804e5bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e5c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e5c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e5c9:	8b 3c 24             	mov    (%esp),%edi
 804e5cc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 311);
}
// MCC Label 312
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
 804e5d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e5d4:	89 3c 24             	mov    %edi,(%esp)
 804e5d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e5db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e5df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e5e3:	b9 9d 59 00 00       	mov    $0x599d,%ecx
 804e5e8:	e8 5b 63 00 00       	call   8054948 <__afl_maybe_log>
 804e5ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e5f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e5f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e5f9:	8b 3c 24             	mov    (%esp),%edi
 804e5fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e600:	80 7d 9f 00          	cmpb   $0x0,-0x61(%ebp)
 804e604:	74 6a                	je     804e670 <main+0x5110>
 804e606:	66 90                	xchg   %ax,%ax
 804e608:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e60c:	89 3c 24             	mov    %edi,(%esp)
 804e60f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e613:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e617:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e61b:	b9 95 0f 00 00       	mov    $0xf95,%ecx
 804e620:	e8 23 63 00 00       	call   8054948 <__afl_maybe_log>
 804e625:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e629:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e62d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e631:	8b 3c 24             	mov    (%esp),%edi
 804e634:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e638:	84 db                	test   %bl,%bl
 804e63a:	0f 85 48 26 00 00    	jne    8050c88 <main+0x7728>
 804e640:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e644:	89 3c 24             	mov    %edi,(%esp)
 804e647:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e64b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e64f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e653:	b9 bf 21 00 00       	mov    $0x21bf,%ecx
 804e658:	e8 eb 62 00 00       	call   8054948 <__afl_maybe_log>
 804e65d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e661:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e665:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e669:	8b 3c 24             	mov    (%esp),%edi
 804e66c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 312);
}
// MCC Label 313
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804e670:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e674:	89 3c 24             	mov    %edi,(%esp)
 804e677:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e67b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e67f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e683:	b9 11 ca 00 00       	mov    $0xca11,%ecx
 804e688:	e8 bb 62 00 00       	call   8054948 <__afl_maybe_log>
 804e68d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e691:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e695:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e699:	8b 3c 24             	mov    (%esp),%edi
 804e69c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e6a0:	8d 4f ff             	lea    -0x1(%edi),%ecx
 804e6a3:	83 f9 03             	cmp    $0x3,%ecx
 804e6a6:	76 7f                	jbe    804e727 <main+0x51c7>
 804e6a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e6ac:	89 3c 24             	mov    %edi,(%esp)
 804e6af:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e6b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e6b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e6bb:	b9 71 8e 00 00       	mov    $0x8e71,%ecx
 804e6c0:	e8 83 62 00 00       	call   8054948 <__afl_maybe_log>
 804e6c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e6c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e6cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e6d1:	8b 3c 24             	mov    (%esp),%edi
 804e6d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e6d8:	84 db                	test   %bl,%bl
 804e6da:	74 4b                	je     804e727 <main+0x51c7>
 804e6dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e6e0:	89 3c 24             	mov    %edi,(%esp)
 804e6e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e6e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e6eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e6ef:	b9 85 6b 00 00       	mov    $0x6b85,%ecx
 804e6f4:	e8 4f 62 00 00       	call   8054948 <__afl_maybe_log>
 804e6f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e6fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e701:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e705:	8b 3c 24             	mov    (%esp),%edi
 804e708:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e70c:	88 45 9c             	mov    %al,-0x64(%ebp)
	report_label_coverage("MCC", 313);
 804e70f:	50                   	push   %eax
 804e710:	50                   	push   %eax
 804e711:	68 39 01 00 00       	push   $0x139
 804e716:	68 1b 5b 06 08       	push   $0x8065b1b
 804e71b:	e8 60 29 00 00       	call   8051080 <report_label_coverage>
 804e720:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 804e724:	83 c4 10             	add    $0x10,%esp
 804e727:	90                   	nop
// MCC Label 314
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 314);
}
// MCC Label 315
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
 804e728:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e72c:	89 3c 24             	mov    %edi,(%esp)
 804e72f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e733:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e737:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e73b:	b9 85 2b 00 00       	mov    $0x2b85,%ecx
 804e740:	e8 03 62 00 00       	call   8054948 <__afl_maybe_log>
 804e745:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e749:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e74d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e751:	8b 3c 24             	mov    (%esp),%edi
 804e754:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e758:	83 ff 04             	cmp    $0x4,%edi
 804e75b:	0f 95 45 9c          	setne  -0x64(%ebp)
 804e75f:	0f b6 4d 9c          	movzbl -0x64(%ebp),%ecx
 804e763:	83 ff 01             	cmp    $0x1,%edi
 804e766:	0f 95 c2             	setne  %dl
 804e769:	21 ca                	and    %ecx,%edx
 804e76b:	83 f2 01             	xor    $0x1,%edx
 804e76e:	09 da                	or     %ebx,%edx
 804e770:	3a 55 a4             	cmp    -0x5c(%ebp),%dl
 804e773:	0f 82 ff 25 00 00    	jb     8050d78 <main+0x7818>
 804e779:	8d 76 00             	lea    0x0(%esi),%esi
 804e77c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e780:	89 3c 24             	mov    %edi,(%esp)
 804e783:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e78b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e78f:	b9 dd 22 00 00       	mov    $0x22dd,%ecx
 804e794:	e8 af 61 00 00       	call   8054948 <__afl_maybe_log>
 804e799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e79d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e7a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e7a5:	8b 3c 24             	mov    (%esp),%edi
 804e7a8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 315);
}
// MCC Label 316
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
 804e7ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e7b0:	89 3c 24             	mov    %edi,(%esp)
 804e7b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e7b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e7bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e7bf:	b9 1f 6e 00 00       	mov    $0x6e1f,%ecx
 804e7c4:	e8 7f 61 00 00       	call   8054948 <__afl_maybe_log>
 804e7c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e7cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e7d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e7d5:	8b 3c 24             	mov    (%esp),%edi
 804e7d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e7dc:	83 ff 04             	cmp    $0x4,%edi
 804e7df:	0f 95 45 9c          	setne  -0x64(%ebp)
 804e7e3:	0f b6 4d 9c          	movzbl -0x64(%ebp),%ecx
 804e7e7:	83 ff 01             	cmp    $0x1,%edi
 804e7ea:	0f 95 c2             	setne  %dl
 804e7ed:	21 ca                	and    %ecx,%edx
 804e7ef:	88 55 9c             	mov    %dl,-0x64(%ebp)
 804e7f2:	83 f2 01             	xor    $0x1,%edx
 804e7f5:	09 da                	or     %ebx,%edx
 804e7f7:	3a 55 9f             	cmp    -0x61(%ebp),%dl
 804e7fa:	0f 82 28 25 00 00    	jb     8050d28 <main+0x77c8>
 804e800:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e804:	89 3c 24             	mov    %edi,(%esp)
 804e807:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e80b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e80f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e813:	b9 0b 87 00 00       	mov    $0x870b,%ecx
 804e818:	e8 2b 61 00 00       	call   8054948 <__afl_maybe_log>
 804e81d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e821:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e825:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e829:	8b 3c 24             	mov    (%esp),%edi
 804e82c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 316);
}
// MCC Label 317
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804e830:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e834:	89 3c 24             	mov    %edi,(%esp)
 804e837:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e83b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e83f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e843:	b9 6b 42 00 00       	mov    $0x426b,%ecx
 804e848:	e8 fb 60 00 00       	call   8054948 <__afl_maybe_log>
 804e84d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e851:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e855:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e859:	8b 3c 24             	mov    (%esp),%edi
 804e85c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e860:	3a 5d 9c             	cmp    -0x64(%ebp),%bl
 804e863:	0f 83 86 00 00 00    	jae    804e8ef <main+0x538f>
 804e869:	8d 76 00             	lea    0x0(%esi),%esi
 804e86c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e870:	89 3c 24             	mov    %edi,(%esp)
 804e873:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e87b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e87f:	b9 79 a8 00 00       	mov    $0xa879,%ecx
 804e884:	e8 bf 60 00 00       	call   8054948 <__afl_maybe_log>
 804e889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e88d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e891:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e895:	8b 3c 24             	mov    (%esp),%edi
 804e898:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e89c:	8d 4f fe             	lea    -0x2(%edi),%ecx
 804e89f:	83 f9 01             	cmp    $0x1,%ecx
 804e8a2:	76 4b                	jbe    804e8ef <main+0x538f>
 804e8a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e8a8:	89 3c 24             	mov    %edi,(%esp)
 804e8ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e8af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e8b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e8b7:	b9 95 b6 00 00       	mov    $0xb695,%ecx
 804e8bc:	e8 87 60 00 00       	call   8054948 <__afl_maybe_log>
 804e8c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e8c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e8c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e8cd:	8b 3c 24             	mov    (%esp),%edi
 804e8d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e8d4:	88 45 9c             	mov    %al,-0x64(%ebp)
	report_label_coverage("MCC", 317);
 804e8d7:	50                   	push   %eax
 804e8d8:	50                   	push   %eax
 804e8d9:	68 3d 01 00 00       	push   $0x13d
 804e8de:	68 1b 5b 06 08       	push   $0x8065b1b
 804e8e3:	e8 98 27 00 00       	call   8051080 <report_label_coverage>
 804e8e8:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 804e8ec:	83 c4 10             	add    $0x10,%esp
 804e8ef:	90                   	nop
// MCC Label 344
if(new_group && !(grouping != GM_NONE) && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 344);
}
// MCC Label 345
if(new_group && !(grouping != GM_NONE) && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804e8f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e8f4:	89 3c 24             	mov    %edi,(%esp)
 804e8f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e8fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e8ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e903:	b9 6d f7 00 00       	mov    $0xf76d,%ecx
 804e908:	e8 3b 60 00 00       	call   8054948 <__afl_maybe_log>
 804e90d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e911:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e915:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e919:	8b 3c 24             	mov    (%esp),%edi
 804e91c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e920:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 804e924:	20 c2                	and    %al,%dl
 804e926:	0f 84 83 00 00 00    	je     804e9af <main+0x544f>
 804e92c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e930:	89 3c 24             	mov    %edi,(%esp)
 804e933:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e937:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e93b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e93f:	b9 e4 db 00 00       	mov    $0xdbe4,%ecx
 804e944:	e8 ff 5f 00 00       	call   8054948 <__afl_maybe_log>
 804e949:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e94d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e951:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e955:	8b 3c 24             	mov    (%esp),%edi
 804e958:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e95c:	84 db                	test   %bl,%bl
 804e95e:	0f 84 99 0f 00 00    	je     804f8fd <main+0x639d>
 804e964:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e968:	89 3c 24             	mov    %edi,(%esp)
 804e96b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e96f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e973:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e977:	b9 08 a9 00 00       	mov    $0xa908,%ecx
 804e97c:	e8 c7 5f 00 00       	call   8054948 <__afl_maybe_log>
 804e981:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e985:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e989:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e98d:	8b 3c 24             	mov    (%esp),%edi
 804e990:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e994:	88 45 9c             	mov    %al,-0x64(%ebp)
	report_label_coverage("MCC", 345);
 804e997:	50                   	push   %eax
 804e998:	50                   	push   %eax
 804e999:	68 59 01 00 00       	push   $0x159
 804e99e:	68 1b 5b 06 08       	push   $0x8065b1b
 804e9a3:	e8 d8 26 00 00       	call   8051080 <report_label_coverage>
 804e9a8:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 804e9ac:	83 c4 10             	add    $0x10,%esp
 804e9af:	90                   	nop
// MCC Label 360
if(!(new_group) && grouping != GM_NONE && ( grouping == GM_PREPEND && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 360);
}
// MCC Label 361
if(!(new_group) && grouping != GM_NONE && ( grouping == GM_PREPEND && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804e9b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e9b4:	89 3c 24             	mov    %edi,(%esp)
 804e9b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e9bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e9bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e9c3:	b9 87 7d 00 00       	mov    $0x7d87,%ecx
 804e9c8:	e8 7b 5f 00 00       	call   8054948 <__afl_maybe_log>
 804e9cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e9d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e9d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e9d9:	8b 3c 24             	mov    (%esp),%edi
 804e9dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e9e0:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
 804e9e4:	0f b6 55 b0          	movzbl -0x50(%ebp),%edx
 804e9e8:	0f 94 45 c0          	sete   -0x40(%ebp)
 804e9ec:	0f b6 4d c0          	movzbl -0x40(%ebp),%ecx
 804e9f0:	21 ca                	and    %ecx,%edx
 804e9f2:	0f b6 4d b8          	movzbl -0x48(%ebp),%ecx
 804e9f6:	20 d1                	and    %dl,%cl
 804e9f8:	0f 84 8c 00 00 00    	je     804ea8a <main+0x552a>
 804e9fe:	66 90                	xchg   %ax,%ax
 804ea00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ea04:	89 3c 24             	mov    %edi,(%esp)
 804ea07:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ea0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ea13:	b9 e1 7c 00 00       	mov    $0x7ce1,%ecx
 804ea18:	e8 2b 5f 00 00       	call   8054948 <__afl_maybe_log>
 804ea1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ea21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ea25:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ea29:	8b 3c 24             	mov    (%esp),%edi
 804ea2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ea30:	84 db                	test   %bl,%bl
 804ea32:	0f 84 69 0d 00 00    	je     804f7a1 <main+0x6241>
 804ea38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ea3c:	89 3c 24             	mov    %edi,(%esp)
 804ea3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ea47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ea4b:	b9 5f 18 00 00       	mov    $0x185f,%ecx
 804ea50:	e8 f3 5e 00 00       	call   8054948 <__afl_maybe_log>
 804ea55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ea59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ea5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ea61:	8b 3c 24             	mov    (%esp),%edi
 804ea64:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ea68:	88 45 b0             	mov    %al,-0x50(%ebp)
	report_label_coverage("MCC", 361);
 804ea6b:	50                   	push   %eax
 804ea6c:	50                   	push   %eax
 804ea6d:	68 69 01 00 00       	push   $0x169
 804ea72:	68 1b 5b 06 08       	push   $0x8065b1b
 804ea77:	88 55 9c             	mov    %dl,-0x64(%ebp)
 804ea7a:	e8 01 26 00 00       	call   8051080 <report_label_coverage>
 804ea7f:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 804ea83:	0f b6 55 9c          	movzbl -0x64(%ebp),%edx
 804ea87:	83 c4 10             	add    $0x10,%esp
 804ea8a:	66 90                	xchg   %ax,%ax
// MCC Label 368
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && grouping == GM_BOTH && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 368);
}
// MCC Label 369
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && grouping == GM_BOTH && ( first_group_printed && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804ea8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ea90:	89 3c 24             	mov    %edi,(%esp)
 804ea93:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ea9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ea9f:	b9 37 e0 00 00       	mov    $0xe037,%ecx
 804eaa4:	e8 9f 5e 00 00       	call   8054948 <__afl_maybe_log>
 804eaa9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eaad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eab1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eab5:	8b 3c 24             	mov    (%esp),%edi
 804eab8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eabc:	0f b6 4d bc          	movzbl -0x44(%ebp),%ecx
 804eac0:	20 d1                	and    %dl,%cl
 804eac2:	0f 84 8a 00 00 00    	je     804eb52 <main+0x55f2>
 804eac8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eacc:	89 3c 24             	mov    %edi,(%esp)
 804eacf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ead3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ead7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eadb:	b9 8f 91 00 00       	mov    $0x918f,%ecx
 804eae0:	e8 63 5e 00 00       	call   8054948 <__afl_maybe_log>
 804eae5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eae9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eaed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eaf1:	8b 3c 24             	mov    (%esp),%edi
 804eaf4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eaf8:	84 db                	test   %bl,%bl
 804eafa:	0f 84 33 0d 00 00    	je     804f833 <main+0x62d3>
 804eb00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eb04:	89 3c 24             	mov    %edi,(%esp)
 804eb07:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eb0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eb0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eb13:	b9 a8 27 00 00       	mov    $0x27a8,%ecx
 804eb18:	e8 2b 5e 00 00       	call   8054948 <__afl_maybe_log>
 804eb1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eb21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eb25:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eb29:	8b 3c 24             	mov    (%esp),%edi
 804eb2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eb30:	88 45 b0             	mov    %al,-0x50(%ebp)
	report_label_coverage("MCC", 369);
 804eb33:	50                   	push   %eax
 804eb34:	50                   	push   %eax
 804eb35:	68 71 01 00 00       	push   $0x171
 804eb3a:	68 1b 5b 06 08       	push   $0x8065b1b
 804eb3f:	88 55 9c             	mov    %dl,-0x64(%ebp)
 804eb42:	e8 39 25 00 00       	call   8051080 <report_label_coverage>
 804eb47:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 804eb4b:	0f b6 55 9c          	movzbl -0x64(%ebp),%edx
 804eb4f:	83 c4 10             	add    $0x10,%esp
 804eb52:	66 90                	xchg   %ax,%ax
// MCC Label 374
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 374);
}
// MCC Label 375
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
 804eb54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eb58:	89 3c 24             	mov    %edi,(%esp)
 804eb5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eb5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eb63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eb67:	b9 58 ce 00 00       	mov    $0xce58,%ecx
 804eb6c:	e8 d7 5d 00 00       	call   8054948 <__afl_maybe_log>
 804eb71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eb75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eb79:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eb7d:	8b 3c 24             	mov    (%esp),%edi
 804eb80:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eb84:	84 d2                	test   %dl,%dl
 804eb86:	0f 84 df 03 00 00    	je     804ef6b <main+0x5a0b>
 804eb8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eb90:	89 3c 24             	mov    %edi,(%esp)
 804eb93:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eb97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eb9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eb9f:	b9 ba 6d 00 00       	mov    $0x6dba,%ecx
 804eba4:	e8 9f 5d 00 00       	call   8054948 <__afl_maybe_log>
 804eba9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ebad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ebb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ebb5:	8b 3c 24             	mov    (%esp),%edi
 804ebb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ebbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ebc0:	89 3c 24             	mov    %edi,(%esp)
 804ebc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ebc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ebcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ebcf:	b9 a7 5a 00 00       	mov    $0x5aa7,%ecx
 804ebd4:	e8 6f 5d 00 00       	call   8054948 <__afl_maybe_log>
 804ebd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ebdd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ebe1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ebe5:	8b 3c 24             	mov    (%esp),%edi
 804ebe8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ebec:	80 7d a4 00          	cmpb   $0x0,-0x5c(%ebp)
 804ebf0:	74 6a                	je     804ec5c <main+0x56fc>
 804ebf2:	66 90                	xchg   %ax,%ax
 804ebf4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ebf8:	89 3c 24             	mov    %edi,(%esp)
 804ebfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ebff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ec03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ec07:	b9 29 8a 00 00       	mov    $0x8a29,%ecx
 804ec0c:	e8 37 5d 00 00       	call   8054948 <__afl_maybe_log>
 804ec11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ec15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ec19:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ec1d:	8b 3c 24             	mov    (%esp),%edi
 804ec20:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ec24:	84 db                	test   %bl,%bl
 804ec26:	0f 85 11 1f 00 00    	jne    8050b3d <main+0x75dd>
 804ec2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ec30:	89 3c 24             	mov    %edi,(%esp)
 804ec33:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ec37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ec3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ec3f:	b9 78 e2 00 00       	mov    $0xe278,%ecx
 804ec44:	e8 ff 5c 00 00       	call   8054948 <__afl_maybe_log>
 804ec49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ec4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ec51:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ec55:	8b 3c 24             	mov    (%esp),%edi
 804ec58:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 375);
}
// MCC Label 376
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
 804ec5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ec60:	89 3c 24             	mov    %edi,(%esp)
 804ec63:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ec67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ec6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ec6f:	b9 d6 ef 00 00       	mov    $0xefd6,%ecx
 804ec74:	e8 cf 5c 00 00       	call   8054948 <__afl_maybe_log>
 804ec79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ec7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ec81:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ec85:	8b 3c 24             	mov    (%esp),%edi
 804ec88:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ec8c:	80 7d 9f 00          	cmpb   $0x0,-0x61(%ebp)
 804ec90:	74 6a                	je     804ecfc <main+0x579c>
 804ec92:	66 90                	xchg   %ax,%ax
 804ec94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ec98:	89 3c 24             	mov    %edi,(%esp)
 804ec9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ec9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eca3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eca7:	b9 06 60 00 00       	mov    $0x6006,%ecx
 804ecac:	e8 97 5c 00 00       	call   8054948 <__afl_maybe_log>
 804ecb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ecb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ecb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ecbd:	8b 3c 24             	mov    (%esp),%edi
 804ecc0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ecc4:	84 db                	test   %bl,%bl
 804ecc6:	0f 85 c4 1e 00 00    	jne    8050b90 <main+0x7630>
 804eccc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ecd0:	89 3c 24             	mov    %edi,(%esp)
 804ecd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ecd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ecdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ecdf:	b9 ef 50 00 00       	mov    $0x50ef,%ecx
 804ece4:	e8 5f 5c 00 00       	call   8054948 <__afl_maybe_log>
 804ece9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eced:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ecf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ecf5:	8b 3c 24             	mov    (%esp),%edi
 804ecf8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 376);
}
// MCC Label 377
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804ecfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ed00:	89 3c 24             	mov    %edi,(%esp)
 804ed03:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ed07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ed0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ed0f:	b9 bd 92 00 00       	mov    $0x92bd,%ecx
 804ed14:	e8 2f 5c 00 00       	call   8054948 <__afl_maybe_log>
 804ed19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ed1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ed21:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ed25:	8b 3c 24             	mov    (%esp),%edi
 804ed28:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ed2c:	8d 4f ff             	lea    -0x1(%edi),%ecx
 804ed2f:	83 f9 03             	cmp    $0x3,%ecx
 804ed32:	76 7f                	jbe    804edb3 <main+0x5853>
 804ed34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ed38:	89 3c 24             	mov    %edi,(%esp)
 804ed3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ed3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ed43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ed47:	b9 6b 71 00 00       	mov    $0x716b,%ecx
 804ed4c:	e8 f7 5b 00 00       	call   8054948 <__afl_maybe_log>
 804ed51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ed55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ed59:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ed5d:	8b 3c 24             	mov    (%esp),%edi
 804ed60:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ed64:	84 db                	test   %bl,%bl
 804ed66:	74 4b                	je     804edb3 <main+0x5853>
 804ed68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ed6c:	89 3c 24             	mov    %edi,(%esp)
 804ed6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ed73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ed77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ed7b:	b9 94 b2 00 00       	mov    $0xb294,%ecx
 804ed80:	e8 c3 5b 00 00       	call   8054948 <__afl_maybe_log>
 804ed85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ed89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ed8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ed91:	8b 3c 24             	mov    (%esp),%edi
 804ed94:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ed98:	88 45 b0             	mov    %al,-0x50(%ebp)
	report_label_coverage("MCC", 377);
 804ed9b:	50                   	push   %eax
 804ed9c:	50                   	push   %eax
 804ed9d:	68 79 01 00 00       	push   $0x179
 804eda2:	68 1b 5b 06 08       	push   $0x8065b1b
 804eda7:	e8 d4 22 00 00       	call   8051080 <report_label_coverage>
 804edac:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 804edb0:	83 c4 10             	add    $0x10,%esp
 804edb3:	90                   	nop
// MCC Label 378
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 378);
}
// MCC Label 379
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
 804edb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804edb8:	89 3c 24             	mov    %edi,(%esp)
 804edbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804edbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804edc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804edc7:	b9 8a af 00 00       	mov    $0xaf8a,%ecx
 804edcc:	e8 77 5b 00 00       	call   8054948 <__afl_maybe_log>
 804edd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804edd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804edd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eddd:	8b 3c 24             	mov    (%esp),%edi
 804ede0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ede4:	83 ff 04             	cmp    $0x4,%edi
 804ede7:	0f 95 c1             	setne  %cl
 804edea:	83 ff 01             	cmp    $0x1,%edi
 804eded:	0f 95 c2             	setne  %dl
 804edf0:	21 ca                	and    %ecx,%edx
 804edf2:	83 f2 01             	xor    $0x1,%edx
 804edf5:	09 da                	or     %ebx,%edx
 804edf7:	3a 55 a4             	cmp    -0x5c(%ebp),%dl
 804edfa:	0f 82 37 1e 00 00    	jb     8050c37 <main+0x76d7>
 804ee00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ee04:	89 3c 24             	mov    %edi,(%esp)
 804ee07:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ee0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ee0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ee13:	b9 3e 35 00 00       	mov    $0x353e,%ecx
 804ee18:	e8 2b 5b 00 00       	call   8054948 <__afl_maybe_log>
 804ee1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ee21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ee25:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ee29:	8b 3c 24             	mov    (%esp),%edi
 804ee2c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 379);
}
// MCC Label 380
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
 804ee30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ee34:	89 3c 24             	mov    %edi,(%esp)
 804ee37:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ee3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ee3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ee43:	b9 c3 71 00 00       	mov    $0x71c3,%ecx
 804ee48:	e8 fb 5a 00 00       	call   8054948 <__afl_maybe_log>
 804ee4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ee51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ee55:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ee59:	8b 3c 24             	mov    (%esp),%edi
 804ee5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ee60:	83 ff 04             	cmp    $0x4,%edi
 804ee63:	0f 95 c1             	setne  %cl
 804ee66:	83 ff 01             	cmp    $0x1,%edi
 804ee69:	0f 95 c2             	setne  %dl
 804ee6c:	21 ca                	and    %ecx,%edx
 804ee6e:	89 d1                	mov    %edx,%ecx
 804ee70:	83 f1 01             	xor    $0x1,%ecx
 804ee73:	09 d9                	or     %ebx,%ecx
 804ee75:	3a 4d 9f             	cmp    -0x61(%ebp),%cl
 804ee78:	0f 82 62 1d 00 00    	jb     8050be0 <main+0x7680>
 804ee7e:	66 90                	xchg   %ax,%ax
 804ee80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ee84:	89 3c 24             	mov    %edi,(%esp)
 804ee87:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ee8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ee8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ee93:	b9 7e db 00 00       	mov    $0xdb7e,%ecx
 804ee98:	e8 ab 5a 00 00       	call   8054948 <__afl_maybe_log>
 804ee9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eea1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eea5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eea9:	8b 3c 24             	mov    (%esp),%edi
 804eeac:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 380);
}
// MCC Label 381
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804eeb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eeb4:	89 3c 24             	mov    %edi,(%esp)
 804eeb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eebb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eebf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eec3:	b9 e1 83 00 00       	mov    $0x83e1,%ecx
 804eec8:	e8 7b 5a 00 00       	call   8054948 <__afl_maybe_log>
 804eecd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eed1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eed5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eed9:	8b 3c 24             	mov    (%esp),%edi
 804eedc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eee0:	38 d3                	cmp    %dl,%bl
 804eee2:	0f 83 83 00 00 00    	jae    804ef6b <main+0x5a0b>
 804eee8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eeec:	89 3c 24             	mov    %edi,(%esp)
 804eeef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eef3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eef7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eefb:	b9 f1 e3 00 00       	mov    $0xe3f1,%ecx
 804ef00:	e8 43 5a 00 00       	call   8054948 <__afl_maybe_log>
 804ef05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ef09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ef0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ef11:	8b 3c 24             	mov    (%esp),%edi
 804ef14:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ef18:	8d 57 fe             	lea    -0x2(%edi),%edx
 804ef1b:	83 fa 01             	cmp    $0x1,%edx
 804ef1e:	76 4b                	jbe    804ef6b <main+0x5a0b>
 804ef20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ef24:	89 3c 24             	mov    %edi,(%esp)
 804ef27:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ef2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ef2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ef33:	b9 4d e6 00 00       	mov    $0xe64d,%ecx
 804ef38:	e8 0b 5a 00 00       	call   8054948 <__afl_maybe_log>
 804ef3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ef41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ef45:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ef49:	8b 3c 24             	mov    (%esp),%edi
 804ef4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ef50:	88 45 b0             	mov    %al,-0x50(%ebp)
	report_label_coverage("MCC", 381);
 804ef53:	50                   	push   %eax
 804ef54:	50                   	push   %eax
 804ef55:	68 7d 01 00 00       	push   $0x17d
 804ef5a:	68 1b 5b 06 08       	push   $0x8065b1b
 804ef5f:	e8 1c 21 00 00       	call   8051080 <report_label_coverage>
 804ef64:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 804ef68:	83 c4 10             	add    $0x10,%esp
 804ef6b:	90                   	nop
// MCC Label 408
if(!(new_group) && !(grouping != GM_NONE) && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 408);
}
// MCC Label 409
if(!(new_group) && !(grouping != GM_NONE) && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804ef6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ef70:	89 3c 24             	mov    %edi,(%esp)
 804ef73:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ef77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ef7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ef7f:	b9 60 e6 00 00       	mov    $0xe660,%ecx
 804ef84:	e8 bf 59 00 00       	call   8054948 <__afl_maybe_log>
 804ef89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ef8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ef91:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ef95:	8b 3c 24             	mov    (%esp),%edi
 804ef98:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ef9c:	22 45 c0             	and    -0x40(%ebp),%al
 804ef9f:	74 7f                	je     804f020 <main+0x5ac0>
 804efa1:	8d 76 00             	lea    0x0(%esi),%esi
 804efa4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804efa8:	89 3c 24             	mov    %edi,(%esp)
 804efab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804efaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804efb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804efb7:	b9 ac db 00 00       	mov    $0xdbac,%ecx
 804efbc:	e8 87 59 00 00       	call   8054948 <__afl_maybe_log>
 804efc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804efc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804efc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804efcd:	8b 3c 24             	mov    (%esp),%edi
 804efd0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804efd4:	84 db                	test   %bl,%bl
 804efd6:	0f 84 ac 09 00 00    	je     804f988 <main+0x6428>
 804efdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804efe0:	89 3c 24             	mov    %edi,(%esp)
 804efe3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804efe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804efeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804efef:	b9 19 a3 00 00       	mov    $0xa319,%ecx
 804eff4:	e8 4f 59 00 00       	call   8054948 <__afl_maybe_log>
 804eff9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804effd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f001:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f005:	8b 3c 24             	mov    (%esp),%edi
 804f008:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 409);
 804f00c:	50                   	push   %eax
 804f00d:	50                   	push   %eax
 804f00e:	68 99 01 00 00       	push   $0x199
 804f013:	68 1b 5b 06 08       	push   $0x8065b1b
 804f018:	e8 63 20 00 00       	call   8051080 <report_label_coverage>
 804f01d:	83 c4 10             	add    $0x10,%esp
}
// MCC Label 413
if(!(new_group) && !(grouping != GM_NONE) && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
	report_label_coverage("MCC", 413);
}
if (new_group && grouping != GM_NONE && (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE))))
 804f020:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f024:	89 3c 24             	mov    %edi,(%esp)
 804f027:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f02b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f02f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f033:	b9 e5 61 00 00       	mov    $0x61e5,%ecx
 804f038:	e8 0b 59 00 00       	call   8054948 <__afl_maybe_log>
 804f03d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f041:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f045:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f049:	8b 3c 24             	mov    (%esp),%edi
 804f04c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f050:	80 7d ac 00          	cmpb   $0x0,-0x54(%ebp)
 804f054:	0f 84 af 09 00 00    	je     804fa09 <main+0x64a9>
 804f05a:	66 90                	xchg   %ax,%ax
 804f05c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f060:	89 3c 24             	mov    %edi,(%esp)
 804f063:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f067:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f06b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f06f:	b9 c5 b2 00 00       	mov    $0xb2c5,%ecx
 804f074:	e8 cf 58 00 00       	call   8054948 <__afl_maybe_log>
 804f079:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f07d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f081:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f085:	8b 3c 24             	mov    (%esp),%edi
 804f088:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f08c:	80 7d bc 00          	cmpb   $0x0,-0x44(%ebp)
 804f090:	0f 85 da 0e 00 00    	jne    804ff70 <main+0x6a10>
 804f096:	66 90                	xchg   %ax,%ax
 804f098:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f09c:	89 3c 24             	mov    %edi,(%esp)
 804f09f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f0a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f0a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f0ab:	b9 09 3f 00 00       	mov    $0x3f09,%ecx
 804f0b0:	e8 93 58 00 00       	call   8054948 <__afl_maybe_log>
 804f0b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f0b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f0bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f0c1:	8b 3c 24             	mov    (%esp),%edi
 804f0c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f0c8:	80 7d b8 00          	cmpb   $0x0,-0x48(%ebp)
 804f0cc:	0f 85 9e 0e 00 00    	jne    804ff70 <main+0x6a10>
 804f0d2:	66 90                	xchg   %ax,%ax
 804f0d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f0d8:	89 3c 24             	mov    %edi,(%esp)
 804f0db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f0df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f0e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f0e7:	b9 cb ac 00 00       	mov    $0xaccb,%ecx
 804f0ec:	e8 57 58 00 00       	call   8054948 <__afl_maybe_log>
 804f0f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f0f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f0f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f0fd:	8b 3c 24             	mov    (%esp),%edi
 804f100:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f104:	84 db                	test   %bl,%bl
 804f106:	74 6c                	je     804f174 <main+0x5c14>
 804f108:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f10c:	89 3c 24             	mov    %edi,(%esp)
 804f10f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f113:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f117:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f11b:	b9 c7 55 00 00       	mov    $0x55c7,%ecx
 804f120:	e8 23 58 00 00       	call   8054948 <__afl_maybe_log>
 804f125:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f129:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f12d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f131:	8b 3c 24             	mov    (%esp),%edi
 804f134:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f138:	8d 7f fe             	lea    -0x2(%edi),%edi
 804f13b:	83 ff 01             	cmp    $0x1,%edi
 804f13e:	0f 86 2c 0e 00 00    	jbe    804ff70 <main+0x6a10>
 804f144:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f148:	89 3c 24             	mov    %edi,(%esp)
 804f14b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f14f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f153:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f157:	b9 c0 9e 00 00       	mov    $0x9ec0,%ecx
 804f15c:	e8 e7 57 00 00       	call   8054948 <__afl_maybe_log>
 804f161:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f165:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f169:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f16d:	8b 3c 24             	mov    (%esp),%edi
 804f170:	8d 64 24 10          	lea    0x10(%esp),%esp
                putchar_unlocked(delimiter);
            
// COR Label 414
if((new_group && grouping != GM_NONE) != (new_group || grouping != GM_NONE))  {
 804f174:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f178:	89 3c 24             	mov    %edi,(%esp)
 804f17b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f17f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f183:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f187:	b9 53 2a 00 00       	mov    $0x2a53,%ecx
 804f18c:	e8 b7 57 00 00       	call   8054948 <__afl_maybe_log>
 804f191:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f195:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f199:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f19d:	8b 3c 24             	mov    (%esp),%edi
 804f1a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f1a4:	83 3d 00 a3 06 08 00 	cmpl   $0x0,0x806a300
 804f1ab:	75 77                	jne    804f224 <main+0x5cc4>
 804f1ad:	8d 76 00             	lea    0x0(%esi),%esi
 804f1b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f1b4:	89 3c 24             	mov    %edi,(%esp)
 804f1b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f1bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f1bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f1c3:	b9 13 95 00 00       	mov    $0x9513,%ecx
 804f1c8:	e8 7b 57 00 00       	call   8054948 <__afl_maybe_log>
 804f1cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f1d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f1d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f1d9:	8b 3c 24             	mov    (%esp),%edi
 804f1dc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 414);
 804f1e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f1e4:	89 3c 24             	mov    %edi,(%esp)
 804f1e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f1eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f1ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f1f3:	b9 cb 9a 00 00       	mov    $0x9acb,%ecx
 804f1f8:	e8 4b 57 00 00       	call   8054948 <__afl_maybe_log>
 804f1fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f201:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f205:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f209:	8b 3c 24             	mov    (%esp),%edi
 804f20c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f210:	57                   	push   %edi
 804f211:	57                   	push   %edi
 804f212:	68 9e 01 00 00       	push   $0x19e
 804f217:	68 13 5b 06 08       	push   $0x8065b13
 804f21c:	e8 5f 1e 00 00       	call   8051080 <report_label_coverage>
 804f221:	83 c4 10             	add    $0x10,%esp
}

// ROR Label 415
if((grouping == GM_NONE) != (grouping != GM_NONE))  {
 804f224:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f228:	89 3c 24             	mov    %edi,(%esp)
 804f22b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f22f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f233:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f237:	b9 83 35 00 00       	mov    $0x3583,%ecx
 804f23c:	e8 07 57 00 00       	call   8054948 <__afl_maybe_log>
 804f241:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f245:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f249:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f24d:	8b 3c 24             	mov    (%esp),%edi
 804f250:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f254:	8b 3d 00 a3 06 08    	mov    0x806a300,%edi
 804f25a:	85 ff                	test   %edi,%edi
 804f25c:	0f 95 c1             	setne  %cl
 804f25f:	0f 94 c2             	sete   %dl
 804f262:	38 ca                	cmp    %cl,%dl
 804f264:	89 cf                	mov    %ecx,%edi
 804f266:	74 4b                	je     804f2b3 <main+0x5d53>
 804f268:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f26c:	89 3c 24             	mov    %edi,(%esp)
 804f26f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f273:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f277:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f27b:	b9 67 1a 00 00       	mov    $0x1a67,%ecx
 804f280:	e8 c3 56 00 00       	call   8054948 <__afl_maybe_log>
 804f285:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f289:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f28d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f291:	8b 3c 24             	mov    (%esp),%edi
 804f294:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 415);
 804f298:	51                   	push   %ecx
 804f299:	51                   	push   %ecx
 804f29a:	68 9f 01 00 00       	push   $0x19f
 804f29f:	68 17 5b 06 08       	push   $0x8065b17
 804f2a4:	88 55 bc             	mov    %dl,-0x44(%ebp)
 804f2a7:	e8 d4 1d 00 00       	call   8051080 <report_label_coverage>
 804f2ac:	0f b6 55 bc          	movzbl -0x44(%ebp),%edx
 804f2b0:	83 c4 10             	add    $0x10,%esp
 804f2b3:	90                   	nop
}

// MCC Label 416
if(new_group && grouping != GM_NONE ) {
 804f2b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f2b8:	89 3c 24             	mov    %edi,(%esp)
 804f2bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f2bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f2c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f2c7:	b9 47 10 00 00       	mov    $0x1047,%ecx
 804f2cc:	e8 77 56 00 00       	call   8054948 <__afl_maybe_log>
 804f2d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f2d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f2d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f2dd:	8b 3c 24             	mov    (%esp),%edi
 804f2e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f2e4:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
 804f2e8:	0f 84 0e 01 00 00    	je     804f3fc <main+0x5e9c>
 804f2ee:	66 90                	xchg   %ax,%ax
 804f2f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f2f4:	89 3c 24             	mov    %edi,(%esp)
 804f2f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f2fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f2ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f303:	b9 0d 58 00 00       	mov    $0x580d,%ecx
 804f308:	e8 3b 56 00 00       	call   8054948 <__afl_maybe_log>
 804f30d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f311:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f315:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f319:	8b 3c 24             	mov    (%esp),%edi
 804f31c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f320:	89 f8                	mov    %edi,%eax
 804f322:	84 c0                	test   %al,%al
 804f324:	0f 85 1e 0d 00 00    	jne    8050048 <main+0x6ae8>
 804f32a:	66 90                	xchg   %ax,%ax
 804f32c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f330:	89 3c 24             	mov    %edi,(%esp)
 804f333:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f337:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f33b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f33f:	b9 2b 71 00 00       	mov    $0x712b,%ecx
 804f344:	e8 ff 55 00 00       	call   8054948 <__afl_maybe_log>
 804f349:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f34d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f351:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f355:	8b 3c 24             	mov    (%esp),%edi
 804f358:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 416);
}
// MCC Label 417
if(new_group && !(grouping != GM_NONE) ) {
 804f35c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f360:	89 3c 24             	mov    %edi,(%esp)
 804f363:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f367:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f36b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f36f:	b9 7f bf 00 00       	mov    $0xbf7f,%ecx
 804f374:	e8 cf 55 00 00       	call   8054948 <__afl_maybe_log>
 804f379:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f37d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f381:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f385:	8b 3c 24             	mov    (%esp),%edi
 804f388:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f38c:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
 804f390:	74 6a                	je     804f3fc <main+0x5e9c>
 804f392:	66 90                	xchg   %ax,%ax
 804f394:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f398:	89 3c 24             	mov    %edi,(%esp)
 804f39b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f39f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f3a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f3a7:	b9 3b ff 00 00       	mov    $0xff3b,%ecx
 804f3ac:	e8 97 55 00 00       	call   8054948 <__afl_maybe_log>
 804f3b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f3b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f3b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f3bd:	8b 3c 24             	mov    (%esp),%edi
 804f3c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f3c4:	84 d2                	test   %dl,%dl
 804f3c6:	0f 85 29 0c 00 00    	jne    804fff5 <main+0x6a95>
 804f3cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f3d0:	89 3c 24             	mov    %edi,(%esp)
 804f3d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f3d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f3db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f3df:	b9 64 17 00 00       	mov    $0x1764,%ecx
 804f3e4:	e8 5f 55 00 00       	call   8054948 <__afl_maybe_log>
 804f3e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f3ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f3f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f3f5:	8b 3c 24             	mov    (%esp),%edi
 804f3f8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 417);
}
// MCC Label 418
if(!(new_group) && grouping != GM_NONE ) {
 804f3fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f400:	89 3c 24             	mov    %edi,(%esp)
 804f403:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f407:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f40b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f40f:	b9 39 d4 00 00       	mov    $0xd439,%ecx
 804f414:	e8 2f 55 00 00       	call   8054948 <__afl_maybe_log>
 804f419:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f41d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f421:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f425:	8b 3c 24             	mov    (%esp),%edi
 804f428:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f42c:	80 7d c0 00          	cmpb   $0x0,-0x40(%ebp)
 804f430:	0f 84 0e 01 00 00    	je     804f544 <main+0x5fe4>
 804f436:	66 90                	xchg   %ax,%ax
 804f438:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f43c:	89 3c 24             	mov    %edi,(%esp)
 804f43f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f443:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f447:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f44b:	b9 83 f7 00 00       	mov    $0xf783,%ecx
 804f450:	e8 f3 54 00 00       	call   8054948 <__afl_maybe_log>
 804f455:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f459:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f45d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f461:	8b 3c 24             	mov    (%esp),%edi
 804f464:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f468:	89 f9                	mov    %edi,%ecx
 804f46a:	84 c9                	test   %cl,%cl
 804f46c:	0f 85 ab 0a 00 00    	jne    804ff1d <main+0x69bd>
 804f472:	66 90                	xchg   %ax,%ax
 804f474:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f478:	89 3c 24             	mov    %edi,(%esp)
 804f47b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f47f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f483:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f487:	b9 e2 06 00 00       	mov    $0x6e2,%ecx
 804f48c:	e8 b7 54 00 00       	call   8054948 <__afl_maybe_log>
 804f491:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f495:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f499:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f49d:	8b 3c 24             	mov    (%esp),%edi
 804f4a0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 418);
}
// MCC Label 419
if(!(new_group) && !(grouping != GM_NONE) ) {
 804f4a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f4a8:	89 3c 24             	mov    %edi,(%esp)
 804f4ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f4af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f4b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f4b7:	b9 65 e0 00 00       	mov    $0xe065,%ecx
 804f4bc:	e8 87 54 00 00       	call   8054948 <__afl_maybe_log>
 804f4c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f4c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f4c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f4cd:	8b 3c 24             	mov    (%esp),%edi
 804f4d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f4d4:	80 7d c0 00          	cmpb   $0x0,-0x40(%ebp)
 804f4d8:	74 6a                	je     804f544 <main+0x5fe4>
 804f4da:	66 90                	xchg   %ax,%ax
 804f4dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f4e0:	89 3c 24             	mov    %edi,(%esp)
 804f4e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f4e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f4eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f4ef:	b9 9b 52 00 00       	mov    $0x529b,%ecx
 804f4f4:	e8 4f 54 00 00       	call   8054948 <__afl_maybe_log>
 804f4f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f4fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f501:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f505:	8b 3c 24             	mov    (%esp),%edi
 804f508:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f50c:	84 d2                	test   %dl,%dl
 804f50e:	0f 85 c0 09 00 00    	jne    804fed4 <main+0x6974>
 804f514:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f518:	89 3c 24             	mov    %edi,(%esp)
 804f51b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f51f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f523:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f527:	b9 a1 79 00 00       	mov    $0x79a1,%ecx
 804f52c:	e8 17 54 00 00       	call   8054948 <__afl_maybe_log>
 804f531:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f535:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f539:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f53d:	8b 3c 24             	mov    (%esp),%edi
 804f540:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 419);
}
if (new_group || grouping != GM_NONE) {
 804f544:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f548:	89 3c 24             	mov    %edi,(%esp)
 804f54b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f54f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f553:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f557:	b9 cf a6 00 00       	mov    $0xa6cf,%ecx
 804f55c:	e8 e7 53 00 00       	call   8054948 <__afl_maybe_log>
 804f561:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f565:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f569:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f56d:	8b 3c 24             	mov    (%esp),%edi
 804f570:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f574:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
 804f578:	75 6e                	jne    804f5e8 <main+0x6088>
 804f57a:	66 90                	xchg   %ax,%ax
 804f57c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f580:	89 3c 24             	mov    %edi,(%esp)
 804f583:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f587:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f58b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f58f:	b9 3f 58 00 00       	mov    $0x583f,%ecx
 804f594:	e8 af 53 00 00       	call   8054948 <__afl_maybe_log>
 804f599:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f59d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f5a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f5a5:	8b 3c 24             	mov    (%esp),%edi
 804f5a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f5ac:	89 f8                	mov    %edi,%eax
 804f5ae:	84 c0                	test   %al,%al
 804f5b0:	0f 84 bf e4 ff ff    	je     804da75 <main+0x4515>
 804f5b6:	66 90                	xchg   %ax,%ax
 804f5b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f5bc:	89 3c 24             	mov    %edi,(%esp)
 804f5bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f5c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f5c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f5cb:	b9 19 33 00 00       	mov    $0x3319,%ecx
 804f5d0:	e8 73 53 00 00       	call   8054948 <__afl_maybe_log>
 804f5d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f5d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f5dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f5e1:	8b 3c 24             	mov    (%esp),%edi
 804f5e4:	8d 64 24 10          	lea    0x10(%esp),%esp

// ABS Label 421
if(stdout < 0)  {
	report_label_coverage("ABS", 421);
}
fwrite_unlocked(thisline->buffer, sizeof(char), thisline->length, stdout);
 804f5e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f5ec:	89 3c 24             	mov    %edi,(%esp)
 804f5ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f5f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f5f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f5fb:	b9 c7 f5 00 00       	mov    $0xf5c7,%ecx
 804f600:	e8 43 53 00 00       	call   8054948 <__afl_maybe_log>
 804f605:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f609:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f60d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f611:	8b 3c 24             	mov    (%esp),%edi
 804f614:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f618:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
 804f61b:	8b 7b 04             	mov    0x4(%ebx),%edi
 804f61e:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
 804f621:	ff 35 d8 a2 06 08    	pushl  0x806a2d8
 804f627:	57                   	push   %edi
 804f628:	6a 01                	push   $0x1
 804f62a:	ff 73 08             	pushl  0x8(%ebx)
 804f62d:	e8 ee 9d ff ff       	call   8049420 <fwrite_unlocked@plt>
 804f632:	8b 55 a8             	mov    -0x58(%ebp),%edx
}
if (temp_2 == 0)
                    break;
            }
            thisfield = ({
                char *kbcieiubweuhc1967513926 = find_field(thisline + (lava_get(169)) * (1818326456 == (lava_get(169)) || 3094700396U == (lava_get(169))) + (lava_get(171)) * (1818326454 == (lava_get(171)) || 3061145964U == (lava_get(171))) + (lava_get(170)) * (1818326455 == (lava_get(170)) || 3077923180U == (lava_get(170))));
 804f635:	89 75 90             	mov    %esi,-0x70(%ebp)

// ABS Label 421
if(stdout < 0)  {
	report_label_coverage("ABS", 421);
}
fwrite_unlocked(thisline->buffer, sizeof(char), thisline->length, stdout);
 804f638:	83 c4 10             	add    $0x10,%esp
 804f63b:	8b 75 a0             	mov    -0x60(%ebp),%esi
 804f63e:	89 5d a0             	mov    %ebx,-0x60(%ebp)
                    (prevline) = (thisline);
                    (thisline) = _tmp;
                } while (0);;
                prevfield = thisfield;
                prevlen = thislen;
                first_group_printed = 1;
 804f641:	bb 01 00 00 00       	mov    $0x1,%ebx

// ABS Label 421
if(stdout < 0)  {
	report_label_coverage("ABS", 421);
}
fwrite_unlocked(thisline->buffer, sizeof(char), thisline->length, stdout);
 804f646:	89 55 8c             	mov    %edx,-0x74(%ebp)
 804f649:	89 75 b4             	mov    %esi,-0x4c(%ebp)
 804f64c:	e9 24 e4 ff ff       	jmp    804da75 <main+0x4515>
 804f651:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 300
if(new_group && grouping != GM_NONE && ( grouping == GM_PREPEND && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 300);
}
// MCC Label 301
if(new_group && grouping != GM_NONE && ( grouping == GM_PREPEND && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804f654:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f658:	89 3c 24             	mov    %edi,(%esp)
 804f65b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f65f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f663:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f667:	b9 5b 73 00 00       	mov    $0x735b,%ecx
 804f66c:	e8 d7 52 00 00       	call   8054948 <__afl_maybe_log>
 804f671:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f675:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f679:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f67d:	8b 3c 24             	mov    (%esp),%edi
 804f680:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f684:	38 cb                	cmp    %cl,%bl
 804f686:	0f 83 6b ed ff ff    	jae    804e3f7 <main+0x4e97>
 804f68c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f690:	89 3c 24             	mov    %edi,(%esp)
 804f693:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f697:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f69b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f69f:	b9 08 3a 00 00       	mov    $0x3a08,%ecx
 804f6a4:	e8 9f 52 00 00       	call   8054948 <__afl_maybe_log>
 804f6a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f6ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f6b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f6b5:	8b 3c 24             	mov    (%esp),%edi
 804f6b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f6bc:	88 45 bc             	mov    %al,-0x44(%ebp)
	report_label_coverage("MCC", 301);
 804f6bf:	50                   	push   %eax
 804f6c0:	50                   	push   %eax
 804f6c1:	68 2d 01 00 00       	push   $0x12d
 804f6c6:	68 1b 5b 06 08       	push   $0x8065b1b
 804f6cb:	e8 b0 19 00 00       	call   8051080 <report_label_coverage>
 804f6d0:	83 c4 10             	add    $0x10,%esp
 804f6d3:	0f b6 45 bc          	movzbl -0x44(%ebp),%eax
 804f6d7:	e9 1b ed ff ff       	jmp    804e3f7 <main+0x4e97>
// MCC Label 308
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && grouping == GM_BOTH && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 308);
}
// MCC Label 309
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && grouping == GM_BOTH && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804f6dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f6e0:	89 3c 24             	mov    %edi,(%esp)
 804f6e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f6e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f6eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f6ef:	b9 8e 81 00 00       	mov    $0x818e,%ecx
 804f6f4:	e8 4f 52 00 00       	call   8054948 <__afl_maybe_log>
 804f6f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f6fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f701:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f705:	8b 3c 24             	mov    (%esp),%edi
 804f708:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f70c:	38 d3                	cmp    %dl,%bl
 804f70e:	0f 83 af ed ff ff    	jae    804e4c3 <main+0x4f63>
 804f714:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f718:	89 3c 24             	mov    %edi,(%esp)
 804f71b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f71f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f723:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f727:	b9 cb f8 00 00       	mov    $0xf8cb,%ecx
 804f72c:	e8 17 52 00 00       	call   8054948 <__afl_maybe_log>
 804f731:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f735:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f739:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f73d:	8b 3c 24             	mov    (%esp),%edi
 804f740:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f744:	88 45 9c             	mov    %al,-0x64(%ebp)
	report_label_coverage("MCC", 309);
 804f747:	50                   	push   %eax
 804f748:	50                   	push   %eax
 804f749:	68 35 01 00 00       	push   $0x135
 804f74e:	68 1b 5b 06 08       	push   $0x8065b1b
 804f753:	e8 28 19 00 00       	call   8051080 <report_label_coverage>
// MCC Label 310
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 310);
}
// MCC Label 311
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
 804f758:	83 c4 10             	add    $0x10,%esp
 804f75b:	80 7d ac 00          	cmpb   $0x0,-0x54(%ebp)
 804f75f:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 804f763:	0f 84 86 f1 ff ff    	je     804e8ef <main+0x538f>
 804f769:	8d 76 00             	lea    0x0(%esi),%esi
 804f76c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f770:	89 3c 24             	mov    %edi,(%esp)
 804f773:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f777:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f77b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f77f:	b9 ed 1a 00 00       	mov    $0x1aed,%ecx
 804f784:	e8 bf 51 00 00       	call   8054948 <__afl_maybe_log>
 804f789:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f78d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f791:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f795:	8b 3c 24             	mov    (%esp),%edi
 804f798:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f79c:	e9 8f ed ff ff       	jmp    804e530 <main+0x4fd0>
 804f7a1:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 364
if(!(new_group) && grouping != GM_NONE && ( grouping == GM_PREPEND && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 364);
}
// MCC Label 365
if(!(new_group) && grouping != GM_NONE && ( grouping == GM_PREPEND && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804f7a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f7a8:	89 3c 24             	mov    %edi,(%esp)
 804f7ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f7af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f7b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f7b7:	b9 ca 32 00 00       	mov    $0x32ca,%ecx
 804f7bc:	e8 87 51 00 00       	call   8054948 <__afl_maybe_log>
 804f7c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f7c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f7c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f7cd:	8b 3c 24             	mov    (%esp),%edi
 804f7d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f7d4:	38 cb                	cmp    %cl,%bl
 804f7d6:	0f 83 ae f2 ff ff    	jae    804ea8a <main+0x552a>
 804f7dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f7e0:	89 3c 24             	mov    %edi,(%esp)
 804f7e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f7e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f7eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f7ef:	b9 9e 66 00 00       	mov    $0x669e,%ecx
 804f7f4:	e8 4f 51 00 00       	call   8054948 <__afl_maybe_log>
 804f7f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f7fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f801:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f805:	8b 3c 24             	mov    (%esp),%edi
 804f808:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f80c:	88 45 b0             	mov    %al,-0x50(%ebp)
	report_label_coverage("MCC", 365);
 804f80f:	50                   	push   %eax
 804f810:	50                   	push   %eax
 804f811:	68 6d 01 00 00       	push   $0x16d
 804f816:	68 1b 5b 06 08       	push   $0x8065b1b
 804f81b:	88 55 9c             	mov    %dl,-0x64(%ebp)
 804f81e:	e8 5d 18 00 00       	call   8051080 <report_label_coverage>
 804f823:	83 c4 10             	add    $0x10,%esp
 804f826:	0f b6 55 9c          	movzbl -0x64(%ebp),%edx
 804f82a:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 804f82e:	e9 57 f2 ff ff       	jmp    804ea8a <main+0x552a>
 804f833:	90                   	nop
// MCC Label 372
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && grouping == GM_BOTH && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 372);
}
// MCC Label 373
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && grouping == GM_BOTH && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804f834:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f838:	89 3c 24             	mov    %edi,(%esp)
 804f83b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f83f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f843:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f847:	b9 2b 70 00 00       	mov    $0x702b,%ecx
 804f84c:	e8 f7 50 00 00       	call   8054948 <__afl_maybe_log>
 804f851:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f855:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f859:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f85d:	8b 3c 24             	mov    (%esp),%edi
 804f860:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f864:	38 cb                	cmp    %cl,%bl
 804f866:	0f 83 e6 f2 ff ff    	jae    804eb52 <main+0x55f2>
 804f86c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f870:	89 3c 24             	mov    %edi,(%esp)
 804f873:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f87b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f87f:	b9 97 77 00 00       	mov    $0x7797,%ecx
 804f884:	e8 bf 50 00 00       	call   8054948 <__afl_maybe_log>
 804f889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f88d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f891:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f895:	8b 3c 24             	mov    (%esp),%edi
 804f898:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 373);
 804f89c:	51                   	push   %ecx
 804f89d:	51                   	push   %ecx
 804f89e:	68 75 01 00 00       	push   $0x175
 804f8a3:	68 1b 5b 06 08       	push   $0x8065b1b
 804f8a8:	88 45 b0             	mov    %al,-0x50(%ebp)
 804f8ab:	88 55 9c             	mov    %dl,-0x64(%ebp)
 804f8ae:	e8 cd 17 00 00       	call   8051080 <report_label_coverage>
// MCC Label 374
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 374);
}
// MCC Label 375
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
 804f8b3:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 804f8b7:	83 c4 10             	add    $0x10,%esp
 804f8ba:	84 c0                	test   %al,%al
 804f8bc:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 804f8c0:	0f 84 a5 f6 ff ff    	je     804ef6b <main+0x5a0b>
 804f8c6:	66 90                	xchg   %ax,%ax
 804f8c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f8cc:	89 3c 24             	mov    %edi,(%esp)
 804f8cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f8d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f8d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f8db:	b9 23 13 00 00       	mov    $0x1323,%ecx
 804f8e0:	e8 63 50 00 00       	call   8054948 <__afl_maybe_log>
 804f8e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f8e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f8ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f8f1:	8b 3c 24             	mov    (%esp),%edi
 804f8f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f8f8:	e9 bf f2 ff ff       	jmp    804ebbc <main+0x565c>
 804f8fd:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 348
if(new_group && !(grouping != GM_NONE) && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 348);
}
// MCC Label 349
if(new_group && !(grouping != GM_NONE) && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804f900:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f904:	89 3c 24             	mov    %edi,(%esp)
 804f907:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f90b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f90f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f913:	b9 49 5b 00 00       	mov    $0x5b49,%ecx
 804f918:	e8 2b 50 00 00       	call   8054948 <__afl_maybe_log>
 804f91d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f921:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f925:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f929:	8b 3c 24             	mov    (%esp),%edi
 804f92c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f930:	38 d3                	cmp    %dl,%bl
 804f932:	0f 83 77 f0 ff ff    	jae    804e9af <main+0x544f>
 804f938:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f93c:	89 3c 24             	mov    %edi,(%esp)
 804f93f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f943:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f947:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f94b:	b9 e1 b1 00 00       	mov    $0xb1e1,%ecx
 804f950:	e8 f3 4f 00 00       	call   8054948 <__afl_maybe_log>
 804f955:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f959:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f95d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f961:	8b 3c 24             	mov    (%esp),%edi
 804f964:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f968:	88 45 9c             	mov    %al,-0x64(%ebp)
	report_label_coverage("MCC", 349);
 804f96b:	50                   	push   %eax
 804f96c:	50                   	push   %eax
 804f96d:	68 5d 01 00 00       	push   $0x15d
 804f972:	68 1b 5b 06 08       	push   $0x8065b1b
 804f977:	e8 04 17 00 00       	call   8051080 <report_label_coverage>
 804f97c:	83 c4 10             	add    $0x10,%esp
 804f97f:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 804f983:	e9 27 f0 ff ff       	jmp    804e9af <main+0x544f>
// MCC Label 412
if(!(new_group) && !(grouping != GM_NONE) && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 412);
}
// MCC Label 413
if(!(new_group) && !(grouping != GM_NONE) && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && !(grouping == GM_SEPARATE) ) ) ) ) {
 804f988:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f98c:	89 3c 24             	mov    %edi,(%esp)
 804f98f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f993:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f997:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f99b:	b9 32 a1 00 00       	mov    $0xa132,%ecx
 804f9a0:	e8 a3 4f 00 00       	call   8054948 <__afl_maybe_log>
 804f9a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f9a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f9ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f9b1:	8b 3c 24             	mov    (%esp),%edi
 804f9b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f9b8:	38 c3                	cmp    %al,%bl
 804f9ba:	0f 83 60 f6 ff ff    	jae    804f020 <main+0x5ac0>
 804f9c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f9c4:	89 3c 24             	mov    %edi,(%esp)
 804f9c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f9cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f9cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f9d3:	b9 6b de 00 00       	mov    $0xde6b,%ecx
 804f9d8:	e8 6b 4f 00 00       	call   8054948 <__afl_maybe_log>
 804f9dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f9e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f9e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f9e9:	8b 3c 24             	mov    (%esp),%edi
 804f9ec:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 413);
 804f9f0:	51                   	push   %ecx
 804f9f1:	51                   	push   %ecx
 804f9f2:	68 9d 01 00 00       	push   $0x19d
 804f9f7:	68 1b 5b 06 08       	push   $0x8065b1b
 804f9fc:	e8 7f 16 00 00       	call   8051080 <report_label_coverage>
 804fa01:	83 c4 10             	add    $0x10,%esp
 804fa04:	e9 17 f6 ff ff       	jmp    804f020 <main+0x5ac0>
 804fa09:	8d 76 00             	lea    0x0(%esi),%esi
}
if (new_group && grouping != GM_NONE && (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE))))
                putchar_unlocked(delimiter);
            
// COR Label 414
if((new_group && grouping != GM_NONE) != (new_group || grouping != GM_NONE))  {
 804fa0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fa10:	89 3c 24             	mov    %edi,(%esp)
 804fa13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fa17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fa1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fa1f:	b9 c7 7c 00 00       	mov    $0x7cc7,%ecx
 804fa24:	e8 1f 4f 00 00       	call   8054948 <__afl_maybe_log>
 804fa29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fa2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fa31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fa35:	8b 3c 24             	mov    (%esp),%edi
 804fa38:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fa3c:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
 804fa40:	0f 85 2e f7 ff ff    	jne    804f174 <main+0x5c14>
 804fa46:	66 90                	xchg   %ax,%ax
 804fa48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fa4c:	89 3c 24             	mov    %edi,(%esp)
 804fa4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fa53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fa57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fa5b:	b9 ac 17 00 00       	mov    $0x17ac,%ecx
 804fa60:	e8 e3 4e 00 00       	call   8054948 <__afl_maybe_log>
 804fa65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fa69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fa6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fa71:	8b 3c 24             	mov    (%esp),%edi
 804fa74:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fa78:	83 3d 00 a3 06 08 00 	cmpl   $0x0,0x806a300
 804fa7f:	0f 84 9f f7 ff ff    	je     804f224 <main+0x5cc4>
 804fa85:	8d 76 00             	lea    0x0(%esi),%esi
 804fa88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fa8c:	89 3c 24             	mov    %edi,(%esp)
 804fa8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fa93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fa97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fa9b:	b9 06 22 00 00       	mov    $0x2206,%ecx
 804faa0:	e8 a3 4e 00 00       	call   8054948 <__afl_maybe_log>
 804faa5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804faa9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804faad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fab1:	8b 3c 24             	mov    (%esp),%edi
 804fab4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fab8:	e9 23 f7 ff ff       	jmp    804f1e0 <main+0x5c80>
 804fabd:	8d 76 00             	lea    0x0(%esi),%esi
                }
                kbcieiubweuhc1365180540;
            }));
            
// COR Label 283
if((new_group && grouping != GM_NONE || (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))) != (new_group && grouping != GM_NONE && (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))))  {
 804fac0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fac4:	89 3c 24             	mov    %edi,(%esp)
 804fac7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804facb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804facf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fad3:	b9 a8 d4 00 00       	mov    $0xd4a8,%ecx
 804fad8:	e8 6b 4e 00 00       	call   8054948 <__afl_maybe_log>
 804fadd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fae1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fae5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fae9:	8b 3c 24             	mov    (%esp),%edi
 804faec:	8d 64 24 10          	lea    0x10(%esp),%esp
 804faf0:	83 3d 00 a3 06 08 00 	cmpl   $0x0,0x806a300
 804faf7:	0f 84 21 01 00 00    	je     804fc1e <main+0x66be>
 804fafd:	8d 76 00             	lea    0x0(%esi),%esi
 804fb00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fb04:	89 3c 24             	mov    %edi,(%esp)
 804fb07:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fb0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fb0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fb13:	b9 3d 4b 00 00       	mov    $0x4b3d,%ecx
 804fb18:	e8 2b 4e 00 00       	call   8054948 <__afl_maybe_log>
 804fb1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fb21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fb25:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fb29:	8b 3c 24             	mov    (%esp),%edi
 804fb2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fb30:	8b 0d 00 a3 06 08    	mov    0x806a300,%ecx
 804fb36:	83 f9 04             	cmp    $0x4,%ecx
 804fb39:	0f 84 13 01 00 00    	je     804fc52 <main+0x66f2>
 804fb3f:	90                   	nop
 804fb40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fb44:	89 3c 24             	mov    %edi,(%esp)
 804fb47:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fb4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fb4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fb53:	b9 5e 24 00 00       	mov    $0x245e,%ecx
 804fb58:	e8 eb 4d 00 00       	call   8054948 <__afl_maybe_log>
 804fb5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fb61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fb65:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fb69:	8b 3c 24             	mov    (%esp),%edi
 804fb6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fb70:	83 f9 01             	cmp    $0x1,%ecx
 804fb73:	0f 84 d9 00 00 00    	je     804fc52 <main+0x66f2>
 804fb79:	8d 76 00             	lea    0x0(%esi),%esi
 804fb7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fb80:	89 3c 24             	mov    %edi,(%esp)
 804fb83:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fb87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fb8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fb8f:	b9 a4 dd 00 00       	mov    $0xdda4,%ecx
 804fb94:	e8 af 4d 00 00       	call   8054948 <__afl_maybe_log>
 804fb99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fb9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fba1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fba5:	8b 3c 24             	mov    (%esp),%edi
 804fba8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fbac:	84 db                	test   %bl,%bl
 804fbae:	0f 85 6d 09 00 00    	jne    8050521 <main+0x6fc1>
 804fbb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fbb8:	89 3c 24             	mov    %edi,(%esp)
 804fbbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fbbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fbc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fbc7:	b9 50 55 00 00       	mov    $0x5550,%ecx
 804fbcc:	e8 77 4d 00 00       	call   8054948 <__afl_maybe_log>
 804fbd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fbd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fbd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fbdd:	8b 3c 24             	mov    (%esp),%edi
 804fbe0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fbe4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fbe8:	89 3c 24             	mov    %edi,(%esp)
 804fbeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fbef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fbf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fbf7:	b9 75 81 00 00       	mov    $0x8175,%ecx
 804fbfc:	e8 47 4d 00 00       	call   8054948 <__afl_maybe_log>
 804fc01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fc05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fc09:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fc0d:	8b 3c 24             	mov    (%esp),%edi
 804fc10:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fc14:	bf 01 00 00 00       	mov    $0x1,%edi
 804fc19:	e9 28 e5 ff ff       	jmp    804e146 <main+0x4be6>
 804fc1e:	66 90                	xchg   %ax,%ax
 804fc20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fc24:	89 3c 24             	mov    %edi,(%esp)
 804fc27:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fc2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fc2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fc33:	b9 c2 b1 00 00       	mov    $0xb1c2,%ecx
 804fc38:	e8 0b 4d 00 00       	call   8054948 <__afl_maybe_log>
 804fc3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fc41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fc45:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fc49:	8b 3c 24             	mov    (%esp),%edi
 804fc4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fc50:	31 c9                	xor    %ecx,%ecx
 804fc52:	66 90                	xchg   %ax,%ax
	report_label_coverage("COR", 283);
}
// COR Label 284
if((new_group || grouping != GM_NONE) != (new_group && grouping != GM_NONE))  {
 804fc54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fc58:	89 3c 24             	mov    %edi,(%esp)
 804fc5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fc5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fc63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fc67:	b9 0c 16 00 00       	mov    $0x160c,%ecx
 804fc6c:	e8 d7 4c 00 00       	call   8054948 <__afl_maybe_log>
 804fc71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fc75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fc79:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fc7d:	8b 3c 24             	mov    (%esp),%edi
 804fc80:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fc84:	85 c9                	test   %ecx,%ecx
 804fc86:	89 cf                	mov    %ecx,%edi
 804fc88:	0f 85 03 02 00 00    	jne    804fe91 <main+0x6931>
 804fc8e:	66 90                	xchg   %ax,%ax
 804fc90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fc94:	89 3c 24             	mov    %edi,(%esp)
 804fc97:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fc9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fc9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fca3:	b9 3e c3 00 00       	mov    $0xc33e,%ecx
 804fca8:	e8 9b 4c 00 00       	call   8054948 <__afl_maybe_log>
 804fcad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fcb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fcb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fcb9:	8b 3c 24             	mov    (%esp),%edi
 804fcbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fcc0:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
 804fcc7:	90                   	nop
	report_label_coverage("COR", 284);
 804fcc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fccc:	89 3c 24             	mov    %edi,(%esp)
 804fccf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fcd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fcd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fcdb:	b9 ab 51 00 00       	mov    $0x51ab,%ecx
 804fce0:	e8 63 4c 00 00       	call   8054948 <__afl_maybe_log>
 804fce5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fce9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fced:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fcf1:	8b 3c 24             	mov    (%esp),%edi
 804fcf4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fcf8:	57                   	push   %edi
 804fcf9:	57                   	push   %edi
 804fcfa:	68 1c 01 00 00       	push   $0x11c
 804fcff:	68 13 5b 06 08       	push   $0x8065b13
 804fd04:	e8 77 13 00 00       	call   8051080 <report_label_coverage>
 804fd09:	83 c4 10             	add    $0x10,%esp
 804fd0c:	e9 2b e5 ff ff       	jmp    804e23c <main+0x4cdc>
 804fd11:	8d 76 00             	lea    0x0(%esi),%esi
                }
                kbcieiubweuhc1365180540;
            }));
            
// COR Label 283
if((new_group && grouping != GM_NONE || (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))) != (new_group && grouping != GM_NONE && (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))))  {
 804fd14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fd18:	89 3c 24             	mov    %edi,(%esp)
 804fd1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fd1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fd23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fd27:	b9 6e 73 00 00       	mov    $0x736e,%ecx
 804fd2c:	e8 17 4c 00 00       	call   8054948 <__afl_maybe_log>
 804fd31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fd35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fd39:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fd3d:	8b 3c 24             	mov    (%esp),%edi
 804fd40:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fd44:	84 db                	test   %bl,%bl
 804fd46:	0f 84 80 e4 ff ff    	je     804e1cc <main+0x4c6c>
 804fd4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fd50:	89 3c 24             	mov    %edi,(%esp)
 804fd53:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fd57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fd5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fd5f:	b9 40 7f 00 00       	mov    $0x7f40,%ecx
 804fd64:	e8 df 4b 00 00       	call   8054948 <__afl_maybe_log>
 804fd69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fd6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fd71:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fd75:	8b 3c 24             	mov    (%esp),%edi
 804fd78:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fd7c:	83 ef 02             	sub    $0x2,%edi
 804fd7f:	83 ff 01             	cmp    $0x1,%edi
 804fd82:	0f 87 44 e4 ff ff    	ja     804e1cc <main+0x4c6c>
 804fd88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fd8c:	89 3c 24             	mov    %edi,(%esp)
 804fd8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fd93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fd97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fd9b:	b9 28 c7 00 00       	mov    $0xc728,%ecx
 804fda0:	e8 a3 4b 00 00       	call   8054948 <__afl_maybe_log>
 804fda5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fda9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fdad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fdb1:	8b 3c 24             	mov    (%esp),%edi
 804fdb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fdb8:	e9 57 e3 ff ff       	jmp    804e114 <main+0x4bb4>
 804fdbd:	8d 76 00             	lea    0x0(%esi),%esi
if(!((kbcieiubweuhc1967513926)) && (kbcieiubweuhc1967513926) ) {
	report_label_coverage("MCC", 269);
}
// MCC Label 270
if(!((kbcieiubweuhc1967513926)) && !((kbcieiubweuhc1967513926)) ) {
	report_label_coverage("MCC", 270);
 804fdc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fdc4:	89 3c 24             	mov    %edi,(%esp)
 804fdc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fdcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fdcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fdd3:	b9 0b 26 00 00       	mov    $0x260b,%ecx
 804fdd8:	e8 6b 4b 00 00       	call   8054948 <__afl_maybe_log>
 804fddd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fde1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fde5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fde9:	8b 3c 24             	mov    (%esp),%edi
 804fdec:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fdf0:	51                   	push   %ecx
 804fdf1:	51                   	push   %ecx
 804fdf2:	68 0e 01 00 00       	push   $0x10e
 804fdf7:	68 1b 5b 06 08       	push   $0x8065b1b
 804fdfc:	e8 7f 12 00 00       	call   8051080 <report_label_coverage>
 804fe01:	8b 55 b4             	mov    -0x4c(%ebp),%edx
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
            new_group = (prevline->length == 0 || ({
 804fe04:	8b 45 a0             	mov    -0x60(%ebp),%eax
 804fe07:	83 c4 10             	add    $0x10,%esp
 804fe0a:	8b 7a 04             	mov    0x4(%edx),%edi
                    lava_393 |= ((unsigned char *)kbcieiubweuhc1967513926)[3] << (3 * 8);
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
 804fe0d:	8b 4a 08             	mov    0x8(%edx),%ecx
            new_group = (prevline->length == 0 || ({
 804fe10:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
                    lava_393 |= ((unsigned char *)kbcieiubweuhc1967513926)[3] << (3 * 8);
                    lava_set(393, lava_393);
                }
                kbcieiubweuhc1967513926;
            });
            thislen = thisline->length - 1 - (thisfield - thisline->buffer);
 804fe14:	8d 54 39 ff          	lea    -0x1(%ecx,%edi,1),%edx
 804fe18:	89 55 a8             	mov    %edx,-0x58(%ebp)
            new_group = (prevline->length == 0 || ({
 804fe1b:	0f 84 9c fc ff ff    	je     804fabd <main+0x655d>
 804fe21:	8d 76 00             	lea    0x0(%esi),%esi
 804fe24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fe28:	89 3c 24             	mov    %edi,(%esp)
 804fe2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fe2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fe33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fe37:	b9 29 ec 00 00       	mov    $0xec29,%ecx
 804fe3c:	e8 07 4b 00 00       	call   8054948 <__afl_maybe_log>
 804fe41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fe45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fe49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fe4d:	8b 3c 24             	mov    (%esp),%edi
 804fe50:	8d 64 24 10          	lea    0x10(%esp),%esp
if(!(((thisfield))) && ((thisfield)) ) {
	report_label_coverage("MCC", 275);
}
// MCC Label 276
if(!(((thisfield))) && !(((thisfield))) ) {
	report_label_coverage("MCC", 276);
 804fe54:	51                   	push   %ecx
 804fe55:	51                   	push   %ecx
 804fe56:	68 14 01 00 00       	push   $0x114
 804fe5b:	68 1b 5b 06 08       	push   $0x8065b1b
 804fe60:	e8 1b 12 00 00       	call   8051080 <report_label_coverage>
                    lava_396 |= ((unsigned char *)(thisfield))[1] << (1 * 8);
                    lava_396 |= ((unsigned char *)(thisfield))[2] << (2 * 8);
                    lava_396 |= ((unsigned char *)(thisfield))[3] << (3 * 8);
                    lava_set(396, lava_396);
                }
                _Bool kbcieiubweuhc1365180540 = different(thisfield, prevfield, thislen, prevlen);
 804fe65:	5f                   	pop    %edi
 804fe66:	8b 4d a8             	mov    -0x58(%ebp),%ecx
 804fe69:	8b 55 90             	mov    -0x70(%ebp),%edx
 804fe6c:	31 c0                	xor    %eax,%eax
 804fe6e:	ff 75 8c             	pushl  -0x74(%ebp)
 804fe71:	e8 1a 32 00 00       	call   8053090 <different>
 804fe76:	89 c7                	mov    %eax,%edi
if(!(((thisfield))) && ((thisfield)) ) {
	report_label_coverage("MCC", 281);
}
// MCC Label 282
if(!(((thisfield))) && !(((thisfield))) ) {
	report_label_coverage("MCC", 282);
 804fe78:	58                   	pop    %eax
 804fe79:	5a                   	pop    %edx
 804fe7a:	68 1a 01 00 00       	push   $0x11a
 804fe7f:	68 1b 5b 06 08       	push   $0x8065b1b
 804fe84:	e8 f7 11 00 00       	call   8051080 <report_label_coverage>
 804fe89:	83 c4 10             	add    $0x10,%esp
 804fe8c:	e9 9f e1 ff ff       	jmp    804e030 <main+0x4ad0>
 804fe91:	8d 76 00             	lea    0x0(%esi),%esi
if((new_group || grouping != GM_NONE) != (new_group && grouping != GM_NONE))  {
	report_label_coverage("COR", 284);
}

// ROR Label 285
if((grouping == GM_NONE) != (grouping != GM_NONE))  {
 804fe94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fe98:	89 3c 24             	mov    %edi,(%esp)
 804fe9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fe9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fea3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fea7:	b9 8a 30 00 00       	mov    $0x308a,%ecx
 804feac:	e8 97 4a 00 00       	call   8054948 <__afl_maybe_log>
 804feb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804feb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804feb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804febd:	8b 3c 24             	mov    (%esp),%edi
 804fec0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fec4:	0f b6 45 9d          	movzbl -0x63(%ebp),%eax
// COR Label 283
if((new_group && grouping != GM_NONE || (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))) != (new_group && grouping != GM_NONE && (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))))  {
	report_label_coverage("COR", 283);
}
// COR Label 284
if((new_group || grouping != GM_NONE) != (new_group && grouping != GM_NONE))  {
 804fec8:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
 804fecf:	e9 e8 e3 ff ff       	jmp    804e2bc <main+0x4d5c>
if(!(new_group) && grouping != GM_NONE ) {
	report_label_coverage("MCC", 418);
}
// MCC Label 419
if(!(new_group) && !(grouping != GM_NONE) ) {
	report_label_coverage("MCC", 419);
 804fed4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fed8:	89 3c 24             	mov    %edi,(%esp)
 804fedb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fedf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fee3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fee7:	b9 a6 eb 00 00       	mov    $0xeba6,%ecx
 804feec:	e8 57 4a 00 00       	call   8054948 <__afl_maybe_log>
 804fef1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fef5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fef9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fefd:	8b 3c 24             	mov    (%esp),%edi
 804ff00:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ff04:	50                   	push   %eax
 804ff05:	50                   	push   %eax
 804ff06:	68 a3 01 00 00       	push   $0x1a3
 804ff0b:	68 1b 5b 06 08       	push   $0x8065b1b
 804ff10:	e8 6b 11 00 00       	call   8051080 <report_label_coverage>
}
if (new_group || grouping != GM_NONE) {
 804ff15:	83 c4 10             	add    $0x10,%esp
 804ff18:	e9 27 f6 ff ff       	jmp    804f544 <main+0x5fe4>
 804ff1d:	8d 76 00             	lea    0x0(%esi),%esi
if(new_group && !(grouping != GM_NONE) ) {
	report_label_coverage("MCC", 417);
}
// MCC Label 418
if(!(new_group) && grouping != GM_NONE ) {
	report_label_coverage("MCC", 418);
 804ff20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ff24:	89 3c 24             	mov    %edi,(%esp)
 804ff27:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ff2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ff2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ff33:	b9 45 8e 00 00       	mov    $0x8e45,%ecx
 804ff38:	e8 0b 4a 00 00       	call   8054948 <__afl_maybe_log>
 804ff3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ff41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ff45:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ff49:	8b 3c 24             	mov    (%esp),%edi
 804ff4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ff50:	50                   	push   %eax
 804ff51:	50                   	push   %eax
 804ff52:	68 a2 01 00 00       	push   $0x1a2
 804ff57:	68 1b 5b 06 08       	push   $0x8065b1b
 804ff5c:	88 55 bc             	mov    %dl,-0x44(%ebp)
 804ff5f:	e8 1c 11 00 00       	call   8051080 <report_label_coverage>
 804ff64:	83 c4 10             	add    $0x10,%esp
 804ff67:	0f b6 55 bc          	movzbl -0x44(%ebp),%edx
 804ff6b:	e9 34 f5 ff ff       	jmp    804f4a4 <main+0x5f44>
 804ff70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ff74:	89 3c 24             	mov    %edi,(%esp)
 804ff77:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ff7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ff7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ff83:	b9 f1 e1 00 00       	mov    $0xe1f1,%ecx
 804ff88:	e8 bb 49 00 00       	call   8054948 <__afl_maybe_log>
 804ff8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ff91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ff95:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ff99:	8b 3c 24             	mov    (%esp),%edi
 804ff9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ffa0:	a1 d8 a2 06 08       	mov    0x806a2d8,%eax
 804ffa5:	8b 50 14             	mov    0x14(%eax),%edx
 804ffa8:	3b 50 18             	cmp    0x18(%eax),%edx
 804ffab:	0f 83 fc 0a 00 00    	jae    8050aad <main+0x754d>
 804ffb1:	8d 76 00             	lea    0x0(%esi),%esi
 804ffb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ffb8:	89 3c 24             	mov    %edi,(%esp)
 804ffbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ffbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ffc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ffc7:	b9 2c 67 00 00       	mov    $0x672c,%ecx
 804ffcc:	e8 77 49 00 00       	call   8054948 <__afl_maybe_log>
 804ffd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ffd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ffd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ffdd:	8b 3c 24             	mov    (%esp),%edi
 804ffe0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ffe4:	8d 4a 01             	lea    0x1(%edx),%ecx
 804ffe7:	89 48 14             	mov    %ecx,0x14(%eax)
 804ffea:	0f b6 45 9e          	movzbl -0x62(%ebp),%eax
 804ffee:	88 02                	mov    %al,(%edx)
 804fff0:	e9 7f f1 ff ff       	jmp    804f174 <main+0x5c14>
 804fff5:	8d 76 00             	lea    0x0(%esi),%esi
if(new_group && grouping != GM_NONE ) {
	report_label_coverage("MCC", 416);
}
// MCC Label 417
if(new_group && !(grouping != GM_NONE) ) {
	report_label_coverage("MCC", 417);
 804fff8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fffc:	89 3c 24             	mov    %edi,(%esp)
 804ffff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050003:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050007:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805000b:	b9 2b b0 00 00       	mov    $0xb02b,%ecx
 8050010:	e8 33 49 00 00       	call   8054948 <__afl_maybe_log>
 8050015:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050019:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805001d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050021:	8b 3c 24             	mov    (%esp),%edi
 8050024:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050028:	50                   	push   %eax
 8050029:	50                   	push   %eax
 805002a:	68 a1 01 00 00       	push   $0x1a1
 805002f:	68 1b 5b 06 08       	push   $0x8065b1b
 8050034:	88 55 bc             	mov    %dl,-0x44(%ebp)
 8050037:	e8 44 10 00 00       	call   8051080 <report_label_coverage>
 805003c:	83 c4 10             	add    $0x10,%esp
 805003f:	0f b6 55 bc          	movzbl -0x44(%ebp),%edx
 8050043:	e9 b4 f3 ff ff       	jmp    804f3fc <main+0x5e9c>
 8050048:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805004c:	89 3c 24             	mov    %edi,(%esp)
 805004f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050053:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050057:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805005b:	b9 bd fc 00 00       	mov    $0xfcbd,%ecx
 8050060:	e8 e3 48 00 00       	call   8054948 <__afl_maybe_log>
 8050065:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050069:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805006d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050071:	8b 3c 24             	mov    (%esp),%edi
 8050074:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050078:	88 55 bc             	mov    %dl,-0x44(%ebp)
	report_label_coverage("ROR", 415);
}

// MCC Label 416
if(new_group && grouping != GM_NONE ) {
	report_label_coverage("MCC", 416);
 805007b:	52                   	push   %edx
 805007c:	52                   	push   %edx
 805007d:	68 a0 01 00 00       	push   $0x1a0
 8050082:	68 1b 5b 06 08       	push   $0x8065b1b
 8050087:	e8 f4 0f 00 00       	call   8051080 <report_label_coverage>
 805008c:	83 c4 10             	add    $0x10,%esp
 805008f:	0f b6 55 bc          	movzbl -0x44(%ebp),%edx
 8050093:	e9 c4 f2 ff ff       	jmp    804f35c <main+0x5dfc>
        }
    };

      
// COR Label 422
if(((grouping == GM_BOTH || grouping == GM_APPEND) || first_group_printed) != ((grouping == GM_BOTH || grouping == GM_APPEND) && first_group_printed))  {
 8050098:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805009c:	89 3c 24             	mov    %edi,(%esp)
 805009f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80500a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80500a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80500ab:	b9 ad e1 00 00       	mov    $0xe1ad,%ecx
 80500b0:	e8 93 48 00 00       	call   8054948 <__afl_maybe_log>
 80500b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80500b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80500bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80500c1:	8b 3c 24             	mov    (%esp),%edi
 80500c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80500c8:	8b 35 00 a3 06 08    	mov    0x806a300,%esi
 80500ce:	88 5d c4             	mov    %bl,-0x3c(%ebp)
 80500d1:	8d 5e fe             	lea    -0x2(%esi),%ebx
 80500d4:	83 e3 fd             	and    $0xfffffffd,%ebx
 80500d7:	0f 94 c1             	sete   %cl
 80500da:	89 cf                	mov    %ecx,%edi
 80500dc:	0f 84 04 05 00 00    	je     80505e6 <main+0x7086>
 80500e2:	66 90                	xchg   %ax,%ax
 80500e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80500e8:	89 3c 24             	mov    %edi,(%esp)
 80500eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80500ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80500f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80500f7:	b9 d4 26 00 00       	mov    $0x26d4,%ecx
 80500fc:	e8 47 48 00 00       	call   8054948 <__afl_maybe_log>
 8050101:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050105:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050109:	8b 54 24 04          	mov    0x4(%esp),%edx
 805010d:	8b 3c 24             	mov    (%esp),%edi
 8050110:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050114:	0f b6 45 c4          	movzbl -0x3c(%ebp),%eax
 8050118:	31 d2                	xor    %edx,%edx
 805011a:	66 90                	xchg   %ax,%ax
 805011c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050120:	89 3c 24             	mov    %edi,(%esp)
 8050123:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050127:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805012b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805012f:	b9 1f 84 00 00       	mov    $0x841f,%ecx
 8050134:	e8 0f 48 00 00       	call   8054948 <__afl_maybe_log>
 8050139:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805013d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050141:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050145:	8b 3c 24             	mov    (%esp),%edi
 8050148:	8d 64 24 10          	lea    0x10(%esp),%esp
 805014c:	39 c2                	cmp    %eax,%edx
 805014e:	0f 85 2d 08 00 00    	jne    8050981 <main+0x7421>
 8050154:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050158:	89 3c 24             	mov    %edi,(%esp)
 805015b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805015f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050163:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050167:	b9 0b 1a 00 00       	mov    $0x1a0b,%ecx
 805016c:	e8 d7 47 00 00       	call   8054948 <__afl_maybe_log>
 8050171:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050175:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050179:	8b 54 24 04          	mov    0x4(%esp),%edx
 805017d:	8b 3c 24             	mov    (%esp),%edi
 8050180:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 424
if(( grouping == GM_BOTH && grouping == GM_APPEND ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 424);
}
// MCC Label 425
if(( grouping == GM_BOTH && !(grouping == GM_APPEND) ) && first_group_printed ) {
 8050184:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050188:	89 3c 24             	mov    %edi,(%esp)
 805018b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805018f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050193:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050197:	b9 5c 6b 00 00       	mov    $0x6b5c,%ecx
 805019c:	e8 a7 47 00 00       	call   8054948 <__afl_maybe_log>
 80501a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80501a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80501a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80501ad:	8b 3c 24             	mov    (%esp),%edi
 80501b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80501b4:	83 fe 04             	cmp    $0x4,%esi
 80501b7:	0f 84 3c 07 00 00    	je     80508f9 <main+0x7399>
 80501bd:	8d 76 00             	lea    0x0(%esi),%esi
 80501c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80501c4:	89 3c 24             	mov    %edi,(%esp)
 80501c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80501cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80501cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80501d3:	b9 66 49 00 00       	mov    $0x4966,%ecx
 80501d8:	e8 6b 47 00 00       	call   8054948 <__afl_maybe_log>
 80501dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80501e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80501e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80501e9:	8b 3c 24             	mov    (%esp),%edi
 80501ec:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 426
if(( grouping == GM_BOTH && !(grouping == GM_APPEND) ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 426);
}
// MCC Label 427
if(( !(grouping == GM_BOTH) && grouping == GM_APPEND ) && first_group_printed ) {
 80501f0:	83 fe 02             	cmp    $0x2,%esi
 80501f3:	0f 84 41 06 00 00    	je     805083a <main+0x72da>
 80501f9:	8d 76 00             	lea    0x0(%esi),%esi
 80501fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050200:	89 3c 24             	mov    %edi,(%esp)
 8050203:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050207:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805020b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805020f:	b9 52 95 00 00       	mov    $0x9552,%ecx
 8050214:	e8 2f 47 00 00       	call   8054948 <__afl_maybe_log>
 8050219:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805021d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050221:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050225:	8b 3c 24             	mov    (%esp),%edi
 8050228:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 428
if(( !(grouping == GM_BOTH) && grouping == GM_APPEND ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 428);
}
// MCC Label 429
if(( !(grouping == GM_BOTH) && !(grouping == GM_APPEND) ) && first_group_printed ) {
 805022c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050230:	89 3c 24             	mov    %edi,(%esp)
 8050233:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050237:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805023b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805023f:	b9 59 11 00 00       	mov    $0x1159,%ecx
 8050244:	e8 ff 46 00 00       	call   8054948 <__afl_maybe_log>
 8050249:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805024d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050251:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050255:	8b 3c 24             	mov    (%esp),%edi
 8050258:	8d 64 24 10          	lea    0x10(%esp),%esp
 805025c:	85 db                	test   %ebx,%ebx
 805025e:	0f 84 74 01 00 00    	je     80503d8 <main+0x6e78>
 8050264:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050268:	89 3c 24             	mov    %edi,(%esp)
 805026b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805026f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050273:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050277:	b9 83 b7 00 00       	mov    $0xb783,%ecx
 805027c:	e8 c7 46 00 00       	call   8054948 <__afl_maybe_log>
 8050281:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050285:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050289:	8b 54 24 04          	mov    0x4(%esp),%edx
 805028d:	8b 3c 24             	mov    (%esp),%edi
 8050290:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050294:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
 8050298:	0f 85 f6 00 00 00    	jne    8050394 <main+0x6e34>
 805029e:	66 90                	xchg   %ax,%ax
 80502a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80502a4:	89 3c 24             	mov    %edi,(%esp)
 80502a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80502ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80502af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80502b3:	b9 4c 42 00 00       	mov    $0x424c,%ecx
 80502b8:	e8 8b 46 00 00       	call   8054948 <__afl_maybe_log>
 80502bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80502c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80502c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80502c9:	8b 3c 24             	mov    (%esp),%edi
 80502cc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 429);
}
// MCC Label 430
if(( !(grouping == GM_BOTH) && !(grouping == GM_APPEND) ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 430);
 80502d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80502d4:	89 3c 24             	mov    %edi,(%esp)
 80502d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80502db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80502df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80502e3:	b9 aa bd 00 00       	mov    $0xbdaa,%ecx
 80502e8:	e8 5b 46 00 00       	call   8054948 <__afl_maybe_log>
 80502ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80502f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80502f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80502f9:	8b 3c 24             	mov    (%esp),%edi
 80502fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050300:	51                   	push   %ecx
 8050301:	51                   	push   %ecx
 8050302:	68 ae 01 00 00       	push   $0x1ae
 8050307:	68 1b 5b 06 08       	push   $0x8065b1b
 805030c:	e8 6f 0d 00 00       	call   8051080 <report_label_coverage>
 8050311:	83 c4 10             	add    $0x10,%esp
 8050314:	e9 f4 c4 ff ff       	jmp    804c80d <main+0x32ad>
 8050319:	8d 76 00             	lea    0x0(%esi),%esi
if(( grouping == GM_BOTH && !(grouping == GM_APPEND) ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 426);
}
// MCC Label 427
if(( !(grouping == GM_BOTH) && grouping == GM_APPEND ) && first_group_printed ) {
	report_label_coverage("MCC", 427);
 805031c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050320:	89 3c 24             	mov    %edi,(%esp)
 8050323:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050327:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805032b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805032f:	b9 2d b3 00 00       	mov    $0xb32d,%ecx
 8050334:	e8 0f 46 00 00       	call   8054948 <__afl_maybe_log>
 8050339:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805033d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050341:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050345:	8b 3c 24             	mov    (%esp),%edi
 8050348:	8d 64 24 10          	lea    0x10(%esp),%esp
 805034c:	50                   	push   %eax
 805034d:	50                   	push   %eax
 805034e:	68 ab 01 00 00       	push   $0x1ab
 8050353:	68 1b 5b 06 08       	push   $0x8065b1b
 8050358:	e8 23 0d 00 00       	call   8051080 <report_label_coverage>
// MCC Label 428
if(( !(grouping == GM_BOTH) && grouping == GM_APPEND ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 428);
}
// MCC Label 429
if(( !(grouping == GM_BOTH) && !(grouping == GM_APPEND) ) && first_group_printed ) {
 805035d:	83 c4 10             	add    $0x10,%esp
 8050360:	85 db                	test   %ebx,%ebx
 8050362:	74 74                	je     80503d8 <main+0x6e78>
 8050364:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050368:	89 3c 24             	mov    %edi,(%esp)
 805036b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805036f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050373:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050377:	b9 7b 3c 00 00       	mov    $0x3c7b,%ecx
 805037c:	e8 c7 45 00 00       	call   8054948 <__afl_maybe_log>
 8050381:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050385:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050389:	8b 54 24 04          	mov    0x4(%esp),%edx
 805038d:	8b 3c 24             	mov    (%esp),%edi
 8050390:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 429);
 8050394:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050398:	89 3c 24             	mov    %edi,(%esp)
 805039b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805039f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80503a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80503a7:	b9 dd d6 00 00       	mov    $0xd6dd,%ecx
 80503ac:	e8 97 45 00 00       	call   8054948 <__afl_maybe_log>
 80503b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80503b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80503b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80503bd:	8b 3c 24             	mov    (%esp),%edi
 80503c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80503c4:	56                   	push   %esi
 80503c5:	56                   	push   %esi
 80503c6:	68 ad 01 00 00       	push   $0x1ad
 80503cb:	68 1b 5b 06 08       	push   $0x8065b1b
 80503d0:	e8 ab 0c 00 00       	call   8051080 <report_label_coverage>
 80503d5:	83 c4 10             	add    $0x10,%esp
}
// MCC Label 430
if(( !(grouping == GM_BOTH) && !(grouping == GM_APPEND) ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 430);
}
if ((grouping == GM_BOTH || grouping == GM_APPEND) && first_group_printed)
 80503d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80503dc:	89 3c 24             	mov    %edi,(%esp)
 80503df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80503e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80503e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80503eb:	b9 fa 02 00 00       	mov    $0x2fa,%ecx
 80503f0:	e8 53 45 00 00       	call   8054948 <__afl_maybe_log>
 80503f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80503f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80503fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050401:	8b 3c 24             	mov    (%esp),%edi
 8050404:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050408:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
 805040c:	0f 84 fb c3 ff ff    	je     804c80d <main+0x32ad>
 8050412:	66 90                	xchg   %ax,%ax
 8050414:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050418:	89 3c 24             	mov    %edi,(%esp)
 805041b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805041f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050423:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050427:	b9 95 4e 00 00       	mov    $0x4e95,%ecx
 805042c:	e8 17 45 00 00       	call   8054948 <__afl_maybe_log>
 8050431:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050435:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050439:	8b 54 24 04          	mov    0x4(%esp),%edx
 805043d:	8b 3c 24             	mov    (%esp),%edi
 8050440:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050444:	89 fb                	mov    %edi,%ebx
 8050446:	84 db                	test   %bl,%bl
 8050448:	0f 84 bf c3 ff ff    	je     804c80d <main+0x32ad>
 805044e:	66 90                	xchg   %ax,%ax
 8050450:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050454:	89 3c 24             	mov    %edi,(%esp)
 8050457:	89 54 24 04          	mov    %edx,0x4(%esp)
 805045b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805045f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050463:	b9 64 e6 00 00       	mov    $0xe664,%ecx
 8050468:	e8 db 44 00 00       	call   8054948 <__afl_maybe_log>
 805046d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050471:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050475:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050479:	8b 3c 24             	mov    (%esp),%edi
 805047c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050480:	8b 35 d8 a2 06 08    	mov    0x806a2d8,%esi
 8050486:	8b 56 14             	mov    0x14(%esi),%edx
 8050489:	3b 56 18             	cmp    0x18(%esi),%edx
 805048c:	0f 83 c0 09 00 00    	jae    8050e52 <main+0x78f2>
 8050492:	66 90                	xchg   %ax,%ax
 8050494:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050498:	89 3c 24             	mov    %edi,(%esp)
 805049b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805049f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80504a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80504a7:	b9 92 89 00 00       	mov    $0x8992,%ecx
 80504ac:	e8 97 44 00 00       	call   8054948 <__afl_maybe_log>
 80504b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80504b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80504b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80504bd:	8b 3c 24             	mov    (%esp),%edi
 80504c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80504c4:	0f b6 45 9e          	movzbl -0x62(%ebp),%eax
 80504c8:	8d 4a 01             	lea    0x1(%edx),%ecx
 80504cb:	89 4e 14             	mov    %ecx,0x14(%esi)
 80504ce:	88 02                	mov    %al,(%edx)
 80504d0:	e9 38 c3 ff ff       	jmp    804c80d <main+0x32ad>
 80504d5:	8d 76 00             	lea    0x0(%esi),%esi
if(!(grouping != GM_NONE) && countmode != count_none ) {
	report_label_coverage("MCC", 502);
}
// MCC Label 503
if(!(grouping != GM_NONE) && !(countmode != count_none) ) {
	report_label_coverage("MCC", 503);
 80504d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80504dc:	89 3c 24             	mov    %edi,(%esp)
 80504df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80504e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80504e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80504eb:	b9 e8 ed 00 00       	mov    $0xede8,%ecx
 80504f0:	e8 53 44 00 00       	call   8054948 <__afl_maybe_log>
 80504f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80504f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80504fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050501:	8b 3c 24             	mov    (%esp),%edi
 8050504:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050508:	57                   	push   %edi
 8050509:	57                   	push   %edi
 805050a:	68 f7 01 00 00       	push   $0x1f7
 805050f:	68 1b 5b 06 08       	push   $0x8065b1b
 8050514:	e8 67 0b 00 00       	call   8051080 <report_label_coverage>
 8050519:	83 c4 10             	add    $0x10,%esp
 805051c:	e9 83 b2 ff ff       	jmp    804b7a4 <main+0x2244>
 8050521:	8d 76 00             	lea    0x0(%esi),%esi
                }
                kbcieiubweuhc1365180540;
            }));
            
// COR Label 283
if((new_group && grouping != GM_NONE || (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))) != (new_group && grouping != GM_NONE && (grouping == GM_PREPEND || grouping == GM_BOTH || (first_group_printed && (grouping == GM_APPEND || grouping == GM_SEPARATE)))))  {
 8050524:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050528:	89 3c 24             	mov    %edi,(%esp)
 805052b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805052f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050533:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050537:	b9 11 62 00 00       	mov    $0x6211,%ecx
 805053c:	e8 07 44 00 00       	call   8054948 <__afl_maybe_log>
 8050541:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050545:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050549:	8b 54 24 04          	mov    0x4(%esp),%edx
 805054d:	8b 3c 24             	mov    (%esp),%edi
 8050550:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050554:	8d 51 fe             	lea    -0x2(%ecx),%edx
 8050557:	83 fa 01             	cmp    $0x1,%edx
 805055a:	0f 86 f2 f6 ff ff    	jbe    804fc52 <main+0x66f2>
 8050560:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050564:	89 3c 24             	mov    %edi,(%esp)
 8050567:	89 54 24 04          	mov    %edx,0x4(%esp)
 805056b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805056f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050573:	b9 e8 3c 00 00       	mov    $0x3ce8,%ecx
 8050578:	e8 cb 43 00 00       	call   8054948 <__afl_maybe_log>
 805057d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050581:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050585:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050589:	8b 3c 24             	mov    (%esp),%edi
 805058c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050590:	e9 4f f6 ff ff       	jmp    804fbe4 <main+0x6684>
 8050595:	8d 76 00             	lea    0x0(%esi),%esi
    else {
        int temp_1 = rpl_fclose(stdin);
        
// ABS Label 461
if(temp_1 < 0)  {
	report_label_coverage("ABS", 461);
 8050598:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805059c:	89 3c 24             	mov    %edi,(%esp)
 805059f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80505a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80505a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80505ab:	b9 c8 8b 00 00       	mov    $0x8bc8,%ecx
 80505b0:	e8 93 43 00 00       	call   8054948 <__afl_maybe_log>
 80505b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80505b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80505bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80505c1:	8b 3c 24             	mov    (%esp),%edi
 80505c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80505c8:	57                   	push   %edi
 80505c9:	57                   	push   %edi
}

// ROR Label 462
if((temp_1 == 0) != (temp_1 != 0))  {
 80505ca:	bb 01 00 00 00       	mov    $0x1,%ebx
    else {
        int temp_1 = rpl_fclose(stdin);
        
// ABS Label 461
if(temp_1 < 0)  {
	report_label_coverage("ABS", 461);
 80505cf:	68 cd 01 00 00       	push   $0x1cd
 80505d4:	68 2d 5b 06 08       	push   $0x8065b2d
 80505d9:	e8 a2 0a 00 00       	call   8051080 <report_label_coverage>
 80505de:	83 c4 10             	add    $0x10,%esp
 80505e1:	e9 e1 c2 ff ff       	jmp    804c8c7 <main+0x3367>
 80505e6:	66 90                	xchg   %ax,%ax
        }
    };

      
// COR Label 422
if(((grouping == GM_BOTH || grouping == GM_APPEND) || first_group_printed) != ((grouping == GM_BOTH || grouping == GM_APPEND) && first_group_printed))  {
 80505e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80505ec:	89 3c 24             	mov    %edi,(%esp)
 80505ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80505f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80505f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80505fb:	b9 e9 1a 00 00       	mov    $0x1ae9,%ecx
 8050600:	e8 43 43 00 00       	call   8054948 <__afl_maybe_log>
 8050605:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050609:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805060d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050611:	8b 3c 24             	mov    (%esp),%edi
 8050614:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050618:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 805061c:	b8 01 00 00 00       	mov    $0x1,%eax
 8050621:	e9 f4 fa ff ff       	jmp    805011a <main+0x6bba>
 8050626:	66 90                	xchg   %ax,%ax
 8050628:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805062c:	89 3c 24             	mov    %edi,(%esp)
 805062f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050633:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050637:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805063b:	b9 b5 53 00 00       	mov    $0x53b5,%ecx
 8050640:	e8 03 43 00 00       	call   8054948 <__afl_maybe_log>
 8050645:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050649:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805064d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050651:	8b 3c 24             	mov    (%esp),%edi
 8050654:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050658:	88 45 a4             	mov    %al,-0x5c(%ebp)
if(( !(delimit_groups == DM_PREPEND) ) && ( delimit_groups == DM_SEPARATE && !first_delimiter ) ) {
	report_label_coverage("MCC", 449);
}
// MCC Label 450
if(( !(delimit_groups == DM_PREPEND) ) && ( delimit_groups == DM_SEPARATE && !(!first_delimiter) ) ) {
	report_label_coverage("MCC", 450);
 805065b:	50                   	push   %eax
 805065c:	50                   	push   %eax
 805065d:	68 c2 01 00 00       	push   $0x1c2
 8050662:	68 1b 5b 06 08       	push   $0x8065b1b
 8050667:	88 55 a0             	mov    %dl,-0x60(%ebp)
 805066a:	e8 11 0a 00 00       	call   8051080 <report_label_coverage>
 805066f:	83 c4 10             	add    $0x10,%esp
 8050672:	0f b6 45 a4          	movzbl -0x5c(%ebp),%eax
 8050676:	0f b6 55 a0          	movzbl -0x60(%ebp),%edx
 805067a:	e9 cd c6 ff ff       	jmp    804cd4c <main+0x37ec>
 805067f:	90                   	nop
if(grouping != GM_NONE && countmode != count_none ) {
	report_label_coverage("MCC", 500);
}
// MCC Label 501
if(grouping != GM_NONE && !(countmode != count_none) ) {
	report_label_coverage("MCC", 501);
 8050680:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050684:	89 3c 24             	mov    %edi,(%esp)
 8050687:	89 54 24 04          	mov    %edx,0x4(%esp)
 805068b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805068f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050693:	b9 05 df 00 00       	mov    $0xdf05,%ecx
 8050698:	e8 ab 42 00 00       	call   8054948 <__afl_maybe_log>
 805069d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80506a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80506a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80506a9:	8b 3c 24             	mov    (%esp),%edi
 80506ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80506b0:	50                   	push   %eax
 80506b1:	50                   	push   %eax
 80506b2:	68 f5 01 00 00       	push   $0x1f5
 80506b7:	68 1b 5b 06 08       	push   $0x8065b1b
 80506bc:	e8 bf 09 00 00       	call   8051080 <report_label_coverage>
 80506c1:	83 c4 10             	add    $0x10,%esp
 80506c4:	e9 fb a7 ff ff       	jmp    804aec4 <main+0x1964>
 80506c9:	8d 76 00             	lea    0x0(%esi),%esi
if(!(output_unique) && output_first_repeated && !(countmode == count_none) ) {
	report_label_coverage("MCC", 259);
}
// MCC Label 260
if(!(output_unique) && !(output_first_repeated) && countmode == count_none ) {
	report_label_coverage("MCC", 260);
 80506cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80506d0:	89 3c 24             	mov    %edi,(%esp)
 80506d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80506d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80506db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80506df:	b9 95 75 00 00       	mov    $0x7595,%ecx
 80506e4:	e8 5f 42 00 00       	call   8054948 <__afl_maybe_log>
 80506e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80506ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80506f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80506f5:	8b 3c 24             	mov    (%esp),%edi
 80506f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80506fc:	50                   	push   %eax
 80506fd:	50                   	push   %eax
 80506fe:	68 04 01 00 00       	push   $0x104
 8050703:	68 1b 5b 06 08       	push   $0x8065b1b
 8050708:	88 5d c0             	mov    %bl,-0x40(%ebp)
 805070b:	88 55 c4             	mov    %dl,-0x3c(%ebp)
 805070e:	e8 6d 09 00 00       	call   8051080 <report_label_coverage>
 8050713:	83 c4 10             	add    $0x10,%esp
 8050716:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 805071a:	0f b6 5d c0          	movzbl -0x40(%ebp),%ebx
 805071e:	e9 49 cb ff ff       	jmp    804d26c <main+0x3d0c>
 8050723:	90                   	nop
 8050724:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050728:	89 3c 24             	mov    %edi,(%esp)
 805072b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805072f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050733:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050737:	b9 94 66 00 00       	mov    $0x6694,%ecx
 805073c:	e8 07 42 00 00       	call   8054948 <__afl_maybe_log>
 8050741:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050745:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050749:	8b 54 24 04          	mov    0x4(%esp),%edx
 805074d:	8b 3c 24             	mov    (%esp),%edi
 8050750:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050754:	88 45 c0             	mov    %al,-0x40(%ebp)
if(output_unique && !(output_first_repeated) && !(countmode == count_none) ) {
	report_label_coverage("MCC", 257);
}
// MCC Label 258
if(!(output_unique) && output_first_repeated && countmode == count_none ) {
	report_label_coverage("MCC", 258);
 8050757:	50                   	push   %eax
 8050758:	50                   	push   %eax
 8050759:	68 02 01 00 00       	push   $0x102
 805075e:	68 1b 5b 06 08       	push   $0x8065b1b
 8050763:	88 5d bc             	mov    %bl,-0x44(%ebp)
 8050766:	88 55 c4             	mov    %dl,-0x3c(%ebp)
 8050769:	e8 12 09 00 00       	call   8051080 <report_label_coverage>
 805076e:	83 c4 10             	add    $0x10,%esp
 8050771:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 8050775:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
 8050779:	0f b6 5d bc          	movzbl -0x44(%ebp),%ebx
 805077d:	e9 ba c9 ff ff       	jmp    804d13c <main+0x3bdc>
 8050782:	66 90                	xchg   %ax,%ax
 8050784:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050788:	89 3c 24             	mov    %edi,(%esp)
 805078b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805078f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050793:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050797:	b9 4b 3c 00 00       	mov    $0x3c4b,%ecx
 805079c:	e8 a7 41 00 00       	call   8054948 <__afl_maybe_log>
 80507a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80507a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80507a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80507ad:	8b 3c 24             	mov    (%esp),%edi
 80507b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80507b4:	88 55 c4             	mov    %dl,-0x3c(%ebp)
if(output_unique && output_first_repeated && !(countmode == count_none) ) {
	report_label_coverage("MCC", 255);
}
// MCC Label 256
if(output_unique && !(output_first_repeated) && countmode == count_none ) {
	report_label_coverage("MCC", 256);
 80507b7:	52                   	push   %edx
 80507b8:	52                   	push   %edx
 80507b9:	68 00 01 00 00       	push   $0x100
 80507be:	68 1b 5b 06 08       	push   $0x8065b1b
 80507c3:	88 4d c0             	mov    %cl,-0x40(%ebp)
 80507c6:	e8 b5 08 00 00       	call   8051080 <report_label_coverage>
 80507cb:	83 c4 10             	add    $0x10,%esp
 80507ce:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 80507d2:	0f b6 4d c0          	movzbl -0x40(%ebp),%ecx
 80507d6:	e9 e5 b8 ff ff       	jmp    804c0c0 <main+0x2b60>
 80507db:	90                   	nop
	report_label_coverage("ROR", 253);
}

// MCC Label 254
if(output_unique && output_first_repeated && countmode == count_none ) {
	report_label_coverage("MCC", 254);
 80507dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80507e0:	89 3c 24             	mov    %edi,(%esp)
 80507e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80507e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80507eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80507ef:	b9 1b 43 00 00       	mov    $0x431b,%ecx
 80507f4:	e8 4f 41 00 00       	call   8054948 <__afl_maybe_log>
 80507f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80507fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050801:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050805:	8b 3c 24             	mov    (%esp),%edi
 8050808:	8d 64 24 10          	lea    0x10(%esp),%esp
 805080c:	53                   	push   %ebx
 805080d:	53                   	push   %ebx
 805080e:	68 fe 00 00 00       	push   $0xfe
 8050813:	68 1b 5b 06 08       	push   $0x8065b1b
 8050818:	88 4d bc             	mov    %cl,-0x44(%ebp)
 805081b:	88 45 c0             	mov    %al,-0x40(%ebp)
 805081e:	88 55 c4             	mov    %dl,-0x3c(%ebp)
 8050821:	e8 5a 08 00 00       	call   8051080 <report_label_coverage>
 8050826:	83 c4 10             	add    $0x10,%esp
 8050829:	0f b6 55 c4          	movzbl -0x3c(%ebp),%edx
 805082d:	0f b6 45 c0          	movzbl -0x40(%ebp),%eax
 8050831:	0f b6 4d bc          	movzbl -0x44(%ebp),%ecx
 8050835:	e9 56 b7 ff ff       	jmp    804bf90 <main+0x2a30>
 805083a:	66 90                	xchg   %ax,%ax
// MCC Label 426
if(( grouping == GM_BOTH && !(grouping == GM_APPEND) ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 426);
}
// MCC Label 427
if(( !(grouping == GM_BOTH) && grouping == GM_APPEND ) && first_group_printed ) {
 805083c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050840:	89 3c 24             	mov    %edi,(%esp)
 8050843:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050847:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805084b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805084f:	b9 b6 8f 00 00       	mov    $0x8fb6,%ecx
 8050854:	e8 ef 40 00 00       	call   8054948 <__afl_maybe_log>
 8050859:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805085d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050861:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050865:	8b 3c 24             	mov    (%esp),%edi
 8050868:	8d 64 24 10          	lea    0x10(%esp),%esp
 805086c:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
 8050870:	0f 85 a3 fa ff ff    	jne    8050319 <main+0x6db9>
 8050876:	66 90                	xchg   %ax,%ax
 8050878:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805087c:	89 3c 24             	mov    %edi,(%esp)
 805087f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050883:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050887:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805088b:	b9 c3 e6 00 00       	mov    $0xe6c3,%ecx
 8050890:	e8 b3 40 00 00       	call   8054948 <__afl_maybe_log>
 8050895:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050899:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805089d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80508a1:	8b 3c 24             	mov    (%esp),%edi
 80508a4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 427);
}
// MCC Label 428
if(( !(grouping == GM_BOTH) && grouping == GM_APPEND ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 428);
 80508a8:	56                   	push   %esi
 80508a9:	56                   	push   %esi
 80508aa:	68 ac 01 00 00       	push   $0x1ac
 80508af:	68 1b 5b 06 08       	push   $0x8065b1b
 80508b4:	e8 c7 07 00 00       	call   8051080 <report_label_coverage>
}
// MCC Label 429
if(( !(grouping == GM_BOTH) && !(grouping == GM_APPEND) ) && first_group_printed ) {
 80508b9:	83 c4 10             	add    $0x10,%esp
 80508bc:	85 db                	test   %ebx,%ebx
 80508be:	0f 84 49 bf ff ff    	je     804c80d <main+0x32ad>
 80508c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80508c8:	89 3c 24             	mov    %edi,(%esp)
 80508cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80508cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80508d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80508d7:	b9 bc 2a 00 00       	mov    $0x2abc,%ecx
 80508dc:	e8 67 40 00 00       	call   8054948 <__afl_maybe_log>
 80508e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80508e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80508e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80508ed:	8b 3c 24             	mov    (%esp),%edi
 80508f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80508f4:	e9 d7 f9 ff ff       	jmp    80502d0 <main+0x6d70>
 80508f9:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 424
if(( grouping == GM_BOTH && grouping == GM_APPEND ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 424);
}
// MCC Label 425
if(( grouping == GM_BOTH && !(grouping == GM_APPEND) ) && first_group_printed ) {
 80508fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050900:	89 3c 24             	mov    %edi,(%esp)
 8050903:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050907:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805090b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805090f:	b9 b4 53 00 00       	mov    $0x53b4,%ecx
 8050914:	e8 2f 40 00 00       	call   8054948 <__afl_maybe_log>
 8050919:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805091d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050921:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050925:	8b 3c 24             	mov    (%esp),%edi
 8050928:	8d 64 24 10          	lea    0x10(%esp),%esp
 805092c:	80 7d c4 00          	cmpb   $0x0,-0x3c(%ebp)
 8050930:	0f 85 bd 01 00 00    	jne    8050af3 <main+0x7593>
 8050936:	66 90                	xchg   %ax,%ax
 8050938:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805093c:	89 3c 24             	mov    %edi,(%esp)
 805093f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050943:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050947:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805094b:	b9 ab 37 00 00       	mov    $0x37ab,%ecx
 8050950:	e8 f3 3f 00 00       	call   8054948 <__afl_maybe_log>
 8050955:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050959:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805095d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050961:	8b 3c 24             	mov    (%esp),%edi
 8050964:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 425);
}
// MCC Label 426
if(( grouping == GM_BOTH && !(grouping == GM_APPEND) ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 426);
 8050968:	50                   	push   %eax
 8050969:	50                   	push   %eax
 805096a:	68 aa 01 00 00       	push   $0x1aa
 805096f:	68 1b 5b 06 08       	push   $0x8065b1b
 8050974:	e8 07 07 00 00       	call   8051080 <report_label_coverage>
 8050979:	83 c4 10             	add    $0x10,%esp
 805097c:	e9 ab f8 ff ff       	jmp    805022c <main+0x6ccc>
 8050981:	8d 76 00             	lea    0x0(%esi),%esi
    };

      
// COR Label 422
if(((grouping == GM_BOTH || grouping == GM_APPEND) || first_group_printed) != ((grouping == GM_BOTH || grouping == GM_APPEND) && first_group_printed))  {
	report_label_coverage("COR", 422);
 8050984:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050988:	89 3c 24             	mov    %edi,(%esp)
 805098b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805098f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050993:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050997:	b9 ec 57 00 00       	mov    $0x57ec,%ecx
 805099c:	e8 a7 3f 00 00       	call   8054948 <__afl_maybe_log>
 80509a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80509a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80509a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80509ad:	8b 3c 24             	mov    (%esp),%edi
 80509b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80509b4:	50                   	push   %eax
 80509b5:	50                   	push   %eax
 80509b6:	68 a6 01 00 00       	push   $0x1a6
 80509bb:	68 13 5b 06 08       	push   $0x8065b13
 80509c0:	e8 bb 06 00 00       	call   8051080 <report_label_coverage>
 80509c5:	83 c4 10             	add    $0x10,%esp
 80509c8:	e9 b7 f7 ff ff       	jmp    8050184 <main+0x6c24>
 80509cd:	8d 76 00             	lea    0x0(%esi),%esi
 80509d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80509d4:	89 3c 24             	mov    %edi,(%esp)
 80509d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80509db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80509df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80509e3:	b9 e0 9a 00 00       	mov    $0x9ae0,%ecx
 80509e8:	e8 5b 3f 00 00       	call   8054948 <__afl_maybe_log>
 80509ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80509f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80509f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80509f9:	8b 3c 24             	mov    (%esp),%edi
 80509fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050a00:	51                   	push   %ecx
 8050a01:	51                   	push   %ecx
 8050a02:	ff 75 ac             	pushl  -0x54(%ebp)
 8050a05:	50                   	push   %eax
 8050a06:	e8 85 8a ff ff       	call   8049490 <__overflow@plt>
 8050a0b:	83 c4 10             	add    $0x10,%esp
 8050a0e:	e9 11 c0 ff ff       	jmp    804ca24 <main+0x34c4>
 8050a13:	90                   	nop
// ROR Label 483
if((nfiles != 2) != (nfiles == 2))  {
	report_label_coverage("ROR", 483);
}
if (nfiles == 2) {
                error(0, 0, gettext("extra operand %s"), quote(argv[optind]));
 8050a14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050a18:	89 3c 24             	mov    %edi,(%esp)
 8050a1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050a1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050a23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050a27:	b9 35 45 00 00       	mov    $0x4535,%ecx
 8050a2c:	e8 17 3f 00 00       	call   8054948 <__afl_maybe_log>
 8050a31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050a35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050a39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050a3d:	8b 3c 24             	mov    (%esp),%edi
 8050a40:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050a44:	8b 5d b8             	mov    -0x48(%ebp),%ebx
 8050a47:	83 ec 0c             	sub    $0xc,%esp
 8050a4a:	ff 34 83             	pushl  (%ebx,%eax,4)
 8050a4d:	8d 76 00             	lea    0x0(%esi),%esi
// ROR Label 485
if((nfiles != 2) != (nfiles == 2))  {
	report_label_coverage("ROR", 485);
}
if (nfiles == 2) {
                    error(0, 0, gettext("extra operand %s"), quote(optarg));
 8050a50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050a54:	89 3c 24             	mov    %edi,(%esp)
 8050a57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050a5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050a5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050a63:	b9 0f 67 00 00       	mov    $0x670f,%ecx
 8050a68:	e8 db 3e 00 00       	call   8054948 <__afl_maybe_log>
 8050a6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050a71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050a75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050a79:	8b 3c 24             	mov    (%esp),%edi
 8050a7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050a80:	e8 0b df 00 00       	call   805e990 <quote>
 8050a85:	83 c4 0c             	add    $0xc,%esp
 8050a88:	89 c7                	mov    %eax,%edi
 8050a8a:	6a 05                	push   $0x5
 8050a8c:	68 f7 5b 06 08       	push   $0x8065bf7
 8050a91:	6a 00                	push   $0x0
 8050a93:	e8 78 87 ff ff       	call   8049210 <dcgettext@plt>
 8050a98:	57                   	push   %edi
 8050a99:	50                   	push   %eax
 8050a9a:	6a 00                	push   $0x0
 8050a9c:	6a 00                	push   $0x0
 8050a9e:	e8 1d 88 ff ff       	call   80492c0 <error@plt>
                    usage(1);
 8050aa3:	83 c4 14             	add    $0x14,%esp
 8050aa6:	6a 01                	push   $0x1
 8050aa8:	e8 c3 34 00 00       	call   8053f70 <usage>
 8050aad:	8d 76 00             	lea    0x0(%esi),%esi
 8050ab0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050ab4:	89 3c 24             	mov    %edi,(%esp)
 8050ab7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050abb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050abf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050ac3:	b9 cb c3 00 00       	mov    $0xc3cb,%ecx
 8050ac8:	e8 7b 3e 00 00       	call   8054948 <__afl_maybe_log>
 8050acd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050ad1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050ad5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050ad9:	8b 3c 24             	mov    (%esp),%edi
 8050adc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050ae0:	52                   	push   %edx
 8050ae1:	52                   	push   %edx
 8050ae2:	ff 75 94             	pushl  -0x6c(%ebp)
 8050ae5:	50                   	push   %eax
 8050ae6:	e8 a5 89 ff ff       	call   8049490 <__overflow@plt>
 8050aeb:	83 c4 10             	add    $0x10,%esp
 8050aee:	e9 81 e6 ff ff       	jmp    804f174 <main+0x5c14>
 8050af3:	90                   	nop
if(( grouping == GM_BOTH && grouping == GM_APPEND ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 424);
}
// MCC Label 425
if(( grouping == GM_BOTH && !(grouping == GM_APPEND) ) && first_group_printed ) {
	report_label_coverage("MCC", 425);
 8050af4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050af8:	89 3c 24             	mov    %edi,(%esp)
 8050afb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050aff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050b03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050b07:	b9 8b 32 00 00       	mov    $0x328b,%ecx
 8050b0c:	e8 37 3e 00 00       	call   8054948 <__afl_maybe_log>
 8050b11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050b15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050b19:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050b1d:	8b 3c 24             	mov    (%esp),%edi
 8050b20:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050b24:	50                   	push   %eax
 8050b25:	50                   	push   %eax
 8050b26:	68 a9 01 00 00       	push   $0x1a9
 8050b2b:	68 1b 5b 06 08       	push   $0x8065b1b
 8050b30:	e8 4b 05 00 00       	call   8051080 <report_label_coverage>
 8050b35:	83 c4 10             	add    $0x10,%esp
 8050b38:	e9 ef f6 ff ff       	jmp    805022c <main+0x6ccc>
 8050b3d:	8d 76 00             	lea    0x0(%esi),%esi
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 374);
}
// MCC Label 375
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
	report_label_coverage("MCC", 375);
 8050b40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050b44:	89 3c 24             	mov    %edi,(%esp)
 8050b47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050b4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050b4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050b53:	b9 c7 50 00 00       	mov    $0x50c7,%ecx
 8050b58:	e8 eb 3d 00 00       	call   8054948 <__afl_maybe_log>
 8050b5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050b61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050b65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050b69:	8b 3c 24             	mov    (%esp),%edi
 8050b6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050b70:	52                   	push   %edx
 8050b71:	52                   	push   %edx
 8050b72:	68 77 01 00 00       	push   $0x177
 8050b77:	68 1b 5b 06 08       	push   $0x8065b1b
 8050b7c:	88 45 b0             	mov    %al,-0x50(%ebp)
 8050b7f:	e8 fc 04 00 00       	call   8051080 <report_label_coverage>
 8050b84:	83 c4 10             	add    $0x10,%esp
 8050b87:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 8050b8b:	e9 cc e0 ff ff       	jmp    804ec5c <main+0x56fc>
 8050b90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050b94:	89 3c 24             	mov    %edi,(%esp)
 8050b97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050b9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050b9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050ba3:	b9 80 3f 00 00       	mov    $0x3f80,%ecx
 8050ba8:	e8 9b 3d 00 00       	call   8054948 <__afl_maybe_log>
 8050bad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050bb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050bb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050bb9:	8b 3c 24             	mov    (%esp),%edi
 8050bbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050bc0:	88 45 b0             	mov    %al,-0x50(%ebp)
}
// MCC Label 376
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 376);
 8050bc3:	50                   	push   %eax
 8050bc4:	50                   	push   %eax
 8050bc5:	68 78 01 00 00       	push   $0x178
 8050bca:	68 1b 5b 06 08       	push   $0x8065b1b
 8050bcf:	e8 ac 04 00 00       	call   8051080 <report_label_coverage>
 8050bd4:	83 c4 10             	add    $0x10,%esp
 8050bd7:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 8050bdb:	e9 1c e1 ff ff       	jmp    804ecfc <main+0x579c>
 8050be0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050be4:	89 3c 24             	mov    %edi,(%esp)
 8050be7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050beb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050bef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050bf3:	b9 e3 d0 00 00       	mov    $0xd0e3,%ecx
 8050bf8:	e8 4b 3d 00 00       	call   8054948 <__afl_maybe_log>
 8050bfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050c01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050c05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050c09:	8b 3c 24             	mov    (%esp),%edi
 8050c0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050c10:	88 45 b0             	mov    %al,-0x50(%ebp)
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
	report_label_coverage("MCC", 379);
}
// MCC Label 380
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 380);
 8050c13:	50                   	push   %eax
 8050c14:	50                   	push   %eax
 8050c15:	68 7c 01 00 00       	push   $0x17c
 8050c1a:	68 1b 5b 06 08       	push   $0x8065b1b
 8050c1f:	88 55 a4             	mov    %dl,-0x5c(%ebp)
 8050c22:	e8 59 04 00 00       	call   8051080 <report_label_coverage>
 8050c27:	83 c4 10             	add    $0x10,%esp
 8050c2a:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 8050c2e:	0f b6 55 a4          	movzbl -0x5c(%ebp),%edx
 8050c32:	e9 79 e2 ff ff       	jmp    804eeb0 <main+0x5950>
 8050c37:	90                   	nop
 8050c38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050c3c:	89 3c 24             	mov    %edi,(%esp)
 8050c3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050c43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050c47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050c4b:	b9 6a 5a 00 00       	mov    $0x5a6a,%ecx
 8050c50:	e8 f3 3c 00 00       	call   8054948 <__afl_maybe_log>
 8050c55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050c59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050c5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050c61:	8b 3c 24             	mov    (%esp),%edi
 8050c64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050c68:	88 45 b0             	mov    %al,-0x50(%ebp)
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 378);
}
// MCC Label 379
if(!(new_group) && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
	report_label_coverage("MCC", 379);
 8050c6b:	50                   	push   %eax
 8050c6c:	50                   	push   %eax
 8050c6d:	68 7b 01 00 00       	push   $0x17b
 8050c72:	68 1b 5b 06 08       	push   $0x8065b1b
 8050c77:	e8 04 04 00 00       	call   8051080 <report_label_coverage>
 8050c7c:	83 c4 10             	add    $0x10,%esp
 8050c7f:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
 8050c83:	e9 a8 e1 ff ff       	jmp    804ee30 <main+0x58d0>
 8050c88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050c8c:	89 3c 24             	mov    %edi,(%esp)
 8050c8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050c93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050c97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050c9b:	b9 f4 8e 00 00       	mov    $0x8ef4,%ecx
 8050ca0:	e8 a3 3c 00 00       	call   8054948 <__afl_maybe_log>
 8050ca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050ca9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050cad:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050cb1:	8b 3c 24             	mov    (%esp),%edi
 8050cb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050cb8:	88 45 9c             	mov    %al,-0x64(%ebp)
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
	report_label_coverage("MCC", 311);
}
// MCC Label 312
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 312);
 8050cbb:	50                   	push   %eax
 8050cbc:	50                   	push   %eax
 8050cbd:	68 38 01 00 00       	push   $0x138
 8050cc2:	68 1b 5b 06 08       	push   $0x8065b1b
 8050cc7:	e8 b4 03 00 00       	call   8051080 <report_label_coverage>
 8050ccc:	83 c4 10             	add    $0x10,%esp
 8050ccf:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 8050cd3:	e9 98 d9 ff ff       	jmp    804e670 <main+0x5110>
 8050cd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050cdc:	89 3c 24             	mov    %edi,(%esp)
 8050cdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050ce3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050ce7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050ceb:	b9 14 5a 00 00       	mov    $0x5a14,%ecx
 8050cf0:	e8 53 3c 00 00       	call   8054948 <__afl_maybe_log>
 8050cf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050cf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050cfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050d01:	8b 3c 24             	mov    (%esp),%edi
 8050d04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050d08:	88 45 9c             	mov    %al,-0x64(%ebp)
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 310);
}
// MCC Label 311
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( first_group_printed && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
	report_label_coverage("MCC", 311);
 8050d0b:	50                   	push   %eax
 8050d0c:	50                   	push   %eax
 8050d0d:	68 37 01 00 00       	push   $0x137
 8050d12:	68 1b 5b 06 08       	push   $0x8065b1b
 8050d17:	e8 64 03 00 00       	call   8051080 <report_label_coverage>
 8050d1c:	83 c4 10             	add    $0x10,%esp
 8050d1f:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 8050d23:	e9 a8 d8 ff ff       	jmp    804e5d0 <main+0x5070>
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
	report_label_coverage("MCC", 315);
}
// MCC Label 316
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( !(grouping == GM_APPEND) && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 316);
 8050d28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050d2c:	89 3c 24             	mov    %edi,(%esp)
 8050d2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050d33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050d37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050d3b:	b9 6c c8 00 00       	mov    $0xc86c,%ecx
 8050d40:	e8 03 3c 00 00       	call   8054948 <__afl_maybe_log>
 8050d45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050d49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050d4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050d51:	8b 3c 24             	mov    (%esp),%edi
 8050d54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050d58:	52                   	push   %edx
 8050d59:	52                   	push   %edx
 8050d5a:	68 3c 01 00 00       	push   $0x13c
 8050d5f:	68 1b 5b 06 08       	push   $0x8065b1b
 8050d64:	88 45 8b             	mov    %al,-0x75(%ebp)
 8050d67:	e8 14 03 00 00       	call   8051080 <report_label_coverage>
 8050d6c:	83 c4 10             	add    $0x10,%esp
 8050d6f:	0f b6 45 8b          	movzbl -0x75(%ebp),%eax
 8050d73:	e9 b8 da ff ff       	jmp    804e830 <main+0x52d0>
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && grouping == GM_SEPARATE ) ) ) ) {
	report_label_coverage("MCC", 314);
}
// MCC Label 315
if(new_group && grouping != GM_NONE && ( !(grouping == GM_PREPEND) && !(grouping == GM_BOTH) && ( !(first_group_printed) && ( grouping == GM_APPEND && !(grouping == GM_SEPARATE) ) ) ) ) {
	report_label_coverage("MCC", 315);
 8050d78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050d7c:	89 3c 24             	mov    %edi,(%esp)
 8050d7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050d83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050d87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050d8b:	b9 df 42 00 00       	mov    $0x42df,%ecx
 8050d90:	e8 b3 3b 00 00       	call   8054948 <__afl_maybe_log>
 8050d95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050d99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050d9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050da1:	8b 3c 24             	mov    (%esp),%edi
 8050da4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050da8:	51                   	push   %ecx
 8050da9:	51                   	push   %ecx
 8050daa:	68 3b 01 00 00       	push   $0x13b
 8050daf:	68 1b 5b 06 08       	push   $0x8065b1b
 8050db4:	88 45 9c             	mov    %al,-0x64(%ebp)
 8050db7:	e8 c4 02 00 00       	call   8051080 <report_label_coverage>
 8050dbc:	83 c4 10             	add    $0x10,%esp
 8050dbf:	0f b6 45 9c          	movzbl -0x64(%ebp),%eax
 8050dc3:	e9 e4 d9 ff ff       	jmp    804e7ac <main+0x524c>
     It was thought best to avoid deprecating those parameters though
     and keep --group separate to other options.  */
  
// COR Label 491
if((grouping != GM_NONE || output_option_used) != (grouping != GM_NONE && output_option_used))  {
	report_label_coverage("COR", 491);
 8050dc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050dcc:	89 3c 24             	mov    %edi,(%esp)
 8050dcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050dd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050dd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050ddb:	b9 1f 39 00 00       	mov    $0x391f,%ecx
 8050de0:	e8 63 3b 00 00       	call   8054948 <__afl_maybe_log>
 8050de5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050de9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050ded:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050df1:	8b 3c 24             	mov    (%esp),%edi
 8050df4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050df8:	51                   	push   %ecx
 8050df9:	51                   	push   %ecx
 8050dfa:	68 eb 01 00 00       	push   $0x1eb
 8050dff:	68 13 5b 06 08       	push   $0x8065b13
 8050e04:	e8 77 02 00 00       	call   8051080 <report_label_coverage>
}

// ROR Label 492
if((grouping == GM_NONE) != (grouping != GM_NONE))  {
 8050e09:	83 c4 10             	add    $0x10,%esp
 8050e0c:	e9 6b 9d ff ff       	jmp    804ab7c <main+0x161c>
 8050e11:	8d 76 00             	lea    0x0(%esi),%esi
// ROR Label 485
if((nfiles != 2) != (nfiles == 2))  {
	report_label_coverage("ROR", 485);
}
if (nfiles == 2) {
                    error(0, 0, gettext("extra operand %s"), quote(optarg));
 8050e14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050e18:	89 3c 24             	mov    %edi,(%esp)
 8050e1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050e1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050e23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050e27:	b9 bd 5d 00 00       	mov    $0x5dbd,%ecx
 8050e2c:	e8 17 3b 00 00       	call   8054948 <__afl_maybe_log>
 8050e31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050e35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050e39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050e3d:	8b 3c 24             	mov    (%esp),%edi
 8050e40:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050e44:	83 ec 0c             	sub    $0xc,%esp
 8050e47:	ff 35 e0 a2 06 08    	pushl  0x806a2e0
 8050e4d:	e9 fb fb ff ff       	jmp    8050a4d <main+0x74ed>
 8050e52:	66 90                	xchg   %ax,%ax
// MCC Label 430
if(( !(grouping == GM_BOTH) && !(grouping == GM_APPEND) ) && !(first_group_printed) ) {
	report_label_coverage("MCC", 430);
}
if ((grouping == GM_BOTH || grouping == GM_APPEND) && first_group_printed)
        putchar (delimiter);
 8050e54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050e58:	89 3c 24             	mov    %edi,(%esp)
 8050e5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050e5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050e63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050e67:	b9 47 14 00 00       	mov    $0x1447,%ecx
 8050e6c:	e8 d7 3a 00 00       	call   8054948 <__afl_maybe_log>
 8050e71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050e75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050e79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050e7d:	8b 3c 24             	mov    (%esp),%edi
 8050e80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050e84:	0f be 7d 9e          	movsbl -0x62(%ebp),%edi
 8050e88:	53                   	push   %ebx
 8050e89:	53                   	push   %ebx
 8050e8a:	57                   	push   %edi
 8050e8b:	56                   	push   %esi
 8050e8c:	e8 ff 85 ff ff       	call   8049490 <__overflow@plt>
 8050e91:	83 c4 10             	add    $0x10,%esp
 8050e94:	e9 74 b9 ff ff       	jmp    804c80d <main+0x32ad>
 8050e99:	66 90                	xchg   %ax,%ax
 8050e9b:	90                   	nop

08050e9c <_start>:
 8050e9c:	31 ed                	xor    %ebp,%ebp
 8050e9e:	5e                   	pop    %esi
 8050e9f:	89 e1                	mov    %esp,%ecx
 8050ea1:	83 e4 f0             	and    $0xfffffff0,%esp
 8050ea4:	50                   	push   %eax
 8050ea5:	54                   	push   %esp
 8050ea6:	52                   	push   %edx
 8050ea7:	68 70 5a 06 08       	push   $0x8065a70
 8050eac:	68 00 5a 06 08       	push   $0x8065a00
 8050eb1:	51                   	push   %ecx
 8050eb2:	56                   	push   %esi
 8050eb3:	68 60 95 04 08       	push   $0x8049560
 8050eb8:	e8 f3 84 ff ff       	call   80493b0 <__libc_start_main@plt>
 8050ebd:	f4                   	hlt    
 8050ebe:	66 90                	xchg   %ax,%ax

08050ec0 <__x86.get_pc_thunk.bx>:
 8050ec0:	8b 1c 24             	mov    (%esp),%ebx
 8050ec3:	c3                   	ret    
 8050ec4:	66 90                	xchg   %ax,%ax
 8050ec6:	66 90                	xchg   %ax,%ax
 8050ec8:	66 90                	xchg   %ax,%ax
 8050eca:	66 90                	xchg   %ax,%ax
 8050ecc:	66 90                	xchg   %ax,%ax
 8050ece:	66 90                	xchg   %ax,%ax

08050ed0 <deregister_tm_clones>:
 8050ed0:	b8 a3 a2 06 08       	mov    $0x806a2a3,%eax
 8050ed5:	2d a0 a2 06 08       	sub    $0x806a2a0,%eax
 8050eda:	83 f8 06             	cmp    $0x6,%eax
 8050edd:	76 1a                	jbe    8050ef9 <deregister_tm_clones+0x29>
 8050edf:	b8 00 00 00 00       	mov    $0x0,%eax
 8050ee4:	85 c0                	test   %eax,%eax
 8050ee6:	74 11                	je     8050ef9 <deregister_tm_clones+0x29>
 8050ee8:	55                   	push   %ebp
 8050ee9:	89 e5                	mov    %esp,%ebp
 8050eeb:	83 ec 14             	sub    $0x14,%esp
 8050eee:	68 a0 a2 06 08       	push   $0x806a2a0
 8050ef3:	ff d0                	call   *%eax
 8050ef5:	83 c4 10             	add    $0x10,%esp
 8050ef8:	c9                   	leave  
 8050ef9:	f3 c3                	repz ret 
 8050efb:	90                   	nop
 8050efc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08050f00 <register_tm_clones>:
 8050f00:	b8 a0 a2 06 08       	mov    $0x806a2a0,%eax
 8050f05:	2d a0 a2 06 08       	sub    $0x806a2a0,%eax
 8050f0a:	c1 f8 02             	sar    $0x2,%eax
 8050f0d:	89 c2                	mov    %eax,%edx
 8050f0f:	c1 ea 1f             	shr    $0x1f,%edx
 8050f12:	01 d0                	add    %edx,%eax
 8050f14:	d1 f8                	sar    %eax
 8050f16:	74 1b                	je     8050f33 <register_tm_clones+0x33>
 8050f18:	ba 00 00 00 00       	mov    $0x0,%edx
 8050f1d:	85 d2                	test   %edx,%edx
 8050f1f:	74 12                	je     8050f33 <register_tm_clones+0x33>
 8050f21:	55                   	push   %ebp
 8050f22:	89 e5                	mov    %esp,%ebp
 8050f24:	83 ec 10             	sub    $0x10,%esp
 8050f27:	50                   	push   %eax
 8050f28:	68 a0 a2 06 08       	push   $0x806a2a0
 8050f2d:	ff d2                	call   *%edx
 8050f2f:	83 c4 10             	add    $0x10,%esp
 8050f32:	c9                   	leave  
 8050f33:	f3 c3                	repz ret 
 8050f35:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8050f39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08050f40 <__do_global_dtors_aux>:
 8050f40:	80 3d e4 a2 06 08 00 	cmpb   $0x0,0x806a2e4
 8050f47:	75 13                	jne    8050f5c <__do_global_dtors_aux+0x1c>
 8050f49:	55                   	push   %ebp
 8050f4a:	89 e5                	mov    %esp,%ebp
 8050f4c:	83 ec 08             	sub    $0x8,%esp
 8050f4f:	e8 7c ff ff ff       	call   8050ed0 <deregister_tm_clones>
 8050f54:	c6 05 e4 a2 06 08 01 	movb   $0x1,0x806a2e4
 8050f5b:	c9                   	leave  
 8050f5c:	f3 c3                	repz ret 
 8050f5e:	66 90                	xchg   %ax,%ax

08050f60 <frame_dummy>:
 8050f60:	b8 08 a0 06 08       	mov    $0x806a008,%eax
 8050f65:	8b 10                	mov    (%eax),%edx
 8050f67:	85 d2                	test   %edx,%edx
 8050f69:	75 05                	jne    8050f70 <frame_dummy+0x10>
 8050f6b:	eb 93                	jmp    8050f00 <register_tm_clones>
 8050f6d:	8d 76 00             	lea    0x0(%esi),%esi
 8050f70:	ba 00 00 00 00       	mov    $0x0,%edx
 8050f75:	85 d2                	test   %edx,%edx
 8050f77:	74 f2                	je     8050f6b <frame_dummy+0xb>
 8050f79:	55                   	push   %ebp
 8050f7a:	89 e5                	mov    %esp,%ebp
 8050f7c:	83 ec 14             	sub    $0x14,%esp
 8050f7f:	50                   	push   %eax
 8050f80:	ff d2                	call   *%edx
 8050f82:	83 c4 10             	add    $0x10,%esp
 8050f85:	c9                   	leave  
 8050f86:	e9 75 ff ff ff       	jmp    8050f00 <register_tm_clones>
 8050f8b:	66 90                	xchg   %ax,%ax
 8050f8d:	66 90                	xchg   %ax,%ax
 8050f8f:	90                   	nop

08050f90 <size_opt>:
/* Convert OPT to size_t, reporting an error using MSGID if OPT is
   invalid.  Silently convert too-large values to SIZE_MAX.  */

static size_t
size_opt (char const *opt, char const *msgid)
{
 8050f90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050f94:	89 3c 24             	mov    %edi,(%esp)
 8050f97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050f9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050f9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050fa3:	b9 15 47 00 00       	mov    $0x4715,%ecx
 8050fa8:	e8 9b 39 00 00       	call   8054948 <__afl_maybe_log>
 8050fad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050fb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050fb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050fb9:	8b 3c 24             	mov    (%esp),%edi
 8050fbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050fc0:	56                   	push   %esi
 8050fc1:	53                   	push   %ebx
 8050fc2:	89 c3                	mov    %eax,%ebx
 8050fc4:	89 d6                	mov    %edx,%esi
 8050fc6:	83 ec 20             	sub    $0x20,%esp
  unsigned long int size;
  verify (SIZE_MAX <= ULONG_MAX);

  switch (xstrtoul (opt, NULL, 10, &size, ""))
 8050fc9:	68 dd 6a 06 08       	push   $0x8066add
 8050fce:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8050fd2:	50                   	push   %eax
 8050fd3:	6a 0a                	push   $0xa
 8050fd5:	6a 00                	push   $0x0
 8050fd7:	53                   	push   %ebx
 8050fd8:	e8 43 f9 00 00       	call   8060920 <xstrtoul>
 8050fdd:	83 c4 20             	add    $0x20,%esp
 8050fe0:	83 f8 01             	cmp    $0x1,%eax
 8050fe3:	76 55                	jbe    805103a <size_opt+0xaa>
 8050fe5:	8d 76 00             	lea    0x0(%esi),%esi
 8050fe8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050fec:	89 3c 24             	mov    %edi,(%esp)
 8050fef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050ff3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050ff7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050ffb:	b9 8a 1b 00 00       	mov    $0x1b8a,%ecx
 8051000:	e8 43 39 00 00       	call   8054948 <__afl_maybe_log>
 8051005:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051009:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805100d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051011:	8b 3c 24             	mov    (%esp),%edi
 8051014:	8d 64 24 10          	lea    0x10(%esp),%esp
    case LONGINT_OK:
    case LONGINT_OVERFLOW:
      break;

    default:
      error (EXIT_FAILURE, 0, "%s: %s", opt, _(msgid));
 8051018:	83 ec 04             	sub    $0x4,%esp
 805101b:	6a 05                	push   $0x5
 805101d:	56                   	push   %esi
 805101e:	6a 00                	push   $0x0
 8051020:	e8 eb 81 ff ff       	call   8049210 <dcgettext@plt>
 8051025:	89 04 24             	mov    %eax,(%esp)
 8051028:	53                   	push   %ebx
 8051029:	68 08 5b 06 08       	push   $0x8065b08
 805102e:	6a 00                	push   $0x0
 8051030:	6a 01                	push   $0x1
 8051032:	e8 89 82 ff ff       	call   80492c0 <error@plt>
 8051037:	83 c4 20             	add    $0x20,%esp
 805103a:	66 90                	xchg   %ax,%ax
    }

  

return MIN (size, SIZE_MAX);
}
 805103c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051040:	89 3c 24             	mov    %edi,(%esp)
 8051043:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051047:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805104b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805104f:	b9 e1 47 00 00       	mov    $0x47e1,%ecx
 8051054:	e8 ef 38 00 00       	call   8054948 <__afl_maybe_log>
 8051059:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805105d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051061:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051065:	8b 3c 24             	mov    (%esp),%edi
 8051068:	8d 64 24 10          	lea    0x10(%esp),%esp
 805106c:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051070:	83 c4 14             	add    $0x14,%esp
 8051073:	5b                   	pop    %ebx
 8051074:	5e                   	pop    %esi
 8051075:	c3                   	ret    
 8051076:	8d 76 00             	lea    0x0(%esi),%esi
 8051079:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08051080 <report_label_coverage>:
void __attribute__ ((noinline)) report_label_coverage(char * crit, int id) {
	asm volatile (""::: "memory");
 8051080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051084:	89 3c 24             	mov    %edi,(%esp)
 8051087:	89 54 24 04          	mov    %edx,0x4(%esp)
 805108b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805108f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051093:	b9 ae 8b 00 00       	mov    $0x8bae,%ecx
 8051098:	e8 ab 38 00 00       	call   8054948 <__afl_maybe_log>
 805109d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80510a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80510a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80510a9:	8b 3c 24             	mov    (%esp),%edi
 80510ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80510b0:	c3                   	ret    
 80510b1:	eb 0d                	jmp    80510c0 <find_field.isra.3>
 80510b3:	90                   	nop
 80510b4:	90                   	nop
 80510b5:	90                   	nop
 80510b6:	90                   	nop
 80510b7:	90                   	nop
 80510b8:	90                   	nop
 80510b9:	90                   	nop
 80510ba:	90                   	nop
 80510bb:	90                   	nop
 80510bc:	90                   	nop
 80510bd:	90                   	nop
 80510be:	90                   	nop
 80510bf:	90                   	nop

080510c0 <find_field.isra.3>:

/* Given a linebuffer LINE,
   return a pointer to the beginning of the line's field to be compared. */

static char * _GL_ATTRIBUTE_PURE
find_field (struct linebuffer const *line)
 80510c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80510c4:	89 3c 24             	mov    %edi,(%esp)
 80510c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80510cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80510cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80510d3:	b9 8f 84 00 00       	mov    $0x848f,%ecx
 80510d8:	e8 6b 38 00 00       	call   8054948 <__afl_maybe_log>
 80510dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80510e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80510e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80510e9:	8b 3c 24             	mov    (%esp),%edi
 80510ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80510f0:	55                   	push   %ebp
 80510f1:	57                   	push   %edi
 80510f2:	56                   	push   %esi
 80510f3:	53                   	push   %ebx
 80510f4:	89 c3                	mov    %eax,%ebx
 80510f6:	83 ec 1c             	sub    $0x1c,%esp
{
  size_t count;
  char const *lp = line->buffer;
 80510f9:	8b 32                	mov    (%edx),%esi

/* Given a linebuffer LINE,
   return a pointer to the beginning of the line's field to be compared. */

static char * _GL_ATTRIBUTE_PURE
find_field (struct linebuffer const *line)
 80510fb:	89 54 24 08          	mov    %edx,0x8(%esp)
	report_label_coverage("ABS", 190);
}

// AOR Label 191
if(line->length / 1 != line->length - 1)  {
	report_label_coverage("AOR", 191);
 80510ff:	68 bf 00 00 00       	push   $0xbf
 8051104:	68 0f 5b 06 08       	push   $0x8065b0f
 8051109:	e8 72 ff ff ff       	call   8051080 <report_label_coverage>
}
// AOR Label 192
if(line->length + 1 != line->length - 1)  {
 805110e:	5f                   	pop    %edi
 805110f:	5d                   	pop    %ebp
	report_label_coverage("AOR", 192);
 8051110:	68 c0 00 00 00       	push   $0xc0
 8051115:	68 0f 5b 06 08       	push   $0x8065b0f
 805111a:	e8 61 ff ff ff       	call   8051080 <report_label_coverage>
 805111f:	58                   	pop    %eax
 8051120:	5a                   	pop    %edx
}
// AOR Label 193
if(line->length * 1 != line->length - 1)  {
	report_label_coverage("AOR", 193);
 8051121:	68 c1 00 00 00       	push   $0xc1
 8051126:	68 0f 5b 06 08       	push   $0x8065b0f
 805112b:	e8 50 ff ff ff       	call   8051080 <report_label_coverage>
}
size_t size = line->length - 1;
 8051130:	8b 2b                	mov    (%ebx),%ebp
if(skip_fields < 0)  {
	report_label_coverage("ABS", 197);
}

// COR Label 198
if((count < skip_fields || i < size) != (count < skip_fields && i < size))  {
 8051132:	8b 15 18 a3 06 08    	mov    0x806a318,%edx
}
// AOR Label 193
if(line->length * 1 != line->length - 1)  {
	report_label_coverage("AOR", 193);
}
size_t size = line->length - 1;
 8051138:	83 ed 01             	sub    $0x1,%ebp
if(skip_fields < 0)  {
	report_label_coverage("ABS", 197);
}

// COR Label 198
if((count < skip_fields || i < size) != (count < skip_fields && i < size))  {
 805113b:	85 d2                	test   %edx,%edx
 805113d:	89 54 24 08          	mov    %edx,0x8(%esp)
 8051141:	59                   	pop    %ecx
 8051142:	5b                   	pop    %ebx
 8051143:	0f 85 b7 00 00 00    	jne    8051200 <find_field.isra.3+0x140>
 8051149:	8d 76 00             	lea    0x0(%esi),%esi
 805114c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051150:	89 3c 24             	mov    %edi,(%esp)
 8051153:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805115b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805115f:	b9 7f 29 00 00       	mov    $0x297f,%ecx
 8051164:	e8 df 37 00 00       	call   8054948 <__afl_maybe_log>
 8051169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805116d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051171:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051175:	8b 3c 24             	mov    (%esp),%edi
 8051178:	8d 64 24 10          	lea    0x10(%esp),%esp
 805117c:	31 db                	xor    %ebx,%ebx
 805117e:	85 ed                	test   %ebp,%ebp
 8051180:	0f 85 46 0b 00 00    	jne    8051ccc <find_field.isra.3+0xc0c>
 8051186:	66 90                	xchg   %ax,%ax
 8051188:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805118c:	89 3c 24             	mov    %edi,(%esp)
 805118f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051193:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051197:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805119b:	b9 1d da 00 00       	mov    $0xda1d,%ecx
 80511a0:	e8 a3 37 00 00       	call   8054948 <__afl_maybe_log>
 80511a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80511a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80511ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80511b1:	8b 3c 24             	mov    (%esp),%edi
 80511b4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 198);
}

// ROR Label 199
if((count <= skip_fields) != (count < skip_fields))  {
	report_label_coverage("ROR", 199);
 80511b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80511bc:	89 3c 24             	mov    %edi,(%esp)
 80511bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80511c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80511c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80511cb:	b9 8a af 00 00       	mov    $0xaf8a,%ecx
 80511d0:	e8 73 37 00 00       	call   8054948 <__afl_maybe_log>
 80511d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80511d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80511dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80511e1:	8b 3c 24             	mov    (%esp),%edi
 80511e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80511e8:	68 c7 00 00 00       	push   $0xc7
 80511ed:	68 17 5b 06 08       	push   $0x8065b17
 80511f2:	e8 89 fe ff ff       	call   8051080 <report_label_coverage>
 80511f7:	58                   	pop    %eax
 80511f8:	5a                   	pop    %edx
 80511f9:	e9 87 00 00 00       	jmp    8051285 <find_field.isra.3+0x1c5>
 80511fe:	66 90                	xchg   %ax,%ax
if(skip_fields < 0)  {
	report_label_coverage("ABS", 197);
}

// COR Label 198
if((count < skip_fields || i < size) != (count < skip_fields && i < size))  {
 8051200:	85 ed                	test   %ebp,%ebp
 8051202:	0f 84 a8 0a 00 00    	je     8051cb0 <find_field.isra.3+0xbf0>
 8051208:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805120c:	89 3c 24             	mov    %edi,(%esp)
 805120f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051213:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051217:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805121b:	b9 0b 73 00 00       	mov    $0x730b,%ecx
 8051220:	e8 23 37 00 00       	call   8054948 <__afl_maybe_log>
 8051225:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051229:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805122d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051231:	8b 3c 24             	mov    (%esp),%edi
 8051234:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051238:	bb 01 00 00 00       	mov    $0x1,%ebx
 805123d:	8d 76 00             	lea    0x0(%esi),%esi
if((count <= skip_fields) != (count < skip_fields))  {
	report_label_coverage("ROR", 199);
}
// ROR Label 200
if((count > skip_fields) != (count < skip_fields))  {
	report_label_coverage("ROR", 200);
 8051240:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051244:	89 3c 24             	mov    %edi,(%esp)
 8051247:	89 54 24 04          	mov    %edx,0x4(%esp)
 805124b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805124f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051253:	b9 e6 57 00 00       	mov    $0x57e6,%ecx
 8051258:	e8 eb 36 00 00       	call   8054948 <__afl_maybe_log>
 805125d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051261:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051265:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051269:	8b 3c 24             	mov    (%esp),%edi
 805126c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051270:	83 ec 08             	sub    $0x8,%esp
 8051273:	68 c8 00 00 00       	push   $0xc8
 8051278:	68 17 5b 06 08       	push   $0x8065b17
 805127d:	e8 fe fd ff ff       	call   8051080 <report_label_coverage>
 8051282:	83 c4 10             	add    $0x10,%esp
 8051285:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 201
if((count >= skip_fields) != (count < skip_fields))  {
	report_label_coverage("ROR", 201);
 8051288:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805128c:	89 3c 24             	mov    %edi,(%esp)
 805128f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051293:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051297:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805129b:	b9 ba f7 00 00       	mov    $0xf7ba,%ecx
 80512a0:	e8 a3 36 00 00       	call   8054948 <__afl_maybe_log>
 80512a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80512a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80512ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80512b1:	8b 3c 24             	mov    (%esp),%edi
 80512b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80512b8:	83 ec 08             	sub    $0x8,%esp
 80512bb:	68 c9 00 00 00       	push   $0xc9
 80512c0:	68 17 5b 06 08       	push   $0x8065b17
 80512c5:	e8 b6 fd ff ff       	call   8051080 <report_label_coverage>
}
// ROR Label 202
if((i <= size) != (i < size))  {
 80512ca:	83 c4 10             	add    $0x10,%esp
 80512cd:	85 ed                	test   %ebp,%ebp
 80512cf:	0f 84 bb 09 00 00    	je     8051c90 <find_field.isra.3+0xbd0>
 80512d5:	8d 76 00             	lea    0x0(%esi),%esi
 80512d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80512dc:	89 3c 24             	mov    %edi,(%esp)
 80512df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80512e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80512e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80512eb:	b9 cc fa 00 00       	mov    $0xfacc,%ecx
 80512f0:	e8 53 36 00 00       	call   8054948 <__afl_maybe_log>
 80512f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80512f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80512fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051301:	8b 3c 24             	mov    (%esp),%edi
 8051304:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 202);
}
// ROR Label 203
if((i > size) != (i < size))  {
	report_label_coverage("ROR", 203);
 8051308:	83 ec 08             	sub    $0x8,%esp
 805130b:	68 cb 00 00 00       	push   $0xcb
 8051310:	68 17 5b 06 08       	push   $0x8065b17
 8051315:	e8 66 fd ff ff       	call   8051080 <report_label_coverage>
 805131a:	83 c4 10             	add    $0x10,%esp
 805131d:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 204
if((i >= size) != (i < size))  {
 8051320:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051324:	89 3c 24             	mov    %edi,(%esp)
 8051327:	89 54 24 04          	mov    %edx,0x4(%esp)
 805132b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805132f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051333:	b9 2d c5 00 00       	mov    $0xc52d,%ecx
 8051338:	e8 0b 36 00 00       	call   8054948 <__afl_maybe_log>
 805133d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051341:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051345:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051349:	8b 3c 24             	mov    (%esp),%edi
 805134c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051350:	85 ed                	test   %ebp,%ebp
 8051352:	0f 94 c1             	sete   %cl
	report_label_coverage("ROR", 204);
 8051355:	83 ec 08             	sub    $0x8,%esp
 8051358:	68 cc 00 00 00       	push   $0xcc
 805135d:	68 17 5b 06 08       	push   $0x8065b17
// ROR Label 203
if((i > size) != (i < size))  {
	report_label_coverage("ROR", 203);
}
// ROR Label 204
if((i >= size) != (i < size))  {
 8051362:	89 cf                	mov    %ecx,%edi
	report_label_coverage("ROR", 204);
 8051364:	e8 17 fd ff ff       	call   8051080 <report_label_coverage>
}

// MCC Label 205
if(count < skip_fields && i < size ) {
 8051369:	83 c4 10             	add    $0x10,%esp
 805136c:	8b 04 24             	mov    (%esp),%eax
 805136f:	85 c0                	test   %eax,%eax
 8051371:	0f 84 e1 05 00 00    	je     8051958 <find_field.isra.3+0x898>
 8051377:	90                   	nop
 8051378:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805137c:	89 3c 24             	mov    %edi,(%esp)
 805137f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051383:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051387:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805138b:	b9 3e f0 00 00       	mov    $0xf03e,%ecx
 8051390:	e8 b3 35 00 00       	call   8054948 <__afl_maybe_log>
 8051395:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051399:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805139d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80513a1:	8b 3c 24             	mov    (%esp),%edi
 80513a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80513a8:	84 db                	test   %bl,%bl
 80513aa:	0f 85 67 09 00 00    	jne    8051d17 <find_field.isra.3+0xc57>
 80513b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80513b4:	89 3c 24             	mov    %edi,(%esp)
 80513b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80513bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80513bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80513c3:	b9 1d 88 00 00       	mov    $0x881d,%ecx
 80513c8:	e8 7b 35 00 00       	call   8054948 <__afl_maybe_log>
 80513cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80513d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80513d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80513d9:	8b 3c 24             	mov    (%esp),%edi
 80513dc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 205);
}
// MCC Label 206
if(count < skip_fields && !(i < size) ) {
 80513e0:	89 f9                	mov    %edi,%ecx
 80513e2:	84 c9                	test   %cl,%cl
 80513e4:	0f 85 aa 09 00 00    	jne    8051d94 <find_field.isra.3+0xcd4>
 80513ea:	66 90                	xchg   %ax,%ax
 80513ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80513f0:	89 3c 24             	mov    %edi,(%esp)
 80513f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80513f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80513fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80513ff:	b9 9e 60 00 00       	mov    $0x609e,%ecx
 8051404:	e8 3f 35 00 00       	call   8054948 <__afl_maybe_log>
 8051409:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805140d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051411:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051415:	8b 3c 24             	mov    (%esp),%edi
 8051418:	8d 64 24 10          	lea    0x10(%esp),%esp
if(skip_fields < 0)  {
	report_label_coverage("ABS", 212);
}

// COR Label 213
if((count < skip_fields || i < size) != (count < skip_fields && i < size))  {
 805141c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051420:	89 3c 24             	mov    %edi,(%esp)
 8051423:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051427:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805142b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805142f:	b9 84 95 00 00       	mov    $0x9584,%ecx
 8051434:	e8 0f 35 00 00       	call   8054948 <__afl_maybe_log>
 8051439:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805143d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051441:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051445:	8b 3c 24             	mov    (%esp),%edi
 8051448:	8d 64 24 10          	lea    0x10(%esp),%esp
 805144c:	c6 44 24 0d 00       	movb   $0x0,0xd(%esp)
 8051451:	c6 44 24 0c 01       	movb   $0x1,0xc(%esp)
 8051456:	b9 01 00 00 00       	mov    $0x1,%ecx
 805145b:	c6 44 24 0e 00       	movb   $0x0,0xe(%esp)
 8051460:	31 ff                	xor    %edi,%edi
 8051462:	c6 44 24 04 01       	movb   $0x1,0x4(%esp)
 8051467:	31 db                	xor    %ebx,%ebx
 8051469:	31 f6                	xor    %esi,%esi
 805146b:	90                   	nop
 805146c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8051470:	88 4c 24 0f          	mov    %cl,0xf(%esp)
	report_label_coverage("COR", 213);
 8051474:	83 ec 08             	sub    $0x8,%esp
 8051477:	68 d5 00 00 00       	push   $0xd5
 805147c:	68 13 5b 06 08       	push   $0x8065b13
 8051481:	e8 fa fb ff ff       	call   8051080 <report_label_coverage>
 8051486:	83 c4 10             	add    $0x10,%esp
 8051489:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
 805148e:	66 90                	xchg   %ax,%ax
}

// ROR Label 214
if((count <= skip_fields) != (count < skip_fields))  {
 8051490:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051494:	89 3c 24             	mov    %edi,(%esp)
 8051497:	89 54 24 04          	mov    %edx,0x4(%esp)
 805149b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805149f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80514a3:	b9 65 98 00 00       	mov    $0x9865,%ecx
 80514a8:	e8 9b 34 00 00       	call   8054948 <__afl_maybe_log>
 80514ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80514b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80514b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80514b9:	8b 3c 24             	mov    (%esp),%edi
 80514bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80514c0:	3a 4c 24 04          	cmp    0x4(%esp),%cl
 80514c4:	74 47                	je     805150d <find_field.isra.3+0x44d>
 80514c6:	66 90                	xchg   %ax,%ax
 80514c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80514cc:	89 3c 24             	mov    %edi,(%esp)
 80514cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80514d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80514d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80514db:	b9 06 0f 00 00       	mov    $0xf06,%ecx
 80514e0:	e8 63 34 00 00       	call   8054948 <__afl_maybe_log>
 80514e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80514e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80514ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80514f1:	8b 3c 24             	mov    (%esp),%edi
 80514f4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 214);
 80514f8:	83 ec 08             	sub    $0x8,%esp
 80514fb:	68 d6 00 00 00       	push   $0xd6
 8051500:	68 17 5b 06 08       	push   $0x8065b17
 8051505:	e8 76 fb ff ff       	call   8051080 <report_label_coverage>
 805150a:	83 c4 10             	add    $0x10,%esp
 805150d:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 215
if((count > skip_fields) != (count < skip_fields))  {
 8051510:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051514:	89 3c 24             	mov    %edi,(%esp)
 8051517:	89 54 24 04          	mov    %edx,0x4(%esp)
 805151b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805151f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051523:	b9 67 0c 00 00       	mov    $0xc67,%ecx
 8051528:	e8 1b 34 00 00       	call   8054948 <__afl_maybe_log>
 805152d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051531:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051535:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051539:	8b 3c 24             	mov    (%esp),%edi
 805153c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051540:	0f b6 4c 24 04       	movzbl 0x4(%esp),%ecx
 8051545:	38 4c 24 0e          	cmp    %cl,0xe(%esp)
 8051549:	74 46                	je     8051591 <find_field.isra.3+0x4d1>
 805154b:	90                   	nop
 805154c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051550:	89 3c 24             	mov    %edi,(%esp)
 8051553:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051557:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805155b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805155f:	b9 18 83 00 00       	mov    $0x8318,%ecx
 8051564:	e8 df 33 00 00       	call   8054948 <__afl_maybe_log>
 8051569:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805156d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051571:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051575:	8b 3c 24             	mov    (%esp),%edi
 8051578:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 215);
 805157c:	83 ec 08             	sub    $0x8,%esp
 805157f:	68 d7 00 00 00       	push   $0xd7
 8051584:	68 17 5b 06 08       	push   $0x8065b17
 8051589:	e8 f2 fa ff ff       	call   8051080 <report_label_coverage>
 805158e:	83 c4 10             	add    $0x10,%esp
 8051591:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 216
if((count >= skip_fields) != (count < skip_fields))  {
 8051594:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051598:	89 3c 24             	mov    %edi,(%esp)
 805159b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805159f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80515a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80515a7:	b9 15 d6 00 00       	mov    $0xd615,%ecx
 80515ac:	e8 97 33 00 00       	call   8054948 <__afl_maybe_log>
 80515b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80515b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80515b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80515bd:	8b 3c 24             	mov    (%esp),%edi
 80515c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80515c4:	39 3c 24             	cmp    %edi,(%esp)
 80515c7:	0f 96 c2             	setbe  %dl
 80515ca:	3a 54 24 04          	cmp    0x4(%esp),%dl
 80515ce:	89 d7                	mov    %edx,%edi
 80515d0:	74 47                	je     8051619 <find_field.isra.3+0x559>
 80515d2:	66 90                	xchg   %ax,%ax
 80515d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80515d8:	89 3c 24             	mov    %edi,(%esp)
 80515db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80515df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80515e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80515e7:	b9 cc 4d 00 00       	mov    $0x4dcc,%ecx
 80515ec:	e8 57 33 00 00       	call   8054948 <__afl_maybe_log>
 80515f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80515f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80515f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80515fd:	8b 3c 24             	mov    (%esp),%edi
 8051600:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 216);
 8051604:	83 ec 08             	sub    $0x8,%esp
 8051607:	68 d8 00 00 00       	push   $0xd8
 805160c:	68 17 5b 06 08       	push   $0x8065b17
 8051611:	e8 6a fa ff ff       	call   8051080 <report_label_coverage>
 8051616:	83 c4 10             	add    $0x10,%esp
 8051619:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 217
if((i <= size) != (i < size))  {
 805161c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051620:	89 3c 24             	mov    %edi,(%esp)
 8051623:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051627:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805162b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805162f:	b9 ae a5 00 00       	mov    $0xa5ae,%ecx
 8051634:	e8 0f 33 00 00       	call   8054948 <__afl_maybe_log>
 8051639:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805163d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051641:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051645:	8b 3c 24             	mov    (%esp),%edi
 8051648:	8d 64 24 10          	lea    0x10(%esp),%esp
 805164c:	89 f0                	mov    %esi,%eax
 805164e:	3a 44 24 0c          	cmp    0xc(%esp),%al
 8051652:	74 45                	je     8051699 <find_field.isra.3+0x5d9>
 8051654:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051658:	89 3c 24             	mov    %edi,(%esp)
 805165b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805165f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051663:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051667:	b9 45 41 00 00       	mov    $0x4145,%ecx
 805166c:	e8 d7 32 00 00       	call   8054948 <__afl_maybe_log>
 8051671:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051675:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051679:	8b 54 24 04          	mov    0x4(%esp),%edx
 805167d:	8b 3c 24             	mov    (%esp),%edi
 8051680:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 217);
 8051684:	83 ec 08             	sub    $0x8,%esp
 8051687:	68 d9 00 00 00       	push   $0xd9
 805168c:	68 17 5b 06 08       	push   $0x8065b17
 8051691:	e8 ea f9 ff ff       	call   8051080 <report_label_coverage>
 8051696:	83 c4 10             	add    $0x10,%esp
 8051699:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 218
if((i > size) != (i < size))  {
 805169c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80516a0:	89 3c 24             	mov    %edi,(%esp)
 80516a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80516a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80516ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80516af:	b9 e3 bb 00 00       	mov    $0xbbe3,%ecx
 80516b4:	e8 8f 32 00 00       	call   8054948 <__afl_maybe_log>
 80516b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80516bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80516c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80516c5:	8b 3c 24             	mov    (%esp),%edi
 80516c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80516cc:	89 f1                	mov    %esi,%ecx
 80516ce:	3a 4c 24 0d          	cmp    0xd(%esp),%cl
 80516d2:	74 45                	je     8051719 <find_field.isra.3+0x659>
 80516d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80516d8:	89 3c 24             	mov    %edi,(%esp)
 80516db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80516df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80516e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80516e7:	b9 21 30 00 00       	mov    $0x3021,%ecx
 80516ec:	e8 57 32 00 00       	call   8054948 <__afl_maybe_log>
 80516f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80516f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80516f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80516fd:	8b 3c 24             	mov    (%esp),%edi
 8051700:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 218);
 8051704:	83 ec 08             	sub    $0x8,%esp
 8051707:	68 da 00 00 00       	push   $0xda
 805170c:	68 17 5b 06 08       	push   $0x8065b17
 8051711:	e8 6a f9 ff ff       	call   8051080 <report_label_coverage>
 8051716:	83 c4 10             	add    $0x10,%esp
 8051719:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 219
if((i >= size) != (i < size))  {
 805171c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051720:	89 3c 24             	mov    %edi,(%esp)
 8051723:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051727:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805172b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805172f:	b9 13 37 00 00       	mov    $0x3713,%ecx
 8051734:	e8 0f 32 00 00       	call   8054948 <__afl_maybe_log>
 8051739:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805173d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051741:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051745:	8b 3c 24             	mov    (%esp),%edi
 8051748:	8d 64 24 10          	lea    0x10(%esp),%esp
 805174c:	39 dd                	cmp    %ebx,%ebp
 805174e:	89 f2                	mov    %esi,%edx
 8051750:	0f 96 c0             	setbe  %al
 8051753:	38 d0                	cmp    %dl,%al
 8051755:	74 4d                	je     80517a4 <find_field.isra.3+0x6e4>
 8051757:	90                   	nop
 8051758:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805175c:	89 3c 24             	mov    %edi,(%esp)
 805175f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051763:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051767:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805176b:	b9 2f cc 00 00       	mov    $0xcc2f,%ecx
 8051770:	e8 d3 31 00 00       	call   8054948 <__afl_maybe_log>
 8051775:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051779:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805177d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051781:	8b 3c 24             	mov    (%esp),%edi
 8051784:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051788:	88 04 24             	mov    %al,(%esp)
	report_label_coverage("ROR", 219);
 805178b:	83 ec 08             	sub    $0x8,%esp
 805178e:	68 db 00 00 00       	push   $0xdb
 8051793:	68 17 5b 06 08       	push   $0x8065b17
 8051798:	e8 e3 f8 ff ff       	call   8051080 <report_label_coverage>
 805179d:	83 c4 10             	add    $0x10,%esp
 80517a0:	0f b6 04 24          	movzbl (%esp),%eax
}

// MCC Label 220
if(count < skip_fields && i < size ) {
 80517a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80517a8:	89 3c 24             	mov    %edi,(%esp)
 80517ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80517af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80517b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80517b7:	b9 9f e7 00 00       	mov    $0xe79f,%ecx
 80517bc:	e8 87 31 00 00       	call   8054948 <__afl_maybe_log>
 80517c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80517c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80517c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80517cd:	8b 3c 24             	mov    (%esp),%edi
 80517d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80517d4:	80 7c 24 04 00       	cmpb   $0x0,0x4(%esp)
 80517d9:	89 f1                	mov    %esi,%ecx
 80517db:	0f 85 f7 02 00 00    	jne    8051ad8 <find_field.isra.3+0xa18>
 80517e1:	8d 76 00             	lea    0x0(%esi),%esi
 80517e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80517e8:	89 3c 24             	mov    %edi,(%esp)
 80517eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80517ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80517f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80517f7:	b9 fd 8f 00 00       	mov    $0x8ffd,%ecx
 80517fc:	e8 47 31 00 00       	call   8054948 <__afl_maybe_log>
 8051801:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051805:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051809:	8b 54 24 04          	mov    0x4(%esp),%edx
 805180d:	8b 3c 24             	mov    (%esp),%edi
 8051810:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 221
if(count < skip_fields && !(i < size) ) {
	report_label_coverage("MCC", 221);
}
// MCC Label 222
if(!(count < skip_fields) && i < size ) {
 8051814:	84 c9                	test   %cl,%cl
 8051816:	0f 85 d4 03 00 00    	jne    8051bf0 <find_field.isra.3+0xb30>
 805181c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051820:	89 3c 24             	mov    %edi,(%esp)
 8051823:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051827:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805182b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805182f:	b9 23 b0 00 00       	mov    $0xb023,%ecx
 8051834:	e8 0f 31 00 00       	call   8054948 <__afl_maybe_log>
 8051839:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805183d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051841:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051845:	8b 3c 24             	mov    (%esp),%edi
 8051848:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 222);
}
// MCC Label 223
if(!(count < skip_fields) && !(i < size) ) {
 805184c:	84 c0                	test   %al,%al
 805184e:	0f 85 f0 03 00 00    	jne    8051c44 <find_field.isra.3+0xb84>
 8051854:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051858:	89 3c 24             	mov    %edi,(%esp)
 805185b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805185f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051863:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051867:	b9 c6 d2 00 00       	mov    $0xd2c6,%ecx
 805186c:	e8 d7 30 00 00       	call   8054948 <__afl_maybe_log>
 8051871:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051875:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051879:	8b 54 24 04          	mov    0x4(%esp),%edx
 805187d:	8b 3c 24             	mov    (%esp),%edi
 8051880:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 223);
}


  i += MIN (skip_chars, size - i);
 8051884:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051888:	89 3c 24             	mov    %edi,(%esp)
 805188b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805188f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051893:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051897:	b9 f3 b7 00 00       	mov    $0xb7f3,%ecx
 805189c:	e8 a7 30 00 00       	call   8054948 <__afl_maybe_log>
 80518a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80518a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80518a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80518ad:	8b 3c 24             	mov    (%esp),%edi
 80518b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80518b4:	8b 35 14 a3 06 08    	mov    0x806a314,%esi
 80518ba:	29 dd                	sub    %ebx,%ebp
 80518bc:	39 f5                	cmp    %esi,%ebp
 80518be:	0f 47 ee             	cmova  %esi,%ebp
 80518c1:	01 eb                	add    %ebp,%ebx
if(line->buffer < 0)  {
	report_label_coverage("ABS", 227);
}

// AOR Label 228
if(line->buffer - i != line->buffer + i)  {
 80518c3:	89 dd                	mov    %ebx,%ebp
 80518c5:	01 dd                	add    %ebx,%ebp
 80518c7:	74 48                	je     8051911 <find_field.isra.3+0x851>
 80518c9:	8d 76 00             	lea    0x0(%esi),%esi
 80518cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80518d0:	89 3c 24             	mov    %edi,(%esp)
 80518d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80518d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80518db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80518df:	b9 7c 65 00 00       	mov    $0x657c,%ecx
 80518e4:	e8 5f 30 00 00       	call   8054948 <__afl_maybe_log>
 80518e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80518ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80518f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80518f5:	8b 3c 24             	mov    (%esp),%edi
 80518f8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 228);
 80518fc:	83 ec 08             	sub    $0x8,%esp
 80518ff:	68 e4 00 00 00       	push   $0xe4
 8051904:	68 0f 5b 06 08       	push   $0x8065b0f
 8051909:	e8 72 f7 ff ff       	call   8051080 <report_label_coverage>
 805190e:	83 c4 10             	add    $0x10,%esp
 8051911:	8d 76 00             	lea    0x0(%esi),%esi
}

return line->buffer + i;
 8051914:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051918:	89 3c 24             	mov    %edi,(%esp)
 805191b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805191f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051923:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051927:	b9 52 1a 00 00       	mov    $0x1a52,%ecx
 805192c:	e8 17 30 00 00       	call   8054948 <__afl_maybe_log>
 8051931:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051935:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051939:	8b 54 24 04          	mov    0x4(%esp),%edx
 805193d:	8b 3c 24             	mov    (%esp),%edi
 8051940:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051944:	8b 7c 24 08          	mov    0x8(%esp),%edi
 8051948:	8b 07                	mov    (%edi),%eax
}
 805194a:	83 c4 1c             	add    $0x1c,%esp
// AOR Label 228
if(line->buffer - i != line->buffer + i)  {
	report_label_coverage("AOR", 228);
}

return line->buffer + i;
 805194d:	01 d8                	add    %ebx,%eax
}
 805194f:	5b                   	pop    %ebx
 8051950:	5e                   	pop    %esi
 8051951:	5f                   	pop    %edi
 8051952:	5d                   	pop    %ebp
 8051953:	c3                   	ret    
 8051954:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
// MCC Label 206
if(count < skip_fields && !(i < size) ) {
	report_label_coverage("MCC", 206);
}
// MCC Label 207
if(!(count < skip_fields) && i < size ) {
 8051958:	84 db                	test   %bl,%bl
 805195a:	0f 85 c8 15 00 00    	jne    8052f28 <find_field.isra.3+0x1e68>
 8051960:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051964:	89 3c 24             	mov    %edi,(%esp)
 8051967:	89 54 24 04          	mov    %edx,0x4(%esp)
 805196b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805196f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051973:	b9 67 f0 00 00       	mov    $0xf067,%ecx
 8051978:	e8 cb 2f 00 00       	call   8054948 <__afl_maybe_log>
 805197d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051981:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051985:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051989:	8b 3c 24             	mov    (%esp),%edi
 805198c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 207);
}
// MCC Label 208
if(!(count < skip_fields) && !(i < size) ) {
 8051990:	89 fa                	mov    %edi,%edx
 8051992:	84 d2                	test   %dl,%dl
 8051994:	0f 85 da 15 00 00    	jne    8052f74 <find_field.isra.3+0x1eb4>
 805199a:	66 90                	xchg   %ax,%ax
 805199c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80519a0:	89 3c 24             	mov    %edi,(%esp)
 80519a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80519a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80519ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80519af:	b9 ab f8 00 00       	mov    $0xf8ab,%ecx
 80519b4:	e8 8f 2f 00 00       	call   8054948 <__afl_maybe_log>
 80519b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80519bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80519c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80519c5:	8b 3c 24             	mov    (%esp),%edi
 80519c8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 208);
}
for (; count < skip_fields && i < size; count++)
 80519cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80519d0:	89 3c 24             	mov    %edi,(%esp)
 80519d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80519d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80519db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80519df:	b9 e6 c0 00 00       	mov    $0xc0e6,%ecx
 80519e4:	e8 5f 2f 00 00       	call   8054948 <__afl_maybe_log>
 80519e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80519ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80519f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80519f5:	8b 3c 24             	mov    (%esp),%edi
 80519f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80519fc:	31 ff                	xor    %edi,%edi
 80519fe:	c6 44 24 0d 00       	movb   $0x0,0xd(%esp)
 8051a03:	c6 44 24 0c 01       	movb   $0x1,0xc(%esp)
 8051a08:	31 db                	xor    %ebx,%ebx
 8051a0a:	66 90                	xchg   %ax,%ax
if(skip_fields < 0)  {
	report_label_coverage("ABS", 212);
}

// COR Label 213
if((count < skip_fields || i < size) != (count < skip_fields && i < size))  {
 8051a0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051a10:	89 3c 24             	mov    %edi,(%esp)
 8051a13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051a17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051a1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051a1f:	b9 0b 1b 00 00       	mov    $0x1b0b,%ecx
 8051a24:	e8 1f 2f 00 00       	call   8054948 <__afl_maybe_log>
 8051a29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051a2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051a31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051a35:	8b 3c 24             	mov    (%esp),%edi
 8051a38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051a3c:	39 dd                	cmp    %ebx,%ebp
 8051a3e:	c6 44 24 0e 00       	movb   $0x0,0xe(%esp)
 8051a43:	b9 01 00 00 00       	mov    $0x1,%ecx
 8051a48:	0f 97 c0             	seta   %al
 8051a4b:	89 c6                	mov    %eax,%esi
 8051a4d:	0f b6 d0             	movzbl %al,%edx
 8051a50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051a54:	89 3c 24             	mov    %edi,(%esp)
 8051a57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051a5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051a5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051a63:	b9 b7 78 00 00       	mov    $0x78b7,%ecx
 8051a68:	e8 db 2e 00 00       	call   8054948 <__afl_maybe_log>
 8051a6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051a71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051a75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051a79:	8b 3c 24             	mov    (%esp),%edi
 8051a7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051a80:	39 3c 24             	cmp    %edi,(%esp)
 8051a83:	0f 97 44 24 04       	seta   0x4(%esp)
 8051a88:	0f b6 44 24 04       	movzbl 0x4(%esp),%eax
 8051a8d:	21 f0                	and    %esi,%eax
 8051a8f:	0f b6 c0             	movzbl %al,%eax
 8051a92:	39 c2                	cmp    %eax,%edx
 8051a94:	0f 84 f4 f9 ff ff    	je     805148e <find_field.isra.3+0x3ce>
 8051a9a:	66 90                	xchg   %ax,%ax
 8051a9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051aa0:	89 3c 24             	mov    %edi,(%esp)
 8051aa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051aa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051aab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051aaf:	b9 5c 26 00 00       	mov    $0x265c,%ecx
 8051ab4:	e8 8f 2e 00 00       	call   8054948 <__afl_maybe_log>
 8051ab9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051abd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051ac1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051ac5:	8b 3c 24             	mov    (%esp),%edi
 8051ac8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051acc:	e9 9f f9 ff ff       	jmp    8051470 <find_field.isra.3+0x3b0>
 8051ad1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
if((i >= size) != (i < size))  {
	report_label_coverage("ROR", 219);
}

// MCC Label 220
if(count < skip_fields && i < size ) {
 8051ad8:	84 c9                	test   %cl,%cl
 8051ada:	0f 85 80 15 00 00    	jne    8053060 <find_field.isra.3+0x1fa0>
 8051ae0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051ae4:	89 3c 24             	mov    %edi,(%esp)
 8051ae7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051aeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051aef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051af3:	b9 de 85 00 00       	mov    $0x85de,%ecx
 8051af8:	e8 4b 2e 00 00       	call   8054948 <__afl_maybe_log>
 8051afd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051b01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051b05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051b09:	8b 3c 24             	mov    (%esp),%edi
 8051b0c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 220);
}
// MCC Label 221
if(count < skip_fields && !(i < size) ) {
 8051b10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051b14:	89 3c 24             	mov    %edi,(%esp)
 8051b17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051b1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051b1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051b23:	b9 63 f3 00 00       	mov    $0xf363,%ecx
 8051b28:	e8 1b 2e 00 00       	call   8054948 <__afl_maybe_log>
 8051b2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051b31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051b35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051b39:	8b 3c 24             	mov    (%esp),%edi
 8051b3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051b40:	84 c0                	test   %al,%al
 8051b42:	0f 85 78 14 00 00    	jne    8052fc0 <find_field.isra.3+0x1f00>
 8051b48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051b4c:	89 3c 24             	mov    %edi,(%esp)
 8051b4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051b53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051b57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051b5b:	b9 76 3b 00 00       	mov    $0x3b76,%ecx
 8051b60:	e8 e3 2d 00 00       	call   8054948 <__afl_maybe_log>
 8051b65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051b69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051b6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051b71:	8b 3c 24             	mov    (%esp),%edi
 8051b74:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 221);
}
// MCC Label 222
if(!(count < skip_fields) && i < size ) {
 8051b78:	89 fa                	mov    %edi,%edx
 8051b7a:	84 d2                	test   %dl,%dl
 8051b7c:	0f 84 02 fd ff ff    	je     8051884 <find_field.isra.3+0x7c4>
 8051b82:	66 90                	xchg   %ax,%ax
 8051b84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051b88:	89 3c 24             	mov    %edi,(%esp)
 8051b8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051b8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051b93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051b97:	b9 ea bc 00 00       	mov    $0xbcea,%ecx
 8051b9c:	e8 a7 2d 00 00       	call   8054948 <__afl_maybe_log>
 8051ba1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ba5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051ba9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051bad:	8b 3c 24             	mov    (%esp),%edi
 8051bb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051bb4:	89 f1                	mov    %esi,%ecx
 8051bb6:	84 c9                	test   %cl,%cl
 8051bb8:	0f 84 c6 fc ff ff    	je     8051884 <find_field.isra.3+0x7c4>
 8051bbe:	66 90                	xchg   %ax,%ax
 8051bc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051bc4:	89 3c 24             	mov    %edi,(%esp)
 8051bc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051bcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051bcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051bd3:	b9 67 03 00 00       	mov    $0x367,%ecx
 8051bd8:	e8 6b 2d 00 00       	call   8054948 <__afl_maybe_log>
 8051bdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051be1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051be5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051be9:	8b 3c 24             	mov    (%esp),%edi
 8051bec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051bf0:	88 04 24             	mov    %al,(%esp)
	report_label_coverage("MCC", 222);
 8051bf3:	83 ec 08             	sub    $0x8,%esp
 8051bf6:	68 de 00 00 00       	push   $0xde
 8051bfb:	68 1b 5b 06 08       	push   $0x8065b1b
 8051c00:	e8 7b f4 ff ff       	call   8051080 <report_label_coverage>
 8051c05:	83 c4 10             	add    $0x10,%esp
 8051c08:	0f b6 04 24          	movzbl (%esp),%eax
}
// MCC Label 223
if(!(count < skip_fields) && !(i < size) ) {
 8051c0c:	84 c0                	test   %al,%al
 8051c0e:	0f 84 70 fc ff ff    	je     8051884 <find_field.isra.3+0x7c4>
 8051c14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051c18:	89 3c 24             	mov    %edi,(%esp)
 8051c1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051c1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051c23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051c27:	b9 5a bb 00 00       	mov    $0xbb5a,%ecx
 8051c2c:	e8 17 2d 00 00       	call   8054948 <__afl_maybe_log>
 8051c31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051c35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051c39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051c3d:	8b 3c 24             	mov    (%esp),%edi
 8051c40:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 223);
 8051c44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051c48:	89 3c 24             	mov    %edi,(%esp)
 8051c4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051c4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051c53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051c57:	b9 9e 99 00 00       	mov    $0x999e,%ecx
 8051c5c:	e8 e7 2c 00 00       	call   8054948 <__afl_maybe_log>
 8051c61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051c65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051c69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051c6d:	8b 3c 24             	mov    (%esp),%edi
 8051c70:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051c74:	83 ec 08             	sub    $0x8,%esp
 8051c77:	68 df 00 00 00       	push   $0xdf
 8051c7c:	68 1b 5b 06 08       	push   $0x8065b1b
 8051c81:	e8 fa f3 ff ff       	call   8051080 <report_label_coverage>
 8051c86:	83 c4 10             	add    $0x10,%esp
 8051c89:	e9 f6 fb ff ff       	jmp    8051884 <find_field.isra.3+0x7c4>
 8051c8e:	66 90                	xchg   %ax,%ax
if((count >= skip_fields) != (count < skip_fields))  {
	report_label_coverage("ROR", 201);
}
// ROR Label 202
if((i <= size) != (i < size))  {
	report_label_coverage("ROR", 202);
 8051c90:	68 ca 00 00 00       	push   $0xca
 8051c95:	68 17 5b 06 08       	push   $0x8065b17
 8051c9a:	e8 e1 f3 ff ff       	call   8051080 <report_label_coverage>
 8051c9f:	59                   	pop    %ecx
 8051ca0:	5f                   	pop    %edi
 8051ca1:	e9 77 f6 ff ff       	jmp    805131d <find_field.isra.3+0x25d>
 8051ca6:	8d 76 00             	lea    0x0(%esi),%esi
 8051ca9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
	report_label_coverage("ABS", 197);
}

// COR Label 198
if((count < skip_fields || i < size) != (count < skip_fields && i < size))  {
	report_label_coverage("COR", 198);
 8051cb0:	83 ec 08             	sub    $0x8,%esp
 8051cb3:	31 db                	xor    %ebx,%ebx
 8051cb5:	68 c6 00 00 00       	push   $0xc6
 8051cba:	68 13 5b 06 08       	push   $0x8065b13
 8051cbf:	e8 bc f3 ff ff       	call   8051080 <report_label_coverage>
 8051cc4:	83 c4 10             	add    $0x10,%esp
 8051cc7:	e9 71 f5 ff ff       	jmp    805123d <find_field.isra.3+0x17d>
 8051ccc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051cd0:	89 3c 24             	mov    %edi,(%esp)
 8051cd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051cd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051cdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051cdf:	b9 94 2a 00 00       	mov    $0x2a94,%ecx
 8051ce4:	e8 5f 2c 00 00       	call   8054948 <__afl_maybe_log>
 8051ce9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ced:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051cf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051cf5:	8b 3c 24             	mov    (%esp),%edi
 8051cf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051cfc:	68 c6 00 00 00       	push   $0xc6
 8051d01:	68 13 5b 06 08       	push   $0x8065b13
 8051d06:	e8 75 f3 ff ff       	call   8051080 <report_label_coverage>
 8051d0b:	59                   	pop    %ecx
 8051d0c:	5b                   	pop    %ebx
 8051d0d:	bb 01 00 00 00       	mov    $0x1,%ebx
 8051d12:	e9 a1 f4 ff ff       	jmp    80511b8 <find_field.isra.3+0xf8>
 8051d17:	90                   	nop
	report_label_coverage("ROR", 204);
}

// MCC Label 205
if(count < skip_fields && i < size ) {
	report_label_coverage("MCC", 205);
 8051d18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051d1c:	89 3c 24             	mov    %edi,(%esp)
 8051d1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051d23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051d27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051d2b:	b9 6b 9d 00 00       	mov    $0x9d6b,%ecx
 8051d30:	e8 13 2c 00 00       	call   8054948 <__afl_maybe_log>
 8051d35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051d39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051d3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051d41:	8b 3c 24             	mov    (%esp),%edi
 8051d44:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051d48:	68 cd 00 00 00       	push   $0xcd
 8051d4d:	68 1b 5b 06 08       	push   $0x8065b1b
 8051d52:	e8 29 f3 ff ff       	call   8051080 <report_label_coverage>
}
// MCC Label 206
if(count < skip_fields && !(i < size) ) {
 8051d57:	58                   	pop    %eax
 8051d58:	89 f8                	mov    %edi,%eax
 8051d5a:	84 c0                	test   %al,%al
 8051d5c:	5a                   	pop    %edx
 8051d5d:	0f 84 ad 00 00 00    	je     8051e10 <find_field.isra.3+0xd50>
 8051d63:	90                   	nop
 8051d64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051d68:	89 3c 24             	mov    %edi,(%esp)
 8051d6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051d6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051d73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051d77:	b9 fc 55 00 00       	mov    $0x55fc,%ecx
 8051d7c:	e8 c7 2b 00 00       	call   8054948 <__afl_maybe_log>
 8051d81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051d85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051d89:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051d8d:	8b 3c 24             	mov    (%esp),%edi
 8051d90:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 206);
 8051d94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051d98:	89 3c 24             	mov    %edi,(%esp)
 8051d9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051d9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051da3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051da7:	b9 14 e0 00 00       	mov    $0xe014,%ecx
 8051dac:	e8 97 2b 00 00       	call   8054948 <__afl_maybe_log>
 8051db1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051db5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051db9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051dbd:	8b 3c 24             	mov    (%esp),%edi
 8051dc0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051dc4:	68 ce 00 00 00       	push   $0xce
 8051dc9:	68 1b 5b 06 08       	push   $0x8065b1b
 8051dce:	e8 ad f2 ff ff       	call   8051080 <report_label_coverage>
}
// MCC Label 208
if(!(count < skip_fields) && !(i < size) ) {
	report_label_coverage("MCC", 208);
}
for (; count < skip_fields && i < size; count++)
 8051dd3:	84 db                	test   %bl,%bl
 8051dd5:	5f                   	pop    %edi
 8051dd6:	58                   	pop    %eax
 8051dd7:	0f 84 3f f6 ff ff    	je     805141c <find_field.isra.3+0x35c>
 8051ddd:	8d 76 00             	lea    0x0(%esi),%esi
 8051de0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051de4:	89 3c 24             	mov    %edi,(%esp)
 8051de7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051deb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051def:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051df3:	b9 8c 54 00 00       	mov    $0x548c,%ecx
 8051df8:	e8 4b 2b 00 00       	call   8054948 <__afl_maybe_log>
 8051dfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051e01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051e05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051e09:	8b 3c 24             	mov    (%esp),%edi
 8051e0c:	8d 64 24 10          	lea    0x10(%esp),%esp
if(skip_fields < 0)  {
	report_label_coverage("ABS", 197);
}

// COR Label 198
if((count < skip_fields || i < size) != (count < skip_fields && i < size))  {
 8051e10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051e14:	89 3c 24             	mov    %edi,(%esp)
 8051e17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051e1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051e1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051e23:	b9 f8 fd 00 00       	mov    $0xfdf8,%ecx
 8051e28:	e8 1b 2b 00 00       	call   8054948 <__afl_maybe_log>
 8051e2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051e31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051e35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051e39:	8b 3c 24             	mov    (%esp),%edi
 8051e3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051e40:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8051e47:	00 
 8051e48:	31 db                	xor    %ebx,%ebx
 8051e4a:	66 90                	xchg   %ax,%ax
 8051e4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051e50:	89 3c 24             	mov    %edi,(%esp)
 8051e53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051e57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051e5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051e5f:	b9 74 ad 00 00       	mov    $0xad74,%ecx
 8051e64:	e8 df 2a 00 00       	call   8054948 <__afl_maybe_log>
 8051e69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051e6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051e71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051e75:	8b 3c 24             	mov    (%esp),%edi
 8051e78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051e7c:	89 ef                	mov    %ebp,%edi
 8051e7e:	29 df                	sub    %ebx,%edi
 8051e80:	83 e7 07             	and    $0x7,%edi
 8051e83:	0f 84 32 07 00 00    	je     80525bb <find_field.isra.3+0x14fb>
 8051e89:	8d 76 00             	lea    0x0(%esi),%esi
 8051e8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051e90:	89 3c 24             	mov    %edi,(%esp)
 8051e93:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051e97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051e9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051e9f:	b9 c6 00 00 00       	mov    $0xc6,%ecx
 8051ea4:	e8 9f 2a 00 00       	call   8054948 <__afl_maybe_log>
 8051ea9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ead:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051eb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051eb5:	8b 3c 24             	mov    (%esp),%edi
 8051eb8:	8d 64 24 10          	lea    0x10(%esp),%esp
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8051ebc:	39 dd                	cmp    %ebx,%ebp
 8051ebe:	0f 86 60 07 00 00    	jbe    8052624 <find_field.isra.3+0x1564>
 8051ec4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051ec8:	89 3c 24             	mov    %edi,(%esp)
 8051ecb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051ecf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ed3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051ed7:	b9 60 b5 00 00       	mov    $0xb560,%ecx
 8051edc:	e8 67 2a 00 00       	call   8054948 <__afl_maybe_log>
 8051ee1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ee5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051ee9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051eed:	8b 3c 24             	mov    (%esp),%edi
 8051ef0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051ef4:	e8 47 76 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8051ef9:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
 8051efd:	8b 00                	mov    (%eax),%eax
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 8051eff:	f6 04 50 01          	testb  $0x1,(%eax,%edx,2)
 8051f03:	0f 84 1b 07 00 00    	je     8052624 <find_field.isra.3+0x1564>
 8051f09:	8d 76 00             	lea    0x0(%esi),%esi
 8051f0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051f10:	89 3c 24             	mov    %edi,(%esp)
 8051f13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051f17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051f1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051f1f:	b9 c3 09 00 00       	mov    $0x9c3,%ecx
 8051f24:	e8 1f 2a 00 00       	call   8054948 <__afl_maybe_log>
 8051f29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051f2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051f31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051f35:	8b 3c 24             	mov    (%esp),%edi
 8051f38:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8051f3c:	83 c3 01             	add    $0x1,%ebx
 8051f3f:	83 ff 01             	cmp    $0x1,%edi
 8051f42:	0f 84 73 06 00 00    	je     80525bb <find_field.isra.3+0x14fb>
 8051f48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051f4c:	89 3c 24             	mov    %edi,(%esp)
 8051f4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051f53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051f57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051f5b:	b9 2e 2b 00 00       	mov    $0x2b2e,%ecx
 8051f60:	e8 e3 29 00 00       	call   8054948 <__afl_maybe_log>
 8051f65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051f69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051f6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051f71:	8b 3c 24             	mov    (%esp),%edi
 8051f74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051f78:	83 ff 02             	cmp    $0x2,%edi
 8051f7b:	0f 84 5a 03 00 00    	je     80522db <find_field.isra.3+0x121b>
 8051f81:	8d 76 00             	lea    0x0(%esi),%esi
 8051f84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051f88:	89 3c 24             	mov    %edi,(%esp)
 8051f8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051f8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051f93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051f97:	b9 27 3c 00 00       	mov    $0x3c27,%ecx
 8051f9c:	e8 a7 29 00 00       	call   8054948 <__afl_maybe_log>
 8051fa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051fa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051fa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051fad:	8b 3c 24             	mov    (%esp),%edi
 8051fb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051fb4:	83 ff 03             	cmp    $0x3,%edi
 8051fb7:	0f 84 a2 02 00 00    	je     805225f <find_field.isra.3+0x119f>
 8051fbd:	8d 76 00             	lea    0x0(%esi),%esi
 8051fc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051fc4:	89 3c 24             	mov    %edi,(%esp)
 8051fc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051fcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051fcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051fd3:	b9 7e 29 00 00       	mov    $0x297e,%ecx
 8051fd8:	e8 6b 29 00 00       	call   8054948 <__afl_maybe_log>
 8051fdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051fe1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051fe5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051fe9:	8b 3c 24             	mov    (%esp),%edi
 8051fec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051ff0:	83 ff 04             	cmp    $0x4,%edi
 8051ff3:	0f 84 ea 01 00 00    	je     80521e3 <find_field.isra.3+0x1123>
 8051ff9:	8d 76 00             	lea    0x0(%esi),%esi
 8051ffc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052000:	89 3c 24             	mov    %edi,(%esp)
 8052003:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052007:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805200b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805200f:	b9 5b 2c 00 00       	mov    $0x2c5b,%ecx
 8052014:	e8 2f 29 00 00       	call   8054948 <__afl_maybe_log>
 8052019:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805201d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052021:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052025:	8b 3c 24             	mov    (%esp),%edi
 8052028:	8d 64 24 10          	lea    0x10(%esp),%esp
 805202c:	83 ff 05             	cmp    $0x5,%edi
 805202f:	0f 84 32 01 00 00    	je     8052167 <find_field.isra.3+0x10a7>
 8052035:	8d 76 00             	lea    0x0(%esi),%esi
 8052038:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805203c:	89 3c 24             	mov    %edi,(%esp)
 805203f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052043:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052047:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805204b:	b9 37 77 00 00       	mov    $0x7737,%ecx
 8052050:	e8 f3 28 00 00       	call   8054948 <__afl_maybe_log>
 8052055:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052059:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805205d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052061:	8b 3c 24             	mov    (%esp),%edi
 8052064:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052068:	83 ff 06             	cmp    $0x6,%edi
 805206b:	74 7e                	je     80520eb <find_field.isra.3+0x102b>
 805206d:	8d 76 00             	lea    0x0(%esi),%esi
 8052070:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052074:	89 3c 24             	mov    %edi,(%esp)
 8052077:	89 54 24 04          	mov    %edx,0x4(%esp)
 805207b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805207f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052083:	b9 4f 45 00 00       	mov    $0x454f,%ecx
 8052088:	e8 bb 28 00 00       	call   8054948 <__afl_maybe_log>
 805208d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052091:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052095:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052099:	8b 3c 24             	mov    (%esp),%edi
 805209c:	8d 64 24 10          	lea    0x10(%esp),%esp
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80520a0:	e8 9b 74 ff ff       	call   8049540 <__ctype_b_loc@plt>
 80520a5:	0f b6 0c 1e          	movzbl (%esi,%ebx,1),%ecx
 80520a9:	8b 38                	mov    (%eax),%edi
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 80520ab:	f6 04 4f 01          	testb  $0x1,(%edi,%ecx,2)
 80520af:	0f 84 6f 05 00 00    	je     8052624 <find_field.isra.3+0x1564>
 80520b5:	8d 76 00             	lea    0x0(%esi),%esi
 80520b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80520bc:	89 3c 24             	mov    %edi,(%esp)
 80520bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80520c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80520c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80520cb:	b9 61 34 00 00       	mov    $0x3461,%ecx
 80520d0:	e8 73 28 00 00       	call   8054948 <__afl_maybe_log>
 80520d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80520d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80520dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80520e1:	8b 3c 24             	mov    (%esp),%edi
 80520e4:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 80520e8:	83 c3 01             	add    $0x1,%ebx
 80520eb:	90                   	nop
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80520ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80520f0:	89 3c 24             	mov    %edi,(%esp)
 80520f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80520f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80520fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80520ff:	b9 0b c5 00 00       	mov    $0xc50b,%ecx
 8052104:	e8 3f 28 00 00       	call   8054948 <__afl_maybe_log>
 8052109:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805210d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052111:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052115:	8b 3c 24             	mov    (%esp),%edi
 8052118:	8d 64 24 10          	lea    0x10(%esp),%esp
 805211c:	e8 1f 74 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052121:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
 8052125:	8b 00                	mov    (%eax),%eax
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 8052127:	f6 04 50 01          	testb  $0x1,(%eax,%edx,2)
 805212b:	0f 84 f3 04 00 00    	je     8052624 <find_field.isra.3+0x1564>
 8052131:	8d 76 00             	lea    0x0(%esi),%esi
 8052134:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052138:	89 3c 24             	mov    %edi,(%esp)
 805213b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805213f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052143:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052147:	b9 0b 41 00 00       	mov    $0x410b,%ecx
 805214c:	e8 f7 27 00 00       	call   8054948 <__afl_maybe_log>
 8052151:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052155:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052159:	8b 54 24 04          	mov    0x4(%esp),%edx
 805215d:	8b 3c 24             	mov    (%esp),%edi
 8052160:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8052164:	83 c3 01             	add    $0x1,%ebx
 8052167:	90                   	nop
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052168:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805216c:	89 3c 24             	mov    %edi,(%esp)
 805216f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052173:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052177:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805217b:	b9 65 fb 00 00       	mov    $0xfb65,%ecx
 8052180:	e8 c3 27 00 00       	call   8054948 <__afl_maybe_log>
 8052185:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052189:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805218d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052191:	8b 3c 24             	mov    (%esp),%edi
 8052194:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052198:	e8 a3 73 ff ff       	call   8049540 <__ctype_b_loc@plt>
 805219d:	0f b6 0c 1e          	movzbl (%esi,%ebx,1),%ecx
 80521a1:	8b 38                	mov    (%eax),%edi
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 80521a3:	f6 04 4f 01          	testb  $0x1,(%edi,%ecx,2)
 80521a7:	0f 84 77 04 00 00    	je     8052624 <find_field.isra.3+0x1564>
 80521ad:	8d 76 00             	lea    0x0(%esi),%esi
 80521b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80521b4:	89 3c 24             	mov    %edi,(%esp)
 80521b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80521bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80521bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80521c3:	b9 ec fd 00 00       	mov    $0xfdec,%ecx
 80521c8:	e8 7b 27 00 00       	call   8054948 <__afl_maybe_log>
 80521cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80521d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80521d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80521d9:	8b 3c 24             	mov    (%esp),%edi
 80521dc:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 80521e0:	83 c3 01             	add    $0x1,%ebx
 80521e3:	90                   	nop
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80521e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80521e8:	89 3c 24             	mov    %edi,(%esp)
 80521eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80521ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80521f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80521f7:	b9 7f 10 00 00       	mov    $0x107f,%ecx
 80521fc:	e8 47 27 00 00       	call   8054948 <__afl_maybe_log>
 8052201:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052205:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052209:	8b 54 24 04          	mov    0x4(%esp),%edx
 805220d:	8b 3c 24             	mov    (%esp),%edi
 8052210:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052214:	e8 27 73 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052219:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
 805221d:	8b 00                	mov    (%eax),%eax
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 805221f:	f6 04 50 01          	testb  $0x1,(%eax,%edx,2)
 8052223:	0f 84 fb 03 00 00    	je     8052624 <find_field.isra.3+0x1564>
 8052229:	8d 76 00             	lea    0x0(%esi),%esi
 805222c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052230:	89 3c 24             	mov    %edi,(%esp)
 8052233:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052237:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805223b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805223f:	b9 5a bb 00 00       	mov    $0xbb5a,%ecx
 8052244:	e8 ff 26 00 00       	call   8054948 <__afl_maybe_log>
 8052249:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805224d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052251:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052255:	8b 3c 24             	mov    (%esp),%edi
 8052258:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 805225c:	83 c3 01             	add    $0x1,%ebx
 805225f:	90                   	nop
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052260:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052264:	89 3c 24             	mov    %edi,(%esp)
 8052267:	89 54 24 04          	mov    %edx,0x4(%esp)
 805226b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805226f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052273:	b9 ad 79 00 00       	mov    $0x79ad,%ecx
 8052278:	e8 cb 26 00 00       	call   8054948 <__afl_maybe_log>
 805227d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052281:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052285:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052289:	8b 3c 24             	mov    (%esp),%edi
 805228c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052290:	e8 ab 72 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052295:	0f b6 0c 1e          	movzbl (%esi,%ebx,1),%ecx
 8052299:	8b 38                	mov    (%eax),%edi
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 805229b:	f6 04 4f 01          	testb  $0x1,(%edi,%ecx,2)
 805229f:	0f 84 7f 03 00 00    	je     8052624 <find_field.isra.3+0x1564>
 80522a5:	8d 76 00             	lea    0x0(%esi),%esi
 80522a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80522ac:	89 3c 24             	mov    %edi,(%esp)
 80522af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80522b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80522b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80522bb:	b9 89 7f 00 00       	mov    $0x7f89,%ecx
 80522c0:	e8 83 26 00 00       	call   8054948 <__afl_maybe_log>
 80522c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80522c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80522cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80522d1:	8b 3c 24             	mov    (%esp),%edi
 80522d4:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 80522d8:	83 c3 01             	add    $0x1,%ebx
 80522db:	90                   	nop
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80522dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80522e0:	89 3c 24             	mov    %edi,(%esp)
 80522e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80522e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80522eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80522ef:	b9 7a a9 00 00       	mov    $0xa97a,%ecx
 80522f4:	e8 4f 26 00 00       	call   8054948 <__afl_maybe_log>
 80522f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80522fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052301:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052305:	8b 3c 24             	mov    (%esp),%edi
 8052308:	8d 64 24 10          	lea    0x10(%esp),%esp
 805230c:	e8 2f 72 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052311:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
 8052315:	8b 00                	mov    (%eax),%eax
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 8052317:	f6 04 50 01          	testb  $0x1,(%eax,%edx,2)
 805231b:	0f 84 03 03 00 00    	je     8052624 <find_field.isra.3+0x1564>
 8052321:	8d 76 00             	lea    0x0(%esi),%esi
 8052324:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052328:	89 3c 24             	mov    %edi,(%esp)
 805232b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805232f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052333:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052337:	b9 cc 78 00 00       	mov    $0x78cc,%ecx
 805233c:	e8 07 26 00 00       	call   8054948 <__afl_maybe_log>
 8052341:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052345:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052349:	8b 54 24 04          	mov    0x4(%esp),%edx
 805234d:	8b 3c 24             	mov    (%esp),%edi
 8052350:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8052354:	83 c3 01             	add    $0x1,%ebx
 8052357:	e9 5f 02 00 00       	jmp    80525bb <find_field.isra.3+0x14fb>
 805235c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052360:	e8 db 71 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052365:	0f b6 0c 1e          	movzbl (%esi,%ebx,1),%ecx
 8052369:	8b 38                	mov    (%eax),%edi
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 805236b:	f6 04 4f 01          	testb  $0x1,(%edi,%ecx,2)
 805236f:	0f 84 af 02 00 00    	je     8052624 <find_field.isra.3+0x1564>
 8052375:	8d 76 00             	lea    0x0(%esi),%esi
 8052378:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805237c:	89 3c 24             	mov    %edi,(%esp)
 805237f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052383:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052387:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805238b:	b9 4a a2 00 00       	mov    $0xa24a,%ecx
 8052390:	e8 b3 25 00 00       	call   8054948 <__afl_maybe_log>
 8052395:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052399:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805239d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80523a1:	8b 3c 24             	mov    (%esp),%edi
 80523a4:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 80523a8:	8d 7b 01             	lea    0x1(%ebx),%edi
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80523ab:	e8 90 71 ff ff       	call   8049540 <__ctype_b_loc@plt>
 80523b0:	0f b6 14 3e          	movzbl (%esi,%edi,1),%edx
 80523b4:	8b 00                	mov    (%eax),%eax
	report_label_coverage("ABS", 224);
}
if (temp_1)
                break;
        }
        i++;
 80523b6:	89 fb                	mov    %edi,%ebx
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 80523b8:	f6 04 50 01          	testb  $0x1,(%eax,%edx,2)
 80523bc:	0f 84 62 02 00 00    	je     8052624 <find_field.isra.3+0x1564>
 80523c2:	66 90                	xchg   %ax,%ax
 80523c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80523c8:	89 3c 24             	mov    %edi,(%esp)
 80523cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80523cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80523d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80523d7:	b9 f1 91 00 00       	mov    $0x91f1,%ecx
 80523dc:	e8 67 25 00 00       	call   8054948 <__afl_maybe_log>
 80523e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80523e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80523e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80523ed:	8b 3c 24             	mov    (%esp),%edi
 80523f0:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 80523f4:	83 c3 01             	add    $0x1,%ebx
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80523f7:	e8 44 71 ff ff       	call   8049540 <__ctype_b_loc@plt>
 80523fc:	0f b6 0c 1e          	movzbl (%esi,%ebx,1),%ecx
 8052400:	8b 10                	mov    (%eax),%edx
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 8052402:	f6 04 4a 01          	testb  $0x1,(%edx,%ecx,2)
 8052406:	0f 84 18 02 00 00    	je     8052624 <find_field.isra.3+0x1564>
 805240c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052410:	89 3c 24             	mov    %edi,(%esp)
 8052413:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052417:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805241b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805241f:	b9 5b 54 00 00       	mov    $0x545b,%ecx
 8052424:	e8 1f 25 00 00       	call   8054948 <__afl_maybe_log>
 8052429:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805242d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052431:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052435:	8b 3c 24             	mov    (%esp),%edi
 8052438:	8d 64 24 10          	lea    0x10(%esp),%esp
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 805243c:	e8 ff 70 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052441:	0f b6 4c 3e 02       	movzbl 0x2(%esi,%edi,1),%ecx
 8052446:	8b 00                	mov    (%eax),%eax
	report_label_coverage("ABS", 224);
}
if (temp_1)
                break;
        }
        i++;
 8052448:	8d 5f 02             	lea    0x2(%edi),%ebx
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 805244b:	f6 04 48 01          	testb  $0x1,(%eax,%ecx,2)
 805244f:	0f 84 cf 01 00 00    	je     8052624 <find_field.isra.3+0x1564>
 8052455:	8d 76 00             	lea    0x0(%esi),%esi
 8052458:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805245c:	89 3c 24             	mov    %edi,(%esp)
 805245f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052463:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052467:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805246b:	b9 b5 aa 00 00       	mov    $0xaab5,%ecx
 8052470:	e8 d3 24 00 00       	call   8054948 <__afl_maybe_log>
 8052475:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052479:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805247d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052481:	8b 3c 24             	mov    (%esp),%edi
 8052484:	8d 64 24 10          	lea    0x10(%esp),%esp
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052488:	e8 b3 70 ff ff       	call   8049540 <__ctype_b_loc@plt>
 805248d:	0f b6 54 3e 03       	movzbl 0x3(%esi,%edi,1),%edx
 8052492:	8b 08                	mov    (%eax),%ecx
	report_label_coverage("ABS", 224);
}
if (temp_1)
                break;
        }
        i++;
 8052494:	8d 5f 03             	lea    0x3(%edi),%ebx
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 8052497:	f6 04 51 01          	testb  $0x1,(%ecx,%edx,2)
 805249b:	0f 84 83 01 00 00    	je     8052624 <find_field.isra.3+0x1564>
 80524a1:	8d 76 00             	lea    0x0(%esi),%esi
 80524a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80524a8:	89 3c 24             	mov    %edi,(%esp)
 80524ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80524af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80524b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80524b7:	b9 7d 7e 00 00       	mov    $0x7e7d,%ecx
 80524bc:	e8 87 24 00 00       	call   8054948 <__afl_maybe_log>
 80524c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80524c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80524c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80524cd:	8b 3c 24             	mov    (%esp),%edi
 80524d0:	8d 64 24 10          	lea    0x10(%esp),%esp
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80524d4:	e8 67 70 ff ff       	call   8049540 <__ctype_b_loc@plt>
 80524d9:	0f b6 54 3e 04       	movzbl 0x4(%esi,%edi,1),%edx
 80524de:	8b 00                	mov    (%eax),%eax
	report_label_coverage("ABS", 224);
}
if (temp_1)
                break;
        }
        i++;
 80524e0:	8d 5f 04             	lea    0x4(%edi),%ebx
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 80524e3:	f6 04 50 01          	testb  $0x1,(%eax,%edx,2)
 80524e7:	0f 84 37 01 00 00    	je     8052624 <find_field.isra.3+0x1564>
 80524ed:	8d 76 00             	lea    0x0(%esi),%esi
 80524f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80524f4:	89 3c 24             	mov    %edi,(%esp)
 80524f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80524fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80524ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052503:	b9 32 bb 00 00       	mov    $0xbb32,%ecx
 8052508:	e8 3b 24 00 00       	call   8054948 <__afl_maybe_log>
 805250d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052511:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052515:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052519:	8b 3c 24             	mov    (%esp),%edi
 805251c:	8d 64 24 10          	lea    0x10(%esp),%esp
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052520:	e8 1b 70 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052525:	0f b6 4c 3e 05       	movzbl 0x5(%esi,%edi,1),%ecx
 805252a:	8b 10                	mov    (%eax),%edx
	report_label_coverage("ABS", 224);
}
if (temp_1)
                break;
        }
        i++;
 805252c:	8d 5f 05             	lea    0x5(%edi),%ebx
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 805252f:	f6 04 4a 01          	testb  $0x1,(%edx,%ecx,2)
 8052533:	0f 84 eb 00 00 00    	je     8052624 <find_field.isra.3+0x1564>
 8052539:	8d 76 00             	lea    0x0(%esi),%esi
 805253c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052540:	89 3c 24             	mov    %edi,(%esp)
 8052543:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052547:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805254b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805254f:	b9 7a ce 00 00       	mov    $0xce7a,%ecx
 8052554:	e8 ef 23 00 00       	call   8054948 <__afl_maybe_log>
 8052559:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805255d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052561:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052565:	8b 3c 24             	mov    (%esp),%edi
 8052568:	8d 64 24 10          	lea    0x10(%esp),%esp
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 805256c:	e8 cf 6f ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052571:	0f b6 4c 3e 06       	movzbl 0x6(%esi,%edi,1),%ecx
 8052576:	8b 00                	mov    (%eax),%eax
	report_label_coverage("ABS", 224);
}
if (temp_1)
                break;
        }
        i++;
 8052578:	8d 5f 06             	lea    0x6(%edi),%ebx
            
// ABS Label 224
if(temp_1 < 0)  {
	report_label_coverage("ABS", 224);
}
if (temp_1)
 805257b:	f6 04 48 01          	testb  $0x1,(%eax,%ecx,2)
 805257f:	0f 84 9f 00 00 00    	je     8052624 <find_field.isra.3+0x1564>
 8052585:	8d 76 00             	lea    0x0(%esi),%esi
 8052588:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805258c:	89 3c 24             	mov    %edi,(%esp)
 805258f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052593:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052597:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805259b:	b9 3f 04 00 00       	mov    $0x43f,%ecx
 80525a0:	e8 a3 23 00 00       	call   8054948 <__afl_maybe_log>
 80525a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80525a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80525ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80525b1:	8b 3c 24             	mov    (%esp),%edi
 80525b4:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 80525b8:	8d 5f 07             	lea    0x7(%edi),%ebx
 80525bb:	90                   	nop
for (; count < skip_fields && i < size; count++)
    {
      while (1)
    {
        {
            int temp_1 = !(i < size && ((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80525bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80525c0:	89 3c 24             	mov    %edi,(%esp)
 80525c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80525c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80525cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80525cf:	b9 3e 5e 00 00       	mov    $0x5e3e,%ecx
 80525d4:	e8 6f 23 00 00       	call   8054948 <__afl_maybe_log>
 80525d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80525dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80525e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80525e5:	8b 3c 24             	mov    (%esp),%edi
 80525e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80525ec:	39 dd                	cmp    %ebx,%ebp
 80525ee:	0f 87 6c fd ff ff    	ja     8052360 <find_field.isra.3+0x12a0>
 80525f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80525f8:	89 3c 24             	mov    %edi,(%esp)
 80525fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80525ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052603:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052607:	b9 91 74 00 00       	mov    $0x7491,%ecx
 805260c:	e8 37 23 00 00       	call   8054948 <__afl_maybe_log>
 8052611:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052615:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052619:	8b 54 24 04          	mov    0x4(%esp),%edx
 805261d:	8b 3c 24             	mov    (%esp),%edi
 8052620:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052624:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052628:	89 3c 24             	mov    %edi,(%esp)
 805262b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805262f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052633:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052637:	b9 f7 b8 00 00       	mov    $0xb8f7,%ecx
 805263c:	e8 07 23 00 00       	call   8054948 <__afl_maybe_log>
 8052641:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052645:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052649:	8b 54 24 04          	mov    0x4(%esp),%edx
 805264d:	8b 3c 24             	mov    (%esp),%edi
 8052650:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052654:	89 ef                	mov    %ebp,%edi
 8052656:	29 df                	sub    %ebx,%edi
 8052658:	83 e7 07             	and    $0x7,%edi
 805265b:	0f 84 32 07 00 00    	je     8052d93 <find_field.isra.3+0x1cd3>
 8052661:	8d 76 00             	lea    0x0(%esi),%esi
 8052664:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052668:	89 3c 24             	mov    %edi,(%esp)
 805266b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805266f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052673:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052677:	b9 4b 83 00 00       	mov    $0x834b,%ecx
 805267c:	e8 c7 22 00 00       	call   8054948 <__afl_maybe_log>
 8052681:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052685:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052689:	8b 54 24 04          	mov    0x4(%esp),%edx
 805268d:	8b 3c 24             	mov    (%esp),%edi
 8052690:	8d 64 24 10          	lea    0x10(%esp),%esp
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052694:	39 dd                	cmp    %ebx,%ebp
 8052696:	0f 86 60 07 00 00    	jbe    8052dfc <find_field.isra.3+0x1d3c>
 805269c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80526a0:	89 3c 24             	mov    %edi,(%esp)
 80526a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80526a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80526ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80526af:	b9 60 05 00 00       	mov    $0x560,%ecx
 80526b4:	e8 8f 22 00 00       	call   8054948 <__afl_maybe_log>
 80526b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80526bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80526c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80526c5:	8b 3c 24             	mov    (%esp),%edi
 80526c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80526cc:	e8 6f 6e ff ff       	call   8049540 <__ctype_b_loc@plt>
 80526d1:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
 80526d5:	8b 08                	mov    (%eax),%ecx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 80526d7:	f6 04 51 01          	testb  $0x1,(%ecx,%edx,2)
 80526db:	0f 85 b0 07 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 80526e1:	8d 76 00             	lea    0x0(%esi),%esi
 80526e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80526e8:	89 3c 24             	mov    %edi,(%esp)
 80526eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80526ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80526f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80526f7:	b9 2c d3 00 00       	mov    $0xd32c,%ecx
 80526fc:	e8 47 22 00 00       	call   8054948 <__afl_maybe_log>
 8052701:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052705:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052709:	8b 54 24 04          	mov    0x4(%esp),%edx
 805270d:	8b 3c 24             	mov    (%esp),%edi
 8052710:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8052714:	83 c3 01             	add    $0x1,%ebx
 8052717:	83 ff 01             	cmp    $0x1,%edi
 805271a:	0f 84 73 06 00 00    	je     8052d93 <find_field.isra.3+0x1cd3>
 8052720:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052724:	89 3c 24             	mov    %edi,(%esp)
 8052727:	89 54 24 04          	mov    %edx,0x4(%esp)
 805272b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805272f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052733:	b9 88 7f 00 00       	mov    $0x7f88,%ecx
 8052738:	e8 0b 22 00 00       	call   8054948 <__afl_maybe_log>
 805273d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052741:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052745:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052749:	8b 3c 24             	mov    (%esp),%edi
 805274c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052750:	83 ff 02             	cmp    $0x2,%edi
 8052753:	0f 84 5a 03 00 00    	je     8052ab3 <find_field.isra.3+0x19f3>
 8052759:	8d 76 00             	lea    0x0(%esi),%esi
 805275c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052760:	89 3c 24             	mov    %edi,(%esp)
 8052763:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052767:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805276b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805276f:	b9 ae 15 00 00       	mov    $0x15ae,%ecx
 8052774:	e8 cf 21 00 00       	call   8054948 <__afl_maybe_log>
 8052779:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805277d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052781:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052785:	8b 3c 24             	mov    (%esp),%edi
 8052788:	8d 64 24 10          	lea    0x10(%esp),%esp
 805278c:	83 ff 03             	cmp    $0x3,%edi
 805278f:	0f 84 a2 02 00 00    	je     8052a37 <find_field.isra.3+0x1977>
 8052795:	8d 76 00             	lea    0x0(%esi),%esi
 8052798:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805279c:	89 3c 24             	mov    %edi,(%esp)
 805279f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80527a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80527a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80527ab:	b9 f2 95 00 00       	mov    $0x95f2,%ecx
 80527b0:	e8 93 21 00 00       	call   8054948 <__afl_maybe_log>
 80527b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80527b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80527bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80527c1:	8b 3c 24             	mov    (%esp),%edi
 80527c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80527c8:	83 ff 04             	cmp    $0x4,%edi
 80527cb:	0f 84 ea 01 00 00    	je     80529bb <find_field.isra.3+0x18fb>
 80527d1:	8d 76 00             	lea    0x0(%esi),%esi
 80527d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80527d8:	89 3c 24             	mov    %edi,(%esp)
 80527db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80527df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80527e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80527e7:	b9 39 87 00 00       	mov    $0x8739,%ecx
 80527ec:	e8 57 21 00 00       	call   8054948 <__afl_maybe_log>
 80527f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80527f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80527f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80527fd:	8b 3c 24             	mov    (%esp),%edi
 8052800:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052804:	83 ff 05             	cmp    $0x5,%edi
 8052807:	0f 84 32 01 00 00    	je     805293f <find_field.isra.3+0x187f>
 805280d:	8d 76 00             	lea    0x0(%esi),%esi
 8052810:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052814:	89 3c 24             	mov    %edi,(%esp)
 8052817:	89 54 24 04          	mov    %edx,0x4(%esp)
 805281b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805281f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052823:	b9 bb f1 00 00       	mov    $0xf1bb,%ecx
 8052828:	e8 1b 21 00 00       	call   8054948 <__afl_maybe_log>
 805282d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052831:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052835:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052839:	8b 3c 24             	mov    (%esp),%edi
 805283c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052840:	83 ff 06             	cmp    $0x6,%edi
 8052843:	74 7e                	je     80528c3 <find_field.isra.3+0x1803>
 8052845:	8d 76 00             	lea    0x0(%esi),%esi
 8052848:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805284c:	89 3c 24             	mov    %edi,(%esp)
 805284f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052853:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052857:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805285b:	b9 74 e0 00 00       	mov    $0xe074,%ecx
 8052860:	e8 e3 20 00 00       	call   8054948 <__afl_maybe_log>
 8052865:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052869:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805286d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052871:	8b 3c 24             	mov    (%esp),%edi
 8052874:	8d 64 24 10          	lea    0x10(%esp),%esp
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052878:	e8 c3 6c ff ff       	call   8049540 <__ctype_b_loc@plt>
 805287d:	0f b6 3c 1e          	movzbl (%esi,%ebx,1),%edi
 8052881:	8b 00                	mov    (%eax),%eax
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052883:	f6 04 78 01          	testb  $0x1,(%eax,%edi,2)
 8052887:	0f 85 04 06 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 805288d:	8d 76 00             	lea    0x0(%esi),%esi
 8052890:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052894:	89 3c 24             	mov    %edi,(%esp)
 8052897:	89 54 24 04          	mov    %edx,0x4(%esp)
 805289b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805289f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80528a3:	b9 5e bf 00 00       	mov    $0xbf5e,%ecx
 80528a8:	e8 9b 20 00 00       	call   8054948 <__afl_maybe_log>
 80528ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80528b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80528b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80528b9:	8b 3c 24             	mov    (%esp),%edi
 80528bc:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 80528c0:	83 c3 01             	add    $0x1,%ebx
 80528c3:	90                   	nop
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80528c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80528c8:	89 3c 24             	mov    %edi,(%esp)
 80528cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80528cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80528d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80528d7:	b9 13 79 00 00       	mov    $0x7913,%ecx
 80528dc:	e8 67 20 00 00       	call   8054948 <__afl_maybe_log>
 80528e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80528e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80528e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80528ed:	8b 3c 24             	mov    (%esp),%edi
 80528f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80528f4:	e8 47 6c ff ff       	call   8049540 <__ctype_b_loc@plt>
 80528f9:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
 80528fd:	8b 08                	mov    (%eax),%ecx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 80528ff:	f6 04 51 01          	testb  $0x1,(%ecx,%edx,2)
 8052903:	0f 85 88 05 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052909:	8d 76 00             	lea    0x0(%esi),%esi
 805290c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052910:	89 3c 24             	mov    %edi,(%esp)
 8052913:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805291b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805291f:	b9 f8 fb 00 00       	mov    $0xfbf8,%ecx
 8052924:	e8 1f 20 00 00       	call   8054948 <__afl_maybe_log>
 8052929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805292d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052931:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052935:	8b 3c 24             	mov    (%esp),%edi
 8052938:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 805293c:	83 c3 01             	add    $0x1,%ebx
 805293f:	90                   	nop
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052940:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052944:	89 3c 24             	mov    %edi,(%esp)
 8052947:	89 54 24 04          	mov    %edx,0x4(%esp)
 805294b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805294f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052953:	b9 ea f1 00 00       	mov    $0xf1ea,%ecx
 8052958:	e8 eb 1f 00 00       	call   8054948 <__afl_maybe_log>
 805295d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052961:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052965:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052969:	8b 3c 24             	mov    (%esp),%edi
 805296c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052970:	e8 cb 6b ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052975:	0f b6 3c 1e          	movzbl (%esi,%ebx,1),%edi
 8052979:	8b 00                	mov    (%eax),%eax
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 805297b:	f6 04 78 01          	testb  $0x1,(%eax,%edi,2)
 805297f:	0f 85 0c 05 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052985:	8d 76 00             	lea    0x0(%esi),%esi
 8052988:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805298c:	89 3c 24             	mov    %edi,(%esp)
 805298f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052993:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052997:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805299b:	b9 ef 7a 00 00       	mov    $0x7aef,%ecx
 80529a0:	e8 a3 1f 00 00       	call   8054948 <__afl_maybe_log>
 80529a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80529a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80529ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80529b1:	8b 3c 24             	mov    (%esp),%edi
 80529b4:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 80529b8:	83 c3 01             	add    $0x1,%ebx
 80529bb:	90                   	nop
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 80529bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80529c0:	89 3c 24             	mov    %edi,(%esp)
 80529c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80529c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80529cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80529cf:	b9 d4 63 00 00       	mov    $0x63d4,%ecx
 80529d4:	e8 6f 1f 00 00       	call   8054948 <__afl_maybe_log>
 80529d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80529dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80529e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80529e5:	8b 3c 24             	mov    (%esp),%edi
 80529e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80529ec:	e8 4f 6b ff ff       	call   8049540 <__ctype_b_loc@plt>
 80529f1:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
 80529f5:	8b 08                	mov    (%eax),%ecx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 80529f7:	f6 04 51 01          	testb  $0x1,(%ecx,%edx,2)
 80529fb:	0f 85 90 04 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052a01:	8d 76 00             	lea    0x0(%esi),%esi
 8052a04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052a08:	89 3c 24             	mov    %edi,(%esp)
 8052a0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052a0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052a13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052a17:	b9 52 ec 00 00       	mov    $0xec52,%ecx
 8052a1c:	e8 27 1f 00 00       	call   8054948 <__afl_maybe_log>
 8052a21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052a25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052a29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052a2d:	8b 3c 24             	mov    (%esp),%edi
 8052a30:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8052a34:	83 c3 01             	add    $0x1,%ebx
 8052a37:	90                   	nop
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052a38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052a3c:	89 3c 24             	mov    %edi,(%esp)
 8052a3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052a43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052a47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052a4b:	b9 99 5d 00 00       	mov    $0x5d99,%ecx
 8052a50:	e8 f3 1e 00 00       	call   8054948 <__afl_maybe_log>
 8052a55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052a59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052a5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052a61:	8b 3c 24             	mov    (%esp),%edi
 8052a64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052a68:	e8 d3 6a ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052a6d:	0f b6 3c 1e          	movzbl (%esi,%ebx,1),%edi
 8052a71:	8b 00                	mov    (%eax),%eax
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052a73:	f6 04 78 01          	testb  $0x1,(%eax,%edi,2)
 8052a77:	0f 85 14 04 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052a7d:	8d 76 00             	lea    0x0(%esi),%esi
 8052a80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052a84:	89 3c 24             	mov    %edi,(%esp)
 8052a87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052a8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052a8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052a93:	b9 db ed 00 00       	mov    $0xeddb,%ecx
 8052a98:	e8 ab 1e 00 00       	call   8054948 <__afl_maybe_log>
 8052a9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052aa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052aa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052aa9:	8b 3c 24             	mov    (%esp),%edi
 8052aac:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8052ab0:	83 c3 01             	add    $0x1,%ebx
 8052ab3:	90                   	nop
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052ab4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052ab8:	89 3c 24             	mov    %edi,(%esp)
 8052abb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052abf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052ac3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ac7:	b9 ca a1 00 00       	mov    $0xa1ca,%ecx
 8052acc:	e8 77 1e 00 00       	call   8054948 <__afl_maybe_log>
 8052ad1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052ad5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052ad9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052add:	8b 3c 24             	mov    (%esp),%edi
 8052ae0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052ae4:	e8 57 6a ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052ae9:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
 8052aed:	8b 08                	mov    (%eax),%ecx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052aef:	f6 04 51 01          	testb  $0x1,(%ecx,%edx,2)
 8052af3:	0f 85 98 03 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052af9:	8d 76 00             	lea    0x0(%esi),%esi
 8052afc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052b00:	89 3c 24             	mov    %edi,(%esp)
 8052b03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052b07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052b0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052b0f:	b9 94 e9 00 00       	mov    $0xe994,%ecx
 8052b14:	e8 2f 1e 00 00       	call   8054948 <__afl_maybe_log>
 8052b19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052b1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052b21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052b25:	8b 3c 24             	mov    (%esp),%edi
 8052b28:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8052b2c:	83 c3 01             	add    $0x1,%ebx
 8052b2f:	e9 5f 02 00 00       	jmp    8052d93 <find_field.isra.3+0x1cd3>
 8052b34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052b38:	e8 03 6a ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052b3d:	0f b6 3c 1e          	movzbl (%esi,%ebx,1),%edi
 8052b41:	8b 00                	mov    (%eax),%eax
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052b43:	f6 04 78 01          	testb  $0x1,(%eax,%edi,2)
 8052b47:	0f 85 44 03 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052b4d:	8d 76 00             	lea    0x0(%esi),%esi
 8052b50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052b54:	89 3c 24             	mov    %edi,(%esp)
 8052b57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052b5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052b5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052b63:	b9 86 7f 00 00       	mov    $0x7f86,%ecx
 8052b68:	e8 db 1d 00 00       	call   8054948 <__afl_maybe_log>
 8052b6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052b71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052b75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052b79:	8b 3c 24             	mov    (%esp),%edi
 8052b7c:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8052b80:	8d 7b 01             	lea    0x1(%ebx),%edi
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052b83:	e8 b8 69 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052b88:	0f b6 14 3e          	movzbl (%esi,%edi,1),%edx
 8052b8c:	8b 08                	mov    (%eax),%ecx
	report_label_coverage("ABS", 225);
}
if (temp_1)
                break;
        }
        i++;
 8052b8e:	89 fb                	mov    %edi,%ebx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052b90:	f6 04 51 01          	testb  $0x1,(%ecx,%edx,2)
 8052b94:	0f 85 f7 02 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052b9a:	66 90                	xchg   %ax,%ax
 8052b9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052ba0:	89 3c 24             	mov    %edi,(%esp)
 8052ba3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052ba7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052bab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052baf:	b9 6f 16 00 00       	mov    $0x166f,%ecx
 8052bb4:	e8 8f 1d 00 00       	call   8054948 <__afl_maybe_log>
 8052bb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052bbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052bc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052bc5:	8b 3c 24             	mov    (%esp),%edi
 8052bc8:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8052bcc:	83 c3 01             	add    $0x1,%ebx
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052bcf:	e8 6c 69 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052bd4:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
 8052bd8:	8b 00                	mov    (%eax),%eax
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052bda:	f6 04 50 01          	testb  $0x1,(%eax,%edx,2)
 8052bde:	0f 85 ad 02 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052be4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052be8:	89 3c 24             	mov    %edi,(%esp)
 8052beb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052bef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052bf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052bf7:	b9 d3 50 00 00       	mov    $0x50d3,%ecx
 8052bfc:	e8 47 1d 00 00       	call   8054948 <__afl_maybe_log>
 8052c01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052c05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052c09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052c0d:	8b 3c 24             	mov    (%esp),%edi
 8052c10:	8d 64 24 10          	lea    0x10(%esp),%esp
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052c14:	e8 27 69 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052c19:	0f b6 4c 3e 02       	movzbl 0x2(%esi,%edi,1),%ecx
 8052c1e:	8b 10                	mov    (%eax),%edx
	report_label_coverage("ABS", 225);
}
if (temp_1)
                break;
        }
        i++;
 8052c20:	8d 5f 02             	lea    0x2(%edi),%ebx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052c23:	f6 04 4a 01          	testb  $0x1,(%edx,%ecx,2)
 8052c27:	0f 85 64 02 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052c2d:	8d 76 00             	lea    0x0(%esi),%esi
 8052c30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052c34:	89 3c 24             	mov    %edi,(%esp)
 8052c37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052c3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052c3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052c43:	b9 48 4a 00 00       	mov    $0x4a48,%ecx
 8052c48:	e8 fb 1c 00 00       	call   8054948 <__afl_maybe_log>
 8052c4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052c51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052c55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052c59:	8b 3c 24             	mov    (%esp),%edi
 8052c5c:	8d 64 24 10          	lea    0x10(%esp),%esp
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052c60:	e8 db 68 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052c65:	0f b6 4c 3e 03       	movzbl 0x3(%esi,%edi,1),%ecx
 8052c6a:	8b 00                	mov    (%eax),%eax
	report_label_coverage("ABS", 225);
}
if (temp_1)
                break;
        }
        i++;
 8052c6c:	8d 5f 03             	lea    0x3(%edi),%ebx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052c6f:	f6 04 48 01          	testb  $0x1,(%eax,%ecx,2)
 8052c73:	0f 85 18 02 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052c79:	8d 76 00             	lea    0x0(%esi),%esi
 8052c7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052c80:	89 3c 24             	mov    %edi,(%esp)
 8052c83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052c87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052c8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052c8f:	b9 bb 07 00 00       	mov    $0x7bb,%ecx
 8052c94:	e8 af 1c 00 00       	call   8054948 <__afl_maybe_log>
 8052c99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052c9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052ca1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052ca5:	8b 3c 24             	mov    (%esp),%edi
 8052ca8:	8d 64 24 10          	lea    0x10(%esp),%esp
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052cac:	e8 8f 68 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052cb1:	0f b6 54 3e 04       	movzbl 0x4(%esi,%edi,1),%edx
 8052cb6:	8b 08                	mov    (%eax),%ecx
	report_label_coverage("ABS", 225);
}
if (temp_1)
                break;
        }
        i++;
 8052cb8:	8d 5f 04             	lea    0x4(%edi),%ebx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052cbb:	f6 04 51 01          	testb  $0x1,(%ecx,%edx,2)
 8052cbf:	0f 85 cc 01 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052cc5:	8d 76 00             	lea    0x0(%esi),%esi
 8052cc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052ccc:	89 3c 24             	mov    %edi,(%esp)
 8052ccf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052cd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052cd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052cdb:	b9 1f 3a 00 00       	mov    $0x3a1f,%ecx
 8052ce0:	e8 63 1c 00 00       	call   8054948 <__afl_maybe_log>
 8052ce5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052ce9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052ced:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052cf1:	8b 3c 24             	mov    (%esp),%edi
 8052cf4:	8d 64 24 10          	lea    0x10(%esp),%esp
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052cf8:	e8 43 68 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052cfd:	0f b6 54 3e 05       	movzbl 0x5(%esi,%edi,1),%edx
 8052d02:	8b 00                	mov    (%eax),%eax
	report_label_coverage("ABS", 225);
}
if (temp_1)
                break;
        }
        i++;
 8052d04:	8d 5f 05             	lea    0x5(%edi),%ebx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052d07:	f6 04 50 01          	testb  $0x1,(%eax,%edx,2)
 8052d0b:	0f 85 80 01 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052d11:	8d 76 00             	lea    0x0(%esi),%esi
 8052d14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052d18:	89 3c 24             	mov    %edi,(%esp)
 8052d1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052d1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052d23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052d27:	b9 e6 e1 00 00       	mov    $0xe1e6,%ecx
 8052d2c:	e8 17 1c 00 00       	call   8054948 <__afl_maybe_log>
 8052d31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052d35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052d39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052d3d:	8b 3c 24             	mov    (%esp),%edi
 8052d40:	8d 64 24 10          	lea    0x10(%esp),%esp
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052d44:	e8 f7 67 ff ff       	call   8049540 <__ctype_b_loc@plt>
 8052d49:	0f b6 4c 3e 06       	movzbl 0x6(%esi,%edi,1),%ecx
 8052d4e:	8b 10                	mov    (%eax),%edx
	report_label_coverage("ABS", 225);
}
if (temp_1)
                break;
        }
        i++;
 8052d50:	8d 5f 06             	lea    0x6(%edi),%ebx
            
// ABS Label 225
if(temp_1 < 0)  {
	report_label_coverage("ABS", 225);
}
if (temp_1)
 8052d53:	f6 04 4a 01          	testb  $0x1,(%edx,%ecx,2)
 8052d57:	0f 85 34 01 00 00    	jne    8052e91 <find_field.isra.3+0x1dd1>
 8052d5d:	8d 76 00             	lea    0x0(%esi),%esi
 8052d60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052d64:	89 3c 24             	mov    %edi,(%esp)
 8052d67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052d6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052d6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052d73:	b9 7e 87 00 00       	mov    $0x877e,%ecx
 8052d78:	e8 cb 1b 00 00       	call   8054948 <__afl_maybe_log>
 8052d7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052d81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052d85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052d89:	8b 3c 24             	mov    (%esp),%edi
 8052d8c:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        i++;
 8052d90:	8d 5f 07             	lea    0x7(%edi),%ebx
 8052d93:	90                   	nop
    };
;
      while (1)
    {
        {
            int temp_1 = !(i < size && !((*__ctype_b_loc())[(int)((to_uchar(lp[i])))] & (unsigned short)_ISblank));
 8052d94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052d98:	89 3c 24             	mov    %edi,(%esp)
 8052d9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052d9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052da3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052da7:	b9 61 32 00 00       	mov    $0x3261,%ecx
 8052dac:	e8 97 1b 00 00       	call   8054948 <__afl_maybe_log>
 8052db1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052db5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052db9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052dbd:	8b 3c 24             	mov    (%esp),%edi
 8052dc0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052dc4:	39 dd                	cmp    %ebx,%ebp
 8052dc6:	0f 87 6c fd ff ff    	ja     8052b38 <find_field.isra.3+0x1a78>
 8052dcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052dd0:	89 3c 24             	mov    %edi,(%esp)
 8052dd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052dd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052ddb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ddf:	b9 f0 9f 00 00       	mov    $0x9ff0,%ecx
 8052de4:	e8 5f 1b 00 00       	call   8054948 <__afl_maybe_log>
 8052de9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052ded:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052df1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052df5:	8b 3c 24             	mov    (%esp),%edi
 8052df8:	8d 64 24 10          	lea    0x10(%esp),%esp
}
// MCC Label 208
if(!(count < skip_fields) && !(i < size) ) {
	report_label_coverage("MCC", 208);
}
for (; count < skip_fields && i < size; count++)
 8052dfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052e00:	89 3c 24             	mov    %edi,(%esp)
 8052e03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052e07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052e0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052e0f:	b9 4b da 00 00       	mov    $0xda4b,%ecx
 8052e14:	e8 2f 1b 00 00       	call   8054948 <__afl_maybe_log>
 8052e19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052e1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052e21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052e25:	8b 3c 24             	mov    (%esp),%edi
 8052e28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052e2c:	8b 7c 24 04          	mov    0x4(%esp),%edi
 8052e30:	83 c7 01             	add    $0x1,%edi
 8052e33:	3b 3c 24             	cmp    (%esp),%edi
 8052e36:	0f 84 d4 00 00 00    	je     8052f10 <find_field.isra.3+0x1e50>
 8052e3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052e40:	89 3c 24             	mov    %edi,(%esp)
 8052e43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052e47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052e4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052e4f:	b9 e1 c3 00 00       	mov    $0xc3e1,%ecx
 8052e54:	e8 ef 1a 00 00       	call   8054948 <__afl_maybe_log>
 8052e59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052e5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052e61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052e65:	8b 3c 24             	mov    (%esp),%edi
 8052e68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052e6c:	8b 0c 24             	mov    (%esp),%ecx
 8052e6f:	31 f6                	xor    %esi,%esi
if(skip_fields < 0)  {
	report_label_coverage("ABS", 212);
}

// COR Label 213
if((count < skip_fields || i < size) != (count < skip_fields && i < size))  {
 8052e71:	ba 01 00 00 00       	mov    $0x1,%edx
 8052e76:	39 f9                	cmp    %edi,%ecx
 8052e78:	0f 93 c1             	setae  %cl
 8052e7b:	0f 92 44 24 0e       	setb   0xe(%esp)
 8052e80:	39 dd                	cmp    %ebx,%ebp
 8052e82:	0f 93 44 24 0c       	setae  0xc(%esp)
 8052e87:	0f 92 44 24 0d       	setb   0xd(%esp)
 8052e8c:	e9 bf eb ff ff       	jmp    8051a50 <find_field.isra.3+0x990>
 8052e91:	8d 76 00             	lea    0x0(%esi),%esi
}
// MCC Label 208
if(!(count < skip_fields) && !(i < size) ) {
	report_label_coverage("MCC", 208);
}
for (; count < skip_fields && i < size; count++)
 8052e94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052e98:	89 3c 24             	mov    %edi,(%esp)
 8052e9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052e9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052ea3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ea7:	b9 ec 74 00 00       	mov    $0x74ec,%ecx
 8052eac:	e8 97 1a 00 00       	call   8054948 <__afl_maybe_log>
 8052eb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052eb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052eb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052ebd:	8b 3c 24             	mov    (%esp),%edi
 8052ec0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052ec4:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
 8052ec9:	8b 7c 24 04          	mov    0x4(%esp),%edi
 8052ecd:	3b 3c 24             	cmp    (%esp),%edi
 8052ed0:	0f 85 74 ef ff ff    	jne    8051e4a <find_field.isra.3+0xd8a>
 8052ed6:	66 90                	xchg   %ax,%ax
 8052ed8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052edc:	89 3c 24             	mov    %edi,(%esp)
 8052edf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052ee3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052ee7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052eeb:	b9 c8 6d 00 00       	mov    $0x6dc8,%ecx
 8052ef0:	e8 53 1a 00 00       	call   8054948 <__afl_maybe_log>
 8052ef5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052ef9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052efd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052f01:	8b 3c 24             	mov    (%esp),%edi
 8052f04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052f08:	90                   	nop
 8052f09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8052f10:	39 dd                	cmp    %ebx,%ebp
 8052f12:	8b 3c 24             	mov    (%esp),%edi
 8052f15:	0f 93 44 24 0c       	setae  0xc(%esp)
 8052f1a:	0f 92 44 24 0d       	setb   0xd(%esp)
 8052f1f:	e9 e6 ea ff ff       	jmp    8051a0a <find_field.isra.3+0x94a>
 8052f24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
if(count < skip_fields && !(i < size) ) {
	report_label_coverage("MCC", 206);
}
// MCC Label 207
if(!(count < skip_fields) && i < size ) {
	report_label_coverage("MCC", 207);
 8052f28:	68 cf 00 00 00       	push   $0xcf
 8052f2d:	68 1b 5b 06 08       	push   $0x8065b1b
 8052f32:	e8 49 e1 ff ff       	call   8051080 <report_label_coverage>
}
// MCC Label 208
if(!(count < skip_fields) && !(i < size) ) {
 8052f37:	89 fa                	mov    %edi,%edx
 8052f39:	84 d2                	test   %dl,%dl
if(count < skip_fields && !(i < size) ) {
	report_label_coverage("MCC", 206);
}
// MCC Label 207
if(!(count < skip_fields) && i < size ) {
	report_label_coverage("MCC", 207);
 8052f3b:	5b                   	pop    %ebx
 8052f3c:	5e                   	pop    %esi
}
// MCC Label 208
if(!(count < skip_fields) && !(i < size) ) {
 8052f3d:	0f 84 89 ea ff ff    	je     80519cc <find_field.isra.3+0x90c>
 8052f43:	90                   	nop
 8052f44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052f48:	89 3c 24             	mov    %edi,(%esp)
 8052f4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052f4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052f53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052f57:	b9 85 71 00 00       	mov    $0x7185,%ecx
 8052f5c:	e8 e7 19 00 00       	call   8054948 <__afl_maybe_log>
 8052f61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052f65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052f69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052f6d:	8b 3c 24             	mov    (%esp),%edi
 8052f70:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 208);
 8052f74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052f78:	89 3c 24             	mov    %edi,(%esp)
 8052f7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052f7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052f83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052f87:	b9 58 84 00 00       	mov    $0x8458,%ecx
 8052f8c:	e8 b7 19 00 00       	call   8054948 <__afl_maybe_log>
 8052f91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052f95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052f99:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052f9d:	8b 3c 24             	mov    (%esp),%edi
 8052fa0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052fa4:	68 d0 00 00 00       	push   $0xd0
 8052fa9:	68 1b 5b 06 08       	push   $0x8065b1b
 8052fae:	e8 cd e0 ff ff       	call   8051080 <report_label_coverage>
 8052fb3:	5a                   	pop    %edx
 8052fb4:	59                   	pop    %ecx
 8052fb5:	e9 12 ea ff ff       	jmp    80519cc <find_field.isra.3+0x90c>
 8052fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8052fc0:	88 04 24             	mov    %al,(%esp)
if(count < skip_fields && i < size ) {
	report_label_coverage("MCC", 220);
}
// MCC Label 221
if(count < skip_fields && !(i < size) ) {
	report_label_coverage("MCC", 221);
 8052fc3:	83 ec 08             	sub    $0x8,%esp
 8052fc6:	68 dd 00 00 00       	push   $0xdd
 8052fcb:	68 1b 5b 06 08       	push   $0x8065b1b
 8052fd0:	e8 ab e0 ff ff       	call   8051080 <report_label_coverage>
}
// MCC Label 222
if(!(count < skip_fields) && i < size ) {
 8052fd5:	89 f8                	mov    %edi,%eax
 8052fd7:	83 c4 10             	add    $0x10,%esp
 8052fda:	84 c0                	test   %al,%al
 8052fdc:	0f b6 04 24          	movzbl (%esp),%eax
 8052fe0:	0f 84 9e e8 ff ff    	je     8051884 <find_field.isra.3+0x7c4>
 8052fe6:	66 90                	xchg   %ax,%ax
 8052fe8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052fec:	89 3c 24             	mov    %edi,(%esp)
 8052fef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052ff3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052ff7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ffb:	b9 2c d5 00 00       	mov    $0xd52c,%ecx
 8053000:	e8 43 19 00 00       	call   8054948 <__afl_maybe_log>
 8053005:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053009:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805300d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053011:	8b 3c 24             	mov    (%esp),%edi
 8053014:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053018:	89 f2                	mov    %esi,%edx
 805301a:	84 d2                	test   %dl,%dl
 805301c:	0f 84 22 ec ff ff    	je     8051c44 <find_field.isra.3+0xb84>
 8053022:	66 90                	xchg   %ax,%ax
 8053024:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053028:	89 3c 24             	mov    %edi,(%esp)
 805302b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805302f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053033:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053037:	b9 dd 11 00 00       	mov    $0x11dd,%ecx
 805303c:	e8 07 19 00 00       	call   8054948 <__afl_maybe_log>
 8053041:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053045:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053049:	8b 54 24 04          	mov    0x4(%esp),%edx
 805304d:	8b 3c 24             	mov    (%esp),%edi
 8053050:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053054:	e9 97 eb ff ff       	jmp    8051bf0 <find_field.isra.3+0xb30>
 8053059:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8053060:	88 04 24             	mov    %al,(%esp)
	report_label_coverage("ROR", 219);
}

// MCC Label 220
if(count < skip_fields && i < size ) {
	report_label_coverage("MCC", 220);
 8053063:	83 ec 08             	sub    $0x8,%esp
 8053066:	68 dc 00 00 00       	push   $0xdc
 805306b:	68 1b 5b 06 08       	push   $0x8065b1b
 8053070:	e8 0b e0 ff ff       	call   8051080 <report_label_coverage>
 8053075:	83 c4 10             	add    $0x10,%esp
 8053078:	0f b6 04 24          	movzbl (%esp),%eax
 805307c:	e9 8f ea ff ff       	jmp    8051b10 <find_field.isra.3+0xa50>
 8053081:	eb 0d                	jmp    8053090 <different>
 8053083:	90                   	nop
 8053084:	90                   	nop
 8053085:	90                   	nop
 8053086:	90                   	nop
 8053087:	90                   	nop
 8053088:	90                   	nop
 8053089:	90                   	nop
 805308a:	90                   	nop
 805308b:	90                   	nop
 805308c:	90                   	nop
 805308d:	90                   	nop
 805308e:	90                   	nop
 805308f:	90                   	nop

08053090 <different>:
   but rather to the beginnings of the fields to compare.
   OLDLEN and NEWLEN are their lengths. */

static bool
different (char *old, char *new, size_t oldlen, size_t newlen)
{
 8053090:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053094:	89 3c 24             	mov    %edi,(%esp)
 8053097:	89 54 24 04          	mov    %edx,0x4(%esp)
 805309b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805309f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80530a3:	b9 0d d8 00 00       	mov    $0xd80d,%ecx
 80530a8:	e8 9b 18 00 00       	call   8054948 <__afl_maybe_log>
 80530ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80530b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80530b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80530b9:	8b 3c 24             	mov    (%esp),%edi
 80530bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80530c0:	55                   	push   %ebp
 80530c1:	57                   	push   %edi
 80530c2:	89 d5                	mov    %edx,%ebp
 80530c4:	56                   	push   %esi
 80530c5:	53                   	push   %ebx
 80530c6:	89 cb                	mov    %ecx,%ebx
 80530c8:	83 ec 1c             	sub    $0x1c,%esp
if(oldlen < 0)  {
	report_label_coverage("ABS", 232);
}

// ROR Label 233
if((check_chars <= oldlen) != (check_chars < oldlen))  {
 80530cb:	8b 3d 10 a3 06 08    	mov    0x806a310,%edi
   but rather to the beginnings of the fields to compare.
   OLDLEN and NEWLEN are their lengths. */

static bool
different (char *old, char *new, size_t oldlen, size_t newlen)
{
 80530d1:	89 44 24 08          	mov    %eax,0x8(%esp)
 80530d5:	8b 74 24 30          	mov    0x30(%esp),%esi
if(oldlen < 0)  {
	report_label_coverage("ABS", 232);
}

// ROR Label 233
if((check_chars <= oldlen) != (check_chars < oldlen))  {
 80530d9:	39 cf                	cmp    %ecx,%edi
 80530db:	0f 92 c2             	setb   %dl
 80530de:	0f 96 c1             	setbe  %cl
 80530e1:	38 d1                	cmp    %dl,%cl
 80530e3:	74 4d                	je     8053132 <different+0xa2>
 80530e5:	8d 76 00             	lea    0x0(%esi),%esi
 80530e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80530ec:	89 3c 24             	mov    %edi,(%esp)
 80530ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80530f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80530f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80530fb:	b9 57 d0 00 00       	mov    $0xd057,%ecx
 8053100:	e8 43 18 00 00       	call   8054948 <__afl_maybe_log>
 8053105:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053109:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805310d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053111:	8b 3c 24             	mov    (%esp),%edi
 8053114:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053118:	88 54 24 0f          	mov    %dl,0xf(%esp)
	report_label_coverage("ROR", 233);
 805311c:	68 e9 00 00 00       	push   $0xe9
 8053121:	68 17 5b 06 08       	push   $0x8065b17
 8053126:	e8 55 df ff ff       	call   8051080 <report_label_coverage>
 805312b:	59                   	pop    %ecx
 805312c:	58                   	pop    %eax
 805312d:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
 8053132:	66 90                	xchg   %ax,%ax
}
// ROR Label 234
if((check_chars > oldlen) != (check_chars < oldlen))  {
 8053134:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053138:	89 3c 24             	mov    %edi,(%esp)
 805313b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805313f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053143:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053147:	b9 b1 d9 00 00       	mov    $0xd9b1,%ecx
 805314c:	e8 f7 17 00 00       	call   8054948 <__afl_maybe_log>
 8053151:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053155:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053159:	8b 54 24 04          	mov    0x4(%esp),%edx
 805315d:	8b 3c 24             	mov    (%esp),%edi
 8053160:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053164:	39 df                	cmp    %ebx,%edi
 8053166:	0f 97 c0             	seta   %al
 8053169:	38 c2                	cmp    %al,%dl
 805316b:	74 4d                	je     80531ba <different+0x12a>
 805316d:	8d 76 00             	lea    0x0(%esi),%esi
 8053170:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053174:	89 3c 24             	mov    %edi,(%esp)
 8053177:	89 54 24 04          	mov    %edx,0x4(%esp)
 805317b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805317f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053183:	b9 1f f5 00 00       	mov    $0xf51f,%ecx
 8053188:	e8 bb 17 00 00       	call   8054948 <__afl_maybe_log>
 805318d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053191:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053195:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053199:	8b 3c 24             	mov    (%esp),%edi
 805319c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80531a0:	88 54 24 0f          	mov    %dl,0xf(%esp)
	report_label_coverage("ROR", 234);
 80531a4:	68 ea 00 00 00       	push   $0xea
 80531a9:	68 17 5b 06 08       	push   $0x8065b17
 80531ae:	e8 cd de ff ff       	call   8051080 <report_label_coverage>
 80531b3:	58                   	pop    %eax
 80531b4:	5a                   	pop    %edx
 80531b5:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
 80531ba:	66 90                	xchg   %ax,%ax
}
// ROR Label 235
if((check_chars >= oldlen) != (check_chars < oldlen))  {
 80531bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80531c0:	89 3c 24             	mov    %edi,(%esp)
 80531c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80531c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80531cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80531cf:	b9 29 ba 00 00       	mov    $0xba29,%ecx
 80531d4:	e8 6f 17 00 00       	call   8054948 <__afl_maybe_log>
 80531d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80531dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80531e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80531e5:	8b 3c 24             	mov    (%esp),%edi
 80531e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80531ec:	39 df                	cmp    %ebx,%edi
 80531ee:	0f 93 c1             	setae  %cl
 80531f1:	38 ca                	cmp    %cl,%dl
 80531f3:	74 44                	je     8053239 <different+0x1a9>
 80531f5:	8d 76 00             	lea    0x0(%esi),%esi
 80531f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80531fc:	89 3c 24             	mov    %edi,(%esp)
 80531ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053203:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053207:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805320b:	b9 bd b5 00 00       	mov    $0xb5bd,%ecx
 8053210:	e8 33 17 00 00       	call   8054948 <__afl_maybe_log>
 8053215:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053219:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805321d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053221:	8b 3c 24             	mov    (%esp),%edi
 8053224:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 235);
 8053228:	68 eb 00 00 00       	push   $0xeb
 805322d:	68 17 5b 06 08       	push   $0x8065b17
 8053232:	e8 49 de ff ff       	call   8051080 <report_label_coverage>
 8053237:	59                   	pop    %ecx
 8053238:	58                   	pop    %eax
 8053239:	8d 76 00             	lea    0x0(%esi),%esi
 805323c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053240:	89 3c 24             	mov    %edi,(%esp)
 8053243:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053247:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805324b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805324f:	b9 63 bd 00 00       	mov    $0xbd63,%ecx
 8053254:	e8 ef 16 00 00       	call   8054948 <__afl_maybe_log>
 8053259:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805325d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053261:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053265:	8b 3c 24             	mov    (%esp),%edi
 8053268:	8d 64 24 10          	lea    0x10(%esp),%esp
 805326c:	39 fb                	cmp    %edi,%ebx
 805326e:	0f 47 df             	cmova  %edi,%ebx
if(newlen < 0)  {
	report_label_coverage("ABS", 237);
}

// ROR Label 238
if((check_chars <= newlen) != (check_chars < newlen))  {
 8053271:	39 f7                	cmp    %esi,%edi
 8053273:	0f 92 c2             	setb   %dl
 8053276:	0f 96 c0             	setbe  %al
 8053279:	38 d0                	cmp    %dl,%al
 805327b:	74 4d                	je     80532ca <different+0x23a>
 805327d:	8d 76 00             	lea    0x0(%esi),%esi
 8053280:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053284:	89 3c 24             	mov    %edi,(%esp)
 8053287:	89 54 24 04          	mov    %edx,0x4(%esp)
 805328b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805328f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053293:	b9 52 e4 00 00       	mov    $0xe452,%ecx
 8053298:	e8 ab 16 00 00       	call   8054948 <__afl_maybe_log>
 805329d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80532a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80532a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80532a9:	8b 3c 24             	mov    (%esp),%edi
 80532ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80532b0:	88 54 24 0f          	mov    %dl,0xf(%esp)
	report_label_coverage("ROR", 238);
 80532b4:	68 ee 00 00 00       	push   $0xee
 80532b9:	68 17 5b 06 08       	push   $0x8065b17
 80532be:	e8 bd dd ff ff       	call   8051080 <report_label_coverage>
 80532c3:	58                   	pop    %eax
 80532c4:	5a                   	pop    %edx
 80532c5:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
 80532ca:	66 90                	xchg   %ax,%ax
}
// ROR Label 239
if((check_chars > newlen) != (check_chars < newlen))  {
 80532cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80532d0:	89 3c 24             	mov    %edi,(%esp)
 80532d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80532d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80532db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80532df:	b9 ba b1 00 00       	mov    $0xb1ba,%ecx
 80532e4:	e8 5f 16 00 00       	call   8054948 <__afl_maybe_log>
 80532e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80532ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80532f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80532f5:	8b 3c 24             	mov    (%esp),%edi
 80532f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80532fc:	39 f7                	cmp    %esi,%edi
 80532fe:	0f 97 c1             	seta   %cl
 8053301:	38 ca                	cmp    %cl,%dl
 8053303:	74 4d                	je     8053352 <different+0x2c2>
 8053305:	8d 76 00             	lea    0x0(%esi),%esi
 8053308:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805330c:	89 3c 24             	mov    %edi,(%esp)
 805330f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053313:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053317:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805331b:	b9 29 f7 00 00       	mov    $0xf729,%ecx
 8053320:	e8 23 16 00 00       	call   8054948 <__afl_maybe_log>
 8053325:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053329:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805332d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053331:	8b 3c 24             	mov    (%esp),%edi
 8053334:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053338:	88 54 24 0f          	mov    %dl,0xf(%esp)
	report_label_coverage("ROR", 239);
 805333c:	68 ef 00 00 00       	push   $0xef
 8053341:	68 17 5b 06 08       	push   $0x8065b17
 8053346:	e8 35 dd ff ff       	call   8051080 <report_label_coverage>
 805334b:	59                   	pop    %ecx
 805334c:	58                   	pop    %eax
 805334d:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
 8053352:	66 90                	xchg   %ax,%ax
}
// ROR Label 240
if((check_chars >= newlen) != (check_chars < newlen))  {
 8053354:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053358:	89 3c 24             	mov    %edi,(%esp)
 805335b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805335f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053363:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053367:	b9 33 b7 00 00       	mov    $0xb733,%ecx
 805336c:	e8 d7 15 00 00       	call   8054948 <__afl_maybe_log>
 8053371:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053375:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053379:	8b 54 24 04          	mov    0x4(%esp),%edx
 805337d:	8b 3c 24             	mov    (%esp),%edi
 8053380:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053384:	39 f7                	cmp    %esi,%edi
 8053386:	0f 93 c0             	setae  %al
 8053389:	38 c2                	cmp    %al,%dl
 805338b:	74 44                	je     80533d1 <different+0x341>
 805338d:	8d 76 00             	lea    0x0(%esi),%esi
 8053390:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053394:	89 3c 24             	mov    %edi,(%esp)
 8053397:	89 54 24 04          	mov    %edx,0x4(%esp)
 805339b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805339f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80533a3:	b9 8f 05 00 00       	mov    $0x58f,%ecx
 80533a8:	e8 9b 15 00 00       	call   8054948 <__afl_maybe_log>
 80533ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80533b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80533b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80533b9:	8b 3c 24             	mov    (%esp),%edi
 80533bc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 240);
 80533c0:	68 f0 00 00 00       	push   $0xf0
 80533c5:	68 17 5b 06 08       	push   $0x8065b17
 80533ca:	e8 b1 dc ff ff       	call   8051080 <report_label_coverage>
 80533cf:	58                   	pop    %eax
 80533d0:	5a                   	pop    %edx
 80533d1:	8d 76 00             	lea    0x0(%esi),%esi
if (check_chars < newlen)
    newlen = check_chars;

  
// ABS Label 241
if(ignore_case < 0)  {
 80533d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80533d8:	89 3c 24             	mov    %edi,(%esp)
 80533db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80533df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80533e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80533e7:	b9 c2 a0 00 00       	mov    $0xa0c2,%ecx
 80533ec:	e8 57 15 00 00       	call   8054948 <__afl_maybe_log>
 80533f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80533f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80533f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80533fd:	8b 3c 24             	mov    (%esp),%edi
 8053400:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053404:	0f b6 05 08 a3 06 08 	movzbl 0x806a308,%eax
 805340b:	39 fe                	cmp    %edi,%esi
 805340d:	0f 47 f7             	cmova  %edi,%esi
	report_label_coverage("ABS", 241);
}
if (ignore_case)
 8053410:	84 c0                	test   %al,%al
 8053412:	0f 85 e8 00 00 00    	jne    8053500 <different+0x470>
 8053418:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805341c:	89 3c 24             	mov    %edi,(%esp)
 805341f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053423:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053427:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805342b:	b9 89 dc 00 00       	mov    $0xdc89,%ecx
 8053430:	e8 13 15 00 00       	call   8054948 <__afl_maybe_log>
 8053435:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053439:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805343d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053441:	8b 3c 24             	mov    (%esp),%edi
 8053444:	8d 64 24 10          	lea    0x10(%esp),%esp
  else { 
// ABS Label 242
if(hard_LC_COLLATE < 0)  {
	report_label_coverage("ABS", 242);
}
if (hard_LC_COLLATE)
 8053448:	80 3d 1c a3 06 08 00 	cmpb   $0x0,0x806a31c
 805344f:	0f 85 21 01 00 00    	jne    8053576 <different+0x4e6>
 8053455:	8d 76 00             	lea    0x0(%esi),%esi
 8053458:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805345c:	89 3c 24             	mov    %edi,(%esp)
 805345f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053463:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053467:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805346b:	b9 d5 5d 00 00       	mov    $0x5dd5,%ecx
 8053470:	e8 d3 14 00 00       	call   8054948 <__afl_maybe_log>
 8053475:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053479:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805347d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053481:	8b 3c 24             	mov    (%esp),%edi
 8053484:	8d 64 24 10          	lea    0x10(%esp),%esp
    return xmemcoll (old, oldlen, new, newlen) != 0;
  else
    return oldlen != newlen || memcmp (old, new, oldlen);}
 8053488:	39 f3                	cmp    %esi,%ebx
 805348a:	b8 01 00 00 00       	mov    $0x1,%eax
 805348f:	0f 84 c3 00 00 00    	je     8053558 <different+0x4c8>
 8053495:	8d 76 00             	lea    0x0(%esi),%esi
 8053498:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805349c:	89 3c 24             	mov    %edi,(%esp)
 805349f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80534a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80534a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80534ab:	b9 26 0c 00 00       	mov    $0xc26,%ecx
 80534b0:	e8 93 14 00 00       	call   8054948 <__afl_maybe_log>
 80534b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80534b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80534bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80534c1:	8b 3c 24             	mov    (%esp),%edi
 80534c4:	8d 64 24 10          	lea    0x10(%esp),%esp
;
}
 80534c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80534cc:	89 3c 24             	mov    %edi,(%esp)
 80534cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80534d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80534d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80534db:	b9 31 e6 00 00       	mov    $0xe631,%ecx
 80534e0:	e8 63 14 00 00       	call   8054948 <__afl_maybe_log>
 80534e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80534e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80534ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80534f1:	8b 3c 24             	mov    (%esp),%edi
 80534f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80534f8:	83 c4 1c             	add    $0x1c,%esp
 80534fb:	5b                   	pop    %ebx
 80534fc:	5e                   	pop    %esi
 80534fd:	5f                   	pop    %edi
 80534fe:	5d                   	pop    %ebp
 80534ff:	c3                   	ret    
	report_label_coverage("ABS", 241);
}
if (ignore_case)
    {
      /* FIXME: This should invoke strcoll somehow.  */
      return oldlen != newlen || memcasecmp (old, new, oldlen);
 8053500:	39 f3                	cmp    %esi,%ebx
 8053502:	75 c4                	jne    80534c8 <different+0x438>
 8053504:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053508:	89 3c 24             	mov    %edi,(%esp)
 805350b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805350f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053513:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053517:	b9 e2 bf 00 00       	mov    $0xbfe2,%ecx
 805351c:	e8 27 14 00 00       	call   8054948 <__afl_maybe_log>
 8053521:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053525:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053529:	8b 54 24 04          	mov    0x4(%esp),%edx
 805352d:	8b 3c 24             	mov    (%esp),%edi
 8053530:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053534:	83 ec 04             	sub    $0x4,%esp
 8053537:	53                   	push   %ebx
 8053538:	55                   	push   %ebp
 8053539:	ff 74 24 14          	pushl  0x14(%esp)
 805353d:	e8 fe 3e 00 00       	call   8057440 <memcasecmp>
 8053542:	83 c4 10             	add    $0x10,%esp
 8053545:	85 c0                	test   %eax,%eax
 8053547:	0f 95 c0             	setne  %al
if (hard_LC_COLLATE)
    return xmemcoll (old, oldlen, new, newlen) != 0;
  else
    return oldlen != newlen || memcmp (old, new, oldlen);}
;
}
 805354a:	83 c4 1c             	add    $0x1c,%esp
 805354d:	5b                   	pop    %ebx
 805354e:	5e                   	pop    %esi
 805354f:	5f                   	pop    %edi
 8053550:	5d                   	pop    %ebp
 8053551:	c3                   	ret    
 8053552:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
	report_label_coverage("ABS", 242);
}
if (hard_LC_COLLATE)
    return xmemcoll (old, oldlen, new, newlen) != 0;
  else
    return oldlen != newlen || memcmp (old, new, oldlen);}
 8053558:	83 ec 04             	sub    $0x4,%esp
 805355b:	53                   	push   %ebx
 805355c:	55                   	push   %ebp
 805355d:	ff 74 24 14          	pushl  0x14(%esp)
 8053561:	e8 8a 5c ff ff       	call   80491f0 <memcmp@plt>
 8053566:	83 c4 10             	add    $0x10,%esp
 8053569:	85 c0                	test   %eax,%eax
 805356b:	0f 95 c0             	setne  %al
;
}
 805356e:	83 c4 1c             	add    $0x1c,%esp
 8053571:	5b                   	pop    %ebx
 8053572:	5e                   	pop    %esi
 8053573:	5f                   	pop    %edi
 8053574:	5d                   	pop    %ebp
 8053575:	c3                   	ret    
 8053576:	66 90                	xchg   %ax,%ax
// ABS Label 242
if(hard_LC_COLLATE < 0)  {
	report_label_coverage("ABS", 242);
}
if (hard_LC_COLLATE)
    return xmemcoll (old, oldlen, new, newlen) != 0;
 8053578:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805357c:	89 3c 24             	mov    %edi,(%esp)
 805357f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053583:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053587:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805358b:	b9 af d5 00 00       	mov    $0xd5af,%ecx
 8053590:	e8 b3 13 00 00       	call   8054948 <__afl_maybe_log>
 8053595:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053599:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805359d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80535a1:	8b 3c 24             	mov    (%esp),%edi
 80535a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80535a8:	56                   	push   %esi
 80535a9:	55                   	push   %ebp
 80535aa:	53                   	push   %ebx
 80535ab:	ff 74 24 14          	pushl  0x14(%esp)
 80535af:	e8 5c d0 00 00       	call   8060610 <xmemcoll>
 80535b4:	83 c4 10             	add    $0x10,%esp
 80535b7:	85 c0                	test   %eax,%eax
 80535b9:	0f 95 c0             	setne  %al
  else
    return oldlen != newlen || memcmp (old, new, oldlen);}
;
}
 80535bc:	83 c4 1c             	add    $0x1c,%esp
 80535bf:	5b                   	pop    %ebx
 80535c0:	5e                   	pop    %esi
 80535c1:	5f                   	pop    %edi
 80535c2:	5d                   	pop    %ebp
 80535c3:	c3                   	ret    
 80535c4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80535ca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

080535d0 <writeline>:
   LINECOUNT + 1 is the number of times that the line occurred. */

static void
writeline (struct linebuffer const *line,
           bool match, uintmax_t linecount)
{
 80535d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80535d4:	89 3c 24             	mov    %edi,(%esp)
 80535d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80535db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80535df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80535e3:	b9 6f 1e 00 00       	mov    $0x1e6f,%ecx
 80535e8:	e8 5b 13 00 00       	call   8054948 <__afl_maybe_log>
 80535ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80535f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80535f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80535f9:	8b 3c 24             	mov    (%esp),%edi
 80535fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053600:	57                   	push   %edi
 8053601:	56                   	push   %esi
 8053602:	53                   	push   %ebx
 8053603:	89 c3                	mov    %eax,%ebx
 8053605:	83 ec 10             	sub    $0x10,%esp
 8053608:	8b 7c 24 24          	mov    0x24(%esp),%edi
 805360c:	8b 74 24 20          	mov    0x20(%esp),%esi
  if (! (linecount == 0 ? output_unique
 8053610:	89 f8                	mov    %edi,%eax
 8053612:	09 f0                	or     %esi,%eax
 8053614:	0f 85 f6 01 00 00    	jne    8053810 <writeline+0x240>
 805361a:	66 90                	xchg   %ax,%ax
 805361c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053620:	89 3c 24             	mov    %edi,(%esp)
 8053623:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053627:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805362b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805362f:	b9 6d 8b 00 00       	mov    $0x8b6d,%ecx
 8053634:	e8 0f 13 00 00       	call   8054948 <__afl_maybe_log>
 8053639:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805363d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053641:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053645:	8b 3c 24             	mov    (%esp),%edi
 8053648:	8d 64 24 10          	lea    0x10(%esp),%esp
 805364c:	0f b6 15 0b a3 06 08 	movzbl 0x806a30b,%edx
 8053653:	83 f2 01             	xor    $0x1,%edx
 8053656:	66 90                	xchg   %ax,%ax
 8053658:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805365c:	89 3c 24             	mov    %edi,(%esp)
 805365f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053663:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053667:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805366b:	b9 20 39 00 00       	mov    $0x3920,%ecx
 8053670:	e8 d3 12 00 00       	call   8054948 <__afl_maybe_log>
 8053675:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053679:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805367d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053681:	8b 3c 24             	mov    (%esp),%edi
 8053684:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053688:	84 d2                	test   %dl,%dl
 805368a:	0f 85 40 01 00 00    	jne    80537d0 <writeline+0x200>
 8053690:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053694:	89 3c 24             	mov    %edi,(%esp)
 8053697:	89 54 24 04          	mov    %edx,0x4(%esp)
 805369b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805369f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80536a3:	b9 33 23 00 00       	mov    $0x2333,%ecx
 80536a8:	e8 9b 12 00 00       	call   8054948 <__afl_maybe_log>
 80536ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80536b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80536b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80536b9:	8b 3c 24             	mov    (%esp),%edi
 80536bc:	8d 64 24 10          	lea    0x10(%esp),%esp
         : output_later_repeated))
    return;

  
// ROR Label 245
if((countmode != count_occurrences) != (countmode == count_occurrences))  {
 80536c0:	8b 0d 0c a3 06 08    	mov    0x806a30c,%ecx
 80536c6:	85 c9                	test   %ecx,%ecx
 80536c8:	0f 94 c0             	sete   %al
 80536cb:	0f 95 c2             	setne  %dl
 80536ce:	38 c2                	cmp    %al,%dl
 80536d0:	74 4c                	je     805371e <writeline+0x14e>
 80536d2:	66 90                	xchg   %ax,%ax
 80536d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80536d8:	89 3c 24             	mov    %edi,(%esp)
 80536db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80536df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80536e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80536e7:	b9 f5 79 00 00       	mov    $0x79f5,%ecx
 80536ec:	e8 57 12 00 00       	call   8054948 <__afl_maybe_log>
 80536f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80536f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80536f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80536fd:	8b 3c 24             	mov    (%esp),%edi
 8053700:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053704:	88 44 24 0f          	mov    %al,0xf(%esp)
	report_label_coverage("ROR", 245);
 8053708:	68 f5 00 00 00       	push   $0xf5
 805370d:	68 17 5b 06 08       	push   $0x8065b17
 8053712:	e8 69 d9 ff ff       	call   8051080 <report_label_coverage>
 8053717:	58                   	pop    %eax
 8053718:	5a                   	pop    %edx
 8053719:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
 805371e:	66 90                	xchg   %ax,%ax
}
if (countmode == count_occurrences)
 8053720:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053724:	89 3c 24             	mov    %edi,(%esp)
 8053727:	89 54 24 04          	mov    %edx,0x4(%esp)
 805372b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805372f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053733:	b9 aa b9 00 00       	mov    $0xb9aa,%ecx
 8053738:	e8 0b 12 00 00       	call   8054948 <__afl_maybe_log>
 805373d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053741:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053745:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053749:	8b 3c 24             	mov    (%esp),%edi
 805374c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053750:	84 c0                	test   %al,%al
 8053752:	0f 85 18 01 00 00    	jne    8053870 <writeline+0x2a0>
 8053758:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805375c:	89 3c 24             	mov    %edi,(%esp)
 805375f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053763:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053767:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805376b:	b9 5f b3 00 00       	mov    $0xb35f,%ecx
 8053770:	e8 d3 11 00 00       	call   8054948 <__afl_maybe_log>
 8053775:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053779:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805377d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053781:	8b 3c 24             	mov    (%esp),%edi
 8053784:	8d 64 24 10          	lea    0x10(%esp),%esp
    printf ("%7" PRIuMAX " ", linecount + 1);

  fwrite (line->buffer, sizeof (char), line->length, stdout);
 8053788:	8b 73 04             	mov    0x4(%ebx),%esi
 805378b:	90                   	nop
 805378c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053790:	89 3c 24             	mov    %edi,(%esp)
 8053793:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053797:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805379b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805379f:	b9 8d 13 00 00       	mov    $0x138d,%ecx
 80537a4:	e8 9f 11 00 00       	call   8054948 <__afl_maybe_log>
 80537a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80537ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80537b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80537b5:	8b 3c 24             	mov    (%esp),%edi
 80537b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80537bc:	ff 35 d8 a2 06 08    	pushl  0x806a2d8
 80537c2:	56                   	push   %esi
 80537c3:	6a 01                	push   $0x1
 80537c5:	ff 73 08             	pushl  0x8(%ebx)
 80537c8:	e8 53 5c ff ff       	call   8049420 <fwrite_unlocked@plt>
 80537cd:	83 c4 10             	add    $0x10,%esp
}
 80537d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80537d4:	89 3c 24             	mov    %edi,(%esp)
 80537d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80537db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80537df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80537e3:	b9 d5 76 00 00       	mov    $0x76d5,%ecx
 80537e8:	e8 5b 11 00 00       	call   8054948 <__afl_maybe_log>
 80537ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80537f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80537f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80537f9:	8b 3c 24             	mov    (%esp),%edi
 80537fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053800:	83 c4 10             	add    $0x10,%esp
 8053803:	5b                   	pop    %ebx
 8053804:	5e                   	pop    %esi
 8053805:	5f                   	pop    %edi
 8053806:	c3                   	ret    
 8053807:	89 f6                	mov    %esi,%esi
 8053809:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

static void
writeline (struct linebuffer const *line,
           bool match, uintmax_t linecount)
{
  if (! (linecount == 0 ? output_unique
 8053810:	84 d2                	test   %dl,%dl
 8053812:	75 44                	jne    8053858 <writeline+0x288>
 8053814:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053818:	89 3c 24             	mov    %edi,(%esp)
 805381b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805381f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053823:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053827:	b9 c3 ec 00 00       	mov    $0xecc3,%ecx
 805382c:	e8 17 11 00 00       	call   8054948 <__afl_maybe_log>
 8053831:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053835:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053839:	8b 54 24 04          	mov    0x4(%esp),%edx
 805383d:	8b 3c 24             	mov    (%esp),%edi
 8053840:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053844:	0f b6 15 0a a3 06 08 	movzbl 0x806a30a,%edx
 805384b:	83 f2 01             	xor    $0x1,%edx
 805384e:	e9 03 fe ff ff       	jmp    8053656 <writeline+0x86>
 8053853:	90                   	nop
 8053854:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8053858:	0f b6 15 09 a3 06 08 	movzbl 0x806a309,%edx
 805385f:	83 f2 01             	xor    $0x1,%edx
 8053862:	e9 ef fd ff ff       	jmp    8053656 <writeline+0x86>
 8053867:	89 f6                	mov    %esi,%esi
 8053869:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
// ROR Label 245
if((countmode != count_occurrences) != (countmode == count_occurrences))  {
	report_label_coverage("ROR", 245);
}
if (countmode == count_occurrences)
    printf ("%7" PRIuMAX " ", linecount + 1);
 8053870:	83 ec 04             	sub    $0x4,%esp
 8053873:	83 c6 01             	add    $0x1,%esi
 8053876:	83 d7 00             	adc    $0x0,%edi
 8053879:	57                   	push   %edi
 805387a:	56                   	push   %esi
 805387b:	68 1f 5b 06 08       	push   $0x8065b1f
 8053880:	e8 eb 58 ff ff       	call   8049170 <printf@plt>

  fwrite (line->buffer, sizeof (char), line->length, stdout);
 8053885:	8b 73 04             	mov    0x4(%ebx),%esi
 8053888:	83 c4 10             	add    $0x10,%esp
 805388b:	e9 fb fe ff ff       	jmp    805378b <writeline+0x1bb>

08053890 <lava_set>:
#include <stdio.h>
extern unsigned int lava_get(unsigned int) ;
void lava_set(unsigned int bn, unsigned int val);
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 8053890:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053894:	89 3c 24             	mov    %edi,(%esp)
 8053897:	89 54 24 04          	mov    %edx,0x4(%esp)
 805389b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805389f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80538a3:	b9 e9 f8 00 00       	mov    $0xf8e9,%ecx
 80538a8:	e8 9b 10 00 00       	call   8054948 <__afl_maybe_log>
 80538ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80538b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80538b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80538b9:	8b 3c 24             	mov    (%esp),%edi
 80538bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80538c0:	8b 54 24 08          	mov    0x8(%esp),%edx
 80538c4:	8b 44 24 04          	mov    0x4(%esp),%eax
 80538c8:	89 14 85 40 a3 06 08 	mov    %edx,0x806a340(,%eax,4)
 80538cf:	c3                   	ret    

080538d0 <lava_get>:
unsigned int lava_get(unsigned int bug_num);
unsigned int lava_get(unsigned int bug_num) {
 80538d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80538d4:	89 3c 24             	mov    %edi,(%esp)
 80538d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80538db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80538df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80538e3:	b9 c9 34 00 00       	mov    $0x34c9,%ecx
 80538e8:	e8 5b 10 00 00       	call   8054948 <__afl_maybe_log>
 80538ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80538f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80538f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80538f9:	8b 3c 24             	mov    (%esp),%edi
 80538fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053900:	55                   	push   %ebp
 8053901:	57                   	push   %edi
if(lava_val[bug_num] < 0)  {
	report_label_coverage("ABS", 8);
}

// AOR Label 9
if(1818326625 / bug_num != 1818326625 - bug_num)  {
 8053902:	b8 61 76 61 6c       	mov    $0x6c617661,%eax
void lava_set(unsigned int bn, unsigned int val);
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
unsigned int lava_get(unsigned int bug_num);
unsigned int lava_get(unsigned int bug_num) {
 8053907:	56                   	push   %esi
 8053908:	53                   	push   %ebx
if(lava_val[bug_num] < 0)  {
	report_label_coverage("ABS", 8);
}

// AOR Label 9
if(1818326625 / bug_num != 1818326625 - bug_num)  {
 8053909:	31 d2                	xor    %edx,%edx
 805390b:	89 c6                	mov    %eax,%esi
void lava_set(unsigned int bn, unsigned int val);
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
unsigned int lava_get(unsigned int bug_num);
unsigned int lava_get(unsigned int bug_num) {
 805390d:	83 ec 1c             	sub    $0x1c,%esp
 8053910:	8b 5c 24 30          	mov    0x30(%esp),%ebx
if(lava_val[bug_num] < 0)  {
	report_label_coverage("ABS", 8);
}

// AOR Label 9
if(1818326625 / bug_num != 1818326625 - bug_num)  {
 8053914:	f7 f3                	div    %ebx
 8053916:	29 de                	sub    %ebx,%esi
 8053918:	39 f0                	cmp    %esi,%eax
 805391a:	74 3e                	je     805395a <lava_get+0x8a>
 805391c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053920:	89 3c 24             	mov    %edi,(%esp)
 8053923:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053927:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805392b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805392f:	b9 66 d5 00 00       	mov    $0xd566,%ecx
 8053934:	e8 0f 10 00 00       	call   8054948 <__afl_maybe_log>
 8053939:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805393d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053941:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053945:	8b 3c 24             	mov    (%esp),%edi
 8053948:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 9);
 805394c:	6a 09                	push   $0x9
 805394e:	68 0f 5b 06 08       	push   $0x8065b0f
 8053953:	e8 28 d7 ff ff       	call   8051080 <report_label_coverage>
 8053958:	58                   	pop    %eax
 8053959:	5a                   	pop    %edx
 805395a:	66 90                	xchg   %ax,%ax
}
// AOR Label 10
if(1818326625 + bug_num != 1818326625 - bug_num)  {
 805395c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053960:	89 3c 24             	mov    %edi,(%esp)
 8053963:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053967:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805396b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805396f:	b9 58 39 00 00       	mov    $0x3958,%ecx
 8053974:	e8 cf 0f 00 00       	call   8054948 <__afl_maybe_log>
 8053979:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805397d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053981:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053985:	8b 3c 24             	mov    (%esp),%edi
 8053988:	8d 64 24 10          	lea    0x10(%esp),%esp
 805398c:	8d 8b 61 76 61 6c    	lea    0x6c617661(%ebx),%ecx
 8053992:	39 ce                	cmp    %ecx,%esi
 8053994:	74 40                	je     80539d6 <lava_get+0x106>
 8053996:	66 90                	xchg   %ax,%ax
 8053998:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805399c:	89 3c 24             	mov    %edi,(%esp)
 805399f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80539a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80539a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80539ab:	b9 f2 70 00 00       	mov    $0x70f2,%ecx
 80539b0:	e8 93 0f 00 00       	call   8054948 <__afl_maybe_log>
 80539b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80539b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80539bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80539c1:	8b 3c 24             	mov    (%esp),%edi
 80539c4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 10);
 80539c8:	6a 0a                	push   $0xa
 80539ca:	68 0f 5b 06 08       	push   $0x8065b0f
 80539cf:	e8 ac d6 ff ff       	call   8051080 <report_label_coverage>
 80539d4:	5d                   	pop    %ebp
 80539d5:	58                   	pop    %eax
 80539d6:	66 90                	xchg   %ax,%ax
}
// AOR Label 11
if(1818326625 * bug_num != 1818326625 - bug_num)  {
 80539d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80539dc:	89 3c 24             	mov    %edi,(%esp)
 80539df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80539e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80539e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80539eb:	b9 1b 58 00 00       	mov    $0x581b,%ecx
 80539f0:	e8 53 0f 00 00       	call   8054948 <__afl_maybe_log>
 80539f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80539f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80539fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053a01:	8b 3c 24             	mov    (%esp),%edi
 8053a04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053a08:	69 fb 61 76 61 6c    	imul   $0x6c617661,%ebx,%edi
 8053a0e:	39 fe                	cmp    %edi,%esi
 8053a10:	74 40                	je     8053a52 <lava_get+0x182>
 8053a12:	66 90                	xchg   %ax,%ax
 8053a14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053a18:	89 3c 24             	mov    %edi,(%esp)
 8053a1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053a1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053a23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053a27:	b9 74 9a 00 00       	mov    $0x9a74,%ecx
 8053a2c:	e8 17 0f 00 00       	call   8054948 <__afl_maybe_log>
 8053a31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053a35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053a39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053a3d:	8b 3c 24             	mov    (%esp),%edi
 8053a40:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("AOR", 11);
 8053a44:	6a 0b                	push   $0xb
 8053a46:	68 0f 5b 06 08       	push   $0x8065b0f
 8053a4b:	e8 30 d6 ff ff       	call   8051080 <report_label_coverage>
 8053a50:	59                   	pop    %ecx
 8053a51:	5f                   	pop    %edi
 8053a52:	66 90                	xchg   %ax,%ax
}

// COR Label 12
if((1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num] || (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {
 8053a54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053a58:	89 3c 24             	mov    %edi,(%esp)
 8053a5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053a5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053a63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053a67:	b9 ce 25 00 00       	mov    $0x25ce,%ecx
 8053a6c:	e8 d7 0e 00 00       	call   8054948 <__afl_maybe_log>
 8053a71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053a75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053a79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053a7d:	8b 3c 24             	mov    (%esp),%edi
 8053a80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053a84:	8b 3c 9d 40 a3 06 08 	mov    0x806a340(,%ebx,4),%edi
 8053a8b:	39 fe                	cmp    %edi,%esi
 8053a8d:	0f 84 6d 02 00 00    	je     8053d00 <lava_get+0x430>
 8053a93:	90                   	nop
 8053a94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053a98:	89 3c 24             	mov    %edi,(%esp)
 8053a9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053a9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053aa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053aa7:	b9 2e ba 00 00       	mov    $0xba2e,%ecx
 8053aac:	e8 97 0e 00 00       	call   8054948 <__afl_maybe_log>
 8053ab1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ab5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ab9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053abd:	8b 3c 24             	mov    (%esp),%edi
 8053ac0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053ac4:	89 f5                	mov    %esi,%ebp
 8053ac6:	0f cd                	bswap  %ebp
 8053ac8:	39 ef                	cmp    %ebp,%edi
 8053aca:	0f 84 6c 02 00 00    	je     8053d3c <lava_get+0x46c>
 8053ad0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053ad4:	89 3c 24             	mov    %edi,(%esp)
 8053ad7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053adb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053adf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053ae3:	b9 a4 dc 00 00       	mov    $0xdca4,%ecx
 8053ae8:	e8 5b 0e 00 00       	call   8054948 <__afl_maybe_log>
 8053aed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053af1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053af5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053af9:	8b 3c 24             	mov    (%esp),%edi
 8053afc:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 12);
}

// ROR Label 13
if((1818326625 - bug_num != lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num]))  {
 8053b00:	c6 44 24 0d 00       	movb   $0x0,0xd(%esp)
 8053b05:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ROR", 13);
 8053b08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053b0c:	89 3c 24             	mov    %edi,(%esp)
 8053b0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053b13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053b17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053b1b:	b9 f9 a1 00 00       	mov    $0xa1f9,%ecx
 8053b20:	e8 23 0e 00 00       	call   8054948 <__afl_maybe_log>
 8053b25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053b29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053b2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053b31:	8b 3c 24             	mov    (%esp),%edi
 8053b34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053b38:	6a 0d                	push   $0xd
 8053b3a:	68 17 5b 06 08       	push   $0x8065b17
 8053b3f:	e8 3c d5 ff ff       	call   8051080 <report_label_coverage>
 8053b44:	59                   	pop    %ecx
 8053b45:	5e                   	pop    %esi
 8053b46:	66 90                	xchg   %ax,%ax
}
// ROR Label 14
if(((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) != lava_val[bug_num]) != ((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {
 8053b48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053b4c:	89 3c 24             	mov    %edi,(%esp)
 8053b4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053b53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053b57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053b5b:	b9 ba 69 00 00       	mov    $0x69ba,%ecx
 8053b60:	e8 e3 0d 00 00       	call   8054948 <__afl_maybe_log>
 8053b65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053b69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053b6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053b71:	8b 3c 24             	mov    (%esp),%edi
 8053b74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053b78:	39 ef                	cmp    %ebp,%edi
 8053b7a:	0f 95 c2             	setne  %dl
 8053b7d:	0f 94 c1             	sete   %cl
 8053b80:	38 ca                	cmp    %cl,%dl
 8053b82:	74 50                	je     8053bd4 <lava_get+0x304>
 8053b84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053b88:	89 3c 24             	mov    %edi,(%esp)
 8053b8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053b8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053b93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053b97:	b9 30 fe 00 00       	mov    $0xfe30,%ecx
 8053b9c:	e8 a7 0d 00 00       	call   8054948 <__afl_maybe_log>
 8053ba1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ba5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ba9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053bad:	8b 3c 24             	mov    (%esp),%edi
 8053bb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053bb4:	88 4c 24 0f          	mov    %cl,0xf(%esp)
 8053bb8:	88 54 24 0e          	mov    %dl,0xe(%esp)
	report_label_coverage("ROR", 14);
 8053bbc:	6a 0e                	push   $0xe
 8053bbe:	68 17 5b 06 08       	push   $0x8065b17
 8053bc3:	e8 b8 d4 ff ff       	call   8051080 <report_label_coverage>
 8053bc8:	58                   	pop    %eax
 8053bc9:	5a                   	pop    %edx
 8053bca:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
 8053bcf:	0f b6 54 24 0e       	movzbl 0xe(%esp),%edx
}

// MCC Label 15
if(1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {
 8053bd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053bd8:	89 3c 24             	mov    %edi,(%esp)
 8053bdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053bdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053be3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053be7:	b9 e2 ee 00 00       	mov    $0xeee2,%ecx
 8053bec:	e8 57 0d 00 00       	call   8054948 <__afl_maybe_log>
 8053bf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053bf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053bf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053bfd:	8b 3c 24             	mov    (%esp),%edi
 8053c00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053c04:	80 7c 24 0d 00       	cmpb   $0x0,0xd(%esp)
 8053c09:	0f 85 c1 01 00 00    	jne    8053dd0 <lava_get+0x500>
 8053c0f:	90                   	nop
 8053c10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053c14:	89 3c 24             	mov    %edi,(%esp)
 8053c17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053c1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053c1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053c23:	b9 eb d6 00 00       	mov    $0xd6eb,%ecx
 8053c28:	e8 1b 0d 00 00       	call   8054948 <__afl_maybe_log>
 8053c2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053c31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053c35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053c39:	8b 3c 24             	mov    (%esp),%edi
 8053c3c:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 16
if(1818326625 - bug_num == lava_val[bug_num] && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {
	report_label_coverage("MCC", 16);
}
// MCC Label 17
if(!(1818326625 - bug_num == lava_val[bug_num]) && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {
 8053c40:	84 c9                	test   %cl,%cl
 8053c42:	0f 85 98 02 00 00    	jne    8053ee0 <lava_get+0x610>
 8053c48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053c4c:	89 3c 24             	mov    %edi,(%esp)
 8053c4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053c53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053c57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053c5b:	b9 28 9e 00 00       	mov    $0x9e28,%ecx
 8053c60:	e8 e3 0c 00 00       	call   8054948 <__afl_maybe_log>
 8053c65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053c69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053c6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053c71:	8b 3c 24             	mov    (%esp),%edi
 8053c74:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 17);
}
// MCC Label 18
if(!(1818326625 - bug_num == lava_val[bug_num]) && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {
 8053c78:	84 d2                	test   %dl,%dl
 8053c7a:	74 42                	je     8053cbe <lava_get+0x3ee>
 8053c7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053c80:	89 3c 24             	mov    %edi,(%esp)
 8053c83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053c87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053c8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053c8f:	b9 8f d4 00 00       	mov    $0xd48f,%ecx
 8053c94:	e8 af 0c 00 00       	call   8054948 <__afl_maybe_log>
 8053c99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053c9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ca1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ca5:	8b 3c 24             	mov    (%esp),%edi
 8053ca8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 18);
 8053cac:	83 ec 08             	sub    $0x8,%esp
 8053caf:	6a 12                	push   $0x12
 8053cb1:	68 1b 5b 06 08       	push   $0x8065b1b
 8053cb6:	e8 c5 d3 ff ff       	call   8051080 <report_label_coverage>
 8053cbb:	83 c4 10             	add    $0x10,%esp
 8053cbe:	66 90                	xchg   %ax,%ax
}
// ABS Label 21
if(lava_val[bug_num] < 0)  {
	report_label_coverage("ABS", 21);
}
return lava_val[bug_num];
 8053cc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053cc4:	89 3c 24             	mov    %edi,(%esp)
 8053cc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053ccb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053ccf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053cd3:	b9 a5 e3 00 00       	mov    $0xe3a5,%ecx
 8053cd8:	e8 6b 0c 00 00       	call   8054948 <__afl_maybe_log>
 8053cdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ce1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ce5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ce9:	8b 3c 24             	mov    (%esp),%edi
 8053cec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053cf0:	8b 04 9d 40 a3 06 08 	mov    0x806a340(,%ebx,4),%eax
}
 8053cf7:	83 c4 1c             	add    $0x1c,%esp
 8053cfa:	5b                   	pop    %ebx
 8053cfb:	5e                   	pop    %esi
 8053cfc:	5f                   	pop    %edi
 8053cfd:	5d                   	pop    %ebp
 8053cfe:	c3                   	ret    
 8053cff:	90                   	nop
 8053d00:	89 fd                	mov    %edi,%ebp
 8053d02:	0f cd                	bswap  %ebp
if(1818326625 * bug_num != 1818326625 - bug_num)  {
	report_label_coverage("AOR", 11);
}

// COR Label 12
if((1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num] || (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {
 8053d04:	39 ef                	cmp    %ebp,%edi
 8053d06:	0f 84 c4 01 00 00    	je     8053ed0 <lava_get+0x600>
 8053d0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053d10:	89 3c 24             	mov    %edi,(%esp)
 8053d13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053d17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053d1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053d1f:	b9 fd 1c 00 00       	mov    $0x1cfd,%ecx
 8053d24:	e8 1f 0c 00 00       	call   8054948 <__afl_maybe_log>
 8053d29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053d2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053d31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053d35:	8b 3c 24             	mov    (%esp),%edi
 8053d38:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("COR", 12);
 8053d3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053d40:	89 3c 24             	mov    %edi,(%esp)
 8053d43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053d47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053d4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053d4f:	b9 31 1c 00 00       	mov    $0x1c31,%ecx
 8053d54:	e8 ef 0b 00 00       	call   8054948 <__afl_maybe_log>
 8053d59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053d5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053d61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053d65:	8b 3c 24             	mov    (%esp),%edi
 8053d68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053d6c:	6a 0c                	push   $0xc
 8053d6e:	68 13 5b 06 08       	push   $0x8065b13
 8053d73:	e8 08 d3 ff ff       	call   8051080 <report_label_coverage>
}

// ROR Label 13
if((1818326625 - bug_num != lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num]))  {
 8053d78:	58                   	pop    %eax
 8053d79:	5a                   	pop    %edx
 8053d7a:	39 fe                	cmp    %edi,%esi
 8053d7c:	0f 95 c2             	setne  %dl
 8053d7f:	0f 94 44 24 0d       	sete   0xd(%esp)
 8053d84:	0f b6 44 24 0d       	movzbl 0xd(%esp),%eax
 8053d89:	38 c2                	cmp    %al,%dl
 8053d8b:	0f 84 b5 fd ff ff    	je     8053b46 <lava_get+0x276>
 8053d91:	8d 76 00             	lea    0x0(%esi),%esi
 8053d94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053d98:	89 3c 24             	mov    %edi,(%esp)
 8053d9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053d9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053da3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053da7:	b9 bd 3b 00 00       	mov    $0x3bbd,%ecx
 8053dac:	e8 97 0b 00 00       	call   8054948 <__afl_maybe_log>
 8053db1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053db5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053db9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053dbd:	8b 3c 24             	mov    (%esp),%edi
 8053dc0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053dc4:	e9 3c fd ff ff       	jmp    8053b05 <lava_get+0x235>
 8053dc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
if(((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) != lava_val[bug_num]) != ((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {
	report_label_coverage("ROR", 14);
}

// MCC Label 15
if(1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {
 8053dd0:	84 c9                	test   %cl,%cl
 8053dd2:	0f 85 78 01 00 00    	jne    8053f50 <lava_get+0x680>
 8053dd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053ddc:	89 3c 24             	mov    %edi,(%esp)
 8053ddf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053de3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053de7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053deb:	b9 b8 d2 00 00       	mov    $0xd2b8,%ecx
 8053df0:	e8 53 0b 00 00       	call   8054948 <__afl_maybe_log>
 8053df5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053df9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053dfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053e01:	8b 3c 24             	mov    (%esp),%edi
 8053e04:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 15);
}
// MCC Label 16
if(1818326625 - bug_num == lava_val[bug_num] && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {
 8053e08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053e0c:	89 3c 24             	mov    %edi,(%esp)
 8053e0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053e13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053e17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053e1b:	b9 28 29 00 00       	mov    $0x2928,%ecx
 8053e20:	e8 23 0b 00 00       	call   8054948 <__afl_maybe_log>
 8053e25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053e29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053e2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053e31:	8b 3c 24             	mov    (%esp),%edi
 8053e34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053e38:	84 d2                	test   %dl,%dl
 8053e3a:	74 3e                	je     8053e7a <lava_get+0x5aa>
 8053e3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053e40:	89 3c 24             	mov    %edi,(%esp)
 8053e43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053e47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053e4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053e4f:	b9 fe 16 00 00       	mov    $0x16fe,%ecx
 8053e54:	e8 ef 0a 00 00       	call   8054948 <__afl_maybe_log>
 8053e59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053e5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053e61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053e65:	8b 3c 24             	mov    (%esp),%edi
 8053e68:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 16);
 8053e6c:	6a 10                	push   $0x10
 8053e6e:	68 1b 5b 06 08       	push   $0x8065b1b
 8053e73:	e8 08 d2 ff ff       	call   8051080 <report_label_coverage>
 8053e78:	59                   	pop    %ecx
 8053e79:	5e                   	pop    %esi
 8053e7a:	66 90                	xchg   %ax,%ax
        
// ABS Label 19
if(bug_num < 0)  {
	report_label_coverage("ABS", 19);
}
dprintf(1, "Successfully triggered bug %d, crashing now!\n", bug_num);
 8053e7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053e80:	89 3c 24             	mov    %edi,(%esp)
 8053e83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053e87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053e8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053e8f:	b9 41 43 00 00       	mov    $0x4341,%ecx
 8053e94:	e8 af 0a 00 00       	call   8054948 <__afl_maybe_log>
 8053e99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053e9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ea1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ea5:	8b 3c 24             	mov    (%esp),%edi
 8053ea8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053eac:	83 ec 04             	sub    $0x4,%esp
 8053eaf:	53                   	push   %ebx
 8053eb0:	68 d4 5c 06 08       	push   $0x8065cd4
 8053eb5:	6a 01                	push   $0x1
 8053eb7:	e8 44 53 ff ff       	call   8049200 <dprintf@plt>
 8053ebc:	83 c4 10             	add    $0x10,%esp
}
// ABS Label 21
if(lava_val[bug_num] < 0)  {
	report_label_coverage("ABS", 21);
}
return lava_val[bug_num];
 8053ebf:	8b 04 9d 40 a3 06 08 	mov    0x806a340(,%ebx,4),%eax
}
 8053ec6:	83 c4 1c             	add    $0x1c,%esp
 8053ec9:	5b                   	pop    %ebx
 8053eca:	5e                   	pop    %esi
 8053ecb:	5f                   	pop    %edi
 8053ecc:	5d                   	pop    %ebp
 8053ecd:	c3                   	ret    
 8053ece:	66 90                	xchg   %ax,%ax
if((1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num] || (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {
	report_label_coverage("COR", 12);
}

// ROR Label 13
if((1818326625 - bug_num != lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num]))  {
 8053ed0:	c6 44 24 0d 01       	movb   $0x1,0xd(%esp)
 8053ed5:	e9 2b fc ff ff       	jmp    8053b05 <lava_get+0x235>
 8053eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8053ee0:	88 54 24 0d          	mov    %dl,0xd(%esp)
if(1818326625 - bug_num == lava_val[bug_num] && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {
	report_label_coverage("MCC", 16);
}
// MCC Label 17
if(!(1818326625 - bug_num == lava_val[bug_num]) && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {
	report_label_coverage("MCC", 17);
 8053ee4:	6a 11                	push   $0x11
 8053ee6:	68 1b 5b 06 08       	push   $0x8065b1b
 8053eeb:	e8 90 d1 ff ff       	call   8051080 <report_label_coverage>
}
// MCC Label 18
if(!(1818326625 - bug_num == lava_val[bug_num]) && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {
 8053ef0:	58                   	pop    %eax
 8053ef1:	5a                   	pop    %edx
 8053ef2:	0f b6 44 24 0d       	movzbl 0xd(%esp),%eax
 8053ef7:	84 c0                	test   %al,%al
 8053ef9:	0f 84 7b ff ff ff    	je     8053e7a <lava_get+0x5aa>
 8053eff:	90                   	nop
 8053f00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053f04:	89 3c 24             	mov    %edi,(%esp)
 8053f07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053f0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053f0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053f13:	b9 04 31 00 00       	mov    $0x3104,%ecx
 8053f18:	e8 2b 0a 00 00       	call   8054948 <__afl_maybe_log>
 8053f1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053f21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053f25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053f29:	8b 3c 24             	mov    (%esp),%edi
 8053f2c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 18);
 8053f30:	83 ec 08             	sub    $0x8,%esp
 8053f33:	6a 12                	push   $0x12
 8053f35:	68 1b 5b 06 08       	push   $0x8065b1b
 8053f3a:	e8 41 d1 ff ff       	call   8051080 <report_label_coverage>
 8053f3f:	83 c4 10             	add    $0x10,%esp
 8053f42:	e9 33 ff ff ff       	jmp    8053e7a <lava_get+0x5aa>
 8053f47:	89 f6                	mov    %esi,%esi
 8053f49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 8053f50:	88 54 24 0d          	mov    %dl,0xd(%esp)
	report_label_coverage("ROR", 14);
}

// MCC Label 15
if(1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {
	report_label_coverage("MCC", 15);
 8053f54:	6a 0f                	push   $0xf
 8053f56:	68 1b 5b 06 08       	push   $0x8065b1b
 8053f5b:	e8 20 d1 ff ff       	call   8051080 <report_label_coverage>
 8053f60:	5f                   	pop    %edi
 8053f61:	5d                   	pop    %ebp
 8053f62:	0f b6 54 24 0d       	movzbl 0xd(%esp),%edx
 8053f67:	e9 9c fe ff ff       	jmp    8053e08 <lava_get+0x538>
 8053f6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08053f70 <usage>:
  {NULL, 0, NULL, 0}
};

void
usage (int status)
{
 8053f70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053f74:	89 3c 24             	mov    %edi,(%esp)
 8053f77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053f7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053f7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053f83:	b9 09 df 00 00       	mov    $0xdf09,%ecx
 8053f88:	e8 bb 09 00 00       	call   8054948 <__afl_maybe_log>
 8053f8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053f91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053f95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053f99:	8b 3c 24             	mov    (%esp),%edi
 8053f9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053fa0:	55                   	push   %ebp
 8053fa1:	57                   	push   %edi
 8053fa2:	56                   	push   %esi
 8053fa3:	53                   	push   %ebx
 8053fa4:	83 ec 4c             	sub    $0x4c,%esp
 8053fa7:	8b 6c 24 60          	mov    0x60(%esp),%ebp
  
// ABS Label 174
if(status < 0)  {
 8053fab:	85 ed                	test   %ebp,%ebp
 8053fad:	0f 88 1e 06 00 00    	js     80545d1 <usage+0x661>
 8053fb3:	90                   	nop
 8053fb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053fb8:	89 3c 24             	mov    %edi,(%esp)
 8053fbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053fbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053fc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053fc7:	b9 e2 8d 00 00       	mov    $0x8de2,%ecx
 8053fcc:	e8 77 09 00 00       	call   8054948 <__afl_maybe_log>
 8053fd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053fd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053fd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053fdd:	8b 3c 24             	mov    (%esp),%edi
 8053fe0:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 174);
}

// ROR Label 175
if((status == 0) != (status != 0))  {
 8053fe4:	0f 95 c3             	setne  %bl
 8053fe7:	0f 94 c0             	sete   %al
 8053fea:	38 d8                	cmp    %bl,%al
 8053fec:	0f 84 df 06 00 00    	je     80546d1 <usage+0x761>
 8053ff2:	66 90                	xchg   %ax,%ax
 8053ff4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053ff8:	89 3c 24             	mov    %edi,(%esp)
 8053ffb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053fff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054003:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054007:	b9 8d fb 00 00       	mov    $0xfb8d,%ecx
 805400c:	e8 37 09 00 00       	call   8054948 <__afl_maybe_log>
 8054011:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054015:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054019:	8b 54 24 04          	mov    0x4(%esp),%edx
 805401d:	8b 3c 24             	mov    (%esp),%edi
 8054020:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 175);
 8054024:	56                   	push   %esi
 8054025:	56                   	push   %esi
 8054026:	68 af 00 00 00       	push   $0xaf
 805402b:	68 17 5b 06 08       	push   $0x8065b17
 8054030:	e8 4b d0 ff ff       	call   8051080 <report_label_coverage>
}
if (status != EXIT_SUCCESS)
 8054035:	83 c4 10             	add    $0x10,%esp
 8054038:	84 db                	test   %bl,%bl
 805403a:	0f 85 e5 05 00 00    	jne    8054625 <usage+0x6b5>
 8054040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054044:	89 3c 24             	mov    %edi,(%esp)
 8054047:	89 54 24 04          	mov    %edx,0x4(%esp)
 805404b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805404f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054053:	b9 24 20 00 00       	mov    $0x2024,%ecx
 8054058:	e8 eb 08 00 00       	call   8054948 <__afl_maybe_log>
 805405d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054065:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054069:	8b 3c 24             	mov    (%esp),%edi
 805406c:	8d 64 24 10          	lea    0x10(%esp),%esp
      
// ABS Label 176
if(program_name < 0)  {
	report_label_coverage("ABS", 176);
}
printf (_("\
 8054070:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054074:	89 3c 24             	mov    %edi,(%esp)
 8054077:	89 54 24 04          	mov    %edx,0x4(%esp)
 805407b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805407f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054083:	b9 fb fe 00 00       	mov    $0xfefb,%ecx
 8054088:	e8 bb 08 00 00       	call   8054948 <__afl_maybe_log>
 805408d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054091:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054095:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054099:	8b 3c 24             	mov    (%esp),%edi
 805409c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80540a0:	51                   	push   %ecx
 80540a1:	6a 05                	push   $0x5
 80540a3:	68 2c 5d 06 08       	push   $0x8065d2c
 80540a8:	6a 00                	push   $0x0
 80540aa:	8b 1d 48 ac 43 08    	mov    0x843ac48,%ebx
 80540b0:	e8 5b 51 ff ff       	call   8049210 <dcgettext@plt>
 80540b5:	5e                   	pop    %esi
 80540b6:	5f                   	pop    %edi
 80540b7:	53                   	push   %ebx
 80540b8:	50                   	push   %eax
 80540b9:	e8 b2 50 ff ff       	call   8049170 <printf@plt>
Usage: %s [OPTION]... [INPUT [OUTPUT]]\n\
"),
              program_name);
      fputs (_("\
 80540be:	83 c4 0c             	add    $0xc,%esp
 80540c1:	8b 3d d8 a2 06 08    	mov    0x806a2d8,%edi
 80540c7:	6a 05                	push   $0x5
 80540c9:	68 54 5d 06 08       	push   $0x8065d54
 80540ce:	6a 00                	push   $0x0
 80540d0:	e8 3b 51 ff ff       	call   8049210 <dcgettext@plt>
 80540d5:	5a                   	pop    %edx
 80540d6:	59                   	pop    %ecx
 80540d7:	57                   	push   %edi
 80540d8:	50                   	push   %eax
 80540d9:	e8 72 52 ff ff       	call   8049350 <fputs_unlocked@plt>
"), stdout);
}
static inline void
emit_mandatory_arg_note (void)
{
  fputs (_("\n\
 80540de:	83 c4 0c             	add    $0xc,%esp
 80540e1:	8b 1d d8 a2 06 08    	mov    0x806a2d8,%ebx
 80540e7:	6a 05                	push   $0x5
 80540e9:	68 04 5e 06 08       	push   $0x8065e04
 80540ee:	6a 00                	push   $0x0
 80540f0:	e8 1b 51 ff ff       	call   8049210 <dcgettext@plt>
 80540f5:	5e                   	pop    %esi
 80540f6:	5f                   	pop    %edi
 80540f7:	53                   	push   %ebx
 80540f8:	50                   	push   %eax
 80540f9:	e8 52 52 ff ff       	call   8049350 <fputs_unlocked@plt>
With no options, matching lines are merged to the first occurrence.\n\
"), stdout);

      emit_mandatory_arg_note ();

     fputs (_("\
 80540fe:	83 c4 0c             	add    $0xc,%esp
 8054101:	8b 35 d8 a2 06 08    	mov    0x806a2d8,%esi
 8054107:	6a 05                	push   $0x5
 8054109:	68 50 5e 06 08       	push   $0x8065e50
 805410e:	6a 00                	push   $0x0
 8054110:	e8 fb 50 ff ff       	call   8049210 <dcgettext@plt>
 8054115:	5a                   	pop    %edx
 8054116:	59                   	pop    %ecx
 8054117:	56                   	push   %esi
 8054118:	50                   	push   %eax
 8054119:	e8 32 52 ff ff       	call   8049350 <fputs_unlocked@plt>
  -c, --count           prefix lines by the number of occurrences\n\
  -d, --repeated        only print duplicate lines, one for each group\n\
"), stdout);
     fputs (_("\
 805411e:	83 c4 0c             	add    $0xc,%esp
 8054121:	8b 1d d8 a2 06 08    	mov    0x806a2d8,%ebx
 8054127:	6a 05                	push   $0x5
 8054129:	68 dc 5e 06 08       	push   $0x8065edc
 805412e:	6a 00                	push   $0x0
 8054130:	e8 db 50 ff ff       	call   8049210 <dcgettext@plt>
 8054135:	5e                   	pop    %esi
 8054136:	5f                   	pop    %edi
 8054137:	53                   	push   %ebx
 8054138:	50                   	push   %eax
 8054139:	e8 12 52 ff ff       	call   8049350 <fputs_unlocked@plt>
  -D, --all-repeated[=METHOD]  print all duplicate lines;\n\
                          groups can be delimited with an empty line;\n\
                          METHOD={none(default),prepend,separate}\n\
"), stdout);
     fputs (_("\
 805413e:	83 c4 0c             	add    $0xc,%esp
 8054141:	8b 3d d8 a2 06 08    	mov    0x806a2d8,%edi
 8054147:	6a 05                	push   $0x5
 8054149:	68 a0 5f 06 08       	push   $0x8065fa0
 805414e:	6a 00                	push   $0x0
 8054150:	e8 bb 50 ff ff       	call   8049210 <dcgettext@plt>
 8054155:	5a                   	pop    %edx
 8054156:	59                   	pop    %ecx
 8054157:	57                   	push   %edi
 8054158:	50                   	push   %eax
 8054159:	e8 f2 51 ff ff       	call   8049350 <fputs_unlocked@plt>
  -f, --skip-fields=N   avoid comparing the first N fields\n\
"), stdout);
     fputs (_("\
 805415e:	83 c4 0c             	add    $0xc,%esp
 8054161:	8b 1d d8 a2 06 08    	mov    0x806a2d8,%ebx
 8054167:	6a 05                	push   $0x5
 8054169:	68 dc 5f 06 08       	push   $0x8065fdc
 805416e:	6a 00                	push   $0x0
 8054170:	e8 9b 50 ff ff       	call   8049210 <dcgettext@plt>
 8054175:	5e                   	pop    %esi
 8054176:	5f                   	pop    %edi
 8054177:	53                   	push   %ebx
 8054178:	50                   	push   %eax
 8054179:	e8 d2 51 ff ff       	call   8049350 <fputs_unlocked@plt>
      --group[=METHOD]  show all items, separating groups with an empty line;\n\
                          METHOD={separate(default),prepend,append,both}\n\
"), stdout);
     fputs (_("\
 805417e:	83 c4 0c             	add    $0xc,%esp
 8054181:	8b 35 d8 a2 06 08    	mov    0x806a2d8,%esi
 8054187:	6a 05                	push   $0x5
 8054189:	68 74 60 06 08       	push   $0x8066074
 805418e:	6a 00                	push   $0x0
 8054190:	e8 7b 50 ff ff       	call   8049210 <dcgettext@plt>
 8054195:	5a                   	pop    %edx
 8054196:	59                   	pop    %ecx
 8054197:	56                   	push   %esi
 8054198:	50                   	push   %eax
 8054199:	e8 b2 51 ff ff       	call   8049350 <fputs_unlocked@plt>
  -i, --ignore-case     ignore differences in case when comparing\n\
  -s, --skip-chars=N    avoid comparing the first N characters\n\
  -u, --unique          only print unique lines\n\
"), stdout);
      fputs (_("\
 805419e:	83 c4 0c             	add    $0xc,%esp
 80541a1:	8b 1d d8 a2 06 08    	mov    0x806a2d8,%ebx
 80541a7:	6a 05                	push   $0x5
 80541a9:	68 28 61 06 08       	push   $0x8066128
 80541ae:	6a 00                	push   $0x0
 80541b0:	e8 5b 50 ff ff       	call   8049210 <dcgettext@plt>
 80541b5:	5e                   	pop    %esi
 80541b6:	5f                   	pop    %edi
 80541b7:	53                   	push   %ebx
 80541b8:	50                   	push   %eax
 80541b9:	e8 92 51 ff ff       	call   8049350 <fputs_unlocked@plt>
  -z, --zero-terminated     line delimiter is NUL, not newline\n\
"), stdout);
     fputs (_("\
 80541be:	83 c4 0c             	add    $0xc,%esp
 80541c1:	8b 3d d8 a2 06 08    	mov    0x806a2d8,%edi
 80541c7:	6a 05                	push   $0x5
 80541c9:	68 68 61 06 08       	push   $0x8066168
 80541ce:	6a 00                	push   $0x0
 80541d0:	e8 3b 50 ff ff       	call   8049210 <dcgettext@plt>
 80541d5:	5a                   	pop    %edx
 80541d6:	59                   	pop    %ecx
 80541d7:	57                   	push   %edi
 80541d8:	50                   	push   %eax
 80541d9:	e8 72 51 ff ff       	call   8049350 <fputs_unlocked@plt>
  -w, --check-chars=N   compare no more than N characters in lines\n\
"), stdout);
     fputs (HELP_OPTION_DESCRIPTION, stdout);
 80541de:	83 c4 0c             	add    $0xc,%esp
 80541e1:	8b 1d d8 a2 06 08    	mov    0x806a2d8,%ebx
 80541e7:	6a 05                	push   $0x5
 80541e9:	68 ac 61 06 08       	push   $0x80661ac
 80541ee:	6a 00                	push   $0x0
 80541f0:	e8 1b 50 ff ff       	call   8049210 <dcgettext@plt>
 80541f5:	5e                   	pop    %esi
 80541f6:	5f                   	pop    %edi
 80541f7:	53                   	push   %ebx
 80541f8:	50                   	push   %eax
 80541f9:	e8 52 51 ff ff       	call   8049350 <fputs_unlocked@plt>
     fputs (VERSION_OPTION_DESCRIPTION, stdout);
 80541fe:	83 c4 0c             	add    $0xc,%esp
 8054201:	8b 35 d8 a2 06 08    	mov    0x806a2d8,%esi
 8054207:	6a 05                	push   $0x5
 8054209:	68 dc 61 06 08       	push   $0x80661dc
 805420e:	6a 00                	push   $0x0
 8054210:	e8 fb 4f ff ff       	call   8049210 <dcgettext@plt>
 8054215:	5a                   	pop    %edx
 8054216:	59                   	pop    %ecx
 8054217:	56                   	push   %esi
 8054218:	50                   	push   %eax
 8054219:	e8 32 51 ff ff       	call   8049350 <fputs_unlocked@plt>
     fputs (_("\
 805421e:	83 c4 0c             	add    $0xc,%esp
 8054221:	8b 1d d8 a2 06 08    	mov    0x806a2d8,%ebx
 8054227:	6a 05                	push   $0x5
 8054229:	68 14 62 06 08       	push   $0x8066214
 805422e:	6a 00                	push   $0x0
 8054230:	e8 db 4f ff ff       	call   8049210 <dcgettext@plt>
 8054235:	5e                   	pop    %esi
 8054236:	5f                   	pop    %edi
 8054237:	53                   	push   %ebx
 8054238:	50                   	push   %eax
 8054239:	e8 12 51 ff ff       	call   8049350 <fputs_unlocked@plt>
\n\
A field is a run of blanks (usually spaces and/or TABs), then non-blank\n\
characters.  Fields are skipped before chars.\n\
"), stdout);
     fputs (_("\
 805423e:	83 c4 0c             	add    $0xc,%esp
 8054241:	8b 3d d8 a2 06 08    	mov    0x806a2d8,%edi
 8054247:	6a 05                	push   $0x5
 8054249:	68 8c 62 06 08       	push   $0x806628c
 805424e:	6a 00                	push   $0x0
 8054250:	e8 bb 4f ff ff       	call   8049210 <dcgettext@plt>
 8054255:	5a                   	pop    %edx
 8054256:	59                   	pop    %ecx
 8054257:	57                   	push   %edi
 8054258:	50                   	push   %eax
}

static inline void
emit_ancillary_info (char const *program)
{
  struct infomap { char const *program; char const *node; } const infomap[] = {
 8054259:	bf 26 5b 06 08       	mov    $0x8065b26,%edi
 805425e:	e8 ed 50 ff ff       	call   8049350 <fputs_unlocked@plt>
 8054263:	c7 44 24 18 26 5b 06 	movl   $0x8065b26,0x18(%esp)
 805426a:	08 
 805426b:	c7 44 24 1c 31 5b 06 	movl   $0x8065b31,0x1c(%esp)
 8054272:	08 
  };

  char const *node = program;
  struct infomap const *map_prog = infomap;

  while (map_prog->program && ! STREQ (program, map_prog->program))
 8054273:	b8 05 00 00 00       	mov    $0x5,%eax
}

static inline void
emit_ancillary_info (char const *program)
{
  struct infomap { char const *program; char const *node; } const infomap[] = {
 8054278:	c7 44 24 20 a9 5b 06 	movl   $0x8065ba9,0x20(%esp)
 805427f:	08 
 8054280:	c7 44 24 24 41 5b 06 	movl   $0x8065b41,0x24(%esp)
 8054287:	08 
 8054288:	c7 44 24 28 57 5b 06 	movl   $0x8065b57,0x28(%esp)
 805428f:	08 
 8054290:	c7 44 24 2c 61 5b 06 	movl   $0x8065b61,0x2c(%esp)
 8054297:	08 
 8054298:	c7 44 24 30 70 5b 06 	movl   $0x8065b70,0x30(%esp)
 805429f:	08 
 80542a0:	c7 44 24 34 61 5b 06 	movl   $0x8065b61,0x34(%esp)
 80542a7:	08 
 80542a8:	c7 44 24 38 7a 5b 06 	movl   $0x8065b7a,0x38(%esp)
 80542af:	08 
 80542b0:	c7 44 24 3c 61 5b 06 	movl   $0x8065b61,0x3c(%esp)
 80542b7:	08 
 80542b8:	c7 44 24 40 84 5b 06 	movl   $0x8065b84,0x40(%esp)
 80542bf:	08 
 80542c0:	c7 44 24 44 61 5b 06 	movl   $0x8065b61,0x44(%esp)
 80542c7:	08 
 80542c8:	c7 44 24 48 00 00 00 	movl   $0x0,0x48(%esp)
 80542cf:	00 
 80542d0:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%esp)
 80542d7:	00 
 80542d8:	83 c4 10             	add    $0x10,%esp
 80542db:	8d 54 24 08          	lea    0x8(%esp),%edx
 80542df:	e9 44 00 00 00       	jmp    8054328 <usage+0x3b8>
 80542e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

  char const *node = program;
  struct infomap const *map_prog = infomap;

  while (map_prog->program && ! STREQ (program, map_prog->program))
    map_prog++;
 80542e8:	83 c2 08             	add    $0x8,%edx
  };

  char const *node = program;
  struct infomap const *map_prog = infomap;

  while (map_prog->program && ! STREQ (program, map_prog->program))
 80542eb:	8b 3a                	mov    (%edx),%edi
 80542ed:	85 ff                	test   %edi,%edi
 80542ef:	0f 84 9f 00 00 00    	je     8054394 <usage+0x424>
 80542f5:	8d 76 00             	lea    0x0(%esi),%esi
 80542f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80542fc:	89 3c 24             	mov    %edi,(%esp)
 80542ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054303:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054307:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805430b:	b9 3b aa 00 00       	mov    $0xaa3b,%ecx
 8054310:	e8 33 06 00 00       	call   8054948 <__afl_maybe_log>
 8054315:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054319:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805431d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054321:	8b 3c 24             	mov    (%esp),%edi
 8054324:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054328:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805432c:	89 3c 24             	mov    %edi,(%esp)
 805432f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054333:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054337:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805433b:	b9 b4 5d 00 00       	mov    $0x5db4,%ecx
 8054340:	e8 03 06 00 00       	call   8054948 <__afl_maybe_log>
 8054345:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054349:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805434d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054351:	8b 3c 24             	mov    (%esp),%edi
 8054354:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054358:	be 28 5b 06 08       	mov    $0x8065b28,%esi
 805435d:	89 c1                	mov    %eax,%ecx
 805435f:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 8054361:	75 85                	jne    80542e8 <usage+0x378>
 8054363:	90                   	nop
 8054364:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054368:	89 3c 24             	mov    %edi,(%esp)
 805436b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805436f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054373:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054377:	b9 cb 4c 00 00       	mov    $0x4ccb,%ecx
 805437c:	e8 c7 05 00 00       	call   8054948 <__afl_maybe_log>
 8054381:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054385:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054389:	8b 54 24 04          	mov    0x4(%esp),%edx
 805438d:	8b 3c 24             	mov    (%esp),%edi
 8054390:	8d 64 24 10          	lea    0x10(%esp),%esp
    map_prog++;

  if (map_prog->node)
 8054394:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054398:	89 3c 24             	mov    %edi,(%esp)
 805439b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805439f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80543a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80543a7:	b9 4c cf 00 00       	mov    $0xcf4c,%ecx
 80543ac:	e8 97 05 00 00       	call   8054948 <__afl_maybe_log>
 80543b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80543b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80543b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80543bd:	8b 3c 24             	mov    (%esp),%edi
 80543c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80543c4:	8b 5a 04             	mov    0x4(%edx),%ebx
 80543c7:	85 db                	test   %ebx,%ebx
 80543c9:	0f 84 9a 03 00 00    	je     8054769 <usage+0x7f9>
 80543cf:	90                   	nop
 80543d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80543d4:	89 3c 24             	mov    %edi,(%esp)
 80543d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80543db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80543df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80543e3:	b9 2a 6c 00 00       	mov    $0x6c2a,%ecx
 80543e8:	e8 5b 05 00 00       	call   8054948 <__afl_maybe_log>
 80543ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80543f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80543f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80543f9:	8b 3c 24             	mov    (%esp),%edi
 80543fc:	8d 64 24 10          	lea    0x10(%esp),%esp
    node = map_prog->node;

  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
 8054400:	57                   	push   %edi
 8054401:	6a 05                	push   $0x5
 8054403:	68 8e 5b 06 08       	push   $0x8065b8e
 8054408:	6a 00                	push   $0x0
 805440a:	e8 01 4e ff ff       	call   8049210 <dcgettext@plt>
 805440f:	83 c4 0c             	add    $0xc,%esp
 8054412:	68 58 63 06 08       	push   $0x8066358
 8054417:	68 a5 5b 06 08       	push   $0x8065ba5
 805441c:	50                   	push   %eax
 805441d:	e8 4e 4d ff ff       	call   8049170 <printf@plt>

  /* Don't output this redundant message for English locales.
     Note we still output for 'C' so that it gets included in the man page.  */
  const char *lc_messages = setlocale (LC_MESSAGES, NULL);
 8054422:	58                   	pop    %eax
 8054423:	5a                   	pop    %edx
 8054424:	6a 00                	push   $0x0
 8054426:	6a 05                	push   $0x5
 8054428:	e8 43 50 ff ff       	call   8049470 <setlocale@plt>
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
 805442d:	83 c4 10             	add    $0x10,%esp
 8054430:	85 c0                	test   %eax,%eax
 8054432:	74 7c                	je     80544b0 <usage+0x540>
 8054434:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054438:	89 3c 24             	mov    %edi,(%esp)
 805443b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805443f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054443:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054447:	b9 6c 3c 00 00       	mov    $0x3c6c,%ecx
 805444c:	e8 f7 04 00 00       	call   8054948 <__afl_maybe_log>
 8054451:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054455:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054459:	8b 54 24 04          	mov    0x4(%esp),%edx
 805445d:	8b 3c 24             	mov    (%esp),%edi
 8054460:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054464:	56                   	push   %esi
 8054465:	6a 03                	push   $0x3
 8054467:	68 b3 5b 06 08       	push   $0x8065bb3
 805446c:	50                   	push   %eax
 805446d:	e8 7e 50 ff ff       	call   80494f0 <strncmp@plt>
 8054472:	83 c4 10             	add    $0x10,%esp
 8054475:	85 c0                	test   %eax,%eax
 8054477:	0f 85 d8 03 00 00    	jne    8054855 <usage+0x8e5>
 805447d:	8d 76 00             	lea    0x0(%esi),%esi
 8054480:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054484:	89 3c 24             	mov    %edi,(%esp)
 8054487:	89 54 24 04          	mov    %edx,0x4(%esp)
 805448b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805448f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054493:	b9 f9 14 00 00       	mov    $0x14f9,%ecx
 8054498:	e8 ab 04 00 00       	call   8054948 <__afl_maybe_log>
 805449d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80544a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80544a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80544a9:	8b 3c 24             	mov    (%esp),%edi
 80544ac:	8d 64 24 10          	lea    0x10(%esp),%esp
         the URLs at http://translationproject.org/team/.  Otherwise, replace
         the entire URL with your translation team's email address.  */
      printf (_("Report %s translation bugs to "
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
 80544b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80544b4:	89 3c 24             	mov    %edi,(%esp)
 80544b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80544bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80544bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80544c3:	b9 52 3c 00 00       	mov    $0x3c52,%ecx
 80544c8:	e8 7b 04 00 00       	call   8054948 <__afl_maybe_log>
 80544cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80544d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80544d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80544d9:	8b 3c 24             	mov    (%esp),%edi
 80544dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80544e0:	50                   	push   %eax
 80544e1:	6a 05                	push   $0x5
          PACKAGE_URL, program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
 80544e3:	be dd 6a 06 08       	mov    $0x8066add,%esi
         the URLs at http://translationproject.org/team/.  Otherwise, replace
         the entire URL with your translation team's email address.  */
      printf (_("Report %s translation bugs to "
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
 80544e8:	68 c8 63 06 08       	push   $0x80663c8
 80544ed:	6a 00                	push   $0x0
 80544ef:	e8 1c 4d ff ff       	call   8049210 <dcgettext@plt>
 80544f4:	83 c4 0c             	add    $0xc,%esp
 80544f7:	68 28 5b 06 08       	push   $0x8065b28
 80544fc:	68 58 63 06 08       	push   $0x8066358
 8054501:	50                   	push   %eax
 8054502:	e8 69 4c ff ff       	call   8049170 <printf@plt>
          PACKAGE_URL, program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
 8054507:	83 c4 10             	add    $0x10,%esp
 805450a:	81 fb 28 5b 06 08    	cmp    $0x8065b28,%ebx
 8054510:	0f 84 eb 03 00 00    	je     8054901 <usage+0x991>
 8054516:	66 90                	xchg   %ax,%ax
 8054518:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805451c:	89 3c 24             	mov    %edi,(%esp)
 805451f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054523:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054527:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805452b:	b9 a9 32 00 00       	mov    $0x32a9,%ecx
 8054530:	e8 13 04 00 00       	call   8054948 <__afl_maybe_log>
 8054535:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054539:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805453d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054541:	8b 3c 24             	mov    (%esp),%edi
 8054544:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054548:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805454c:	89 3c 24             	mov    %edi,(%esp)
 805454f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054553:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054557:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805455b:	b9 f5 fe 00 00       	mov    $0xfef5,%ecx
 8054560:	e8 e3 03 00 00       	call   8054948 <__afl_maybe_log>
 8054565:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054569:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805456d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054571:	8b 3c 24             	mov    (%esp),%edi
 8054574:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054578:	50                   	push   %eax
 8054579:	6a 05                	push   $0x5
 805457b:	68 e8 63 06 08       	push   $0x80663e8
 8054580:	6a 00                	push   $0x0
 8054582:	e8 89 4c ff ff       	call   8049210 <dcgettext@plt>
 8054587:	83 c4 0c             	add    $0xc,%esp
 805458a:	56                   	push   %esi
 805458b:	53                   	push   %ebx
 805458c:	50                   	push   %eax
 805458d:	e8 de 4b ff ff       	call   8049170 <printf@plt>
 8054592:	83 c4 10             	add    $0x10,%esp
 8054595:	8d 76 00             	lea    0x0(%esi),%esi
  
// ABS Label 173
if(status < 0)  {
	report_label_coverage("ABS", 173);
}
exit (status);
 8054598:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805459c:	89 3c 24             	mov    %edi,(%esp)
 805459f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80545a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80545a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80545ab:	b9 57 c8 00 00       	mov    $0xc857,%ecx
 80545b0:	e8 93 03 00 00       	call   8054948 <__afl_maybe_log>
 80545b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80545b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80545bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80545c1:	8b 3c 24             	mov    (%esp),%edi
 80545c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80545c8:	83 ec 0c             	sub    $0xc,%esp
 80545cb:	55                   	push   %ebp
 80545cc:	e8 5f 4d ff ff       	call   8049330 <exit@plt>
 80545d1:	8d 76 00             	lea    0x0(%esi),%esi
usage (int status)
{
  
// ABS Label 174
if(status < 0)  {
	report_label_coverage("ABS", 174);
 80545d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80545d8:	89 3c 24             	mov    %edi,(%esp)
 80545db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80545df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80545e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80545e7:	b9 2c af 00 00       	mov    $0xaf2c,%ecx
 80545ec:	e8 57 03 00 00       	call   8054948 <__afl_maybe_log>
 80545f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80545f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80545f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80545fd:	8b 3c 24             	mov    (%esp),%edi
 8054600:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054604:	68 ae 00 00 00       	push   $0xae
 8054609:	68 2d 5b 06 08       	push   $0x8065b2d
 805460e:	e8 6d ca ff ff       	call   8051080 <report_label_coverage>
}

// ROR Label 175
if((status == 0) != (status != 0))  {
	report_label_coverage("ROR", 175);
 8054613:	68 af 00 00 00       	push   $0xaf
 8054618:	68 17 5b 06 08       	push   $0x8065b17
 805461d:	e8 5e ca ff ff       	call   8051080 <report_label_coverage>
 8054622:	83 c4 10             	add    $0x10,%esp
 8054625:	8d 76 00             	lea    0x0(%esi),%esi
}

static inline void
emit_try_help (void)
{
  fprintf (stderr, _("Try '%s --help' for more information.\n"), program_name);
 8054628:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805462c:	89 3c 24             	mov    %edi,(%esp)
 805462f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054633:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054637:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805463b:	b9 69 1a 00 00       	mov    $0x1a69,%ecx
 8054640:	e8 03 03 00 00       	call   8054948 <__afl_maybe_log>
 8054645:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054649:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805464d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054651:	8b 3c 24             	mov    (%esp),%edi
 8054654:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054658:	8b 1d 48 ac 43 08    	mov    0x843ac48,%ebx
 805465e:	57                   	push   %edi
 805465f:	6a 05                	push   $0x5
 8054661:	68 04 5d 06 08       	push   $0x8065d04
 8054666:	6a 00                	push   $0x0
 8054668:	e8 a3 4b ff ff       	call   8049210 <dcgettext@plt>
 805466d:	83 c4 0c             	add    $0xc,%esp
 8054670:	53                   	push   %ebx
 8054671:	50                   	push   %eax
 8054672:	ff 35 c4 a2 06 08    	pushl  0x806a2c4
 8054678:	e8 43 4d ff ff       	call   80493c0 <fprintf@plt>
"), stdout);
      emit_ancillary_info (PROGRAM_NAME);
    }
  
// ABS Label 173
if(status < 0)  {
 805467d:	83 c4 10             	add    $0x10,%esp
 8054680:	85 ed                	test   %ebp,%ebp
 8054682:	0f 89 0d ff ff ff    	jns    8054595 <usage+0x625>
 8054688:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805468c:	89 3c 24             	mov    %edi,(%esp)
 805468f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054693:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054697:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805469b:	b9 71 9e 00 00       	mov    $0x9e71,%ecx
 80546a0:	e8 a3 02 00 00       	call   8054948 <__afl_maybe_log>
 80546a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80546a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80546ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80546b1:	8b 3c 24             	mov    (%esp),%edi
 80546b4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 173);
 80546b8:	50                   	push   %eax
 80546b9:	50                   	push   %eax
 80546ba:	68 ad 00 00 00       	push   $0xad
 80546bf:	68 2d 5b 06 08       	push   $0x8065b2d
 80546c4:	e8 b7 c9 ff ff       	call   8051080 <report_label_coverage>
 80546c9:	83 c4 10             	add    $0x10,%esp
 80546cc:	e9 c4 fe ff ff       	jmp    8054595 <usage+0x625>
 80546d1:	8d 76 00             	lea    0x0(%esi),%esi

// ROR Label 175
if((status == 0) != (status != 0))  {
	report_label_coverage("ROR", 175);
}
if (status != EXIT_SUCCESS)
 80546d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80546d8:	89 3c 24             	mov    %edi,(%esp)
 80546db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80546df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80546e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80546e7:	b9 31 da 00 00       	mov    $0xda31,%ecx
 80546ec:	e8 57 02 00 00       	call   8054948 <__afl_maybe_log>
 80546f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80546f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80546f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80546fd:	8b 3c 24             	mov    (%esp),%edi
 8054700:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054704:	84 c0                	test   %al,%al
 8054706:	0f 84 64 f9 ff ff    	je     8054070 <usage+0x100>
 805470c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054710:	89 3c 24             	mov    %edi,(%esp)
 8054713:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054717:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805471b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805471f:	b9 98 64 00 00       	mov    $0x6498,%ecx
 8054724:	e8 1f 02 00 00       	call   8054948 <__afl_maybe_log>
 8054729:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805472d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054731:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054735:	8b 3c 24             	mov    (%esp),%edi
 8054738:	8d 64 24 10          	lea    0x10(%esp),%esp
 805473c:	8b 35 48 ac 43 08    	mov    0x843ac48,%esi
 8054742:	50                   	push   %eax
 8054743:	6a 05                	push   $0x5
 8054745:	68 04 5d 06 08       	push   $0x8065d04
 805474a:	6a 00                	push   $0x0
 805474c:	e8 bf 4a ff ff       	call   8049210 <dcgettext@plt>
 8054751:	83 c4 0c             	add    $0xc,%esp
 8054754:	56                   	push   %esi
 8054755:	50                   	push   %eax
 8054756:	ff 35 c4 a2 06 08    	pushl  0x806a2c4
 805475c:	e8 5f 4c ff ff       	call   80493c0 <fprintf@plt>
 8054761:	83 c4 10             	add    $0x10,%esp
 8054764:	e9 2c fe ff ff       	jmp    8054595 <usage+0x625>
 8054769:	8d 76 00             	lea    0x0(%esi),%esi
    map_prog++;

  if (map_prog->node)
    node = map_prog->node;

  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
 805476c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054770:	89 3c 24             	mov    %edi,(%esp)
 8054773:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054777:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805477b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805477f:	b9 01 c3 00 00       	mov    $0xc301,%ecx
 8054784:	e8 bf 01 00 00       	call   8054948 <__afl_maybe_log>
 8054789:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805478d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054791:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054795:	8b 3c 24             	mov    (%esp),%edi
 8054798:	8d 64 24 10          	lea    0x10(%esp),%esp
 805479c:	51                   	push   %ecx
 805479d:	6a 05                	push   $0x5
 805479f:	68 8e 5b 06 08       	push   $0x8065b8e
 80547a4:	6a 00                	push   $0x0
 80547a6:	e8 65 4a ff ff       	call   8049210 <dcgettext@plt>
 80547ab:	83 c4 0c             	add    $0xc,%esp
 80547ae:	68 58 63 06 08       	push   $0x8066358
 80547b3:	68 a5 5b 06 08       	push   $0x8065ba5
 80547b8:	50                   	push   %eax
 80547b9:	e8 b2 49 ff ff       	call   8049170 <printf@plt>

  /* Don't output this redundant message for English locales.
     Note we still output for 'C' so that it gets included in the man page.  */
  const char *lc_messages = setlocale (LC_MESSAGES, NULL);
 80547be:	5b                   	pop    %ebx
 80547bf:	5e                   	pop    %esi
 80547c0:	6a 00                	push   $0x0
 80547c2:	6a 05                	push   $0x5
 80547c4:	e8 a7 4c ff ff       	call   8049470 <setlocale@plt>
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
 80547c9:	83 c4 10             	add    $0x10,%esp
 80547cc:	85 c0                	test   %eax,%eax
 80547ce:	0f 84 d8 00 00 00    	je     80548ac <usage+0x93c>
 80547d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80547d8:	89 3c 24             	mov    %edi,(%esp)
 80547db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80547df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80547e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80547e7:	b9 d9 4a 00 00       	mov    $0x4ad9,%ecx
 80547ec:	e8 57 01 00 00       	call   8054948 <__afl_maybe_log>
 80547f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80547f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80547f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80547fd:	8b 3c 24             	mov    (%esp),%edi
 8054800:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054804:	52                   	push   %edx
 8054805:	6a 03                	push   $0x3
 8054807:	68 b3 5b 06 08       	push   $0x8065bb3
 805480c:	50                   	push   %eax
 805480d:	e8 de 4c ff ff       	call   80494f0 <strncmp@plt>
 8054812:	83 c4 10             	add    $0x10,%esp
 8054815:	85 c0                	test   %eax,%eax
 8054817:	0f 84 8f 00 00 00    	je     80548ac <usage+0x93c>
 805481d:	8d 76 00             	lea    0x0(%esi),%esi
 8054820:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054824:	89 3c 24             	mov    %edi,(%esp)
 8054827:	89 54 24 04          	mov    %edx,0x4(%esp)
 805482b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805482f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054833:	b9 be 5b 00 00       	mov    $0x5bbe,%ecx
 8054838:	e8 0b 01 00 00       	call   8054948 <__afl_maybe_log>
 805483d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054841:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054845:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054849:	8b 3c 24             	mov    (%esp),%edi
 805484c:	8d 64 24 10          	lea    0x10(%esp),%esp
    { "sha384sum", "sha2 utilities" },
    { "sha512sum", "sha2 utilities" },
    { NULL, NULL }
  };

  char const *node = program;
 8054850:	bb 28 5b 06 08       	mov    $0x8065b28,%ebx
 8054855:	8d 76 00             	lea    0x0(%esi),%esi
    {
      /* TRANSLATORS: Replace LANG_CODE in this URL with your language code
         <http://translationproject.org/team/LANG_CODE.html> to form one of
         the URLs at http://translationproject.org/team/.  Otherwise, replace
         the entire URL with your translation team's email address.  */
      printf (_("Report %s translation bugs to "
 8054858:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805485c:	89 3c 24             	mov    %edi,(%esp)
 805485f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054863:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054867:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805486b:	b9 10 23 00 00       	mov    $0x2310,%ecx
 8054870:	e8 d3 00 00 00       	call   8054948 <__afl_maybe_log>
 8054875:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054879:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805487d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054881:	8b 3c 24             	mov    (%esp),%edi
 8054884:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054888:	50                   	push   %eax
 8054889:	6a 05                	push   $0x5
 805488b:	68 80 63 06 08       	push   $0x8066380
 8054890:	6a 00                	push   $0x0
 8054892:	e8 79 49 ff ff       	call   8049210 <dcgettext@plt>
 8054897:	5a                   	pop    %edx
 8054898:	59                   	pop    %ecx
 8054899:	68 28 5b 06 08       	push   $0x8065b28
 805489e:	50                   	push   %eax
 805489f:	e8 cc 48 ff ff       	call   8049170 <printf@plt>
 80548a4:	83 c4 10             	add    $0x10,%esp
 80548a7:	e9 04 fc ff ff       	jmp    80544b0 <usage+0x540>
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
 80548ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80548b0:	89 3c 24             	mov    %edi,(%esp)
 80548b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80548b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80548bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80548bf:	b9 20 18 00 00       	mov    $0x1820,%ecx
 80548c4:	e8 7f 00 00 00       	call   8054948 <__afl_maybe_log>
 80548c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80548cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80548d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80548d5:	8b 3c 24             	mov    (%esp),%edi
 80548d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80548dc:	57                   	push   %edi
 80548dd:	6a 05                	push   $0x5
 80548df:	68 c8 63 06 08       	push   $0x80663c8
 80548e4:	6a 00                	push   $0x0
 80548e6:	e8 25 49 ff ff       	call   8049210 <dcgettext@plt>
 80548eb:	83 c4 0c             	add    $0xc,%esp
 80548ee:	68 28 5b 06 08       	push   $0x8065b28
 80548f3:	68 58 63 06 08       	push   $0x8066358
 80548f8:	50                   	push   %eax
 80548f9:	e8 72 48 ff ff       	call   8049170 <printf@plt>
 80548fe:	83 c4 10             	add    $0x10,%esp
 8054901:	8d 76 00             	lea    0x0(%esi),%esi
    { "sha384sum", "sha2 utilities" },
    { "sha512sum", "sha2 utilities" },
    { NULL, NULL }
  };

  char const *node = program;
 8054904:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054908:	89 3c 24             	mov    %edi,(%esp)
 805490b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805490f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054913:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054917:	b9 f9 c0 00 00       	mov    $0xc0f9,%ecx
 805491c:	e8 27 00 00 00       	call   8054948 <__afl_maybe_log>
 8054921:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054925:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054929:	8b 54 24 04          	mov    0x4(%esp),%edx
 805492d:	8b 3c 24             	mov    (%esp),%edi
 8054930:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054934:	bb 28 5b 06 08       	mov    $0x8065b28,%ebx
      printf (_("Report %s translation bugs to "
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
          PACKAGE_URL, program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
 8054939:	be 4b 5b 06 08       	mov    $0x8065b4b,%esi
 805493e:	e9 05 fc ff ff       	jmp    8054548 <usage+0x5d8>
 8054943:	90                   	nop
 8054944:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08054948 <__afl_maybe_log>:
 8054948:	9f                   	lahf   
 8054949:	0f 90 c0             	seto   %al
 805494c:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8054952:	85 d2                	test   %edx,%edx
 8054954:	74 22                	je     8054978 <__afl_setup>

08054956 <__afl_store>:
 8054956:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 805495c:	31 cf                	xor    %ecx,%edi
 805495e:	d1 e9                	shr    %ecx
 8054960:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8054966:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805496a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805496e <__afl_return>:
 805496e:	04 7f                	add    $0x7f,%al
 8054970:	9e                   	sahf   
 8054971:	c3                   	ret    
 8054972:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08054978 <__afl_setup>:
 8054978:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 805497f:	75 ed                	jne    805496e <__afl_return>
 8054981:	50                   	push   %eax
 8054982:	51                   	push   %ecx
 8054983:	68 80 4a 05 08       	push   $0x8054a80
 8054988:	e8 53 49 ff ff       	call   80492e0 <getenv@plt>
 805498d:	83 c4 04             	add    $0x4,%esp
 8054990:	85 c0                	test   %eax,%eax
 8054992:	0f 84 db 00 00 00    	je     8054a73 <__afl_setup_abort>
 8054998:	50                   	push   %eax
 8054999:	e8 02 4b ff ff       	call   80494a0 <atoi@plt>
 805499e:	83 c4 04             	add    $0x4,%esp
 80549a1:	6a 00                	push   $0x0
 80549a3:	6a 00                	push   $0x0
 80549a5:	50                   	push   %eax
 80549a6:	e8 75 48 ff ff       	call   8049220 <shmat@plt>
 80549ab:	83 c4 0c             	add    $0xc,%esp
 80549ae:	83 f8 ff             	cmp    $0xffffffff,%eax
 80549b1:	0f 84 bc 00 00 00    	je     8054a73 <__afl_setup_abort>
 80549b7:	c6 00 01             	movb   $0x1,(%eax)
 80549ba:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 80549bf:	89 c2                	mov    %eax,%edx
 80549c1:	59                   	pop    %ecx
 80549c2:	58                   	pop    %eax

080549c3 <__afl_forkserver>:
 80549c3:	50                   	push   %eax
 80549c4:	51                   	push   %ecx
 80549c5:	52                   	push   %edx
 80549c6:	6a 04                	push   $0x4
 80549c8:	68 e0 ad 43 08       	push   $0x843ade0
 80549cd:	68 c7 00 00 00       	push   $0xc7
 80549d2:	e8 f9 49 ff ff       	call   80493d0 <write@plt>
 80549d7:	83 c4 0c             	add    $0xc,%esp
 80549da:	83 f8 04             	cmp    $0x4,%eax
 80549dd:	75 6e                	jne    8054a4d <__afl_fork_resume>

080549df <__afl_fork_wait_loop>:
 80549df:	6a 04                	push   $0x4
 80549e1:	68 e0 ad 43 08       	push   $0x843ade0
 80549e6:	68 c6 00 00 00       	push   $0xc6
 80549eb:	e8 70 47 ff ff       	call   8049160 <read@plt>
 80549f0:	83 c4 0c             	add    $0xc,%esp
 80549f3:	83 f8 04             	cmp    $0x4,%eax
 80549f6:	75 74                	jne    8054a6c <__afl_die>
 80549f8:	e8 43 4a ff ff       	call   8049440 <fork@plt>
 80549fd:	83 f8 00             	cmp    $0x0,%eax
 8054a00:	7c 6a                	jl     8054a6c <__afl_die>
 8054a02:	74 49                	je     8054a4d <__afl_fork_resume>
 8054a04:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8054a09:	6a 04                	push   $0x4
 8054a0b:	68 40 ae 43 08       	push   $0x843ae40
 8054a10:	68 c7 00 00 00       	push   $0xc7
 8054a15:	e8 b6 49 ff ff       	call   80493d0 <write@plt>
 8054a1a:	83 c4 0c             	add    $0xc,%esp
 8054a1d:	6a 00                	push   $0x0
 8054a1f:	68 e0 ad 43 08       	push   $0x843ade0
 8054a24:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8054a2a:	e8 41 48 ff ff       	call   8049270 <waitpid@plt>
 8054a2f:	83 c4 0c             	add    $0xc,%esp
 8054a32:	83 f8 00             	cmp    $0x0,%eax
 8054a35:	7e 35                	jle    8054a6c <__afl_die>
 8054a37:	6a 04                	push   $0x4
 8054a39:	68 e0 ad 43 08       	push   $0x843ade0
 8054a3e:	68 c7 00 00 00       	push   $0xc7
 8054a43:	e8 88 49 ff ff       	call   80493d0 <write@plt>
 8054a48:	83 c4 0c             	add    $0xc,%esp
 8054a4b:	eb 92                	jmp    80549df <__afl_fork_wait_loop>

08054a4d <__afl_fork_resume>:
 8054a4d:	68 c6 00 00 00       	push   $0xc6
 8054a52:	e8 c9 4a ff ff       	call   8049520 <close@plt>
 8054a57:	68 c7 00 00 00       	push   $0xc7
 8054a5c:	e8 bf 4a ff ff       	call   8049520 <close@plt>
 8054a61:	83 c4 08             	add    $0x8,%esp
 8054a64:	5a                   	pop    %edx
 8054a65:	59                   	pop    %ecx
 8054a66:	58                   	pop    %eax
 8054a67:	e9 ea fe ff ff       	jmp    8054956 <__afl_store>

08054a6c <__afl_die>:
 8054a6c:	31 c0                	xor    %eax,%eax
 8054a6e:	e8 1d 47 ff ff       	call   8049190 <_exit@plt>

08054a73 <__afl_setup_abort>:
 8054a73:	fe 05 60 ae 43 08    	incb   0x843ae60
 8054a79:	59                   	pop    %ecx
 8054a7a:	58                   	pop    %eax
 8054a7b:	e9 ee fe ff ff       	jmp    805496e <__afl_return>

08054a80 <.AFL_SHM_ENV>:
 8054a80:	5f                   	pop    %edi
 8054a81:	5f                   	pop    %edi
 8054a82:	41                   	inc    %ecx
 8054a83:	46                   	inc    %esi
 8054a84:	4c                   	dec    %esp
 8054a85:	5f                   	pop    %edi
 8054a86:	53                   	push   %ebx
 8054a87:	48                   	dec    %eax
 8054a88:	4d                   	dec    %ebp
 8054a89:	5f                   	pop    %edi
 8054a8a:	49                   	dec    %ecx
 8054a8b:	44                   	inc    %esp
 8054a8c:	00 66 90             	add    %ah,-0x70(%esi)
 8054a8f:	90                   	nop

08054a90 <__argmatch_die>:
ARGMATCH_DIE_DECL;
#endif

static void
__argmatch_die (void)
{
 8054a90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054a94:	89 3c 24             	mov    %edi,(%esp)
 8054a97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054a9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054a9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054aa3:	b9 9d 17 00 00       	mov    $0x179d,%ecx
 8054aa8:	e8 83 0a 00 00       	call   8055530 <__afl_maybe_log>
 8054aad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054ab1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054ab5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054ab9:	8b 3c 24             	mov    (%esp),%edi
 8054abc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054ac0:	83 ec 18             	sub    $0x18,%esp
  ARGMATCH_DIE;
 8054ac3:	6a 01                	push   $0x1
 8054ac5:	e8 a6 f4 ff ff       	call   8053f70 <usage>
}
 8054aca:	83 c4 1c             	add    $0x1c,%esp
 8054acd:	c3                   	ret    
 8054ace:	66 90                	xchg   %ax,%ax

08054ad0 <argmatch>:
   "y" is a valid argument, for 0, and "n" for 1.  */

ptrdiff_t
argmatch (const char *arg, const char *const *arglist,
          const char *vallist, size_t valsize)
{
 8054ad0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ad4:	89 3c 24             	mov    %edi,(%esp)
 8054ad7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054adb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054adf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054ae3:	b9 7d 37 00 00       	mov    $0x377d,%ecx
 8054ae8:	e8 43 0a 00 00       	call   8055530 <__afl_maybe_log>
 8054aed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054af1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054af5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054af9:	8b 3c 24             	mov    (%esp),%edi
 8054afc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054b00:	55                   	push   %ebp
 8054b01:	57                   	push   %edi
 8054b02:	56                   	push   %esi
 8054b03:	53                   	push   %ebx
 8054b04:	83 ec 28             	sub    $0x28,%esp
  size_t i;                     /* Temporary index in ARGLIST.  */
  size_t arglen;                /* Length of ARG.  */
  ptrdiff_t matchind = -1;      /* Index of first nonexact match.  */
  bool ambiguous = false;       /* If true, multiple nonexact match(es).  */

  arglen = strlen (arg);
 8054b07:	ff 74 24 3c          	pushl  0x3c(%esp)
 8054b0b:	e8 90 48 ff ff       	call   80493a0 <strlen@plt>
 8054b10:	83 c4 10             	add    $0x10,%esp
 8054b13:	89 c5                	mov    %eax,%ebp

  /* Test all elements for either exact match or abbreviated matches.  */
  for (i = 0; arglist[i]; i++)
 8054b15:	8b 44 24 34          	mov    0x34(%esp),%eax
 8054b19:	8b 38                	mov    (%eax),%edi
 8054b1b:	85 ff                	test   %edi,%edi
 8054b1d:	0f 84 07 03 00 00    	je     8054e2a <argmatch+0x35a>
 8054b23:	90                   	nop
 8054b24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054b28:	89 3c 24             	mov    %edi,(%esp)
 8054b2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054b2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054b33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054b37:	b9 f5 6c 00 00       	mov    $0x6cf5,%ecx
 8054b3c:	e8 ef 09 00 00       	call   8055530 <__afl_maybe_log>
 8054b41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054b45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054b49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054b4d:	8b 3c 24             	mov    (%esp),%edi
 8054b50:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054b54:	8b 74 24 38          	mov    0x38(%esp),%esi
 8054b58:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
 8054b5d:	31 db                	xor    %ebx,%ebx
 8054b5f:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%esp)
 8054b66:	ff 
 8054b67:	e9 ec 00 00 00       	jmp    8054c58 <argmatch+0x188>
 8054b6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
            /* First nonexact match found.  */
            matchind = i;
          else
            {
              /* Second nonexact match found.  */
              if (vallist == NULL
 8054b70:	8b 54 24 38          	mov    0x38(%esp),%edx
 8054b74:	85 d2                	test   %edx,%edx
 8054b76:	0f 84 e4 01 00 00    	je     8054d60 <argmatch+0x290>
 8054b7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054b80:	89 3c 24             	mov    %edi,(%esp)
 8054b83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054b87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054b8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054b8f:	b9 7d d0 00 00       	mov    $0xd07d,%ecx
 8054b94:	e8 97 09 00 00       	call   8055530 <__afl_maybe_log>
 8054b99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054b9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054ba1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054ba5:	8b 3c 24             	mov    (%esp),%edi
 8054ba8:	8d 64 24 10          	lea    0x10(%esp),%esp
                  || memcmp (vallist + valsize * matchind,
 8054bac:	83 ec 04             	sub    $0x4,%esp
 8054baf:	ff 74 24 40          	pushl  0x40(%esp)
 8054bb3:	56                   	push   %esi
 8054bb4:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 8054bb8:	0f af 4c 24 48       	imul   0x48(%esp),%ecx
 8054bbd:	03 4c 24 44          	add    0x44(%esp),%ecx
 8054bc1:	51                   	push   %ecx
 8054bc2:	e8 29 46 ff ff       	call   80491f0 <memcmp@plt>
 8054bc7:	83 c4 10             	add    $0x10,%esp
                             vallist + valsize * i, valsize))
                {
                  /* There is a real ambiguity, or we could not
                     disambiguate. */
                  ambiguous = true;
 8054bca:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
 8054bcf:	85 c0                	test   %eax,%eax
 8054bd1:	b8 01 00 00 00       	mov    $0x1,%eax
 8054bd6:	0f 45 d0             	cmovne %eax,%edx
 8054bd9:	88 54 24 0f          	mov    %dl,0xf(%esp)
 8054bdd:	8d 76 00             	lea    0x0(%esi),%esi
  bool ambiguous = false;       /* If true, multiple nonexact match(es).  */

  arglen = strlen (arg);

  /* Test all elements for either exact match or abbreviated matches.  */
  for (i = 0; arglist[i]; i++)
 8054be0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054be4:	89 3c 24             	mov    %edi,(%esp)
 8054be7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054beb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054bef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054bf3:	b9 87 ce 00 00       	mov    $0xce87,%ecx
 8054bf8:	e8 33 09 00 00       	call   8055530 <__afl_maybe_log>
 8054bfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054c01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054c05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054c09:	8b 3c 24             	mov    (%esp),%edi
 8054c0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054c10:	8b 7c 24 34          	mov    0x34(%esp),%edi
 8054c14:	83 c3 01             	add    $0x1,%ebx
 8054c17:	03 74 24 3c          	add    0x3c(%esp),%esi
 8054c1b:	8b 3c 9f             	mov    (%edi,%ebx,4),%edi
 8054c1e:	85 ff                	test   %edi,%edi
 8054c20:	0f 84 4a 01 00 00    	je     8054d70 <argmatch+0x2a0>
 8054c26:	66 90                	xchg   %ax,%ax
 8054c28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054c2c:	89 3c 24             	mov    %edi,(%esp)
 8054c2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054c33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054c37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054c3b:	b9 e6 8a 00 00       	mov    $0x8ae6,%ecx
 8054c40:	e8 eb 08 00 00       	call   8055530 <__afl_maybe_log>
 8054c45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054c49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054c4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054c51:	8b 3c 24             	mov    (%esp),%edi
 8054c54:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (!strncmp (arglist[i], arg, arglen))
 8054c58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054c5c:	89 3c 24             	mov    %edi,(%esp)
 8054c5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054c63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054c67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054c6b:	b9 63 d5 00 00       	mov    $0xd563,%ecx
 8054c70:	e8 bb 08 00 00       	call   8055530 <__afl_maybe_log>
 8054c75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054c79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054c7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054c81:	8b 3c 24             	mov    (%esp),%edi
 8054c84:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054c88:	83 ec 04             	sub    $0x4,%esp
 8054c8b:	55                   	push   %ebp
 8054c8c:	ff 74 24 38          	pushl  0x38(%esp)
 8054c90:	57                   	push   %edi
 8054c91:	e8 5a 48 ff ff       	call   80494f0 <strncmp@plt>
 8054c96:	83 c4 10             	add    $0x10,%esp
 8054c99:	85 c0                	test   %eax,%eax
 8054c9b:	0f 85 3c ff ff ff    	jne    8054bdd <argmatch+0x10d>
 8054ca1:	8d 76 00             	lea    0x0(%esi),%esi
 8054ca4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ca8:	89 3c 24             	mov    %edi,(%esp)
 8054cab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054caf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054cb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054cb7:	b9 2f ec 00 00       	mov    $0xec2f,%ecx
 8054cbc:	e8 6f 08 00 00       	call   8055530 <__afl_maybe_log>
 8054cc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054cc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054cc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054ccd:	8b 3c 24             	mov    (%esp),%edi
 8054cd0:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          if (strlen (arglist[i]) == arglen)
 8054cd4:	83 ec 0c             	sub    $0xc,%esp
 8054cd7:	57                   	push   %edi
 8054cd8:	e8 c3 46 ff ff       	call   80493a0 <strlen@plt>
 8054cdd:	83 c4 10             	add    $0x10,%esp
 8054ce0:	39 e8                	cmp    %ebp,%eax
 8054ce2:	0f 84 38 01 00 00    	je     8054e20 <argmatch+0x350>
 8054ce8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054cec:	89 3c 24             	mov    %edi,(%esp)
 8054cef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054cf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054cf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054cfb:	b9 26 45 00 00       	mov    $0x4526,%ecx
 8054d00:	e8 2b 08 00 00       	call   8055530 <__afl_maybe_log>
 8054d05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054d09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054d0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054d11:	8b 3c 24             	mov    (%esp),%edi
 8054d14:	8d 64 24 10          	lea    0x10(%esp),%esp
            /* Exact match found.  */
            return i;
          else if (matchind == -1)
 8054d18:	83 7c 24 08 ff       	cmpl   $0xffffffff,0x8(%esp)
 8054d1d:	0f 85 4d fe ff ff    	jne    8054b70 <argmatch+0xa0>
 8054d23:	90                   	nop
 8054d24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054d28:	89 3c 24             	mov    %edi,(%esp)
 8054d2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054d2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054d33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054d37:	b9 40 60 00 00       	mov    $0x6040,%ecx
 8054d3c:	e8 ef 07 00 00       	call   8055530 <__afl_maybe_log>
 8054d41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054d45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054d49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054d4d:	8b 3c 24             	mov    (%esp),%edi
 8054d50:	8d 64 24 10          	lea    0x10(%esp),%esp
            /* First nonexact match found.  */
            matchind = i;
 8054d54:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 8054d58:	e9 80 fe ff ff       	jmp    8054bdd <argmatch+0x10d>
 8054d5d:	8d 76 00             	lea    0x0(%esi),%esi
                  || memcmp (vallist + valsize * matchind,
                             vallist + valsize * i, valsize))
                {
                  /* There is a real ambiguity, or we could not
                     disambiguate. */
                  ambiguous = true;
 8054d60:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
 8054d65:	e9 73 fe ff ff       	jmp    8054bdd <argmatch+0x10d>
 8054d6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
                }
            }
        }
    }
  if (ambiguous)
 8054d70:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 8054d75:	0f 85 ee 00 00 00    	jne    8054e69 <argmatch+0x399>
 8054d7b:	90                   	nop
 8054d7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054d80:	89 3c 24             	mov    %edi,(%esp)
 8054d83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054d87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054d8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054d8f:	b9 1d 17 00 00       	mov    $0x171d,%ecx
 8054d94:	e8 97 07 00 00       	call   8055530 <__afl_maybe_log>
 8054d99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054d9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054da1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054da5:	8b 3c 24             	mov    (%esp),%edi
 8054da8:	8d 64 24 10          	lea    0x10(%esp),%esp
    return -2;
  else
    return matchind;
 8054dac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054db0:	89 3c 24             	mov    %edi,(%esp)
 8054db3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054db7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054dbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054dbf:	b9 65 7c 00 00       	mov    $0x7c65,%ecx
 8054dc4:	e8 67 07 00 00       	call   8055530 <__afl_maybe_log>
 8054dc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054dcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054dd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054dd5:	8b 3c 24             	mov    (%esp),%edi
 8054dd8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054ddc:	8b 44 24 08          	mov    0x8(%esp),%eax
}
 8054de0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054de4:	89 3c 24             	mov    %edi,(%esp)
 8054de7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054deb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054def:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054df3:	b9 b5 8d 00 00       	mov    $0x8db5,%ecx
 8054df8:	e8 33 07 00 00       	call   8055530 <__afl_maybe_log>
 8054dfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054e01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054e05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054e09:	8b 3c 24             	mov    (%esp),%edi
 8054e0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054e10:	83 c4 1c             	add    $0x1c,%esp
 8054e13:	5b                   	pop    %ebx
 8054e14:	5e                   	pop    %esi
 8054e15:	5f                   	pop    %edi
 8054e16:	5d                   	pop    %ebp
 8054e17:	c3                   	ret    
 8054e18:	90                   	nop
 8054e19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8054e20:	83 c4 1c             	add    $0x1c,%esp
    {
      if (!strncmp (arglist[i], arg, arglen))
        {
          if (strlen (arglist[i]) == arglen)
            /* Exact match found.  */
            return i;
 8054e23:	89 d8                	mov    %ebx,%eax
    }
  if (ambiguous)
    return -2;
  else
    return matchind;
}
 8054e25:	5b                   	pop    %ebx
 8054e26:	5e                   	pop    %esi
 8054e27:	5f                   	pop    %edi
 8054e28:	5d                   	pop    %ebp
 8054e29:	c3                   	ret    
 8054e2a:	66 90                	xchg   %ax,%ax
argmatch (const char *arg, const char *const *arglist,
          const char *vallist, size_t valsize)
{
  size_t i;                     /* Temporary index in ARGLIST.  */
  size_t arglen;                /* Length of ARG.  */
  ptrdiff_t matchind = -1;      /* Index of first nonexact match.  */
 8054e2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054e30:	89 3c 24             	mov    %edi,(%esp)
 8054e33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054e37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054e3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054e3f:	b9 c0 c7 00 00       	mov    $0xc7c0,%ecx
 8054e44:	e8 e7 06 00 00       	call   8055530 <__afl_maybe_log>
 8054e49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054e4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054e51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054e55:	8b 3c 24             	mov    (%esp),%edi
 8054e58:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054e5c:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%esp)
 8054e63:	ff 
 8054e64:	e9 43 ff ff ff       	jmp    8054dac <argmatch+0x2dc>
 8054e69:	8d 76 00             	lea    0x0(%esi),%esi
                }
            }
        }
    }
  if (ambiguous)
    return -2;
 8054e6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054e70:	89 3c 24             	mov    %edi,(%esp)
 8054e73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054e77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054e7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054e7f:	b9 b0 a8 00 00       	mov    $0xa8b0,%ecx
 8054e84:	e8 a7 06 00 00       	call   8055530 <__afl_maybe_log>
 8054e89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054e8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054e91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054e95:	8b 3c 24             	mov    (%esp),%edi
 8054e98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054e9c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
 8054ea1:	e9 3a ff ff ff       	jmp    8054de0 <argmatch+0x310>
 8054ea6:	8d 76 00             	lea    0x0(%esi),%esi
 8054ea9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08054eb0 <argmatch_invalid>:
   VALUE is the invalid value that was given.
   PROBLEM is the return value from argmatch.  */

void
argmatch_invalid (const char *context, const char *value, ptrdiff_t problem)
{
 8054eb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054eb4:	89 3c 24             	mov    %edi,(%esp)
 8054eb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054ebb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054ebf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054ec3:	b9 3d ff 00 00       	mov    $0xff3d,%ecx
 8054ec8:	e8 63 06 00 00       	call   8055530 <__afl_maybe_log>
 8054ecd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054ed1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054ed5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054ed9:	8b 3c 24             	mov    (%esp),%edi
 8054edc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054ee0:	56                   	push   %esi
 8054ee1:	53                   	push   %ebx
 8054ee2:	83 ec 04             	sub    $0x4,%esp
  char const *format = (problem == -1
 8054ee5:	83 7c 24 18 ff       	cmpl   $0xffffffff,0x18(%esp)
 8054eea:	0f 84 b0 00 00 00    	je     8054fa0 <argmatch_invalid+0xf0>
 8054ef0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ef4:	89 3c 24             	mov    %edi,(%esp)
 8054ef7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054efb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054eff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054f03:	b9 a6 15 00 00       	mov    $0x15a6,%ecx
 8054f08:	e8 23 06 00 00       	call   8055530 <__afl_maybe_log>
 8054f0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054f11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054f15:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054f19:	8b 3c 24             	mov    (%esp),%edi
 8054f1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054f20:	83 ec 04             	sub    $0x4,%esp
 8054f23:	6a 05                	push   $0x5
 8054f25:	68 70 66 06 08       	push   $0x8066670
 8054f2a:	6a 00                	push   $0x0
 8054f2c:	e8 df 42 ff ff       	call   8049210 <dcgettext@plt>
 8054f31:	83 c4 10             	add    $0x10,%esp
 8054f34:	89 c6                	mov    %eax,%esi
 8054f36:	66 90                	xchg   %ax,%ax
                        ? _("invalid argument %s for %s")
                        : _("ambiguous argument %s for %s"));

  error (0, 0, format, quotearg_n_style (0, ARGMATCH_QUOTING_STYLE, value),
 8054f38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054f3c:	89 3c 24             	mov    %edi,(%esp)
 8054f3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054f43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054f47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054f4b:	b9 be a1 00 00       	mov    $0xa1be,%ecx
 8054f50:	e8 db 05 00 00       	call   8055530 <__afl_maybe_log>
 8054f55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054f59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054f5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054f61:	8b 3c 24             	mov    (%esp),%edi
 8054f64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054f68:	83 ec 08             	sub    $0x8,%esp
 8054f6b:	ff 74 24 18          	pushl  0x18(%esp)
 8054f6f:	6a 01                	push   $0x1
 8054f71:	e8 ca 99 00 00       	call   805e940 <quote_n>
 8054f76:	83 c4 0c             	add    $0xc,%esp
 8054f79:	89 c3                	mov    %eax,%ebx
 8054f7b:	ff 74 24 18          	pushl  0x18(%esp)
 8054f7f:	6a 06                	push   $0x6
 8054f81:	6a 00                	push   $0x0
 8054f83:	e8 08 94 00 00       	call   805e390 <quotearg_n_style>
 8054f88:	89 1c 24             	mov    %ebx,(%esp)
 8054f8b:	50                   	push   %eax
 8054f8c:	56                   	push   %esi
 8054f8d:	6a 00                	push   $0x0
 8054f8f:	6a 00                	push   $0x0
 8054f91:	e8 2a 43 ff ff       	call   80492c0 <error@plt>
         quote_n (1, context));
}
 8054f96:	83 c4 24             	add    $0x24,%esp
 8054f99:	5b                   	pop    %ebx
 8054f9a:	5e                   	pop    %esi
 8054f9b:	c3                   	ret    
 8054f9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   PROBLEM is the return value from argmatch.  */

void
argmatch_invalid (const char *context, const char *value, ptrdiff_t problem)
{
  char const *format = (problem == -1
 8054fa0:	83 ec 04             	sub    $0x4,%esp
 8054fa3:	6a 05                	push   $0x5
 8054fa5:	68 55 66 06 08       	push   $0x8066655
 8054faa:	6a 00                	push   $0x0
 8054fac:	e8 5f 42 ff ff       	call   8049210 <dcgettext@plt>
 8054fb1:	83 c4 10             	add    $0x10,%esp
 8054fb4:	89 c6                	mov    %eax,%esi
 8054fb6:	e9 7b ff ff ff       	jmp    8054f36 <argmatch_invalid+0x86>
 8054fbb:	90                   	nop
 8054fbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08054fc0 <argmatch_valid>:
   VALLIST is a pointer to an array of values.
   VALSIZE is the size of the elements of VALLIST */
void
argmatch_valid (const char *const *arglist,
                const char *vallist, size_t valsize)
{
 8054fc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054fc4:	89 3c 24             	mov    %edi,(%esp)
 8054fc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054fcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054fcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054fd3:	b9 ce 43 00 00       	mov    $0x43ce,%ecx
 8054fd8:	e8 53 05 00 00       	call   8055530 <__afl_maybe_log>
 8054fdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054fe1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054fe5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054fe9:	8b 3c 24             	mov    (%esp),%edi
 8054fec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054ff0:	55                   	push   %ebp
 8054ff1:	57                   	push   %edi
 8054ff2:	56                   	push   %esi
 8054ff3:	53                   	push   %ebx
 8054ff4:	83 ec 20             	sub    $0x20,%esp
  size_t i;
  const char *last_val = NULL;

  /* We try to put synonyms on the same line.  The assumption is that
     synonyms follow each other */
  fputs (_("Valid arguments are:"), stderr);
 8054ff7:	8b 3d c4 a2 06 08    	mov    0x806a2c4,%edi
   VALLIST is a pointer to an array of values.
   VALSIZE is the size of the elements of VALLIST */
void
argmatch_valid (const char *const *arglist,
                const char *vallist, size_t valsize)
{
 8054ffd:	8b 44 24 34          	mov    0x34(%esp),%eax
 8055001:	8b 54 24 3c          	mov    0x3c(%esp),%edx
 8055005:	8b 5c 24 38          	mov    0x38(%esp),%ebx
 8055009:	89 44 24 10          	mov    %eax,0x10(%esp)
 805500d:	89 54 24 0c          	mov    %edx,0xc(%esp)
 8055011:	89 c6                	mov    %eax,%esi
  size_t i;
  const char *last_val = NULL;

  /* We try to put synonyms on the same line.  The assumption is that
     synonyms follow each other */
  fputs (_("Valid arguments are:"), stderr);
 8055013:	6a 05                	push   $0x5
 8055015:	68 8d 66 06 08       	push   $0x806668d
 805501a:	6a 00                	push   $0x0
 805501c:	e8 ef 41 ff ff       	call   8049210 <dcgettext@plt>
 8055021:	5a                   	pop    %edx
 8055022:	59                   	pop    %ecx
 8055023:	57                   	push   %edi
 8055024:	50                   	push   %eax
  for (i = 0; arglist[i]; i++)
 8055025:	31 ff                	xor    %edi,%edi
  size_t i;
  const char *last_val = NULL;

  /* We try to put synonyms on the same line.  The assumption is that
     synonyms follow each other */
  fputs (_("Valid arguments are:"), stderr);
 8055027:	e8 24 43 ff ff       	call   8049350 <fputs_unlocked@plt>
  for (i = 0; arglist[i]; i++)
 805502c:	8b 2e                	mov    (%esi),%ebp
 805502e:	83 c4 10             	add    $0x10,%esp
 8055031:	31 f6                	xor    %esi,%esi
 8055033:	85 ed                	test   %ebp,%ebp
 8055035:	0f 85 d9 00 00 00    	jne    8055114 <argmatch_valid+0x154>
 805503b:	90                   	nop
 805503c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055040:	89 3c 24             	mov    %edi,(%esp)
 8055043:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055047:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805504b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805504f:	b9 b5 aa 00 00       	mov    $0xaab5,%ecx
 8055054:	e8 d7 04 00 00       	call   8055530 <__afl_maybe_log>
 8055059:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805505d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055061:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055065:	8b 3c 24             	mov    (%esp),%edi
 8055068:	8d 64 24 10          	lea    0x10(%esp),%esp
 805506c:	e9 7f 01 00 00       	jmp    80551f0 <argmatch_valid+0x230>
 8055071:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    if ((i == 0)
        || memcmp (last_val, vallist + valsize * i, valsize))
      {
        fprintf (stderr, "\n  - %s", quote (arglist[i]));
 8055078:	83 ec 0c             	sub    $0xc,%esp
 805507b:	89 df                	mov    %ebx,%edi
 805507d:	55                   	push   %ebp
 805507e:	e8 0d 99 00 00       	call   805e990 <quote>

# ifdef __va_arg_pack
__fortify_function int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
 8055083:	50                   	push   %eax
 8055084:	68 a2 66 06 08       	push   $0x80666a2
 8055089:	6a 01                	push   $0x1
 805508b:	ff 35 c4 a2 06 08    	pushl  0x806a2c4
 8055091:	e8 2a 44 ff ff       	call   80494c0 <__fprintf_chk@plt>
        last_val = vallist + valsize * i;
 8055096:	83 c4 20             	add    $0x20,%esp
 8055099:	8d 76 00             	lea    0x0(%esi),%esi
  const char *last_val = NULL;

  /* We try to put synonyms on the same line.  The assumption is that
     synonyms follow each other */
  fputs (_("Valid arguments are:"), stderr);
  for (i = 0; arglist[i]; i++)
 805509c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80550a0:	89 3c 24             	mov    %edi,(%esp)
 80550a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80550a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80550ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80550af:	b9 18 80 00 00       	mov    $0x8018,%ecx
 80550b4:	e8 77 04 00 00       	call   8055530 <__afl_maybe_log>
 80550b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80550bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80550c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80550c5:	8b 3c 24             	mov    (%esp),%edi
 80550c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80550cc:	8b 6c 24 0c          	mov    0xc(%esp),%ebp
 80550d0:	83 c6 01             	add    $0x1,%esi
 80550d3:	03 5c 24 08          	add    0x8(%esp),%ebx
 80550d7:	8b 6c b5 00          	mov    0x0(%ebp,%esi,4),%ebp
 80550db:	85 ed                	test   %ebp,%ebp
 80550dd:	0f 84 0d 01 00 00    	je     80551f0 <argmatch_valid+0x230>
 80550e3:	90                   	nop
 80550e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80550e8:	89 3c 24             	mov    %edi,(%esp)
 80550eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80550ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80550f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80550f7:	b9 fd 56 00 00       	mov    $0x56fd,%ecx
 80550fc:	e8 2f 04 00 00       	call   8055530 <__afl_maybe_log>
 8055101:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055105:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055109:	8b 54 24 04          	mov    0x4(%esp),%edx
 805510d:	8b 3c 24             	mov    (%esp),%edi
 8055110:	8d 64 24 10          	lea    0x10(%esp),%esp
    if ((i == 0)
 8055114:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055118:	89 3c 24             	mov    %edi,(%esp)
 805511b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805511f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055123:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055127:	b9 16 0e 00 00       	mov    $0xe16,%ecx
 805512c:	e8 ff 03 00 00       	call   8055530 <__afl_maybe_log>
 8055131:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055135:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055139:	8b 54 24 04          	mov    0x4(%esp),%edx
 805513d:	8b 3c 24             	mov    (%esp),%edi
 8055140:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055144:	85 f6                	test   %esi,%esi
 8055146:	0f 84 2c ff ff ff    	je     8055078 <argmatch_valid+0xb8>
 805514c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055150:	89 3c 24             	mov    %edi,(%esp)
 8055153:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805515b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805515f:	b9 5b 1d 00 00       	mov    $0x1d5b,%ecx
 8055164:	e8 c7 03 00 00       	call   8055530 <__afl_maybe_log>
 8055169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805516d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055171:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055175:	8b 3c 24             	mov    (%esp),%edi
 8055178:	8d 64 24 10          	lea    0x10(%esp),%esp
        || memcmp (last_val, vallist + valsize * i, valsize))
 805517c:	83 ec 04             	sub    $0x4,%esp
 805517f:	ff 74 24 0c          	pushl  0xc(%esp)
 8055183:	53                   	push   %ebx
 8055184:	57                   	push   %edi
 8055185:	e8 66 40 ff ff       	call   80491f0 <memcmp@plt>
 805518a:	83 c4 10             	add    $0x10,%esp
 805518d:	85 c0                	test   %eax,%eax
 805518f:	0f 85 e3 fe ff ff    	jne    8055078 <argmatch_valid+0xb8>
 8055195:	8d 76 00             	lea    0x0(%esi),%esi
 8055198:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805519c:	89 3c 24             	mov    %edi,(%esp)
 805519f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80551a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80551a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80551ab:	b9 86 f0 00 00       	mov    $0xf086,%ecx
 80551b0:	e8 7b 03 00 00       	call   8055530 <__afl_maybe_log>
 80551b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80551b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80551bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80551c1:	8b 3c 24             	mov    (%esp),%edi
 80551c4:	8d 64 24 10          	lea    0x10(%esp),%esp
        fprintf (stderr, "\n  - %s", quote (arglist[i]));
        last_val = vallist + valsize * i;
      }
    else
      {
        fprintf (stderr, ", %s", quote (arglist[i]));
 80551c8:	83 ec 0c             	sub    $0xc,%esp
 80551cb:	55                   	push   %ebp
 80551cc:	e8 bf 97 00 00       	call   805e990 <quote>
 80551d1:	50                   	push   %eax
 80551d2:	68 aa 66 06 08       	push   $0x80666aa
 80551d7:	6a 01                	push   $0x1
 80551d9:	ff 35 c4 a2 06 08    	pushl  0x806a2c4
 80551df:	e8 dc 42 ff ff       	call   80494c0 <__fprintf_chk@plt>
 80551e4:	83 c4 20             	add    $0x20,%esp
 80551e7:	e9 ad fe ff ff       	jmp    8055099 <argmatch_valid+0xd9>
 80551ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      }
  putc ('\n', stderr);
 80551f0:	a1 c4 a2 06 08       	mov    0x806a2c4,%eax
# ifdef __USE_POSIX
/* This is defined in POSIX.1:1996.  */
__STDIO_INLINE int
putc_unlocked (int __c, FILE *__stream)
{
  return _IO_putc_unlocked (__c, __stream);
 80551f5:	8b 58 14             	mov    0x14(%eax),%ebx
 80551f8:	3b 58 18             	cmp    0x18(%eax),%ebx
 80551fb:	73 44                	jae    8055241 <argmatch_valid+0x281>
 80551fd:	8d 76 00             	lea    0x0(%esi),%esi
 8055200:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055204:	89 3c 24             	mov    %edi,(%esp)
 8055207:	89 54 24 04          	mov    %edx,0x4(%esp)
 805520b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805520f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055213:	b9 26 83 00 00       	mov    $0x8326,%ecx
 8055218:	e8 13 03 00 00       	call   8055530 <__afl_maybe_log>
 805521d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055221:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055225:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055229:	8b 3c 24             	mov    (%esp),%edi
 805522c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055230:	8d 53 01             	lea    0x1(%ebx),%edx
 8055233:	89 50 14             	mov    %edx,0x14(%eax)
 8055236:	c6 03 0a             	movb   $0xa,(%ebx)
}
 8055239:	83 c4 1c             	add    $0x1c,%esp
 805523c:	5b                   	pop    %ebx
 805523d:	5e                   	pop    %esi
 805523e:	5f                   	pop    %edi
 805523f:	5d                   	pop    %ebp
 8055240:	c3                   	ret    
 8055241:	8d 76 00             	lea    0x0(%esi),%esi
 8055244:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055248:	89 3c 24             	mov    %edi,(%esp)
 805524b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805524f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055253:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055257:	b9 82 3f 00 00       	mov    $0x3f82,%ecx
 805525c:	e8 cf 02 00 00       	call   8055530 <__afl_maybe_log>
 8055261:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055265:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055269:	8b 54 24 04          	mov    0x4(%esp),%edx
 805526d:	8b 3c 24             	mov    (%esp),%edi
 8055270:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055274:	c7 44 24 34 0a 00 00 	movl   $0xa,0x34(%esp)
 805527b:	00 
 805527c:	89 44 24 30          	mov    %eax,0x30(%esp)
 8055280:	83 c4 1c             	add    $0x1c,%esp
 8055283:	5b                   	pop    %ebx
 8055284:	5e                   	pop    %esi
 8055285:	5f                   	pop    %edi
 8055286:	5d                   	pop    %ebp
 8055287:	e9 04 42 ff ff       	jmp    8049490 <__overflow@plt>
 805528c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08055290 <__xargmatch_internal>:
ptrdiff_t
__xargmatch_internal (const char *context,
                      const char *arg, const char *const *arglist,
                      const char *vallist, size_t valsize,
                      argmatch_exit_fn exit_fn)
{
 8055290:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055294:	89 3c 24             	mov    %edi,(%esp)
 8055297:	89 54 24 04          	mov    %edx,0x4(%esp)
 805529b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805529f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80552a3:	b9 dc 10 00 00       	mov    $0x10dc,%ecx
 80552a8:	e8 83 02 00 00       	call   8055530 <__afl_maybe_log>
 80552ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80552b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80552b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80552b9:	8b 3c 24             	mov    (%esp),%edi
 80552bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80552c0:	55                   	push   %ebp
 80552c1:	57                   	push   %edi
 80552c2:	56                   	push   %esi
 80552c3:	53                   	push   %ebx
 80552c4:	83 ec 0c             	sub    $0xc,%esp
 80552c7:	8b 6c 24 24          	mov    0x24(%esp),%ebp
 80552cb:	8b 5c 24 28          	mov    0x28(%esp),%ebx
 80552cf:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 80552d3:	8b 7c 24 30          	mov    0x30(%esp),%edi
  ptrdiff_t res = argmatch (arg, arglist, vallist, valsize);
 80552d7:	57                   	push   %edi
 80552d8:	56                   	push   %esi
 80552d9:	53                   	push   %ebx
 80552da:	55                   	push   %ebp
 80552db:	e8 f0 f7 ff ff       	call   8054ad0 <argmatch>
 80552e0:	83 c4 10             	add    $0x10,%esp
  if (res >= 0)
 80552e3:	85 c0                	test   %eax,%eax
 80552e5:	78 69                	js     8055350 <__xargmatch_internal+0xc0>
 80552e7:	90                   	nop
 80552e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80552ec:	89 3c 24             	mov    %edi,(%esp)
 80552ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80552f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80552f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80552fb:	b9 95 d0 00 00       	mov    $0xd095,%ecx
 8055300:	e8 2b 02 00 00       	call   8055530 <__afl_maybe_log>
 8055305:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055309:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805530d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055311:	8b 3c 24             	mov    (%esp),%edi
 8055314:	8d 64 24 10          	lea    0x10(%esp),%esp
  argmatch_invalid (context, arg, res);
  argmatch_valid (arglist, vallist, valsize);
  (*exit_fn) ();

  return -1; /* To please the compilers. */
}
 8055318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805531c:	89 3c 24             	mov    %edi,(%esp)
 805531f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805532b:	b9 db db 00 00       	mov    $0xdbdb,%ecx
 8055330:	e8 fb 01 00 00       	call   8055530 <__afl_maybe_log>
 8055335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805533d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055341:	8b 3c 24             	mov    (%esp),%edi
 8055344:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055348:	83 c4 0c             	add    $0xc,%esp
 805534b:	5b                   	pop    %ebx
 805534c:	5e                   	pop    %esi
 805534d:	5f                   	pop    %edi
 805534e:	5d                   	pop    %ebp
 805534f:	c3                   	ret    
  if (res >= 0)
    /* Success. */
    return res;

  /* We failed.  Explain why. */
  argmatch_invalid (context, arg, res);
 8055350:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055354:	89 3c 24             	mov    %edi,(%esp)
 8055357:	89 54 24 04          	mov    %edx,0x4(%esp)
 805535b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805535f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055363:	b9 d9 d7 00 00       	mov    $0xd7d9,%ecx
 8055368:	e8 c3 01 00 00       	call   8055530 <__afl_maybe_log>
 805536d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055371:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055375:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055379:	8b 3c 24             	mov    (%esp),%edi
 805537c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055380:	83 ec 04             	sub    $0x4,%esp
 8055383:	50                   	push   %eax
 8055384:	55                   	push   %ebp
 8055385:	ff 74 24 2c          	pushl  0x2c(%esp)
 8055389:	e8 22 fb ff ff       	call   8054eb0 <argmatch_invalid>
  argmatch_valid (arglist, vallist, valsize);
 805538e:	83 c4 0c             	add    $0xc,%esp
 8055391:	57                   	push   %edi
 8055392:	56                   	push   %esi
 8055393:	53                   	push   %ebx
 8055394:	e8 27 fc ff ff       	call   8054fc0 <argmatch_valid>
  (*exit_fn) ();
 8055399:	ff 54 24 44          	call   *0x44(%esp)

  return -1; /* To please the compilers. */
 805539d:	83 c4 10             	add    $0x10,%esp
 80553a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80553a5:	e9 6e ff ff ff       	jmp    8055318 <__xargmatch_internal+0x88>
 80553aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080553b0 <argmatch_to_argument>:
   return the first corresponding argument in ARGLIST */
const char *
argmatch_to_argument (const char *value,
                      const char *const *arglist,
                      const char *vallist, size_t valsize)
{
 80553b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80553b4:	89 3c 24             	mov    %edi,(%esp)
 80553b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80553bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80553bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80553c3:	b9 a9 e8 00 00       	mov    $0xe8a9,%ecx
 80553c8:	e8 63 01 00 00       	call   8055530 <__afl_maybe_log>
 80553cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80553d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80553d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80553d9:	8b 3c 24             	mov    (%esp),%edi
 80553dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80553e0:	55                   	push   %ebp
 80553e1:	57                   	push   %edi
 80553e2:	56                   	push   %esi
 80553e3:	53                   	push   %ebx
 80553e4:	83 ec 0c             	sub    $0xc,%esp
 80553e7:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 80553eb:	8b 74 24 2c          	mov    0x2c(%esp),%esi
  size_t i;

  for (i = 0; arglist[i]; i++)
 80553ef:	8b 3b                	mov    (%ebx),%edi
 80553f1:	85 ff                	test   %edi,%edi
 80553f3:	0f 84 fb 00 00 00    	je     80554f4 <argmatch_to_argument+0x144>
 80553f9:	8d 76 00             	lea    0x0(%esi),%esi
 80553fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055400:	89 3c 24             	mov    %edi,(%esp)
 8055403:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055407:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805540b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805540f:	b9 80 cb 00 00       	mov    $0xcb80,%ecx
 8055414:	e8 17 01 00 00       	call   8055530 <__afl_maybe_log>
 8055419:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805541d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055421:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055425:	8b 3c 24             	mov    (%esp),%edi
 8055428:	8d 64 24 10          	lea    0x10(%esp),%esp
 805542c:	8b 6c 24 28          	mov    0x28(%esp),%ebp
 8055430:	83 c3 04             	add    $0x4,%ebx
 8055433:	eb 43                	jmp    8055478 <argmatch_to_argument+0xc8>
 8055435:	8d 76 00             	lea    0x0(%esi),%esi
 8055438:	8b 3b                	mov    (%ebx),%edi
 805543a:	01 f5                	add    %esi,%ebp
 805543c:	83 c3 04             	add    $0x4,%ebx
 805543f:	85 ff                	test   %edi,%edi
 8055441:	0f 84 ad 00 00 00    	je     80554f4 <argmatch_to_argument+0x144>
 8055447:	90                   	nop
 8055448:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805544c:	89 3c 24             	mov    %edi,(%esp)
 805544f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055453:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055457:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805545b:	b9 4e 0f 00 00       	mov    $0xf4e,%ecx
 8055460:	e8 cb 00 00 00       	call   8055530 <__afl_maybe_log>
 8055465:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055469:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805546d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055471:	8b 3c 24             	mov    (%esp),%edi
 8055474:	8d 64 24 10          	lea    0x10(%esp),%esp
    if (!memcmp (value, vallist + valsize * i, valsize))
 8055478:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805547c:	89 3c 24             	mov    %edi,(%esp)
 805547f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055483:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055487:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805548b:	b9 c4 1f 00 00       	mov    $0x1fc4,%ecx
 8055490:	e8 9b 00 00 00       	call   8055530 <__afl_maybe_log>
 8055495:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055499:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805549d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80554a1:	8b 3c 24             	mov    (%esp),%edi
 80554a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80554a8:	83 ec 04             	sub    $0x4,%esp
 80554ab:	56                   	push   %esi
 80554ac:	55                   	push   %ebp
 80554ad:	ff 74 24 2c          	pushl  0x2c(%esp)
 80554b1:	e8 3a 3d ff ff       	call   80491f0 <memcmp@plt>
 80554b6:	83 c4 10             	add    $0x10,%esp
 80554b9:	85 c0                	test   %eax,%eax
 80554bb:	0f 85 77 ff ff ff    	jne    8055438 <argmatch_to_argument+0x88>
 80554c1:	8d 76 00             	lea    0x0(%esi),%esi
 80554c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80554c8:	89 3c 24             	mov    %edi,(%esp)
 80554cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80554cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80554d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80554d7:	b9 7b 65 00 00       	mov    $0x657b,%ecx
 80554dc:	e8 4f 00 00 00       	call   8055530 <__afl_maybe_log>
 80554e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80554e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80554e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80554ed:	8b 3c 24             	mov    (%esp),%edi
 80554f0:	8d 64 24 10          	lea    0x10(%esp),%esp
      return arglist[i];
  return NULL;
}
 80554f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80554f8:	89 3c 24             	mov    %edi,(%esp)
 80554fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80554ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055503:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055507:	b9 f2 a6 00 00       	mov    $0xa6f2,%ecx
 805550c:	e8 1f 00 00 00       	call   8055530 <__afl_maybe_log>
 8055511:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055515:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055519:	8b 54 24 04          	mov    0x4(%esp),%edx
 805551d:	8b 3c 24             	mov    (%esp),%edi
 8055520:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055524:	83 c4 0c             	add    $0xc,%esp
 8055527:	89 f8                	mov    %edi,%eax
 8055529:	5b                   	pop    %ebx
 805552a:	5e                   	pop    %esi
 805552b:	5f                   	pop    %edi
 805552c:	5d                   	pop    %ebp
 805552d:	c3                   	ret    
 805552e:	66 90                	xchg   %ax,%ax

08055530 <__afl_maybe_log>:
 8055530:	9f                   	lahf   
 8055531:	0f 90 c0             	seto   %al
 8055534:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 805553a:	85 d2                	test   %edx,%edx
 805553c:	74 22                	je     8055560 <__afl_setup>

0805553e <__afl_store>:
 805553e:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8055544:	31 cf                	xor    %ecx,%edi
 8055546:	d1 e9                	shr    %ecx
 8055548:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 805554e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8055552:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08055556 <__afl_return>:
 8055556:	04 7f                	add    $0x7f,%al
 8055558:	9e                   	sahf   
 8055559:	c3                   	ret    
 805555a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08055560 <__afl_setup>:
 8055560:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8055567:	75 ed                	jne    8055556 <__afl_return>
 8055569:	50                   	push   %eax
 805556a:	51                   	push   %ecx
 805556b:	68 68 56 05 08       	push   $0x8055668
 8055570:	e8 6b 3d ff ff       	call   80492e0 <getenv@plt>
 8055575:	83 c4 04             	add    $0x4,%esp
 8055578:	85 c0                	test   %eax,%eax
 805557a:	0f 84 db 00 00 00    	je     805565b <__afl_setup_abort>
 8055580:	50                   	push   %eax
 8055581:	e8 1a 3f ff ff       	call   80494a0 <atoi@plt>
 8055586:	83 c4 04             	add    $0x4,%esp
 8055589:	6a 00                	push   $0x0
 805558b:	6a 00                	push   $0x0
 805558d:	50                   	push   %eax
 805558e:	e8 8d 3c ff ff       	call   8049220 <shmat@plt>
 8055593:	83 c4 0c             	add    $0xc,%esp
 8055596:	83 f8 ff             	cmp    $0xffffffff,%eax
 8055599:	0f 84 bc 00 00 00    	je     805565b <__afl_setup_abort>
 805559f:	c6 00 01             	movb   $0x1,(%eax)
 80555a2:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 80555a7:	89 c2                	mov    %eax,%edx
 80555a9:	59                   	pop    %ecx
 80555aa:	58                   	pop    %eax

080555ab <__afl_forkserver>:
 80555ab:	50                   	push   %eax
 80555ac:	51                   	push   %ecx
 80555ad:	52                   	push   %edx
 80555ae:	6a 04                	push   $0x4
 80555b0:	68 e0 ad 43 08       	push   $0x843ade0
 80555b5:	68 c7 00 00 00       	push   $0xc7
 80555ba:	e8 11 3e ff ff       	call   80493d0 <write@plt>
 80555bf:	83 c4 0c             	add    $0xc,%esp
 80555c2:	83 f8 04             	cmp    $0x4,%eax
 80555c5:	75 6e                	jne    8055635 <__afl_fork_resume>

080555c7 <__afl_fork_wait_loop>:
 80555c7:	6a 04                	push   $0x4
 80555c9:	68 e0 ad 43 08       	push   $0x843ade0
 80555ce:	68 c6 00 00 00       	push   $0xc6
 80555d3:	e8 88 3b ff ff       	call   8049160 <read@plt>
 80555d8:	83 c4 0c             	add    $0xc,%esp
 80555db:	83 f8 04             	cmp    $0x4,%eax
 80555de:	75 74                	jne    8055654 <__afl_die>
 80555e0:	e8 5b 3e ff ff       	call   8049440 <fork@plt>
 80555e5:	83 f8 00             	cmp    $0x0,%eax
 80555e8:	7c 6a                	jl     8055654 <__afl_die>
 80555ea:	74 49                	je     8055635 <__afl_fork_resume>
 80555ec:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 80555f1:	6a 04                	push   $0x4
 80555f3:	68 40 ae 43 08       	push   $0x843ae40
 80555f8:	68 c7 00 00 00       	push   $0xc7
 80555fd:	e8 ce 3d ff ff       	call   80493d0 <write@plt>
 8055602:	83 c4 0c             	add    $0xc,%esp
 8055605:	6a 00                	push   $0x0
 8055607:	68 e0 ad 43 08       	push   $0x843ade0
 805560c:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8055612:	e8 59 3c ff ff       	call   8049270 <waitpid@plt>
 8055617:	83 c4 0c             	add    $0xc,%esp
 805561a:	83 f8 00             	cmp    $0x0,%eax
 805561d:	7e 35                	jle    8055654 <__afl_die>
 805561f:	6a 04                	push   $0x4
 8055621:	68 e0 ad 43 08       	push   $0x843ade0
 8055626:	68 c7 00 00 00       	push   $0xc7
 805562b:	e8 a0 3d ff ff       	call   80493d0 <write@plt>
 8055630:	83 c4 0c             	add    $0xc,%esp
 8055633:	eb 92                	jmp    80555c7 <__afl_fork_wait_loop>

08055635 <__afl_fork_resume>:
 8055635:	68 c6 00 00 00       	push   $0xc6
 805563a:	e8 e1 3e ff ff       	call   8049520 <close@plt>
 805563f:	68 c7 00 00 00       	push   $0xc7
 8055644:	e8 d7 3e ff ff       	call   8049520 <close@plt>
 8055649:	83 c4 08             	add    $0x8,%esp
 805564c:	5a                   	pop    %edx
 805564d:	59                   	pop    %ecx
 805564e:	58                   	pop    %eax
 805564f:	e9 ea fe ff ff       	jmp    805553e <__afl_store>

08055654 <__afl_die>:
 8055654:	31 c0                	xor    %eax,%eax
 8055656:	e8 35 3b ff ff       	call   8049190 <_exit@plt>

0805565b <__afl_setup_abort>:
 805565b:	fe 05 60 ae 43 08    	incb   0x843ae60
 8055661:	59                   	pop    %ecx
 8055662:	58                   	pop    %eax
 8055663:	e9 ee fe ff ff       	jmp    8055556 <__afl_return>

08055668 <.AFL_SHM_ENV>:
 8055668:	5f                   	pop    %edi
 8055669:	5f                   	pop    %edi
 805566a:	41                   	inc    %ecx
 805566b:	46                   	inc    %esi
 805566c:	4c                   	dec    %esp
 805566d:	5f                   	pop    %edi
 805566e:	53                   	push   %ebx
 805566f:	48                   	dec    %eax
 8055670:	4d                   	dec    %ebp
 8055671:	5f                   	pop    %edi
 8055672:	49                   	dec    %ecx
 8055673:	44                   	inc    %esp
 8055674:	00 66 90             	add    %ah,-0x70(%esi)
 8055677:	66 90                	xchg   %ax,%ax
 8055679:	66 90                	xchg   %ax,%ax
 805567b:	66 90                	xchg   %ax,%ax
 805567d:	66 90                	xchg   %ax,%ax
 805567f:	90                   	nop

08055680 <close_stdout_set_file_name>:
/* Set the file name to be reported in the event an error is detected
   by close_stdout.  */
void
close_stdout_set_file_name (const char *file)
{
  file_name = file;
 8055680:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055684:	89 3c 24             	mov    %edi,(%esp)
 8055687:	89 54 24 04          	mov    %edx,0x4(%esp)
 805568b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805568f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055693:	b9 f8 e3 00 00       	mov    $0xe3f8,%ecx
 8055698:	e8 1b 03 00 00       	call   80559b8 <__afl_maybe_log>
 805569d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80556a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80556a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80556a9:	8b 3c 24             	mov    (%esp),%edi
 80556ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80556b0:	8b 44 24 04          	mov    0x4(%esp),%eax
 80556b4:	a3 44 ac 43 08       	mov    %eax,0x843ac44
 80556b9:	c3                   	ret    
 80556ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080556c0 <close_stdout_set_ignore_EPIPE>:
   and should not lead to a diagnostic message.  */

void
close_stdout_set_ignore_EPIPE (bool ignore)
{
  ignore_EPIPE = ignore;
 80556c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80556c4:	89 3c 24             	mov    %edi,(%esp)
 80556c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80556cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80556cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80556d3:	b9 4f 5e 00 00       	mov    $0x5e4f,%ecx
 80556d8:	e8 db 02 00 00       	call   80559b8 <__afl_maybe_log>
 80556dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80556e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80556e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80556e9:	8b 3c 24             	mov    (%esp),%edi
 80556ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80556f0:	8b 44 24 04          	mov    0x4(%esp),%eax
 80556f4:	a2 40 ac 43 08       	mov    %al,0x843ac40
 80556f9:	c3                   	ret    
 80556fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08055700 <close_stdout>:
   tools (most notably 'make' and other build-management systems) depend
   on being able to detect failure in other tools via their exit status.  */

void
close_stdout (void)
{
 8055700:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055704:	89 3c 24             	mov    %edi,(%esp)
 8055707:	89 54 24 04          	mov    %edx,0x4(%esp)
 805570b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805570f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055713:	b9 58 6c 00 00       	mov    $0x6c58,%ecx
 8055718:	e8 9b 02 00 00       	call   80559b8 <__afl_maybe_log>
 805571d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055721:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055725:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055729:	8b 3c 24             	mov    (%esp),%edi
 805572c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055730:	56                   	push   %esi
 8055731:	53                   	push   %ebx
 8055732:	83 ec 10             	sub    $0x10,%esp
  if (close_stream (stdout) != 0
 8055735:	ff 35 d8 a2 06 08    	pushl  0x806a2d8
 805573b:	e8 40 e8 00 00       	call   8063f80 <close_stream>
 8055740:	83 c4 10             	add    $0x10,%esp
 8055743:	85 c0                	test   %eax,%eax
 8055745:	0f 84 b1 00 00 00    	je     80557fc <close_stdout+0xfc>
 805574b:	90                   	nop
 805574c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055750:	89 3c 24             	mov    %edi,(%esp)
 8055753:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055757:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805575b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805575f:	b9 51 d2 00 00       	mov    $0xd251,%ecx
 8055764:	e8 4f 02 00 00       	call   80559b8 <__afl_maybe_log>
 8055769:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805576d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055771:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055775:	8b 3c 24             	mov    (%esp),%edi
 8055778:	8d 64 24 10          	lea    0x10(%esp),%esp
      && !(ignore_EPIPE && errno == EPIPE))
 805577c:	80 3d 40 ac 43 08 00 	cmpb   $0x0,0x843ac40
 8055783:	0f 84 f5 00 00 00    	je     805587e <close_stdout+0x17e>
 8055789:	8d 76 00             	lea    0x0(%esi),%esi
 805578c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055790:	89 3c 24             	mov    %edi,(%esp)
 8055793:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055797:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805579b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805579f:	b9 c8 9e 00 00       	mov    $0x9ec8,%ecx
 80557a4:	e8 0f 02 00 00       	call   80559b8 <__afl_maybe_log>
 80557a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80557ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80557b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80557b5:	8b 3c 24             	mov    (%esp),%edi
 80557b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80557bc:	e8 3f 3c ff ff       	call   8049400 <__errno_location@plt>
 80557c1:	83 38 20             	cmpl   $0x20,(%eax)
 80557c4:	0f 85 b4 00 00 00    	jne    805587e <close_stdout+0x17e>
 80557ca:	66 90                	xchg   %ax,%ax
 80557cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80557d0:	89 3c 24             	mov    %edi,(%esp)
 80557d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80557d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80557db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80557df:	b9 e9 f1 00 00       	mov    $0xf1e9,%ecx
 80557e4:	e8 cf 01 00 00       	call   80559b8 <__afl_maybe_log>
 80557e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80557ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80557f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80557f5:	8b 3c 24             	mov    (%esp),%edi
 80557f8:	8d 64 24 10          	lea    0x10(%esp),%esp
        error (0, errno, "%s", write_error);

      _exit (exit_failure);
    }

   if (close_stream (stderr) != 0)
 80557fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055800:	89 3c 24             	mov    %edi,(%esp)
 8055803:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055807:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805580b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805580f:	b9 94 b7 00 00       	mov    $0xb794,%ecx
 8055814:	e8 9f 01 00 00       	call   80559b8 <__afl_maybe_log>
 8055819:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805581d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055821:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055825:	8b 3c 24             	mov    (%esp),%edi
 8055828:	8d 64 24 10          	lea    0x10(%esp),%esp
 805582c:	83 ec 0c             	sub    $0xc,%esp
 805582f:	ff 35 c4 a2 06 08    	pushl  0x806a2c4
 8055835:	e8 46 e7 00 00       	call   8063f80 <close_stream>
 805583a:	83 c4 10             	add    $0x10,%esp
 805583d:	85 c0                	test   %eax,%eax
 805583f:	0f 85 e4 00 00 00    	jne    8055929 <close_stdout+0x229>
 8055845:	8d 76 00             	lea    0x0(%esi),%esi
 8055848:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805584c:	89 3c 24             	mov    %edi,(%esp)
 805584f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055853:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055857:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805585b:	b9 0e 6a 00 00       	mov    $0x6a0e,%ecx
 8055860:	e8 53 01 00 00       	call   80559b8 <__afl_maybe_log>
 8055865:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055869:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805586d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055871:	8b 3c 24             	mov    (%esp),%edi
 8055874:	8d 64 24 10          	lea    0x10(%esp),%esp
     _exit (exit_failure);
}
 8055878:	83 c4 04             	add    $0x4,%esp
 805587b:	5b                   	pop    %ebx
 805587c:	5e                   	pop    %esi
 805587d:	c3                   	ret    
 805587e:	66 90                	xchg   %ax,%ax
close_stdout (void)
{
  if (close_stream (stdout) != 0
      && !(ignore_EPIPE && errno == EPIPE))
    {
      char const *write_error = _("write error");
 8055880:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055884:	89 3c 24             	mov    %edi,(%esp)
 8055887:	89 54 24 04          	mov    %edx,0x4(%esp)
 805588b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805588f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055893:	b9 9a ec 00 00       	mov    $0xec9a,%ecx
 8055898:	e8 1b 01 00 00       	call   80559b8 <__afl_maybe_log>
 805589d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80558a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80558a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80558a9:	8b 3c 24             	mov    (%esp),%edi
 80558ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80558b0:	50                   	push   %eax
 80558b1:	6a 05                	push   $0x5
 80558b3:	68 af 66 06 08       	push   $0x80666af
 80558b8:	6a 00                	push   $0x0
 80558ba:	e8 51 39 ff ff       	call   8049210 <dcgettext@plt>
 80558bf:	89 c3                	mov    %eax,%ebx
      if (file_name)
 80558c1:	a1 44 ac 43 08       	mov    0x843ac44,%eax
 80558c6:	83 c4 10             	add    $0x10,%esp
 80558c9:	85 c0                	test   %eax,%eax
 80558cb:	0f 84 9a 00 00 00    	je     805596b <close_stdout+0x26b>
 80558d1:	8d 76 00             	lea    0x0(%esi),%esi
 80558d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80558d8:	89 3c 24             	mov    %edi,(%esp)
 80558db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80558df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80558e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80558e7:	b9 ee 3c 00 00       	mov    $0x3cee,%ecx
 80558ec:	e8 c7 00 00 00       	call   80559b8 <__afl_maybe_log>
 80558f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80558f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80558f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80558fd:	8b 3c 24             	mov    (%esp),%edi
 8055900:	8d 64 24 10          	lea    0x10(%esp),%esp
        error (0, errno, "%s: %s", quotearg_colon (file_name),
 8055904:	83 ec 0c             	sub    $0xc,%esp
 8055907:	50                   	push   %eax
 8055908:	e8 23 8d 00 00       	call   805e630 <quotearg_colon>
 805590d:	89 c6                	mov    %eax,%esi
 805590f:	e8 ec 3a ff ff       	call   8049400 <__errno_location@plt>
 8055914:	89 1c 24             	mov    %ebx,(%esp)
 8055917:	56                   	push   %esi
 8055918:	68 08 5b 06 08       	push   $0x8065b08
 805591d:	ff 30                	pushl  (%eax)
 805591f:	6a 00                	push   $0x0
 8055921:	e8 9a 39 ff ff       	call   80492c0 <error@plt>
 8055926:	83 c4 20             	add    $0x20,%esp
 8055929:	8d 76 00             	lea    0x0(%esi),%esi

      _exit (exit_failure);
    }

   if (close_stream (stderr) != 0)
     _exit (exit_failure);
 805592c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055930:	89 3c 24             	mov    %edi,(%esp)
 8055933:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055937:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805593b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805593f:	b9 d7 1c 00 00       	mov    $0x1cd7,%ecx
 8055944:	e8 6f 00 00 00       	call   80559b8 <__afl_maybe_log>
 8055949:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805594d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055951:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055955:	8b 3c 24             	mov    (%esp),%edi
 8055958:	8d 64 24 10          	lea    0x10(%esp),%esp
 805595c:	8b 15 50 a2 06 08    	mov    0x806a250,%edx
 8055962:	83 ec 0c             	sub    $0xc,%esp
 8055965:	52                   	push   %edx
 8055966:	e8 25 38 ff ff       	call   8049190 <_exit@plt>
 805596b:	90                   	nop
      char const *write_error = _("write error");
      if (file_name)
        error (0, errno, "%s: %s", quotearg_colon (file_name),
               write_error);
      else
        error (0, errno, "%s", write_error);
 805596c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055970:	89 3c 24             	mov    %edi,(%esp)
 8055973:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055977:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805597b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805597f:	b9 fe e1 00 00       	mov    $0xe1fe,%ecx
 8055984:	e8 2f 00 00 00       	call   80559b8 <__afl_maybe_log>
 8055989:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805598d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055991:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055995:	8b 3c 24             	mov    (%esp),%edi
 8055998:	8d 64 24 10          	lea    0x10(%esp),%esp
 805599c:	e8 5f 3a ff ff       	call   8049400 <__errno_location@plt>
 80559a1:	53                   	push   %ebx
 80559a2:	68 ac 66 06 08       	push   $0x80666ac
 80559a7:	ff 30                	pushl  (%eax)
 80559a9:	6a 00                	push   $0x0
 80559ab:	e8 10 39 ff ff       	call   80492c0 <error@plt>
 80559b0:	83 c4 10             	add    $0x10,%esp
 80559b3:	e9 71 ff ff ff       	jmp    8055929 <close_stdout+0x229>

080559b8 <__afl_maybe_log>:
 80559b8:	9f                   	lahf   
 80559b9:	0f 90 c0             	seto   %al
 80559bc:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 80559c2:	85 d2                	test   %edx,%edx
 80559c4:	74 22                	je     80559e8 <__afl_setup>

080559c6 <__afl_store>:
 80559c6:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 80559cc:	31 cf                	xor    %ecx,%edi
 80559ce:	d1 e9                	shr    %ecx
 80559d0:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 80559d6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80559da:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080559de <__afl_return>:
 80559de:	04 7f                	add    $0x7f,%al
 80559e0:	9e                   	sahf   
 80559e1:	c3                   	ret    
 80559e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080559e8 <__afl_setup>:
 80559e8:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 80559ef:	75 ed                	jne    80559de <__afl_return>
 80559f1:	50                   	push   %eax
 80559f2:	51                   	push   %ecx
 80559f3:	68 f0 5a 05 08       	push   $0x8055af0
 80559f8:	e8 e3 38 ff ff       	call   80492e0 <getenv@plt>
 80559fd:	83 c4 04             	add    $0x4,%esp
 8055a00:	85 c0                	test   %eax,%eax
 8055a02:	0f 84 db 00 00 00    	je     8055ae3 <__afl_setup_abort>
 8055a08:	50                   	push   %eax
 8055a09:	e8 92 3a ff ff       	call   80494a0 <atoi@plt>
 8055a0e:	83 c4 04             	add    $0x4,%esp
 8055a11:	6a 00                	push   $0x0
 8055a13:	6a 00                	push   $0x0
 8055a15:	50                   	push   %eax
 8055a16:	e8 05 38 ff ff       	call   8049220 <shmat@plt>
 8055a1b:	83 c4 0c             	add    $0xc,%esp
 8055a1e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8055a21:	0f 84 bc 00 00 00    	je     8055ae3 <__afl_setup_abort>
 8055a27:	c6 00 01             	movb   $0x1,(%eax)
 8055a2a:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8055a2f:	89 c2                	mov    %eax,%edx
 8055a31:	59                   	pop    %ecx
 8055a32:	58                   	pop    %eax

08055a33 <__afl_forkserver>:
 8055a33:	50                   	push   %eax
 8055a34:	51                   	push   %ecx
 8055a35:	52                   	push   %edx
 8055a36:	6a 04                	push   $0x4
 8055a38:	68 e0 ad 43 08       	push   $0x843ade0
 8055a3d:	68 c7 00 00 00       	push   $0xc7
 8055a42:	e8 89 39 ff ff       	call   80493d0 <write@plt>
 8055a47:	83 c4 0c             	add    $0xc,%esp
 8055a4a:	83 f8 04             	cmp    $0x4,%eax
 8055a4d:	75 6e                	jne    8055abd <__afl_fork_resume>

08055a4f <__afl_fork_wait_loop>:
 8055a4f:	6a 04                	push   $0x4
 8055a51:	68 e0 ad 43 08       	push   $0x843ade0
 8055a56:	68 c6 00 00 00       	push   $0xc6
 8055a5b:	e8 00 37 ff ff       	call   8049160 <read@plt>
 8055a60:	83 c4 0c             	add    $0xc,%esp
 8055a63:	83 f8 04             	cmp    $0x4,%eax
 8055a66:	75 74                	jne    8055adc <__afl_die>
 8055a68:	e8 d3 39 ff ff       	call   8049440 <fork@plt>
 8055a6d:	83 f8 00             	cmp    $0x0,%eax
 8055a70:	7c 6a                	jl     8055adc <__afl_die>
 8055a72:	74 49                	je     8055abd <__afl_fork_resume>
 8055a74:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8055a79:	6a 04                	push   $0x4
 8055a7b:	68 40 ae 43 08       	push   $0x843ae40
 8055a80:	68 c7 00 00 00       	push   $0xc7
 8055a85:	e8 46 39 ff ff       	call   80493d0 <write@plt>
 8055a8a:	83 c4 0c             	add    $0xc,%esp
 8055a8d:	6a 00                	push   $0x0
 8055a8f:	68 e0 ad 43 08       	push   $0x843ade0
 8055a94:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8055a9a:	e8 d1 37 ff ff       	call   8049270 <waitpid@plt>
 8055a9f:	83 c4 0c             	add    $0xc,%esp
 8055aa2:	83 f8 00             	cmp    $0x0,%eax
 8055aa5:	7e 35                	jle    8055adc <__afl_die>
 8055aa7:	6a 04                	push   $0x4
 8055aa9:	68 e0 ad 43 08       	push   $0x843ade0
 8055aae:	68 c7 00 00 00       	push   $0xc7
 8055ab3:	e8 18 39 ff ff       	call   80493d0 <write@plt>
 8055ab8:	83 c4 0c             	add    $0xc,%esp
 8055abb:	eb 92                	jmp    8055a4f <__afl_fork_wait_loop>

08055abd <__afl_fork_resume>:
 8055abd:	68 c6 00 00 00       	push   $0xc6
 8055ac2:	e8 59 3a ff ff       	call   8049520 <close@plt>
 8055ac7:	68 c7 00 00 00       	push   $0xc7
 8055acc:	e8 4f 3a ff ff       	call   8049520 <close@plt>
 8055ad1:	83 c4 08             	add    $0x8,%esp
 8055ad4:	5a                   	pop    %edx
 8055ad5:	59                   	pop    %ecx
 8055ad6:	58                   	pop    %eax
 8055ad7:	e9 ea fe ff ff       	jmp    80559c6 <__afl_store>

08055adc <__afl_die>:
 8055adc:	31 c0                	xor    %eax,%eax
 8055ade:	e8 ad 36 ff ff       	call   8049190 <_exit@plt>

08055ae3 <__afl_setup_abort>:
 8055ae3:	fe 05 60 ae 43 08    	incb   0x843ae60
 8055ae9:	59                   	pop    %ecx
 8055aea:	58                   	pop    %eax
 8055aeb:	e9 ee fe ff ff       	jmp    80559de <__afl_return>

08055af0 <.AFL_SHM_ENV>:
 8055af0:	5f                   	pop    %edi
 8055af1:	5f                   	pop    %edi
 8055af2:	41                   	inc    %ecx
 8055af3:	46                   	inc    %esi
 8055af4:	4c                   	dec    %esp
 8055af5:	5f                   	pop    %edi
 8055af6:	53                   	push   %ebx
 8055af7:	48                   	dec    %eax
 8055af8:	4d                   	dec    %ebp
 8055af9:	5f                   	pop    %edi
 8055afa:	49                   	dec    %ecx
 8055afb:	44                   	inc    %esp
 8055afc:	00 66 90             	add    %ah,-0x70(%esi)
 8055aff:	90                   	nop

08055b00 <fdadvise>:

void
fdadvise (int fd, off_t offset, off_t len, fadvice_t advice)
{
#if HAVE_POSIX_FADVISE
  ignore_value (posix_fadvise (fd, offset, len, advice));
 8055b00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055b04:	89 3c 24             	mov    %edi,(%esp)
 8055b07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055b0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055b0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055b13:	b9 f8 06 00 00       	mov    $0x6f8,%ecx
 8055b18:	e8 e3 00 00 00       	call   8055c00 <__afl_maybe_log>
 8055b1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055b21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055b25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055b29:	8b 3c 24             	mov    (%esp),%edi
 8055b2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055b30:	e9 ab 39 ff ff       	jmp    80494e0 <posix_fadvise64@plt>
 8055b35:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8055b39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08055b40 <fadvise>:
#endif
}

void
fadvise (FILE *fp, fadvice_t advice)
{
 8055b40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055b44:	89 3c 24             	mov    %edi,(%esp)
 8055b47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055b4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055b4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055b53:	b9 5d 00 00 00       	mov    $0x5d,%ecx
 8055b58:	e8 a3 00 00 00       	call   8055c00 <__afl_maybe_log>
 8055b5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055b61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055b65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055b69:	8b 3c 24             	mov    (%esp),%edi
 8055b6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055b70:	83 ec 0c             	sub    $0xc,%esp
 8055b73:	8b 44 24 10          	mov    0x10(%esp),%eax
  if (fp)
 8055b77:	85 c0                	test   %eax,%eax
 8055b79:	74 51                	je     8055bcc <fadvise+0x8c>
 8055b7b:	90                   	nop
 8055b7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055b80:	89 3c 24             	mov    %edi,(%esp)
 8055b83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055b87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055b8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055b8f:	b9 0f 61 00 00       	mov    $0x610f,%ecx
 8055b94:	e8 67 00 00 00       	call   8055c00 <__afl_maybe_log>
 8055b99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055b9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055ba1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055ba5:	8b 3c 24             	mov    (%esp),%edi
 8055ba8:	8d 64 24 10          	lea    0x10(%esp),%esp
    fdadvise (fileno (fp), 0, 0, advice);
 8055bac:	83 ec 0c             	sub    $0xc,%esp
 8055baf:	50                   	push   %eax
 8055bb0:	e8 5b 38 ff ff       	call   8049410 <fileno@plt>

void
fdadvise (int fd, off_t offset, off_t len, fadvice_t advice)
{
#if HAVE_POSIX_FADVISE
  ignore_value (posix_fadvise (fd, offset, len, advice));
 8055bb5:	5a                   	pop    %edx
 8055bb6:	59                   	pop    %ecx
 8055bb7:	ff 74 24 1c          	pushl  0x1c(%esp)
 8055bbb:	6a 00                	push   $0x0
 8055bbd:	6a 00                	push   $0x0
 8055bbf:	6a 00                	push   $0x0
 8055bc1:	6a 00                	push   $0x0
 8055bc3:	50                   	push   %eax
 8055bc4:	e8 17 39 ff ff       	call   80494e0 <posix_fadvise64@plt>
 8055bc9:	83 c4 20             	add    $0x20,%esp
void
fadvise (FILE *fp, fadvice_t advice)
{
  if (fp)
    fdadvise (fileno (fp), 0, 0, advice);
}
 8055bcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055bd0:	89 3c 24             	mov    %edi,(%esp)
 8055bd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055bd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055bdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055bdf:	b9 f4 15 00 00       	mov    $0x15f4,%ecx
 8055be4:	e8 17 00 00 00       	call   8055c00 <__afl_maybe_log>
 8055be9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055bed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055bf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055bf5:	8b 3c 24             	mov    (%esp),%edi
 8055bf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055bfc:	83 c4 0c             	add    $0xc,%esp
 8055bff:	c3                   	ret    

08055c00 <__afl_maybe_log>:
 8055c00:	9f                   	lahf   
 8055c01:	0f 90 c0             	seto   %al
 8055c04:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8055c0a:	85 d2                	test   %edx,%edx
 8055c0c:	74 22                	je     8055c30 <__afl_setup>

08055c0e <__afl_store>:
 8055c0e:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8055c14:	31 cf                	xor    %ecx,%edi
 8055c16:	d1 e9                	shr    %ecx
 8055c18:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8055c1e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8055c22:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08055c26 <__afl_return>:
 8055c26:	04 7f                	add    $0x7f,%al
 8055c28:	9e                   	sahf   
 8055c29:	c3                   	ret    
 8055c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08055c30 <__afl_setup>:
 8055c30:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8055c37:	75 ed                	jne    8055c26 <__afl_return>
 8055c39:	50                   	push   %eax
 8055c3a:	51                   	push   %ecx
 8055c3b:	68 38 5d 05 08       	push   $0x8055d38
 8055c40:	e8 9b 36 ff ff       	call   80492e0 <getenv@plt>
 8055c45:	83 c4 04             	add    $0x4,%esp
 8055c48:	85 c0                	test   %eax,%eax
 8055c4a:	0f 84 db 00 00 00    	je     8055d2b <__afl_setup_abort>
 8055c50:	50                   	push   %eax
 8055c51:	e8 4a 38 ff ff       	call   80494a0 <atoi@plt>
 8055c56:	83 c4 04             	add    $0x4,%esp
 8055c59:	6a 00                	push   $0x0
 8055c5b:	6a 00                	push   $0x0
 8055c5d:	50                   	push   %eax
 8055c5e:	e8 bd 35 ff ff       	call   8049220 <shmat@plt>
 8055c63:	83 c4 0c             	add    $0xc,%esp
 8055c66:	83 f8 ff             	cmp    $0xffffffff,%eax
 8055c69:	0f 84 bc 00 00 00    	je     8055d2b <__afl_setup_abort>
 8055c6f:	c6 00 01             	movb   $0x1,(%eax)
 8055c72:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8055c77:	89 c2                	mov    %eax,%edx
 8055c79:	59                   	pop    %ecx
 8055c7a:	58                   	pop    %eax

08055c7b <__afl_forkserver>:
 8055c7b:	50                   	push   %eax
 8055c7c:	51                   	push   %ecx
 8055c7d:	52                   	push   %edx
 8055c7e:	6a 04                	push   $0x4
 8055c80:	68 e0 ad 43 08       	push   $0x843ade0
 8055c85:	68 c7 00 00 00       	push   $0xc7
 8055c8a:	e8 41 37 ff ff       	call   80493d0 <write@plt>
 8055c8f:	83 c4 0c             	add    $0xc,%esp
 8055c92:	83 f8 04             	cmp    $0x4,%eax
 8055c95:	75 6e                	jne    8055d05 <__afl_fork_resume>

08055c97 <__afl_fork_wait_loop>:
 8055c97:	6a 04                	push   $0x4
 8055c99:	68 e0 ad 43 08       	push   $0x843ade0
 8055c9e:	68 c6 00 00 00       	push   $0xc6
 8055ca3:	e8 b8 34 ff ff       	call   8049160 <read@plt>
 8055ca8:	83 c4 0c             	add    $0xc,%esp
 8055cab:	83 f8 04             	cmp    $0x4,%eax
 8055cae:	75 74                	jne    8055d24 <__afl_die>
 8055cb0:	e8 8b 37 ff ff       	call   8049440 <fork@plt>
 8055cb5:	83 f8 00             	cmp    $0x0,%eax
 8055cb8:	7c 6a                	jl     8055d24 <__afl_die>
 8055cba:	74 49                	je     8055d05 <__afl_fork_resume>
 8055cbc:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8055cc1:	6a 04                	push   $0x4
 8055cc3:	68 40 ae 43 08       	push   $0x843ae40
 8055cc8:	68 c7 00 00 00       	push   $0xc7
 8055ccd:	e8 fe 36 ff ff       	call   80493d0 <write@plt>
 8055cd2:	83 c4 0c             	add    $0xc,%esp
 8055cd5:	6a 00                	push   $0x0
 8055cd7:	68 e0 ad 43 08       	push   $0x843ade0
 8055cdc:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8055ce2:	e8 89 35 ff ff       	call   8049270 <waitpid@plt>
 8055ce7:	83 c4 0c             	add    $0xc,%esp
 8055cea:	83 f8 00             	cmp    $0x0,%eax
 8055ced:	7e 35                	jle    8055d24 <__afl_die>
 8055cef:	6a 04                	push   $0x4
 8055cf1:	68 e0 ad 43 08       	push   $0x843ade0
 8055cf6:	68 c7 00 00 00       	push   $0xc7
 8055cfb:	e8 d0 36 ff ff       	call   80493d0 <write@plt>
 8055d00:	83 c4 0c             	add    $0xc,%esp
 8055d03:	eb 92                	jmp    8055c97 <__afl_fork_wait_loop>

08055d05 <__afl_fork_resume>:
 8055d05:	68 c6 00 00 00       	push   $0xc6
 8055d0a:	e8 11 38 ff ff       	call   8049520 <close@plt>
 8055d0f:	68 c7 00 00 00       	push   $0xc7
 8055d14:	e8 07 38 ff ff       	call   8049520 <close@plt>
 8055d19:	83 c4 08             	add    $0x8,%esp
 8055d1c:	5a                   	pop    %edx
 8055d1d:	59                   	pop    %ecx
 8055d1e:	58                   	pop    %eax
 8055d1f:	e9 ea fe ff ff       	jmp    8055c0e <__afl_store>

08055d24 <__afl_die>:
 8055d24:	31 c0                	xor    %eax,%eax
 8055d26:	e8 65 34 ff ff       	call   8049190 <_exit@plt>

08055d2b <__afl_setup_abort>:
 8055d2b:	fe 05 60 ae 43 08    	incb   0x843ae60
 8055d31:	59                   	pop    %ecx
 8055d32:	58                   	pop    %eax
 8055d33:	e9 ee fe ff ff       	jmp    8055c26 <__afl_return>

08055d38 <.AFL_SHM_ENV>:
 8055d38:	5f                   	pop    %edi
 8055d39:	5f                   	pop    %edi
 8055d3a:	41                   	inc    %ecx
 8055d3b:	46                   	inc    %esi
 8055d3c:	4c                   	dec    %esp
 8055d3d:	5f                   	pop    %edi
 8055d3e:	53                   	push   %ebx
 8055d3f:	48                   	dec    %eax
 8055d40:	4d                   	dec    %ebp
 8055d41:	5f                   	pop    %edi
 8055d42:	49                   	dec    %ecx
 8055d43:	44                   	inc    %esp
 8055d44:	00 66 90             	add    %ah,-0x70(%esi)
 8055d47:	66 90                	xchg   %ax,%ax
 8055d49:	66 90                	xchg   %ax,%ax
 8055d4b:	66 90                	xchg   %ax,%ax
 8055d4d:	66 90                	xchg   %ax,%ax
 8055d4f:	90                   	nop

08055d50 <protect_fd>:

/* Guarantee that FD is open; all smaller FDs must already be open.
   Return true if successful.  */
static bool
protect_fd (int fd)
{
 8055d50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055d54:	89 3c 24             	mov    %edi,(%esp)
 8055d57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055d5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055d5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055d63:	b9 e7 aa 00 00       	mov    $0xaae7,%ecx
 8055d68:	e8 23 08 00 00       	call   8056590 <__afl_maybe_log>
 8055d6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055d71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055d75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055d79:	8b 3c 24             	mov    (%esp),%edi
 8055d7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055d80:	53                   	push   %ebx
 8055d81:	89 c3                	mov    %eax,%ebx
 8055d83:	83 ec 10             	sub    $0x10,%esp
      if (__OPEN_NEEDS_MODE (__oflag) && __va_arg_pack_len () < 1)
	{
	  __open_missing_mode ();
	  return __open_2 (__path, __oflag);
	}
      return __open_alias (__path, __oflag, __va_arg_pack ());
 8055d86:	6a 00                	push   $0x0
 8055d88:	68 bb 66 06 08       	push   $0x80666bb
 8055d8d:	e8 be 33 ff ff       	call   8049150 <open64@plt>
  int value = open ("/dev/null", O_RDONLY);
  if (value != fd)
 8055d92:	83 c4 10             	add    $0x10,%esp
 8055d95:	39 c3                	cmp    %eax,%ebx
 8055d97:	0f 84 c3 00 00 00    	je     8055e60 <protect_fd+0x110>
 8055d9d:	8d 76 00             	lea    0x0(%esi),%esi
 8055da0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055da4:	89 3c 24             	mov    %edi,(%esp)
 8055da7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055dab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055daf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055db3:	b9 fd 89 00 00       	mov    $0x89fd,%ecx
 8055db8:	e8 d3 07 00 00       	call   8056590 <__afl_maybe_log>
 8055dbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055dc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055dc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055dc9:	8b 3c 24             	mov    (%esp),%edi
 8055dcc:	8d 64 24 10          	lea    0x10(%esp),%esp
      if (0 <= value)
        {
          close (value);
          errno = EBADF; /* Unexpected; this is as good as anything else.  */
        }
      return false;
 8055dd0:	31 db                	xor    %ebx,%ebx
protect_fd (int fd)
{
  int value = open ("/dev/null", O_RDONLY);
  if (value != fd)
    {
      if (0 <= value)
 8055dd2:	85 c0                	test   %eax,%eax
 8055dd4:	78 49                	js     8055e1f <protect_fd+0xcf>
 8055dd6:	66 90                	xchg   %ax,%ax
 8055dd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055ddc:	89 3c 24             	mov    %edi,(%esp)
 8055ddf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055de3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055de7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055deb:	b9 48 ce 00 00       	mov    $0xce48,%ecx
 8055df0:	e8 9b 07 00 00       	call   8056590 <__afl_maybe_log>
 8055df5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055df9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055dfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055e01:	8b 3c 24             	mov    (%esp),%edi
 8055e04:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          close (value);
 8055e08:	83 ec 0c             	sub    $0xc,%esp
 8055e0b:	50                   	push   %eax
 8055e0c:	e8 0f 37 ff ff       	call   8049520 <close@plt>
          errno = EBADF; /* Unexpected; this is as good as anything else.  */
 8055e11:	e8 ea 35 ff ff       	call   8049400 <__errno_location@plt>
 8055e16:	83 c4 10             	add    $0x10,%esp
 8055e19:	c7 00 09 00 00 00    	movl   $0x9,(%eax)
 8055e1f:	90                   	nop
        }
      return false;
    }
  return true;
}
 8055e20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055e24:	89 3c 24             	mov    %edi,(%esp)
 8055e27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055e2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055e2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055e33:	b9 08 e7 00 00       	mov    $0xe708,%ecx
 8055e38:	e8 53 07 00 00       	call   8056590 <__afl_maybe_log>
 8055e3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055e41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055e45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055e49:	8b 3c 24             	mov    (%esp),%edi
 8055e4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055e50:	83 c4 08             	add    $0x8,%esp
 8055e53:	89 d8                	mov    %ebx,%eax
 8055e55:	5b                   	pop    %ebx
 8055e56:	c3                   	ret    
 8055e57:	89 f6                	mov    %esi,%esi
 8055e59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
          close (value);
          errno = EBADF; /* Unexpected; this is as good as anything else.  */
        }
      return false;
    }
  return true;
 8055e60:	bb 01 00 00 00       	mov    $0x1,%ebx
}
 8055e65:	83 c4 08             	add    $0x8,%esp
 8055e68:	89 d8                	mov    %ebx,%eax
 8055e6a:	5b                   	pop    %ebx
 8055e6b:	c3                   	ret    
 8055e6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08055e70 <freopen_safer>:
   This is necessary because most freopen implementations will change
   the associated fd of a stream to the lowest available slot.  */

FILE *
freopen_safer (char const *name, char const *mode, FILE *f)
{
 8055e70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055e74:	89 3c 24             	mov    %edi,(%esp)
 8055e77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055e7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055e7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055e83:	b9 72 8b 00 00       	mov    $0x8b72,%ecx
 8055e88:	e8 03 07 00 00       	call   8056590 <__afl_maybe_log>
 8055e8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055e91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055e95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055e99:	8b 3c 24             	mov    (%esp),%edi
 8055e9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ea0:	55                   	push   %ebp
 8055ea1:	57                   	push   %edi
 8055ea2:	56                   	push   %esi
 8055ea3:	53                   	push   %ebx
 8055ea4:	83 ec 28             	sub    $0x28,%esp
 8055ea7:	8b 5c 24 44          	mov    0x44(%esp),%ebx
  bool protect_in = false;
  bool protect_out = false;
  bool protect_err = false;
  int saved_errno;

  switch (fileno (f))
 8055eab:	53                   	push   %ebx
 8055eac:	e8 5f 35 ff ff       	call   8049410 <fileno@plt>
 8055eb1:	83 c4 10             	add    $0x10,%esp
 8055eb4:	83 f8 01             	cmp    $0x1,%eax
 8055eb7:	0f 84 c3 06 00 00    	je     8056580 <freopen_safer+0x710>
 8055ebd:	8d 76 00             	lea    0x0(%esi),%esi
 8055ec0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055ec4:	89 3c 24             	mov    %edi,(%esp)
 8055ec7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055ecb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ecf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055ed3:	b9 81 3a 00 00       	mov    $0x3a81,%ecx
 8055ed8:	e8 b3 06 00 00       	call   8056590 <__afl_maybe_log>
 8055edd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055ee1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055ee5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055ee9:	8b 3c 24             	mov    (%esp),%edi
 8055eec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ef0:	83 f8 02             	cmp    $0x2,%eax
 8055ef3:	0f 84 7f 06 00 00    	je     8056578 <freopen_safer+0x708>
 8055ef9:	8d 76 00             	lea    0x0(%esi),%esi
 8055efc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055f00:	89 3c 24             	mov    %edi,(%esp)
 8055f03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055f07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055f0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055f0f:	b9 25 99 00 00       	mov    $0x9925,%ecx
 8055f14:	e8 77 06 00 00       	call   8056590 <__afl_maybe_log>
 8055f19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055f1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055f21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055f25:	8b 3c 24             	mov    (%esp),%edi
 8055f28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055f2c:	85 c0                	test   %eax,%eax
 8055f2e:	0f 84 44 04 00 00    	je     8056378 <freopen_safer+0x508>
 8055f34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055f38:	89 3c 24             	mov    %edi,(%esp)
 8055f3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055f3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055f43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055f47:	b9 7c c2 00 00       	mov    $0xc27c,%ecx
 8055f4c:	e8 3f 06 00 00       	call   8056590 <__afl_maybe_log>
 8055f51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055f55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055f59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055f5d:	8b 3c 24             	mov    (%esp),%edi
 8055f60:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
    default: /* -1 or not a standard stream.  */
      if (dup2 (STDERR_FILENO, STDERR_FILENO) != STDERR_FILENO)
 8055f64:	83 ec 08             	sub    $0x8,%esp
 8055f67:	6a 02                	push   $0x2
 8055f69:	6a 02                	push   $0x2
 8055f6b:	e8 c0 31 ff ff       	call   8049130 <dup2@plt>
 8055f70:	83 c4 10             	add    $0x10,%esp
 8055f73:	83 f8 02             	cmp    $0x2,%eax
 8055f76:	0f 95 c0             	setne  %al
 8055f79:	89 c6                	mov    %eax,%esi
 8055f7b:	90                   	nop
        protect_err = true;
      /* fall through */
    case STDERR_FILENO:
      if (dup2 (STDOUT_FILENO, STDOUT_FILENO) != STDOUT_FILENO)
 8055f7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055f80:	89 3c 24             	mov    %edi,(%esp)
 8055f83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055f87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055f8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055f8f:	b9 9d 49 00 00       	mov    $0x499d,%ecx
 8055f94:	e8 f7 05 00 00       	call   8056590 <__afl_maybe_log>
 8055f99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055f9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055fa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055fa5:	8b 3c 24             	mov    (%esp),%edi
 8055fa8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055fac:	83 ec 08             	sub    $0x8,%esp
 8055faf:	6a 01                	push   $0x1
 8055fb1:	6a 01                	push   $0x1
 8055fb3:	e8 78 31 ff ff       	call   8049130 <dup2@plt>
 8055fb8:	83 c4 10             	add    $0x10,%esp
 8055fbb:	83 f8 01             	cmp    $0x1,%eax
 8055fbe:	0f 95 c2             	setne  %dl
 8055fc1:	89 d7                	mov    %edx,%edi
 8055fc3:	90                   	nop
        protect_out = true;
      /* fall through */
    case STDOUT_FILENO:
      if (dup2 (STDIN_FILENO, STDIN_FILENO) != STDIN_FILENO)
 8055fc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055fc8:	89 3c 24             	mov    %edi,(%esp)
 8055fcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055fcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055fd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055fd7:	b9 f9 aa 00 00       	mov    $0xaaf9,%ecx
 8055fdc:	e8 af 05 00 00       	call   8056590 <__afl_maybe_log>
 8055fe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055fe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055fe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055fed:	8b 3c 24             	mov    (%esp),%edi
 8055ff0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ff4:	83 ec 08             	sub    $0x8,%esp
 8055ff7:	6a 00                	push   $0x0
 8055ff9:	6a 00                	push   $0x0
 8055ffb:	e8 30 31 ff ff       	call   8049130 <dup2@plt>
 8056000:	83 c4 10             	add    $0x10,%esp
 8056003:	85 c0                	test   %eax,%eax
 8056005:	0f 84 71 03 00 00    	je     805637c <freopen_safer+0x50c>
 805600b:	90                   	nop
 805600c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056010:	89 3c 24             	mov    %edi,(%esp)
 8056013:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056017:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805601b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805601f:	b9 a3 23 00 00       	mov    $0x23a3,%ecx
 8056024:	e8 67 05 00 00       	call   8056590 <__afl_maybe_log>
 8056029:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805602d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056031:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056035:	8b 3c 24             	mov    (%esp),%edi
 8056038:	8d 64 24 10          	lea    0x10(%esp),%esp
      /* fall through */
    case STDIN_FILENO:
      /* Nothing left to protect.  */
      break;
    }
  if (protect_in && !protect_fd (STDIN_FILENO))
 805603c:	31 c0                	xor    %eax,%eax
 805603e:	e8 0d fd ff ff       	call   8055d50 <protect_fd>
 8056043:	84 c0                	test   %al,%al
      if (dup2 (STDOUT_FILENO, STDOUT_FILENO) != STDOUT_FILENO)
        protect_out = true;
      /* fall through */
    case STDOUT_FILENO:
      if (dup2 (STDIN_FILENO, STDIN_FILENO) != STDIN_FILENO)
        protect_in = true;
 8056045:	c6 44 24 0b 01       	movb   $0x1,0xb(%esp)
      /* fall through */
    case STDIN_FILENO:
      /* Nothing left to protect.  */
      break;
    }
  if (protect_in && !protect_fd (STDIN_FILENO))
 805604a:	0f 84 10 04 00 00    	je     8056460 <freopen_safer+0x5f0>
 8056050:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056054:	89 3c 24             	mov    %edi,(%esp)
 8056057:	89 54 24 04          	mov    %edx,0x4(%esp)
 805605b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805605f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056063:	b9 47 b6 00 00       	mov    $0xb647,%ecx
 8056068:	e8 23 05 00 00       	call   8056590 <__afl_maybe_log>
 805606d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056071:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056075:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056079:	8b 3c 24             	mov    (%esp),%edi
 805607c:	8d 64 24 10          	lea    0x10(%esp),%esp
    f = NULL;
  else if (protect_out && !protect_fd (STDOUT_FILENO))
 8056080:	89 f9                	mov    %edi,%ecx
 8056082:	84 c9                	test   %cl,%cl
 8056084:	0f 85 62 03 00 00    	jne    80563ec <freopen_safer+0x57c>
 805608a:	66 90                	xchg   %ax,%ax
 805608c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056090:	89 3c 24             	mov    %edi,(%esp)
 8056093:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056097:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805609b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805609f:	b9 d0 3d 00 00       	mov    $0x3dd0,%ecx
 80560a4:	e8 e7 04 00 00       	call   8056590 <__afl_maybe_log>
 80560a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80560ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80560b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80560b5:	8b 3c 24             	mov    (%esp),%edi
 80560b8:	8d 64 24 10          	lea    0x10(%esp),%esp
    f = NULL;
  else if (protect_err && !protect_fd (STDERR_FILENO))
 80560bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80560c0:	89 3c 24             	mov    %edi,(%esp)
 80560c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80560c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80560cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80560cf:	b9 3e ca 00 00       	mov    $0xca3e,%ecx
 80560d4:	e8 b7 04 00 00       	call   8056590 <__afl_maybe_log>
 80560d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80560dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80560e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80560e5:	8b 3c 24             	mov    (%esp),%edi
 80560e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80560ec:	89 f0                	mov    %esi,%eax
 80560ee:	84 c0                	test   %al,%al
 80560f0:	74 76                	je     8056168 <freopen_safer+0x2f8>
 80560f2:	66 90                	xchg   %ax,%ax
 80560f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80560f8:	89 3c 24             	mov    %edi,(%esp)
 80560fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80560ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056103:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056107:	b9 69 e4 00 00       	mov    $0xe469,%ecx
 805610c:	e8 7f 04 00 00       	call   8056590 <__afl_maybe_log>
 8056111:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056115:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056119:	8b 54 24 04          	mov    0x4(%esp),%edx
 805611d:	8b 3c 24             	mov    (%esp),%edi
 8056120:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056124:	b8 02 00 00 00       	mov    $0x2,%eax
 8056129:	e8 22 fc ff ff       	call   8055d50 <protect_fd>
 805612e:	84 c0                	test   %al,%al
 8056130:	0f 84 12 04 00 00    	je     8056548 <freopen_safer+0x6d8>
 8056136:	66 90                	xchg   %ax,%ax
 8056138:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805613c:	89 3c 24             	mov    %edi,(%esp)
 805613f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056143:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056147:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805614b:	b9 b5 0a 00 00       	mov    $0xab5,%ecx
 8056150:	e8 3b 04 00 00       	call   8056590 <__afl_maybe_log>
 8056155:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056159:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805615d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056161:	8b 3c 24             	mov    (%esp),%edi
 8056164:	8d 64 24 10          	lea    0x10(%esp),%esp
    f = NULL;
  else
    f = freopen (name, mode, f);
 8056168:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805616c:	89 3c 24             	mov    %edi,(%esp)
 805616f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056173:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056177:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805617b:	b9 43 be 00 00       	mov    $0xbe43,%ecx
 8056180:	e8 0b 04 00 00       	call   8056590 <__afl_maybe_log>
 8056185:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056189:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805618d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056191:	8b 3c 24             	mov    (%esp),%edi
 8056194:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056198:	83 ec 04             	sub    $0x4,%esp
 805619b:	53                   	push   %ebx
 805619c:	ff 74 24 3c          	pushl  0x3c(%esp)
 80561a0:	ff 74 24 3c          	pushl  0x3c(%esp)
 80561a4:	e8 77 2f ff ff       	call   8049120 <freopen64@plt>
 80561a9:	83 c4 10             	add    $0x10,%esp
 80561ac:	89 c3                	mov    %eax,%ebx
 80561ae:	66 90                	xchg   %ax,%ax
  saved_errno = errno;
 80561b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80561b4:	89 3c 24             	mov    %edi,(%esp)
 80561b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80561bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80561bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80561c3:	b9 8f 0e 00 00       	mov    $0xe8f,%ecx
 80561c8:	e8 c3 03 00 00       	call   8056590 <__afl_maybe_log>
 80561cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80561d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80561d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80561d9:	8b 3c 24             	mov    (%esp),%edi
 80561dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80561e0:	e8 1b 32 ff ff       	call   8049400 <__errno_location@plt>
 80561e5:	8b 10                	mov    (%eax),%edx
  if (protect_err)
 80561e7:	89 f1                	mov    %esi,%ecx
    f = NULL;
  else if (protect_err && !protect_fd (STDERR_FILENO))
    f = NULL;
  else
    f = freopen (name, mode, f);
  saved_errno = errno;
 80561e9:	89 c5                	mov    %eax,%ebp
  if (protect_err)
 80561eb:	84 c9                	test   %cl,%cl
    f = NULL;
  else if (protect_err && !protect_fd (STDERR_FILENO))
    f = NULL;
  else
    f = freopen (name, mode, f);
  saved_errno = errno;
 80561ed:	89 54 24 0c          	mov    %edx,0xc(%esp)
  if (protect_err)
 80561f1:	0f 85 69 03 00 00    	jne    8056560 <freopen_safer+0x6f0>
 80561f7:	90                   	nop
 80561f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80561fc:	89 3c 24             	mov    %edi,(%esp)
 80561ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056203:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056207:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805620b:	b9 83 8d 00 00       	mov    $0x8d83,%ecx
 8056210:	e8 7b 03 00 00       	call   8056590 <__afl_maybe_log>
 8056215:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056219:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805621d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056221:	8b 3c 24             	mov    (%esp),%edi
 8056224:	8d 64 24 10          	lea    0x10(%esp),%esp
    close (STDERR_FILENO);
  if (protect_out)
 8056228:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805622c:	89 3c 24             	mov    %edi,(%esp)
 805622f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056233:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056237:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805623b:	b9 92 8c 00 00       	mov    $0x8c92,%ecx
 8056240:	e8 4b 03 00 00       	call   8056590 <__afl_maybe_log>
 8056245:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056249:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805624d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056251:	8b 3c 24             	mov    (%esp),%edi
 8056254:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056258:	89 f8                	mov    %edi,%eax
 805625a:	84 c0                	test   %al,%al
 805625c:	0f 85 ce 02 00 00    	jne    8056530 <freopen_safer+0x6c0>
 8056262:	66 90                	xchg   %ax,%ax
 8056264:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056268:	89 3c 24             	mov    %edi,(%esp)
 805626b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805626f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056273:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056277:	b9 75 cb 00 00       	mov    $0xcb75,%ecx
 805627c:	e8 0f 03 00 00       	call   8056590 <__afl_maybe_log>
 8056281:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056285:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056289:	8b 54 24 04          	mov    0x4(%esp),%edx
 805628d:	8b 3c 24             	mov    (%esp),%edi
 8056290:	8d 64 24 10          	lea    0x10(%esp),%esp
    close (STDOUT_FILENO);
  if (protect_in)
 8056294:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056298:	89 3c 24             	mov    %edi,(%esp)
 805629b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805629f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80562a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80562a7:	b9 cf db 00 00       	mov    $0xdbcf,%ecx
 80562ac:	e8 df 02 00 00       	call   8056590 <__afl_maybe_log>
 80562b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80562b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80562b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80562bd:	8b 3c 24             	mov    (%esp),%edi
 80562c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80562c4:	80 7c 24 0b 00       	cmpb   $0x0,0xb(%esp)
 80562c9:	0f 85 d1 01 00 00    	jne    80564a0 <freopen_safer+0x630>
 80562cf:	90                   	nop
 80562d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80562d4:	89 3c 24             	mov    %edi,(%esp)
 80562d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80562db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80562df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80562e3:	b9 46 d2 00 00       	mov    $0xd246,%ecx
 80562e8:	e8 a3 02 00 00       	call   8056590 <__afl_maybe_log>
 80562ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80562f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80562f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80562f9:	8b 3c 24             	mov    (%esp),%edi
 80562fc:	8d 64 24 10          	lea    0x10(%esp),%esp
    close (STDIN_FILENO);
  if (!f)
 8056300:	85 db                	test   %ebx,%ebx
 8056302:	0f 84 e0 01 00 00    	je     80564e8 <freopen_safer+0x678>
 8056308:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805630c:	89 3c 24             	mov    %edi,(%esp)
 805630f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056313:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056317:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805631b:	b9 6b 0c 00 00       	mov    $0xc6b,%ecx
 8056320:	e8 6b 02 00 00       	call   8056590 <__afl_maybe_log>
 8056325:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056329:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805632d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056331:	8b 3c 24             	mov    (%esp),%edi
 8056334:	8d 64 24 10          	lea    0x10(%esp),%esp
    errno = saved_errno;
  return f;
}
 8056338:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805633c:	89 3c 24             	mov    %edi,(%esp)
 805633f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056343:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056347:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805634b:	b9 3c f3 00 00       	mov    $0xf33c,%ecx
 8056350:	e8 3b 02 00 00       	call   8056590 <__afl_maybe_log>
 8056355:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056359:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805635d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056361:	8b 3c 24             	mov    (%esp),%edi
 8056364:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056368:	83 c4 1c             	add    $0x1c,%esp
 805636b:	89 d8                	mov    %ebx,%eax
 805636d:	5b                   	pop    %ebx
 805636e:	5e                   	pop    %esi
 805636f:	5f                   	pop    %edi
 8056370:	5d                   	pop    %ebp
 8056371:	c3                   	ret    
 8056372:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     is system-dependent, so the best we can do is guarantee that all
     lower-valued standard fds are open prior to the freopen call,
     even though this puts more pressure on open fds.  */
  bool protect_in = false;
  bool protect_out = false;
  bool protect_err = false;
 8056378:	31 f6                	xor    %esi,%esi
     need to return f itself.  The implementation of freopen(NULL,m,f)
     is system-dependent, so the best we can do is guarantee that all
     lower-valued standard fds are open prior to the freopen call,
     even though this puts more pressure on open fds.  */
  bool protect_in = false;
  bool protect_out = false;
 805637a:	31 ff                	xor    %edi,%edi
      /* Nothing left to protect.  */
      break;
    }
  if (protect_in && !protect_fd (STDIN_FILENO))
    f = NULL;
  else if (protect_out && !protect_fd (STDOUT_FILENO))
 805637c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056380:	89 3c 24             	mov    %edi,(%esp)
 8056383:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056387:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805638b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805638f:	b9 df 16 00 00       	mov    $0x16df,%ecx
 8056394:	e8 f7 01 00 00       	call   8056590 <__afl_maybe_log>
 8056399:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805639d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80563a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80563a5:	8b 3c 24             	mov    (%esp),%edi
 80563a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80563ac:	89 f9                	mov    %edi,%ecx
     need to return f itself.  The implementation of freopen(NULL,m,f)
     is system-dependent, so the best we can do is guarantee that all
     lower-valued standard fds are open prior to the freopen call,
     even though this puts more pressure on open fds.  */
  bool protect_in = false;
  bool protect_out = false;
 80563ae:	c6 44 24 0b 00       	movb   $0x0,0xb(%esp)
      /* Nothing left to protect.  */
      break;
    }
  if (protect_in && !protect_fd (STDIN_FILENO))
    f = NULL;
  else if (protect_out && !protect_fd (STDOUT_FILENO))
 80563b3:	84 c9                	test   %cl,%cl
 80563b5:	0f 84 01 fd ff ff    	je     80560bc <freopen_safer+0x24c>
 80563bb:	90                   	nop
 80563bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80563c0:	89 3c 24             	mov    %edi,(%esp)
 80563c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80563c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80563cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80563cf:	b9 bf 31 00 00       	mov    $0x31bf,%ecx
 80563d4:	e8 b7 01 00 00       	call   8056590 <__afl_maybe_log>
 80563d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80563dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80563e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80563e5:	8b 3c 24             	mov    (%esp),%edi
 80563e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80563ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80563f0:	89 3c 24             	mov    %edi,(%esp)
 80563f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80563f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80563fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80563ff:	b9 70 38 00 00       	mov    $0x3870,%ecx
 8056404:	e8 87 01 00 00       	call   8056590 <__afl_maybe_log>
 8056409:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805640d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056411:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056415:	8b 3c 24             	mov    (%esp),%edi
 8056418:	8d 64 24 10          	lea    0x10(%esp),%esp
 805641c:	b8 01 00 00 00       	mov    $0x1,%eax
 8056421:	e8 2a f9 ff ff       	call   8055d50 <protect_fd>
 8056426:	84 c0                	test   %al,%al
 8056428:	0f 85 8e fc ff ff    	jne    80560bc <freopen_safer+0x24c>
 805642e:	66 90                	xchg   %ax,%ax
 8056430:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056434:	89 3c 24             	mov    %edi,(%esp)
 8056437:	89 54 24 04          	mov    %edx,0x4(%esp)
 805643b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805643f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056443:	b9 17 d1 00 00       	mov    $0xd117,%ecx
 8056448:	e8 43 01 00 00       	call   8056590 <__afl_maybe_log>
 805644d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056451:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056455:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056459:	8b 3c 24             	mov    (%esp),%edi
 805645c:	8d 64 24 10          	lea    0x10(%esp),%esp
    case STDIN_FILENO:
      /* Nothing left to protect.  */
      break;
    }
  if (protect_in && !protect_fd (STDIN_FILENO))
    f = NULL;
 8056460:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056464:	89 3c 24             	mov    %edi,(%esp)
 8056467:	89 54 24 04          	mov    %edx,0x4(%esp)
 805646b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805646f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056473:	b9 4b 66 00 00       	mov    $0x664b,%ecx
 8056478:	e8 13 01 00 00       	call   8056590 <__afl_maybe_log>
 805647d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056481:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056485:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056489:	8b 3c 24             	mov    (%esp),%edi
 805648c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056490:	31 db                	xor    %ebx,%ebx
 8056492:	e9 17 fd ff ff       	jmp    80561ae <freopen_safer+0x33e>
 8056497:	89 f6                	mov    %esi,%esi
 8056499:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
  if (protect_err)
    close (STDERR_FILENO);
  if (protect_out)
    close (STDOUT_FILENO);
  if (protect_in)
    close (STDIN_FILENO);
 80564a0:	83 ec 0c             	sub    $0xc,%esp
 80564a3:	6a 00                	push   $0x0
 80564a5:	e8 76 30 ff ff       	call   8049520 <close@plt>
 80564aa:	83 c4 10             	add    $0x10,%esp
  if (!f)
 80564ad:	85 db                	test   %ebx,%ebx
 80564af:	0f 85 83 fe ff ff    	jne    8056338 <freopen_safer+0x4c8>
 80564b5:	8d 76 00             	lea    0x0(%esi),%esi
 80564b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80564bc:	89 3c 24             	mov    %edi,(%esp)
 80564bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80564c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80564c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80564cb:	b9 9b f5 00 00       	mov    $0xf59b,%ecx
 80564d0:	e8 bb 00 00 00       	call   8056590 <__afl_maybe_log>
 80564d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80564d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80564dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80564e1:	8b 3c 24             	mov    (%esp),%edi
 80564e4:	8d 64 24 10          	lea    0x10(%esp),%esp
    errno = saved_errno;
 80564e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80564ec:	89 3c 24             	mov    %edi,(%esp)
 80564ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80564f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80564f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80564fb:	b9 28 1c 00 00       	mov    $0x1c28,%ecx
 8056500:	e8 8b 00 00 00       	call   8056590 <__afl_maybe_log>
 8056505:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056509:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805650d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056511:	8b 3c 24             	mov    (%esp),%edi
 8056514:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056518:	8b 74 24 0c          	mov    0xc(%esp),%esi
  return f;
}
 805651c:	89 d8                	mov    %ebx,%eax
  if (protect_out)
    close (STDOUT_FILENO);
  if (protect_in)
    close (STDIN_FILENO);
  if (!f)
    errno = saved_errno;
 805651e:	89 75 00             	mov    %esi,0x0(%ebp)
  return f;
}
 8056521:	83 c4 1c             	add    $0x1c,%esp
 8056524:	5b                   	pop    %ebx
 8056525:	5e                   	pop    %esi
 8056526:	5f                   	pop    %edi
 8056527:	5d                   	pop    %ebp
 8056528:	c3                   	ret    
 8056529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    f = freopen (name, mode, f);
  saved_errno = errno;
  if (protect_err)
    close (STDERR_FILENO);
  if (protect_out)
    close (STDOUT_FILENO);
 8056530:	83 ec 0c             	sub    $0xc,%esp
 8056533:	6a 01                	push   $0x1
 8056535:	e8 e6 2f ff ff       	call   8049520 <close@plt>
 805653a:	83 c4 10             	add    $0x10,%esp
 805653d:	e9 52 fd ff ff       	jmp    8056294 <freopen_safer+0x424>
 8056542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
    f = NULL;
  else if (protect_err && !protect_fd (STDERR_FILENO))
    f = NULL;
  else
    f = freopen (name, mode, f);
  saved_errno = errno;
 8056548:	e8 b3 2e ff ff       	call   8049400 <__errno_location@plt>
 805654d:	8b 18                	mov    (%eax),%ebx
 805654f:	89 c5                	mov    %eax,%ebp
 8056551:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  if (protect_in && !protect_fd (STDIN_FILENO))
    f = NULL;
  else if (protect_out && !protect_fd (STDOUT_FILENO))
    f = NULL;
  else if (protect_err && !protect_fd (STDERR_FILENO))
    f = NULL;
 8056555:	31 db                	xor    %ebx,%ebx
 8056557:	89 f6                	mov    %esi,%esi
 8056559:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
  else
    f = freopen (name, mode, f);
  saved_errno = errno;
  if (protect_err)
    close (STDERR_FILENO);
 8056560:	83 ec 0c             	sub    $0xc,%esp
 8056563:	6a 02                	push   $0x2
 8056565:	e8 b6 2f ff ff       	call   8049520 <close@plt>
 805656a:	83 c4 10             	add    $0x10,%esp
 805656d:	e9 b6 fc ff ff       	jmp    8056228 <freopen_safer+0x3b8>
 8056572:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     is system-dependent, so the best we can do is guarantee that all
     lower-valued standard fds are open prior to the freopen call,
     even though this puts more pressure on open fds.  */
  bool protect_in = false;
  bool protect_out = false;
  bool protect_err = false;
 8056578:	31 f6                	xor    %esi,%esi
 805657a:	e9 fc f9 ff ff       	jmp    8055f7b <freopen_safer+0x10b>
 805657f:	90                   	nop
 8056580:	31 f6                	xor    %esi,%esi
     need to return f itself.  The implementation of freopen(NULL,m,f)
     is system-dependent, so the best we can do is guarantee that all
     lower-valued standard fds are open prior to the freopen call,
     even though this puts more pressure on open fds.  */
  bool protect_in = false;
  bool protect_out = false;
 8056582:	31 ff                	xor    %edi,%edi
 8056584:	e9 3a fa ff ff       	jmp    8055fc3 <freopen_safer+0x153>
 8056589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08056590 <__afl_maybe_log>:
 8056590:	9f                   	lahf   
 8056591:	0f 90 c0             	seto   %al
 8056594:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 805659a:	85 d2                	test   %edx,%edx
 805659c:	74 22                	je     80565c0 <__afl_setup>

0805659e <__afl_store>:
 805659e:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 80565a4:	31 cf                	xor    %ecx,%edi
 80565a6:	d1 e9                	shr    %ecx
 80565a8:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 80565ae:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80565b2:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080565b6 <__afl_return>:
 80565b6:	04 7f                	add    $0x7f,%al
 80565b8:	9e                   	sahf   
 80565b9:	c3                   	ret    
 80565ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080565c0 <__afl_setup>:
 80565c0:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 80565c7:	75 ed                	jne    80565b6 <__afl_return>
 80565c9:	50                   	push   %eax
 80565ca:	51                   	push   %ecx
 80565cb:	68 c8 66 05 08       	push   $0x80566c8
 80565d0:	e8 0b 2d ff ff       	call   80492e0 <getenv@plt>
 80565d5:	83 c4 04             	add    $0x4,%esp
 80565d8:	85 c0                	test   %eax,%eax
 80565da:	0f 84 db 00 00 00    	je     80566bb <__afl_setup_abort>
 80565e0:	50                   	push   %eax
 80565e1:	e8 ba 2e ff ff       	call   80494a0 <atoi@plt>
 80565e6:	83 c4 04             	add    $0x4,%esp
 80565e9:	6a 00                	push   $0x0
 80565eb:	6a 00                	push   $0x0
 80565ed:	50                   	push   %eax
 80565ee:	e8 2d 2c ff ff       	call   8049220 <shmat@plt>
 80565f3:	83 c4 0c             	add    $0xc,%esp
 80565f6:	83 f8 ff             	cmp    $0xffffffff,%eax
 80565f9:	0f 84 bc 00 00 00    	je     80566bb <__afl_setup_abort>
 80565ff:	c6 00 01             	movb   $0x1,(%eax)
 8056602:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8056607:	89 c2                	mov    %eax,%edx
 8056609:	59                   	pop    %ecx
 805660a:	58                   	pop    %eax

0805660b <__afl_forkserver>:
 805660b:	50                   	push   %eax
 805660c:	51                   	push   %ecx
 805660d:	52                   	push   %edx
 805660e:	6a 04                	push   $0x4
 8056610:	68 e0 ad 43 08       	push   $0x843ade0
 8056615:	68 c7 00 00 00       	push   $0xc7
 805661a:	e8 b1 2d ff ff       	call   80493d0 <write@plt>
 805661f:	83 c4 0c             	add    $0xc,%esp
 8056622:	83 f8 04             	cmp    $0x4,%eax
 8056625:	75 6e                	jne    8056695 <__afl_fork_resume>

08056627 <__afl_fork_wait_loop>:
 8056627:	6a 04                	push   $0x4
 8056629:	68 e0 ad 43 08       	push   $0x843ade0
 805662e:	68 c6 00 00 00       	push   $0xc6
 8056633:	e8 28 2b ff ff       	call   8049160 <read@plt>
 8056638:	83 c4 0c             	add    $0xc,%esp
 805663b:	83 f8 04             	cmp    $0x4,%eax
 805663e:	75 74                	jne    80566b4 <__afl_die>
 8056640:	e8 fb 2d ff ff       	call   8049440 <fork@plt>
 8056645:	83 f8 00             	cmp    $0x0,%eax
 8056648:	7c 6a                	jl     80566b4 <__afl_die>
 805664a:	74 49                	je     8056695 <__afl_fork_resume>
 805664c:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8056651:	6a 04                	push   $0x4
 8056653:	68 40 ae 43 08       	push   $0x843ae40
 8056658:	68 c7 00 00 00       	push   $0xc7
 805665d:	e8 6e 2d ff ff       	call   80493d0 <write@plt>
 8056662:	83 c4 0c             	add    $0xc,%esp
 8056665:	6a 00                	push   $0x0
 8056667:	68 e0 ad 43 08       	push   $0x843ade0
 805666c:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8056672:	e8 f9 2b ff ff       	call   8049270 <waitpid@plt>
 8056677:	83 c4 0c             	add    $0xc,%esp
 805667a:	83 f8 00             	cmp    $0x0,%eax
 805667d:	7e 35                	jle    80566b4 <__afl_die>
 805667f:	6a 04                	push   $0x4
 8056681:	68 e0 ad 43 08       	push   $0x843ade0
 8056686:	68 c7 00 00 00       	push   $0xc7
 805668b:	e8 40 2d ff ff       	call   80493d0 <write@plt>
 8056690:	83 c4 0c             	add    $0xc,%esp
 8056693:	eb 92                	jmp    8056627 <__afl_fork_wait_loop>

08056695 <__afl_fork_resume>:
 8056695:	68 c6 00 00 00       	push   $0xc6
 805669a:	e8 81 2e ff ff       	call   8049520 <close@plt>
 805669f:	68 c7 00 00 00       	push   $0xc7
 80566a4:	e8 77 2e ff ff       	call   8049520 <close@plt>
 80566a9:	83 c4 08             	add    $0x8,%esp
 80566ac:	5a                   	pop    %edx
 80566ad:	59                   	pop    %ecx
 80566ae:	58                   	pop    %eax
 80566af:	e9 ea fe ff ff       	jmp    805659e <__afl_store>

080566b4 <__afl_die>:
 80566b4:	31 c0                	xor    %eax,%eax
 80566b6:	e8 d5 2a ff ff       	call   8049190 <_exit@plt>

080566bb <__afl_setup_abort>:
 80566bb:	fe 05 60 ae 43 08    	incb   0x843ae60
 80566c1:	59                   	pop    %ecx
 80566c2:	58                   	pop    %eax
 80566c3:	e9 ee fe ff ff       	jmp    80565b6 <__afl_return>

080566c8 <.AFL_SHM_ENV>:
 80566c8:	5f                   	pop    %edi
 80566c9:	5f                   	pop    %edi
 80566ca:	41                   	inc    %ecx
 80566cb:	46                   	inc    %esi
 80566cc:	4c                   	dec    %esp
 80566cd:	5f                   	pop    %edi
 80566ce:	53                   	push   %ebx
 80566cf:	48                   	dec    %eax
 80566d0:	4d                   	dec    %ebp
 80566d1:	5f                   	pop    %edi
 80566d2:	49                   	dec    %ecx
 80566d3:	44                   	inc    %esp
 80566d4:	00 66 90             	add    %ah,-0x70(%esi)
 80566d7:	66 90                	xchg   %ax,%ax
 80566d9:	66 90                	xchg   %ax,%ax
 80566db:	66 90                	xchg   %ax,%ax
 80566dd:	66 90                	xchg   %ax,%ax
 80566df:	90                   	nop

080566e0 <hard_locale>:

/* Return true if the current CATEGORY locale is hard, i.e. if you
   can't get away with assuming traditional C or POSIX behavior.  */
bool
hard_locale (int category)
{
 80566e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80566e4:	89 3c 24             	mov    %edi,(%esp)
 80566e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80566eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80566ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80566f3:	b9 ce 25 00 00       	mov    $0x25ce,%ecx
 80566f8:	e8 03 01 00 00       	call   8056800 <__afl_maybe_log>
 80566fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056701:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056705:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056709:	8b 3c 24             	mov    (%esp),%edi
 805670c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056710:	57                   	push   %edi
 8056711:	56                   	push   %esi
 8056712:	83 ec 0c             	sub    $0xc,%esp
  bool hard = true;
  char const *p = setlocale (category, NULL);
 8056715:	6a 00                	push   $0x0
 8056717:	ff 74 24 1c          	pushl  0x1c(%esp)
 805671b:	e8 50 2d ff ff       	call   8049470 <setlocale@plt>

  if (p)
 8056720:	83 c4 10             	add    $0x10,%esp
 8056723:	85 c0                	test   %eax,%eax
 8056725:	0f 84 c5 00 00 00    	je     80567f0 <hard_locale+0x110>
 805672b:	90                   	nop
 805672c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056730:	89 3c 24             	mov    %edi,(%esp)
 8056733:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056737:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805673b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805673f:	b9 d5 b0 00 00       	mov    $0xb0d5,%ecx
 8056744:	e8 b7 00 00 00       	call   8056800 <__afl_maybe_log>
 8056749:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805674d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056751:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056755:	8b 3c 24             	mov    (%esp),%edi
 8056758:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (2 <= GLIBC_VERSION)
        {
          if (strcmp (p, "C") == 0 || strcmp (p, "POSIX") == 0)
 805675c:	80 38 43             	cmpb   $0x43,(%eax)
 805675f:	75 77                	jne    80567d8 <hard_locale+0xf8>
 8056761:	8d 76 00             	lea    0x0(%esi),%esi
 8056764:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056768:	89 3c 24             	mov    %edi,(%esp)
 805676b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805676f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056773:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056777:	b9 d1 9e 00 00       	mov    $0x9ed1,%ecx
 805677c:	e8 7f 00 00 00       	call   8056800 <__afl_maybe_log>
 8056781:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056785:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056789:	8b 54 24 04          	mov    0x4(%esp),%edx
 805678d:	8b 3c 24             	mov    (%esp),%edi
 8056790:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056794:	80 78 01 00          	cmpb   $0x0,0x1(%eax)
 8056798:	75 3e                	jne    80567d8 <hard_locale+0xf8>
 805679a:	66 90                	xchg   %ax,%ax
 805679c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80567a0:	89 3c 24             	mov    %edi,(%esp)
 80567a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80567a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80567ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80567af:	b9 f8 d9 00 00       	mov    $0xd9f8,%ecx
 80567b4:	e8 47 00 00 00       	call   8056800 <__afl_maybe_log>
 80567b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80567bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80567c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80567c5:	8b 3c 24             	mov    (%esp),%edi
 80567c8:	8d 64 24 10          	lea    0x10(%esp),%esp
            }
        }
    }

  return hard;
}
 80567cc:	83 c4 04             	add    $0x4,%esp
  if (p)
    {
      if (2 <= GLIBC_VERSION)
        {
          if (strcmp (p, "C") == 0 || strcmp (p, "POSIX") == 0)
            hard = false;
 80567cf:	31 c0                	xor    %eax,%eax
            }
        }
    }

  return hard;
}
 80567d1:	5e                   	pop    %esi
 80567d2:	5f                   	pop    %edi
 80567d3:	c3                   	ret    
 80567d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

  if (p)
    {
      if (2 <= GLIBC_VERSION)
        {
          if (strcmp (p, "C") == 0 || strcmp (p, "POSIX") == 0)
 80567d8:	89 c6                	mov    %eax,%esi
 80567da:	bf c5 66 06 08       	mov    $0x80666c5,%edi
 80567df:	b9 06 00 00 00       	mov    $0x6,%ecx
 80567e4:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 80567e6:	0f 95 c0             	setne  %al
            }
        }
    }

  return hard;
}
 80567e9:	83 c4 04             	add    $0x4,%esp
 80567ec:	5e                   	pop    %esi
 80567ed:	5f                   	pop    %edi
 80567ee:	c3                   	ret    
 80567ef:	90                   	nop
 80567f0:	83 c4 04             	add    $0x4,%esp
/* Return true if the current CATEGORY locale is hard, i.e. if you
   can't get away with assuming traditional C or POSIX behavior.  */
bool
hard_locale (int category)
{
  bool hard = true;
 80567f3:	b8 01 00 00 00       	mov    $0x1,%eax
            }
        }
    }

  return hard;
}
 80567f8:	5e                   	pop    %esi
 80567f9:	5f                   	pop    %edi
 80567fa:	c3                   	ret    
 80567fb:	90                   	nop
 80567fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08056800 <__afl_maybe_log>:
 8056800:	9f                   	lahf   
 8056801:	0f 90 c0             	seto   %al
 8056804:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 805680a:	85 d2                	test   %edx,%edx
 805680c:	74 22                	je     8056830 <__afl_setup>

0805680e <__afl_store>:
 805680e:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8056814:	31 cf                	xor    %ecx,%edi
 8056816:	d1 e9                	shr    %ecx
 8056818:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 805681e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8056822:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08056826 <__afl_return>:
 8056826:	04 7f                	add    $0x7f,%al
 8056828:	9e                   	sahf   
 8056829:	c3                   	ret    
 805682a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08056830 <__afl_setup>:
 8056830:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8056837:	75 ed                	jne    8056826 <__afl_return>
 8056839:	50                   	push   %eax
 805683a:	51                   	push   %ecx
 805683b:	68 38 69 05 08       	push   $0x8056938
 8056840:	e8 9b 2a ff ff       	call   80492e0 <getenv@plt>
 8056845:	83 c4 04             	add    $0x4,%esp
 8056848:	85 c0                	test   %eax,%eax
 805684a:	0f 84 db 00 00 00    	je     805692b <__afl_setup_abort>
 8056850:	50                   	push   %eax
 8056851:	e8 4a 2c ff ff       	call   80494a0 <atoi@plt>
 8056856:	83 c4 04             	add    $0x4,%esp
 8056859:	6a 00                	push   $0x0
 805685b:	6a 00                	push   $0x0
 805685d:	50                   	push   %eax
 805685e:	e8 bd 29 ff ff       	call   8049220 <shmat@plt>
 8056863:	83 c4 0c             	add    $0xc,%esp
 8056866:	83 f8 ff             	cmp    $0xffffffff,%eax
 8056869:	0f 84 bc 00 00 00    	je     805692b <__afl_setup_abort>
 805686f:	c6 00 01             	movb   $0x1,(%eax)
 8056872:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8056877:	89 c2                	mov    %eax,%edx
 8056879:	59                   	pop    %ecx
 805687a:	58                   	pop    %eax

0805687b <__afl_forkserver>:
 805687b:	50                   	push   %eax
 805687c:	51                   	push   %ecx
 805687d:	52                   	push   %edx
 805687e:	6a 04                	push   $0x4
 8056880:	68 e0 ad 43 08       	push   $0x843ade0
 8056885:	68 c7 00 00 00       	push   $0xc7
 805688a:	e8 41 2b ff ff       	call   80493d0 <write@plt>
 805688f:	83 c4 0c             	add    $0xc,%esp
 8056892:	83 f8 04             	cmp    $0x4,%eax
 8056895:	75 6e                	jne    8056905 <__afl_fork_resume>

08056897 <__afl_fork_wait_loop>:
 8056897:	6a 04                	push   $0x4
 8056899:	68 e0 ad 43 08       	push   $0x843ade0
 805689e:	68 c6 00 00 00       	push   $0xc6
 80568a3:	e8 b8 28 ff ff       	call   8049160 <read@plt>
 80568a8:	83 c4 0c             	add    $0xc,%esp
 80568ab:	83 f8 04             	cmp    $0x4,%eax
 80568ae:	75 74                	jne    8056924 <__afl_die>
 80568b0:	e8 8b 2b ff ff       	call   8049440 <fork@plt>
 80568b5:	83 f8 00             	cmp    $0x0,%eax
 80568b8:	7c 6a                	jl     8056924 <__afl_die>
 80568ba:	74 49                	je     8056905 <__afl_fork_resume>
 80568bc:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 80568c1:	6a 04                	push   $0x4
 80568c3:	68 40 ae 43 08       	push   $0x843ae40
 80568c8:	68 c7 00 00 00       	push   $0xc7
 80568cd:	e8 fe 2a ff ff       	call   80493d0 <write@plt>
 80568d2:	83 c4 0c             	add    $0xc,%esp
 80568d5:	6a 00                	push   $0x0
 80568d7:	68 e0 ad 43 08       	push   $0x843ade0
 80568dc:	ff 35 40 ae 43 08    	pushl  0x843ae40
 80568e2:	e8 89 29 ff ff       	call   8049270 <waitpid@plt>
 80568e7:	83 c4 0c             	add    $0xc,%esp
 80568ea:	83 f8 00             	cmp    $0x0,%eax
 80568ed:	7e 35                	jle    8056924 <__afl_die>
 80568ef:	6a 04                	push   $0x4
 80568f1:	68 e0 ad 43 08       	push   $0x843ade0
 80568f6:	68 c7 00 00 00       	push   $0xc7
 80568fb:	e8 d0 2a ff ff       	call   80493d0 <write@plt>
 8056900:	83 c4 0c             	add    $0xc,%esp
 8056903:	eb 92                	jmp    8056897 <__afl_fork_wait_loop>

08056905 <__afl_fork_resume>:
 8056905:	68 c6 00 00 00       	push   $0xc6
 805690a:	e8 11 2c ff ff       	call   8049520 <close@plt>
 805690f:	68 c7 00 00 00       	push   $0xc7
 8056914:	e8 07 2c ff ff       	call   8049520 <close@plt>
 8056919:	83 c4 08             	add    $0x8,%esp
 805691c:	5a                   	pop    %edx
 805691d:	59                   	pop    %ecx
 805691e:	58                   	pop    %eax
 805691f:	e9 ea fe ff ff       	jmp    805680e <__afl_store>

08056924 <__afl_die>:
 8056924:	31 c0                	xor    %eax,%eax
 8056926:	e8 65 28 ff ff       	call   8049190 <_exit@plt>

0805692b <__afl_setup_abort>:
 805692b:	fe 05 60 ae 43 08    	incb   0x843ae60
 8056931:	59                   	pop    %ecx
 8056932:	58                   	pop    %eax
 8056933:	e9 ee fe ff ff       	jmp    8056826 <__afl_return>

08056938 <.AFL_SHM_ENV>:
 8056938:	5f                   	pop    %edi
 8056939:	5f                   	pop    %edi
 805693a:	41                   	inc    %ecx
 805693b:	46                   	inc    %esi
 805693c:	4c                   	dec    %esp
 805693d:	5f                   	pop    %edi
 805693e:	53                   	push   %ebx
 805693f:	48                   	dec    %eax
 8056940:	4d                   	dec    %ebp
 8056941:	5f                   	pop    %edi
 8056942:	49                   	dec    %ecx
 8056943:	44                   	inc    %esp
 8056944:	00 66 90             	add    %ah,-0x70(%esi)
 8056947:	66 90                	xchg   %ax,%ax
 8056949:	66 90                	xchg   %ax,%ax
 805694b:	66 90                	xchg   %ax,%ax
 805694d:	66 90                	xchg   %ax,%ax
 805694f:	90                   	nop

08056950 <initbuffer>:

/* Initialize linebuffer LINEBUFFER for use. */

void
initbuffer (struct linebuffer *linebuffer)
{
 8056950:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056954:	89 3c 24             	mov    %edi,(%esp)
 8056957:	89 54 24 04          	mov    %edx,0x4(%esp)
 805695b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805695f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056963:	b9 0d 37 00 00       	mov    $0x370d,%ecx
 8056968:	e8 83 09 00 00       	call   80572f0 <__afl_maybe_log>
 805696d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056971:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056975:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056979:	8b 3c 24             	mov    (%esp),%edi
 805697c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056980:	8b 44 24 04          	mov    0x4(%esp),%eax
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 8056984:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 805698a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
 8056991:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 8056998:	c3                   	ret    
 8056999:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

080569a0 <readlinebuffer_delim>:
   invoking ferror (stream).
   Otherwise, return LINEBUFFER.  */
struct linebuffer *
readlinebuffer_delim (struct linebuffer *linebuffer, FILE *stream,
                      char delimiter)
{
 80569a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80569a4:	89 3c 24             	mov    %edi,(%esp)
 80569a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80569ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80569af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80569b3:	b9 cb 28 00 00       	mov    $0x28cb,%ecx
 80569b8:	e8 33 09 00 00       	call   80572f0 <__afl_maybe_log>
 80569bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80569c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80569c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80569c9:	8b 3c 24             	mov    (%esp),%edi
 80569cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80569d0:	55                   	push   %ebp
 80569d1:	57                   	push   %edi
 80569d2:	56                   	push   %esi
 80569d3:	53                   	push   %ebx
 80569d4:	83 ec 2c             	sub    $0x2c,%esp
  int c;
  char *buffer = linebuffer->buffer;
  char *p = linebuffer->buffer;
  char *end = buffer + linebuffer->size; /* Sentinel. */
 80569d7:	8b 74 24 40          	mov    0x40(%esp),%esi
struct linebuffer *
readlinebuffer_delim (struct linebuffer *linebuffer, FILE *stream,
                      char delimiter)
{
  int c;
  char *buffer = linebuffer->buffer;
 80569db:	8b 5c 24 40          	mov    0x40(%esp),%ebx
   invoking ferror (stream).
   Otherwise, return LINEBUFFER.  */
struct linebuffer *
readlinebuffer_delim (struct linebuffer *linebuffer, FILE *stream,
                      char delimiter)
{
 80569df:	8b 7c 24 44          	mov    0x44(%esp),%edi
 80569e3:	8b 44 24 48          	mov    0x48(%esp),%eax
  int c;
  char *buffer = linebuffer->buffer;
 80569e7:	8b 5b 08             	mov    0x8(%ebx),%ebx
  char *p = linebuffer->buffer;
  char *end = buffer + linebuffer->size; /* Sentinel. */
 80569ea:	8b 0e                	mov    (%esi),%ecx
        {
          if (p == buffer || ferror (stream))
            return NULL;
          if (p[-1] == delimiter)
            break;
          c = delimiter;
 80569ec:	0f be d0             	movsbl %al,%edx
   invoking ferror (stream).
   Otherwise, return LINEBUFFER.  */
struct linebuffer *
readlinebuffer_delim (struct linebuffer *linebuffer, FILE *stream,
                      char delimiter)
{
 80569ef:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 80569f3:	88 44 24 13          	mov    %al,0x13(%esp)
        {
          if (p == buffer || ferror (stream))
            return NULL;
          if (p[-1] == delimiter)
            break;
          c = delimiter;
 80569f7:	89 54 24 0c          	mov    %edx,0xc(%esp)
                      char delimiter)
{
  int c;
  char *buffer = linebuffer->buffer;
  char *p = linebuffer->buffer;
  char *end = buffer + linebuffer->size; /* Sentinel. */
 80569fb:	01 d9                	add    %ebx,%ecx

  if (feof (stream))
 80569fd:	f6 07 10             	testb  $0x10,(%edi)
 8056a00:	89 de                	mov    %ebx,%esi
 8056a02:	89 cd                	mov    %ecx,%ebp
 8056a04:	74 7e                	je     8056a84 <readlinebuffer_delim+0xe4>
 8056a06:	66 90                	xchg   %ax,%ax
 8056a08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056a0c:	89 3c 24             	mov    %edi,(%esp)
 8056a0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056a13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056a17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056a1b:	b9 93 3d 00 00       	mov    $0x3d93,%ecx
 8056a20:	e8 cb 08 00 00       	call   80572f0 <__afl_maybe_log>
 8056a25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056a29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056a2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056a31:	8b 3c 24             	mov    (%esp),%edi
 8056a34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056a38:	e9 0b 08 00 00       	jmp    8057248 <readlinebuffer_delim+0x8a8>
 8056a3d:	8d 76 00             	lea    0x0(%esi),%esi
          linebuffer->buffer = buffer;
          end = buffer + linebuffer->size;
        }
      *p++ = c;
    }
  while (c != delimiter);
 8056a40:	3b 54 24 0c          	cmp    0xc(%esp),%edx
            return NULL;
          if (p[-1] == delimiter)
            break;
          c = delimiter;
        }
      if (p == end)
 8056a44:	89 f1                	mov    %esi,%ecx
}kbcieiubweuhc1681692777;});
          p = buffer + oldsize;
          linebuffer->buffer = buffer;
          end = buffer + linebuffer->size;
        }
      *p++ = c;
 8056a46:	8d 71 01             	lea    0x1(%ecx),%esi
 8056a49:	88 11                	mov    %dl,(%ecx)
    }
  while (c != delimiter);
 8056a4b:	0f 84 4f 06 00 00    	je     80570a0 <readlinebuffer_delim+0x700>
 8056a51:	8d 76 00             	lea    0x0(%esi),%esi
 8056a54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056a58:	89 3c 24             	mov    %edi,(%esp)
 8056a5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056a5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056a63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056a67:	b9 3f 29 00 00       	mov    $0x293f,%ecx
 8056a6c:	e8 7f 08 00 00       	call   80572f0 <__afl_maybe_log>
 8056a71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056a75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056a79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056a7d:	8b 3c 24             	mov    (%esp),%edi
 8056a80:	8d 64 24 10          	lea    0x10(%esp),%esp
# ifdef __USE_POSIX
/* This is defined in POSIX.1:1996.  */
__STDIO_INLINE int
getc_unlocked (FILE *__fp)
{
  return _IO_getc_unlocked (__fp);
 8056a84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056a88:	89 3c 24             	mov    %edi,(%esp)
 8056a8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056a8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056a93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056a97:	b9 f9 44 00 00       	mov    $0x44f9,%ecx
 8056a9c:	e8 4f 08 00 00       	call   80572f0 <__afl_maybe_log>
 8056aa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056aa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056aa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056aad:	8b 3c 24             	mov    (%esp),%edi
 8056ab0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056ab4:	8b 47 04             	mov    0x4(%edi),%eax
 8056ab7:	3b 47 08             	cmp    0x8(%edi),%eax
 8056aba:	0f 83 f0 05 00 00    	jae    80570b0 <readlinebuffer_delim+0x710>
 8056ac0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056ac4:	89 3c 24             	mov    %edi,(%esp)
 8056ac7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056acb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056acf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056ad3:	b9 6d 9e 00 00       	mov    $0x9e6d,%ecx
 8056ad8:	e8 13 08 00 00       	call   80572f0 <__afl_maybe_log>
 8056add:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056ae1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056ae5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056ae9:	8b 3c 24             	mov    (%esp),%edi
 8056aec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056af0:	8d 48 01             	lea    0x1(%eax),%ecx
 8056af3:	89 4f 04             	mov    %ecx,0x4(%edi)
 8056af6:	0f b6 10             	movzbl (%eax),%edx
 8056af9:	8d 76 00             	lea    0x0(%esi),%esi
            return NULL;
          if (p[-1] == delimiter)
            break;
          c = delimiter;
        }
      if (p == end)
 8056afc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056b00:	89 3c 24             	mov    %edi,(%esp)
 8056b03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056b07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056b0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056b0f:	b9 f9 fb 00 00       	mov    $0xfbf9,%ecx
 8056b14:	e8 d7 07 00 00       	call   80572f0 <__afl_maybe_log>
 8056b19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056b1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056b21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056b25:	8b 3c 24             	mov    (%esp),%edi
 8056b28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056b2c:	39 ee                	cmp    %ebp,%esi
 8056b2e:	0f 85 0c ff ff ff    	jne    8056a40 <readlinebuffer_delim+0xa0>
 8056b34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056b38:	89 3c 24             	mov    %edi,(%esp)
 8056b3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056b3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056b43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056b47:	b9 e3 2b 00 00       	mov    $0x2be3,%ecx
 8056b4c:	e8 9f 07 00 00       	call   80572f0 <__afl_maybe_log>
 8056b51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056b55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056b59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056b5d:	8b 3c 24             	mov    (%esp),%edi
 8056b60:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          size_t oldsize = linebuffer->size;
 8056b64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056b68:	89 3c 24             	mov    %edi,(%esp)
 8056b6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056b6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056b73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056b77:	b9 4a d8 00 00       	mov    $0xd84a,%ecx
 8056b7c:	e8 6f 07 00 00       	call   80572f0 <__afl_maybe_log>
 8056b81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056b85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056b89:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056b8d:	8b 3c 24             	mov    (%esp),%edi
 8056b90:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056b94:	8b 74 24 40          	mov    0x40(%esp),%esi
          buffer = ({if (((buffer)) && ((buffer)))  {int lava_130 = 0;
 8056b98:	85 db                	test   %ebx,%ebx
            break;
          c = delimiter;
        }
      if (p == end)
        {
          size_t oldsize = linebuffer->size;
 8056b9a:	8b 0e                	mov    (%esi),%ecx
 8056b9c:	89 4c 24 14          	mov    %ecx,0x14(%esp)
          buffer = ({if (((buffer)) && ((buffer)))  {int lava_130 = 0;
 8056ba0:	0f 84 e7 00 00 00    	je     8056c8d <readlinebuffer_delim+0x2ed>
 8056ba6:	66 90                	xchg   %ax,%ax
 8056ba8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056bac:	89 3c 24             	mov    %edi,(%esp)
 8056baf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056bb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056bb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056bbb:	b9 ff 8c 00 00       	mov    $0x8cff,%ecx
 8056bc0:	e8 2b 07 00 00       	call   80572f0 <__afl_maybe_log>
 8056bc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056bc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056bcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056bd1:	8b 3c 24             	mov    (%esp),%edi
 8056bd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056bd8:	89 54 24 18          	mov    %edx,0x18(%esp)
          lava_130 |= ((unsigned char *) (buffer))[0] << (0*8);lava_130 |= ((unsigned char *) (buffer))[1] << (1*8);lava_130 |= ((unsigned char *) (buffer))[2] << (2*8);lava_130 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(130,lava_130);
 8056bdc:	0f b6 6b 02          	movzbl 0x2(%ebx),%ebp
 8056be0:	83 ec 08             	sub    $0x8,%esp
 8056be3:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 8056be7:	0f b6 03             	movzbl (%ebx),%eax
 8056bea:	0f b6 73 03          	movzbl 0x3(%ebx),%esi
 8056bee:	c1 e5 10             	shl    $0x10,%ebp
 8056bf1:	c1 e2 08             	shl    $0x8,%edx
 8056bf4:	09 ea                	or     %ebp,%edx
 8056bf6:	c1 e6 18             	shl    $0x18,%esi
 8056bf9:	09 c2                	or     %eax,%edx
 8056bfb:	09 d6                	or     %edx,%esi
 8056bfd:	56                   	push   %esi
 8056bfe:	68 82 00 00 00       	push   $0x82
 8056c03:	e8 88 cc ff ff       	call   8053890 <lava_set>
          int lava_112 = 0;
          lava_112 |= ((unsigned char *) (buffer))[0] << (0*8);lava_112 |= ((unsigned char *) (buffer))[1] << (1*8);lava_112 |= ((unsigned char *) (buffer))[2] << (2*8);lava_112 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(112,lava_112);
 8056c08:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 8056c0c:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 8056c10:	58                   	pop    %eax
 8056c11:	0f b6 2b             	movzbl (%ebx),%ebp
 8056c14:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
 8056c18:	c1 e2 10             	shl    $0x10,%edx
 8056c1b:	c1 e1 08             	shl    $0x8,%ecx
 8056c1e:	09 d1                	or     %edx,%ecx
 8056c20:	09 e9                	or     %ebp,%ecx
 8056c22:	c1 e0 18             	shl    $0x18,%eax
 8056c25:	5a                   	pop    %edx
 8056c26:	09 c8                	or     %ecx,%eax
 8056c28:	50                   	push   %eax
 8056c29:	6a 70                	push   $0x70
 8056c2b:	e8 60 cc ff ff       	call   8053890 <lava_set>
          int lava_215 = 0;
          lava_215 |= ((unsigned char *) (buffer))[0] << (0*8);lava_215 |= ((unsigned char *) (buffer))[1] << (1*8);lava_215 |= ((unsigned char *) (buffer))[2] << (2*8);lava_215 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(215,lava_215);
 8056c30:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 8056c34:	0f b6 73 02          	movzbl 0x2(%ebx),%esi
 8056c38:	0f b6 13             	movzbl (%ebx),%edx
 8056c3b:	c1 e6 10             	shl    $0x10,%esi
 8056c3e:	c1 e1 08             	shl    $0x8,%ecx
 8056c41:	09 f1                	or     %esi,%ecx
 8056c43:	5e                   	pop    %esi
 8056c44:	5d                   	pop    %ebp
 8056c45:	0f b6 6b 03          	movzbl 0x3(%ebx),%ebp
 8056c49:	09 d1                	or     %edx,%ecx
 8056c4b:	c1 e5 18             	shl    $0x18,%ebp
 8056c4e:	09 cd                	or     %ecx,%ebp
 8056c50:	55                   	push   %ebp
 8056c51:	68 d7 00 00 00       	push   $0xd7
 8056c56:	e8 35 cc ff ff       	call   8053890 <lava_set>
          int lava_169 = 0;
          lava_169 |= ((unsigned char *) (buffer))[0] << (0*8);lava_169 |= ((unsigned char *) (buffer))[1] << (1*8);lava_169 |= ((unsigned char *) (buffer))[2] << (2*8);lava_169 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(169,lava_169);
 8056c5b:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 8056c5f:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8056c63:	0f b6 33             	movzbl (%ebx),%esi
 8056c66:	c1 e0 10             	shl    $0x10,%eax
 8056c69:	c1 e1 08             	shl    $0x8,%ecx
 8056c6c:	09 c1                	or     %eax,%ecx
 8056c6e:	58                   	pop    %eax
 8056c6f:	5a                   	pop    %edx
 8056c70:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 8056c74:	09 f1                	or     %esi,%ecx
 8056c76:	c1 e2 18             	shl    $0x18,%edx
 8056c79:	09 ca                	or     %ecx,%edx
 8056c7b:	52                   	push   %edx
 8056c7c:	68 a9 00 00 00       	push   $0xa9
 8056c81:	e8 0a cc ff ff       	call   8053890 <lava_set>
 8056c86:	83 c4 10             	add    $0x10,%esp
 8056c89:	8b 54 24 18          	mov    0x18(%esp),%edx
 8056c8d:	8d 76 00             	lea    0x0(%esi),%esi
 8056c90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056c94:	89 3c 24             	mov    %edi,(%esp)
 8056c97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056c9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056c9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056ca3:	b9 fd 9b 00 00       	mov    $0x9bfd,%ecx
 8056ca8:	e8 43 06 00 00       	call   80572f0 <__afl_maybe_log>
 8056cad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056cb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056cb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056cb9:	8b 3c 24             	mov    (%esp),%edi
 8056cbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056cc0:	89 54 24 18          	mov    %edx,0x18(%esp)
          }void * kbcieiubweuhc1681692777 = x2realloc (buffer, &linebuffer->size+(lava_get(112))*(0x6c6175f1==(lava_get(112))||0xf175616c==(lava_get(112)))+(lava_get(166))*(0x6c6175bb==(lava_get(166))||0xbb75616c==(lava_get(166)))+(lava_get(222))*(0x6c617583==(lava_get(222))||0x8375616c==(lava_get(222))));if (((buffer)) && ((buffer)))  {int lava_166 = 0;
 8056cc4:	83 ec 0c             	sub    $0xc,%esp
 8056cc7:	6a 70                	push   $0x70
 8056cc9:	e8 02 cc ff ff       	call   80538d0 <lava_get>
 8056cce:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
 8056cd5:	89 c6                	mov    %eax,%esi
 8056cd7:	e8 f4 cb ff ff       	call   80538d0 <lava_get>
 8056cdc:	83 c4 10             	add    $0x10,%esp
 8056cdf:	3d f1 75 61 6c       	cmp    $0x6c6175f1,%eax
 8056ce4:	b9 01 00 00 00       	mov    $0x1,%ecx
 8056ce9:	8b 6c 24 18          	mov    0x18(%esp),%ebp
 8056ced:	74 4c                	je     8056d3b <readlinebuffer_delim+0x39b>
 8056cef:	90                   	nop
 8056cf0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056cf4:	89 3c 24             	mov    %edi,(%esp)
 8056cf7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056cfb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056cff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056d03:	b9 81 c6 00 00       	mov    $0xc681,%ecx
 8056d08:	e8 e3 05 00 00       	call   80572f0 <__afl_maybe_log>
 8056d0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056d11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056d15:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056d19:	8b 3c 24             	mov    (%esp),%edi
 8056d1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056d20:	83 ec 0c             	sub    $0xc,%esp
 8056d23:	6a 70                	push   $0x70
 8056d25:	e8 a6 cb ff ff       	call   80538d0 <lava_get>
 8056d2a:	83 c4 10             	add    $0x10,%esp
 8056d2d:	8b 6c 24 18          	mov    0x18(%esp),%ebp
 8056d31:	31 c9                	xor    %ecx,%ecx
 8056d33:	3d 6c 61 75 f1       	cmp    $0xf175616c,%eax
 8056d38:	0f 94 c1             	sete   %cl
 8056d3b:	90                   	nop
 8056d3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056d40:	89 3c 24             	mov    %edi,(%esp)
 8056d43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056d47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056d4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056d4f:	b9 37 d3 00 00       	mov    $0xd337,%ecx
 8056d54:	e8 97 05 00 00       	call   80572f0 <__afl_maybe_log>
 8056d59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056d5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056d61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056d65:	8b 3c 24             	mov    (%esp),%edi
 8056d68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056d6c:	89 6c 24 18          	mov    %ebp,0x18(%esp)
 8056d70:	83 ec 0c             	sub    $0xc,%esp
 8056d73:	68 a6 00 00 00       	push   $0xa6
 8056d78:	0f af f1             	imul   %ecx,%esi
 8056d7b:	e8 50 cb ff ff       	call   80538d0 <lava_get>
 8056d80:	c7 04 24 a6 00 00 00 	movl   $0xa6,(%esp)
 8056d87:	89 c5                	mov    %eax,%ebp
 8056d89:	e8 42 cb ff ff       	call   80538d0 <lava_get>
 8056d8e:	83 c4 10             	add    $0x10,%esp
 8056d91:	3d bb 75 61 6c       	cmp    $0x6c6175bb,%eax
 8056d96:	b9 01 00 00 00       	mov    $0x1,%ecx
 8056d9b:	8b 44 24 18          	mov    0x18(%esp),%eax
 8056d9f:	74 51                	je     8056df2 <readlinebuffer_delim+0x452>
 8056da1:	8d 76 00             	lea    0x0(%esi),%esi
 8056da4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056da8:	89 3c 24             	mov    %edi,(%esp)
 8056dab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056daf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056db3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056db7:	b9 60 41 00 00       	mov    $0x4160,%ecx
 8056dbc:	e8 2f 05 00 00       	call   80572f0 <__afl_maybe_log>
 8056dc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056dc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056dc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056dcd:	8b 3c 24             	mov    (%esp),%edi
 8056dd0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056dd4:	83 ec 0c             	sub    $0xc,%esp
 8056dd7:	68 a6 00 00 00       	push   $0xa6
 8056ddc:	e8 ef ca ff ff       	call   80538d0 <lava_get>
 8056de1:	83 c4 10             	add    $0x10,%esp
 8056de4:	31 c9                	xor    %ecx,%ecx
 8056de6:	3d 6c 61 75 bb       	cmp    $0xbb75616c,%eax
 8056deb:	8b 44 24 18          	mov    0x18(%esp),%eax
 8056def:	0f 94 c1             	sete   %cl
 8056df2:	66 90                	xchg   %ax,%ax
 8056df4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056df8:	89 3c 24             	mov    %edi,(%esp)
 8056dfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056dff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056e03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056e07:	b9 b9 28 00 00       	mov    $0x28b9,%ecx
 8056e0c:	e8 df 04 00 00       	call   80572f0 <__afl_maybe_log>
 8056e11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056e15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056e19:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056e1d:	8b 3c 24             	mov    (%esp),%edi
 8056e20:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056e24:	89 44 24 18          	mov    %eax,0x18(%esp)
 8056e28:	83 ec 0c             	sub    $0xc,%esp
 8056e2b:	0f af e9             	imul   %ecx,%ebp
 8056e2e:	68 de 00 00 00       	push   $0xde
 8056e33:	e8 98 ca ff ff       	call   80538d0 <lava_get>
 8056e38:	01 f5                	add    %esi,%ebp
 8056e3a:	c7 04 24 de 00 00 00 	movl   $0xde,(%esp)
 8056e41:	89 c6                	mov    %eax,%esi
 8056e43:	e8 88 ca ff ff       	call   80538d0 <lava_get>
 8056e48:	83 c4 10             	add    $0x10,%esp
 8056e4b:	3d 83 75 61 6c       	cmp    $0x6c617583,%eax
 8056e50:	b9 01 00 00 00       	mov    $0x1,%ecx
 8056e55:	8b 54 24 18          	mov    0x18(%esp),%edx
 8056e59:	74 4f                	je     8056eaa <readlinebuffer_delim+0x50a>
 8056e5b:	90                   	nop
 8056e5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056e60:	89 3c 24             	mov    %edi,(%esp)
 8056e63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056e67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056e6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056e6f:	b9 58 ed 00 00       	mov    $0xed58,%ecx
 8056e74:	e8 77 04 00 00       	call   80572f0 <__afl_maybe_log>
 8056e79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056e7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056e81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056e85:	8b 3c 24             	mov    (%esp),%edi
 8056e88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056e8c:	83 ec 0c             	sub    $0xc,%esp
 8056e8f:	68 de 00 00 00       	push   $0xde
 8056e94:	e8 37 ca ff ff       	call   80538d0 <lava_get>
 8056e99:	83 c4 10             	add    $0x10,%esp
 8056e9c:	8b 54 24 18          	mov    0x18(%esp),%edx
 8056ea0:	31 c9                	xor    %ecx,%ecx
 8056ea2:	3d 6c 61 75 83       	cmp    $0x8375616c,%eax
 8056ea7:	0f 94 c1             	sete   %cl
 8056eaa:	66 90                	xchg   %ax,%ax
 8056eac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056eb0:	89 3c 24             	mov    %edi,(%esp)
 8056eb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056eb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056ebb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056ebf:	b9 d5 0c 00 00       	mov    $0xcd5,%ecx
 8056ec4:	e8 27 04 00 00       	call   80572f0 <__afl_maybe_log>
 8056ec9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056ecd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056ed1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056ed5:	8b 3c 24             	mov    (%esp),%edi
 8056ed8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056edc:	0f af f1             	imul   %ecx,%esi
 8056edf:	89 54 24 18          	mov    %edx,0x18(%esp)
 8056ee3:	83 ec 08             	sub    $0x8,%esp
 8056ee6:	01 ee                	add    %ebp,%esi
 8056ee8:	8b 6c 24 48          	mov    0x48(%esp),%ebp
 8056eec:	8d 44 b5 00          	lea    0x0(%ebp,%esi,4),%eax
 8056ef0:	50                   	push   %eax
 8056ef1:	53                   	push   %ebx
 8056ef2:	e8 89 8e 00 00       	call   805fd80 <x2realloc>
 8056ef7:	83 c4 10             	add    $0x10,%esp
 8056efa:	85 db                	test   %ebx,%ebx
 8056efc:	89 c6                	mov    %eax,%esi
 8056efe:	8b 54 24 18          	mov    0x18(%esp),%edx
 8056f02:	0f 84 11 01 00 00    	je     8057019 <readlinebuffer_delim+0x679>
 8056f08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056f0c:	89 3c 24             	mov    %edi,(%esp)
 8056f0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056f13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056f17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056f1b:	b9 59 9d 00 00       	mov    $0x9d59,%ecx
 8056f20:	e8 cb 03 00 00       	call   80572f0 <__afl_maybe_log>
 8056f25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056f29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056f2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056f31:	8b 3c 24             	mov    (%esp),%edi
 8056f34:	8d 64 24 10          	lea    0x10(%esp),%esp
lava_166 |= ((unsigned char *) (buffer))[8] << (0*8);lava_166 |= ((unsigned char *) (buffer))[9] << (1*8);lava_166 |= ((unsigned char *) (buffer))[10] << (2*8);lava_166 |= ((unsigned char *) (buffer))[11] << (3*8);lava_set(166,lava_166);
 8056f38:	0f b6 4b 09          	movzbl 0x9(%ebx),%ecx
 8056f3c:	0f b6 53 0a          	movzbl 0xa(%ebx),%edx
 8056f40:	83 ec 08             	sub    $0x8,%esp
 8056f43:	0f b6 6b 08          	movzbl 0x8(%ebx),%ebp
 8056f47:	0f b6 43 0b          	movzbl 0xb(%ebx),%eax
 8056f4b:	c1 e2 10             	shl    $0x10,%edx
 8056f4e:	c1 e1 08             	shl    $0x8,%ecx
 8056f51:	09 d1                	or     %edx,%ecx
 8056f53:	c1 e0 18             	shl    $0x18,%eax
 8056f56:	09 e9                	or     %ebp,%ecx
 8056f58:	09 c8                	or     %ecx,%eax
 8056f5a:	50                   	push   %eax
 8056f5b:	68 a6 00 00 00       	push   $0xa6
 8056f60:	e8 2b c9 ff ff       	call   8053890 <lava_set>
int lava_171 = 0;
lava_171 |= ((unsigned char *) (buffer))[8] << (0*8);lava_171 |= ((unsigned char *) (buffer))[9] << (1*8);lava_171 |= ((unsigned char *) (buffer))[10] << (2*8);lava_171 |= ((unsigned char *) (buffer))[11] << (3*8);lava_set(171,lava_171);
 8056f65:	0f b6 4b 09          	movzbl 0x9(%ebx),%ecx
 8056f69:	0f b6 53 0a          	movzbl 0xa(%ebx),%edx
 8056f6d:	58                   	pop    %eax
 8056f6e:	0f b6 6b 08          	movzbl 0x8(%ebx),%ebp
 8056f72:	0f b6 43 0b          	movzbl 0xb(%ebx),%eax
 8056f76:	c1 e2 10             	shl    $0x10,%edx
 8056f79:	c1 e1 08             	shl    $0x8,%ecx
 8056f7c:	09 d1                	or     %edx,%ecx
 8056f7e:	09 e9                	or     %ebp,%ecx
 8056f80:	c1 e0 18             	shl    $0x18,%eax
 8056f83:	5a                   	pop    %edx
 8056f84:	09 c8                	or     %ecx,%eax
 8056f86:	50                   	push   %eax
 8056f87:	68 ab 00 00 00       	push   $0xab
 8056f8c:	e8 ff c8 ff ff       	call   8053890 <lava_set>
int lava_227 = 0;
lava_227 |= ((unsigned char *) (buffer))[0] << (0*8);lava_227 |= ((unsigned char *) (buffer))[1] << (1*8);lava_227 |= ((unsigned char *) (buffer))[2] << (2*8);lava_227 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(227,lava_227);
 8056f91:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 8056f95:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 8056f99:	0f b6 2b             	movzbl (%ebx),%ebp
 8056f9c:	c1 e2 10             	shl    $0x10,%edx
 8056f9f:	c1 e1 08             	shl    $0x8,%ecx
 8056fa2:	09 d1                	or     %edx,%ecx
 8056fa4:	09 e9                	or     %ebp,%ecx
 8056fa6:	5d                   	pop    %ebp
 8056fa7:	58                   	pop    %eax
 8056fa8:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
 8056fac:	c1 e0 18             	shl    $0x18,%eax
 8056faf:	09 c8                	or     %ecx,%eax
 8056fb1:	50                   	push   %eax
 8056fb2:	68 e3 00 00 00       	push   $0xe3
 8056fb7:	e8 d4 c8 ff ff       	call   8053890 <lava_set>
int lava_222 = 0;
lava_222 |= ((unsigned char *) (buffer))[0] << (0*8);lava_222 |= ((unsigned char *) (buffer))[1] << (1*8);lava_222 |= ((unsigned char *) (buffer))[2] << (2*8);lava_222 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(222,lava_222);
 8056fbc:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 8056fc0:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 8056fc4:	58                   	pop    %eax
 8056fc5:	0f b6 2b             	movzbl (%ebx),%ebp
 8056fc8:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
 8056fcc:	c1 e2 10             	shl    $0x10,%edx
 8056fcf:	c1 e1 08             	shl    $0x8,%ecx
 8056fd2:	09 d1                	or     %edx,%ecx
 8056fd4:	09 e9                	or     %ebp,%ecx
 8056fd6:	c1 e0 18             	shl    $0x18,%eax
 8056fd9:	5a                   	pop    %edx
 8056fda:	09 c8                	or     %ecx,%eax
 8056fdc:	50                   	push   %eax
 8056fdd:	68 de 00 00 00       	push   $0xde
 8056fe2:	e8 a9 c8 ff ff       	call   8053890 <lava_set>
int lava_170 = 0;
lava_170 |= ((unsigned char *) (buffer))[0] << (0*8);lava_170 |= ((unsigned char *) (buffer))[1] << (1*8);lava_170 |= ((unsigned char *) (buffer))[2] << (2*8);lava_170 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(170,lava_170);
 8056fe7:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 8056feb:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8056fef:	0f b6 2b             	movzbl (%ebx),%ebp
 8056ff2:	0f b6 5b 03          	movzbl 0x3(%ebx),%ebx
 8056ff6:	c1 e1 08             	shl    $0x8,%ecx
 8056ff9:	c1 e0 10             	shl    $0x10,%eax
 8056ffc:	09 c8                	or     %ecx,%eax
 8056ffe:	09 e8                	or     %ebp,%eax
 8057000:	c1 e3 18             	shl    $0x18,%ebx
 8057003:	59                   	pop    %ecx
 8057004:	5d                   	pop    %ebp
 8057005:	09 d8                	or     %ebx,%eax
 8057007:	50                   	push   %eax
 8057008:	68 aa 00 00 00       	push   $0xaa
 805700d:	e8 7e c8 ff ff       	call   8053890 <lava_set>
 8057012:	83 c4 10             	add    $0x10,%esp
 8057015:	8b 54 24 18          	mov    0x18(%esp),%edx
 8057019:	8d 76 00             	lea    0x0(%esi),%esi
}kbcieiubweuhc1681692777;});
          p = buffer + oldsize;
          linebuffer->buffer = buffer;
 805701c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057020:	89 3c 24             	mov    %edi,(%esp)
 8057023:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057027:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805702b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805702f:	b9 6a 2f 00 00       	mov    $0x2f6a,%ecx
 8057034:	e8 b7 02 00 00       	call   80572f0 <__afl_maybe_log>
 8057039:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805703d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057041:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057045:	8b 3c 24             	mov    (%esp),%edi
 8057048:	8d 64 24 10          	lea    0x10(%esp),%esp
 805704c:	8b 44 24 40          	mov    0x40(%esp),%eax
int lava_222 = 0;
lava_222 |= ((unsigned char *) (buffer))[0] << (0*8);lava_222 |= ((unsigned char *) (buffer))[1] << (1*8);lava_222 |= ((unsigned char *) (buffer))[2] << (2*8);lava_222 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(222,lava_222);
int lava_170 = 0;
lava_170 |= ((unsigned char *) (buffer))[0] << (0*8);lava_170 |= ((unsigned char *) (buffer))[1] << (1*8);lava_170 |= ((unsigned char *) (buffer))[2] << (2*8);lava_170 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(170,lava_170);
}kbcieiubweuhc1681692777;});
          p = buffer + oldsize;
 8057050:	8b 4c 24 14          	mov    0x14(%esp),%ecx
          c = delimiter;
        }
      if (p == end)
        {
          size_t oldsize = linebuffer->size;
          buffer = ({if (((buffer)) && ((buffer)))  {int lava_130 = 0;
 8057054:	89 f3                	mov    %esi,%ebx
int lava_170 = 0;
lava_170 |= ((unsigned char *) (buffer))[0] << (0*8);lava_170 |= ((unsigned char *) (buffer))[1] << (1*8);lava_170 |= ((unsigned char *) (buffer))[2] << (2*8);lava_170 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(170,lava_170);
}kbcieiubweuhc1681692777;});
          p = buffer + oldsize;
          linebuffer->buffer = buffer;
          end = buffer + linebuffer->size;
 8057056:	8b 28                	mov    (%eax),%ebp
int lava_222 = 0;
lava_222 |= ((unsigned char *) (buffer))[0] << (0*8);lava_222 |= ((unsigned char *) (buffer))[1] << (1*8);lava_222 |= ((unsigned char *) (buffer))[2] << (2*8);lava_222 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(222,lava_222);
int lava_170 = 0;
lava_170 |= ((unsigned char *) (buffer))[0] << (0*8);lava_170 |= ((unsigned char *) (buffer))[1] << (1*8);lava_170 |= ((unsigned char *) (buffer))[2] << (2*8);lava_170 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(170,lava_170);
}kbcieiubweuhc1681692777;});
          p = buffer + oldsize;
 8057058:	01 f1                	add    %esi,%ecx
          linebuffer->buffer = buffer;
 805705a:	89 70 08             	mov    %esi,0x8(%eax)
          end = buffer + linebuffer->size;
        }
      *p++ = c;
 805705d:	88 11                	mov    %dl,(%ecx)
int lava_170 = 0;
lava_170 |= ((unsigned char *) (buffer))[0] << (0*8);lava_170 |= ((unsigned char *) (buffer))[1] << (1*8);lava_170 |= ((unsigned char *) (buffer))[2] << (2*8);lava_170 |= ((unsigned char *) (buffer))[3] << (3*8);lava_set(170,lava_170);
}kbcieiubweuhc1681692777;});
          p = buffer + oldsize;
          linebuffer->buffer = buffer;
          end = buffer + linebuffer->size;
 805705f:	01 f5                	add    %esi,%ebp
        }
      *p++ = c;
    }
  while (c != delimiter);
 8057061:	3b 54 24 0c          	cmp    0xc(%esp),%edx
}kbcieiubweuhc1681692777;});
          p = buffer + oldsize;
          linebuffer->buffer = buffer;
          end = buffer + linebuffer->size;
        }
      *p++ = c;
 8057065:	8d 71 01             	lea    0x1(%ecx),%esi
    }
  while (c != delimiter);
 8057068:	0f 85 16 fa ff ff    	jne    8056a84 <readlinebuffer_delim+0xe4>
 805706e:	66 90                	xchg   %ax,%ax
 8057070:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057074:	89 3c 24             	mov    %edi,(%esp)
 8057077:	89 54 24 04          	mov    %edx,0x4(%esp)
 805707b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805707f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057083:	b9 bb f7 00 00       	mov    $0xf7bb,%ecx
 8057088:	e8 63 02 00 00       	call   80572f0 <__afl_maybe_log>
 805708d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057091:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057095:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057099:	8b 3c 24             	mov    (%esp),%edi
 805709c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80570a0:	89 f5                	mov    %esi,%ebp
 80570a2:	e9 47 01 00 00       	jmp    80571ee <readlinebuffer_delim+0x84e>
 80570a7:	89 f6                	mov    %esi,%esi
 80570a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 80570b0:	83 ec 0c             	sub    $0xc,%esp
 80570b3:	57                   	push   %edi
 80570b4:	e8 97 23 ff ff       	call   8049450 <__uflow@plt>
    return NULL;

  do
    {
      c = getc (stream);
      if (c == EOF)
 80570b9:	83 c4 10             	add    $0x10,%esp
 80570bc:	83 f8 ff             	cmp    $0xffffffff,%eax
 80570bf:	89 c2                	mov    %eax,%edx
 80570c1:	0f 85 32 fa ff ff    	jne    8056af9 <readlinebuffer_delim+0x159>
 80570c7:	90                   	nop
 80570c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80570cc:	89 3c 24             	mov    %edi,(%esp)
 80570cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80570d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80570d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80570db:	b9 4f a1 00 00       	mov    $0xa14f,%ecx
 80570e0:	e8 0b 02 00 00       	call   80572f0 <__afl_maybe_log>
 80570e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80570e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80570ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80570f1:	8b 3c 24             	mov    (%esp),%edi
 80570f4:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          if (p == buffer || ferror (stream))
 80570f8:	39 de                	cmp    %ebx,%esi
 80570fa:	0f 84 48 01 00 00    	je     8057248 <readlinebuffer_delim+0x8a8>
 8057100:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057104:	89 3c 24             	mov    %edi,(%esp)
 8057107:	89 54 24 04          	mov    %edx,0x4(%esp)
 805710b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805710f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057113:	b9 20 b8 00 00       	mov    $0xb820,%ecx
 8057118:	e8 d3 01 00 00       	call   80572f0 <__afl_maybe_log>
 805711d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057121:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057125:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057129:	8b 3c 24             	mov    (%esp),%edi
 805712c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057130:	f6 07 20             	testb  $0x20,(%edi)
 8057133:	0f 85 0f 01 00 00    	jne    8057248 <readlinebuffer_delim+0x8a8>
 8057139:	8d 76 00             	lea    0x0(%esi),%esi
 805713c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057140:	89 3c 24             	mov    %edi,(%esp)
 8057143:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057147:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805714b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805714f:	b9 8b 3b 00 00       	mov    $0x3b8b,%ecx
 8057154:	e8 97 01 00 00       	call   80572f0 <__afl_maybe_log>
 8057159:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805715d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057161:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057165:	8b 3c 24             	mov    (%esp),%edi
 8057168:	8d 64 24 10          	lea    0x10(%esp),%esp
            return NULL;
          if (p[-1] == delimiter)
 805716c:	0f b6 54 24 13       	movzbl 0x13(%esp),%edx
 8057171:	38 56 ff             	cmp    %dl,-0x1(%esi)
 8057174:	0f 84 26 ff ff ff    	je     80570a0 <readlinebuffer_delim+0x700>
 805717a:	66 90                	xchg   %ax,%ax
 805717c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057180:	89 3c 24             	mov    %edi,(%esp)
 8057183:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057187:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805718b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805718f:	b9 02 2a 00 00       	mov    $0x2a02,%ecx
 8057194:	e8 57 01 00 00       	call   80572f0 <__afl_maybe_log>
 8057199:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805719d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80571a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80571a5:	8b 3c 24             	mov    (%esp),%edi
 80571a8:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
          c = delimiter;
        }
      if (p == end)
 80571ac:	39 ee                	cmp    %ebp,%esi
 80571ae:	0f 84 84 00 00 00    	je     8057238 <readlinebuffer_delim+0x898>
 80571b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80571b8:	89 3c 24             	mov    %edi,(%esp)
 80571bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80571bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80571c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80571c7:	b9 4e fa 00 00       	mov    $0xfa4e,%ecx
 80571cc:	e8 1f 01 00 00       	call   80572f0 <__afl_maybe_log>
 80571d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80571d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80571d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80571dd:	8b 3c 24             	mov    (%esp),%edi
 80571e0:	8d 64 24 10          	lea    0x10(%esp),%esp
}kbcieiubweuhc1681692777;});
          p = buffer + oldsize;
          linebuffer->buffer = buffer;
          end = buffer + linebuffer->size;
        }
      *p++ = c;
 80571e4:	0f b6 44 24 1c       	movzbl 0x1c(%esp),%eax
 80571e9:	8d 6e 01             	lea    0x1(%esi),%ebp
 80571ec:	88 06                	mov    %al,(%esi)
 80571ee:	66 90                	xchg   %ax,%ax
    }
  while (c != delimiter);

  linebuffer->length = p - buffer;
 80571f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80571f4:	89 3c 24             	mov    %edi,(%esp)
 80571f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80571fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80571ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057203:	b9 8b 20 00 00       	mov    $0x208b,%ecx
 8057208:	e8 e3 00 00 00       	call   80572f0 <__afl_maybe_log>
 805720d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057211:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057215:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057219:	8b 3c 24             	mov    (%esp),%edi
 805721c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057220:	8b 7c 24 40          	mov    0x40(%esp),%edi
 8057224:	29 dd                	sub    %ebx,%ebp
 8057226:	89 6f 04             	mov    %ebp,0x4(%edi)
  return linebuffer;
}
 8057229:	83 c4 2c             	add    $0x2c,%esp
      *p++ = c;
    }
  while (c != delimiter);

  linebuffer->length = p - buffer;
  return linebuffer;
 805722c:	89 f8                	mov    %edi,%eax
}
 805722e:	5b                   	pop    %ebx
 805722f:	5e                   	pop    %esi
 8057230:	5f                   	pop    %edi
 8057231:	5d                   	pop    %ebp
 8057232:	c3                   	ret    
 8057233:	90                   	nop
 8057234:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        {
          if (p == buffer || ferror (stream))
            return NULL;
          if (p[-1] == delimiter)
            break;
          c = delimiter;
 8057238:	8b 54 24 0c          	mov    0xc(%esp),%edx
 805723c:	e9 23 f9 ff ff       	jmp    8056b64 <readlinebuffer_delim+0x1c4>
 8057241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    }
  while (c != delimiter);

  linebuffer->length = p - buffer;
  return linebuffer;
}
 8057248:	83 c4 2c             	add    $0x2c,%esp
  char *buffer = linebuffer->buffer;
  char *p = linebuffer->buffer;
  char *end = buffer + linebuffer->size; /* Sentinel. */

  if (feof (stream))
    return NULL;
 805724b:	31 c0                	xor    %eax,%eax
    }
  while (c != delimiter);

  linebuffer->length = p - buffer;
  return linebuffer;
}
 805724d:	5b                   	pop    %ebx
 805724e:	5e                   	pop    %esi
 805724f:	5f                   	pop    %edi
 8057250:	5d                   	pop    %ebp
 8057251:	c3                   	ret    
 8057252:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8057259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08057260 <readlinebuffer>:
  memset (linebuffer, 0, sizeof *linebuffer);
}

struct linebuffer *
readlinebuffer (struct linebuffer *linebuffer, FILE *stream)
{
 8057260:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057264:	89 3c 24             	mov    %edi,(%esp)
 8057267:	89 54 24 04          	mov    %edx,0x4(%esp)
 805726b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805726f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057273:	b9 c2 f3 00 00       	mov    $0xf3c2,%ecx
 8057278:	e8 73 00 00 00       	call   80572f0 <__afl_maybe_log>
 805727d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057281:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057285:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057289:	8b 3c 24             	mov    (%esp),%edi
 805728c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057290:	83 ec 10             	sub    $0x10,%esp
  return readlinebuffer_delim (linebuffer, stream, '\n');
 8057293:	6a 0a                	push   $0xa
 8057295:	ff 74 24 1c          	pushl  0x1c(%esp)
 8057299:	ff 74 24 1c          	pushl  0x1c(%esp)
 805729d:	e8 fe f6 ff ff       	call   80569a0 <readlinebuffer_delim>
}
 80572a2:	83 c4 1c             	add    $0x1c,%esp
 80572a5:	c3                   	ret    
 80572a6:	8d 76 00             	lea    0x0(%esi),%esi
 80572a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080572b0 <freebuffer>:
/* Free the buffer that was allocated for linebuffer LINEBUFFER.  */

void
freebuffer (struct linebuffer *linebuffer)
{
  free (linebuffer->buffer);
 80572b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80572b4:	89 3c 24             	mov    %edi,(%esp)
 80572b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80572bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80572bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80572c3:	b9 15 d1 00 00       	mov    $0xd115,%ecx
 80572c8:	e8 23 00 00 00       	call   80572f0 <__afl_maybe_log>
 80572cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80572d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80572d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80572d9:	8b 3c 24             	mov    (%esp),%edi
 80572dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80572e0:	8b 44 24 04          	mov    0x4(%esp),%eax
 80572e4:	8b 50 08             	mov    0x8(%eax),%edx
 80572e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80572eb:	e9 b0 1e ff ff       	jmp    80491a0 <free@plt>

080572f0 <__afl_maybe_log>:
 80572f0:	9f                   	lahf   
 80572f1:	0f 90 c0             	seto   %al
 80572f4:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 80572fa:	85 d2                	test   %edx,%edx
 80572fc:	74 22                	je     8057320 <__afl_setup>

080572fe <__afl_store>:
 80572fe:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8057304:	31 cf                	xor    %ecx,%edi
 8057306:	d1 e9                	shr    %ecx
 8057308:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 805730e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8057312:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08057316 <__afl_return>:
 8057316:	04 7f                	add    $0x7f,%al
 8057318:	9e                   	sahf   
 8057319:	c3                   	ret    
 805731a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08057320 <__afl_setup>:
 8057320:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8057327:	75 ed                	jne    8057316 <__afl_return>
 8057329:	50                   	push   %eax
 805732a:	51                   	push   %ecx
 805732b:	68 28 74 05 08       	push   $0x8057428
 8057330:	e8 ab 1f ff ff       	call   80492e0 <getenv@plt>
 8057335:	83 c4 04             	add    $0x4,%esp
 8057338:	85 c0                	test   %eax,%eax
 805733a:	0f 84 db 00 00 00    	je     805741b <__afl_setup_abort>
 8057340:	50                   	push   %eax
 8057341:	e8 5a 21 ff ff       	call   80494a0 <atoi@plt>
 8057346:	83 c4 04             	add    $0x4,%esp
 8057349:	6a 00                	push   $0x0
 805734b:	6a 00                	push   $0x0
 805734d:	50                   	push   %eax
 805734e:	e8 cd 1e ff ff       	call   8049220 <shmat@plt>
 8057353:	83 c4 0c             	add    $0xc,%esp
 8057356:	83 f8 ff             	cmp    $0xffffffff,%eax
 8057359:	0f 84 bc 00 00 00    	je     805741b <__afl_setup_abort>
 805735f:	c6 00 01             	movb   $0x1,(%eax)
 8057362:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8057367:	89 c2                	mov    %eax,%edx
 8057369:	59                   	pop    %ecx
 805736a:	58                   	pop    %eax

0805736b <__afl_forkserver>:
 805736b:	50                   	push   %eax
 805736c:	51                   	push   %ecx
 805736d:	52                   	push   %edx
 805736e:	6a 04                	push   $0x4
 8057370:	68 e0 ad 43 08       	push   $0x843ade0
 8057375:	68 c7 00 00 00       	push   $0xc7
 805737a:	e8 51 20 ff ff       	call   80493d0 <write@plt>
 805737f:	83 c4 0c             	add    $0xc,%esp
 8057382:	83 f8 04             	cmp    $0x4,%eax
 8057385:	75 6e                	jne    80573f5 <__afl_fork_resume>

08057387 <__afl_fork_wait_loop>:
 8057387:	6a 04                	push   $0x4
 8057389:	68 e0 ad 43 08       	push   $0x843ade0
 805738e:	68 c6 00 00 00       	push   $0xc6
 8057393:	e8 c8 1d ff ff       	call   8049160 <read@plt>
 8057398:	83 c4 0c             	add    $0xc,%esp
 805739b:	83 f8 04             	cmp    $0x4,%eax
 805739e:	75 74                	jne    8057414 <__afl_die>
 80573a0:	e8 9b 20 ff ff       	call   8049440 <fork@plt>
 80573a5:	83 f8 00             	cmp    $0x0,%eax
 80573a8:	7c 6a                	jl     8057414 <__afl_die>
 80573aa:	74 49                	je     80573f5 <__afl_fork_resume>
 80573ac:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 80573b1:	6a 04                	push   $0x4
 80573b3:	68 40 ae 43 08       	push   $0x843ae40
 80573b8:	68 c7 00 00 00       	push   $0xc7
 80573bd:	e8 0e 20 ff ff       	call   80493d0 <write@plt>
 80573c2:	83 c4 0c             	add    $0xc,%esp
 80573c5:	6a 00                	push   $0x0
 80573c7:	68 e0 ad 43 08       	push   $0x843ade0
 80573cc:	ff 35 40 ae 43 08    	pushl  0x843ae40
 80573d2:	e8 99 1e ff ff       	call   8049270 <waitpid@plt>
 80573d7:	83 c4 0c             	add    $0xc,%esp
 80573da:	83 f8 00             	cmp    $0x0,%eax
 80573dd:	7e 35                	jle    8057414 <__afl_die>
 80573df:	6a 04                	push   $0x4
 80573e1:	68 e0 ad 43 08       	push   $0x843ade0
 80573e6:	68 c7 00 00 00       	push   $0xc7
 80573eb:	e8 e0 1f ff ff       	call   80493d0 <write@plt>
 80573f0:	83 c4 0c             	add    $0xc,%esp
 80573f3:	eb 92                	jmp    8057387 <__afl_fork_wait_loop>

080573f5 <__afl_fork_resume>:
 80573f5:	68 c6 00 00 00       	push   $0xc6
 80573fa:	e8 21 21 ff ff       	call   8049520 <close@plt>
 80573ff:	68 c7 00 00 00       	push   $0xc7
 8057404:	e8 17 21 ff ff       	call   8049520 <close@plt>
 8057409:	83 c4 08             	add    $0x8,%esp
 805740c:	5a                   	pop    %edx
 805740d:	59                   	pop    %ecx
 805740e:	58                   	pop    %eax
 805740f:	e9 ea fe ff ff       	jmp    80572fe <__afl_store>

08057414 <__afl_die>:
 8057414:	31 c0                	xor    %eax,%eax
 8057416:	e8 75 1d ff ff       	call   8049190 <_exit@plt>

0805741b <__afl_setup_abort>:
 805741b:	fe 05 60 ae 43 08    	incb   0x843ae60
 8057421:	59                   	pop    %ecx
 8057422:	58                   	pop    %eax
 8057423:	e9 ee fe ff ff       	jmp    8057316 <__afl_return>

08057428 <.AFL_SHM_ENV>:
 8057428:	5f                   	pop    %edi
 8057429:	5f                   	pop    %edi
 805742a:	41                   	inc    %ecx
 805742b:	46                   	inc    %esi
 805742c:	4c                   	dec    %esp
 805742d:	5f                   	pop    %edi
 805742e:	53                   	push   %ebx
 805742f:	48                   	dec    %eax
 8057430:	4d                   	dec    %ebp
 8057431:	5f                   	pop    %edi
 8057432:	49                   	dec    %ecx
 8057433:	44                   	inc    %esp
 8057434:	00 66 90             	add    %ah,-0x70(%esi)
 8057437:	66 90                	xchg   %ax,%ax
 8057439:	66 90                	xchg   %ax,%ax
 805743b:	66 90                	xchg   %ax,%ax
 805743d:	66 90                	xchg   %ax,%ax
 805743f:	90                   	nop

08057440 <memcasecmp>:
   Convert to upper case (not lower) before comparing so that
   join -i works with sort -f.  */

int
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
 8057440:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057444:	89 3c 24             	mov    %edi,(%esp)
 8057447:	89 54 24 04          	mov    %edx,0x4(%esp)
 805744b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805744f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057453:	b9 5f 82 00 00       	mov    $0x825f,%ecx
 8057458:	e8 f3 08 00 00       	call   8057d50 <__afl_maybe_log>
 805745d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057461:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057465:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057469:	8b 3c 24             	mov    (%esp),%edi
 805746c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057470:	55                   	push   %ebp
 8057471:	57                   	push   %edi
 8057472:	56                   	push   %esi
 8057473:	53                   	push   %ebx
 8057474:	83 ec 0c             	sub    $0xc,%esp
 8057477:	8b 7c 24 28          	mov    0x28(%esp),%edi
 805747b:	8b 5c 24 20          	mov    0x20(%esp),%ebx
 805747f:	8b 74 24 24          	mov    0x24(%esp),%esi
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 8057483:	85 ff                	test   %edi,%edi
 8057485:	0f 84 55 08 00 00    	je     8057ce0 <memcasecmp+0x8a0>
 805748b:	90                   	nop
 805748c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057490:	89 3c 24             	mov    %edi,(%esp)
 8057493:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057497:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805749b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805749f:	b9 b2 a4 00 00       	mov    $0xa4b2,%ecx
 80574a4:	e8 a7 08 00 00       	call   8057d50 <__afl_maybe_log>
 80574a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80574ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80574b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80574b5:	8b 3c 24             	mov    (%esp),%edi
 80574b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80574bc:	e8 4f 1c ff ff       	call   8049110 <__ctype_toupper_loc@plt>
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
      int U2 = toupper (u2);
 80574c1:	0f b6 0e             	movzbl (%esi),%ecx
 80574c4:	8b 10                	mov    (%eax),%edx
 80574c6:	8d 6f ff             	lea    -0x1(%edi),%ebp
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 80574c9:	0f b6 03             	movzbl (%ebx),%eax
 80574cc:	83 e5 07             	and    $0x7,%ebp
      int U2 = toupper (u2);
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 80574cf:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 80574d2:	2b 04 8a             	sub    (%edx,%ecx,4),%eax
 80574d5:	0f 85 37 08 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 80574db:	90                   	nop
 80574dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80574e0:	89 3c 24             	mov    %edi,(%esp)
 80574e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80574e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80574eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80574ef:	b9 f0 36 00 00       	mov    $0x36f0,%ecx
 80574f4:	e8 57 08 00 00       	call   8057d50 <__afl_maybe_log>
 80574f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80574fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057501:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057505:	8b 3c 24             	mov    (%esp),%edi
 8057508:	8d 64 24 10          	lea    0x10(%esp),%esp
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 805750c:	b9 01 00 00 00       	mov    $0x1,%ecx
 8057511:	39 f9                	cmp    %edi,%ecx
 8057513:	0f 84 c7 07 00 00    	je     8057ce0 <memcasecmp+0x8a0>
 8057519:	8d 76 00             	lea    0x0(%esi),%esi
 805751c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057520:	89 3c 24             	mov    %edi,(%esp)
 8057523:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057527:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805752b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805752f:	b9 f9 75 00 00       	mov    $0x75f9,%ecx
 8057534:	e8 17 08 00 00       	call   8057d50 <__afl_maybe_log>
 8057539:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805753d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057541:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057545:	8b 3c 24             	mov    (%esp),%edi
 8057548:	8d 64 24 10          	lea    0x10(%esp),%esp
 805754c:	85 ed                	test   %ebp,%ebp
 805754e:	0f 84 e4 04 00 00    	je     8057a38 <memcasecmp+0x5f8>
 8057554:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057558:	89 3c 24             	mov    %edi,(%esp)
 805755b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805755f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057563:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057567:	b9 69 5c 00 00       	mov    $0x5c69,%ecx
 805756c:	e8 df 07 00 00       	call   8057d50 <__afl_maybe_log>
 8057571:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057575:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057579:	8b 54 24 04          	mov    0x4(%esp),%edx
 805757d:	8b 3c 24             	mov    (%esp),%edi
 8057580:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057584:	83 fd 01             	cmp    $0x1,%ebp
 8057587:	0f 84 fa 03 00 00    	je     8057987 <memcasecmp+0x547>
 805758d:	8d 76 00             	lea    0x0(%esi),%esi
 8057590:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057594:	89 3c 24             	mov    %edi,(%esp)
 8057597:	89 54 24 04          	mov    %edx,0x4(%esp)
 805759b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805759f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80575a3:	b9 0b 14 00 00       	mov    $0x140b,%ecx
 80575a8:	e8 a3 07 00 00       	call   8057d50 <__afl_maybe_log>
 80575ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80575b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80575b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80575b9:	8b 3c 24             	mov    (%esp),%edi
 80575bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80575c0:	83 fd 02             	cmp    $0x2,%ebp
 80575c3:	0f 84 46 03 00 00    	je     805790f <memcasecmp+0x4cf>
 80575c9:	8d 76 00             	lea    0x0(%esi),%esi
 80575cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80575d0:	89 3c 24             	mov    %edi,(%esp)
 80575d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80575d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80575db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80575df:	b9 c4 e5 00 00       	mov    $0xe5c4,%ecx
 80575e4:	e8 67 07 00 00       	call   8057d50 <__afl_maybe_log>
 80575e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80575ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80575f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80575f5:	8b 3c 24             	mov    (%esp),%edi
 80575f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80575fc:	83 fd 03             	cmp    $0x3,%ebp
 80575ff:	0f 84 92 02 00 00    	je     8057897 <memcasecmp+0x457>
 8057605:	8d 76 00             	lea    0x0(%esi),%esi
 8057608:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805760c:	89 3c 24             	mov    %edi,(%esp)
 805760f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057613:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057617:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805761b:	b9 f9 da 00 00       	mov    $0xdaf9,%ecx
 8057620:	e8 2b 07 00 00       	call   8057d50 <__afl_maybe_log>
 8057625:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057629:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805762d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057631:	8b 3c 24             	mov    (%esp),%edi
 8057634:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057638:	83 fd 04             	cmp    $0x4,%ebp
 805763b:	0f 84 de 01 00 00    	je     805781f <memcasecmp+0x3df>
 8057641:	8d 76 00             	lea    0x0(%esi),%esi
 8057644:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057648:	89 3c 24             	mov    %edi,(%esp)
 805764b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805764f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057653:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057657:	b9 b9 56 00 00       	mov    $0x56b9,%ecx
 805765c:	e8 ef 06 00 00       	call   8057d50 <__afl_maybe_log>
 8057661:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057665:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057669:	8b 54 24 04          	mov    0x4(%esp),%edx
 805766d:	8b 3c 24             	mov    (%esp),%edi
 8057670:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057674:	83 fd 05             	cmp    $0x5,%ebp
 8057677:	0f 84 2a 01 00 00    	je     80577a7 <memcasecmp+0x367>
 805767d:	8d 76 00             	lea    0x0(%esi),%esi
 8057680:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057684:	89 3c 24             	mov    %edi,(%esp)
 8057687:	89 54 24 04          	mov    %edx,0x4(%esp)
 805768b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805768f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057693:	b9 0b 23 00 00       	mov    $0x230b,%ecx
 8057698:	e8 b3 06 00 00       	call   8057d50 <__afl_maybe_log>
 805769d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80576a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80576a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80576a9:	8b 3c 24             	mov    (%esp),%edi
 80576ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80576b0:	83 fd 06             	cmp    $0x6,%ebp
 80576b3:	74 7a                	je     805772f <memcasecmp+0x2ef>
 80576b5:	8d 76 00             	lea    0x0(%esi),%esi
 80576b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80576bc:	89 3c 24             	mov    %edi,(%esp)
 80576bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80576c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80576c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80576cb:	b9 8d 83 00 00       	mov    $0x838d,%ecx
 80576d0:	e8 7b 06 00 00       	call   8057d50 <__afl_maybe_log>
 80576d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80576d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80576dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80576e1:	8b 3c 24             	mov    (%esp),%edi
 80576e4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 80576e8:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 80576ec:	0f b6 2c 0e          	movzbl (%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 80576f0:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 80576f3:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 80576f6:	0f 85 16 06 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 80576fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057700:	89 3c 24             	mov    %edi,(%esp)
 8057703:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057707:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805770b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805770f:	b9 fb 3b 00 00       	mov    $0x3bfb,%ecx
 8057714:	e8 37 06 00 00       	call   8057d50 <__afl_maybe_log>
 8057719:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805771d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057721:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057725:	8b 3c 24             	mov    (%esp),%edi
 8057728:	8d 64 24 10          	lea    0x10(%esp),%esp
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 805772c:	83 c1 01             	add    $0x1,%ecx
 805772f:	90                   	nop
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057730:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057734:	89 3c 24             	mov    %edi,(%esp)
 8057737:	89 54 24 04          	mov    %edx,0x4(%esp)
 805773b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805773f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057743:	b9 4e b1 00 00       	mov    $0xb14e,%ecx
 8057748:	e8 03 06 00 00       	call   8057d50 <__afl_maybe_log>
 805774d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057751:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057755:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057759:	8b 3c 24             	mov    (%esp),%edi
 805775c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057760:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057764:	0f b6 2c 0e          	movzbl (%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057768:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 805776b:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 805776e:	0f 85 9e 05 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057774:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057778:	89 3c 24             	mov    %edi,(%esp)
 805777b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805777f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057783:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057787:	b9 76 83 00 00       	mov    $0x8376,%ecx
 805778c:	e8 bf 05 00 00       	call   8057d50 <__afl_maybe_log>
 8057791:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057795:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057799:	8b 54 24 04          	mov    0x4(%esp),%edx
 805779d:	8b 3c 24             	mov    (%esp),%edi
 80577a0:	8d 64 24 10          	lea    0x10(%esp),%esp
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 80577a4:	83 c1 01             	add    $0x1,%ecx
 80577a7:	90                   	nop
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 80577a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80577ac:	89 3c 24             	mov    %edi,(%esp)
 80577af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80577b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80577b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80577bb:	b9 5e 4c 00 00       	mov    $0x4c5e,%ecx
 80577c0:	e8 8b 05 00 00       	call   8057d50 <__afl_maybe_log>
 80577c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80577c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80577cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80577d1:	8b 3c 24             	mov    (%esp),%edi
 80577d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80577d8:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 80577dc:	0f b6 2c 0e          	movzbl (%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 80577e0:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 80577e3:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 80577e6:	0f 85 26 05 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 80577ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80577f0:	89 3c 24             	mov    %edi,(%esp)
 80577f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80577f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80577fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80577ff:	b9 35 74 00 00       	mov    $0x7435,%ecx
 8057804:	e8 47 05 00 00       	call   8057d50 <__afl_maybe_log>
 8057809:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805780d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057811:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057815:	8b 3c 24             	mov    (%esp),%edi
 8057818:	8d 64 24 10          	lea    0x10(%esp),%esp
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 805781c:	83 c1 01             	add    $0x1,%ecx
 805781f:	90                   	nop
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057820:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057824:	89 3c 24             	mov    %edi,(%esp)
 8057827:	89 54 24 04          	mov    %edx,0x4(%esp)
 805782b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805782f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057833:	b9 a7 68 00 00       	mov    $0x68a7,%ecx
 8057838:	e8 13 05 00 00       	call   8057d50 <__afl_maybe_log>
 805783d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057841:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057845:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057849:	8b 3c 24             	mov    (%esp),%edi
 805784c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057850:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057854:	0f b6 2c 0e          	movzbl (%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057858:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 805785b:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 805785e:	0f 85 ae 04 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057864:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057868:	89 3c 24             	mov    %edi,(%esp)
 805786b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805786f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057873:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057877:	b9 4f 24 00 00       	mov    $0x244f,%ecx
 805787c:	e8 cf 04 00 00       	call   8057d50 <__afl_maybe_log>
 8057881:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057885:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057889:	8b 54 24 04          	mov    0x4(%esp),%edx
 805788d:	8b 3c 24             	mov    (%esp),%edi
 8057890:	8d 64 24 10          	lea    0x10(%esp),%esp
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 8057894:	83 c1 01             	add    $0x1,%ecx
 8057897:	90                   	nop
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057898:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805789c:	89 3c 24             	mov    %edi,(%esp)
 805789f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80578a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80578a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80578ab:	b9 36 0b 00 00       	mov    $0xb36,%ecx
 80578b0:	e8 9b 04 00 00       	call   8057d50 <__afl_maybe_log>
 80578b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80578b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80578bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80578c1:	8b 3c 24             	mov    (%esp),%edi
 80578c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80578c8:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 80578cc:	0f b6 2c 0e          	movzbl (%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 80578d0:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 80578d3:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 80578d6:	0f 85 36 04 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 80578dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80578e0:	89 3c 24             	mov    %edi,(%esp)
 80578e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80578e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80578eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80578ef:	b9 01 db 00 00       	mov    $0xdb01,%ecx
 80578f4:	e8 57 04 00 00       	call   8057d50 <__afl_maybe_log>
 80578f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80578fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057901:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057905:	8b 3c 24             	mov    (%esp),%edi
 8057908:	8d 64 24 10          	lea    0x10(%esp),%esp
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 805790c:	83 c1 01             	add    $0x1,%ecx
 805790f:	90                   	nop
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057910:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057914:	89 3c 24             	mov    %edi,(%esp)
 8057917:	89 54 24 04          	mov    %edx,0x4(%esp)
 805791b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805791f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057923:	b9 47 08 00 00       	mov    $0x847,%ecx
 8057928:	e8 23 04 00 00       	call   8057d50 <__afl_maybe_log>
 805792d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057931:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057935:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057939:	8b 3c 24             	mov    (%esp),%edi
 805793c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057940:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057944:	0f b6 2c 0e          	movzbl (%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057948:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 805794b:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 805794e:	0f 85 be 03 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057954:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057958:	89 3c 24             	mov    %edi,(%esp)
 805795b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805795f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057963:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057967:	b9 1d bc 00 00       	mov    $0xbc1d,%ecx
 805796c:	e8 df 03 00 00       	call   8057d50 <__afl_maybe_log>
 8057971:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057975:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057979:	8b 54 24 04          	mov    0x4(%esp),%edx
 805797d:	8b 3c 24             	mov    (%esp),%edi
 8057980:	8d 64 24 10          	lea    0x10(%esp),%esp
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 8057984:	83 c1 01             	add    $0x1,%ecx
 8057987:	90                   	nop
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057988:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805798c:	89 3c 24             	mov    %edi,(%esp)
 805798f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057993:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057997:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805799b:	b9 55 ab 00 00       	mov    $0xab55,%ecx
 80579a0:	e8 ab 03 00 00       	call   8057d50 <__afl_maybe_log>
 80579a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80579a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80579ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80579b1:	8b 3c 24             	mov    (%esp),%edi
 80579b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80579b8:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 80579bc:	0f b6 2c 0e          	movzbl (%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 80579c0:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 80579c3:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 80579c6:	0f 85 46 03 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 80579cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80579d0:	89 3c 24             	mov    %edi,(%esp)
 80579d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80579d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80579db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80579df:	b9 d0 78 00 00       	mov    $0x78d0,%ecx
 80579e4:	e8 67 03 00 00       	call   8057d50 <__afl_maybe_log>
 80579e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80579ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80579f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80579f5:	8b 3c 24             	mov    (%esp),%edi
 80579f8:	8d 64 24 10          	lea    0x10(%esp),%esp
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 80579fc:	83 c1 01             	add    $0x1,%ecx
 80579ff:	39 f9                	cmp    %edi,%ecx
 8057a01:	0f 84 d9 02 00 00    	je     8057ce0 <memcasecmp+0x8a0>
 8057a07:	90                   	nop
 8057a08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057a0c:	89 3c 24             	mov    %edi,(%esp)
 8057a0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057a13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057a17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057a1b:	b9 46 d7 00 00       	mov    $0xd746,%ecx
 8057a20:	e8 2b 03 00 00       	call   8057d50 <__afl_maybe_log>
 8057a25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057a29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057a2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057a31:	8b 3c 24             	mov    (%esp),%edi
 8057a34:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057a38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057a3c:	89 3c 24             	mov    %edi,(%esp)
 8057a3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057a43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057a47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057a4b:	b9 54 1a 00 00       	mov    $0x1a54,%ecx
 8057a50:	e8 fb 02 00 00       	call   8057d50 <__afl_maybe_log>
 8057a55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057a59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057a5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057a61:	8b 3c 24             	mov    (%esp),%edi
 8057a64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057a68:	0f b6 04 0b          	movzbl (%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057a6c:	0f b6 2c 0e          	movzbl (%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057a70:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 8057a73:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 8057a76:	0f 85 96 02 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057a7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057a80:	89 3c 24             	mov    %edi,(%esp)
 8057a83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057a87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057a8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057a8f:	b9 bf 9c 00 00       	mov    $0x9cbf,%ecx
 8057a94:	e8 b7 02 00 00       	call   8057d50 <__afl_maybe_log>
 8057a99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057a9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057aa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057aa5:	8b 3c 24             	mov    (%esp),%edi
 8057aa8:	8d 64 24 10          	lea    0x10(%esp),%esp
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057aac:	0f b6 44 0b 01       	movzbl 0x1(%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057ab1:	0f b6 6c 0e 01       	movzbl 0x1(%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057ab6:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 8057ab9:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 8057abc:	0f 85 50 02 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057ac2:	66 90                	xchg   %ax,%ax
 8057ac4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ac8:	89 3c 24             	mov    %edi,(%esp)
 8057acb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057acf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057ad3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057ad7:	b9 ed 60 00 00       	mov    $0x60ed,%ecx
 8057adc:	e8 6f 02 00 00       	call   8057d50 <__afl_maybe_log>
 8057ae1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ae5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057ae9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057aed:	8b 3c 24             	mov    (%esp),%edi
 8057af0:	8d 64 24 10          	lea    0x10(%esp),%esp
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057af4:	0f b6 44 0b 02       	movzbl 0x2(%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057af9:	0f b6 6c 0e 02       	movzbl 0x2(%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057afe:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 8057b01:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 8057b04:	0f 85 08 02 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057b0a:	66 90                	xchg   %ax,%ax
 8057b0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057b10:	89 3c 24             	mov    %edi,(%esp)
 8057b13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057b17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057b1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057b1f:	b9 bb c3 00 00       	mov    $0xc3bb,%ecx
 8057b24:	e8 27 02 00 00       	call   8057d50 <__afl_maybe_log>
 8057b29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057b2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057b31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057b35:	8b 3c 24             	mov    (%esp),%edi
 8057b38:	8d 64 24 10          	lea    0x10(%esp),%esp
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057b3c:	0f b6 44 0b 03       	movzbl 0x3(%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057b41:	0f b6 6c 0e 03       	movzbl 0x3(%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057b46:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 8057b49:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 8057b4c:	0f 85 c0 01 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057b52:	66 90                	xchg   %ax,%ax
 8057b54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057b58:	89 3c 24             	mov    %edi,(%esp)
 8057b5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057b5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057b63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057b67:	b9 de 96 00 00       	mov    $0x96de,%ecx
 8057b6c:	e8 df 01 00 00       	call   8057d50 <__afl_maybe_log>
 8057b71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057b75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057b79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057b7d:	8b 3c 24             	mov    (%esp),%edi
 8057b80:	8d 64 24 10          	lea    0x10(%esp),%esp
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057b84:	0f b6 44 0b 04       	movzbl 0x4(%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057b89:	0f b6 6c 0e 04       	movzbl 0x4(%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057b8e:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 8057b91:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 8057b94:	0f 85 78 01 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057b9a:	66 90                	xchg   %ax,%ax
 8057b9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ba0:	89 3c 24             	mov    %edi,(%esp)
 8057ba3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057ba7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057bab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057baf:	b9 ed c9 00 00       	mov    $0xc9ed,%ecx
 8057bb4:	e8 97 01 00 00       	call   8057d50 <__afl_maybe_log>
 8057bb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057bbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057bc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057bc5:	8b 3c 24             	mov    (%esp),%edi
 8057bc8:	8d 64 24 10          	lea    0x10(%esp),%esp
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057bcc:	0f b6 44 0b 05       	movzbl 0x5(%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057bd1:	0f b6 6c 0e 05       	movzbl 0x5(%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057bd6:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 8057bd9:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 8057bdc:	0f 85 30 01 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057be2:	66 90                	xchg   %ax,%ax
 8057be4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057be8:	89 3c 24             	mov    %edi,(%esp)
 8057beb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057bef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057bf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057bf7:	b9 d6 de 00 00       	mov    $0xded6,%ecx
 8057bfc:	e8 4f 01 00 00       	call   8057d50 <__afl_maybe_log>
 8057c01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057c05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057c09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057c0d:	8b 3c 24             	mov    (%esp),%edi
 8057c10:	8d 64 24 10          	lea    0x10(%esp),%esp
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057c14:	0f b6 44 0b 06       	movzbl 0x6(%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057c19:	0f b6 6c 0e 06       	movzbl 0x6(%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057c1e:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 8057c21:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 8057c24:	0f 85 e8 00 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057c2a:	66 90                	xchg   %ax,%ax
 8057c2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057c30:	89 3c 24             	mov    %edi,(%esp)
 8057c33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057c37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057c3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057c3f:	b9 fb 23 00 00       	mov    $0x23fb,%ecx
 8057c44:	e8 07 01 00 00       	call   8057d50 <__afl_maybe_log>
 8057c49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057c4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057c51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057c55:	8b 3c 24             	mov    (%esp),%edi
 8057c58:	8d 64 24 10          	lea    0x10(%esp),%esp
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
    {
      unsigned char u1 = s1[i];
      unsigned char u2 = s2[i];
      int U1 = toupper (u1);
 8057c5c:	0f b6 44 0b 07       	movzbl 0x7(%ebx,%ecx,1),%eax
      int U2 = toupper (u2);
 8057c61:	0f b6 6c 0e 07       	movzbl 0x7(%esi,%ecx,1),%ebp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
 8057c66:	8b 04 82             	mov    (%edx,%eax,4),%eax
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
 8057c69:	2b 04 aa             	sub    (%edx,%ebp,4),%eax
 8057c6c:	0f 85 a0 00 00 00    	jne    8057d12 <memcasecmp+0x8d2>
 8057c72:	66 90                	xchg   %ax,%ax
 8057c74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057c78:	89 3c 24             	mov    %edi,(%esp)
 8057c7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057c7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057c83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057c87:	b9 2b d2 00 00       	mov    $0xd22b,%ecx
 8057c8c:	e8 bf 00 00 00       	call   8057d50 <__afl_maybe_log>
 8057c91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057c95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057c99:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057c9d:	8b 3c 24             	mov    (%esp),%edi
 8057ca0:	8d 64 24 10          	lea    0x10(%esp),%esp
memcasecmp (const void *vs1, const void *vs2, size_t n)
{
  size_t i;
  char const *s1 = vs1;
  char const *s2 = vs2;
  for (i = 0; i < n; i++)
 8057ca4:	83 c1 08             	add    $0x8,%ecx
 8057ca7:	39 f9                	cmp    %edi,%ecx
 8057ca9:	0f 85 89 fd ff ff    	jne    8057a38 <memcasecmp+0x5f8>
 8057caf:	90                   	nop
 8057cb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057cb4:	89 3c 24             	mov    %edi,(%esp)
 8057cb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057cbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057cbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057cc3:	b9 6f 9d 00 00       	mov    $0x9d6f,%ecx
 8057cc8:	e8 83 00 00 00       	call   8057d50 <__afl_maybe_log>
 8057ccd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057cd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057cd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057cd9:	8b 3c 24             	mov    (%esp),%edi
 8057cdc:	8d 64 24 10          	lea    0x10(%esp),%esp
      int diff = (UCHAR_MAX <= INT_MAX ? U1 - U2
                  : U1 < U2 ? -1 : U2 < U1);
      if (diff)
        return diff;
    }
  return 0;
 8057ce0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ce4:	89 3c 24             	mov    %edi,(%esp)
 8057ce7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057ceb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057cef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057cf3:	b9 d0 96 00 00       	mov    $0x96d0,%ecx
 8057cf8:	e8 53 00 00 00       	call   8057d50 <__afl_maybe_log>
 8057cfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057d01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057d05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057d09:	8b 3c 24             	mov    (%esp),%edi
 8057d0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057d10:	31 c0                	xor    %eax,%eax
 8057d12:	66 90                	xchg   %ax,%ax
}
 8057d14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057d18:	89 3c 24             	mov    %edi,(%esp)
 8057d1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057d1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057d23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057d27:	b9 39 9c 00 00       	mov    $0x9c39,%ecx
 8057d2c:	e8 1f 00 00 00       	call   8057d50 <__afl_maybe_log>
 8057d31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057d35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057d39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057d3d:	8b 3c 24             	mov    (%esp),%edi
 8057d40:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057d44:	83 c4 0c             	add    $0xc,%esp
 8057d47:	5b                   	pop    %ebx
 8057d48:	5e                   	pop    %esi
 8057d49:	5f                   	pop    %edi
 8057d4a:	5d                   	pop    %ebp
 8057d4b:	c3                   	ret    
 8057d4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08057d50 <__afl_maybe_log>:
 8057d50:	9f                   	lahf   
 8057d51:	0f 90 c0             	seto   %al
 8057d54:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8057d5a:	85 d2                	test   %edx,%edx
 8057d5c:	74 22                	je     8057d80 <__afl_setup>

08057d5e <__afl_store>:
 8057d5e:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8057d64:	31 cf                	xor    %ecx,%edi
 8057d66:	d1 e9                	shr    %ecx
 8057d68:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8057d6e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8057d72:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08057d76 <__afl_return>:
 8057d76:	04 7f                	add    $0x7f,%al
 8057d78:	9e                   	sahf   
 8057d79:	c3                   	ret    
 8057d7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08057d80 <__afl_setup>:
 8057d80:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8057d87:	75 ed                	jne    8057d76 <__afl_return>
 8057d89:	50                   	push   %eax
 8057d8a:	51                   	push   %ecx
 8057d8b:	68 88 7e 05 08       	push   $0x8057e88
 8057d90:	e8 4b 15 ff ff       	call   80492e0 <getenv@plt>
 8057d95:	83 c4 04             	add    $0x4,%esp
 8057d98:	85 c0                	test   %eax,%eax
 8057d9a:	0f 84 db 00 00 00    	je     8057e7b <__afl_setup_abort>
 8057da0:	50                   	push   %eax
 8057da1:	e8 fa 16 ff ff       	call   80494a0 <atoi@plt>
 8057da6:	83 c4 04             	add    $0x4,%esp
 8057da9:	6a 00                	push   $0x0
 8057dab:	6a 00                	push   $0x0
 8057dad:	50                   	push   %eax
 8057dae:	e8 6d 14 ff ff       	call   8049220 <shmat@plt>
 8057db3:	83 c4 0c             	add    $0xc,%esp
 8057db6:	83 f8 ff             	cmp    $0xffffffff,%eax
 8057db9:	0f 84 bc 00 00 00    	je     8057e7b <__afl_setup_abort>
 8057dbf:	c6 00 01             	movb   $0x1,(%eax)
 8057dc2:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8057dc7:	89 c2                	mov    %eax,%edx
 8057dc9:	59                   	pop    %ecx
 8057dca:	58                   	pop    %eax

08057dcb <__afl_forkserver>:
 8057dcb:	50                   	push   %eax
 8057dcc:	51                   	push   %ecx
 8057dcd:	52                   	push   %edx
 8057dce:	6a 04                	push   $0x4
 8057dd0:	68 e0 ad 43 08       	push   $0x843ade0
 8057dd5:	68 c7 00 00 00       	push   $0xc7
 8057dda:	e8 f1 15 ff ff       	call   80493d0 <write@plt>
 8057ddf:	83 c4 0c             	add    $0xc,%esp
 8057de2:	83 f8 04             	cmp    $0x4,%eax
 8057de5:	75 6e                	jne    8057e55 <__afl_fork_resume>

08057de7 <__afl_fork_wait_loop>:
 8057de7:	6a 04                	push   $0x4
 8057de9:	68 e0 ad 43 08       	push   $0x843ade0
 8057dee:	68 c6 00 00 00       	push   $0xc6
 8057df3:	e8 68 13 ff ff       	call   8049160 <read@plt>
 8057df8:	83 c4 0c             	add    $0xc,%esp
 8057dfb:	83 f8 04             	cmp    $0x4,%eax
 8057dfe:	75 74                	jne    8057e74 <__afl_die>
 8057e00:	e8 3b 16 ff ff       	call   8049440 <fork@plt>
 8057e05:	83 f8 00             	cmp    $0x0,%eax
 8057e08:	7c 6a                	jl     8057e74 <__afl_die>
 8057e0a:	74 49                	je     8057e55 <__afl_fork_resume>
 8057e0c:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8057e11:	6a 04                	push   $0x4
 8057e13:	68 40 ae 43 08       	push   $0x843ae40
 8057e18:	68 c7 00 00 00       	push   $0xc7
 8057e1d:	e8 ae 15 ff ff       	call   80493d0 <write@plt>
 8057e22:	83 c4 0c             	add    $0xc,%esp
 8057e25:	6a 00                	push   $0x0
 8057e27:	68 e0 ad 43 08       	push   $0x843ade0
 8057e2c:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8057e32:	e8 39 14 ff ff       	call   8049270 <waitpid@plt>
 8057e37:	83 c4 0c             	add    $0xc,%esp
 8057e3a:	83 f8 00             	cmp    $0x0,%eax
 8057e3d:	7e 35                	jle    8057e74 <__afl_die>
 8057e3f:	6a 04                	push   $0x4
 8057e41:	68 e0 ad 43 08       	push   $0x843ade0
 8057e46:	68 c7 00 00 00       	push   $0xc7
 8057e4b:	e8 80 15 ff ff       	call   80493d0 <write@plt>
 8057e50:	83 c4 0c             	add    $0xc,%esp
 8057e53:	eb 92                	jmp    8057de7 <__afl_fork_wait_loop>

08057e55 <__afl_fork_resume>:
 8057e55:	68 c6 00 00 00       	push   $0xc6
 8057e5a:	e8 c1 16 ff ff       	call   8049520 <close@plt>
 8057e5f:	68 c7 00 00 00       	push   $0xc7
 8057e64:	e8 b7 16 ff ff       	call   8049520 <close@plt>
 8057e69:	83 c4 08             	add    $0x8,%esp
 8057e6c:	5a                   	pop    %edx
 8057e6d:	59                   	pop    %ecx
 8057e6e:	58                   	pop    %eax
 8057e6f:	e9 ea fe ff ff       	jmp    8057d5e <__afl_store>

08057e74 <__afl_die>:
 8057e74:	31 c0                	xor    %eax,%eax
 8057e76:	e8 15 13 ff ff       	call   8049190 <_exit@plt>

08057e7b <__afl_setup_abort>:
 8057e7b:	fe 05 60 ae 43 08    	incb   0x843ae60
 8057e81:	59                   	pop    %ecx
 8057e82:	58                   	pop    %eax
 8057e83:	e9 ee fe ff ff       	jmp    8057d76 <__afl_return>

08057e88 <.AFL_SHM_ENV>:
 8057e88:	5f                   	pop    %edi
 8057e89:	5f                   	pop    %edi
 8057e8a:	41                   	inc    %ecx
 8057e8b:	46                   	inc    %esi
 8057e8c:	4c                   	dec    %esp
 8057e8d:	5f                   	pop    %edi
 8057e8e:	53                   	push   %ebx
 8057e8f:	48                   	dec    %eax
 8057e90:	4d                   	dec    %ebp
 8057e91:	5f                   	pop    %edi
 8057e92:	49                   	dec    %ecx
 8057e93:	44                   	inc    %esp
 8057e94:	00 66 90             	add    %ah,-0x70(%esi)
 8057e97:	66 90                	xchg   %ax,%ax
 8057e99:	66 90                	xchg   %ax,%ax
 8057e9b:	66 90                	xchg   %ax,%ax
 8057e9d:	66 90                	xchg   %ax,%ax
 8057e9f:	90                   	nop

08057ea0 <posix2_version>:
/* The POSIX version that utilities should conform to.  The default is
   specified by the system.  */

int
posix2_version (void)
{
 8057ea0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ea4:	89 3c 24             	mov    %edi,(%esp)
 8057ea7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057eab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057eaf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057eb3:	b9 76 1d 00 00       	mov    $0x1d76,%ecx
 8057eb8:	e8 fb 00 00 00       	call   8057fb8 <__afl_maybe_log>
 8057ebd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ec1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057ec5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057ec9:	8b 3c 24             	mov    (%esp),%edi
 8057ecc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057ed0:	53                   	push   %ebx
  long int v = DEFAULT_POSIX2_VERSION;
 8057ed1:	bb 69 10 03 00       	mov    $0x31069,%ebx
/* The POSIX version that utilities should conform to.  The default is
   specified by the system.  */

int
posix2_version (void)
{
 8057ed6:	83 ec 24             	sub    $0x24,%esp
  long int v = DEFAULT_POSIX2_VERSION;
  char const *s = getenv ("_POSIX2_VERSION");
 8057ed9:	68 cb 66 06 08       	push   $0x80666cb
 8057ede:	e8 fd 13 ff ff       	call   80492e0 <getenv@plt>

  if (s && *s)
 8057ee3:	83 c4 10             	add    $0x10,%esp
 8057ee6:	85 c0                	test   %eax,%eax
 8057ee8:	74 6a                	je     8057f54 <posix2_version+0xb4>
 8057eea:	66 90                	xchg   %ax,%ax
 8057eec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ef0:	89 3c 24             	mov    %edi,(%esp)
 8057ef3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057ef7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057efb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057eff:	b9 68 a5 00 00       	mov    $0xa568,%ecx
 8057f04:	e8 af 00 00 00       	call   8057fb8 <__afl_maybe_log>
 8057f09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057f0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057f11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057f15:	8b 3c 24             	mov    (%esp),%edi
 8057f18:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057f1c:	80 38 00             	cmpb   $0x0,(%eax)
 8057f1f:	75 6f                	jne    8057f90 <posix2_version+0xf0>
 8057f21:	8d 76 00             	lea    0x0(%esi),%esi
 8057f24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057f28:	89 3c 24             	mov    %edi,(%esp)
 8057f2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057f2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057f33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057f37:	b9 56 ec 00 00       	mov    $0xec56,%ecx
 8057f3c:	e8 77 00 00 00       	call   8057fb8 <__afl_maybe_log>
 8057f41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057f45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057f49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057f4d:	8b 3c 24             	mov    (%esp),%edi
 8057f50:	8d 64 24 10          	lea    0x10(%esp),%esp
      if (! *e)
        v = i;
    }

  return v < INT_MIN ? INT_MIN : v < INT_MAX ? v : INT_MAX;
}
 8057f54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057f58:	89 3c 24             	mov    %edi,(%esp)
 8057f5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057f5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057f63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057f67:	b9 3d 8f 00 00       	mov    $0x8f3d,%ecx
 8057f6c:	e8 47 00 00 00       	call   8057fb8 <__afl_maybe_log>
 8057f71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057f75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057f79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057f7d:	8b 3c 24             	mov    (%esp),%edi
 8057f80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057f84:	83 c4 18             	add    $0x18,%esp
 8057f87:	89 d8                	mov    %ebx,%eax
 8057f89:	5b                   	pop    %ebx
 8057f8a:	c3                   	ret    
 8057f8b:	90                   	nop
 8057f8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  char const *s = getenv ("_POSIX2_VERSION");

  if (s && *s)
    {
      char *e;
      long int i = strtol (s, &e, 10);
 8057f90:	83 ec 04             	sub    $0x4,%esp
 8057f93:	6a 0a                	push   $0xa
 8057f95:	8d 54 24 14          	lea    0x14(%esp),%edx
 8057f99:	52                   	push   %edx
 8057f9a:	50                   	push   %eax
 8057f9b:	e8 70 15 ff ff       	call   8049510 <strtol@plt>
      if (! *e)
 8057fa0:	83 c4 10             	add    $0x10,%esp
   specified by the system.  */

int
posix2_version (void)
{
  long int v = DEFAULT_POSIX2_VERSION;
 8057fa3:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8057fa7:	80 39 00             	cmpb   $0x0,(%ecx)
 8057faa:	0f 44 d8             	cmove  %eax,%ebx
      if (! *e)
        v = i;
    }

  return v < INT_MIN ? INT_MIN : v < INT_MAX ? v : INT_MAX;
}
 8057fad:	83 c4 18             	add    $0x18,%esp
 8057fb0:	89 d8                	mov    %ebx,%eax
 8057fb2:	5b                   	pop    %ebx
 8057fb3:	c3                   	ret    
 8057fb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08057fb8 <__afl_maybe_log>:
 8057fb8:	9f                   	lahf   
 8057fb9:	0f 90 c0             	seto   %al
 8057fbc:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8057fc2:	85 d2                	test   %edx,%edx
 8057fc4:	74 22                	je     8057fe8 <__afl_setup>

08057fc6 <__afl_store>:
 8057fc6:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8057fcc:	31 cf                	xor    %ecx,%edi
 8057fce:	d1 e9                	shr    %ecx
 8057fd0:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8057fd6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8057fda:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08057fde <__afl_return>:
 8057fde:	04 7f                	add    $0x7f,%al
 8057fe0:	9e                   	sahf   
 8057fe1:	c3                   	ret    
 8057fe2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08057fe8 <__afl_setup>:
 8057fe8:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8057fef:	75 ed                	jne    8057fde <__afl_return>
 8057ff1:	50                   	push   %eax
 8057ff2:	51                   	push   %ecx
 8057ff3:	68 f0 80 05 08       	push   $0x80580f0
 8057ff8:	e8 e3 12 ff ff       	call   80492e0 <getenv@plt>
 8057ffd:	83 c4 04             	add    $0x4,%esp
 8058000:	85 c0                	test   %eax,%eax
 8058002:	0f 84 db 00 00 00    	je     80580e3 <__afl_setup_abort>
 8058008:	50                   	push   %eax
 8058009:	e8 92 14 ff ff       	call   80494a0 <atoi@plt>
 805800e:	83 c4 04             	add    $0x4,%esp
 8058011:	6a 00                	push   $0x0
 8058013:	6a 00                	push   $0x0
 8058015:	50                   	push   %eax
 8058016:	e8 05 12 ff ff       	call   8049220 <shmat@plt>
 805801b:	83 c4 0c             	add    $0xc,%esp
 805801e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8058021:	0f 84 bc 00 00 00    	je     80580e3 <__afl_setup_abort>
 8058027:	c6 00 01             	movb   $0x1,(%eax)
 805802a:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 805802f:	89 c2                	mov    %eax,%edx
 8058031:	59                   	pop    %ecx
 8058032:	58                   	pop    %eax

08058033 <__afl_forkserver>:
 8058033:	50                   	push   %eax
 8058034:	51                   	push   %ecx
 8058035:	52                   	push   %edx
 8058036:	6a 04                	push   $0x4
 8058038:	68 e0 ad 43 08       	push   $0x843ade0
 805803d:	68 c7 00 00 00       	push   $0xc7
 8058042:	e8 89 13 ff ff       	call   80493d0 <write@plt>
 8058047:	83 c4 0c             	add    $0xc,%esp
 805804a:	83 f8 04             	cmp    $0x4,%eax
 805804d:	75 6e                	jne    80580bd <__afl_fork_resume>

0805804f <__afl_fork_wait_loop>:
 805804f:	6a 04                	push   $0x4
 8058051:	68 e0 ad 43 08       	push   $0x843ade0
 8058056:	68 c6 00 00 00       	push   $0xc6
 805805b:	e8 00 11 ff ff       	call   8049160 <read@plt>
 8058060:	83 c4 0c             	add    $0xc,%esp
 8058063:	83 f8 04             	cmp    $0x4,%eax
 8058066:	75 74                	jne    80580dc <__afl_die>
 8058068:	e8 d3 13 ff ff       	call   8049440 <fork@plt>
 805806d:	83 f8 00             	cmp    $0x0,%eax
 8058070:	7c 6a                	jl     80580dc <__afl_die>
 8058072:	74 49                	je     80580bd <__afl_fork_resume>
 8058074:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8058079:	6a 04                	push   $0x4
 805807b:	68 40 ae 43 08       	push   $0x843ae40
 8058080:	68 c7 00 00 00       	push   $0xc7
 8058085:	e8 46 13 ff ff       	call   80493d0 <write@plt>
 805808a:	83 c4 0c             	add    $0xc,%esp
 805808d:	6a 00                	push   $0x0
 805808f:	68 e0 ad 43 08       	push   $0x843ade0
 8058094:	ff 35 40 ae 43 08    	pushl  0x843ae40
 805809a:	e8 d1 11 ff ff       	call   8049270 <waitpid@plt>
 805809f:	83 c4 0c             	add    $0xc,%esp
 80580a2:	83 f8 00             	cmp    $0x0,%eax
 80580a5:	7e 35                	jle    80580dc <__afl_die>
 80580a7:	6a 04                	push   $0x4
 80580a9:	68 e0 ad 43 08       	push   $0x843ade0
 80580ae:	68 c7 00 00 00       	push   $0xc7
 80580b3:	e8 18 13 ff ff       	call   80493d0 <write@plt>
 80580b8:	83 c4 0c             	add    $0xc,%esp
 80580bb:	eb 92                	jmp    805804f <__afl_fork_wait_loop>

080580bd <__afl_fork_resume>:
 80580bd:	68 c6 00 00 00       	push   $0xc6
 80580c2:	e8 59 14 ff ff       	call   8049520 <close@plt>
 80580c7:	68 c7 00 00 00       	push   $0xc7
 80580cc:	e8 4f 14 ff ff       	call   8049520 <close@plt>
 80580d1:	83 c4 08             	add    $0x8,%esp
 80580d4:	5a                   	pop    %edx
 80580d5:	59                   	pop    %ecx
 80580d6:	58                   	pop    %eax
 80580d7:	e9 ea fe ff ff       	jmp    8057fc6 <__afl_store>

080580dc <__afl_die>:
 80580dc:	31 c0                	xor    %eax,%eax
 80580de:	e8 ad 10 ff ff       	call   8049190 <_exit@plt>

080580e3 <__afl_setup_abort>:
 80580e3:	fe 05 60 ae 43 08    	incb   0x843ae60
 80580e9:	59                   	pop    %ecx
 80580ea:	58                   	pop    %eax
 80580eb:	e9 ee fe ff ff       	jmp    8057fde <__afl_return>

080580f0 <.AFL_SHM_ENV>:
 80580f0:	5f                   	pop    %edi
 80580f1:	5f                   	pop    %edi
 80580f2:	41                   	inc    %ecx
 80580f3:	46                   	inc    %esi
 80580f4:	4c                   	dec    %esp
 80580f5:	5f                   	pop    %edi
 80580f6:	53                   	push   %ebx
 80580f7:	48                   	dec    %eax
 80580f8:	4d                   	dec    %ebp
 80580f9:	5f                   	pop    %edi
 80580fa:	49                   	dec    %ecx
 80580fb:	44                   	inc    %esp
 80580fc:	00 66 90             	add    %ah,-0x70(%esi)
 80580ff:	90                   	nop

08058100 <set_program_name>:
/* Set program_name, based on argv[0].
   argv0 must be a string allocated with indefinite extent, and must not be
   modified after this call.  */
void
set_program_name (const char *argv0)
{
 8058100:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058104:	89 3c 24             	mov    %edi,(%esp)
 8058107:	89 54 24 04          	mov    %edx,0x4(%esp)
 805810b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805810f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058113:	b9 46 07 00 00       	mov    $0x746,%ecx
 8058118:	e8 1b 02 00 00       	call   8058338 <__afl_maybe_log>
 805811d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058121:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058125:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058129:	8b 3c 24             	mov    (%esp),%edi
 805812c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058130:	55                   	push   %ebp
 8058131:	57                   	push   %edi
 8058132:	56                   	push   %esi
 8058133:	53                   	push   %ebx
 8058134:	83 ec 0c             	sub    $0xc,%esp
 8058137:	8b 5c 24 20          	mov    0x20(%esp),%ebx
  const char *slash;
  const char *base;

  /* Sanity check.  POSIX requires the invoking process to pass a non-NULL
     argv[0].  */
  if (argv0 == NULL)
 805813b:	85 db                	test   %ebx,%ebx
 805813d:	0f 84 a5 01 00 00    	je     80582e8 <set_program_name+0x1e8>
 8058143:	90                   	nop
 8058144:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058148:	89 3c 24             	mov    %edi,(%esp)
 805814b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805814f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058153:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058157:	b9 8a ce 00 00       	mov    $0xce8a,%ecx
 805815c:	e8 d7 01 00 00       	call   8058338 <__afl_maybe_log>
 8058161:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058165:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058169:	8b 54 24 04          	mov    0x4(%esp),%edx
 805816d:	8b 3c 24             	mov    (%esp),%edi
 8058170:	8d 64 24 10          	lea    0x10(%esp),%esp
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
             stderr);
      abort ();
    }

  slash = strrchr (argv0, '/');
 8058174:	83 ec 08             	sub    $0x8,%esp
 8058177:	6a 2f                	push   $0x2f
 8058179:	53                   	push   %ebx
 805817a:	e8 01 13 ff ff       	call   8049480 <strrchr@plt>
 805817f:	83 c4 10             	add    $0x10,%esp
  base = (slash != NULL ? slash + 1 : argv0);
 8058182:	85 c0                	test   %eax,%eax
 8058184:	0f 84 17 01 00 00    	je     80582a1 <set_program_name+0x1a1>
 805818a:	66 90                	xchg   %ax,%ax
 805818c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058190:	89 3c 24             	mov    %edi,(%esp)
 8058193:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058197:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805819b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805819f:	b9 62 bd 00 00       	mov    $0xbd62,%ecx
 80581a4:	e8 8f 01 00 00       	call   8058338 <__afl_maybe_log>
 80581a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80581ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80581b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80581b5:	8b 3c 24             	mov    (%esp),%edi
 80581b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80581bc:	8d 68 01             	lea    0x1(%eax),%ebp
 80581bf:	89 e9                	mov    %ebp,%ecx
 80581c1:	29 d9                	sub    %ebx,%ecx
  if (base - argv0 >= 7 && strncmp (base - 7, "/.libs/", 7) == 0)
 80581c3:	83 f9 06             	cmp    $0x6,%ecx
 80581c6:	0f 8e d5 00 00 00    	jle    80582a1 <set_program_name+0x1a1>
 80581cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80581d0:	89 3c 24             	mov    %edi,(%esp)
 80581d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80581d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80581db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80581df:	b9 4f c1 00 00       	mov    $0xc14f,%ecx
 80581e4:	e8 4f 01 00 00       	call   8058338 <__afl_maybe_log>
 80581e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80581ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80581f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80581f5:	8b 3c 24             	mov    (%esp),%edi
 80581f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80581fc:	8d 70 fa             	lea    -0x6(%eax),%esi
 80581ff:	b9 07 00 00 00       	mov    $0x7,%ecx
 8058204:	bf 14 67 06 08       	mov    $0x8066714,%edi
 8058209:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 805820b:	0f 97 c2             	seta   %dl
 805820e:	0f 92 c1             	setb   %cl
 8058211:	38 ca                	cmp    %cl,%dl
 8058213:	0f 85 88 00 00 00    	jne    80582a1 <set_program_name+0x1a1>
 8058219:	8d 76 00             	lea    0x0(%esi),%esi
 805821c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058220:	89 3c 24             	mov    %edi,(%esp)
 8058223:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058227:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805822b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805822f:	b9 05 43 00 00       	mov    $0x4305,%ecx
 8058234:	e8 ff 00 00 00       	call   8058338 <__afl_maybe_log>
 8058239:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805823d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058241:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058245:	8b 3c 24             	mov    (%esp),%edi
 8058248:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      argv0 = base;
      if (strncmp (base, "lt-", 3) == 0)
 805824c:	b9 03 00 00 00       	mov    $0x3,%ecx
 8058251:	bf 1c 67 06 08       	mov    $0x806671c,%edi
 8058256:	89 ee                	mov    %ebp,%esi
 8058258:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 805825a:	89 eb                	mov    %ebp,%ebx
 805825c:	0f 97 c2             	seta   %dl
 805825f:	0f 92 c1             	setb   %cl
 8058262:	38 ca                	cmp    %cl,%dl
 8058264:	75 3b                	jne    80582a1 <set_program_name+0x1a1>
 8058266:	66 90                	xchg   %ax,%ax
 8058268:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805826c:	89 3c 24             	mov    %edi,(%esp)
 805826f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058273:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058277:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805827b:	b9 81 3e 00 00       	mov    $0x3e81,%ecx
 8058280:	e8 b3 00 00 00       	call   8058338 <__afl_maybe_log>
 8058285:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058289:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805828d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058291:	8b 3c 24             	mov    (%esp),%edi
 8058294:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          argv0 = base + 3;
 8058298:	8d 58 04             	lea    0x4(%eax),%ebx
          /* On glibc systems, remove the "lt-" prefix from the variable
             program_invocation_short_name.  */
#if HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME
          program_invocation_short_name = (char *) argv0;
 805829b:	89 1d c0 a2 06 08    	mov    %ebx,0x806a2c0
 80582a1:	8d 76 00             	lea    0x0(%esi),%esi
         /some/hidden/place/bin/cp: `foo' and `foo' are the same file
     not
         cp: `foo' and `foo' are the same file
   */

  program_name = argv0;
 80582a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80582a8:	89 3c 24             	mov    %edi,(%esp)
 80582ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80582af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80582b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80582b7:	b9 07 43 00 00       	mov    $0x4307,%ecx
 80582bc:	e8 77 00 00 00       	call   8058338 <__afl_maybe_log>
 80582c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80582c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80582c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80582cd:	8b 3c 24             	mov    (%esp),%edi
 80582d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80582d4:	89 1d 48 ac 43 08    	mov    %ebx,0x843ac48

  /* On glibc systems, the error() function comes from libc and uses the
     variable program_invocation_name, not program_name.  So set this variable
     as well.  */
#if HAVE_DECL_PROGRAM_INVOCATION_NAME
  program_invocation_name = (char *) argv0;
 80582da:	89 1d c8 a2 06 08    	mov    %ebx,0x806a2c8
#endif
}
 80582e0:	83 c4 0c             	add    $0xc,%esp
 80582e3:	5b                   	pop    %ebx
 80582e4:	5e                   	pop    %esi
 80582e5:	5f                   	pop    %edi
 80582e6:	5d                   	pop    %ebp
 80582e7:	c3                   	ret    
  /* Sanity check.  POSIX requires the invoking process to pass a non-NULL
     argv[0].  */
  if (argv0 == NULL)
    {
      /* It's a bug in the invoking program.  Help diagnosing it.  */
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
 80582e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80582ec:	89 3c 24             	mov    %edi,(%esp)
 80582ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80582f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80582f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80582fb:	b9 ac bd 00 00       	mov    $0xbdac,%ecx
 8058300:	e8 33 00 00 00       	call   8058338 <__afl_maybe_log>
 8058305:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058309:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805830d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058311:	8b 3c 24             	mov    (%esp),%edi
 8058314:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058318:	ff 35 c4 a2 06 08    	pushl  0x806a2c4
 805831e:	6a 37                	push   $0x37
 8058320:	6a 01                	push   $0x1
 8058322:	68 dc 66 06 08       	push   $0x80666dc
 8058327:	e8 24 0f ff ff       	call   8049250 <fwrite@plt>
             stderr);
      abort ();
 805832c:	e8 cf 11 ff ff       	call   8049500 <abort@plt>
 8058331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08058338 <__afl_maybe_log>:
 8058338:	9f                   	lahf   
 8058339:	0f 90 c0             	seto   %al
 805833c:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8058342:	85 d2                	test   %edx,%edx
 8058344:	74 22                	je     8058368 <__afl_setup>

08058346 <__afl_store>:
 8058346:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 805834c:	31 cf                	xor    %ecx,%edi
 805834e:	d1 e9                	shr    %ecx
 8058350:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8058356:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805835a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805835e <__afl_return>:
 805835e:	04 7f                	add    $0x7f,%al
 8058360:	9e                   	sahf   
 8058361:	c3                   	ret    
 8058362:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08058368 <__afl_setup>:
 8058368:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 805836f:	75 ed                	jne    805835e <__afl_return>
 8058371:	50                   	push   %eax
 8058372:	51                   	push   %ecx
 8058373:	68 70 84 05 08       	push   $0x8058470
 8058378:	e8 63 0f ff ff       	call   80492e0 <getenv@plt>
 805837d:	83 c4 04             	add    $0x4,%esp
 8058380:	85 c0                	test   %eax,%eax
 8058382:	0f 84 db 00 00 00    	je     8058463 <__afl_setup_abort>
 8058388:	50                   	push   %eax
 8058389:	e8 12 11 ff ff       	call   80494a0 <atoi@plt>
 805838e:	83 c4 04             	add    $0x4,%esp
 8058391:	6a 00                	push   $0x0
 8058393:	6a 00                	push   $0x0
 8058395:	50                   	push   %eax
 8058396:	e8 85 0e ff ff       	call   8049220 <shmat@plt>
 805839b:	83 c4 0c             	add    $0xc,%esp
 805839e:	83 f8 ff             	cmp    $0xffffffff,%eax
 80583a1:	0f 84 bc 00 00 00    	je     8058463 <__afl_setup_abort>
 80583a7:	c6 00 01             	movb   $0x1,(%eax)
 80583aa:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 80583af:	89 c2                	mov    %eax,%edx
 80583b1:	59                   	pop    %ecx
 80583b2:	58                   	pop    %eax

080583b3 <__afl_forkserver>:
 80583b3:	50                   	push   %eax
 80583b4:	51                   	push   %ecx
 80583b5:	52                   	push   %edx
 80583b6:	6a 04                	push   $0x4
 80583b8:	68 e0 ad 43 08       	push   $0x843ade0
 80583bd:	68 c7 00 00 00       	push   $0xc7
 80583c2:	e8 09 10 ff ff       	call   80493d0 <write@plt>
 80583c7:	83 c4 0c             	add    $0xc,%esp
 80583ca:	83 f8 04             	cmp    $0x4,%eax
 80583cd:	75 6e                	jne    805843d <__afl_fork_resume>

080583cf <__afl_fork_wait_loop>:
 80583cf:	6a 04                	push   $0x4
 80583d1:	68 e0 ad 43 08       	push   $0x843ade0
 80583d6:	68 c6 00 00 00       	push   $0xc6
 80583db:	e8 80 0d ff ff       	call   8049160 <read@plt>
 80583e0:	83 c4 0c             	add    $0xc,%esp
 80583e3:	83 f8 04             	cmp    $0x4,%eax
 80583e6:	75 74                	jne    805845c <__afl_die>
 80583e8:	e8 53 10 ff ff       	call   8049440 <fork@plt>
 80583ed:	83 f8 00             	cmp    $0x0,%eax
 80583f0:	7c 6a                	jl     805845c <__afl_die>
 80583f2:	74 49                	je     805843d <__afl_fork_resume>
 80583f4:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 80583f9:	6a 04                	push   $0x4
 80583fb:	68 40 ae 43 08       	push   $0x843ae40
 8058400:	68 c7 00 00 00       	push   $0xc7
 8058405:	e8 c6 0f ff ff       	call   80493d0 <write@plt>
 805840a:	83 c4 0c             	add    $0xc,%esp
 805840d:	6a 00                	push   $0x0
 805840f:	68 e0 ad 43 08       	push   $0x843ade0
 8058414:	ff 35 40 ae 43 08    	pushl  0x843ae40
 805841a:	e8 51 0e ff ff       	call   8049270 <waitpid@plt>
 805841f:	83 c4 0c             	add    $0xc,%esp
 8058422:	83 f8 00             	cmp    $0x0,%eax
 8058425:	7e 35                	jle    805845c <__afl_die>
 8058427:	6a 04                	push   $0x4
 8058429:	68 e0 ad 43 08       	push   $0x843ade0
 805842e:	68 c7 00 00 00       	push   $0xc7
 8058433:	e8 98 0f ff ff       	call   80493d0 <write@plt>
 8058438:	83 c4 0c             	add    $0xc,%esp
 805843b:	eb 92                	jmp    80583cf <__afl_fork_wait_loop>

0805843d <__afl_fork_resume>:
 805843d:	68 c6 00 00 00       	push   $0xc6
 8058442:	e8 d9 10 ff ff       	call   8049520 <close@plt>
 8058447:	68 c7 00 00 00       	push   $0xc7
 805844c:	e8 cf 10 ff ff       	call   8049520 <close@plt>
 8058451:	83 c4 08             	add    $0x8,%esp
 8058454:	5a                   	pop    %edx
 8058455:	59                   	pop    %ecx
 8058456:	58                   	pop    %eax
 8058457:	e9 ea fe ff ff       	jmp    8058346 <__afl_store>

0805845c <__afl_die>:
 805845c:	31 c0                	xor    %eax,%eax
 805845e:	e8 2d 0d ff ff       	call   8049190 <_exit@plt>

08058463 <__afl_setup_abort>:
 8058463:	fe 05 60 ae 43 08    	incb   0x843ae60
 8058469:	59                   	pop    %ecx
 805846a:	58                   	pop    %eax
 805846b:	e9 ee fe ff ff       	jmp    805835e <__afl_return>

08058470 <.AFL_SHM_ENV>:
 8058470:	5f                   	pop    %edi
 8058471:	5f                   	pop    %edi
 8058472:	41                   	inc    %ecx
 8058473:	46                   	inc    %esi
 8058474:	4c                   	dec    %esp
 8058475:	5f                   	pop    %edi
 8058476:	53                   	push   %ebx
 8058477:	48                   	dec    %eax
 8058478:	4d                   	dec    %ebp
 8058479:	5f                   	pop    %edi
 805847a:	49                   	dec    %ecx
 805847b:	44                   	inc    %esp
 805847c:	00 66 90             	add    %ah,-0x70(%esi)
 805847f:	90                   	nop

08058480 <quoting_options_from_style>:
}

/* Return quoting options for STYLE, with no extra quoting.  */
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
 8058480:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058484:	89 3c 24             	mov    %edi,(%esp)
 8058487:	89 54 24 04          	mov    %edx,0x4(%esp)
 805848b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805848f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058493:	b9 c8 08 00 00       	mov    $0x8c8,%ecx
 8058498:	e8 3b 65 00 00       	call   805e9d8 <__afl_maybe_log>
 805849d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80584a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80584a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80584a9:	8b 3c 24             	mov    (%esp),%edi
 80584ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80584b0:	57                   	push   %edi
 80584b1:	53                   	push   %ebx
 80584b2:	89 c3                	mov    %eax,%ebx
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
 80584b4:	b9 0c 00 00 00       	mov    $0xc,%ecx
 80584b9:	31 c0                	xor    %eax,%eax
 80584bb:	89 df                	mov    %ebx,%edi
}

/* Return quoting options for STYLE, with no extra quoting.  */
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
 80584bd:	83 ec 04             	sub    $0x4,%esp
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
  if (style == custom_quoting_style)
 80584c0:	83 fa 08             	cmp    $0x8,%edx

/* Return quoting options for STYLE, with no extra quoting.  */
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
 80584c3:	f3 ab                	rep stos %eax,%es:(%edi)
  if (style == custom_quoting_style)
 80584c5:	74 3b                	je     8058502 <quoting_options_from_style+0x82>
 80584c7:	90                   	nop
 80584c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80584cc:	89 3c 24             	mov    %edi,(%esp)
 80584cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80584d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80584d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80584db:	b9 59 eb 00 00       	mov    $0xeb59,%ecx
 80584e0:	e8 f3 64 00 00       	call   805e9d8 <__afl_maybe_log>
 80584e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80584e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80584ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80584f1:	8b 3c 24             	mov    (%esp),%edi
 80584f4:	8d 64 24 10          	lea    0x10(%esp),%esp
    abort ();
  o.style = style;
  return o;
 80584f8:	89 13                	mov    %edx,(%ebx)
}
 80584fa:	83 c4 04             	add    $0x4,%esp
 80584fd:	89 d8                	mov    %ebx,%eax
 80584ff:	5b                   	pop    %ebx
 8058500:	5f                   	pop    %edi
 8058501:	c3                   	ret    
 8058502:	66 90                	xchg   %ax,%ax
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
  if (style == custom_quoting_style)
    abort ();
 8058504:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058508:	89 3c 24             	mov    %edi,(%esp)
 805850b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805850f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058513:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058517:	b9 7d 6e 00 00       	mov    $0x6e7d,%ecx
 805851c:	e8 b7 64 00 00       	call   805e9d8 <__afl_maybe_log>
 8058521:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058525:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058529:	8b 54 24 04          	mov    0x4(%esp),%edx
 805852d:	8b 3c 24             	mov    (%esp),%edi
 8058530:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058534:	e8 c7 0f ff ff       	call   8049500 <abort@plt>
 8058539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08058540 <strcaseeq6>:
    return 0;
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
 8058540:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058544:	89 3c 24             	mov    %edi,(%esp)
 8058547:	89 54 24 04          	mov    %edx,0x4(%esp)
 805854b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805854f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058553:	b9 a0 b3 00 00       	mov    $0xb3a0,%ecx
 8058558:	e8 7b 64 00 00       	call   805e9d8 <__afl_maybe_log>
 805855d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058561:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058565:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058569:	8b 3c 24             	mov    (%esp),%edi
 805856c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058570:	55                   	push   %ebp
 8058571:	57                   	push   %edi
 8058572:	56                   	push   %esi
 8058573:	53                   	push   %ebx
  if (CASEEQ (s1[6], s26))
 8058574:	0f be d9             	movsbl %cl,%ebx
 8058577:	83 eb 41             	sub    $0x41,%ebx
    return 0;
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
 805857a:	89 c6                	mov    %eax,%esi
 805857c:	83 ec 0c             	sub    $0xc,%esp
  if (CASEEQ (s1[6], s26))
 805857f:	83 fb 19             	cmp    $0x19,%ebx
    return 0;
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
 8058582:	8b 7c 24 20          	mov    0x20(%esp),%edi
 8058586:	8b 6c 24 24          	mov    0x24(%esp),%ebp
  if (CASEEQ (s1[6], s26))
 805858a:	0f 87 00 03 00 00    	ja     8058890 <strcaseeq6+0x350>
 8058590:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058594:	89 3c 24             	mov    %edi,(%esp)
 8058597:	89 54 24 04          	mov    %edx,0x4(%esp)
 805859b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805859f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80585a3:	b9 29 a3 00 00       	mov    $0xa329,%ecx
 80585a8:	e8 2b 64 00 00       	call   805e9d8 <__afl_maybe_log>
 80585ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80585b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80585b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80585b9:	8b 3c 24             	mov    (%esp),%edi
 80585bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80585c0:	0f b6 40 06          	movzbl 0x6(%eax),%eax
 80585c4:	83 e0 df             	and    $0xffffffdf,%eax
 80585c7:	38 c8                	cmp    %cl,%al
 80585c9:	0f 94 c3             	sete   %bl
        return 1;
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
 80585cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80585d0:	89 3c 24             	mov    %edi,(%esp)
 80585d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80585d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80585db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80585df:	b9 39 6a 00 00       	mov    $0x6a39,%ecx
 80585e4:	e8 ef 63 00 00       	call   805e9d8 <__afl_maybe_log>
 80585e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80585ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80585f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80585f5:	8b 3c 24             	mov    (%esp),%edi
 80585f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80585fc:	31 c0                	xor    %eax,%eax
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
 80585fe:	84 db                	test   %bl,%bl
 8058600:	0f 84 7a 02 00 00    	je     8058880 <strcaseeq6+0x340>
 8058606:	66 90                	xchg   %ax,%ax
 8058608:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805860c:	89 3c 24             	mov    %edi,(%esp)
 805860f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058613:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058617:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805861b:	b9 95 5c 00 00       	mov    $0x5c95,%ecx
 8058620:	e8 b3 63 00 00       	call   805e9d8 <__afl_maybe_log>
 8058625:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058629:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805862d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058631:	8b 3c 24             	mov    (%esp),%edi
 8058634:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s26 == 0)
 8058638:	84 c9                	test   %cl,%cl
        return 1;
 805863a:	b0 01                	mov    $0x1,%al
static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
    {
      if (s26 == 0)
 805863c:	0f 84 3e 02 00 00    	je     8058880 <strcaseeq6+0x340>
 8058642:	66 90                	xchg   %ax,%ax
 8058644:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058648:	89 3c 24             	mov    %edi,(%esp)
 805864b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805864f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058653:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058657:	b9 91 07 00 00       	mov    $0x791,%ecx
 805865c:	e8 77 63 00 00       	call   805e9d8 <__afl_maybe_log>
 8058661:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058665:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058669:	8b 54 24 04          	mov    0x4(%esp),%edx
 805866d:	8b 3c 24             	mov    (%esp),%edi
 8058670:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
 8058674:	89 f9                	mov    %edi,%ecx
 8058676:	0f be d9             	movsbl %cl,%ebx
 8058679:	83 eb 41             	sub    $0x41,%ebx
 805867c:	83 fb 19             	cmp    $0x19,%ebx
 805867f:	0f 86 1b 02 00 00    	jbe    80588a0 <strcaseeq6+0x360>
 8058685:	8d 76 00             	lea    0x0(%esi),%esi
 8058688:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805868c:	89 3c 24             	mov    %edi,(%esp)
 805868f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058693:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058697:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805869b:	b9 7c e6 00 00       	mov    $0xe67c,%ecx
 80586a0:	e8 33 63 00 00       	call   805e9d8 <__afl_maybe_log>
 80586a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80586a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80586ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80586b1:	8b 3c 24             	mov    (%esp),%edi
 80586b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80586b8:	3a 4e 07             	cmp    0x7(%esi),%cl
 80586bb:	0f 94 c1             	sete   %cl
 80586be:	66 90                	xchg   %ax,%ax
        return 1;
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
 80586c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80586c4:	89 3c 24             	mov    %edi,(%esp)
 80586c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80586cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80586cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80586d3:	b9 21 2f 00 00       	mov    $0x2f21,%ecx
 80586d8:	e8 fb 62 00 00       	call   805e9d8 <__afl_maybe_log>
 80586dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80586e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80586e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80586e9:	8b 3c 24             	mov    (%esp),%edi
 80586ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80586f0:	31 c0                	xor    %eax,%eax
}

static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
 80586f2:	84 c9                	test   %cl,%cl
 80586f4:	0f 84 86 01 00 00    	je     8058880 <strcaseeq6+0x340>
 80586fa:	66 90                	xchg   %ax,%ax
 80586fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058700:	89 3c 24             	mov    %edi,(%esp)
 8058703:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058707:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805870b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805870f:	b9 5c 58 00 00       	mov    $0x585c,%ecx
 8058714:	e8 bf 62 00 00       	call   805e9d8 <__afl_maybe_log>
 8058719:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805871d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058721:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058725:	8b 3c 24             	mov    (%esp),%edi
 8058728:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s27 == 0)
 805872c:	89 f9                	mov    %edi,%ecx
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
    {
      if (s26 == 0)
        return 1;
 805872e:	b0 01                	mov    $0x1,%al
static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
    {
      if (s27 == 0)
 8058730:	84 c9                	test   %cl,%cl
 8058732:	0f 84 48 01 00 00    	je     8058880 <strcaseeq6+0x340>
 8058738:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805873c:	89 3c 24             	mov    %edi,(%esp)
 805873f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058743:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058747:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805874b:	b9 39 cd 00 00       	mov    $0xcd39,%ecx
 8058750:	e8 83 62 00 00       	call   805e9d8 <__afl_maybe_log>
 8058755:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058759:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805875d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058761:	8b 3c 24             	mov    (%esp),%edi
 8058764:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
 8058768:	89 e8                	mov    %ebp,%eax
 805876a:	0f be f8             	movsbl %al,%edi
 805876d:	83 ef 41             	sub    $0x41,%edi
 8058770:	83 ff 19             	cmp    $0x19,%edi
 8058773:	0f 87 3f 01 00 00    	ja     80588b8 <strcaseeq6+0x378>
 8058779:	8d 76 00             	lea    0x0(%esi),%esi
 805877c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058780:	89 3c 24             	mov    %edi,(%esp)
 8058783:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805878b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805878f:	b9 3a b9 00 00       	mov    $0xb93a,%ecx
 8058794:	e8 3f 62 00 00       	call   805e9d8 <__afl_maybe_log>
 8058799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805879d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80587a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80587a5:	8b 3c 24             	mov    (%esp),%edi
 80587a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80587ac:	0f b6 46 08          	movzbl 0x8(%esi),%eax
 80587b0:	89 eb                	mov    %ebp,%ebx
 80587b2:	83 e0 df             	and    $0xffffffdf,%eax
 80587b5:	38 c3                	cmp    %al,%bl
 80587b7:	0f 94 c1             	sete   %cl
 80587ba:	66 90                	xchg   %ax,%ax
        return 1;
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
 80587bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80587c0:	89 3c 24             	mov    %edi,(%esp)
 80587c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80587c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80587cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80587cf:	b9 9d 29 00 00       	mov    $0x299d,%ecx
 80587d4:	e8 ff 61 00 00       	call   805e9d8 <__afl_maybe_log>
 80587d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80587dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80587e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80587e5:	8b 3c 24             	mov    (%esp),%edi
 80587e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80587ec:	31 c0                	xor    %eax,%eax
}

static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
 80587ee:	84 c9                	test   %cl,%cl
 80587f0:	0f 84 8a 00 00 00    	je     8058880 <strcaseeq6+0x340>
 80587f6:	66 90                	xchg   %ax,%ax
 80587f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80587fc:	89 3c 24             	mov    %edi,(%esp)
 80587ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058803:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058807:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805880b:	b9 d3 ef 00 00       	mov    $0xefd3,%ecx
 8058810:	e8 c3 61 00 00       	call   805e9d8 <__afl_maybe_log>
 8058815:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058819:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805881d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058821:	8b 3c 24             	mov    (%esp),%edi
 8058824:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s28 == 0)
 8058828:	89 e9                	mov    %ebp,%ecx
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
    {
      if (s26 == 0)
        return 1;
 805882a:	b0 01                	mov    $0x1,%al
static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
    {
      if (s28 == 0)
 805882c:	84 c9                	test   %cl,%cl
 805882e:	74 50                	je     8058880 <strcaseeq6+0x340>
 8058830:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058834:	89 3c 24             	mov    %edi,(%esp)
 8058837:	89 54 24 04          	mov    %edx,0x4(%esp)
 805883b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805883f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058843:	b9 7d 16 00 00       	mov    $0x167d,%ecx
 8058848:	e8 8b 61 00 00       	call   805e9d8 <__afl_maybe_log>
 805884d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058851:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058855:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058859:	8b 3c 24             	mov    (%esp),%edi
 805885c:	8d 64 24 10          	lea    0x10(%esp),%esp
# endif

static inline int
strcaseeq9 (const char *s1, const char *s2)
{
  return c_strcasecmp (s1 + 9, s2 + 9) == 0;
 8058860:	83 ec 08             	sub    $0x8,%esp
 8058863:	83 c2 09             	add    $0x9,%edx
 8058866:	83 c6 09             	add    $0x9,%esi
 8058869:	52                   	push   %edx
 805886a:	56                   	push   %esi
 805886b:	e8 10 b4 00 00       	call   8063c80 <c_strcasecmp>
 8058870:	83 c4 10             	add    $0x10,%esp
 8058873:	85 c0                	test   %eax,%eax
 8058875:	0f 94 c2             	sete   %dl
 8058878:	0f b6 c2             	movzbl %dl,%eax
 805887b:	90                   	nop
 805887c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
}
 8058880:	83 c4 0c             	add    $0xc,%esp
 8058883:	5b                   	pop    %ebx
 8058884:	5e                   	pop    %esi
 8058885:	5f                   	pop    %edi
 8058886:	5d                   	pop    %ebp
 8058887:	c3                   	ret    
 8058888:	90                   	nop
 8058889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
 8058890:	38 48 06             	cmp    %cl,0x6(%eax)
 8058893:	0f 94 c3             	sete   %bl
 8058896:	e9 31 fd ff ff       	jmp    80585cc <strcaseeq6+0x8c>
 805889b:	90                   	nop
 805889c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
}

static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
 80588a0:	0f b6 46 07          	movzbl 0x7(%esi),%eax
 80588a4:	83 e0 df             	and    $0xffffffdf,%eax
 80588a7:	38 c1                	cmp    %al,%cl
 80588a9:	0f 94 c1             	sete   %cl
 80588ac:	e9 0d fe ff ff       	jmp    80586be <strcaseeq6+0x17e>
 80588b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
}

static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
 80588b8:	3a 46 08             	cmp    0x8(%esi),%al
 80588bb:	0f 94 c1             	sete   %cl
 80588be:	e9 f7 fe ff ff       	jmp    80587ba <strcaseeq6+0x27a>
 80588c3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80588c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080588d0 <gettext_quote>:
   has one; otherwise, return either it or "\"", depending on S.

   S is either clocale_quoting_style or locale_quoting_style.  */
static char const *
gettext_quote (char const *msgid, enum quoting_style s)
{
 80588d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80588d4:	89 3c 24             	mov    %edi,(%esp)
 80588d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80588db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80588df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80588e3:	b9 48 eb 00 00       	mov    $0xeb48,%ecx
 80588e8:	e8 eb 60 00 00       	call   805e9d8 <__afl_maybe_log>
 80588ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80588f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80588f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80588f9:	8b 3c 24             	mov    (%esp),%edi
 80588fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058900:	57                   	push   %edi
 8058901:	56                   	push   %esi
 8058902:	89 d7                	mov    %edx,%edi
 8058904:	53                   	push   %ebx
 8058905:	89 c6                	mov    %eax,%esi
  char const *translation = _(msgid);
 8058907:	83 ec 04             	sub    $0x4,%esp
 805890a:	6a 05                	push   $0x5
 805890c:	50                   	push   %eax
 805890d:	6a 00                	push   $0x0
 805890f:	e8 fc 08 ff ff       	call   8049210 <dcgettext@plt>
 8058914:	89 c3                	mov    %eax,%ebx
  char const *locale_code;

  if (translation != msgid)
 8058916:	83 c4 10             	add    $0x10,%esp
 8058919:	39 f3                	cmp    %esi,%ebx
 805891b:	74 6b                	je     8058988 <gettext_quote+0xb8>
 805891d:	8d 76 00             	lea    0x0(%esi),%esi
 8058920:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058924:	89 3c 24             	mov    %edi,(%esp)
 8058927:	89 54 24 04          	mov    %edx,0x4(%esp)
 805892b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805892f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058933:	b9 8e 88 00 00       	mov    $0x888e,%ecx
 8058938:	e8 9b 60 00 00       	call   805e9d8 <__afl_maybe_log>
 805893d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058941:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058945:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058949:	8b 3c 24             	mov    (%esp),%edi
 805894c:	8d 64 24 10          	lea    0x10(%esp),%esp
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";

  return (s == clocale_quoting_style ? "\"" : "'");
}
 8058950:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058954:	89 3c 24             	mov    %edi,(%esp)
 8058957:	89 54 24 04          	mov    %edx,0x4(%esp)
 805895b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805895f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058963:	b9 ba 5b 00 00       	mov    $0x5bba,%ecx
 8058968:	e8 6b 60 00 00       	call   805e9d8 <__afl_maybe_log>
 805896d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058971:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058975:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058979:	8b 3c 24             	mov    (%esp),%edi
 805897c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058980:	5b                   	pop    %ebx
 8058981:	5e                   	pop    %esi
 8058982:	5f                   	pop    %edi
 8058983:	c3                   	ret    
 8058984:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        BIG5-HKSCS   0xA1 0xA5            EUC-CN       0xA1 0xAE
        GBK          0xA1 0xAE            Georgian-PS  0x91
        PT154        0x91

     None of these is still in wide use; using iconv is overkill.  */
  locale_code = locale_charset ();
 8058988:	e8 03 bb 00 00       	call   8064490 <locale_charset>
}

static inline int
strcaseeq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[0], s20))
 805898d:	0f b6 10             	movzbl (%eax),%edx
 8058990:	83 e2 df             	and    $0xffffffdf,%edx
 8058993:	80 fa 55             	cmp    $0x55,%dl
 8058996:	0f 85 94 01 00 00    	jne    8058b30 <gettext_quote+0x260>
 805899c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80589a0:	89 3c 24             	mov    %edi,(%esp)
 80589a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80589a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80589ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80589af:	b9 25 58 00 00       	mov    $0x5825,%ecx
 80589b4:	e8 1f 60 00 00       	call   805e9d8 <__afl_maybe_log>
 80589b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80589bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80589c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80589c5:	8b 3c 24             	mov    (%esp),%edi
 80589c8:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq1 (const char *s1, const char *s2, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[1], s21))
 80589cc:	0f b6 50 01          	movzbl 0x1(%eax),%edx
 80589d0:	83 e2 df             	and    $0xffffffdf,%edx
 80589d3:	80 fa 54             	cmp    $0x54,%dl
 80589d6:	0f 85 3c 01 00 00    	jne    8058b18 <gettext_quote+0x248>
 80589dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80589e0:	89 3c 24             	mov    %edi,(%esp)
 80589e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80589e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80589eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80589ef:	b9 a2 83 00 00       	mov    $0x83a2,%ecx
 80589f4:	e8 df 5f 00 00       	call   805e9d8 <__afl_maybe_log>
 80589f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80589fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058a01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058a05:	8b 3c 24             	mov    (%esp),%edi
 8058a08:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq2 (const char *s1, const char *s2, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[2], s22))
 8058a0c:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
 8058a10:	83 e1 df             	and    $0xffffffdf,%ecx
 8058a13:	80 f9 46             	cmp    $0x46,%cl
 8058a16:	0f 85 fc 00 00 00    	jne    8058b18 <gettext_quote+0x248>
 8058a1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058a20:	89 3c 24             	mov    %edi,(%esp)
 8058a23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058a27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058a2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058a2f:	b9 5f 67 00 00       	mov    $0x675f,%ecx
 8058a34:	e8 9f 5f 00 00       	call   805e9d8 <__afl_maybe_log>
 8058a39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058a3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058a41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058a45:	8b 3c 24             	mov    (%esp),%edi
 8058a48:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq3 (const char *s1, const char *s2, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[3], s23))
 8058a4c:	80 78 03 2d          	cmpb   $0x2d,0x3(%eax)
 8058a50:	0f 85 c2 00 00 00    	jne    8058b18 <gettext_quote+0x248>
 8058a56:	66 90                	xchg   %ax,%ax
 8058a58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058a5c:	89 3c 24             	mov    %edi,(%esp)
 8058a5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058a63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058a67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058a6b:	b9 ab 9a 00 00       	mov    $0x9aab,%ecx
 8058a70:	e8 63 5f 00 00       	call   805e9d8 <__afl_maybe_log>
 8058a75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058a79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058a7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058a81:	8b 3c 24             	mov    (%esp),%edi
 8058a84:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq4 (const char *s1, const char *s2, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[4], s24))
 8058a88:	80 78 04 38          	cmpb   $0x38,0x4(%eax)
 8058a8c:	0f 85 86 00 00 00    	jne    8058b18 <gettext_quote+0x248>
 8058a92:	66 90                	xchg   %ax,%ax
 8058a94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058a98:	89 3c 24             	mov    %edi,(%esp)
 8058a9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058a9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058aa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058aa7:	b9 77 98 00 00       	mov    $0x9877,%ecx
 8058aac:	e8 27 5f 00 00       	call   805e9d8 <__afl_maybe_log>
 8058ab1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058ab5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058ab9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058abd:	8b 3c 24             	mov    (%esp),%edi
 8058ac0:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq5 (const char *s1, const char *s2, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[5], s25))
 8058ac4:	80 78 05 00          	cmpb   $0x0,0x5(%eax)
 8058ac8:	75 4e                	jne    8058b18 <gettext_quote+0x248>
 8058aca:	66 90                	xchg   %ax,%ax
 8058acc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058ad0:	89 3c 24             	mov    %edi,(%esp)
 8058ad3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058ad7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058adb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058adf:	b9 59 a3 00 00       	mov    $0xa359,%ecx
 8058ae4:	e8 ef 5e 00 00       	call   805e9d8 <__afl_maybe_log>
 8058ae9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058aed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058af1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058af5:	8b 3c 24             	mov    (%esp),%edi
 8058af8:	8d 64 24 10          	lea    0x10(%esp),%esp
  if (STRCASEEQ (locale_code, "UTF-8", 'U','T','F','-','8',0,0,0,0))
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
 8058afc:	80 3b 60             	cmpb   $0x60,(%ebx)
 8058aff:	bf 23 67 06 08       	mov    $0x8066723,%edi
 8058b04:	b8 2f 67 06 08       	mov    $0x806672f,%eax
 8058b09:	0f 45 c7             	cmovne %edi,%eax
 8058b0c:	e9 3f fe ff ff       	jmp    8058950 <gettext_quote+0x80>
 8058b11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";

  return (s == clocale_quoting_style ? "\"" : "'");
 8058b18:	83 ff 07             	cmp    $0x7,%edi
 8058b1b:	bb 27 67 06 08       	mov    $0x8066727,%ebx
 8058b20:	b8 29 67 06 08       	mov    $0x8066729,%eax
 8058b25:	0f 45 c3             	cmovne %ebx,%eax
 8058b28:	e9 23 fe ff ff       	jmp    8058950 <gettext_quote+0x80>
 8058b2d:	8d 76 00             	lea    0x0(%esi),%esi
}

static inline int
strcaseeq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[0], s20))
 8058b30:	80 fa 47             	cmp    $0x47,%dl
 8058b33:	75 e3                	jne    8058b18 <gettext_quote+0x248>
 8058b35:	8d 76 00             	lea    0x0(%esi),%esi
 8058b38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058b3c:	89 3c 24             	mov    %edi,(%esp)
 8058b3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058b43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058b47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058b4b:	b9 ed 74 00 00       	mov    $0x74ed,%ecx
 8058b50:	e8 83 5e 00 00       	call   805e9d8 <__afl_maybe_log>
 8058b55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058b59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058b5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058b61:	8b 3c 24             	mov    (%esp),%edi
 8058b64:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq1 (const char *s1, const char *s2, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[1], s21))
 8058b68:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
 8058b6c:	83 e1 df             	and    $0xffffffdf,%ecx
 8058b6f:	80 f9 42             	cmp    $0x42,%cl
 8058b72:	75 a4                	jne    8058b18 <gettext_quote+0x248>
 8058b74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058b78:	89 3c 24             	mov    %edi,(%esp)
 8058b7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058b7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058b83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058b87:	b9 4c 47 00 00       	mov    $0x474c,%ecx
 8058b8c:	e8 47 5e 00 00       	call   805e9d8 <__afl_maybe_log>
 8058b91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058b95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058b99:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058b9d:	8b 3c 24             	mov    (%esp),%edi
 8058ba0:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq2 (const char *s1, const char *s2, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[2], s22))
 8058ba4:	80 78 02 31          	cmpb   $0x31,0x2(%eax)
 8058ba8:	0f 85 6a ff ff ff    	jne    8058b18 <gettext_quote+0x248>
 8058bae:	66 90                	xchg   %ax,%ax
 8058bb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058bb4:	89 3c 24             	mov    %edi,(%esp)
 8058bb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058bbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058bbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058bc3:	b9 4e 5b 00 00       	mov    $0x5b4e,%ecx
 8058bc8:	e8 0b 5e 00 00       	call   805e9d8 <__afl_maybe_log>
 8058bcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058bd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058bd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058bd9:	8b 3c 24             	mov    (%esp),%edi
 8058bdc:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq3 (const char *s1, const char *s2, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[3], s23))
 8058be0:	80 78 03 38          	cmpb   $0x38,0x3(%eax)
 8058be4:	0f 85 2e ff ff ff    	jne    8058b18 <gettext_quote+0x248>
 8058bea:	66 90                	xchg   %ax,%ax
 8058bec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058bf0:	89 3c 24             	mov    %edi,(%esp)
 8058bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058bf7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058bfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058bff:	b9 56 4e 00 00       	mov    $0x4e56,%ecx
 8058c04:	e8 cf 5d 00 00       	call   805e9d8 <__afl_maybe_log>
 8058c09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058c0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058c11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058c15:	8b 3c 24             	mov    (%esp),%edi
 8058c18:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq4 (const char *s1, const char *s2, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[4], s24))
 8058c1c:	80 78 04 30          	cmpb   $0x30,0x4(%eax)
 8058c20:	0f 85 f2 fe ff ff    	jne    8058b18 <gettext_quote+0x248>
 8058c26:	66 90                	xchg   %ax,%ax
 8058c28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058c2c:	89 3c 24             	mov    %edi,(%esp)
 8058c2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058c33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058c37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058c3b:	b9 de a7 00 00       	mov    $0xa7de,%ecx
 8058c40:	e8 93 5d 00 00       	call   805e9d8 <__afl_maybe_log>
 8058c45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058c49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058c4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058c51:	8b 3c 24             	mov    (%esp),%edi
 8058c54:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq5 (const char *s1, const char *s2, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[5], s25))
 8058c58:	80 78 05 33          	cmpb   $0x33,0x5(%eax)
 8058c5c:	0f 85 b6 fe ff ff    	jne    8058b18 <gettext_quote+0x248>
 8058c62:	66 90                	xchg   %ax,%ax
 8058c64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058c68:	89 3c 24             	mov    %edi,(%esp)
 8058c6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058c6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058c73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058c77:	b9 cf eb 00 00       	mov    $0xebcf,%ecx
 8058c7c:	e8 57 5d 00 00       	call   805e9d8 <__afl_maybe_log>
 8058c81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058c85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058c89:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058c8d:	8b 3c 24             	mov    (%esp),%edi
 8058c90:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s25 == 0)
        return 1;
      else
        return strcaseeq6 (s1, s2, s26, s27, s28);
 8058c94:	52                   	push   %edx
 8058c95:	52                   	push   %edx
 8058c96:	b9 30 00 00 00       	mov    $0x30,%ecx
 8058c9b:	6a 00                	push   $0x0
 8058c9d:	6a 00                	push   $0x0
 8058c9f:	ba 33 67 06 08       	mov    $0x8066733,%edx
 8058ca4:	e8 97 f8 ff ff       	call   8058540 <strcaseeq6>
 8058ca9:	83 c4 10             	add    $0x10,%esp

     None of these is still in wide use; using iconv is overkill.  */
  locale_code = locale_charset ();
  if (STRCASEEQ (locale_code, "UTF-8", 'U','T','F','-','8',0,0,0,0))
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
 8058cac:	85 c0                	test   %eax,%eax
 8058cae:	0f 84 64 fe ff ff    	je     8058b18 <gettext_quote+0x248>
 8058cb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058cb8:	89 3c 24             	mov    %edi,(%esp)
 8058cbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058cbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058cc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058cc7:	b9 d2 ab 00 00       	mov    $0xabd2,%ecx
 8058ccc:	e8 07 5d 00 00       	call   805e9d8 <__afl_maybe_log>
 8058cd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058cd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058cd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058cdd:	8b 3c 24             	mov    (%esp),%edi
 8058ce0:	8d 64 24 10          	lea    0x10(%esp),%esp
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";
 8058ce4:	80 3b 60             	cmpb   $0x60,(%ebx)
 8058ce7:	be 20 67 06 08       	mov    $0x8066720,%esi
 8058cec:	b8 2b 67 06 08       	mov    $0x806672b,%eax
 8058cf1:	0f 45 c6             	cmovne %esi,%eax
 8058cf4:	e9 57 fc ff ff       	jmp    8058950 <gettext_quote+0x80>
 8058cf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08058d00 <quotearg_buffer_restyled>:
                          char const *arg, size_t argsize,
                          enum quoting_style quoting_style, int flags,
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
 8058d00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058d04:	89 3c 24             	mov    %edi,(%esp)
 8058d07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058d0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058d0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058d13:	b9 1d ce 00 00       	mov    $0xce1d,%ecx
 8058d18:	e8 bb 5c 00 00       	call   805e9d8 <__afl_maybe_log>
 8058d1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058d21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058d25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058d29:	8b 3c 24             	mov    (%esp),%edi
 8058d2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058d30:	55                   	push   %ebp
 8058d31:	57                   	push   %edi
 8058d32:	56                   	push   %esi
 8058d33:	53                   	push   %ebx
 8058d34:	83 ec 5c             	sub    $0x5c,%esp
 8058d37:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 8058d3b:	89 54 24 10          	mov    %edx,0x10(%esp)
 8058d3f:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 8058d43:	8b 7c 24 70          	mov    0x70(%esp),%edi
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
  bool unibyte_locale = MB_CUR_MAX == 1;
 8058d47:	e8 14 05 ff ff       	call   8049260 <__ctype_get_mb_cur_max@plt>
 8058d4c:	89 44 24 34          	mov    %eax,0x34(%esp)
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
 8058d50:	8b 44 24 78          	mov    0x78(%esp),%eax
 8058d54:	d1 e8                	shr    %eax
 8058d56:	83 e0 01             	and    $0x1,%eax
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 8058d59:	83 7c 24 74 08       	cmpl   $0x8,0x74(%esp)
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
  bool unibyte_locale = MB_CUR_MAX == 1;
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
 8058d5e:	88 44 24 39          	mov    %al,0x39(%esp)
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 8058d62:	0f 87 d8 39 00 00    	ja     805c740 <quotearg_buffer_restyled+0x3a40>
 8058d68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058d6c:	89 3c 24             	mov    %edi,(%esp)
 8058d6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058d73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058d77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058d7b:	b9 bf 99 00 00       	mov    $0x99bf,%ecx
 8058d80:	e8 53 5c 00 00       	call   805e9d8 <__afl_maybe_log>
 8058d85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058d89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058d8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058d91:	8b 3c 24             	mov    (%esp),%edi
 8058d94:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058d98:	8b 54 24 74          	mov    0x74(%esp),%edx
 8058d9c:	ff 24 95 80 67 06 08 	jmp    *0x8066780(,%edx,4)
 8058da3:	90                   	nop
 8058da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      quote_string_len = 1;
      break;

    case escape_quoting_style:
      backslash_escapes = true;
      elide_outer_quotes = false;
 8058da8:	c6 44 24 39 00       	movb   $0x0,0x39(%esp)
      quote_string = "\"";
      quote_string_len = 1;
      break;

    case escape_quoting_style:
      backslash_escapes = true;
 8058dad:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 8058db2:	31 ed                	xor    %ebp,%ebp
  char const *quote_string = 0;
  size_t quote_string_len = 0;
 8058db4:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 8058dbb:	00 
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
 8058dbc:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
 8058dc3:	00 
 8058dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 8058dc8:	0f b6 5c 24 39       	movzbl 0x39(%esp),%ebx

    default:
      abort ();
    }

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
 8058dcd:	31 f6                	xor    %esi,%esi
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 8058dcf:	83 f3 01             	xor    $0x1,%ebx
 8058dd2:	88 5c 24 3a          	mov    %bl,0x3a(%esp)
 8058dd6:	66 90                	xchg   %ax,%ax

    default:
      abort ();
    }

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
 8058dd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058ddc:	89 3c 24             	mov    %edi,(%esp)
 8058ddf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058de3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058de7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058deb:	b9 47 9e 00 00       	mov    $0x9e47,%ecx
 8058df0:	e8 e3 5b 00 00       	call   805e9d8 <__afl_maybe_log>
 8058df5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058df9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058dfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058e01:	8b 3c 24             	mov    (%esp),%edi
 8058e04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058e08:	39 fe                	cmp    %edi,%esi
 8058e0a:	0f 95 c1             	setne  %cl
 8058e0d:	83 ff ff             	cmp    $0xffffffff,%edi
 8058e10:	0f 84 2e 0a 00 00    	je     8059844 <quotearg_buffer_restyled+0xb44>
 8058e16:	66 90                	xchg   %ax,%ax
 8058e18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058e1c:	89 3c 24             	mov    %edi,(%esp)
 8058e1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058e23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058e27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058e2b:	b9 a1 4b 00 00       	mov    $0x4ba1,%ecx
 8058e30:	e8 a3 5b 00 00       	call   805e9d8 <__afl_maybe_log>
 8058e35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058e39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058e3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058e41:	8b 3c 24             	mov    (%esp),%edi
 8058e44:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058e48:	90                   	nop
 8058e49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8058e50:	84 c9                	test   %cl,%cl
 8058e52:	0f 84 60 0a 00 00    	je     80598b8 <quotearg_buffer_restyled+0xbb8>
 8058e58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058e5c:	89 3c 24             	mov    %edi,(%esp)
 8058e5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058e63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058e67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058e6b:	b9 22 e2 00 00       	mov    $0xe222,%ecx
 8058e70:	e8 63 5b 00 00       	call   805e9d8 <__afl_maybe_log>
 8058e75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058e79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058e7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058e81:	8b 3c 24             	mov    (%esp),%edi
 8058e84:	8d 64 24 10          	lea    0x10(%esp),%esp
      unsigned char c;
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
 8058e88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058e8c:	89 3c 24             	mov    %edi,(%esp)
 8058e8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058e93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058e97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058e9b:	b9 b8 01 00 00       	mov    $0x1b8,%ecx
 8058ea0:	e8 33 5b 00 00       	call   805e9d8 <__afl_maybe_log>
 8058ea5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058ea9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058ead:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058eb1:	8b 3c 24             	mov    (%esp),%edi
 8058eb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058eb8:	8b 44 24 18          	mov    0x18(%esp),%eax
 8058ebc:	85 c0                	test   %eax,%eax
    {
      unsigned char c;
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
 8058ebe:	0f 95 44 24 20       	setne  0x20(%esp)
 8058ec3:	0f 84 27 2a 00 00    	je     805b8f0 <quotearg_buffer_restyled+0x2bf0>
 8058ec9:	8d 76 00             	lea    0x0(%esi),%esi
 8058ecc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058ed0:	89 3c 24             	mov    %edi,(%esp)
 8058ed3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058ed7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058edb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058edf:	b9 8c 06 00 00       	mov    $0x68c,%ecx
 8058ee4:	e8 ef 5a 00 00       	call   805e9d8 <__afl_maybe_log>
 8058ee9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058eed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058ef1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058ef5:	8b 3c 24             	mov    (%esp),%edi
 8058ef8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058efc:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 8058f01:	0f 84 e9 29 00 00    	je     805b8f0 <quotearg_buffer_restyled+0x2bf0>
 8058f07:	90                   	nop
 8058f08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058f0c:	89 3c 24             	mov    %edi,(%esp)
 8058f0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058f13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058f17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058f1b:	b9 0f e2 00 00       	mov    $0xe20f,%ecx
 8058f20:	e8 b3 5a 00 00       	call   805e9d8 <__afl_maybe_log>
 8058f25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058f29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058f2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058f31:	8b 3c 24             	mov    (%esp),%edi
 8058f34:	8d 64 24 10          	lea    0x10(%esp),%esp
          && quote_string_len
          && (i + quote_string_len
 8058f38:	8b 4c 24 18          	mov    0x18(%esp),%ecx
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
 8058f3c:	83 ff ff             	cmp    $0xffffffff,%edi
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
          && (i + quote_string_len
 8058f3f:	8d 1c 0e             	lea    (%esi,%ecx,1),%ebx
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
 8058f42:	75 79                	jne    8058fbd <quotearg_buffer_restyled+0x2bd>
 8058f44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058f48:	89 3c 24             	mov    %edi,(%esp)
 8058f4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058f4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058f53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058f57:	b9 d4 55 00 00       	mov    $0x55d4,%ecx
 8058f5c:	e8 77 5a 00 00       	call   805e9d8 <__afl_maybe_log>
 8058f61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058f65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058f69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058f6d:	8b 3c 24             	mov    (%esp),%edi
 8058f70:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058f74:	83 f9 01             	cmp    $0x1,%ecx
 8058f77:	76 44                	jbe    8058fbd <quotearg_buffer_restyled+0x2bd>
 8058f79:	8d 76 00             	lea    0x0(%esi),%esi
 8058f7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058f80:	89 3c 24             	mov    %edi,(%esp)
 8058f83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058f87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058f8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058f8f:	b9 3b e0 00 00       	mov    $0xe03b,%ecx
 8058f94:	e8 3f 5a 00 00       	call   805e9d8 <__afl_maybe_log>
 8058f99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058f9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058fa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058fa5:	8b 3c 24             	mov    (%esp),%edi
 8058fa8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058fac:	83 ec 0c             	sub    $0xc,%esp
 8058faf:	ff 74 24 20          	pushl  0x20(%esp)
 8058fb3:	e8 e8 03 ff ff       	call   80493a0 <strlen@plt>
 8058fb8:	83 c4 10             	add    $0x10,%esp
 8058fbb:	89 c7                	mov    %eax,%edi
 8058fbd:	8d 76 00             	lea    0x0(%esi),%esi
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
 8058fc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058fc4:	89 3c 24             	mov    %edi,(%esp)
 8058fc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058fcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058fcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058fd3:	b9 26 87 00 00       	mov    $0x8726,%ecx
 8058fd8:	e8 fb 59 00 00       	call   805e9d8 <__afl_maybe_log>
 8058fdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058fe1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058fe5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058fe9:	8b 3c 24             	mov    (%esp),%edi
 8058fec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058ff0:	8b 54 24 14          	mov    0x14(%esp),%edx
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
          && (i + quote_string_len
 8058ff4:	39 df                	cmp    %ebx,%edi
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
 8058ff6:	8d 1c 32             	lea    (%edx,%esi,1),%ebx
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
          && (i + quote_string_len
 8058ff9:	0f 82 09 29 00 00    	jb     805b908 <quotearg_buffer_restyled+0x2c08>
 8058fff:	90                   	nop
 8059000:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059004:	89 3c 24             	mov    %edi,(%esp)
 8059007:	89 54 24 04          	mov    %edx,0x4(%esp)
 805900b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805900f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059013:	b9 a9 b1 00 00       	mov    $0xb1a9,%ecx
 8059018:	e8 bb 59 00 00       	call   805e9d8 <__afl_maybe_log>
 805901d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059021:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059025:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059029:	8b 3c 24             	mov    (%esp),%edi
 805902c:	8d 64 24 10          	lea    0x10(%esp),%esp
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
 8059030:	83 ec 04             	sub    $0x4,%esp
 8059033:	ff 74 24 1c          	pushl  0x1c(%esp)
 8059037:	ff 74 24 30          	pushl  0x30(%esp)
 805903b:	53                   	push   %ebx
 805903c:	e8 af 01 ff ff       	call   80491f0 <memcmp@plt>
 8059041:	83 c4 10             	add    $0x10,%esp
 8059044:	85 c0                	test   %eax,%eax
 8059046:	0f 85 bc 28 00 00    	jne    805b908 <quotearg_buffer_restyled+0x2c08>
 805904c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059050:	89 3c 24             	mov    %edi,(%esp)
 8059053:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059057:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805905b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805905f:	b9 d5 51 00 00       	mov    $0x51d5,%ecx
 8059064:	e8 6f 59 00 00       	call   805e9d8 <__afl_maybe_log>
 8059069:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805906d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059071:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059075:	8b 3c 24             	mov    (%esp),%edi
 8059078:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          if (elide_outer_quotes)
 805907c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8059081:	0f 85 a9 0c 00 00    	jne    8059d30 <quotearg_buffer_restyled+0x1030>
 8059087:	90                   	nop
 8059088:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805908c:	89 3c 24             	mov    %edi,(%esp)
 805908f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059093:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059097:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805909b:	b9 73 8f 00 00       	mov    $0x8f73,%ecx
 80590a0:	e8 33 59 00 00       	call   805e9d8 <__afl_maybe_log>
 80590a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80590a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80590ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80590b1:	8b 3c 24             	mov    (%esp),%edi
 80590b4:	8d 64 24 10          	lea    0x10(%esp),%esp
            goto force_outer_quoting_style;
          is_right_quote = true;
 80590b8:	c6 44 24 38 01       	movb   $0x1,0x38(%esp)
 80590bd:	8d 76 00             	lea    0x0(%esi),%esi
        }

      c = arg[i];
 80590c0:	0f b6 13             	movzbl (%ebx),%edx
      switch (c)
 80590c3:	80 fa 7e             	cmp    $0x7e,%dl
 80590c6:	0f 87 64 13 00 00    	ja     805a430 <quotearg_buffer_restyled+0x1730>
 80590cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80590d0:	89 3c 24             	mov    %edi,(%esp)
 80590d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80590d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80590db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80590df:	b9 9c 4b 00 00       	mov    $0x4b9c,%ecx
 80590e4:	e8 ef 58 00 00       	call   805e9d8 <__afl_maybe_log>
 80590e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80590ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80590f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80590f5:	8b 3c 24             	mov    (%esp),%edi
 80590f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80590fc:	0f b6 ca             	movzbl %dl,%ecx
 80590ff:	ff 24 8d a4 67 06 08 	jmp    *0x80667a4(,%ecx,4)
 8059106:	8d 76 00             	lea    0x0(%esi),%esi
 8059109:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
          else if (flags & QA_ELIDE_NULL_BYTES)
            continue;
          break;

        case '?':
          switch (quoting_style)
 8059110:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 8059115:	0f 84 a1 0b 00 00    	je     8059cbc <quotearg_buffer_restyled+0xfbc>
 805911b:	90                   	nop
 805911c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059120:	89 3c 24             	mov    %edi,(%esp)
 8059123:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059127:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805912b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805912f:	b9 eb 5f 00 00       	mov    $0x5feb,%ecx
 8059134:	e8 9f 58 00 00       	call   805e9d8 <__afl_maybe_log>
 8059139:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805913d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059141:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059145:	8b 3c 24             	mov    (%esp),%edi
 8059148:	8d 64 24 10          	lea    0x10(%esp),%esp
 805914c:	83 7c 24 74 03       	cmpl   $0x3,0x74(%esp)
 8059151:	0f 85 99 03 00 00    	jne    80594f0 <quotearg_buffer_restyled+0x7f0>
 8059157:	90                   	nop
 8059158:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805915c:	89 3c 24             	mov    %edi,(%esp)
 805915f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059163:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059167:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805916b:	b9 82 24 00 00       	mov    $0x2482,%ecx
 8059170:	e8 63 58 00 00       	call   805e9d8 <__afl_maybe_log>
 8059175:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059179:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805917d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059181:	8b 3c 24             	mov    (%esp),%edi
 8059184:	8d 64 24 10          	lea    0x10(%esp),%esp
              if (elide_outer_quotes)
                goto force_outer_quoting_style;
              break;

            case c_quoting_style:
              if ((flags & QA_SPLIT_TRIGRAPHS)
 8059188:	f6 44 24 78 04       	testb  $0x4,0x78(%esp)
 805918d:	0f 84 5d 03 00 00    	je     80594f0 <quotearg_buffer_restyled+0x7f0>
 8059193:	90                   	nop
 8059194:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059198:	89 3c 24             	mov    %edi,(%esp)
 805919b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805919f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80591a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80591a7:	b9 4a c7 00 00       	mov    $0xc74a,%ecx
 80591ac:	e8 27 58 00 00       	call   805e9d8 <__afl_maybe_log>
 80591b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80591b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80591b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80591bd:	8b 3c 24             	mov    (%esp),%edi
 80591c0:	8d 64 24 10          	lea    0x10(%esp),%esp
                  && i + 2 < argsize && arg[i + 1] == '?')
 80591c4:	8d 5e 02             	lea    0x2(%esi),%ebx
 80591c7:	39 df                	cmp    %ebx,%edi
 80591c9:	0f 86 21 03 00 00    	jbe    80594f0 <quotearg_buffer_restyled+0x7f0>
 80591cf:	90                   	nop
 80591d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80591d4:	89 3c 24             	mov    %edi,(%esp)
 80591d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80591db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80591df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80591e3:	b9 a0 e2 00 00       	mov    $0xe2a0,%ecx
 80591e8:	e8 eb 57 00 00       	call   805e9d8 <__afl_maybe_log>
 80591ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80591f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80591f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80591f9:	8b 3c 24             	mov    (%esp),%edi
 80591fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059200:	8b 44 24 14          	mov    0x14(%esp),%eax
 8059204:	80 7c 30 01 3f       	cmpb   $0x3f,0x1(%eax,%esi,1)
 8059209:	0f 85 e1 02 00 00    	jne    80594f0 <quotearg_buffer_restyled+0x7f0>
 805920f:	90                   	nop
 8059210:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059214:	89 3c 24             	mov    %edi,(%esp)
 8059217:	89 54 24 04          	mov    %edx,0x4(%esp)
 805921b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805921f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059223:	b9 c4 cd 00 00       	mov    $0xcdc4,%ecx
 8059228:	e8 ab 57 00 00       	call   805e9d8 <__afl_maybe_log>
 805922d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059231:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059235:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059239:	8b 3c 24             	mov    (%esp),%edi
 805923c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059240:	0f b6 0c 18          	movzbl (%eax,%ebx,1),%ecx
 8059244:	88 4c 24 20          	mov    %cl,0x20(%esp)
 8059248:	8d 49 df             	lea    -0x21(%ecx),%ecx
 805924b:	80 f9 1d             	cmp    $0x1d,%cl
 805924e:	0f 87 9c 02 00 00    	ja     80594f0 <quotearg_buffer_restyled+0x7f0>
 8059254:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059258:	89 3c 24             	mov    %edi,(%esp)
 805925b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805925f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059263:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059267:	b9 e8 2e 00 00       	mov    $0x2ee8,%ecx
 805926c:	e8 67 57 00 00       	call   805e9d8 <__afl_maybe_log>
 8059271:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059275:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059279:	8b 54 24 04          	mov    0x4(%esp),%edx
 805927d:	8b 3c 24             	mov    (%esp),%edi
 8059280:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059284:	b8 01 00 00 00       	mov    $0x1,%eax
 8059289:	d3 e0                	shl    %cl,%eax
 805928b:	a9 c1 51 00 38       	test   $0x380051c1,%eax
 8059290:	0f 84 5a 02 00 00    	je     80594f0 <quotearg_buffer_restyled+0x7f0>
 8059296:	66 90                	xchg   %ax,%ax
 8059298:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805929c:	89 3c 24             	mov    %edi,(%esp)
 805929f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80592a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80592a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80592ab:	b9 50 7b 00 00       	mov    $0x7b50,%ecx
 80592b0:	e8 23 57 00 00       	call   805e9d8 <__afl_maybe_log>
 80592b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80592b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80592bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80592c1:	8b 3c 24             	mov    (%esp),%edi
 80592c4:	8d 64 24 10          	lea    0x10(%esp),%esp
                  case '!': case '\'':
                  case '(': case ')': case '-': case '/':
                  case '<': case '=': case '>':
                    /* Escape the second '?' in what would otherwise be
                       a trigraph.  */
                    if (elide_outer_quotes)
 80592c8:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 80592cd:	0f 85 5d 0a 00 00    	jne    8059d30 <quotearg_buffer_restyled+0x1030>
 80592d3:	90                   	nop
 80592d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80592d8:	89 3c 24             	mov    %edi,(%esp)
 80592db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80592df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80592e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80592e7:	b9 ca 4f 00 00       	mov    $0x4fca,%ecx
 80592ec:	e8 e7 56 00 00       	call   805e9d8 <__afl_maybe_log>
 80592f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80592f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80592f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80592fd:	8b 3c 24             	mov    (%esp),%edi
 8059300:	8d 64 24 10          	lea    0x10(%esp),%esp
                      goto force_outer_quoting_style;
                    c = arg[i + 2];
                    i += 2;
                    STORE ('?');
 8059304:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8059308:	73 3a                	jae    8059344 <quotearg_buffer_restyled+0x644>
 805930a:	66 90                	xchg   %ax,%ax
 805930c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059310:	89 3c 24             	mov    %edi,(%esp)
 8059313:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059317:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805931b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805931f:	b9 53 3a 00 00       	mov    $0x3a53,%ecx
 8059324:	e8 af 56 00 00       	call   805e9d8 <__afl_maybe_log>
 8059329:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805932d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059331:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059335:	8b 3c 24             	mov    (%esp),%edi
 8059338:	8d 64 24 10          	lea    0x10(%esp),%esp
 805933c:	8b 74 24 1c          	mov    0x1c(%esp),%esi
 8059340:	c6 04 2e 3f          	movb   $0x3f,(%esi,%ebp,1)
 8059344:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059348:	89 3c 24             	mov    %edi,(%esp)
 805934b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805934f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059353:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059357:	b9 46 82 00 00       	mov    $0x8246,%ecx
 805935c:	e8 77 56 00 00       	call   805e9d8 <__afl_maybe_log>
 8059361:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059365:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059369:	8b 54 24 04          	mov    0x4(%esp),%edx
 805936d:	8b 3c 24             	mov    (%esp),%edi
 8059370:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059374:	8d 55 01             	lea    0x1(%ebp),%edx
                    STORE ('"');
 8059377:	39 54 24 10          	cmp    %edx,0x10(%esp)
 805937b:	76 3c                	jbe    80593b9 <quotearg_buffer_restyled+0x6b9>
 805937d:	8d 76 00             	lea    0x0(%esi),%esi
 8059380:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059384:	89 3c 24             	mov    %edi,(%esp)
 8059387:	89 54 24 04          	mov    %edx,0x4(%esp)
 805938b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805938f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059393:	b9 96 5e 00 00       	mov    $0x5e96,%ecx
 8059398:	e8 3b 56 00 00       	call   805e9d8 <__afl_maybe_log>
 805939d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80593a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80593a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80593a9:	8b 3c 24             	mov    (%esp),%edi
 80593ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80593b0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 80593b4:	c6 44 29 01 22       	movb   $0x22,0x1(%ecx,%ebp,1)
 80593b9:	8d 76 00             	lea    0x0(%esi),%esi
 80593bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80593c0:	89 3c 24             	mov    %edi,(%esp)
 80593c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80593c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80593cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80593cf:	b9 7d f0 00 00       	mov    $0xf07d,%ecx
 80593d4:	e8 ff 55 00 00       	call   805e9d8 <__afl_maybe_log>
 80593d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80593dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80593e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80593e5:	8b 3c 24             	mov    (%esp),%edi
 80593e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80593ec:	8d 45 02             	lea    0x2(%ebp),%eax
                    STORE ('"');
 80593ef:	39 44 24 10          	cmp    %eax,0x10(%esp)
 80593f3:	76 3c                	jbe    8059431 <quotearg_buffer_restyled+0x731>
 80593f5:	8d 76 00             	lea    0x0(%esi),%esi
 80593f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80593fc:	89 3c 24             	mov    %edi,(%esp)
 80593ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059403:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059407:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805940b:	b9 68 d1 00 00       	mov    $0xd168,%ecx
 8059410:	e8 c3 55 00 00       	call   805e9d8 <__afl_maybe_log>
 8059415:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059419:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805941d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059421:	8b 3c 24             	mov    (%esp),%edi
 8059424:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059428:	8b 74 24 1c          	mov    0x1c(%esp),%esi
 805942c:	c6 44 2e 02 22       	movb   $0x22,0x2(%esi,%ebp,1)
 8059431:	8d 76 00             	lea    0x0(%esi),%esi
 8059434:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059438:	89 3c 24             	mov    %edi,(%esp)
 805943b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805943f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059443:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059447:	b9 13 ae 00 00       	mov    $0xae13,%ecx
 805944c:	e8 87 55 00 00       	call   805e9d8 <__afl_maybe_log>
 8059451:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059455:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059459:	8b 54 24 04          	mov    0x4(%esp),%edx
 805945d:	8b 3c 24             	mov    (%esp),%edi
 8059460:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059464:	8d 55 03             	lea    0x3(%ebp),%edx
                    STORE ('?');
 8059467:	39 54 24 10          	cmp    %edx,0x10(%esp)
 805946b:	76 3c                	jbe    80594a9 <quotearg_buffer_restyled+0x7a9>
 805946d:	8d 76 00             	lea    0x0(%esi),%esi
 8059470:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059474:	89 3c 24             	mov    %edi,(%esp)
 8059477:	89 54 24 04          	mov    %edx,0x4(%esp)
 805947b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805947f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059483:	b9 8d cb 00 00       	mov    $0xcb8d,%ecx
 8059488:	e8 4b 55 00 00       	call   805e9d8 <__afl_maybe_log>
 805948d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059491:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059495:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059499:	8b 3c 24             	mov    (%esp),%edi
 805949c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80594a0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 80594a4:	c6 44 29 03 3f       	movb   $0x3f,0x3(%ecx,%ebp,1)
 80594a9:	8d 76 00             	lea    0x0(%esi),%esi
                    break;
 80594ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80594b0:	89 3c 24             	mov    %edi,(%esp)
 80594b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80594b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80594bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80594bf:	b9 3a c3 00 00       	mov    $0xc33a,%ecx
 80594c4:	e8 0f 55 00 00       	call   805e9d8 <__afl_maybe_log>
 80594c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80594cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80594d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80594d5:	8b 3c 24             	mov    (%esp),%edi
 80594d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80594dc:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
                    c = arg[i + 2];
                    i += 2;
                    STORE ('?');
                    STORE ('"');
                    STORE ('"');
                    STORE ('?');
 80594e1:	83 c5 04             	add    $0x4,%ebp
                    break;
 80594e4:	89 de                	mov    %ebx,%esi
 80594e6:	8d 76 00             	lea    0x0(%esi),%esi
 80594e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 80594f0:	0f b6 44 24 3a       	movzbl 0x3a(%esp),%eax
 80594f5:	38 44 24 0f          	cmp    %al,0xf(%esp)
 80594f9:	0f 82 e1 00 00 00    	jb     80595e0 <quotearg_buffer_restyled+0x8e0>
 80594ff:	90                   	nop
 8059500:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059504:	89 3c 24             	mov    %edi,(%esp)
 8059507:	89 54 24 04          	mov    %edx,0x4(%esp)
 805950b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805950f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059513:	b9 bc e7 00 00       	mov    $0xe7bc,%ecx
 8059518:	e8 bb 54 00 00       	call   805e9d8 <__afl_maybe_log>
 805951d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059521:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059525:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059529:	8b 3c 24             	mov    (%esp),%edi
 805952c:	8d 64 24 10          	lea    0x10(%esp),%esp
             && quote_these_too
 8059530:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059534:	89 3c 24             	mov    %edi,(%esp)
 8059537:	89 54 24 04          	mov    %edx,0x4(%esp)
 805953b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805953f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059543:	b9 6d 88 00 00       	mov    $0x886d,%ecx
 8059548:	e8 8b 54 00 00       	call   805e9d8 <__afl_maybe_log>
 805954d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059551:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059555:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059559:	8b 3c 24             	mov    (%esp),%edi
 805955c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059560:	8b 4c 24 7c          	mov    0x7c(%esp),%ecx
 8059564:	85 c9                	test   %ecx,%ecx
 8059566:	74 78                	je     80595e0 <quotearg_buffer_restyled+0x8e0>
 8059568:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805956c:	89 3c 24             	mov    %edi,(%esp)
 805956f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059573:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059577:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805957b:	b9 08 e2 00 00       	mov    $0xe208,%ecx
 8059580:	e8 53 54 00 00       	call   805e9d8 <__afl_maybe_log>
 8059585:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059589:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805958d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059591:	8b 3c 24             	mov    (%esp),%edi
 8059594:	8d 64 24 10          	lea    0x10(%esp),%esp
             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)
 8059598:	89 d3                	mov    %edx,%ebx
 805959a:	8b 4c 24 7c          	mov    0x7c(%esp),%ecx
 805959e:	c0 eb 05             	shr    $0x5,%bl
 80595a1:	0f b6 c3             	movzbl %bl,%eax
 80595a4:	8b 1c 81             	mov    (%ecx,%eax,4),%ebx
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 80595a7:	0f a3 d3             	bt     %edx,%ebx
 80595aa:	0f 82 9c 00 00 00    	jb     805964c <quotearg_buffer_restyled+0x94c>
 80595b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80595b4:	89 3c 24             	mov    %edi,(%esp)
 80595b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80595bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80595bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80595c3:	b9 67 e2 00 00       	mov    $0xe267,%ecx
 80595c8:	e8 0b 54 00 00       	call   805e9d8 <__afl_maybe_log>
 80595cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80595d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80595d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80595d9:	8b 3c 24             	mov    (%esp),%edi
 80595dc:	8d 64 24 10          	lea    0x10(%esp),%esp
             && quote_these_too
             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)
          && !is_right_quote)
 80595e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80595e4:	89 3c 24             	mov    %edi,(%esp)
 80595e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80595eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80595ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80595f3:	b9 c2 60 00 00       	mov    $0x60c2,%ecx
 80595f8:	e8 db 53 00 00       	call   805e9d8 <__afl_maybe_log>
 80595fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059601:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059605:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059609:	8b 3c 24             	mov    (%esp),%edi
 805960c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059610:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 8059615:	0f 84 10 01 00 00    	je     805972b <quotearg_buffer_restyled+0xa2b>
 805961b:	90                   	nop
 805961c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059620:	89 3c 24             	mov    %edi,(%esp)
 8059623:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059627:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805962b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805962f:	b9 b1 41 00 00       	mov    $0x41b1,%ecx
 8059634:	e8 9f 53 00 00       	call   805e9d8 <__afl_maybe_log>
 8059639:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805963d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059641:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059645:	8b 3c 24             	mov    (%esp),%edi
 8059648:	8d 64 24 10          	lea    0x10(%esp),%esp
        goto store_c;

    store_escape:
      if (elide_outer_quotes)
 805964c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059650:	89 3c 24             	mov    %edi,(%esp)
 8059653:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059657:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805965b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805965f:	b9 82 06 00 00       	mov    $0x682,%ecx
 8059664:	e8 6f 53 00 00       	call   805e9d8 <__afl_maybe_log>
 8059669:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805966d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059671:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059675:	8b 3c 24             	mov    (%esp),%edi
 8059678:	8d 64 24 10          	lea    0x10(%esp),%esp
 805967c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8059681:	0f 85 a9 06 00 00    	jne    8059d30 <quotearg_buffer_restyled+0x1030>
 8059687:	90                   	nop
 8059688:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805968c:	89 3c 24             	mov    %edi,(%esp)
 805968f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059693:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059697:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805969b:	b9 0d ac 00 00       	mov    $0xac0d,%ecx
 80596a0:	e8 33 53 00 00       	call   805e9d8 <__afl_maybe_log>
 80596a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80596a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80596ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80596b1:	8b 3c 24             	mov    (%esp),%edi
 80596b4:	8d 64 24 10          	lea    0x10(%esp),%esp
        goto force_outer_quoting_style;
      STORE ('\\');
 80596b8:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 80596bc:	73 3a                	jae    80596f8 <quotearg_buffer_restyled+0x9f8>
 80596be:	66 90                	xchg   %ax,%ax
 80596c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80596c4:	89 3c 24             	mov    %edi,(%esp)
 80596c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80596cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80596cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80596d3:	b9 1b 95 00 00       	mov    $0x951b,%ecx
 80596d8:	e8 fb 52 00 00       	call   805e9d8 <__afl_maybe_log>
 80596dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80596e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80596e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80596e9:	8b 3c 24             	mov    (%esp),%edi
 80596ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80596f0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80596f4:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 80596f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80596fc:	89 3c 24             	mov    %edi,(%esp)
 80596ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059703:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059707:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805970b:	b9 1e 95 00 00       	mov    $0x951e,%ecx
 8059710:	e8 c3 52 00 00       	call   805e9d8 <__afl_maybe_log>
 8059715:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059719:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805971d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059721:	8b 3c 24             	mov    (%esp),%edi
 8059724:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059728:	83 c5 01             	add    $0x1,%ebp
 805972b:	90                   	nop
 805972c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059730:	89 3c 24             	mov    %edi,(%esp)
 8059733:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059737:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805973b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805973f:	b9 04 5e 00 00       	mov    $0x5e04,%ecx
 8059744:	e8 8f 52 00 00       	call   805e9d8 <__afl_maybe_log>
 8059749:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805974d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059751:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059755:	8b 3c 24             	mov    (%esp),%edi
 8059758:	8d 64 24 10          	lea    0x10(%esp),%esp
 805975c:	83 c6 01             	add    $0x1,%esi
 805975f:	90                   	nop

    store_c:
      STORE (c);
 8059760:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059764:	89 3c 24             	mov    %edi,(%esp)
 8059767:	89 54 24 04          	mov    %edx,0x4(%esp)
 805976b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805976f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059773:	b9 73 9a 00 00       	mov    $0x9a73,%ecx
 8059778:	e8 5b 52 00 00       	call   805e9d8 <__afl_maybe_log>
 805977d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059781:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059785:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059789:	8b 3c 24             	mov    (%esp),%edi
 805978c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059790:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8059794:	73 39                	jae    80597cf <quotearg_buffer_restyled+0xacf>
 8059796:	66 90                	xchg   %ax,%ax
 8059798:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805979c:	89 3c 24             	mov    %edi,(%esp)
 805979f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80597a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80597a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80597ab:	b9 9d f3 00 00       	mov    $0xf39d,%ecx
 80597b0:	e8 23 52 00 00       	call   805e9d8 <__afl_maybe_log>
 80597b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80597b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80597bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80597c1:	8b 3c 24             	mov    (%esp),%edi
 80597c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80597c8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80597cc:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 80597cf:	90                   	nop
 80597d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80597d4:	89 3c 24             	mov    %edi,(%esp)
 80597d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80597db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80597df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80597e3:	b9 81 a9 00 00       	mov    $0xa981,%ecx
 80597e8:	e8 eb 51 00 00       	call   805e9d8 <__afl_maybe_log>
 80597ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80597f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80597f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80597f9:	8b 3c 24             	mov    (%esp),%edi
 80597fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059800:	83 c5 01             	add    $0x1,%ebp

    default:
      abort ();
    }

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
 8059803:	39 fe                	cmp    %edi,%esi
 8059805:	0f 95 c1             	setne  %cl
 8059808:	83 ff ff             	cmp    $0xffffffff,%edi
 805980b:	0f 85 3f f6 ff ff    	jne    8058e50 <quotearg_buffer_restyled+0x150>
 8059811:	8d 76 00             	lea    0x0(%esi),%esi
 8059814:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059818:	89 3c 24             	mov    %edi,(%esp)
 805981b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805981f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059823:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059827:	b9 ac 9a 00 00       	mov    $0x9aac,%ecx
 805982c:	e8 a7 51 00 00       	call   805e9d8 <__afl_maybe_log>
 8059831:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059835:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059839:	8b 54 24 04          	mov    0x4(%esp),%edx
 805983d:	8b 3c 24             	mov    (%esp),%edi
 8059840:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059844:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059848:	89 3c 24             	mov    %edi,(%esp)
 805984b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805984f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059853:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059857:	b9 3a fa 00 00       	mov    $0xfa3a,%ecx
 805985c:	e8 77 51 00 00       	call   805e9d8 <__afl_maybe_log>
 8059861:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059865:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059869:	8b 54 24 04          	mov    0x4(%esp),%edx
 805986d:	8b 3c 24             	mov    (%esp),%edi
 8059870:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059874:	8b 54 24 14          	mov    0x14(%esp),%edx
 8059878:	80 3c 32 00          	cmpb   $0x0,(%edx,%esi,1)
 805987c:	0f 95 c1             	setne  %cl
 805987f:	84 c9                	test   %cl,%cl
 8059881:	0f 85 01 f6 ff ff    	jne    8058e88 <quotearg_buffer_restyled+0x188>
 8059887:	90                   	nop
 8059888:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805988c:	89 3c 24             	mov    %edi,(%esp)
 805988f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059893:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059897:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805989b:	b9 61 d4 00 00       	mov    $0xd461,%ecx
 80598a0:	e8 33 51 00 00       	call   805e9d8 <__afl_maybe_log>
 80598a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80598a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80598ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80598b1:	8b 3c 24             	mov    (%esp),%edi
 80598b4:	8d 64 24 10          	lea    0x10(%esp),%esp

    store_c:
      STORE (c);
    }

  if (len == 0 && quoting_style == shell_always_quoting_style
 80598b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80598bc:	89 3c 24             	mov    %edi,(%esp)
 80598bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80598c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80598c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80598cb:	b9 0b 97 00 00       	mov    $0x970b,%ecx
 80598d0:	e8 03 51 00 00       	call   805e9d8 <__afl_maybe_log>
 80598d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80598d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80598dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80598e1:	8b 3c 24             	mov    (%esp),%edi
 80598e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80598e8:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 80598ed:	89 e8                	mov    %ebp,%eax
 80598ef:	0f 94 c3             	sete   %bl
      && elide_outer_quotes)
 80598f2:	84 5c 24 39          	test   %bl,0x39(%esp)
 80598f6:	74 68                	je     8059960 <quotearg_buffer_restyled+0xc60>
 80598f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80598fc:	89 3c 24             	mov    %edi,(%esp)
 80598ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059903:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059907:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805990b:	b9 81 b4 00 00       	mov    $0xb481,%ecx
 8059910:	e8 c3 50 00 00       	call   805e9d8 <__afl_maybe_log>
 8059915:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059919:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805991d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059921:	8b 3c 24             	mov    (%esp),%edi
 8059924:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059928:	85 ed                	test   %ebp,%ebp
 805992a:	0f 84 00 04 00 00    	je     8059d30 <quotearg_buffer_restyled+0x1030>
 8059930:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059934:	89 3c 24             	mov    %edi,(%esp)
 8059937:	89 54 24 04          	mov    %edx,0x4(%esp)
 805993b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805993f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059943:	b9 cb 7c 00 00       	mov    $0x7ccb,%ecx
 8059948:	e8 8b 50 00 00       	call   805e9d8 <__afl_maybe_log>
 805994d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059951:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059955:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059959:	8b 3c 24             	mov    (%esp),%edi
 805995c:	8d 64 24 10          	lea    0x10(%esp),%esp
    goto force_outer_quoting_style;

  if (quote_string && !elide_outer_quotes)
 8059960:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059964:	89 3c 24             	mov    %edi,(%esp)
 8059967:	89 54 24 04          	mov    %edx,0x4(%esp)
 805996b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805996f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059973:	b9 2b 30 00 00       	mov    $0x302b,%ecx
 8059978:	e8 5b 50 00 00       	call   805e9d8 <__afl_maybe_log>
 805997d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059981:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059985:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059989:	8b 3c 24             	mov    (%esp),%edi
 805998c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059990:	8b 7c 24 28          	mov    0x28(%esp),%edi
 8059994:	85 ff                	test   %edi,%edi
 8059996:	0f 95 c2             	setne  %dl
 8059999:	38 54 24 39          	cmp    %dl,0x39(%esp)
 805999d:	0f 83 21 01 00 00    	jae    8059ac4 <quotearg_buffer_restyled+0xdc4>
 80599a3:	90                   	nop
 80599a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80599a8:	89 3c 24             	mov    %edi,(%esp)
 80599ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80599af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80599b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80599b7:	b9 fd 86 00 00       	mov    $0x86fd,%ecx
 80599bc:	e8 17 50 00 00       	call   805e9d8 <__afl_maybe_log>
 80599c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80599c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80599c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80599cd:	8b 3c 24             	mov    (%esp),%edi
 80599d0:	8d 64 24 10          	lea    0x10(%esp),%esp
    for (; *quote_string; quote_string++)
 80599d4:	8b 74 24 28          	mov    0x28(%esp),%esi
 80599d8:	0f b6 16             	movzbl (%esi),%edx
 80599db:	84 d2                	test   %dl,%dl
 80599dd:	0f 84 e1 00 00 00    	je     8059ac4 <quotearg_buffer_restyled+0xdc4>
 80599e3:	90                   	nop
 80599e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80599e8:	89 3c 24             	mov    %edi,(%esp)
 80599eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80599ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80599f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80599f7:	b9 51 d1 00 00       	mov    $0xd151,%ecx
 80599fc:	e8 d7 4f 00 00       	call   805e9d8 <__afl_maybe_log>
 8059a01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059a05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059a09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059a0d:	8b 3c 24             	mov    (%esp),%edi
 8059a10:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059a14:	89 f1                	mov    %esi,%ecx
 8059a16:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8059a1a:	29 e9                	sub    %ebp,%ecx
 8059a1c:	8b 6c 24 1c          	mov    0x1c(%esp),%ebp
      STORE (*quote_string);
 8059a20:	39 c3                	cmp    %eax,%ebx
 8059a22:	76 34                	jbe    8059a58 <quotearg_buffer_restyled+0xd58>
 8059a24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059a28:	89 3c 24             	mov    %edi,(%esp)
 8059a2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059a2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059a33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059a37:	b9 6c 66 00 00       	mov    $0x666c,%ecx
 8059a3c:	e8 97 4f 00 00       	call   805e9d8 <__afl_maybe_log>
 8059a41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059a45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059a49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059a4d:	8b 3c 24             	mov    (%esp),%edi
 8059a50:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059a54:	88 54 05 00          	mov    %dl,0x0(%ebp,%eax,1)
 8059a58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059a5c:	89 3c 24             	mov    %edi,(%esp)
 8059a5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059a63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059a67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059a6b:	b9 54 02 00 00       	mov    $0x254,%ecx
 8059a70:	e8 63 4f 00 00       	call   805e9d8 <__afl_maybe_log>
 8059a75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059a79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059a7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059a81:	8b 3c 24             	mov    (%esp),%edi
 8059a84:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059a88:	83 c0 01             	add    $0x1,%eax
  if (len == 0 && quoting_style == shell_always_quoting_style
      && elide_outer_quotes)
    goto force_outer_quoting_style;

  if (quote_string && !elide_outer_quotes)
    for (; *quote_string; quote_string++)
 8059a8b:	0f b6 14 01          	movzbl (%ecx,%eax,1),%edx
 8059a8f:	84 d2                	test   %dl,%dl
 8059a91:	75 8d                	jne    8059a20 <quotearg_buffer_restyled+0xd20>
 8059a93:	90                   	nop
 8059a94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059a98:	89 3c 24             	mov    %edi,(%esp)
 8059a9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059a9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059aa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059aa7:	b9 94 fe 00 00       	mov    $0xfe94,%ecx
 8059aac:	e8 27 4f 00 00       	call   805e9d8 <__afl_maybe_log>
 8059ab1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ab5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ab9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059abd:	8b 3c 24             	mov    (%esp),%edi
 8059ac0:	8d 64 24 10          	lea    0x10(%esp),%esp
      STORE (*quote_string);

  if (len < buffersize)
 8059ac4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059ac8:	89 3c 24             	mov    %edi,(%esp)
 8059acb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059acf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059ad3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059ad7:	b9 e9 c9 00 00       	mov    $0xc9e9,%ecx
 8059adc:	e8 f7 4e 00 00       	call   805e9d8 <__afl_maybe_log>
 8059ae1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ae5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ae9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059aed:	8b 3c 24             	mov    (%esp),%edi
 8059af0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059af4:	3b 44 24 10          	cmp    0x10(%esp),%eax
 8059af8:	0f 83 6c 02 00 00    	jae    8059d6a <quotearg_buffer_restyled+0x106a>
 8059afe:	66 90                	xchg   %ax,%ax
 8059b00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059b04:	89 3c 24             	mov    %edi,(%esp)
 8059b07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059b0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059b0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059b13:	b9 7b 3b 00 00       	mov    $0x3b7b,%ecx
 8059b18:	e8 bb 4e 00 00       	call   805e9d8 <__afl_maybe_log>
 8059b1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059b21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059b25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059b29:	8b 3c 24             	mov    (%esp),%edi
 8059b2c:	8d 64 24 10          	lea    0x10(%esp),%esp
    buffer[len] = '\0';
 8059b30:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
 8059b34:	c6 04 07 00          	movb   $0x0,(%edi,%eax,1)
     sufficiently quotes the specified characters.  */
  return quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                   quoting_style,
                                   flags & ~QA_ELIDE_OUTER_QUOTES, NULL,
                                   left_quote, right_quote);
}
 8059b38:	83 c4 5c             	add    $0x5c,%esp
 8059b3b:	5b                   	pop    %ebx
 8059b3c:	5e                   	pop    %esi
 8059b3d:	5f                   	pop    %edi
 8059b3e:	5d                   	pop    %ebp
 8059b3f:	c3                   	ret    
              goto store_escape;
            }
          break;

        case '{': case '}': /* sometimes special if isolated */
          if (! (argsize == SIZE_MAX ? arg[1] == '\0' : argsize == 1))
 8059b40:	83 ff 01             	cmp    $0x1,%edi
 8059b43:	0f 95 c0             	setne  %al
 8059b46:	83 ff ff             	cmp    $0xffffffff,%edi
 8059b49:	0f 84 a1 26 00 00    	je     805c1f0 <quotearg_buffer_restyled+0x34f0>
 8059b4f:	90                   	nop
 8059b50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059b54:	89 3c 24             	mov    %edi,(%esp)
 8059b57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059b5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059b5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059b63:	b9 92 74 00 00       	mov    $0x7492,%ecx
 8059b68:	e8 6b 4e 00 00       	call   805e9d8 <__afl_maybe_log>
 8059b6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059b71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059b75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059b79:	8b 3c 24             	mov    (%esp),%edi
 8059b7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059b80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059b84:	89 3c 24             	mov    %edi,(%esp)
 8059b87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059b8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059b8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059b93:	b9 04 5b 00 00       	mov    $0x5b04,%ecx
 8059b98:	e8 3b 4e 00 00       	call   805e9d8 <__afl_maybe_log>
 8059b9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ba1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ba5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059ba9:	8b 3c 24             	mov    (%esp),%edi
 8059bac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059bb0:	84 c0                	test   %al,%al
 8059bb2:	0f 85 38 f9 ff ff    	jne    80594f0 <quotearg_buffer_restyled+0x7f0>
 8059bb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059bbc:	89 3c 24             	mov    %edi,(%esp)
 8059bbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059bc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059bc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059bcb:	b9 6f be 00 00       	mov    $0xbe6f,%ecx
 8059bd0:	e8 03 4e 00 00       	call   805e9d8 <__afl_maybe_log>
 8059bd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059bd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059bdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059be1:	8b 3c 24             	mov    (%esp),%edi
 8059be4:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
          /* Fall through.  */
        case '#': case '~':
          if (i != 0)
 8059be8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059bec:	89 3c 24             	mov    %edi,(%esp)
 8059bef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059bf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059bf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059bfb:	b9 73 f1 00 00       	mov    $0xf173,%ecx
 8059c00:	e8 d3 4d 00 00       	call   805e9d8 <__afl_maybe_log>
 8059c05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059c09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059c0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059c11:	8b 3c 24             	mov    (%esp),%edi
 8059c14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059c18:	85 f6                	test   %esi,%esi
 8059c1a:	0f 85 d0 f8 ff ff    	jne    80594f0 <quotearg_buffer_restyled+0x7f0>
 8059c20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059c24:	89 3c 24             	mov    %edi,(%esp)
 8059c27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059c2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059c2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059c33:	b9 cf e5 00 00       	mov    $0xe5cf,%ecx
 8059c38:	e8 9b 4d 00 00       	call   805e9d8 <__afl_maybe_log>
 8059c3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059c41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059c45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059c49:	8b 3c 24             	mov    (%esp),%edi
 8059c4c:	8d 64 24 10          	lea    0x10(%esp),%esp
        case '`': case '|':
          /* A shell special character.  In theory, '$' and '`' could
             be the first bytes of multibyte characters, which means
             we should check them with mbrtowc, but in practice this
             doesn't happen so it's not worth worrying about.  */
          if (quoting_style == shell_always_quoting_style
 8059c50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059c54:	89 3c 24             	mov    %edi,(%esp)
 8059c57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059c5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059c5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059c63:	b9 ee ce 00 00       	mov    $0xceee,%ecx
 8059c68:	e8 6b 4d 00 00       	call   805e9d8 <__afl_maybe_log>
 8059c6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059c71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059c75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059c79:	8b 3c 24             	mov    (%esp),%edi
 8059c7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059c80:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 8059c85:	0f 85 65 f8 ff ff    	jne    80594f0 <quotearg_buffer_restyled+0x7f0>
 8059c8b:	90                   	nop
 8059c8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059c90:	89 3c 24             	mov    %edi,(%esp)
 8059c93:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059c97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059c9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059c9f:	b9 38 bb 00 00       	mov    $0xbb38,%ecx
 8059ca4:	e8 2f 4d 00 00       	call   805e9d8 <__afl_maybe_log>
 8059ca9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059cad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059cb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059cb5:	8b 3c 24             	mov    (%esp),%edi
 8059cb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059cbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059cc0:	89 3c 24             	mov    %edi,(%esp)
 8059cc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059cc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059ccb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059ccf:	b9 16 21 00 00       	mov    $0x2116,%ecx
 8059cd4:	e8 ff 4c 00 00       	call   805e9d8 <__afl_maybe_log>
 8059cd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059cdd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ce1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059ce5:	8b 3c 24             	mov    (%esp),%edi
 8059ce8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059cec:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8059cf1:	0f 84 f9 f7 ff ff    	je     80594f0 <quotearg_buffer_restyled+0x7f0>
 8059cf7:	90                   	nop
 8059cf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059cfc:	89 3c 24             	mov    %edi,(%esp)
 8059cff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059d03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059d07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059d0b:	b9 c6 35 00 00       	mov    $0x35c6,%ecx
 8059d10:	e8 c3 4c 00 00       	call   805e9d8 <__afl_maybe_log>
 8059d15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059d19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059d1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059d21:	8b 3c 24             	mov    (%esp),%edi
 8059d24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059d28:	90                   	nop
 8059d29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  return len;

 force_outer_quoting_style:
  /* Don't reuse quote_these_too, since the addition of outer quotes
     sufficiently quotes the specified characters.  */
  return quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
 8059d30:	83 ec 08             	sub    $0x8,%esp
 8059d33:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
 8059d3a:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
 8059d41:	6a 00                	push   $0x0
 8059d43:	8b ac 24 8c 00 00 00 	mov    0x8c(%esp),%ebp
 8059d4a:	83 e5 fd             	and    $0xfffffffd,%ebp
 8059d4d:	55                   	push   %ebp
 8059d4e:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
 8059d55:	57                   	push   %edi
 8059d56:	8b 4c 24 34          	mov    0x34(%esp),%ecx
 8059d5a:	8b 54 24 30          	mov    0x30(%esp),%edx
 8059d5e:	8b 44 24 3c          	mov    0x3c(%esp),%eax
 8059d62:	e8 99 ef ff ff       	call   8058d00 <quotearg_buffer_restyled>
 8059d67:	83 c4 20             	add    $0x20,%esp
 8059d6a:	66 90                	xchg   %ax,%ax
                                   quoting_style,
                                   flags & ~QA_ELIDE_OUTER_QUOTES, NULL,
                                   left_quote, right_quote);
}
 8059d6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059d70:	89 3c 24             	mov    %edi,(%esp)
 8059d73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059d77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059d7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059d7f:	b9 fc a2 00 00       	mov    $0xa2fc,%ecx
 8059d84:	e8 4f 4c 00 00       	call   805e9d8 <__afl_maybe_log>
 8059d89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059d8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059d91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059d95:	8b 3c 24             	mov    (%esp),%edi
 8059d98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059d9c:	83 c4 5c             	add    $0x5c,%esp
 8059d9f:	5b                   	pop    %ebx
 8059da0:	5e                   	pop    %esi
 8059da1:	5f                   	pop    %edi
 8059da2:	5d                   	pop    %ebp
 8059da3:	c3                   	ret    
 8059da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
        case '\t': esc = 't'; goto c_and_shell_escape;
 8059da8:	b9 74 00 00 00       	mov    $0x74,%ecx
 8059dad:	8d 76 00             	lea    0x0(%esi),%esi
             outer quotes and nothing else is problematic.  */
          if (backslash_escapes && elide_outer_quotes && quote_string_len)
            goto store_c;

        c_and_shell_escape:
          if (quoting_style == shell_always_quoting_style
 8059db0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059db4:	89 3c 24             	mov    %edi,(%esp)
 8059db7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059dbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059dbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059dc3:	b9 50 a5 00 00       	mov    $0xa550,%ecx
 8059dc8:	e8 0b 4c 00 00       	call   805e9d8 <__afl_maybe_log>
 8059dcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059dd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059dd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059dd9:	8b 3c 24             	mov    (%esp),%edi
 8059ddc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059de0:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 8059de5:	75 6d                	jne    8059e54 <quotearg_buffer_restyled+0x1154>
 8059de7:	90                   	nop
 8059de8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059dec:	89 3c 24             	mov    %edi,(%esp)
 8059def:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059df3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059df7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059dfb:	b9 64 14 00 00       	mov    $0x1464,%ecx
 8059e00:	e8 d3 4b 00 00       	call   805e9d8 <__afl_maybe_log>
 8059e05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059e09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059e0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059e11:	8b 3c 24             	mov    (%esp),%edi
 8059e14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059e18:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8059e1d:	0f 85 0d ff ff ff    	jne    8059d30 <quotearg_buffer_restyled+0x1030>
 8059e23:	90                   	nop
 8059e24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059e28:	89 3c 24             	mov    %edi,(%esp)
 8059e2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059e2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059e33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059e37:	b9 33 52 00 00       	mov    $0x5233,%ecx
 8059e3c:	e8 97 4b 00 00       	call   805e9d8 <__afl_maybe_log>
 8059e41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059e45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059e49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059e4d:	8b 3c 24             	mov    (%esp),%edi
 8059e50:	8d 64 24 10          	lea    0x10(%esp),%esp
              && elide_outer_quotes)
            goto force_outer_quoting_style;
          /* Fall through.  */
        c_escape:
          if (backslash_escapes)
 8059e54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059e58:	89 3c 24             	mov    %edi,(%esp)
 8059e5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059e5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059e63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059e67:	b9 a9 28 00 00       	mov    $0x28a9,%ecx
 8059e6c:	e8 67 4b 00 00       	call   805e9d8 <__afl_maybe_log>
 8059e71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059e75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059e79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059e7d:	8b 3c 24             	mov    (%esp),%edi
 8059e80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059e84:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 8059e89:	0f 84 61 f6 ff ff    	je     80594f0 <quotearg_buffer_restyled+0x7f0>
 8059e8f:	90                   	nop
 8059e90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059e94:	89 3c 24             	mov    %edi,(%esp)
 8059e97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059e9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059e9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059ea3:	b9 f8 76 00 00       	mov    $0x76f8,%ecx
 8059ea8:	e8 2b 4b 00 00       	call   805e9d8 <__afl_maybe_log>
 8059ead:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059eb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059eb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059eb9:	8b 3c 24             	mov    (%esp),%edi
 8059ebc:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              c = esc;
 8059ec0:	89 ca                	mov    %ecx,%edx
 8059ec2:	e9 85 f7 ff ff       	jmp    805964c <quotearg_buffer_restyled+0x94c>
 8059ec7:	89 f6                	mov    %esi,%esi
 8059ec9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
            default:
              break;
            }
          break;

        case '\a': esc = 'a'; goto c_escape;
 8059ed0:	b9 61 00 00 00       	mov    $0x61,%ecx
 8059ed5:	e9 7a ff ff ff       	jmp    8059e54 <quotearg_buffer_restyled+0x1154>
 8059eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
 8059ee0:	b9 6e 00 00 00       	mov    $0x6e,%ecx
 8059ee5:	e9 c3 fe ff ff       	jmp    8059dad <quotearg_buffer_restyled+0x10ad>
 8059eea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
              break;
            }
          break;

        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
 8059ef0:	b9 62 00 00 00       	mov    $0x62,%ecx
 8059ef5:	e9 5a ff ff ff       	jmp    8059e54 <quotearg_buffer_restyled+0x1154>
 8059efa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

      c = arg[i];
      switch (c)
        {
        case '\0':
          if (backslash_escapes)
 8059f00:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 8059f05:	0f 84 7d 22 00 00    	je     805c188 <quotearg_buffer_restyled+0x3488>
 8059f0b:	90                   	nop
 8059f0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059f10:	89 3c 24             	mov    %edi,(%esp)
 8059f13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059f17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059f1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059f1f:	b9 61 01 00 00       	mov    $0x161,%ecx
 8059f24:	e8 af 4a 00 00       	call   805e9d8 <__afl_maybe_log>
 8059f29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059f2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059f31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059f35:	8b 3c 24             	mov    (%esp),%edi
 8059f38:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              if (elide_outer_quotes)
 8059f3c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8059f41:	0f 85 e9 fd ff ff    	jne    8059d30 <quotearg_buffer_restyled+0x1030>
 8059f47:	90                   	nop
 8059f48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059f4c:	89 3c 24             	mov    %edi,(%esp)
 8059f4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059f53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059f57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059f5b:	b9 81 43 00 00       	mov    $0x4381,%ecx
 8059f60:	e8 73 4a 00 00       	call   805e9d8 <__afl_maybe_log>
 8059f65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059f69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059f6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059f71:	8b 3c 24             	mov    (%esp),%edi
 8059f74:	8d 64 24 10          	lea    0x10(%esp),%esp
                goto force_outer_quoting_style;
              STORE ('\\');
 8059f78:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8059f7c:	73 3a                	jae    8059fb8 <quotearg_buffer_restyled+0x12b8>
 8059f7e:	66 90                	xchg   %ax,%ax
 8059f80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059f84:	89 3c 24             	mov    %edi,(%esp)
 8059f87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059f8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059f8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059f93:	b9 6f a3 00 00       	mov    $0xa36f,%ecx
 8059f98:	e8 3b 4a 00 00       	call   805e9d8 <__afl_maybe_log>
 8059f9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059fa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059fa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059fa9:	8b 3c 24             	mov    (%esp),%edi
 8059fac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059fb0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8059fb4:	c6 04 2a 5c          	movb   $0x5c,(%edx,%ebp,1)
              /* If quote_string were to begin with digits, we'd need to
                 test for the end of the arg as well.  However, it's
                 hard to imagine any locale that would use digits in
                 quotes, and set_custom_quoting is documented not to
                 accept them.  */
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
 8059fb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059fbc:	89 3c 24             	mov    %edi,(%esp)
 8059fbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059fc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059fc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059fcb:	b9 cb 49 00 00       	mov    $0x49cb,%ecx
 8059fd0:	e8 03 4a 00 00       	call   805e9d8 <__afl_maybe_log>
 8059fd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059fd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059fdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059fe1:	8b 3c 24             	mov    (%esp),%edi
 8059fe4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059fe8:	8d 5e 01             	lea    0x1(%esi),%ebx
        case '\0':
          if (backslash_escapes)
            {
              if (elide_outer_quotes)
                goto force_outer_quoting_style;
              STORE ('\\');
 8059feb:	8d 45 01             	lea    0x1(%ebp),%eax
              /* If quote_string were to begin with digits, we'd need to
                 test for the end of the arg as well.  However, it's
                 hard to imagine any locale that would use digits in
                 quotes, and set_custom_quoting is documented not to
                 accept them.  */
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
 8059fee:	39 df                	cmp    %ebx,%edi
 8059ff0:	0f 86 6a 01 00 00    	jbe    805a160 <quotearg_buffer_restyled+0x1460>
 8059ff6:	66 90                	xchg   %ax,%ax
 8059ff8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059ffc:	89 3c 24             	mov    %edi,(%esp)
 8059fff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a003:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a007:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a00b:	b9 88 11 00 00       	mov    $0x1188,%ecx
 805a010:	e8 c3 49 00 00       	call   805e9d8 <__afl_maybe_log>
 805a015:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a019:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a01d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a021:	8b 3c 24             	mov    (%esp),%edi
 805a024:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a028:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 805a02c:	0f b6 54 31 01       	movzbl 0x1(%ecx,%esi,1),%edx
 805a031:	8d 5a d0             	lea    -0x30(%edx),%ebx
 805a034:	88 54 24 20          	mov    %dl,0x20(%esp)
 805a038:	80 fb 09             	cmp    $0x9,%bl
 805a03b:	0f 87 1f 01 00 00    	ja     805a160 <quotearg_buffer_restyled+0x1460>
 805a041:	8d 76 00             	lea    0x0(%esi),%esi
 805a044:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a048:	89 3c 24             	mov    %edi,(%esp)
 805a04b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a04f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a053:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a057:	b9 dd a0 00 00       	mov    $0xa0dd,%ecx
 805a05c:	e8 77 49 00 00       	call   805e9d8 <__afl_maybe_log>
 805a061:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a065:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a069:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a06d:	8b 3c 24             	mov    (%esp),%edi
 805a070:	8d 64 24 10          	lea    0x10(%esp),%esp
                {
                  STORE ('0');
 805a074:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805a078:	0f 87 ef 28 00 00    	ja     805c96d <quotearg_buffer_restyled+0x3c6d>
 805a07e:	66 90                	xchg   %ax,%ax
 805a080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a084:	89 3c 24             	mov    %edi,(%esp)
 805a087:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a08b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a08f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a093:	b9 49 5d 00 00       	mov    $0x5d49,%ecx
 805a098:	e8 3b 49 00 00       	call   805e9d8 <__afl_maybe_log>
 805a09d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a0a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a0a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a0a9:	8b 3c 24             	mov    (%esp),%edi
 805a0ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a0b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a0b4:	89 3c 24             	mov    %edi,(%esp)
 805a0b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a0bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a0bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a0c3:	b9 4a ea 00 00       	mov    $0xea4a,%ecx
 805a0c8:	e8 0b 49 00 00       	call   805e9d8 <__afl_maybe_log>
 805a0cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a0d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a0d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a0d9:	8b 3c 24             	mov    (%esp),%edi
 805a0dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a0e0:	8d 45 02             	lea    0x2(%ebp),%eax
                  STORE ('0');
 805a0e3:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805a0e7:	76 3c                	jbe    805a125 <quotearg_buffer_restyled+0x1425>
 805a0e9:	8d 76 00             	lea    0x0(%esi),%esi
 805a0ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a0f0:	89 3c 24             	mov    %edi,(%esp)
 805a0f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a0f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a0fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a0ff:	b9 ed 2b 00 00       	mov    $0x2bed,%ecx
 805a104:	e8 cf 48 00 00       	call   805e9d8 <__afl_maybe_log>
 805a109:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a10d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a111:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a115:	8b 3c 24             	mov    (%esp),%edi
 805a118:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a11c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805a120:	c6 44 2a 02 30       	movb   $0x30,0x2(%edx,%ebp,1)
 805a125:	8d 76 00             	lea    0x0(%esi),%esi
 805a128:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a12c:	89 3c 24             	mov    %edi,(%esp)
 805a12f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a133:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a137:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a13b:	b9 67 3e 00 00       	mov    $0x3e67,%ecx
 805a140:	e8 93 48 00 00       	call   805e9d8 <__afl_maybe_log>
 805a145:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a149:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a14d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a151:	8b 3c 24             	mov    (%esp),%edi
 805a154:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a158:	8d 45 03             	lea    0x3(%ebp),%eax
 805a15b:	90                   	nop
 805a15c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
                    i += 2;
                    STORE ('?');
                    STORE ('"');
                    STORE ('"');
                    STORE ('?');
                    break;
 805a160:	89 c5                	mov    %eax,%ebp
 805a162:	ba 30 00 00 00       	mov    $0x30,%edx
 805a167:	e9 c4 f3 ff ff       	jmp    8059530 <quotearg_buffer_restyled+0x830>
 805a16c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
 805a170:	b9 72 00 00 00       	mov    $0x72,%ecx
 805a175:	e9 33 fc ff ff       	jmp    8059dad <quotearg_buffer_restyled+0x10ad>
 805a17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            }
          break;

        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
 805a180:	b9 66 00 00 00       	mov    $0x66,%ecx
 805a185:	e9 ca fc ff ff       	jmp    8059e54 <quotearg_buffer_restyled+0x1154>
 805a18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
        case '\t': esc = 't'; goto c_and_shell_escape;
        case '\v': esc = 'v'; goto c_escape;
 805a190:	b9 76 00 00 00       	mov    $0x76,%ecx
 805a195:	e9 ba fc ff ff       	jmp    8059e54 <quotearg_buffer_restyled+0x1154>
 805a19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        case '\\': esc = c;
          /* No need to escape the escape if we are trying to elide
             outer quotes and nothing else is problematic.  */
          if (backslash_escapes && elide_outer_quotes && quote_string_len)
 805a1a0:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
 805a1a5:	84 4c 24 39          	test   %cl,0x39(%esp)
 805a1a9:	74 6d                	je     805a218 <quotearg_buffer_restyled+0x1518>
 805a1ab:	90                   	nop
 805a1ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a1b0:	89 3c 24             	mov    %edi,(%esp)
 805a1b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a1b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a1bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a1bf:	b9 37 a8 00 00       	mov    $0xa837,%ecx
 805a1c4:	e8 0f 48 00 00       	call   805e9d8 <__afl_maybe_log>
 805a1c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a1cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a1d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a1d5:	8b 3c 24             	mov    (%esp),%edi
 805a1d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a1dc:	80 7c 24 20 00       	cmpb   $0x0,0x20(%esp)
 805a1e1:	0f 85 44 f5 ff ff    	jne    805972b <quotearg_buffer_restyled+0xa2b>
 805a1e7:	90                   	nop
 805a1e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a1ec:	89 3c 24             	mov    %edi,(%esp)
 805a1ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a1f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a1f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a1fb:	b9 c0 b3 00 00       	mov    $0xb3c0,%ecx
 805a200:	e8 d3 47 00 00       	call   805e9d8 <__afl_maybe_log>
 805a205:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a209:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a20d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a211:	8b 3c 24             	mov    (%esp),%edi
 805a214:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a218:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a21c:	89 3c 24             	mov    %edi,(%esp)
 805a21f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a223:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a227:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a22b:	b9 b3 4e 00 00       	mov    $0x4eb3,%ecx
 805a230:	e8 a3 47 00 00       	call   805e9d8 <__afl_maybe_log>
 805a235:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a239:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a23d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a241:	8b 3c 24             	mov    (%esp),%edi
 805a244:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a248:	89 d1                	mov    %edx,%ecx
 805a24a:	e9 5e fb ff ff       	jmp    8059dad <quotearg_buffer_restyled+0x10ad>
 805a24f:	90                   	nop
              && elide_outer_quotes)
            goto force_outer_quoting_style;
          break;

        case '\'':
          if (quoting_style == shell_always_quoting_style)
 805a250:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 805a255:	0f 85 95 f2 ff ff    	jne    80594f0 <quotearg_buffer_restyled+0x7f0>
 805a25b:	90                   	nop
 805a25c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a260:	89 3c 24             	mov    %edi,(%esp)
 805a263:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a267:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a26b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a26f:	b9 2e 4c 00 00       	mov    $0x4c2e,%ecx
 805a274:	e8 5f 47 00 00       	call   805e9d8 <__afl_maybe_log>
 805a279:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a27d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a281:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a285:	8b 3c 24             	mov    (%esp),%edi
 805a288:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              if (elide_outer_quotes)
 805a28c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805a291:	0f 85 99 fa ff ff    	jne    8059d30 <quotearg_buffer_restyled+0x1030>
 805a297:	90                   	nop
 805a298:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a29c:	89 3c 24             	mov    %edi,(%esp)
 805a29f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a2a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a2a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a2ab:	b9 c5 62 00 00       	mov    $0x62c5,%ecx
 805a2b0:	e8 23 47 00 00       	call   805e9d8 <__afl_maybe_log>
 805a2b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a2b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a2bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a2c1:	8b 3c 24             	mov    (%esp),%edi
 805a2c4:	8d 64 24 10          	lea    0x10(%esp),%esp
                goto force_outer_quoting_style;
              STORE ('\'');
 805a2c8:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805a2cc:	73 3a                	jae    805a308 <quotearg_buffer_restyled+0x1608>
 805a2ce:	66 90                	xchg   %ax,%ax
 805a2d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a2d4:	89 3c 24             	mov    %edi,(%esp)
 805a2d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a2db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a2df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a2e3:	b9 b6 f7 00 00       	mov    $0xf7b6,%ecx
 805a2e8:	e8 eb 46 00 00       	call   805e9d8 <__afl_maybe_log>
 805a2ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a2f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a2f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a2f9:	8b 3c 24             	mov    (%esp),%edi
 805a2fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a300:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 805a304:	c6 04 2b 27          	movb   $0x27,(%ebx,%ebp,1)
 805a308:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a30c:	89 3c 24             	mov    %edi,(%esp)
 805a30f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a313:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a317:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a31b:	b9 45 4e 00 00       	mov    $0x4e45,%ecx
 805a320:	e8 b3 46 00 00       	call   805e9d8 <__afl_maybe_log>
 805a325:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a329:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a32d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a331:	8b 3c 24             	mov    (%esp),%edi
 805a334:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a338:	8d 45 01             	lea    0x1(%ebp),%eax
              STORE ('\\');
 805a33b:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805a33f:	76 3c                	jbe    805a37d <quotearg_buffer_restyled+0x167d>
 805a341:	8d 76 00             	lea    0x0(%esi),%esi
 805a344:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a348:	89 3c 24             	mov    %edi,(%esp)
 805a34b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a34f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a353:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a357:	b9 73 17 00 00       	mov    $0x1773,%ecx
 805a35c:	e8 77 46 00 00       	call   805e9d8 <__afl_maybe_log>
 805a361:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a365:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a369:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a36d:	8b 3c 24             	mov    (%esp),%edi
 805a370:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a374:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805a378:	c6 44 29 01 5c       	movb   $0x5c,0x1(%ecx,%ebp,1)
 805a37d:	8d 76 00             	lea    0x0(%esi),%esi
 805a380:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a384:	89 3c 24             	mov    %edi,(%esp)
 805a387:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a38b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a38f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a393:	b9 8c 50 00 00       	mov    $0x508c,%ecx
 805a398:	e8 3b 46 00 00       	call   805e9d8 <__afl_maybe_log>
 805a39d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a3a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a3a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a3a9:	8b 3c 24             	mov    (%esp),%edi
 805a3ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a3b0:	8d 5d 02             	lea    0x2(%ebp),%ebx
              STORE ('\'');
 805a3b3:	39 5c 24 10          	cmp    %ebx,0x10(%esp)
 805a3b7:	76 3c                	jbe    805a3f5 <quotearg_buffer_restyled+0x16f5>
 805a3b9:	8d 76 00             	lea    0x0(%esi),%esi
 805a3bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a3c0:	89 3c 24             	mov    %edi,(%esp)
 805a3c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a3c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a3cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a3cf:	b9 40 05 00 00       	mov    $0x540,%ecx
 805a3d4:	e8 ff 45 00 00       	call   805e9d8 <__afl_maybe_log>
 805a3d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a3dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a3e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a3e5:	8b 3c 24             	mov    (%esp),%edi
 805a3e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a3ec:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805a3f0:	c6 44 28 02 27       	movb   $0x27,0x2(%eax,%ebp,1)
 805a3f5:	8d 76 00             	lea    0x0(%esi),%esi
 805a3f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a3fc:	89 3c 24             	mov    %edi,(%esp)
 805a3ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a403:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a407:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a40b:	b9 d9 2a 00 00       	mov    $0x2ad9,%ecx
 805a410:	e8 c3 45 00 00       	call   805e9d8 <__afl_maybe_log>
 805a415:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a419:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a41d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a421:	8b 3c 24             	mov    (%esp),%edi
 805a424:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a428:	83 c5 03             	add    $0x3,%ebp
 805a42b:	e9 c0 f0 ff ff       	jmp    80594f0 <quotearg_buffer_restyled+0x7f0>
            /* Length of multibyte sequence found so far.  */
            size_t m;

            bool printable;

            if (unibyte_locale)
 805a430:	83 7c 24 34 01       	cmpl   $0x1,0x34(%esp)
 805a435:	0f 85 15 19 00 00    	jne    805bd50 <quotearg_buffer_restyled+0x3050>
 805a43b:	90                   	nop
 805a43c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a440:	89 3c 24             	mov    %edi,(%esp)
 805a443:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a447:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a44b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a44f:	b9 40 69 00 00       	mov    $0x6940,%ecx
 805a454:	e8 7f 45 00 00       	call   805e9d8 <__afl_maybe_log>
 805a459:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a45d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a461:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a465:	8b 3c 24             	mov    (%esp),%edi
 805a468:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a46c:	88 54 24 20          	mov    %dl,0x20(%esp)
              {
                m = 1;
                printable = isprint (c) != 0;
 805a470:	e8 cb f0 fe ff       	call   8049540 <__ctype_b_loc@plt>
 805a475:	0f b6 4c 24 20       	movzbl 0x20(%esp),%ecx
 805a47a:	8b 18                	mov    (%eax),%ebx

            bool printable;

            if (unibyte_locale)
              {
                m = 1;
 805a47c:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
 805a483:	00 
                printable = isprint (c) != 0;
 805a484:	89 ca                	mov    %ecx,%edx
 805a486:	0f b7 0c 4b          	movzwl (%ebx,%ecx,2),%ecx
 805a48a:	66 c1 e9 0e          	shr    $0xe,%cx
 805a48e:	83 e1 01             	and    $0x1,%ecx
 805a491:	88 4c 24 20          	mov    %cl,0x20(%esp)
 805a495:	8d 76 00             	lea    0x0(%esi),%esi
                      }
                  }
                while (! mbsinit (&mbstate));
              }

            if (1 < m || (backslash_escapes && ! printable))
 805a498:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a49c:	89 3c 24             	mov    %edi,(%esp)
 805a49f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a4a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a4a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a4ab:	b9 3a 47 00 00       	mov    $0x473a,%ecx
 805a4b0:	e8 23 45 00 00       	call   805e9d8 <__afl_maybe_log>
 805a4b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a4b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a4bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a4c1:	8b 3c 24             	mov    (%esp),%edi
 805a4c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a4c8:	0f b6 5c 24 20       	movzbl 0x20(%esp),%ebx
 805a4cd:	38 5c 24 0f          	cmp    %bl,0xf(%esp)
 805a4d1:	0f 86 19 f0 ff ff    	jbe    80594f0 <quotearg_buffer_restyled+0x7f0>
 805a4d7:	90                   	nop
 805a4d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a4dc:	89 3c 24             	mov    %edi,(%esp)
 805a4df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a4e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a4e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a4eb:	b9 bd a2 00 00       	mov    $0xa2bd,%ecx
 805a4f0:	e8 e3 44 00 00       	call   805e9d8 <__afl_maybe_log>
 805a4f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a4f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a4fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a501:	8b 3c 24             	mov    (%esp),%edi
 805a504:	8d 64 24 10          	lea    0x10(%esp),%esp
              {
                /* Output a multibyte sequence, or an escaped
                   unprintable unibyte character.  */
                size_t ilim = i + m;
 805a508:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a50c:	89 3c 24             	mov    %edi,(%esp)
 805a50f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a513:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a517:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a51b:	b9 04 7e 00 00       	mov    $0x7e04,%ecx
 805a520:	e8 b3 44 00 00       	call   805e9d8 <__afl_maybe_log>
 805a525:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a529:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a52d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a531:	8b 3c 24             	mov    (%esp),%edi
 805a534:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a538:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805a53c:	89 f1                	mov    %esi,%ecx
 805a53e:	f7 d1                	not    %ecx
 805a540:	01 f3                	add    %esi,%ebx
 805a542:	01 d9                	add    %ebx,%ecx
 805a544:	83 e1 03             	and    $0x3,%ecx
 805a547:	89 4c 24 24          	mov    %ecx,0x24(%esp)
 805a54b:	0f 84 7f 1c 00 00    	je     805c1d0 <quotearg_buffer_restyled+0x34d0>
 805a551:	8d 76 00             	lea    0x0(%esi),%esi
 805a554:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a558:	89 3c 24             	mov    %edi,(%esp)
 805a55b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a55f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a563:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a567:	b9 58 2f 00 00       	mov    $0x2f58,%ecx
 805a56c:	e8 67 44 00 00       	call   805e9d8 <__afl_maybe_log>
 805a571:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a575:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a579:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a57d:	8b 3c 24             	mov    (%esp),%edi
 805a580:	8d 64 24 10          	lea    0x10(%esp),%esp

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805a584:	0f b6 44 24 20       	movzbl 0x20(%esp),%eax
 805a589:	38 44 24 0f          	cmp    %al,0xf(%esp)
 805a58d:	0f 87 6d 1c 00 00    	ja     805c200 <quotearg_buffer_restyled+0x3500>
 805a593:	90                   	nop
 805a594:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a598:	89 3c 24             	mov    %edi,(%esp)
 805a59b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a59f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a5a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a5a7:	b9 27 c5 00 00       	mov    $0xc527,%ecx
 805a5ac:	e8 27 44 00 00       	call   805e9d8 <__afl_maybe_log>
 805a5b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a5b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a5b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a5bd:	8b 3c 24             	mov    (%esp),%edi
 805a5c0:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805a5c4:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805a5c9:	0f 84 a5 00 00 00    	je     805a674 <quotearg_buffer_restyled+0x1974>
 805a5cf:	90                   	nop
 805a5d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a5d4:	89 3c 24             	mov    %edi,(%esp)
 805a5d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a5db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a5df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a5e3:	b9 8a d3 00 00       	mov    $0xd38a,%ecx
 805a5e8:	e8 eb 43 00 00       	call   805e9d8 <__afl_maybe_log>
 805a5ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a5f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a5f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a5f9:	8b 3c 24             	mov    (%esp),%edi
 805a5fc:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805a600:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805a604:	0f 82 a3 22 00 00    	jb     805c8ad <quotearg_buffer_restyled+0x3bad>
 805a60a:	66 90                	xchg   %ax,%ax
 805a60c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a610:	89 3c 24             	mov    %edi,(%esp)
 805a613:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a617:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a61b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a61f:	b9 39 ca 00 00       	mov    $0xca39,%ecx
 805a624:	e8 af 43 00 00       	call   805e9d8 <__afl_maybe_log>
 805a629:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a62d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a631:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a635:	8b 3c 24             	mov    (%esp),%edi
 805a638:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a63c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a640:	89 3c 24             	mov    %edi,(%esp)
 805a643:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a647:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a64b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a64f:	b9 81 a3 00 00       	mov    $0xa381,%ecx
 805a654:	e8 7f 43 00 00       	call   805e9d8 <__afl_maybe_log>
 805a659:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a65d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a661:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a665:	8b 3c 24             	mov    (%esp),%edi
 805a668:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a66c:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805a66f:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
 805a674:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a678:	89 3c 24             	mov    %edi,(%esp)
 805a67b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a67f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a683:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a687:	b9 87 b0 00 00       	mov    $0xb087,%ecx
 805a68c:	e8 47 43 00 00       	call   805e9d8 <__afl_maybe_log>
 805a691:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a695:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a699:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a69d:	8b 3c 24             	mov    (%esp),%edi
 805a6a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a6a4:	83 c6 01             	add    $0x1,%esi
 805a6a7:	39 f3                	cmp    %esi,%ebx
 805a6a9:	0f 86 b0 f0 ff ff    	jbe    805975f <quotearg_buffer_restyled+0xa5f>
 805a6af:	90                   	nop
 805a6b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a6b4:	89 3c 24             	mov    %edi,(%esp)
 805a6b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a6bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a6bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a6c3:	b9 1c 08 00 00       	mov    $0x81c,%ecx
 805a6c8:	e8 0b 43 00 00       	call   805e9d8 <__afl_maybe_log>
 805a6cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a6d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a6d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a6d9:	8b 3c 24             	mov    (%esp),%edi
 805a6dc:	8d 64 24 10          	lea    0x10(%esp),%esp
                      break;
                    STORE (c);
 805a6e0:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805a6e4:	73 39                	jae    805a71f <quotearg_buffer_restyled+0x1a1f>
 805a6e6:	66 90                	xchg   %ax,%ax
 805a6e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a6ec:	89 3c 24             	mov    %edi,(%esp)
 805a6ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a6f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a6f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a6fb:	b9 85 67 00 00       	mov    $0x6785,%ecx
 805a700:	e8 d3 42 00 00       	call   805e9d8 <__afl_maybe_log>
 805a705:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a709:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a70d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a711:	8b 3c 24             	mov    (%esp),%edi
 805a714:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a718:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805a71c:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 805a71f:	90                   	nop
 805a720:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a724:	89 3c 24             	mov    %edi,(%esp)
 805a727:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a72b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a72f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a733:	b9 52 0a 00 00       	mov    $0xa52,%ecx
 805a738:	e8 9b 42 00 00       	call   805e9d8 <__afl_maybe_log>
 805a73d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a741:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a745:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a749:	8b 3c 24             	mov    (%esp),%edi
 805a74c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a750:	8b 44 24 24          	mov    0x24(%esp),%eax
                    c = arg[++i];
 805a754:	8b 4c 24 14          	mov    0x14(%esp),%ecx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805a758:	83 c5 01             	add    $0x1,%ebp
 805a75b:	83 f8 01             	cmp    $0x1,%eax
                    c = arg[++i];
 805a75e:	0f b6 14 31          	movzbl (%ecx,%esi,1),%edx
 805a762:	0f 84 68 1a 00 00    	je     805c1d0 <quotearg_buffer_restyled+0x34d0>
 805a768:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a76c:	89 3c 24             	mov    %edi,(%esp)
 805a76f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a773:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a777:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a77b:	b9 7f fc 00 00       	mov    $0xfc7f,%ecx
 805a780:	e8 53 42 00 00       	call   805e9d8 <__afl_maybe_log>
 805a785:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a789:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a78d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a791:	8b 3c 24             	mov    (%esp),%edi
 805a794:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a798:	83 f8 02             	cmp    $0x2,%eax
 805a79b:	0f 84 d2 01 00 00    	je     805a973 <quotearg_buffer_restyled+0x1c73>
 805a7a1:	8d 76 00             	lea    0x0(%esi),%esi
 805a7a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a7a8:	89 3c 24             	mov    %edi,(%esp)
 805a7ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a7af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a7b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a7b7:	b9 1b 07 00 00       	mov    $0x71b,%ecx
 805a7bc:	e8 17 42 00 00       	call   805e9d8 <__afl_maybe_log>
 805a7c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a7c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a7c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a7cd:	8b 3c 24             	mov    (%esp),%edi
 805a7d0:	8d 64 24 10          	lea    0x10(%esp),%esp
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805a7d4:	0f b6 4c 24 20       	movzbl 0x20(%esp),%ecx
 805a7d9:	38 4c 24 0f          	cmp    %cl,0xf(%esp)
 805a7dd:	0f 87 dd 1b 00 00    	ja     805c3c0 <quotearg_buffer_restyled+0x36c0>
 805a7e3:	90                   	nop
 805a7e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a7e8:	89 3c 24             	mov    %edi,(%esp)
 805a7eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a7ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a7f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a7f7:	b9 9a 0f 00 00       	mov    $0xf9a,%ecx
 805a7fc:	e8 d7 41 00 00       	call   805e9d8 <__afl_maybe_log>
 805a801:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a805:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a809:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a80d:	8b 3c 24             	mov    (%esp),%edi
 805a810:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805a814:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805a819:	0f 84 a5 00 00 00    	je     805a8c4 <quotearg_buffer_restyled+0x1bc4>
 805a81f:	90                   	nop
 805a820:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a824:	89 3c 24             	mov    %edi,(%esp)
 805a827:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a82b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a82f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a833:	b9 2b 9f 00 00       	mov    $0x9f2b,%ecx
 805a838:	e8 9b 41 00 00       	call   805e9d8 <__afl_maybe_log>
 805a83d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a841:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a845:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a849:	8b 3c 24             	mov    (%esp),%edi
 805a84c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805a850:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805a854:	0f 82 93 20 00 00    	jb     805c8ed <quotearg_buffer_restyled+0x3bed>
 805a85a:	66 90                	xchg   %ax,%ax
 805a85c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a860:	89 3c 24             	mov    %edi,(%esp)
 805a863:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a867:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a86b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a86f:	b9 37 6a 00 00       	mov    $0x6a37,%ecx
 805a874:	e8 5f 41 00 00       	call   805e9d8 <__afl_maybe_log>
 805a879:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a87d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a881:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a885:	8b 3c 24             	mov    (%esp),%edi
 805a888:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a88c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a890:	89 3c 24             	mov    %edi,(%esp)
 805a893:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a897:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a89b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a89f:	b9 80 43 00 00       	mov    $0x4380,%ecx
 805a8a4:	e8 2f 41 00 00       	call   805e9d8 <__afl_maybe_log>
 805a8a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a8ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a8b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a8b5:	8b 3c 24             	mov    (%esp),%edi
 805a8b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a8bc:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805a8bf:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
 805a8c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a8c8:	89 3c 24             	mov    %edi,(%esp)
 805a8cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a8cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a8d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a8d7:	b9 dd 8c 00 00       	mov    $0x8cdd,%ecx
 805a8dc:	e8 f7 40 00 00       	call   805e9d8 <__afl_maybe_log>
 805a8e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a8e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a8e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a8ed:	8b 3c 24             	mov    (%esp),%edi
 805a8f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a8f4:	83 c6 01             	add    $0x1,%esi
                      break;
                    STORE (c);
 805a8f7:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805a8fb:	73 3a                	jae    805a937 <quotearg_buffer_restyled+0x1c37>
 805a8fd:	8d 76 00             	lea    0x0(%esi),%esi
 805a900:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a904:	89 3c 24             	mov    %edi,(%esp)
 805a907:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a90b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a90f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a913:	b9 00 1a 00 00       	mov    $0x1a00,%ecx
 805a918:	e8 bb 40 00 00       	call   805e9d8 <__afl_maybe_log>
 805a91d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a921:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a925:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a929:	8b 3c 24             	mov    (%esp),%edi
 805a92c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a930:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805a934:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 805a937:	90                   	nop
                    c = arg[++i];
 805a938:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a93c:	89 3c 24             	mov    %edi,(%esp)
 805a93f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a943:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a947:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a94b:	b9 e3 f0 00 00       	mov    $0xf0e3,%ecx
 805a950:	e8 83 40 00 00       	call   805e9d8 <__afl_maybe_log>
 805a955:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a959:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a95d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a961:	8b 3c 24             	mov    (%esp),%edi
 805a964:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a968:	8b 4c 24 14          	mov    0x14(%esp),%ecx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805a96c:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 805a96f:	0f b6 14 31          	movzbl (%ecx,%esi,1),%edx
 805a973:	90                   	nop
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805a974:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a978:	89 3c 24             	mov    %edi,(%esp)
 805a97b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a97f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a983:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a987:	b9 c0 92 00 00       	mov    $0x92c0,%ecx
 805a98c:	e8 47 40 00 00       	call   805e9d8 <__afl_maybe_log>
 805a991:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a995:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a999:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a99d:	8b 3c 24             	mov    (%esp),%edi
 805a9a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a9a4:	0f b6 44 24 20       	movzbl 0x20(%esp),%eax
 805a9a9:	38 44 24 0f          	cmp    %al,0xf(%esp)
 805a9ad:	0f 87 cd 1b 00 00    	ja     805c580 <quotearg_buffer_restyled+0x3880>
 805a9b3:	90                   	nop
 805a9b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a9b8:	89 3c 24             	mov    %edi,(%esp)
 805a9bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a9bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a9c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a9c7:	b9 5c a6 00 00       	mov    $0xa65c,%ecx
 805a9cc:	e8 07 40 00 00       	call   805e9d8 <__afl_maybe_log>
 805a9d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a9d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a9d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a9dd:	8b 3c 24             	mov    (%esp),%edi
 805a9e0:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805a9e4:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805a9e9:	0f 84 a5 00 00 00    	je     805aa94 <quotearg_buffer_restyled+0x1d94>
 805a9ef:	90                   	nop
 805a9f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a9f4:	89 3c 24             	mov    %edi,(%esp)
 805a9f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a9fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a9ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aa03:	b9 f4 74 00 00       	mov    $0x74f4,%ecx
 805aa08:	e8 cb 3f 00 00       	call   805e9d8 <__afl_maybe_log>
 805aa0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aa11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aa15:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aa19:	8b 3c 24             	mov    (%esp),%edi
 805aa1c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805aa20:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805aa24:	0f 82 03 1f 00 00    	jb     805c92d <quotearg_buffer_restyled+0x3c2d>
 805aa2a:	66 90                	xchg   %ax,%ax
 805aa2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aa30:	89 3c 24             	mov    %edi,(%esp)
 805aa33:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aa37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aa3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aa3f:	b9 54 86 00 00       	mov    $0x8654,%ecx
 805aa44:	e8 8f 3f 00 00       	call   805e9d8 <__afl_maybe_log>
 805aa49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aa4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aa51:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aa55:	8b 3c 24             	mov    (%esp),%edi
 805aa58:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aa5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aa60:	89 3c 24             	mov    %edi,(%esp)
 805aa63:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aa67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aa6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aa6f:	b9 a9 10 00 00       	mov    $0x10a9,%ecx
 805aa74:	e8 5f 3f 00 00       	call   805e9d8 <__afl_maybe_log>
 805aa79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aa7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aa81:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aa85:	8b 3c 24             	mov    (%esp),%edi
 805aa88:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aa8c:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805aa8f:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
 805aa94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aa98:	89 3c 24             	mov    %edi,(%esp)
 805aa9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aa9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aaa3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aaa7:	b9 50 74 00 00       	mov    $0x7450,%ecx
 805aaac:	e8 27 3f 00 00       	call   805e9d8 <__afl_maybe_log>
 805aab1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aab5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aab9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aabd:	8b 3c 24             	mov    (%esp),%edi
 805aac0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aac4:	83 c6 01             	add    $0x1,%esi
                      break;
                    STORE (c);
 805aac7:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805aacb:	73 3a                	jae    805ab07 <quotearg_buffer_restyled+0x1e07>
 805aacd:	8d 76 00             	lea    0x0(%esi),%esi
 805aad0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aad4:	89 3c 24             	mov    %edi,(%esp)
 805aad7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aadb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aadf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aae3:	b9 1c ca 00 00       	mov    $0xca1c,%ecx
 805aae8:	e8 eb 3e 00 00       	call   805e9d8 <__afl_maybe_log>
 805aaed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aaf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aaf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aaf9:	8b 3c 24             	mov    (%esp),%edi
 805aafc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ab00:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805ab04:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 805ab07:	90                   	nop
                    c = arg[++i];
 805ab08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ab0c:	89 3c 24             	mov    %edi,(%esp)
 805ab0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ab13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ab17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ab1b:	b9 24 60 00 00       	mov    $0x6024,%ecx
 805ab20:	e8 b3 3e 00 00       	call   805e9d8 <__afl_maybe_log>
 805ab25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ab29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ab2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ab31:	8b 3c 24             	mov    (%esp),%edi
 805ab34:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ab38:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 805ab3c:	89 5c 24 30          	mov    %ebx,0x30(%esp)
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805ab40:	83 c5 01             	add    $0x1,%ebp
 805ab43:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 805ab47:	89 7c 24 70          	mov    %edi,0x70(%esp)
 805ab4b:	8b 44 24 10          	mov    0x10(%esp),%eax
                    c = arg[++i];
 805ab4f:	0f b6 14 31          	movzbl (%ecx,%esi,1),%edx
 805ab53:	89 cf                	mov    %ecx,%edi
 805ab55:	89 5c 24 24          	mov    %ebx,0x24(%esp)
 805ab59:	e9 72 08 00 00       	jmp    805b3d0 <quotearg_buffer_restyled+0x26d0>
 805ab5e:	66 90                	xchg   %ax,%ax

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805ab60:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805ab65:	0f 85 da 1b 00 00    	jne    805c745 <quotearg_buffer_restyled+0x3a45>
 805ab6b:	90                   	nop
 805ab6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ab70:	89 3c 24             	mov    %edi,(%esp)
 805ab73:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ab77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ab7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ab7f:	b9 be 6f 00 00       	mov    $0x6fbe,%ecx
 805ab84:	e8 4f 3e 00 00       	call   805e9d8 <__afl_maybe_log>
 805ab89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ab8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ab91:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ab95:	8b 3c 24             	mov    (%esp),%edi
 805ab98:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805ab9c:	39 c5                	cmp    %eax,%ebp
 805ab9e:	73 38                	jae    805abd8 <quotearg_buffer_restyled+0x1ed8>
 805aba0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aba4:	89 3c 24             	mov    %edi,(%esp)
 805aba7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805abab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805abaf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805abb3:	b9 a7 3d 00 00       	mov    $0x3da7,%ecx
 805abb8:	e8 1b 3e 00 00       	call   805e9d8 <__afl_maybe_log>
 805abbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805abc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805abc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805abc9:	8b 3c 24             	mov    (%esp),%edi
 805abcc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805abd0:	8b 4c 24 24          	mov    0x24(%esp),%ecx
 805abd4:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 805abd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805abdc:	89 3c 24             	mov    %edi,(%esp)
 805abdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805abe3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805abe7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805abeb:	b9 ca ab 00 00       	mov    $0xabca,%ecx
 805abf0:	e8 e3 3d 00 00       	call   805e9d8 <__afl_maybe_log>
 805abf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805abf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805abfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ac01:	8b 3c 24             	mov    (%esp),%edi
 805ac04:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ac08:	8d 5d 01             	lea    0x1(%ebp),%ebx
                        STORE ('0' + (c >> 6));
 805ac0b:	39 d8                	cmp    %ebx,%eax
 805ac0d:	76 41                	jbe    805ac50 <quotearg_buffer_restyled+0x1f50>
 805ac0f:	90                   	nop
 805ac10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ac14:	89 3c 24             	mov    %edi,(%esp)
 805ac17:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ac1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ac1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ac23:	b9 13 0a 00 00       	mov    $0xa13,%ecx
 805ac28:	e8 ab 3d 00 00       	call   805e9d8 <__afl_maybe_log>
 805ac2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ac31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ac35:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ac39:	8b 3c 24             	mov    (%esp),%edi
 805ac3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ac40:	89 d1                	mov    %edx,%ecx
 805ac42:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805ac46:	c0 e9 06             	shr    $0x6,%cl
 805ac49:	83 c1 30             	add    $0x30,%ecx
 805ac4c:	88 4c 2b 01          	mov    %cl,0x1(%ebx,%ebp,1)
 805ac50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ac54:	89 3c 24             	mov    %edi,(%esp)
 805ac57:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ac5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ac5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ac63:	b9 6c 0c 00 00       	mov    $0xc6c,%ecx
 805ac68:	e8 6b 3d 00 00       	call   805e9d8 <__afl_maybe_log>
 805ac6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ac71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ac75:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ac79:	8b 3c 24             	mov    (%esp),%edi
 805ac7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ac80:	8d 4d 02             	lea    0x2(%ebp),%ecx
                        STORE ('0' + ((c >> 3) & 7));
 805ac83:	39 c8                	cmp    %ecx,%eax
 805ac85:	76 44                	jbe    805accb <quotearg_buffer_restyled+0x1fcb>
 805ac87:	90                   	nop
 805ac88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ac8c:	89 3c 24             	mov    %edi,(%esp)
 805ac8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ac93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ac97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ac9b:	b9 06 ae 00 00       	mov    $0xae06,%ecx
 805aca0:	e8 33 3d 00 00       	call   805e9d8 <__afl_maybe_log>
 805aca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aca9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805acad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805acb1:	8b 3c 24             	mov    (%esp),%edi
 805acb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805acb8:	89 d1                	mov    %edx,%ecx
 805acba:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805acbe:	c0 e9 03             	shr    $0x3,%cl
 805acc1:	83 e1 07             	and    $0x7,%ecx
 805acc4:	83 c1 30             	add    $0x30,%ecx
 805acc7:	88 4c 2b 02          	mov    %cl,0x2(%ebx,%ebp,1)
 805accb:	90                   	nop
                        c = '0' + (c & 7);
 805accc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805acd0:	89 3c 24             	mov    %edi,(%esp)
 805acd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805acd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805acdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805acdf:	b9 ce 6d 00 00       	mov    $0x6dce,%ecx
 805ace4:	e8 ef 3c 00 00       	call   805e9d8 <__afl_maybe_log>
 805ace9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aced:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805acf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805acf5:	8b 3c 24             	mov    (%esp),%edi
 805acf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805acfc:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805acff:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805ad02:	83 c2 30             	add    $0x30,%edx
 805ad05:	8d 76 00             	lea    0x0(%esi),%esi
                    else if (is_right_quote)
                      {
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
 805ad08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ad0c:	89 3c 24             	mov    %edi,(%esp)
 805ad0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ad13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ad17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ad1b:	b9 31 f1 00 00       	mov    $0xf131,%ecx
 805ad20:	e8 b3 3c 00 00       	call   805e9d8 <__afl_maybe_log>
 805ad25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ad29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ad2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ad31:	8b 3c 24             	mov    (%esp),%edi
 805ad34:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ad38:	8d 4e 01             	lea    0x1(%esi),%ecx
 805ad3b:	39 4c 24 30          	cmp    %ecx,0x30(%esp)
 805ad3f:	89 ce                	mov    %ecx,%esi
 805ad41:	0f 86 2c 1b 00 00    	jbe    805c873 <quotearg_buffer_restyled+0x3b73>
 805ad47:	90                   	nop
 805ad48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ad4c:	89 3c 24             	mov    %edi,(%esp)
 805ad4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ad53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ad57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ad5b:	b9 ec 41 00 00       	mov    $0x41ec,%ecx
 805ad60:	e8 73 3c 00 00       	call   805e9d8 <__afl_maybe_log>
 805ad65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ad69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ad6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ad71:	8b 3c 24             	mov    (%esp),%edi
 805ad74:	8d 64 24 10          	lea    0x10(%esp),%esp
                      break;
                    STORE (c);
 805ad78:	39 c5                	cmp    %eax,%ebp
 805ad7a:	73 37                	jae    805adb3 <quotearg_buffer_restyled+0x20b3>
 805ad7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ad80:	89 3c 24             	mov    %edi,(%esp)
 805ad83:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ad87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ad8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ad8f:	b9 df 9d 00 00       	mov    $0x9ddf,%ecx
 805ad94:	e8 3f 3c 00 00       	call   805e9d8 <__afl_maybe_log>
 805ad99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ad9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ada1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ada5:	8b 3c 24             	mov    (%esp),%edi
 805ada8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805adac:	8b 74 24 24          	mov    0x24(%esp),%esi
 805adb0:	88 14 2e             	mov    %dl,(%esi,%ebp,1)
 805adb3:	90                   	nop
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805adb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805adb8:	89 3c 24             	mov    %edi,(%esp)
 805adbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805adbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805adc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805adc7:	b9 c8 ad 00 00       	mov    $0xadc8,%ecx
 805adcc:	e8 07 3c 00 00       	call   805e9d8 <__afl_maybe_log>
 805add1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805add5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805add9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805addd:	8b 3c 24             	mov    (%esp),%edi
 805ade0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ade4:	0f b6 5c 24 20       	movzbl 0x20(%esp),%ebx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805ade9:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 805adec:	0f b6 14 0f          	movzbl (%edi,%ecx,1),%edx
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805adf0:	38 5c 24 0f          	cmp    %bl,0xf(%esp)
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
                    c = arg[++i];
 805adf4:	88 54 24 2c          	mov    %dl,0x2c(%esp)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805adf8:	0f 86 1a 0b 00 00    	jbe    805b918 <quotearg_buffer_restyled+0x2c18>
 805adfe:	66 90                	xchg   %ax,%ax
 805ae00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ae04:	89 3c 24             	mov    %edi,(%esp)
 805ae07:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ae0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ae0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ae13:	b9 79 a9 00 00       	mov    $0xa979,%ecx
 805ae18:	e8 bb 3b 00 00       	call   805e9d8 <__afl_maybe_log>
 805ae1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ae21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ae25:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ae29:	8b 3c 24             	mov    (%esp),%edi
 805ae2c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        if (elide_outer_quotes)
 805ae30:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805ae35:	0f 85 0a 19 00 00    	jne    805c745 <quotearg_buffer_restyled+0x3a45>
 805ae3b:	90                   	nop
 805ae3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ae40:	89 3c 24             	mov    %edi,(%esp)
 805ae43:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ae47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ae4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ae4f:	b9 40 8f 00 00       	mov    $0x8f40,%ecx
 805ae54:	e8 7f 3b 00 00       	call   805e9d8 <__afl_maybe_log>
 805ae59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ae5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ae61:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ae65:	8b 3c 24             	mov    (%esp),%edi
 805ae68:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805ae6c:	39 c5                	cmp    %eax,%ebp
 805ae6e:	73 38                	jae    805aea8 <quotearg_buffer_restyled+0x21a8>
 805ae70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ae74:	89 3c 24             	mov    %edi,(%esp)
 805ae77:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ae7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ae7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ae83:	b9 be 65 00 00       	mov    $0x65be,%ecx
 805ae88:	e8 4b 3b 00 00       	call   805e9d8 <__afl_maybe_log>
 805ae8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ae91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ae95:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ae99:	8b 3c 24             	mov    (%esp),%edi
 805ae9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aea0:	8b 54 24 24          	mov    0x24(%esp),%edx
 805aea4:	c6 04 2a 5c          	movb   $0x5c,(%edx,%ebp,1)
 805aea8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aeac:	89 3c 24             	mov    %edi,(%esp)
 805aeaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aeb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aeb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aebb:	b9 98 24 00 00       	mov    $0x2498,%ecx
 805aec0:	e8 13 3b 00 00       	call   805e9d8 <__afl_maybe_log>
 805aec5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aec9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aecd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aed1:	8b 3c 24             	mov    (%esp),%edi
 805aed4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aed8:	8d 5d 01             	lea    0x1(%ebp),%ebx
                        STORE ('0' + (c >> 6));
 805aedb:	39 d8                	cmp    %ebx,%eax
 805aedd:	76 48                	jbe    805af27 <quotearg_buffer_restyled+0x2227>
 805aedf:	90                   	nop
 805aee0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aee4:	89 3c 24             	mov    %edi,(%esp)
 805aee7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aeeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aeef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aef3:	b9 8b 9e 00 00       	mov    $0x9e8b,%ecx
 805aef8:	e8 db 3a 00 00       	call   805e9d8 <__afl_maybe_log>
 805aefd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805af01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805af05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805af09:	8b 3c 24             	mov    (%esp),%edi
 805af0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805af10:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
 805af15:	c0 ea 06             	shr    $0x6,%dl
 805af18:	89 d6                	mov    %edx,%esi
 805af1a:	8b 54 24 24          	mov    0x24(%esp),%edx
 805af1e:	83 c6 30             	add    $0x30,%esi
 805af21:	89 f3                	mov    %esi,%ebx
 805af23:	88 5c 2a 01          	mov    %bl,0x1(%edx,%ebp,1)
 805af27:	90                   	nop
 805af28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805af2c:	89 3c 24             	mov    %edi,(%esp)
 805af2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805af33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805af37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805af3b:	b9 89 78 00 00       	mov    $0x7889,%ecx
 805af40:	e8 93 3a 00 00       	call   805e9d8 <__afl_maybe_log>
 805af45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805af49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805af4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805af51:	8b 3c 24             	mov    (%esp),%edi
 805af54:	8d 64 24 10          	lea    0x10(%esp),%esp
 805af58:	8d 75 02             	lea    0x2(%ebp),%esi
                        STORE ('0' + ((c >> 3) & 7));
 805af5b:	39 f0                	cmp    %esi,%eax
 805af5d:	76 49                	jbe    805afa8 <quotearg_buffer_restyled+0x22a8>
 805af5f:	90                   	nop
 805af60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805af64:	89 3c 24             	mov    %edi,(%esp)
 805af67:	89 54 24 04          	mov    %edx,0x4(%esp)
 805af6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805af6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805af73:	b9 e9 5a 00 00       	mov    $0x5ae9,%ecx
 805af78:	e8 5b 3a 00 00       	call   805e9d8 <__afl_maybe_log>
 805af7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805af81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805af85:	8b 54 24 04          	mov    0x4(%esp),%edx
 805af89:	8b 3c 24             	mov    (%esp),%edi
 805af8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805af90:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805af95:	8b 74 24 24          	mov    0x24(%esp),%esi
 805af99:	c0 eb 03             	shr    $0x3,%bl
 805af9c:	89 da                	mov    %ebx,%edx
 805af9e:	83 e2 07             	and    $0x7,%edx
 805afa1:	83 c2 30             	add    $0x30,%edx
 805afa4:	88 54 2e 02          	mov    %dl,0x2(%esi,%ebp,1)
                        c = '0' + (c & 7);
 805afa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805afac:	89 3c 24             	mov    %edi,(%esp)
 805afaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805afb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805afb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805afbb:	b9 c2 5b 00 00       	mov    $0x5bc2,%ecx
 805afc0:	e8 13 3a 00 00       	call   805e9d8 <__afl_maybe_log>
 805afc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805afc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805afcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805afd1:	8b 3c 24             	mov    (%esp),%edi
 805afd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805afd8:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805afdd:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805afe0:	83 e2 07             	and    $0x7,%edx
 805afe3:	8d 5a 30             	lea    0x30(%edx),%ebx
 805afe6:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
 805afea:	66 90                	xchg   %ax,%ax
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805afec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aff0:	89 3c 24             	mov    %edi,(%esp)
 805aff3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aff7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805affb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805afff:	b9 59 b8 00 00       	mov    $0xb859,%ecx
 805b004:	e8 cf 39 00 00       	call   805e9d8 <__afl_maybe_log>
 805b009:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b00d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b011:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b015:	8b 3c 24             	mov    (%esp),%edi
 805b018:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b01c:	39 c5                	cmp    %eax,%ebp
 805b01e:	73 3c                	jae    805b05c <quotearg_buffer_restyled+0x235c>
 805b020:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b024:	89 3c 24             	mov    %edi,(%esp)
 805b027:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b02b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b02f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b033:	b9 e7 e1 00 00       	mov    $0xe1e7,%ecx
 805b038:	e8 9b 39 00 00       	call   805e9d8 <__afl_maybe_log>
 805b03d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b041:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b045:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b049:	8b 3c 24             	mov    (%esp),%edi
 805b04c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b050:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
 805b055:	8b 74 24 24          	mov    0x24(%esp),%esi
 805b059:	88 14 2e             	mov    %dl,(%esi,%ebp,1)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805b05c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b060:	89 3c 24             	mov    %edi,(%esp)
 805b063:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b067:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b06b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b06f:	b9 9f c6 00 00       	mov    $0xc69f,%ecx
 805b074:	e8 5f 39 00 00       	call   805e9d8 <__afl_maybe_log>
 805b079:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b07d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b081:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b085:	8b 3c 24             	mov    (%esp),%edi
 805b088:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b08c:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805b091:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 805b094:	0f b6 5c 0f 01       	movzbl 0x1(%edi,%ecx,1),%ebx
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805b099:	38 54 24 0f          	cmp    %dl,0xf(%esp)
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
                    c = arg[++i];
 805b09d:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805b0a1:	0f 87 29 09 00 00    	ja     805b9d0 <quotearg_buffer_restyled+0x2cd0>
 805b0a7:	90                   	nop
 805b0a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b0ac:	89 3c 24             	mov    %edi,(%esp)
 805b0af:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b0b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b0b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b0bb:	b9 f0 01 00 00       	mov    $0x1f0,%ecx
 805b0c0:	e8 13 39 00 00       	call   805e9d8 <__afl_maybe_log>
 805b0c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b0c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b0cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b0d1:	8b 3c 24             	mov    (%esp),%edi
 805b0d4:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805b0d8:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805b0dd:	0f 84 a5 00 00 00    	je     805b188 <quotearg_buffer_restyled+0x2488>
 805b0e3:	90                   	nop
 805b0e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b0e8:	89 3c 24             	mov    %edi,(%esp)
 805b0eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b0ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b0f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b0f7:	b9 a1 78 00 00       	mov    $0x78a1,%ecx
 805b0fc:	e8 d7 38 00 00       	call   805e9d8 <__afl_maybe_log>
 805b101:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b105:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b109:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b10d:	8b 3c 24             	mov    (%esp),%edi
 805b110:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805b114:	39 c5                	cmp    %eax,%ebp
 805b116:	73 38                	jae    805b150 <quotearg_buffer_restyled+0x2450>
 805b118:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b11c:	89 3c 24             	mov    %edi,(%esp)
 805b11f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b123:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b127:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b12b:	b9 44 df 00 00       	mov    $0xdf44,%ecx
 805b130:	e8 a3 38 00 00       	call   805e9d8 <__afl_maybe_log>
 805b135:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b139:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b13d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b141:	8b 3c 24             	mov    (%esp),%edi
 805b144:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b148:	8b 74 24 24          	mov    0x24(%esp),%esi
 805b14c:	c6 04 2e 5c          	movb   $0x5c,(%esi,%ebp,1)
 805b150:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b154:	89 3c 24             	mov    %edi,(%esp)
 805b157:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b15b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b15f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b163:	b9 ac dc 00 00       	mov    $0xdcac,%ecx
 805b168:	e8 6b 38 00 00       	call   805e9d8 <__afl_maybe_log>
 805b16d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b171:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b175:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b179:	8b 3c 24             	mov    (%esp),%edi
 805b17c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b180:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805b183:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805b188:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b18c:	89 3c 24             	mov    %edi,(%esp)
 805b18f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b193:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b197:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b19b:	b9 71 31 00 00       	mov    $0x3171,%ecx
 805b1a0:	e8 33 38 00 00       	call   805e9d8 <__afl_maybe_log>
 805b1a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b1a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b1ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b1b1:	8b 3c 24             	mov    (%esp),%edi
 805b1b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b1b8:	39 c5                	cmp    %eax,%ebp
 805b1ba:	73 3c                	jae    805b1f8 <quotearg_buffer_restyled+0x24f8>
 805b1bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b1c0:	89 3c 24             	mov    %edi,(%esp)
 805b1c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b1c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b1cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b1cf:	b9 ae 28 00 00       	mov    $0x28ae,%ecx
 805b1d4:	e8 ff 37 00 00       	call   805e9d8 <__afl_maybe_log>
 805b1d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b1dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b1e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b1e5:	8b 3c 24             	mov    (%esp),%edi
 805b1e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b1ec:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
 805b1f1:	8b 74 24 24          	mov    0x24(%esp),%esi
 805b1f5:	88 14 2e             	mov    %dl,(%esi,%ebp,1)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805b1f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b1fc:	89 3c 24             	mov    %edi,(%esp)
 805b1ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b203:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b207:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b20b:	b9 99 4a 00 00       	mov    $0x4a99,%ecx
 805b210:	e8 c3 37 00 00       	call   805e9d8 <__afl_maybe_log>
 805b215:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b219:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b21d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b221:	8b 3c 24             	mov    (%esp),%edi
 805b224:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b228:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805b22d:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 805b230:	0f b6 5c 0f 02       	movzbl 0x2(%edi,%ecx,1),%ebx
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805b235:	38 54 24 0f          	cmp    %dl,0xf(%esp)
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
                    c = arg[++i];
 805b239:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805b23d:	0f 87 4d 09 00 00    	ja     805bb90 <quotearg_buffer_restyled+0x2e90>
 805b243:	90                   	nop
 805b244:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b248:	89 3c 24             	mov    %edi,(%esp)
 805b24b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b24f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b253:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b257:	b9 c0 c0 00 00       	mov    $0xc0c0,%ecx
 805b25c:	e8 77 37 00 00       	call   805e9d8 <__afl_maybe_log>
 805b261:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b265:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b269:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b26d:	8b 3c 24             	mov    (%esp),%edi
 805b270:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805b274:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805b279:	0f 84 a5 00 00 00    	je     805b324 <quotearg_buffer_restyled+0x2624>
 805b27f:	90                   	nop
 805b280:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b284:	89 3c 24             	mov    %edi,(%esp)
 805b287:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b28b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b28f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b293:	b9 62 c5 00 00       	mov    $0xc562,%ecx
 805b298:	e8 3b 37 00 00       	call   805e9d8 <__afl_maybe_log>
 805b29d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b2a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b2a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b2a9:	8b 3c 24             	mov    (%esp),%edi
 805b2ac:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805b2b0:	39 c5                	cmp    %eax,%ebp
 805b2b2:	73 38                	jae    805b2ec <quotearg_buffer_restyled+0x25ec>
 805b2b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b2b8:	89 3c 24             	mov    %edi,(%esp)
 805b2bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b2bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b2c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b2c7:	b9 88 03 00 00       	mov    $0x388,%ecx
 805b2cc:	e8 07 37 00 00       	call   805e9d8 <__afl_maybe_log>
 805b2d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b2d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b2d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b2dd:	8b 3c 24             	mov    (%esp),%edi
 805b2e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b2e4:	8b 74 24 24          	mov    0x24(%esp),%esi
 805b2e8:	c6 04 2e 5c          	movb   $0x5c,(%esi,%ebp,1)
 805b2ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b2f0:	89 3c 24             	mov    %edi,(%esp)
 805b2f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b2f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b2fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b2ff:	b9 7e 3b 00 00       	mov    $0x3b7e,%ecx
 805b304:	e8 cf 36 00 00       	call   805e9d8 <__afl_maybe_log>
 805b309:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b30d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b311:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b315:	8b 3c 24             	mov    (%esp),%edi
 805b318:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b31c:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805b31f:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805b324:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b328:	89 3c 24             	mov    %edi,(%esp)
 805b32b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b32f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b333:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b337:	b9 3e 62 00 00       	mov    $0x623e,%ecx
 805b33c:	e8 97 36 00 00       	call   805e9d8 <__afl_maybe_log>
 805b341:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b345:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b349:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b34d:	8b 3c 24             	mov    (%esp),%edi
 805b350:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b354:	39 c5                	cmp    %eax,%ebp
                    else if (is_right_quote)
                      {
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
 805b356:	8d 71 03             	lea    0x3(%ecx),%esi
                      break;
                    STORE (c);
 805b359:	73 3d                	jae    805b398 <quotearg_buffer_restyled+0x2698>
 805b35b:	90                   	nop
 805b35c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b360:	89 3c 24             	mov    %edi,(%esp)
 805b363:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b367:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b36b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b36f:	b9 6e c3 00 00       	mov    $0xc36e,%ecx
 805b374:	e8 5f 36 00 00       	call   805e9d8 <__afl_maybe_log>
 805b379:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b37d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b381:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b385:	8b 3c 24             	mov    (%esp),%edi
 805b388:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b38c:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805b391:	8b 54 24 24          	mov    0x24(%esp),%edx
 805b395:	88 1c 2a             	mov    %bl,(%edx,%ebp,1)
                    c = arg[++i];
 805b398:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b39c:	89 3c 24             	mov    %edi,(%esp)
 805b39f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b3a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b3a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b3ab:	b9 6f ff 00 00       	mov    $0xff6f,%ecx
 805b3b0:	e8 23 36 00 00       	call   805e9d8 <__afl_maybe_log>
 805b3b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b3b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b3bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b3c1:	8b 3c 24             	mov    (%esp),%edi
 805b3c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b3c8:	0f b6 54 0f 03       	movzbl 0x3(%edi,%ecx,1),%edx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805b3cd:	83 c5 01             	add    $0x1,%ebp
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 805b3d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b3d4:	89 3c 24             	mov    %edi,(%esp)
 805b3d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b3db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b3df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b3e3:	b9 f7 80 00 00       	mov    $0x80f7,%ecx
 805b3e8:	e8 eb 35 00 00       	call   805e9d8 <__afl_maybe_log>
 805b3ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b3f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b3f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b3f9:	8b 3c 24             	mov    (%esp),%edi
 805b3fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b400:	0f b6 4c 24 20       	movzbl 0x20(%esp),%ecx
 805b405:	38 4c 24 0f          	cmp    %cl,0xf(%esp)
 805b409:	0f 87 51 f7 ff ff    	ja     805ab60 <quotearg_buffer_restyled+0x1e60>
 805b40f:	90                   	nop
 805b410:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b414:	89 3c 24             	mov    %edi,(%esp)
 805b417:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b41b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b41f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b423:	b9 0b f5 00 00       	mov    $0xf50b,%ecx
 805b428:	e8 ab 35 00 00       	call   805e9d8 <__afl_maybe_log>
 805b42d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b431:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b435:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b439:	8b 3c 24             	mov    (%esp),%edi
 805b43c:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805b440:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805b445:	0f 84 ba f8 ff ff    	je     805ad05 <quotearg_buffer_restyled+0x2005>
 805b44b:	90                   	nop
 805b44c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b450:	89 3c 24             	mov    %edi,(%esp)
 805b453:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b457:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b45b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b45f:	b9 df 7d 00 00       	mov    $0x7ddf,%ecx
 805b464:	e8 6f 35 00 00       	call   805e9d8 <__afl_maybe_log>
 805b469:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b46d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b471:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b475:	8b 3c 24             	mov    (%esp),%edi
 805b478:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805b47c:	39 c5                	cmp    %eax,%ebp
 805b47e:	73 38                	jae    805b4b8 <quotearg_buffer_restyled+0x27b8>
 805b480:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b484:	89 3c 24             	mov    %edi,(%esp)
 805b487:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b48b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b48f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b493:	b9 c4 c6 00 00       	mov    $0xc6c4,%ecx
 805b498:	e8 3b 35 00 00       	call   805e9d8 <__afl_maybe_log>
 805b49d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b4a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b4a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b4a9:	8b 3c 24             	mov    (%esp),%edi
 805b4ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b4b0:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805b4b4:	c6 04 2b 5c          	movb   $0x5c,(%ebx,%ebp,1)
 805b4b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b4bc:	89 3c 24             	mov    %edi,(%esp)
 805b4bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b4c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b4c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b4cb:	b9 2e 84 00 00       	mov    $0x842e,%ecx
 805b4d0:	e8 03 35 00 00       	call   805e9d8 <__afl_maybe_log>
 805b4d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b4d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b4dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b4e1:	8b 3c 24             	mov    (%esp),%edi
 805b4e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b4e8:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805b4eb:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 805b4f0:	e9 10 f8 ff ff       	jmp    805ad05 <quotearg_buffer_restyled+0x2005>
 805b4f5:	8d 76 00             	lea    0x0(%esi),%esi

    case locale_quoting_style:
    case clocale_quoting_style:
    case custom_quoting_style:
      {
        if (quoting_style != custom_quoting_style)
 805b4f8:	74 5c                	je     805b556 <quotearg_buffer_restyled+0x2856>
 805b4fa:	66 90                	xchg   %ax,%ax
 805b4fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b500:	89 3c 24             	mov    %edi,(%esp)
 805b503:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b507:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b50b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b50f:	b9 9f b5 00 00       	mov    $0xb59f,%ecx
 805b514:	e8 bf 34 00 00       	call   805e9d8 <__afl_maybe_log>
 805b519:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b51d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b521:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b525:	8b 3c 24             	mov    (%esp),%edi
 805b528:	8d 64 24 10          	lea    0x10(%esp),%esp
               for your locale.

               If you don't know what to put here, please see
               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
 805b52c:	8b 54 24 74          	mov    0x74(%esp),%edx
 805b530:	b8 3b 67 06 08       	mov    $0x806673b,%eax
 805b535:	e8 96 d3 ff ff       	call   80588d0 <gettext_quote>
            right_quote = gettext_quote (N_("'"), quoting_style);
 805b53a:	8b 54 24 74          	mov    0x74(%esp),%edx
               for your locale.

               If you don't know what to put here, please see
               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
 805b53e:	89 84 24 80 00 00 00 	mov    %eax,0x80(%esp)
            right_quote = gettext_quote (N_("'"), quoting_style);
 805b545:	b8 27 67 06 08       	mov    $0x8066727,%eax
 805b54a:	e8 81 d3 ff ff       	call   80588d0 <gettext_quote>
 805b54f:	89 84 24 84 00 00 00 	mov    %eax,0x84(%esp)
 805b556:	66 90                	xchg   %ax,%ax
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805b558:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b55c:	89 3c 24             	mov    %edi,(%esp)
 805b55f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b563:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b567:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b56b:	b9 df 12 00 00       	mov    $0x12df,%ecx
 805b570:	e8 63 34 00 00       	call   805e9d8 <__afl_maybe_log>
 805b575:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b579:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b57d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b581:	8b 3c 24             	mov    (%esp),%edi
 805b584:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b588:	31 ed                	xor    %ebp,%ebp
               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
            right_quote = gettext_quote (N_("'"), quoting_style);
          }
        if (!elide_outer_quotes)
 805b58a:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805b58f:	0f 85 2f 01 00 00    	jne    805b6c4 <quotearg_buffer_restyled+0x29c4>
 805b595:	8d 76 00             	lea    0x0(%esi),%esi
 805b598:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b59c:	89 3c 24             	mov    %edi,(%esp)
 805b59f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b5a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b5a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b5ab:	b9 2f 74 00 00       	mov    $0x742f,%ecx
 805b5b0:	e8 23 34 00 00       	call   805e9d8 <__afl_maybe_log>
 805b5b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b5b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b5bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b5c1:	8b 3c 24             	mov    (%esp),%edi
 805b5c4:	8d 64 24 10          	lea    0x10(%esp),%esp
          for (quote_string = left_quote; *quote_string; quote_string++)
 805b5c8:	8b 84 24 80 00 00 00 	mov    0x80(%esp),%eax
 805b5cf:	0f b6 00             	movzbl (%eax),%eax
 805b5d2:	84 c0                	test   %al,%al
 805b5d4:	0f 84 ea 00 00 00    	je     805b6c4 <quotearg_buffer_restyled+0x29c4>
 805b5da:	66 90                	xchg   %ax,%ax
 805b5dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b5e0:	89 3c 24             	mov    %edi,(%esp)
 805b5e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b5e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b5eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b5ef:	b9 10 37 00 00       	mov    $0x3710,%ecx
 805b5f4:	e8 df 33 00 00       	call   805e9d8 <__afl_maybe_log>
 805b5f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b5fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b601:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b605:	8b 3c 24             	mov    (%esp),%edi
 805b608:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b60c:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 805b610:	8b 54 24 10          	mov    0x10(%esp),%edx
 805b614:	8b 8c 24 80 00 00 00 	mov    0x80(%esp),%ecx
 805b61b:	90                   	nop
 805b61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
            STORE (*quote_string);
 805b620:	39 ea                	cmp    %ebp,%edx
 805b622:	76 33                	jbe    805b657 <quotearg_buffer_restyled+0x2957>
 805b624:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b628:	89 3c 24             	mov    %edi,(%esp)
 805b62b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b62f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b633:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b637:	b9 5c 96 00 00       	mov    $0x965c,%ecx
 805b63c:	e8 97 33 00 00       	call   805e9d8 <__afl_maybe_log>
 805b641:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b645:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b649:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b64d:	8b 3c 24             	mov    (%esp),%edi
 805b650:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b654:	88 04 2b             	mov    %al,(%ebx,%ebp,1)
 805b657:	90                   	nop
 805b658:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b65c:	89 3c 24             	mov    %edi,(%esp)
 805b65f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b663:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b667:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b66b:	b9 98 a4 00 00       	mov    $0xa498,%ecx
 805b670:	e8 63 33 00 00       	call   805e9d8 <__afl_maybe_log>
 805b675:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b679:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b67d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b681:	8b 3c 24             	mov    (%esp),%edi
 805b684:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b688:	83 c5 01             	add    $0x1,%ebp
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
            right_quote = gettext_quote (N_("'"), quoting_style);
          }
        if (!elide_outer_quotes)
          for (quote_string = left_quote; *quote_string; quote_string++)
 805b68b:	0f b6 04 29          	movzbl (%ecx,%ebp,1),%eax
 805b68f:	84 c0                	test   %al,%al
 805b691:	75 8d                	jne    805b620 <quotearg_buffer_restyled+0x2920>
 805b693:	90                   	nop
 805b694:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b698:	89 3c 24             	mov    %edi,(%esp)
 805b69b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b69f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b6a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b6a7:	b9 5a 45 00 00       	mov    $0x455a,%ecx
 805b6ac:	e8 27 33 00 00       	call   805e9d8 <__afl_maybe_log>
 805b6b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b6b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b6b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b6bd:	8b 3c 24             	mov    (%esp),%edi
 805b6c0:	8d 64 24 10          	lea    0x10(%esp),%esp
            STORE (*quote_string);
        backslash_escapes = true;
        quote_string = right_quote;
        quote_string_len = strlen (quote_string);
 805b6c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b6c8:	89 3c 24             	mov    %edi,(%esp)
 805b6cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b6cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b6d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b6d7:	b9 1b 69 00 00       	mov    $0x691b,%ecx
 805b6dc:	e8 f7 32 00 00       	call   805e9d8 <__afl_maybe_log>
 805b6e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b6e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b6e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b6ed:	8b 3c 24             	mov    (%esp),%edi
 805b6f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b6f4:	83 ec 0c             	sub    $0xc,%esp
 805b6f7:	ff b4 24 90 00 00 00 	pushl  0x90(%esp)
 805b6fe:	e8 9d dc fe ff       	call   80493a0 <strlen@plt>
 805b703:	83 c4 10             	add    $0x10,%esp
      }
      break;
 805b706:	8b b4 24 84 00 00 00 	mov    0x84(%esp),%esi
        if (!elide_outer_quotes)
          for (quote_string = left_quote; *quote_string; quote_string++)
            STORE (*quote_string);
        backslash_escapes = true;
        quote_string = right_quote;
        quote_string_len = strlen (quote_string);
 805b70d:	89 44 24 18          	mov    %eax,0x18(%esp)
            right_quote = gettext_quote (N_("'"), quoting_style);
          }
        if (!elide_outer_quotes)
          for (quote_string = left_quote; *quote_string; quote_string++)
            STORE (*quote_string);
        backslash_escapes = true;
 805b711:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
        quote_string = right_quote;
        quote_string_len = strlen (quote_string);
      }
      break;
 805b716:	89 74 24 28          	mov    %esi,0x28(%esp)
 805b71a:	e9 a9 d6 ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
 805b71f:	90                   	nop
      quote_string = "'";
      quote_string_len = 1;
      break;

    case literal_quoting_style:
      elide_outer_quotes = false;
 805b720:	c6 44 24 39 00       	movb   $0x0,0x39(%esp)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 805b725:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805b72a:	31 ed                	xor    %ebp,%ebp
  char const *quote_string = 0;
  size_t quote_string_len = 0;
 805b72c:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 805b733:	00 
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
 805b734:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
 805b73b:	00 
 805b73c:	e9 87 d6 ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
 805b741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805b748:	c6 44 24 39 01       	movb   $0x1,0x39(%esp)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 805b74d:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805b752:	31 ed                	xor    %ebp,%ebp
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 805b754:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805b75b:	00 
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
 805b75c:	c7 44 24 28 27 67 06 	movl   $0x8066727,0x28(%esp)
 805b763:	08 
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805b764:	c7 44 24 74 02 00 00 	movl   $0x2,0x74(%esp)
 805b76b:	00 
 805b76c:	e9 57 d6 ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
 805b771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    case shell_quoting_style:
      quoting_style = shell_always_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
 805b778:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805b77d:	0f 85 45 1b 00 00    	jne    805d2c8 <quotearg_buffer_restyled+0x45c8>
 805b783:	90                   	nop
 805b784:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b788:	89 3c 24             	mov    %edi,(%esp)
 805b78b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b78f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b793:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b797:	b9 66 a2 00 00       	mov    $0xa266,%ecx
 805b79c:	e8 37 32 00 00       	call   805e9d8 <__afl_maybe_log>
 805b7a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b7a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b7a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b7ad:	8b 3c 24             	mov    (%esp),%edi
 805b7b0:	8d 64 24 10          	lea    0x10(%esp),%esp
        STORE ('\'');
 805b7b4:	8b 74 24 10          	mov    0x10(%esp),%esi
 805b7b8:	85 f6                	test   %esi,%esi
 805b7ba:	0f 84 13 10 00 00    	je     805c7d3 <quotearg_buffer_restyled+0x3ad3>
 805b7c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b7c4:	89 3c 24             	mov    %edi,(%esp)
 805b7c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b7cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b7cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b7d3:	b9 29 a3 00 00       	mov    $0xa329,%ecx
 805b7d8:	e8 fb 31 00 00       	call   805e9d8 <__afl_maybe_log>
 805b7dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b7e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b7e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b7e9:	8b 3c 24             	mov    (%esp),%edi
 805b7ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b7f0:	8b 6c 24 1c          	mov    0x1c(%esp),%ebp
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 805b7f4:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 805b7f9:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805b800:	00 
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
 805b801:	c7 44 24 28 27 67 06 	movl   $0x8066727,0x28(%esp)
 805b808:	08 
      quoting_style = shell_always_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
 805b809:	c6 45 00 27          	movb   $0x27,0x0(%ebp)
 805b80d:	bd 01 00 00 00       	mov    $0x1,%ebp
 805b812:	e9 b1 d5 ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
 805b817:	89 f6                	mov    %esi,%esi
 805b819:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
    case c_maybe_quoting_style:
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
 805b820:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805b825:	0f 85 4f 1a 00 00    	jne    805d27a <quotearg_buffer_restyled+0x457a>
 805b82b:	90                   	nop
 805b82c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b830:	89 3c 24             	mov    %edi,(%esp)
 805b833:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b837:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b83b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b83f:	b9 d6 10 00 00       	mov    $0x10d6,%ecx
 805b844:	e8 8f 31 00 00       	call   805e9d8 <__afl_maybe_log>
 805b849:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b84d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b851:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b855:	8b 3c 24             	mov    (%esp),%edi
 805b858:	8d 64 24 10          	lea    0x10(%esp),%esp
        STORE ('"');
 805b85c:	8b 4c 24 10          	mov    0x10(%esp),%ecx
 805b860:	85 c9                	test   %ecx,%ecx
 805b862:	0f 84 bb 0f 00 00    	je     805c823 <quotearg_buffer_restyled+0x3b23>
 805b868:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b86c:	89 3c 24             	mov    %edi,(%esp)
 805b86f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b873:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b877:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b87b:	b9 9c 09 00 00       	mov    $0x99c,%ecx
 805b880:	e8 53 31 00 00       	call   805e9d8 <__afl_maybe_log>
 805b885:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b889:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b88d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b891:	8b 3c 24             	mov    (%esp),%edi
 805b894:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b898:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
      backslash_escapes = true;
 805b89c:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
 805b8a1:	bd 01 00 00 00       	mov    $0x1,%ebp
      backslash_escapes = true;
      quote_string = "\"";
      quote_string_len = 1;
 805b8a6:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805b8ad:	00 
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
 805b8ae:	c7 44 24 28 29 67 06 	movl   $0x8066729,0x28(%esp)
 805b8b5:	08 
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
 805b8b6:	c6 03 22             	movb   $0x22,(%ebx)
 805b8b9:	e9 0a d5 ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
 805b8be:	66 90                	xchg   %ax,%ax
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805b8c0:	c6 44 24 39 01       	movb   $0x1,0x39(%esp)
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
 805b8c5:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805b8ca:	31 ed                	xor    %ebp,%ebp
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
      quote_string_len = 1;
 805b8cc:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805b8d3:	00 
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
 805b8d4:	c7 44 24 28 29 67 06 	movl   $0x8066729,0x28(%esp)
 805b8db:	08 
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805b8dc:	c7 44 24 74 03 00 00 	movl   $0x3,0x74(%esp)
 805b8e3:	00 
 805b8e4:	e9 df d4 ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
 805b8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 805b8f0:	8b 44 24 14          	mov    0x14(%esp),%eax

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
    {
      unsigned char c;
      unsigned char esc;
      bool is_right_quote = false;
 805b8f4:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 805b8f9:	8d 1c 30             	lea    (%eax,%esi,1),%ebx
 805b8fc:	e9 bf d7 ff ff       	jmp    80590c0 <quotearg_buffer_restyled+0x3c0>
 805b901:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 805b908:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 805b90d:	e9 ae d7 ff ff       	jmp    80590c0 <quotearg_buffer_restyled+0x3c0>
 805b912:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 805b918:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 805b91d:	0f 84 c7 f6 ff ff    	je     805afea <quotearg_buffer_restyled+0x22ea>
 805b923:	90                   	nop
 805b924:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b928:	89 3c 24             	mov    %edi,(%esp)
 805b92b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b92f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b933:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b937:	b9 ac 06 00 00       	mov    $0x6ac,%ecx
 805b93c:	e8 97 30 00 00       	call   805e9d8 <__afl_maybe_log>
 805b941:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b945:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b949:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b94d:	8b 3c 24             	mov    (%esp),%edi
 805b950:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 805b954:	39 c5                	cmp    %eax,%ebp
 805b956:	73 38                	jae    805b990 <quotearg_buffer_restyled+0x2c90>
 805b958:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b95c:	89 3c 24             	mov    %edi,(%esp)
 805b95f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b963:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b967:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b96b:	b9 48 2d 00 00       	mov    $0x2d48,%ecx
 805b970:	e8 63 30 00 00       	call   805e9d8 <__afl_maybe_log>
 805b975:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b979:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b97d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b981:	8b 3c 24             	mov    (%esp),%edi
 805b984:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b988:	8b 74 24 24          	mov    0x24(%esp),%esi
 805b98c:	c6 04 2e 5c          	movb   $0x5c,(%esi,%ebp,1)
 805b990:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b994:	89 3c 24             	mov    %edi,(%esp)
 805b997:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b99b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b99f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b9a3:	b9 04 f8 00 00       	mov    $0xf804,%ecx
 805b9a8:	e8 2b 30 00 00       	call   805e9d8 <__afl_maybe_log>
 805b9ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b9b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b9b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b9b9:	8b 3c 24             	mov    (%esp),%edi
 805b9bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b9c0:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805b9c3:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 805b9c8:	e9 1d f6 ff ff       	jmp    805afea <quotearg_buffer_restyled+0x22ea>
 805b9cd:	8d 76 00             	lea    0x0(%esi),%esi

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805b9d0:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805b9d5:	0f 85 6a 0d 00 00    	jne    805c745 <quotearg_buffer_restyled+0x3a45>
 805b9db:	90                   	nop
 805b9dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b9e0:	89 3c 24             	mov    %edi,(%esp)
 805b9e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b9e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b9eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b9ef:	b9 60 8e 00 00       	mov    $0x8e60,%ecx
 805b9f4:	e8 df 2f 00 00       	call   805e9d8 <__afl_maybe_log>
 805b9f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b9fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ba01:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ba05:	8b 3c 24             	mov    (%esp),%edi
 805ba08:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805ba0c:	39 c5                	cmp    %eax,%ebp
 805ba0e:	73 38                	jae    805ba48 <quotearg_buffer_restyled+0x2d48>
 805ba10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ba14:	89 3c 24             	mov    %edi,(%esp)
 805ba17:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ba1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ba1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ba23:	b9 3d b3 00 00       	mov    $0xb33d,%ecx
 805ba28:	e8 ab 2f 00 00       	call   805e9d8 <__afl_maybe_log>
 805ba2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ba31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ba35:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ba39:	8b 3c 24             	mov    (%esp),%edi
 805ba3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ba40:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805ba44:	c6 04 2b 5c          	movb   $0x5c,(%ebx,%ebp,1)
 805ba48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ba4c:	89 3c 24             	mov    %edi,(%esp)
 805ba4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ba53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ba57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ba5b:	b9 ec 3c 00 00       	mov    $0x3cec,%ecx
 805ba60:	e8 73 2f 00 00       	call   805e9d8 <__afl_maybe_log>
 805ba65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ba69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ba6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ba71:	8b 3c 24             	mov    (%esp),%edi
 805ba74:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ba78:	8d 55 01             	lea    0x1(%ebp),%edx
                        STORE ('0' + (c >> 6));
 805ba7b:	39 d0                	cmp    %edx,%eax
 805ba7d:	76 48                	jbe    805bac7 <quotearg_buffer_restyled+0x2dc7>
 805ba7f:	90                   	nop
 805ba80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ba84:	89 3c 24             	mov    %edi,(%esp)
 805ba87:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ba8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ba8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ba93:	b9 57 c9 00 00       	mov    $0xc957,%ecx
 805ba98:	e8 3b 2f 00 00       	call   805e9d8 <__afl_maybe_log>
 805ba9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805baa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805baa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805baa9:	8b 3c 24             	mov    (%esp),%edi
 805baac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bab0:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805bab5:	8b 54 24 24          	mov    0x24(%esp),%edx
 805bab9:	c0 eb 06             	shr    $0x6,%bl
 805babc:	89 de                	mov    %ebx,%esi
 805babe:	83 c6 30             	add    $0x30,%esi
 805bac1:	89 f3                	mov    %esi,%ebx
 805bac3:	88 5c 2a 01          	mov    %bl,0x1(%edx,%ebp,1)
 805bac7:	90                   	nop
 805bac8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bacc:	89 3c 24             	mov    %edi,(%esp)
 805bacf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bad3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bad7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805badb:	b9 83 db 00 00       	mov    $0xdb83,%ecx
 805bae0:	e8 f3 2e 00 00       	call   805e9d8 <__afl_maybe_log>
 805bae5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bae9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805baed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805baf1:	8b 3c 24             	mov    (%esp),%edi
 805baf4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805baf8:	8d 75 02             	lea    0x2(%ebp),%esi
                        STORE ('0' + ((c >> 3) & 7));
 805bafb:	39 f0                	cmp    %esi,%eax
 805bafd:	76 49                	jbe    805bb48 <quotearg_buffer_restyled+0x2e48>
 805baff:	90                   	nop
 805bb00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bb04:	89 3c 24             	mov    %edi,(%esp)
 805bb07:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bb0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bb0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bb13:	b9 d3 f3 00 00       	mov    $0xf3d3,%ecx
 805bb18:	e8 bb 2e 00 00       	call   805e9d8 <__afl_maybe_log>
 805bb1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bb21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bb25:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bb29:	8b 3c 24             	mov    (%esp),%edi
 805bb2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bb30:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805bb35:	8b 74 24 24          	mov    0x24(%esp),%esi
 805bb39:	c0 eb 03             	shr    $0x3,%bl
 805bb3c:	89 da                	mov    %ebx,%edx
 805bb3e:	83 e2 07             	and    $0x7,%edx
 805bb41:	83 c2 30             	add    $0x30,%edx
 805bb44:	88 54 2e 02          	mov    %dl,0x2(%esi,%ebp,1)
                        c = '0' + (c & 7);
 805bb48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bb4c:	89 3c 24             	mov    %edi,(%esp)
 805bb4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bb53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bb57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bb5b:	b9 7a 60 00 00       	mov    $0x607a,%ecx
 805bb60:	e8 73 2e 00 00       	call   805e9d8 <__afl_maybe_log>
 805bb65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bb69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bb6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bb71:	8b 3c 24             	mov    (%esp),%edi
 805bb74:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bb78:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805bb7d:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805bb80:	83 e2 07             	and    $0x7,%edx
 805bb83:	8d 5a 30             	lea    0x30(%edx),%ebx
 805bb86:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
 805bb8a:	e9 f9 f5 ff ff       	jmp    805b188 <quotearg_buffer_restyled+0x2488>
 805bb8f:	90                   	nop

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805bb90:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805bb95:	0f 85 aa 0b 00 00    	jne    805c745 <quotearg_buffer_restyled+0x3a45>
 805bb9b:	90                   	nop
 805bb9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bba0:	89 3c 24             	mov    %edi,(%esp)
 805bba3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bba7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bbab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bbaf:	b9 f3 0c 00 00       	mov    $0xcf3,%ecx
 805bbb4:	e8 1f 2e 00 00       	call   805e9d8 <__afl_maybe_log>
 805bbb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bbbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bbc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bbc5:	8b 3c 24             	mov    (%esp),%edi
 805bbc8:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805bbcc:	39 c5                	cmp    %eax,%ebp
 805bbce:	73 38                	jae    805bc08 <quotearg_buffer_restyled+0x2f08>
 805bbd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bbd4:	89 3c 24             	mov    %edi,(%esp)
 805bbd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bbdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bbdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bbe3:	b9 4a 8f 00 00       	mov    $0x8f4a,%ecx
 805bbe8:	e8 eb 2d 00 00       	call   805e9d8 <__afl_maybe_log>
 805bbed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bbf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bbf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bbf9:	8b 3c 24             	mov    (%esp),%edi
 805bbfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bc00:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805bc04:	c6 04 2b 5c          	movb   $0x5c,(%ebx,%ebp,1)
 805bc08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bc0c:	89 3c 24             	mov    %edi,(%esp)
 805bc0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bc13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bc17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bc1b:	b9 d7 3c 00 00       	mov    $0x3cd7,%ecx
 805bc20:	e8 b3 2d 00 00       	call   805e9d8 <__afl_maybe_log>
 805bc25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bc29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bc2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bc31:	8b 3c 24             	mov    (%esp),%edi
 805bc34:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bc38:	8d 55 01             	lea    0x1(%ebp),%edx
                        STORE ('0' + (c >> 6));
 805bc3b:	39 d0                	cmp    %edx,%eax
 805bc3d:	76 48                	jbe    805bc87 <quotearg_buffer_restyled+0x2f87>
 805bc3f:	90                   	nop
 805bc40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bc44:	89 3c 24             	mov    %edi,(%esp)
 805bc47:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bc4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bc4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bc53:	b9 5c 0a 00 00       	mov    $0xa5c,%ecx
 805bc58:	e8 7b 2d 00 00       	call   805e9d8 <__afl_maybe_log>
 805bc5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bc61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bc65:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bc69:	8b 3c 24             	mov    (%esp),%edi
 805bc6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bc70:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805bc75:	8b 54 24 24          	mov    0x24(%esp),%edx
 805bc79:	c0 eb 06             	shr    $0x6,%bl
 805bc7c:	89 de                	mov    %ebx,%esi
 805bc7e:	83 c6 30             	add    $0x30,%esi
 805bc81:	89 f3                	mov    %esi,%ebx
 805bc83:	88 5c 2a 01          	mov    %bl,0x1(%edx,%ebp,1)
 805bc87:	90                   	nop
 805bc88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bc8c:	89 3c 24             	mov    %edi,(%esp)
 805bc8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bc93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bc97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bc9b:	b9 e5 d7 00 00       	mov    $0xd7e5,%ecx
 805bca0:	e8 33 2d 00 00       	call   805e9d8 <__afl_maybe_log>
 805bca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bca9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bcad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bcb1:	8b 3c 24             	mov    (%esp),%edi
 805bcb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bcb8:	8d 75 02             	lea    0x2(%ebp),%esi
                        STORE ('0' + ((c >> 3) & 7));
 805bcbb:	39 f0                	cmp    %esi,%eax
 805bcbd:	76 49                	jbe    805bd08 <quotearg_buffer_restyled+0x3008>
 805bcbf:	90                   	nop
 805bcc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bcc4:	89 3c 24             	mov    %edi,(%esp)
 805bcc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bccb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bccf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bcd3:	b9 6e 48 00 00       	mov    $0x486e,%ecx
 805bcd8:	e8 fb 2c 00 00       	call   805e9d8 <__afl_maybe_log>
 805bcdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bce1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bce5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bce9:	8b 3c 24             	mov    (%esp),%edi
 805bcec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bcf0:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805bcf5:	8b 74 24 24          	mov    0x24(%esp),%esi
 805bcf9:	c0 eb 03             	shr    $0x3,%bl
 805bcfc:	89 da                	mov    %ebx,%edx
 805bcfe:	83 e2 07             	and    $0x7,%edx
 805bd01:	83 c2 30             	add    $0x30,%edx
 805bd04:	88 54 2e 02          	mov    %dl,0x2(%esi,%ebp,1)
                        c = '0' + (c & 7);
 805bd08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bd0c:	89 3c 24             	mov    %edi,(%esp)
 805bd0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bd13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bd17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bd1b:	b9 00 b9 00 00       	mov    $0xb900,%ecx
 805bd20:	e8 b3 2c 00 00       	call   805e9d8 <__afl_maybe_log>
 805bd25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bd29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bd2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bd31:	8b 3c 24             	mov    (%esp),%edi
 805bd34:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bd38:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805bd3d:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805bd40:	83 e2 07             	and    $0x7,%edx
 805bd43:	8d 5a 30             	lea    0x30(%edx),%ebx
 805bd46:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
 805bd4a:	e9 d5 f5 ff ff       	jmp    805b324 <quotearg_buffer_restyled+0x2624>
 805bd4f:	90                   	nop
                mbstate_t mbstate;
                memset (&mbstate, 0, sizeof mbstate);

                m = 0;
                printable = true;
                if (argsize == SIZE_MAX)
 805bd50:	83 ff ff             	cmp    $0xffffffff,%edi
 805bd53:	c7 44 24 48 00 00 00 	movl   $0x0,0x48(%esp)
 805bd5a:	00 
 805bd5b:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%esp)
 805bd62:	00 
 805bd63:	0f 84 18 0a 00 00    	je     805c781 <quotearg_buffer_restyled+0x3a81>
 805bd69:	8d 76 00             	lea    0x0(%esi),%esi
 805bd6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bd70:	89 3c 24             	mov    %edi,(%esp)
 805bd73:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bd77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bd7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bd7f:	b9 a5 c7 00 00       	mov    $0xc7a5,%ecx
 805bd84:	e8 4f 2c 00 00       	call   805e9d8 <__afl_maybe_log>
 805bd89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bd8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bd91:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bd95:	8b 3c 24             	mov    (%esp),%edi
 805bd98:	8d 64 24 10          	lea    0x10(%esp),%esp
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
        case '\t': esc = 't'; goto c_and_shell_escape;
        case '\v': esc = 'v'; goto c_escape;
 805bd9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bda0:	89 3c 24             	mov    %edi,(%esp)
 805bda3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bda7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bdab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bdaf:	b9 68 0d 00 00       	mov    $0xd68,%ecx
 805bdb4:	e8 1f 2c 00 00       	call   805e9d8 <__afl_maybe_log>
 805bdb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bdbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bdc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bdc5:	8b 3c 24             	mov    (%esp),%edi
 805bdc8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bdcc:	c6 44 24 20 01       	movb   $0x1,0x20(%esp)
 805bdd1:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
 805bdd8:	00 
                                  break;
                                }
                          }

                        if (! iswprint (w))
                          printable = false;
 805bdd9:	89 74 24 2c          	mov    %esi,0x2c(%esp)
 805bddd:	89 6c 24 30          	mov    %ebp,0x30(%esp)
 805bde1:	88 54 24 3b          	mov    %dl,0x3b(%esp)
 805bde5:	89 5c 24 3c          	mov    %ebx,0x3c(%esp)
 805bde9:	8d 76 00             	lea    0x0(%esi),%esi

                do
                  {
                    wchar_t w;
                    size_t bytes = mbrtowc (&w, &arg[i + m],
                                            argsize - (i + m), &mbstate);
 805bdec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bdf0:	89 3c 24             	mov    %edi,(%esp)
 805bdf3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bdf7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bdfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bdff:	b9 0e 2f 00 00       	mov    $0x2f0e,%ecx
 805be04:	e8 cf 2b 00 00       	call   805e9d8 <__afl_maybe_log>
 805be09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805be0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805be11:	8b 54 24 04          	mov    0x4(%esp),%edx
 805be15:	8b 3c 24             	mov    (%esp),%edi
 805be18:	8d 64 24 10          	lea    0x10(%esp),%esp
 805be1c:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805be20:	03 5c 24 2c          	add    0x2c(%esp),%ebx
                  argsize = strlen (arg);

                do
                  {
                    wchar_t w;
                    size_t bytes = mbrtowc (&w, &arg[i + m],
 805be24:	8d 4c 24 48          	lea    0x48(%esp),%ecx
 805be28:	8b 74 24 14          	mov    0x14(%esp),%esi
 805be2c:	89 fa                	mov    %edi,%edx
 805be2e:	51                   	push   %ecx
 805be2f:	8d 34 1e             	lea    (%esi,%ebx,1),%esi
 805be32:	29 da                	sub    %ebx,%edx
 805be34:	52                   	push   %edx
 805be35:	56                   	push   %esi
 805be36:	8d 44 24 50          	lea    0x50(%esp),%eax
 805be3a:	50                   	push   %eax
 805be3b:	e8 60 d4 fe ff       	call   80492a0 <mbrtowc@plt>
                                            argsize - (i + m), &mbstate);
                    if (bytes == 0)
 805be40:	83 c4 10             	add    $0x10,%esp
 805be43:	85 c0                	test   %eax,%eax
                  argsize = strlen (arg);

                do
                  {
                    wchar_t w;
                    size_t bytes = mbrtowc (&w, &arg[i + m],
 805be45:	89 c5                	mov    %eax,%ebp
                                            argsize - (i + m), &mbstate);
                    if (bytes == 0)
 805be47:	0f 84 87 02 00 00    	je     805c0d4 <quotearg_buffer_restyled+0x33d4>
 805be4d:	8d 76 00             	lea    0x0(%esi),%esi
 805be50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805be54:	89 3c 24             	mov    %edi,(%esp)
 805be57:	89 54 24 04          	mov    %edx,0x4(%esp)
 805be5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805be5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805be63:	b9 f7 34 00 00       	mov    $0x34f7,%ecx
 805be68:	e8 6b 2b 00 00       	call   805e9d8 <__afl_maybe_log>
 805be6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805be71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805be75:	8b 54 24 04          	mov    0x4(%esp),%edx
 805be79:	8b 3c 24             	mov    (%esp),%edi
 805be7c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      break;
                    else if (bytes == (size_t) -1)
 805be80:	83 f8 ff             	cmp    $0xffffffff,%eax
 805be83:	0f 84 24 0b 00 00    	je     805c9ad <quotearg_buffer_restyled+0x3cad>
 805be89:	8d 76 00             	lea    0x0(%esi),%esi
 805be8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805be90:	89 3c 24             	mov    %edi,(%esp)
 805be93:	89 54 24 04          	mov    %edx,0x4(%esp)
 805be97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805be9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805be9f:	b9 09 90 00 00       	mov    $0x9009,%ecx
 805bea4:	e8 2f 2b 00 00       	call   805e9d8 <__afl_maybe_log>
 805bea9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bead:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805beb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805beb5:	8b 3c 24             	mov    (%esp),%edi
 805beb8:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        printable = false;
                        break;
                      }
                    else if (bytes == (size_t) -2)
 805bebc:	83 f8 fe             	cmp    $0xfffffffe,%eax
 805bebf:	0f 84 32 0b 00 00    	je     805c9f7 <quotearg_buffer_restyled+0x3cf7>
 805bec5:	8d 76 00             	lea    0x0(%esi),%esi
 805bec8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805becc:	89 3c 24             	mov    %edi,(%esp)
 805becf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bed3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bed7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bedb:	b9 47 2a 00 00       	mov    $0x2a47,%ecx
 805bee0:	e8 f3 2a 00 00       	call   805e9d8 <__afl_maybe_log>
 805bee5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bee9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805beed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bef1:	8b 3c 24             	mov    (%esp),%edi
 805bef4:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        /* Work around a bug with older shells that "see" a '\'
                           that is really the 2nd byte of a multibyte character.
                           In practice the problem is limited to ASCII
                           chars >= '@' that are shell special chars.  */
                        if ('[' == 0x5b && elide_outer_quotes
 805bef8:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805befd:	0f 84 35 01 00 00    	je     805c038 <quotearg_buffer_restyled+0x3338>
 805bf03:	90                   	nop
 805bf04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bf08:	89 3c 24             	mov    %edi,(%esp)
 805bf0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bf0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bf13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bf17:	b9 64 8e 00 00       	mov    $0x8e64,%ecx
 805bf1c:	e8 b7 2a 00 00       	call   805e9d8 <__afl_maybe_log>
 805bf21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bf25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bf29:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bf2d:	8b 3c 24             	mov    (%esp),%edi
 805bf30:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bf34:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 805bf39:	0f 85 f9 00 00 00    	jne    805c038 <quotearg_buffer_restyled+0x3338>
 805bf3f:	90                   	nop
 805bf40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bf44:	89 3c 24             	mov    %edi,(%esp)
 805bf47:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bf4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bf4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bf53:	b9 d9 1a 00 00       	mov    $0x1ad9,%ecx
 805bf58:	e8 7b 2a 00 00       	call   805e9d8 <__afl_maybe_log>
 805bf5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bf61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bf65:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bf69:	8b 3c 24             	mov    (%esp),%edi
 805bf6c:	8d 64 24 10          	lea    0x10(%esp),%esp
                            && quoting_style == shell_always_quoting_style)
                          {
                            size_t j;
                            for (j = 1; j < bytes; j++)
 805bf70:	83 f8 01             	cmp    $0x1,%eax
 805bf73:	0f 84 bf 00 00 00    	je     805c038 <quotearg_buffer_restyled+0x3338>
 805bf79:	8d 76 00             	lea    0x0(%esi),%esi
 805bf7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bf80:	89 3c 24             	mov    %edi,(%esp)
 805bf83:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bf87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bf8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bf8f:	b9 b4 97 00 00       	mov    $0x97b4,%ecx
 805bf94:	e8 3f 2a 00 00       	call   805e9d8 <__afl_maybe_log>
 805bf99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bf9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bfa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bfa5:	8b 3c 24             	mov    (%esp),%edi
 805bfa8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bfac:	bb 01 00 00 00       	mov    $0x1,%ebx
 805bfb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
                              switch (arg[i + m + j])
 805bfb8:	0f b6 0c 1e          	movzbl (%esi,%ebx,1),%ecx
 805bfbc:	8d 51 a5             	lea    -0x5b(%ecx),%edx
 805bfbf:	80 fa 21             	cmp    $0x21,%dl
 805bfc2:	77 3c                	ja     805c000 <quotearg_buffer_restyled+0x3300>
 805bfc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bfc8:	89 3c 24             	mov    %edi,(%esp)
 805bfcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bfcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bfd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bfd7:	b9 44 ae 00 00       	mov    $0xae44,%ecx
 805bfdc:	e8 f7 29 00 00       	call   805e9d8 <__afl_maybe_log>
 805bfe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bfe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bfe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bfed:	8b 3c 24             	mov    (%esp),%edi
 805bff0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bff4:	0f b6 c2             	movzbl %dl,%eax
 805bff7:	ff 24 85 a0 69 06 08 	jmp    *0x80669a0(,%eax,4)
 805bffe:	66 90                	xchg   %ax,%ax
                           chars >= '@' that are shell special chars.  */
                        if ('[' == 0x5b && elide_outer_quotes
                            && quoting_style == shell_always_quoting_style)
                          {
                            size_t j;
                            for (j = 1; j < bytes; j++)
 805c000:	83 c3 01             	add    $0x1,%ebx
 805c003:	39 eb                	cmp    %ebp,%ebx
 805c005:	75 b1                	jne    805bfb8 <quotearg_buffer_restyled+0x32b8>
 805c007:	90                   	nop
 805c008:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c00c:	89 3c 24             	mov    %edi,(%esp)
 805c00f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c013:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c017:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c01b:	b9 a0 b8 00 00       	mov    $0xb8a0,%ecx
 805c020:	e8 b3 29 00 00       	call   805e9d8 <__afl_maybe_log>
 805c025:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c029:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c02d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c031:	8b 3c 24             	mov    (%esp),%edi
 805c034:	8d 64 24 10          	lea    0x10(%esp),%esp
                                default:
                                  break;
                                }
                          }

                        if (! iswprint (w))
 805c038:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c03c:	89 3c 24             	mov    %edi,(%esp)
 805c03f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c043:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c047:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c04b:	b9 98 b7 00 00       	mov    $0xb798,%ecx
 805c050:	e8 83 29 00 00       	call   805e9d8 <__afl_maybe_log>
 805c055:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c059:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c05d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c061:	8b 3c 24             	mov    (%esp),%edi
 805c064:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c068:	83 ec 0c             	sub    $0xc,%esp
 805c06b:	ff 74 24 50          	pushl  0x50(%esp)
 805c06f:	e8 cc d1 fe ff       	call   8049240 <iswprint@plt>
 805c074:	5b                   	pop    %ebx
                          printable = false;
 805c075:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 805c07a:	85 c0                	test   %eax,%eax
 805c07c:	b9 00 00 00 00       	mov    $0x0,%ecx
                        m += bytes;
                      }
                  }
                while (! mbsinit (&mbstate));
 805c081:	8d 74 24 54          	lea    0x54(%esp),%esi
                                  break;
                                }
                          }

                        if (! iswprint (w))
                          printable = false;
 805c085:	0f 44 d9             	cmove  %ecx,%ebx
                        m += bytes;
 805c088:	01 6c 24 30          	add    %ebp,0x30(%esp)
                                  break;
                                }
                          }

                        if (! iswprint (w))
                          printable = false;
 805c08c:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
                        m += bytes;
                      }
                  }
                while (! mbsinit (&mbstate));
 805c090:	56                   	push   %esi
 805c091:	e8 2a d1 fe ff       	call   80491c0 <mbsinit@plt>
 805c096:	83 c4 10             	add    $0x10,%esp
 805c099:	85 c0                	test   %eax,%eax
 805c09b:	0f 84 48 fd ff ff    	je     805bde9 <quotearg_buffer_restyled+0x30e9>
 805c0a1:	8d 76 00             	lea    0x0(%esi),%esi
 805c0a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c0a8:	89 3c 24             	mov    %edi,(%esp)
 805c0ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c0af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c0b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c0b7:	b9 6d cf 00 00       	mov    $0xcf6d,%ecx
 805c0bc:	e8 17 29 00 00       	call   805e9d8 <__afl_maybe_log>
 805c0c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c0c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c0c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c0cd:	8b 3c 24             	mov    (%esp),%edi
 805c0d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c0d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c0d8:	89 3c 24             	mov    %edi,(%esp)
 805c0db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c0df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c0e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c0e7:	b9 a9 82 00 00       	mov    $0x82a9,%ecx
 805c0ec:	e8 e7 28 00 00       	call   805e9d8 <__afl_maybe_log>
 805c0f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c0f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c0f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c0fd:	8b 3c 24             	mov    (%esp),%edi
 805c100:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c104:	0f b6 54 24 3b       	movzbl 0x3b(%esp),%edx
 805c109:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 805c10d:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 805c111:	8d 76 00             	lea    0x0(%esi),%esi
              }

            if (1 < m || (backslash_escapes && ! printable))
 805c114:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c118:	89 3c 24             	mov    %edi,(%esp)
 805c11b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c11f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c123:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c127:	b9 9b d2 00 00       	mov    $0xd29b,%ecx
 805c12c:	e8 a7 28 00 00       	call   805e9d8 <__afl_maybe_log>
 805c131:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c135:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c139:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c13d:	8b 3c 24             	mov    (%esp),%edi
 805c140:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c144:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
 805c149:	0f 87 b9 e3 ff ff    	ja     805a508 <quotearg_buffer_restyled+0x1808>
 805c14f:	90                   	nop
 805c150:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c154:	89 3c 24             	mov    %edi,(%esp)
 805c157:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c15b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c15f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c163:	b9 b2 de 00 00       	mov    $0xdeb2,%ecx
 805c168:	e8 6b 28 00 00       	call   805e9d8 <__afl_maybe_log>
 805c16d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c171:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c175:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c179:	8b 3c 24             	mov    (%esp),%edi
 805c17c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c180:	e9 10 e3 ff ff       	jmp    805a495 <quotearg_buffer_restyled+0x1795>
 805c185:	8d 76 00             	lea    0x0(%esi),%esi
              /* We don't have to worry that this last '0' will be
                 backslash-escaped because, again, quote_string should
                 not start with it and because quote_these_too is
                 documented as not accepting it.  */
            }
          else if (flags & QA_ELIDE_NULL_BYTES)
 805c188:	f6 44 24 78 01       	testb  $0x1,0x78(%esp)
 805c18d:	0f 84 5d d3 ff ff    	je     80594f0 <quotearg_buffer_restyled+0x7f0>
 805c193:	90                   	nop
 805c194:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c198:	89 3c 24             	mov    %edi,(%esp)
 805c19b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c19f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c1a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c1a7:	b9 c1 0d 00 00       	mov    $0xdc1,%ecx
 805c1ac:	e8 27 28 00 00       	call   805e9d8 <__afl_maybe_log>
 805c1b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c1b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c1b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c1bd:	8b 3c 24             	mov    (%esp),%edi
 805c1c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c1c4:	83 c6 01             	add    $0x1,%esi
 805c1c7:	e9 0a cc ff ff       	jmp    8058dd6 <quotearg_buffer_restyled+0xd6>
 805c1cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 805c1d0:	89 5c 24 30          	mov    %ebx,0x30(%esp)
 805c1d4:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 805c1d8:	89 7c 24 70          	mov    %edi,0x70(%esp)
 805c1dc:	8b 44 24 10          	mov    0x10(%esp),%eax
 805c1e0:	8b 7c 24 14          	mov    0x14(%esp),%edi
 805c1e4:	89 5c 24 24          	mov    %ebx,0x24(%esp)
 805c1e8:	e9 e3 f1 ff ff       	jmp    805b3d0 <quotearg_buffer_restyled+0x26d0>
 805c1ed:	8d 76 00             	lea    0x0(%esi),%esi
              goto store_escape;
            }
          break;

        case '{': case '}': /* sometimes special if isolated */
          if (! (argsize == SIZE_MAX ? arg[1] == '\0' : argsize == 1))
 805c1f0:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 805c1f4:	80 7b 01 00          	cmpb   $0x0,0x1(%ebx)
 805c1f8:	0f 95 c0             	setne  %al
 805c1fb:	e9 80 d9 ff ff       	jmp    8059b80 <quotearg_buffer_restyled+0xe80>

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805c200:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805c205:	0f 85 25 db ff ff    	jne    8059d30 <quotearg_buffer_restyled+0x1030>
 805c20b:	90                   	nop
 805c20c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c210:	89 3c 24             	mov    %edi,(%esp)
 805c213:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c217:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c21b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c21f:	b9 a2 0a 00 00       	mov    $0xaa2,%ecx
 805c224:	e8 af 27 00 00       	call   805e9d8 <__afl_maybe_log>
 805c229:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c22d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c231:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c235:	8b 3c 24             	mov    (%esp),%edi
 805c238:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805c23c:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805c240:	73 3a                	jae    805c27c <quotearg_buffer_restyled+0x357c>
 805c242:	66 90                	xchg   %ax,%ax
 805c244:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c248:	89 3c 24             	mov    %edi,(%esp)
 805c24b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c24f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c253:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c257:	b9 3d 3e 00 00       	mov    $0x3e3d,%ecx
 805c25c:	e8 77 27 00 00       	call   805e9d8 <__afl_maybe_log>
 805c261:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c265:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c269:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c26d:	8b 3c 24             	mov    (%esp),%edi
 805c270:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c274:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805c278:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 805c27c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c280:	89 3c 24             	mov    %edi,(%esp)
 805c283:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c287:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c28b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c28f:	b9 2f bb 00 00       	mov    $0xbb2f,%ecx
 805c294:	e8 3f 27 00 00       	call   805e9d8 <__afl_maybe_log>
 805c299:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c29d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c2a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c2a5:	8b 3c 24             	mov    (%esp),%edi
 805c2a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c2ac:	8d 4d 01             	lea    0x1(%ebp),%ecx
                        STORE ('0' + (c >> 6));
 805c2af:	39 4c 24 10          	cmp    %ecx,0x10(%esp)
 805c2b3:	76 43                	jbe    805c2f8 <quotearg_buffer_restyled+0x35f8>
 805c2b5:	8d 76 00             	lea    0x0(%esi),%esi
 805c2b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c2bc:	89 3c 24             	mov    %edi,(%esp)
 805c2bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c2c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c2c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c2cb:	b9 a3 ca 00 00       	mov    $0xcaa3,%ecx
 805c2d0:	e8 03 27 00 00       	call   805e9d8 <__afl_maybe_log>
 805c2d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c2d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c2dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c2e1:	8b 3c 24             	mov    (%esp),%edi
 805c2e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c2e8:	89 d0                	mov    %edx,%eax
 805c2ea:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c2ee:	c0 e8 06             	shr    $0x6,%al
 805c2f1:	83 c0 30             	add    $0x30,%eax
 805c2f4:	88 44 29 01          	mov    %al,0x1(%ecx,%ebp,1)
 805c2f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c2fc:	89 3c 24             	mov    %edi,(%esp)
 805c2ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c303:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c307:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c30b:	b9 c2 1b 00 00       	mov    $0x1bc2,%ecx
 805c310:	e8 c3 26 00 00       	call   805e9d8 <__afl_maybe_log>
 805c315:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c319:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c31d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c321:	8b 3c 24             	mov    (%esp),%edi
 805c324:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c328:	8d 45 02             	lea    0x2(%ebp),%eax
                        STORE ('0' + ((c >> 3) & 7));
 805c32b:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805c32f:	76 46                	jbe    805c377 <quotearg_buffer_restyled+0x3677>
 805c331:	8d 76 00             	lea    0x0(%esi),%esi
 805c334:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c338:	89 3c 24             	mov    %edi,(%esp)
 805c33b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c33f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c343:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c347:	b9 27 01 00 00       	mov    $0x127,%ecx
 805c34c:	e8 87 26 00 00       	call   805e9d8 <__afl_maybe_log>
 805c351:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c355:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c359:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c35d:	8b 3c 24             	mov    (%esp),%edi
 805c360:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c364:	89 d0                	mov    %edx,%eax
 805c366:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c36a:	c0 e8 03             	shr    $0x3,%al
 805c36d:	83 e0 07             	and    $0x7,%eax
 805c370:	83 c0 30             	add    $0x30,%eax
 805c373:	88 44 29 02          	mov    %al,0x2(%ecx,%ebp,1)
 805c377:	90                   	nop
                        c = '0' + (c & 7);
 805c378:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c37c:	89 3c 24             	mov    %edi,(%esp)
 805c37f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c383:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c387:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c38b:	b9 3c 6b 00 00       	mov    $0x6b3c,%ecx
 805c390:	e8 43 26 00 00       	call   805e9d8 <__afl_maybe_log>
 805c395:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c399:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c39d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c3a1:	8b 3c 24             	mov    (%esp),%edi
 805c3a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c3a8:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805c3ab:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805c3ae:	8d 52 30             	lea    0x30(%edx),%edx
 805c3b1:	e9 be e2 ff ff       	jmp    805a674 <quotearg_buffer_restyled+0x1974>
 805c3b6:	8d 76 00             	lea    0x0(%esi),%esi
 805c3b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805c3c0:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805c3c5:	0f 85 65 d9 ff ff    	jne    8059d30 <quotearg_buffer_restyled+0x1030>
 805c3cb:	90                   	nop
 805c3cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c3d0:	89 3c 24             	mov    %edi,(%esp)
 805c3d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c3d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c3db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c3df:	b9 d4 22 00 00       	mov    $0x22d4,%ecx
 805c3e4:	e8 ef 25 00 00       	call   805e9d8 <__afl_maybe_log>
 805c3e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c3ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c3f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c3f5:	8b 3c 24             	mov    (%esp),%edi
 805c3f8:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805c3fc:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805c400:	73 3a                	jae    805c43c <quotearg_buffer_restyled+0x373c>
 805c402:	66 90                	xchg   %ax,%ax
 805c404:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c408:	89 3c 24             	mov    %edi,(%esp)
 805c40b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c40f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c413:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c417:	b9 b1 71 00 00       	mov    $0x71b1,%ecx
 805c41c:	e8 b7 25 00 00       	call   805e9d8 <__afl_maybe_log>
 805c421:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c425:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c429:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c42d:	8b 3c 24             	mov    (%esp),%edi
 805c430:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c434:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c438:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 805c43c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c440:	89 3c 24             	mov    %edi,(%esp)
 805c443:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c447:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c44b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c44f:	b9 1a 06 00 00       	mov    $0x61a,%ecx
 805c454:	e8 7f 25 00 00       	call   805e9d8 <__afl_maybe_log>
 805c459:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c45d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c461:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c465:	8b 3c 24             	mov    (%esp),%edi
 805c468:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c46c:	8d 45 01             	lea    0x1(%ebp),%eax
                        STORE ('0' + (c >> 6));
 805c46f:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805c473:	76 43                	jbe    805c4b8 <quotearg_buffer_restyled+0x37b8>
 805c475:	8d 76 00             	lea    0x0(%esi),%esi
 805c478:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c47c:	89 3c 24             	mov    %edi,(%esp)
 805c47f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c483:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c487:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c48b:	b9 34 b2 00 00       	mov    $0xb234,%ecx
 805c490:	e8 43 25 00 00       	call   805e9d8 <__afl_maybe_log>
 805c495:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c499:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c49d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c4a1:	8b 3c 24             	mov    (%esp),%edi
 805c4a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c4a8:	89 d0                	mov    %edx,%eax
 805c4aa:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c4ae:	c0 e8 06             	shr    $0x6,%al
 805c4b1:	83 c0 30             	add    $0x30,%eax
 805c4b4:	88 44 29 01          	mov    %al,0x1(%ecx,%ebp,1)
 805c4b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c4bc:	89 3c 24             	mov    %edi,(%esp)
 805c4bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c4c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c4c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c4cb:	b9 43 60 00 00       	mov    $0x6043,%ecx
 805c4d0:	e8 03 25 00 00       	call   805e9d8 <__afl_maybe_log>
 805c4d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c4d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c4dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c4e1:	8b 3c 24             	mov    (%esp),%edi
 805c4e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c4e8:	8d 45 02             	lea    0x2(%ebp),%eax
                        STORE ('0' + ((c >> 3) & 7));
 805c4eb:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805c4ef:	76 46                	jbe    805c537 <quotearg_buffer_restyled+0x3837>
 805c4f1:	8d 76 00             	lea    0x0(%esi),%esi
 805c4f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c4f8:	89 3c 24             	mov    %edi,(%esp)
 805c4fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c4ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c503:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c507:	b9 98 15 00 00       	mov    $0x1598,%ecx
 805c50c:	e8 c7 24 00 00       	call   805e9d8 <__afl_maybe_log>
 805c511:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c515:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c519:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c51d:	8b 3c 24             	mov    (%esp),%edi
 805c520:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c524:	89 d0                	mov    %edx,%eax
 805c526:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c52a:	c0 e8 03             	shr    $0x3,%al
 805c52d:	83 e0 07             	and    $0x7,%eax
 805c530:	83 c0 30             	add    $0x30,%eax
 805c533:	88 44 29 02          	mov    %al,0x2(%ecx,%ebp,1)
 805c537:	90                   	nop
                        c = '0' + (c & 7);
 805c538:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c53c:	89 3c 24             	mov    %edi,(%esp)
 805c53f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c543:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c547:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c54b:	b9 8f bc 00 00       	mov    $0xbc8f,%ecx
 805c550:	e8 83 24 00 00       	call   805e9d8 <__afl_maybe_log>
 805c555:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c559:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c55d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c561:	8b 3c 24             	mov    (%esp),%edi
 805c564:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c568:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805c56b:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805c56e:	8d 52 30             	lea    0x30(%edx),%edx
 805c571:	e9 4e e3 ff ff       	jmp    805a8c4 <quotearg_buffer_restyled+0x1bc4>
 805c576:	8d 76 00             	lea    0x0(%esi),%esi
 805c579:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 805c580:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805c585:	0f 85 a5 d7 ff ff    	jne    8059d30 <quotearg_buffer_restyled+0x1030>
 805c58b:	90                   	nop
 805c58c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c590:	89 3c 24             	mov    %edi,(%esp)
 805c593:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c597:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c59b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c59f:	b9 f0 76 00 00       	mov    $0x76f0,%ecx
 805c5a4:	e8 2f 24 00 00       	call   805e9d8 <__afl_maybe_log>
 805c5a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c5ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c5b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c5b5:	8b 3c 24             	mov    (%esp),%edi
 805c5b8:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805c5bc:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805c5c0:	73 3a                	jae    805c5fc <quotearg_buffer_restyled+0x38fc>
 805c5c2:	66 90                	xchg   %ax,%ax
 805c5c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c5c8:	89 3c 24             	mov    %edi,(%esp)
 805c5cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c5cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c5d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c5d7:	b9 98 a4 00 00       	mov    $0xa498,%ecx
 805c5dc:	e8 f7 23 00 00       	call   805e9d8 <__afl_maybe_log>
 805c5e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c5e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c5e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c5ed:	8b 3c 24             	mov    (%esp),%edi
 805c5f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c5f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805c5f8:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 805c5fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c600:	89 3c 24             	mov    %edi,(%esp)
 805c603:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c607:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c60b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c60f:	b9 68 b3 00 00       	mov    $0xb368,%ecx
 805c614:	e8 bf 23 00 00       	call   805e9d8 <__afl_maybe_log>
 805c619:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c61d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c621:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c625:	8b 3c 24             	mov    (%esp),%edi
 805c628:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c62c:	8d 4d 01             	lea    0x1(%ebp),%ecx
                        STORE ('0' + (c >> 6));
 805c62f:	39 4c 24 10          	cmp    %ecx,0x10(%esp)
 805c633:	76 43                	jbe    805c678 <quotearg_buffer_restyled+0x3978>
 805c635:	8d 76 00             	lea    0x0(%esi),%esi
 805c638:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c63c:	89 3c 24             	mov    %edi,(%esp)
 805c63f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c643:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c647:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c64b:	b9 44 0e 00 00       	mov    $0xe44,%ecx
 805c650:	e8 83 23 00 00       	call   805e9d8 <__afl_maybe_log>
 805c655:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c659:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c65d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c661:	8b 3c 24             	mov    (%esp),%edi
 805c664:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c668:	89 d0                	mov    %edx,%eax
 805c66a:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c66e:	c0 e8 06             	shr    $0x6,%al
 805c671:	83 c0 30             	add    $0x30,%eax
 805c674:	88 44 29 01          	mov    %al,0x1(%ecx,%ebp,1)
 805c678:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c67c:	89 3c 24             	mov    %edi,(%esp)
 805c67f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c683:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c687:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c68b:	b9 ab b2 00 00       	mov    $0xb2ab,%ecx
 805c690:	e8 43 23 00 00       	call   805e9d8 <__afl_maybe_log>
 805c695:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c699:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c69d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c6a1:	8b 3c 24             	mov    (%esp),%edi
 805c6a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c6a8:	8d 45 02             	lea    0x2(%ebp),%eax
                        STORE ('0' + ((c >> 3) & 7));
 805c6ab:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805c6af:	76 46                	jbe    805c6f7 <quotearg_buffer_restyled+0x39f7>
 805c6b1:	8d 76 00             	lea    0x0(%esi),%esi
 805c6b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c6b8:	89 3c 24             	mov    %edi,(%esp)
 805c6bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c6bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c6c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c6c7:	b9 95 09 00 00       	mov    $0x995,%ecx
 805c6cc:	e8 07 23 00 00       	call   805e9d8 <__afl_maybe_log>
 805c6d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c6d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c6d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c6dd:	8b 3c 24             	mov    (%esp),%edi
 805c6e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c6e4:	89 d0                	mov    %edx,%eax
 805c6e6:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c6ea:	c0 e8 03             	shr    $0x3,%al
 805c6ed:	83 e0 07             	and    $0x7,%eax
 805c6f0:	83 c0 30             	add    $0x30,%eax
 805c6f3:	88 44 29 02          	mov    %al,0x2(%ecx,%ebp,1)
 805c6f7:	90                   	nop
                        c = '0' + (c & 7);
 805c6f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c6fc:	89 3c 24             	mov    %edi,(%esp)
 805c6ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c703:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c707:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c70b:	b9 4c 45 00 00       	mov    $0x454c,%ecx
 805c710:	e8 c3 22 00 00       	call   805e9d8 <__afl_maybe_log>
 805c715:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c719:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c71d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c721:	8b 3c 24             	mov    (%esp),%edi
 805c724:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c728:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805c72b:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 805c72e:	8d 52 30             	lea    0x30(%edx),%edx
 805c731:	e9 5e e3 ff ff       	jmp    805aa94 <quotearg_buffer_restyled+0x1d94>
 805c736:	8d 76 00             	lea    0x0(%esi),%esi
 805c739:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
    case literal_quoting_style:
      elide_outer_quotes = false;
      break;

    default:
      abort ();
 805c740:	e8 bb cd fe ff       	call   8049500 <abort@plt>
 805c745:	8d 76 00             	lea    0x0(%esi),%esi
 805c748:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c74c:	89 3c 24             	mov    %edi,(%esp)
 805c74f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c753:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c757:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c75b:	b9 91 e7 00 00       	mov    $0xe791,%ecx
 805c760:	e8 73 22 00 00       	call   805e9d8 <__afl_maybe_log>
 805c765:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c769:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c76d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c771:	8b 3c 24             	mov    (%esp),%edi
 805c774:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c778:	8b 7c 24 70          	mov    0x70(%esp),%edi
 805c77c:	e9 af d5 ff ff       	jmp    8059d30 <quotearg_buffer_restyled+0x1030>
 805c781:	8d 76 00             	lea    0x0(%esi),%esi
 805c784:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c788:	89 3c 24             	mov    %edi,(%esp)
 805c78b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c78f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c793:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c797:	b9 0b f1 00 00       	mov    $0xf10b,%ecx
 805c79c:	e8 37 22 00 00       	call   805e9d8 <__afl_maybe_log>
 805c7a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c7a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c7a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c7ad:	8b 3c 24             	mov    (%esp),%edi
 805c7b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c7b4:	88 54 24 20          	mov    %dl,0x20(%esp)
                memset (&mbstate, 0, sizeof mbstate);

                m = 0;
                printable = true;
                if (argsize == SIZE_MAX)
                  argsize = strlen (arg);
 805c7b8:	83 ec 0c             	sub    $0xc,%esp
 805c7bb:	ff 74 24 20          	pushl  0x20(%esp)
 805c7bf:	e8 dc cb fe ff       	call   80493a0 <strlen@plt>
 805c7c4:	83 c4 10             	add    $0x10,%esp
 805c7c7:	89 c7                	mov    %eax,%edi
 805c7c9:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
 805c7ce:	e9 c9 f5 ff ff       	jmp    805bd9c <quotearg_buffer_restyled+0x309c>
 805c7d3:	90                   	nop
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 805c7d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c7d8:	89 3c 24             	mov    %edi,(%esp)
 805c7db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c7df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c7e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c7e7:	b9 3f 77 00 00       	mov    $0x773f,%ecx
 805c7ec:	e8 e7 21 00 00       	call   805e9d8 <__afl_maybe_log>
 805c7f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c7f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c7f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c7fd:	8b 3c 24             	mov    (%esp),%edi
 805c800:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c804:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 805c809:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805c810:	00 
      quoting_style = shell_always_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
 805c811:	bd 01 00 00 00       	mov    $0x1,%ebp
      quote_string = "'";
 805c816:	c7 44 24 28 27 67 06 	movl   $0x8066727,0x28(%esp)
 805c81d:	08 
 805c81e:	e9 a5 c5 ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
 805c823:	90                   	nop
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
 805c824:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c828:	89 3c 24             	mov    %edi,(%esp)
 805c82b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c82f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c833:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c837:	b9 d3 da 00 00       	mov    $0xdad3,%ecx
 805c83c:	e8 97 21 00 00       	call   805e9d8 <__afl_maybe_log>
 805c841:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c845:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c849:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c84d:	8b 3c 24             	mov    (%esp),%edi
 805c850:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c854:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
      quote_string = "\"";
      quote_string_len = 1;
 805c859:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805c860:	00 
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
 805c861:	bd 01 00 00 00       	mov    $0x1,%ebp
      backslash_escapes = true;
      quote_string = "\"";
 805c866:	c7 44 24 28 29 67 06 	movl   $0x8066729,0x28(%esp)
 805c86d:	08 
 805c86e:	e9 55 c5 ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
 805c873:	90                   	nop
 805c874:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c878:	89 3c 24             	mov    %edi,(%esp)
 805c87b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c87f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c883:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c887:	b9 8d 47 00 00       	mov    $0x478d,%ecx
 805c88c:	e8 47 21 00 00       	call   805e9d8 <__afl_maybe_log>
 805c891:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c895:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c899:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c89d:	8b 3c 24             	mov    (%esp),%edi
 805c8a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c8a4:	8b 7c 24 70          	mov    0x70(%esp),%edi
 805c8a8:	e9 b2 ce ff ff       	jmp    805975f <quotearg_buffer_restyled+0xa5f>
 805c8ad:	8d 76 00             	lea    0x0(%esi),%esi
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
                      {
                        STORE ('\\');
 805c8b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c8b4:	89 3c 24             	mov    %edi,(%esp)
 805c8b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c8bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c8bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c8c3:	b9 ab bb 00 00       	mov    $0xbbab,%ecx
 805c8c8:	e8 0b 21 00 00       	call   805e9d8 <__afl_maybe_log>
 805c8cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c8d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c8d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c8d9:	8b 3c 24             	mov    (%esp),%edi
 805c8dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c8e0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c8e4:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 805c8e8:	e9 4f dd ff ff       	jmp    805a63c <quotearg_buffer_restyled+0x193c>
 805c8ed:	8d 76 00             	lea    0x0(%esi),%esi
 805c8f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c8f4:	89 3c 24             	mov    %edi,(%esp)
 805c8f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c8fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c8ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c903:	b9 1b a9 00 00       	mov    $0xa91b,%ecx
 805c908:	e8 cb 20 00 00       	call   805e9d8 <__afl_maybe_log>
 805c90d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c911:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c915:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c919:	8b 3c 24             	mov    (%esp),%edi
 805c91c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c920:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805c924:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 805c928:	e9 5f df ff ff       	jmp    805a88c <quotearg_buffer_restyled+0x1b8c>
 805c92d:	8d 76 00             	lea    0x0(%esi),%esi
 805c930:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c934:	89 3c 24             	mov    %edi,(%esp)
 805c937:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c93b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c93f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c943:	b9 e6 6c 00 00       	mov    $0x6ce6,%ecx
 805c948:	e8 8b 20 00 00       	call   805e9d8 <__afl_maybe_log>
 805c94d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c951:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c955:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c959:	8b 3c 24             	mov    (%esp),%edi
 805c95c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c960:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c964:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 805c968:	e9 ef e0 ff ff       	jmp    805aa5c <quotearg_buffer_restyled+0x1d5c>
 805c96d:	8d 76 00             	lea    0x0(%esi),%esi
                 hard to imagine any locale that would use digits in
                 quotes, and set_custom_quoting is documented not to
                 accept them.  */
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
                {
                  STORE ('0');
 805c970:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c974:	89 3c 24             	mov    %edi,(%esp)
 805c977:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c97b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c97f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c983:	b9 2a ef 00 00       	mov    $0xef2a,%ecx
 805c988:	e8 4b 20 00 00       	call   805e9d8 <__afl_maybe_log>
 805c98d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c991:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c995:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c999:	8b 3c 24             	mov    (%esp),%edi
 805c99c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c9a0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805c9a4:	c6 04 01 30          	movb   $0x30,(%ecx,%eax,1)
 805c9a8:	e9 03 d7 ff ff       	jmp    805a0b0 <quotearg_buffer_restyled+0x13b0>
 805c9ad:	8d 76 00             	lea    0x0(%esi),%esi
 805c9b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c9b4:	89 3c 24             	mov    %edi,(%esp)
 805c9b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c9bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c9bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c9c3:	b9 df c1 00 00       	mov    $0xc1df,%ecx
 805c9c8:	e8 0b 20 00 00       	call   805e9d8 <__afl_maybe_log>
 805c9cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c9d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c9d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c9d9:	8b 3c 24             	mov    (%esp),%edi
 805c9dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c9e0:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 805c9e4:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 805c9e8:	0f b6 54 24 3b       	movzbl 0x3b(%esp),%edx
                                            argsize - (i + m), &mbstate);
                    if (bytes == 0)
                      break;
                    else if (bytes == (size_t) -1)
                      {
                        printable = false;
 805c9ed:	c6 44 24 20 00       	movb   $0x0,0x20(%esp)
 805c9f2:	e9 1a f7 ff ff       	jmp    805c111 <quotearg_buffer_restyled+0x3411>
 805c9f7:	90                   	nop
 805c9f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c9fc:	89 3c 24             	mov    %edi,(%esp)
 805c9ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ca03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ca07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ca0b:	b9 b0 3a 00 00       	mov    $0x3ab0,%ecx
 805ca10:	e8 c3 1f 00 00       	call   805e9d8 <__afl_maybe_log>
 805ca15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ca19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ca1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ca21:	8b 3c 24             	mov    (%esp),%edi
 805ca24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ca28:	89 d8                	mov    %ebx,%eax
 805ca2a:	89 f1                	mov    %esi,%ecx
 805ca2c:	8b 6c 24 30          	mov    0x30(%esp),%ebp
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805ca30:	39 f8                	cmp    %edi,%eax
 805ca32:	0f b6 54 24 3b       	movzbl 0x3b(%esp),%edx
 805ca37:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 805ca3b:	8b 5c 24 3c          	mov    0x3c(%esp),%ebx
 805ca3f:	0f 83 fb 07 00 00    	jae    805d240 <quotearg_buffer_restyled+0x4540>
 805ca45:	8d 76 00             	lea    0x0(%esi),%esi
 805ca48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ca4c:	89 3c 24             	mov    %edi,(%esp)
 805ca4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ca53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ca57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ca5b:	b9 9c b2 00 00       	mov    $0xb29c,%ecx
 805ca60:	e8 73 1f 00 00       	call   805e9d8 <__afl_maybe_log>
 805ca65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ca69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ca6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ca71:	8b 3c 24             	mov    (%esp),%edi
 805ca74:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ca78:	80 39 00             	cmpb   $0x0,(%ecx)
 805ca7b:	0f 84 bf 07 00 00    	je     805d240 <quotearg_buffer_restyled+0x4540>
 805ca81:	8d 76 00             	lea    0x0(%esi),%esi
 805ca84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ca88:	89 3c 24             	mov    %edi,(%esp)
 805ca8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ca8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ca93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ca97:	b9 51 d4 00 00       	mov    $0xd451,%ecx
 805ca9c:	e8 37 1f 00 00       	call   805e9d8 <__afl_maybe_log>
 805caa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805caa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805caa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805caad:	8b 3c 24             	mov    (%esp),%edi
 805cab0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cab4:	8b 4c 24 24          	mov    0x24(%esp),%ecx
 805cab8:	f7 d1                	not    %ecx
 805caba:	29 f1                	sub    %esi,%ecx
 805cabc:	01 f9                	add    %edi,%ecx
 805cabe:	83 e1 07             	and    $0x7,%ecx
 805cac1:	0f 84 a1 04 00 00    	je     805cf68 <quotearg_buffer_restyled+0x4268>
 805cac7:	90                   	nop
 805cac8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cacc:	89 3c 24             	mov    %edi,(%esp)
 805cacf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cad3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cad7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cadb:	b9 51 c2 00 00       	mov    $0xc251,%ecx
 805cae0:	e8 f3 1e 00 00       	call   805e9d8 <__afl_maybe_log>
 805cae5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cae9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805caed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805caf1:	8b 3c 24             	mov    (%esp),%edi
 805caf4:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 805caf8:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 805cafd:	8b 44 24 24          	mov    0x24(%esp),%eax
 805cb01:	01 f0                	add    %esi,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805cb03:	39 c7                	cmp    %eax,%edi
 805cb05:	0f 86 35 07 00 00    	jbe    805d240 <quotearg_buffer_restyled+0x4540>
 805cb0b:	90                   	nop
 805cb0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cb10:	89 3c 24             	mov    %edi,(%esp)
 805cb13:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cb17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cb1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cb1f:	b9 ef 21 00 00       	mov    $0x21ef,%ecx
 805cb24:	e8 af 1e 00 00       	call   805e9d8 <__afl_maybe_log>
 805cb29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cb2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cb31:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cb35:	8b 3c 24             	mov    (%esp),%edi
 805cb38:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cb3c:	8b 44 24 24          	mov    0x24(%esp),%eax
 805cb40:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 805cb44:	0f 84 f6 06 00 00    	je     805d240 <quotearg_buffer_restyled+0x4540>
 805cb4a:	66 90                	xchg   %ax,%ax
 805cb4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cb50:	89 3c 24             	mov    %edi,(%esp)
 805cb53:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cb57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cb5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cb5f:	b9 be f5 00 00       	mov    $0xf5be,%ecx
 805cb64:	e8 6f 1e 00 00       	call   805e9d8 <__afl_maybe_log>
 805cb69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cb6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cb71:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cb75:	8b 3c 24             	mov    (%esp),%edi
 805cb78:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cb7c:	83 f9 01             	cmp    $0x1,%ecx
 805cb7f:	0f 84 e3 03 00 00    	je     805cf68 <quotearg_buffer_restyled+0x4268>
 805cb85:	8d 76 00             	lea    0x0(%esi),%esi
 805cb88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cb8c:	89 3c 24             	mov    %edi,(%esp)
 805cb8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cb93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cb97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cb9b:	b9 c8 ce 00 00       	mov    $0xcec8,%ecx
 805cba0:	e8 33 1e 00 00       	call   805e9d8 <__afl_maybe_log>
 805cba5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cba9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cbad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cbb1:	8b 3c 24             	mov    (%esp),%edi
 805cbb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cbb8:	83 f9 02             	cmp    $0x2,%ecx
 805cbbb:	0f 84 33 03 00 00    	je     805cef4 <quotearg_buffer_restyled+0x41f4>
 805cbc1:	8d 76 00             	lea    0x0(%esi),%esi
 805cbc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cbc8:	89 3c 24             	mov    %edi,(%esp)
 805cbcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cbcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cbd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cbd7:	b9 c2 62 00 00       	mov    $0x62c2,%ecx
 805cbdc:	e8 f7 1d 00 00       	call   805e9d8 <__afl_maybe_log>
 805cbe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cbe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cbe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cbed:	8b 3c 24             	mov    (%esp),%edi
 805cbf0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cbf4:	83 f9 03             	cmp    $0x3,%ecx
 805cbf7:	0f 84 83 02 00 00    	je     805ce80 <quotearg_buffer_restyled+0x4180>
 805cbfd:	8d 76 00             	lea    0x0(%esi),%esi
 805cc00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cc04:	89 3c 24             	mov    %edi,(%esp)
 805cc07:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cc0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cc13:	b9 ef dd 00 00       	mov    $0xddef,%ecx
 805cc18:	e8 bb 1d 00 00       	call   805e9d8 <__afl_maybe_log>
 805cc1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cc21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cc25:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cc29:	8b 3c 24             	mov    (%esp),%edi
 805cc2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cc30:	83 f9 04             	cmp    $0x4,%ecx
 805cc33:	0f 84 d3 01 00 00    	je     805ce0c <quotearg_buffer_restyled+0x410c>
 805cc39:	8d 76 00             	lea    0x0(%esi),%esi
 805cc3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cc40:	89 3c 24             	mov    %edi,(%esp)
 805cc43:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cc4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cc4f:	b9 7c 6f 00 00       	mov    $0x6f7c,%ecx
 805cc54:	e8 7f 1d 00 00       	call   805e9d8 <__afl_maybe_log>
 805cc59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cc5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cc61:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cc65:	8b 3c 24             	mov    (%esp),%edi
 805cc68:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cc6c:	83 f9 05             	cmp    $0x5,%ecx
 805cc6f:	0f 84 23 01 00 00    	je     805cd98 <quotearg_buffer_restyled+0x4098>
 805cc75:	8d 76 00             	lea    0x0(%esi),%esi
 805cc78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cc7c:	89 3c 24             	mov    %edi,(%esp)
 805cc7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cc87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cc8b:	b9 ad 78 00 00       	mov    $0x78ad,%ecx
 805cc90:	e8 43 1d 00 00       	call   805e9d8 <__afl_maybe_log>
 805cc95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cc99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cc9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cca1:	8b 3c 24             	mov    (%esp),%edi
 805cca4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cca8:	83 f9 06             	cmp    $0x6,%ecx
 805ccab:	74 77                	je     805cd24 <quotearg_buffer_restyled+0x4024>
 805ccad:	8d 76 00             	lea    0x0(%esi),%esi
 805ccb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ccb4:	89 3c 24             	mov    %edi,(%esp)
 805ccb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ccbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ccbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ccc3:	b9 a3 82 00 00       	mov    $0x82a3,%ecx
 805ccc8:	e8 0b 1d 00 00       	call   805e9d8 <__afl_maybe_log>
 805cccd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ccd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ccd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ccd9:	8b 3c 24             	mov    (%esp),%edi
 805ccdc:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 805cce0:	83 c0 01             	add    $0x1,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805cce3:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
                          m++;
 805cce7:	89 44 24 24          	mov    %eax,0x24(%esp)
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805cceb:	0f 84 4f 05 00 00    	je     805d240 <quotearg_buffer_restyled+0x4540>
 805ccf1:	8d 76 00             	lea    0x0(%esi),%esi
 805ccf4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ccf8:	89 3c 24             	mov    %edi,(%esp)
 805ccfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ccff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cd03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cd07:	b9 62 a3 00 00       	mov    $0xa362,%ecx
 805cd0c:	e8 c7 1c 00 00       	call   805e9d8 <__afl_maybe_log>
 805cd11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cd15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cd19:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cd1d:	8b 3c 24             	mov    (%esp),%edi
 805cd20:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 805cd24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cd28:	89 3c 24             	mov    %edi,(%esp)
 805cd2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cd2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cd33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cd37:	b9 0f 3f 00 00       	mov    $0x3f0f,%ecx
 805cd3c:	e8 97 1c 00 00       	call   805e9d8 <__afl_maybe_log>
 805cd41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cd45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cd49:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cd4d:	8b 3c 24             	mov    (%esp),%edi
 805cd50:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cd54:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 805cd59:	8b 4c 24 24          	mov    0x24(%esp),%ecx
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805cd5d:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 805cd61:	0f 84 d9 04 00 00    	je     805d240 <quotearg_buffer_restyled+0x4540>
 805cd67:	90                   	nop
 805cd68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cd6c:	89 3c 24             	mov    %edi,(%esp)
 805cd6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cd73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cd77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cd7b:	b9 d1 76 00 00       	mov    $0x76d1,%ecx
 805cd80:	e8 53 1c 00 00       	call   805e9d8 <__afl_maybe_log>
 805cd85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cd89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cd8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cd91:	8b 3c 24             	mov    (%esp),%edi
 805cd94:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 805cd98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cd9c:	89 3c 24             	mov    %edi,(%esp)
 805cd9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cda3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cda7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cdab:	b9 e4 36 00 00       	mov    $0x36e4,%ecx
 805cdb0:	e8 23 1c 00 00       	call   805e9d8 <__afl_maybe_log>
 805cdb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cdb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cdbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cdc1:	8b 3c 24             	mov    (%esp),%edi
 805cdc4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cdc8:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 805cdcd:	8b 44 24 24          	mov    0x24(%esp),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805cdd1:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 805cdd5:	0f 84 65 04 00 00    	je     805d240 <quotearg_buffer_restyled+0x4540>
 805cddb:	90                   	nop
 805cddc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cde0:	89 3c 24             	mov    %edi,(%esp)
 805cde3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cde7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cdeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cdef:	b9 94 22 00 00       	mov    $0x2294,%ecx
 805cdf4:	e8 df 1b 00 00       	call   805e9d8 <__afl_maybe_log>
 805cdf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cdfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ce01:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ce05:	8b 3c 24             	mov    (%esp),%edi
 805ce08:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 805ce0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ce10:	89 3c 24             	mov    %edi,(%esp)
 805ce13:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ce1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ce1f:	b9 3d 6a 00 00       	mov    $0x6a3d,%ecx
 805ce24:	e8 af 1b 00 00       	call   805e9d8 <__afl_maybe_log>
 805ce29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ce2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ce31:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ce35:	8b 3c 24             	mov    (%esp),%edi
 805ce38:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ce3c:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 805ce41:	8b 4c 24 24          	mov    0x24(%esp),%ecx
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805ce45:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 805ce49:	0f 84 f1 03 00 00    	je     805d240 <quotearg_buffer_restyled+0x4540>
 805ce4f:	90                   	nop
 805ce50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ce54:	89 3c 24             	mov    %edi,(%esp)
 805ce57:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ce5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ce63:	b9 23 c6 00 00       	mov    $0xc623,%ecx
 805ce68:	e8 6b 1b 00 00       	call   805e9d8 <__afl_maybe_log>
 805ce6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ce71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ce75:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ce79:	8b 3c 24             	mov    (%esp),%edi
 805ce7c:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 805ce80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ce84:	89 3c 24             	mov    %edi,(%esp)
 805ce87:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ce8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ce93:	b9 0a 7f 00 00       	mov    $0x7f0a,%ecx
 805ce98:	e8 3b 1b 00 00       	call   805e9d8 <__afl_maybe_log>
 805ce9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cea1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cea5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cea9:	8b 3c 24             	mov    (%esp),%edi
 805ceac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ceb0:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 805ceb5:	8b 44 24 24          	mov    0x24(%esp),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805ceb9:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 805cebd:	0f 84 7d 03 00 00    	je     805d240 <quotearg_buffer_restyled+0x4540>
 805cec3:	90                   	nop
 805cec4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cec8:	89 3c 24             	mov    %edi,(%esp)
 805cecb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cecf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ced3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ced7:	b9 b1 63 00 00       	mov    $0x63b1,%ecx
 805cedc:	e8 f7 1a 00 00       	call   805e9d8 <__afl_maybe_log>
 805cee1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cee5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cee9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ceed:	8b 3c 24             	mov    (%esp),%edi
 805cef0:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 805cef4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cef8:	89 3c 24             	mov    %edi,(%esp)
 805cefb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ceff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cf03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cf07:	b9 92 f1 00 00       	mov    $0xf192,%ecx
 805cf0c:	e8 c7 1a 00 00       	call   805e9d8 <__afl_maybe_log>
 805cf11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cf15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cf19:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cf1d:	8b 3c 24             	mov    (%esp),%edi
 805cf20:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cf24:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 805cf29:	8b 4c 24 24          	mov    0x24(%esp),%ecx
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805cf2d:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 805cf31:	0f 84 09 03 00 00    	je     805d240 <quotearg_buffer_restyled+0x4540>
 805cf37:	90                   	nop
 805cf38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cf3c:	89 3c 24             	mov    %edi,(%esp)
 805cf3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cf43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cf47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cf4b:	b9 92 5b 00 00       	mov    $0x5b92,%ecx
 805cf50:	e8 83 1a 00 00       	call   805e9d8 <__afl_maybe_log>
 805cf55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cf59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cf5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cf61:	8b 3c 24             	mov    (%esp),%edi
 805cf64:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cf68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cf6c:	89 3c 24             	mov    %edi,(%esp)
 805cf6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cf73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cf77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cf7b:	b9 81 78 00 00       	mov    $0x7881,%ecx
 805cf80:	e8 53 1a 00 00       	call   805e9d8 <__afl_maybe_log>
 805cf85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cf89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cf8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cf91:	8b 3c 24             	mov    (%esp),%edi
 805cf94:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cf98:	8b 44 24 24          	mov    0x24(%esp),%eax
 805cf9c:	89 6c 24 20          	mov    %ebp,0x20(%esp)
                          m++;
 805cfa0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cfa4:	89 3c 24             	mov    %edi,(%esp)
 805cfa7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cfab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cfaf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cfb3:	b9 ea 91 00 00       	mov    $0x91ea,%ecx
 805cfb8:	e8 1b 1a 00 00       	call   805e9d8 <__afl_maybe_log>
 805cfbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cfc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cfc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cfc9:	8b 3c 24             	mov    (%esp),%edi
 805cfcc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cfd0:	8d 48 01             	lea    0x1(%eax),%ecx
 805cfd3:	8d 2c 0e             	lea    (%esi,%ecx,1),%ebp
 805cfd6:	89 c8                	mov    %ecx,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805cfd8:	39 ef                	cmp    %ebp,%edi
 805cfda:	0f 86 28 02 00 00    	jbe    805d208 <quotearg_buffer_restyled+0x4508>
 805cfe0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cfe4:	89 3c 24             	mov    %edi,(%esp)
 805cfe7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cfeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cfef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cff3:	b9 ff 5e 00 00       	mov    $0x5eff,%ecx
 805cff8:	e8 db 19 00 00       	call   805e9d8 <__afl_maybe_log>
 805cffd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d001:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d005:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d009:	8b 3c 24             	mov    (%esp),%edi
 805d00c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d010:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 805d014:	0f 84 ee 01 00 00    	je     805d208 <quotearg_buffer_restyled+0x4508>
 805d01a:	66 90                	xchg   %ax,%ax
 805d01c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d020:	89 3c 24             	mov    %edi,(%esp)
 805d023:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d027:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d02b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d02f:	b9 25 13 00 00       	mov    $0x1325,%ecx
 805d034:	e8 9f 19 00 00       	call   805e9d8 <__afl_maybe_log>
 805d039:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d03d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d041:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d045:	8b 3c 24             	mov    (%esp),%edi
 805d048:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 805d04c:	83 c0 01             	add    $0x1,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805d04f:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 805d053:	0f 84 af 01 00 00    	je     805d208 <quotearg_buffer_restyled+0x4508>
 805d059:	8d 76 00             	lea    0x0(%esi),%esi
 805d05c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d060:	89 3c 24             	mov    %edi,(%esp)
 805d063:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d067:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d06b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d06f:	b9 60 2c 00 00       	mov    $0x2c60,%ecx
 805d074:	e8 5f 19 00 00       	call   805e9d8 <__afl_maybe_log>
 805d079:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d07d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d081:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d085:	8b 3c 24             	mov    (%esp),%edi
 805d088:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d08c:	80 7c 0b 02 00       	cmpb   $0x0,0x2(%ebx,%ecx,1)
                          m++;
 805d091:	8d 41 02             	lea    0x2(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805d094:	0f 84 6e 01 00 00    	je     805d208 <quotearg_buffer_restyled+0x4508>
 805d09a:	66 90                	xchg   %ax,%ax
 805d09c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d0a0:	89 3c 24             	mov    %edi,(%esp)
 805d0a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d0a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d0ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d0af:	b9 2b d1 00 00       	mov    $0xd12b,%ecx
 805d0b4:	e8 1f 19 00 00       	call   805e9d8 <__afl_maybe_log>
 805d0b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d0bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d0c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d0c5:	8b 3c 24             	mov    (%esp),%edi
 805d0c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d0cc:	80 7c 0b 03 00       	cmpb   $0x0,0x3(%ebx,%ecx,1)
                          m++;
 805d0d1:	8d 41 03             	lea    0x3(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805d0d4:	0f 84 2e 01 00 00    	je     805d208 <quotearg_buffer_restyled+0x4508>
 805d0da:	66 90                	xchg   %ax,%ax
 805d0dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d0e0:	89 3c 24             	mov    %edi,(%esp)
 805d0e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d0e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d0eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d0ef:	b9 13 49 00 00       	mov    $0x4913,%ecx
 805d0f4:	e8 df 18 00 00       	call   805e9d8 <__afl_maybe_log>
 805d0f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d0fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d101:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d105:	8b 3c 24             	mov    (%esp),%edi
 805d108:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d10c:	80 7c 0b 04 00       	cmpb   $0x0,0x4(%ebx,%ecx,1)
                          m++;
 805d111:	8d 41 04             	lea    0x4(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805d114:	0f 84 ee 00 00 00    	je     805d208 <quotearg_buffer_restyled+0x4508>
 805d11a:	66 90                	xchg   %ax,%ax
 805d11c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d120:	89 3c 24             	mov    %edi,(%esp)
 805d123:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d127:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d12b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d12f:	b9 5d 6c 00 00       	mov    $0x6c5d,%ecx
 805d134:	e8 9f 18 00 00       	call   805e9d8 <__afl_maybe_log>
 805d139:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d13d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d141:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d145:	8b 3c 24             	mov    (%esp),%edi
 805d148:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d14c:	80 7c 0b 05 00       	cmpb   $0x0,0x5(%ebx,%ecx,1)
                          m++;
 805d151:	8d 41 05             	lea    0x5(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805d154:	0f 84 ae 00 00 00    	je     805d208 <quotearg_buffer_restyled+0x4508>
 805d15a:	66 90                	xchg   %ax,%ax
 805d15c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d160:	89 3c 24             	mov    %edi,(%esp)
 805d163:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d167:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d16b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d16f:	b9 7d f9 00 00       	mov    $0xf97d,%ecx
 805d174:	e8 5f 18 00 00       	call   805e9d8 <__afl_maybe_log>
 805d179:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d17d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d181:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d185:	8b 3c 24             	mov    (%esp),%edi
 805d188:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d18c:	80 7c 0b 06 00       	cmpb   $0x0,0x6(%ebx,%ecx,1)
                          m++;
 805d191:	8d 41 06             	lea    0x6(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805d194:	74 72                	je     805d208 <quotearg_buffer_restyled+0x4508>
 805d196:	66 90                	xchg   %ax,%ax
 805d198:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d19c:	89 3c 24             	mov    %edi,(%esp)
 805d19f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d1a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d1a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d1ab:	b9 78 69 00 00       	mov    $0x6978,%ecx
 805d1b0:	e8 23 18 00 00       	call   805e9d8 <__afl_maybe_log>
 805d1b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d1b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d1bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d1c1:	8b 3c 24             	mov    (%esp),%edi
 805d1c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d1c8:	80 7c 0b 07 00       	cmpb   $0x0,0x7(%ebx,%ecx,1)
                          m++;
 805d1cd:	8d 41 07             	lea    0x7(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805d1d0:	0f 85 ca fd ff ff    	jne    805cfa0 <quotearg_buffer_restyled+0x42a0>
 805d1d6:	66 90                	xchg   %ax,%ax
 805d1d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d1dc:	89 3c 24             	mov    %edi,(%esp)
 805d1df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d1e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d1e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d1eb:	b9 d7 85 00 00       	mov    $0x85d7,%ecx
 805d1f0:	e8 e3 17 00 00       	call   805e9d8 <__afl_maybe_log>
 805d1f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d1f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d1fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d201:	8b 3c 24             	mov    (%esp),%edi
 805d204:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d208:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d20c:	89 3c 24             	mov    %edi,(%esp)
 805d20f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d213:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d217:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d21b:	b9 49 90 00 00       	mov    $0x9049,%ecx
 805d220:	e8 b3 17 00 00       	call   805e9d8 <__afl_maybe_log>
 805d225:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d229:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d22d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d231:	8b 3c 24             	mov    (%esp),%edi
 805d234:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d238:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 805d23c:	89 44 24 24          	mov    %eax,0x24(%esp)
                        printable = false;
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
 805d240:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d244:	89 3c 24             	mov    %edi,(%esp)
 805d247:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d24b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d24f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d253:	b9 ad 17 00 00       	mov    $0x17ad,%ecx
 805d258:	e8 7b 17 00 00       	call   805e9d8 <__afl_maybe_log>
 805d25d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d261:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d265:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d269:	8b 3c 24             	mov    (%esp),%edi
 805d26c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d270:	c6 44 24 20 00       	movb   $0x0,0x20(%esp)
 805d275:	e9 97 ee ff ff       	jmp    805c111 <quotearg_buffer_restyled+0x3411>
 805d27a:	66 90                	xchg   %ax,%ax
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
 805d27c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d280:	89 3c 24             	mov    %edi,(%esp)
 805d283:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d287:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d28b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d28f:	b9 aa 79 00 00       	mov    $0x79aa,%ecx
 805d294:	e8 3f 17 00 00       	call   805e9d8 <__afl_maybe_log>
 805d299:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d29d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d2a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d2a5:	8b 3c 24             	mov    (%esp),%edi
 805d2a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d2ac:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
      quote_string = "\"";
      quote_string_len = 1;
 805d2b1:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805d2b8:	00 
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805d2b9:	31 ed                	xor    %ebp,%ebp
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
 805d2bb:	c7 44 24 28 29 67 06 	movl   $0x8066729,0x28(%esp)
 805d2c2:	08 
 805d2c3:	e9 00 bb ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 805d2c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d2cc:	89 3c 24             	mov    %edi,(%esp)
 805d2cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d2d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d2d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d2db:	b9 74 26 00 00       	mov    $0x2674,%ecx
 805d2e0:	e8 f3 16 00 00       	call   805e9d8 <__afl_maybe_log>
 805d2e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d2e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d2ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d2f1:	8b 3c 24             	mov    (%esp),%edi
 805d2f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d2f8:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 805d2fd:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805d304:	00 
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805d305:	31 ed                	xor    %ebp,%ebp
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
 805d307:	c7 44 24 28 27 67 06 	movl   $0x8066727,0x28(%esp)
 805d30e:	08 
 805d30f:	e9 b4 ba ff ff       	jmp    8058dc8 <quotearg_buffer_restyled+0xc8>
 805d314:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805d31a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0805d320 <quotearg_n_options>:
   N must be nonnegative.  N is deliberately declared with type "int"
   to allow for future extensions (using negative values).  */
static char *
quotearg_n_options (int n, char const *arg, size_t argsize,
                    struct quoting_options const *options)
{
 805d320:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d324:	89 3c 24             	mov    %edi,(%esp)
 805d327:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d32b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d32f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d333:	b9 3c d5 00 00       	mov    $0xd53c,%ecx
 805d338:	e8 9b 16 00 00       	call   805e9d8 <__afl_maybe_log>
 805d33d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d341:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d345:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d349:	8b 3c 24             	mov    (%esp),%edi
 805d34c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d350:	55                   	push   %ebp
 805d351:	57                   	push   %edi
 805d352:	89 c7                	mov    %eax,%edi
 805d354:	56                   	push   %esi
 805d355:	53                   	push   %ebx
 805d356:	83 ec 2c             	sub    $0x2c,%esp
 805d359:	89 54 24 08          	mov    %edx,0x8(%esp)
 805d35d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  int e = errno;
 805d361:	e8 9a c0 fe ff       	call   8049400 <__errno_location@plt>
 805d366:	89 44 24 10          	mov    %eax,0x10(%esp)
 805d36a:	8b 00                	mov    (%eax),%eax

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;

  if (n < 0)
 805d36c:	85 ff                	test   %edi,%edi
   N must be nonnegative.  N is deliberately declared with type "int"
   to allow for future extensions (using negative values).  */
static char *
quotearg_n_options (int n, char const *arg, size_t argsize,
                    struct quoting_options const *options)
{
 805d36e:	8b 5c 24 40          	mov    0x40(%esp),%ebx
  int e = errno;

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;
 805d372:	8b 35 90 a2 06 08    	mov    0x806a290,%esi
   to allow for future extensions (using negative values).  */
static char *
quotearg_n_options (int n, char const *arg, size_t argsize,
                    struct quoting_options const *options)
{
  int e = errno;
 805d378:	89 44 24 14          	mov    %eax,0x14(%esp)

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;

  if (n < 0)
 805d37c:	0f 88 28 03 00 00    	js     805d6aa <quotearg_n_options+0x38a>
 805d382:	66 90                	xchg   %ax,%ax
 805d384:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d388:	89 3c 24             	mov    %edi,(%esp)
 805d38b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d38f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d393:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d397:	b9 f5 9e 00 00       	mov    $0x9ef5,%ecx
 805d39c:	e8 37 16 00 00       	call   805e9d8 <__afl_maybe_log>
 805d3a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d3a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d3a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d3ad:	8b 3c 24             	mov    (%esp),%edi
 805d3b0:	8d 64 24 10          	lea    0x10(%esp),%esp
    abort ();

  if (nslots <= n0)
 805d3b4:	3b 3d 9c a2 06 08    	cmp    0x806a29c,%edi
 805d3ba:	0f 82 1d 01 00 00    	jb     805d4dd <quotearg_n_options+0x1bd>
 805d3c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d3c4:	89 3c 24             	mov    %edi,(%esp)
 805d3c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d3cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d3cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d3d3:	b9 7e ef 00 00       	mov    $0xef7e,%ecx
 805d3d8:	e8 fb 15 00 00       	call   805e9d8 <__afl_maybe_log>
 805d3dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d3e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d3e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d3e9:	8b 3c 24             	mov    (%esp),%edi
 805d3ec:	8d 64 24 10          	lea    0x10(%esp),%esp
      /* FIXME: technically, the type of n1 should be 'unsigned int',
         but that evokes an unsuppressible warning from gcc-4.0.1 and
         older.  If gcc ever provides an option to suppress that warning,
         revert to the original type, so that the test in xalloc_oversized
         is once again performed only at compile time.  */
      size_t n1 = n0 + 1;
 805d3f0:	8d 6f 01             	lea    0x1(%edi),%ebp
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
 805d3f3:	81 fd ff ff ff 1f    	cmp    $0x1fffffff,%ebp
 805d3f9:	0f 87 e2 02 00 00    	ja     805d6e1 <quotearg_n_options+0x3c1>
 805d3ff:	90                   	nop
 805d400:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d404:	89 3c 24             	mov    %edi,(%esp)
 805d407:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d40b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d40f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d413:	b9 bd 6d 00 00       	mov    $0x6dbd,%ecx
 805d418:	e8 bb 15 00 00       	call   805e9d8 <__afl_maybe_log>
 805d41d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d421:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d425:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d429:	8b 3c 24             	mov    (%esp),%edi
 805d42c:	8d 64 24 10          	lea    0x10(%esp),%esp
        xalloc_die ();

      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
 805d430:	81 fe 94 a2 06 08    	cmp    $0x806a294,%esi
 805d436:	8d 14 ed 00 00 00 00 	lea    0x0(,%ebp,8),%edx
 805d43d:	0f 84 3d 02 00 00    	je     805d680 <quotearg_n_options+0x360>
 805d443:	90                   	nop
 805d444:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d448:	89 3c 24             	mov    %edi,(%esp)
 805d44b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d44f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d453:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d457:	b9 18 9a 00 00       	mov    $0x9a18,%ecx
 805d45c:	e8 77 15 00 00       	call   805e9d8 <__afl_maybe_log>
 805d461:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d465:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d469:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d46d:	8b 3c 24             	mov    (%esp),%edi
 805d470:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d474:	83 ec 08             	sub    $0x8,%esp
 805d477:	52                   	push   %edx
 805d478:	56                   	push   %esi
 805d479:	e8 b2 24 00 00       	call   805f930 <xrealloc>
 805d47e:	83 c4 10             	add    $0x10,%esp
 805d481:	89 c6                	mov    %eax,%esi
 805d483:	a3 90 a2 06 08       	mov    %eax,0x806a290
      if (preallocated)
        *sv = slotvec0;
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
 805d488:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d48c:	89 3c 24             	mov    %edi,(%esp)
 805d48f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d493:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d497:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d49b:	b9 76 26 00 00       	mov    $0x2676,%ecx
 805d4a0:	e8 33 15 00 00       	call   805e9d8 <__afl_maybe_log>
 805d4a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d4a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d4ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d4b1:	8b 3c 24             	mov    (%esp),%edi
 805d4b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d4b8:	8b 15 9c a2 06 08    	mov    0x806a29c,%edx
 805d4be:	89 e9                	mov    %ebp,%ecx
 805d4c0:	83 ec 04             	sub    $0x4,%esp
 805d4c3:	29 d1                	sub    %edx,%ecx
 805d4c5:	8d 04 d6             	lea    (%esi,%edx,8),%eax
 805d4c8:	c1 e1 03             	shl    $0x3,%ecx
 805d4cb:	51                   	push   %ecx
 805d4cc:	6a 00                	push   $0x0
 805d4ce:	50                   	push   %eax
 805d4cf:	e8 0c bf fe ff       	call   80493e0 <memset@plt>
      nslots = n1;
 805d4d4:	89 2d 9c a2 06 08    	mov    %ebp,0x806a29c
 805d4da:	83 c4 10             	add    $0x10,%esp
 805d4dd:	8d 76 00             	lea    0x0(%esi),%esi

  {
    size_t size = sv[n].size;
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
 805d4e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d4e4:	89 3c 24             	mov    %edi,(%esp)
 805d4e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d4eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d4ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d4f3:	b9 8a 20 00 00       	mov    $0x208a,%ecx
 805d4f8:	e8 db 14 00 00       	call   805e9d8 <__afl_maybe_log>
 805d4fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d501:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d505:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d509:	8b 3c 24             	mov    (%esp),%edi
 805d50c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d510:	8b 53 04             	mov    0x4(%ebx),%edx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
                                             options->style, flags,
                                             options->quote_these_too,
 805d513:	8d 4b 08             	lea    0x8(%ebx),%ecx
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
      nslots = n1;
    }

  {
    size_t size = sv[n].size;
 805d516:	8d 3c fe             	lea    (%esi,%edi,8),%edi
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
 805d519:	83 ec 08             	sub    $0x8,%esp
                                             options->style, flags,
                                             options->quote_these_too,
 805d51c:	89 4c 24 24          	mov    %ecx,0x24(%esp)
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
      nslots = n1;
    }

  {
    size_t size = sv[n].size;
 805d520:	8b 2f                	mov    (%edi),%ebp
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
 805d522:	83 ca 01             	or     $0x1,%edx
      nslots = n1;
    }

  {
    size_t size = sv[n].size;
    char *val = sv[n].val;
 805d525:	8b 77 04             	mov    0x4(%edi),%esi
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
 805d528:	89 54 24 20          	mov    %edx,0x20(%esp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
 805d52c:	ff 73 2c             	pushl  0x2c(%ebx)
 805d52f:	ff 73 28             	pushl  0x28(%ebx)
 805d532:	51                   	push   %ecx
 805d533:	52                   	push   %edx
 805d534:	ff 33                	pushl  (%ebx)
 805d536:	89 ea                	mov    %ebp,%edx
 805d538:	ff 74 24 28          	pushl  0x28(%esp)
 805d53c:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 805d540:	89 f0                	mov    %esi,%eax
 805d542:	e8 b9 b7 ff ff       	call   8058d00 <quotearg_buffer_restyled>
                                             options->style, flags,
                                             options->quote_these_too,
                                             options->left_quote,
                                             options->right_quote);

    if (size <= qsize)
 805d547:	83 c4 20             	add    $0x20,%esp
 805d54a:	39 c5                	cmp    %eax,%ebp
 805d54c:	0f 87 e2 00 00 00    	ja     805d634 <quotearg_n_options+0x314>
 805d552:	66 90                	xchg   %ax,%ax
 805d554:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d558:	89 3c 24             	mov    %edi,(%esp)
 805d55b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d55f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d563:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d567:	b9 b2 99 00 00       	mov    $0x99b2,%ecx
 805d56c:	e8 67 14 00 00       	call   805e9d8 <__afl_maybe_log>
 805d571:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d575:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d579:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d57d:	8b 3c 24             	mov    (%esp),%edi
 805d580:	8d 64 24 10          	lea    0x10(%esp),%esp
      {
        sv[n].size = size = qsize + 1;
 805d584:	8d 68 01             	lea    0x1(%eax),%ebp
        if (val != slot0)
 805d587:	81 fe 80 ac 43 08    	cmp    $0x843ac80,%esi
                                             options->left_quote,
                                             options->right_quote);

    if (size <= qsize)
      {
        sv[n].size = size = qsize + 1;
 805d58d:	89 2f                	mov    %ebp,(%edi)
        if (val != slot0)
 805d58f:	74 3f                	je     805d5d0 <quotearg_n_options+0x2b0>
 805d591:	8d 76 00             	lea    0x0(%esi),%esi
 805d594:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d598:	89 3c 24             	mov    %edi,(%esp)
 805d59b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d59f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d5a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d5a7:	b9 42 fe 00 00       	mov    $0xfe42,%ecx
 805d5ac:	e8 27 14 00 00       	call   805e9d8 <__afl_maybe_log>
 805d5b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d5b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d5b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d5bd:	8b 3c 24             	mov    (%esp),%edi
 805d5c0:	8d 64 24 10          	lea    0x10(%esp),%esp
          free (val);
 805d5c4:	83 ec 0c             	sub    $0xc,%esp
 805d5c7:	56                   	push   %esi
 805d5c8:	e8 d3 bb fe ff       	call   80491a0 <free@plt>
 805d5cd:	83 c4 10             	add    $0x10,%esp
XALLOC_INLINE char *xcharalloc (size_t n)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1));
XALLOC_INLINE char *
xcharalloc (size_t n)
{
  return XNMALLOC (n, char);
 805d5d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d5d4:	89 3c 24             	mov    %edi,(%esp)
 805d5d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d5db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d5df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d5e3:	b9 04 62 00 00       	mov    $0x6204,%ecx
 805d5e8:	e8 eb 13 00 00       	call   805e9d8 <__afl_maybe_log>
 805d5ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d5f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d5f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d5f9:	8b 3c 24             	mov    (%esp),%edi
 805d5fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d600:	83 ec 0c             	sub    $0xc,%esp
 805d603:	55                   	push   %ebp
 805d604:	e8 f7 20 00 00       	call   805f700 <xmalloc>
        sv[n].val = val = xcharalloc (size);
 805d609:	89 47 04             	mov    %eax,0x4(%edi)
 805d60c:	89 c6                	mov    %eax,%esi
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
 805d60e:	58                   	pop    %eax
 805d60f:	5a                   	pop    %edx
 805d610:	ff 73 2c             	pushl  0x2c(%ebx)
 805d613:	ff 73 28             	pushl  0x28(%ebx)
 805d616:	89 ea                	mov    %ebp,%edx
 805d618:	ff 74 24 2c          	pushl  0x2c(%esp)
 805d61c:	ff 74 24 2c          	pushl  0x2c(%esp)
 805d620:	89 f0                	mov    %esi,%eax
 805d622:	ff 33                	pushl  (%ebx)
 805d624:	ff 74 24 28          	pushl  0x28(%esp)
 805d628:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 805d62c:	e8 cf b6 ff ff       	call   8058d00 <quotearg_buffer_restyled>
 805d631:	83 c4 20             	add    $0x20,%esp
                                  flags, options->quote_these_too,
                                  options->left_quote,
                                  options->right_quote);
      }

    errno = e;
 805d634:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d638:	89 3c 24             	mov    %edi,(%esp)
 805d63b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d63f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d643:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d647:	b9 23 83 00 00       	mov    $0x8323,%ecx
 805d64c:	e8 87 13 00 00       	call   805e9d8 <__afl_maybe_log>
 805d651:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d655:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d659:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d65d:	8b 3c 24             	mov    (%esp),%edi
 805d660:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d664:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 805d668:	8b 44 24 14          	mov    0x14(%esp),%eax
 805d66c:	89 03                	mov    %eax,(%ebx)
    return val;
  }
}
 805d66e:	83 c4 2c             	add    $0x2c,%esp
 805d671:	89 f0                	mov    %esi,%eax
 805d673:	5b                   	pop    %ebx
 805d674:	5e                   	pop    %esi
 805d675:	5f                   	pop    %edi
 805d676:	5d                   	pop    %ebp
 805d677:	c3                   	ret    
 805d678:	90                   	nop
 805d679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
        xalloc_die ();

      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
 805d680:	83 ec 08             	sub    $0x8,%esp
 805d683:	52                   	push   %edx
 805d684:	6a 00                	push   $0x0
 805d686:	e8 a5 22 00 00       	call   805f930 <xrealloc>
      if (preallocated)
        *sv = slotvec0;
 805d68b:	8b 0d 94 a2 06 08    	mov    0x806a294,%ecx
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
        xalloc_die ();

      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
 805d691:	89 c6                	mov    %eax,%esi
 805d693:	a3 90 a2 06 08       	mov    %eax,0x806a290
      if (preallocated)
        *sv = slotvec0;
 805d698:	a1 98 a2 06 08       	mov    0x806a298,%eax
 805d69d:	83 c4 10             	add    $0x10,%esp
 805d6a0:	89 0e                	mov    %ecx,(%esi)
 805d6a2:	89 46 04             	mov    %eax,0x4(%esi)
 805d6a5:	e9 de fd ff ff       	jmp    805d488 <quotearg_n_options+0x168>
 805d6aa:	66 90                	xchg   %ax,%ax

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;

  if (n < 0)
    abort ();
 805d6ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d6b0:	89 3c 24             	mov    %edi,(%esp)
 805d6b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d6b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d6bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d6bf:	b9 be b2 00 00       	mov    $0xb2be,%ecx
 805d6c4:	e8 0f 13 00 00       	call   805e9d8 <__afl_maybe_log>
 805d6c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d6cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d6d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d6d5:	8b 3c 24             	mov    (%esp),%edi
 805d6d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d6dc:	e8 1f be fe ff       	call   8049500 <abort@plt>
 805d6e1:	8d 76 00             	lea    0x0(%esi),%esi
         is once again performed only at compile time.  */
      size_t n1 = n0 + 1;
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
        xalloc_die ();
 805d6e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d6e8:	89 3c 24             	mov    %edi,(%esp)
 805d6eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d6ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d6f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d6f7:	b9 ec 17 00 00       	mov    $0x17ec,%ecx
 805d6fc:	e8 d7 12 00 00       	call   805e9d8 <__afl_maybe_log>
 805d701:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d705:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d709:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d70d:	8b 3c 24             	mov    (%esp),%edi
 805d710:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d714:	e8 77 2c 00 00       	call   8060390 <xalloc_die>
 805d719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805d720 <clone_quoting_options>:
/* Allocate a new set of quoting options, with contents initially identical
   to O if O is not null, or to the default if O is null.
   It is the caller's responsibility to free the result.  */
struct quoting_options *
clone_quoting_options (struct quoting_options *o)
{
 805d720:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d724:	89 3c 24             	mov    %edi,(%esp)
 805d727:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d72b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d72f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d733:	b9 6c ca 00 00       	mov    $0xca6c,%ecx
 805d738:	e8 9b 12 00 00       	call   805e9d8 <__afl_maybe_log>
 805d73d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d741:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d745:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d749:	8b 3c 24             	mov    (%esp),%edi
 805d74c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d750:	57                   	push   %edi
 805d751:	56                   	push   %esi
 805d752:	53                   	push   %ebx
 805d753:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  int e = errno;
 805d757:	e8 a4 bc fe ff       	call   8049400 <__errno_location@plt>
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
 805d75c:	85 db                	test   %ebx,%ebx
   to O if O is not null, or to the default if O is null.
   It is the caller's responsibility to free the result.  */
struct quoting_options *
clone_quoting_options (struct quoting_options *o)
{
  int e = errno;
 805d75e:	8b 38                	mov    (%eax),%edi
 805d760:	89 c6                	mov    %eax,%esi
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
 805d762:	b8 80 ad 43 08       	mov    $0x843ad80,%eax
 805d767:	0f 44 d8             	cmove  %eax,%ebx
 805d76a:	83 ec 08             	sub    $0x8,%esp
 805d76d:	6a 30                	push   $0x30
 805d76f:	53                   	push   %ebx
 805d770:	e8 1b 2a 00 00       	call   8060190 <xmemdup>
                                       sizeof *o);
  errno = e;
  return p;
 805d775:	83 c4 10             	add    $0x10,%esp
clone_quoting_options (struct quoting_options *o)
{
  int e = errno;
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
                                       sizeof *o);
  errno = e;
 805d778:	89 3e                	mov    %edi,(%esi)
  return p;
}
 805d77a:	5b                   	pop    %ebx
 805d77b:	5e                   	pop    %esi
 805d77c:	5f                   	pop    %edi
 805d77d:	c3                   	ret    
 805d77e:	66 90                	xchg   %ax,%ax

0805d780 <get_quoting_style>:

/* Get the value of O's quoting style.  If O is null, use the default.  */
enum quoting_style
get_quoting_style (struct quoting_options *o)
{
 805d780:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d784:	89 3c 24             	mov    %edi,(%esp)
 805d787:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d78b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d78f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d793:	b9 03 4a 00 00       	mov    $0x4a03,%ecx
 805d798:	e8 3b 12 00 00       	call   805e9d8 <__afl_maybe_log>
 805d79d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d7a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d7a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d7a9:	8b 3c 24             	mov    (%esp),%edi
 805d7ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d7b0:	8b 44 24 04          	mov    0x4(%esp),%eax
  return (o ? o : &default_quoting_options)->style;
 805d7b4:	ba 80 ad 43 08       	mov    $0x843ad80,%edx
 805d7b9:	85 c0                	test   %eax,%eax
 805d7bb:	0f 44 c2             	cmove  %edx,%eax
 805d7be:	8b 00                	mov    (%eax),%eax
}
 805d7c0:	c3                   	ret    
 805d7c1:	eb 0d                	jmp    805d7d0 <set_quoting_style>
 805d7c3:	90                   	nop
 805d7c4:	90                   	nop
 805d7c5:	90                   	nop
 805d7c6:	90                   	nop
 805d7c7:	90                   	nop
 805d7c8:	90                   	nop
 805d7c9:	90                   	nop
 805d7ca:	90                   	nop
 805d7cb:	90                   	nop
 805d7cc:	90                   	nop
 805d7cd:	90                   	nop
 805d7ce:	90                   	nop
 805d7cf:	90                   	nop

0805d7d0 <set_quoting_style>:

/* In O (or in the default if O is null),
   set the value of the quoting style to S.  */
void
set_quoting_style (struct quoting_options *o, enum quoting_style s)
{
 805d7d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d7d4:	89 3c 24             	mov    %edi,(%esp)
 805d7d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d7db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d7df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d7e3:	b9 96 91 00 00       	mov    $0x9196,%ecx
 805d7e8:	e8 eb 11 00 00       	call   805e9d8 <__afl_maybe_log>
 805d7ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d7f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d7f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d7f9:	8b 3c 24             	mov    (%esp),%edi
 805d7fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d800:	8b 44 24 04          	mov    0x4(%esp),%eax
  (o ? o : &default_quoting_options)->style = s;
 805d804:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d808:	ba 80 ad 43 08       	mov    $0x843ad80,%edx
 805d80d:	85 c0                	test   %eax,%eax
 805d80f:	0f 44 c2             	cmove  %edx,%eax
 805d812:	89 08                	mov    %ecx,(%eax)
 805d814:	c3                   	ret    
 805d815:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 805d819:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805d820 <set_char_quoting>:
   Return the old value.  Currently, the only values defined for I are
   0 (the default) and 1 (which means to quote the character even if
   it would not otherwise be quoted).  */
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
 805d820:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d824:	89 3c 24             	mov    %edi,(%esp)
 805d827:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d82b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d82f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d833:	b9 ab d3 00 00       	mov    $0xd3ab,%ecx
 805d838:	e8 9b 11 00 00       	call   805e9d8 <__afl_maybe_log>
 805d83d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d841:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d845:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d849:	8b 3c 24             	mov    (%esp),%edi
 805d84c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d850:	56                   	push   %esi
 805d851:	53                   	push   %ebx
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 805d852:	b9 80 ad 43 08       	mov    $0x843ad80,%ecx
   Return the old value.  Currently, the only values defined for I are
   0 (the default) and 1 (which means to quote the character even if
   it would not otherwise be quoted).  */
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
 805d857:	8b 54 24 0c          	mov    0xc(%esp),%edx
 805d85b:	8b 44 24 10          	mov    0x10(%esp),%eax
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 805d85f:	85 d2                	test   %edx,%edx
 805d861:	0f 44 d1             	cmove  %ecx,%edx
  int shift = uc % INT_BITS;
 805d864:	89 c1                	mov    %eax,%ecx
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 805d866:	c0 e8 05             	shr    $0x5,%al
 805d869:	0f b6 d8             	movzbl %al,%ebx
  int shift = uc % INT_BITS;
 805d86c:	83 e1 1f             	and    $0x1f,%ecx
 805d86f:	8d 34 9a             	lea    (%edx,%ebx,4),%esi
  int r = (*p >> shift) & 1;
  *p ^= ((i & 1) ^ r) << shift;
 805d872:	8b 54 24 14          	mov    0x14(%esp),%edx
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  int shift = uc % INT_BITS;
  int r = (*p >> shift) & 1;
 805d876:	8b 5e 08             	mov    0x8(%esi),%ebx
 805d879:	89 d8                	mov    %ebx,%eax
 805d87b:	d3 e8                	shr    %cl,%eax
  *p ^= ((i & 1) ^ r) << shift;
 805d87d:	31 c2                	xor    %eax,%edx
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  int shift = uc % INT_BITS;
  int r = (*p >> shift) & 1;
 805d87f:	83 e0 01             	and    $0x1,%eax
  *p ^= ((i & 1) ^ r) << shift;
 805d882:	83 e2 01             	and    $0x1,%edx
 805d885:	d3 e2                	shl    %cl,%edx
 805d887:	31 da                	xor    %ebx,%edx
 805d889:	89 56 08             	mov    %edx,0x8(%esi)
  return r;
}
 805d88c:	5b                   	pop    %ebx
 805d88d:	5e                   	pop    %esi
 805d88e:	c3                   	ret    
 805d88f:	90                   	nop

0805d890 <set_quoting_flags>:
   set the value of the quoting options flag to I, which can be a
   bitwise combination of enum quoting_flags, or 0 for default
   behavior.  Return the old value.  */
int
set_quoting_flags (struct quoting_options *o, int i)
{
 805d890:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d894:	89 3c 24             	mov    %edi,(%esp)
 805d897:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d89b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d89f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d8a3:	b9 77 70 00 00       	mov    $0x7077,%ecx
 805d8a8:	e8 2b 11 00 00       	call   805e9d8 <__afl_maybe_log>
 805d8ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d8b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d8b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d8b9:	8b 3c 24             	mov    (%esp),%edi
 805d8bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d8c0:	8b 44 24 04          	mov    0x4(%esp),%eax
  int r;
  if (!o)
    o = &default_quoting_options;
  r = o->flags;
  o->flags = i;
 805d8c4:	8b 4c 24 08          	mov    0x8(%esp),%ecx
int
set_quoting_flags (struct quoting_options *o, int i)
{
  int r;
  if (!o)
    o = &default_quoting_options;
 805d8c8:	ba 80 ad 43 08       	mov    $0x843ad80,%edx
 805d8cd:	85 c0                	test   %eax,%eax
 805d8cf:	0f 45 d0             	cmovne %eax,%edx
  r = o->flags;
 805d8d2:	8b 42 04             	mov    0x4(%edx),%eax
  o->flags = i;
 805d8d5:	89 4a 04             	mov    %ecx,0x4(%edx)
  return r;
}
 805d8d8:	c3                   	ret    
 805d8d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805d8e0 <set_custom_quoting>:

void
set_custom_quoting (struct quoting_options *o,
                    char const *left_quote, char const *right_quote)
{
 805d8e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d8e4:	89 3c 24             	mov    %edi,(%esp)
 805d8e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d8eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d8ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d8f3:	b9 d3 66 00 00       	mov    $0x66d3,%ecx
 805d8f8:	e8 db 10 00 00       	call   805e9d8 <__afl_maybe_log>
 805d8fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d901:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d905:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d909:	8b 3c 24             	mov    (%esp),%edi
 805d90c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d910:	53                   	push   %ebx
  if (!o)
    o = &default_quoting_options;
 805d911:	bb 80 ad 43 08       	mov    $0x843ad80,%ebx
}

void
set_custom_quoting (struct quoting_options *o,
                    char const *left_quote, char const *right_quote)
{
 805d916:	83 ec 08             	sub    $0x8,%esp
 805d919:	8b 44 24 10          	mov    0x10(%esp),%eax
 805d91d:	8b 54 24 14          	mov    0x14(%esp),%edx
 805d921:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  if (!o)
    o = &default_quoting_options;
 805d925:	85 c0                	test   %eax,%eax
 805d927:	0f 44 c3             	cmove  %ebx,%eax
  o->style = custom_quoting_style;
  if (!left_quote || !right_quote)
 805d92a:	85 d2                	test   %edx,%edx
set_custom_quoting (struct quoting_options *o,
                    char const *left_quote, char const *right_quote)
{
  if (!o)
    o = &default_quoting_options;
  o->style = custom_quoting_style;
 805d92c:	c7 00 08 00 00 00    	movl   $0x8,(%eax)
  if (!left_quote || !right_quote)
 805d932:	74 6f                	je     805d9a3 <set_custom_quoting+0xc3>
 805d934:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d938:	89 3c 24             	mov    %edi,(%esp)
 805d93b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d93f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d943:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d947:	b9 6c 0f 00 00       	mov    $0xf6c,%ecx
 805d94c:	e8 87 10 00 00       	call   805e9d8 <__afl_maybe_log>
 805d951:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d955:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d959:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d95d:	8b 3c 24             	mov    (%esp),%edi
 805d960:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d964:	85 c9                	test   %ecx,%ecx
 805d966:	74 3b                	je     805d9a3 <set_custom_quoting+0xc3>
 805d968:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d96c:	89 3c 24             	mov    %edi,(%esp)
 805d96f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d973:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d977:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d97b:	b9 be 20 00 00       	mov    $0x20be,%ecx
 805d980:	e8 53 10 00 00       	call   805e9d8 <__afl_maybe_log>
 805d985:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d989:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d98d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d991:	8b 3c 24             	mov    (%esp),%edi
 805d994:	8d 64 24 10          	lea    0x10(%esp),%esp
    abort ();
  o->left_quote = left_quote;
 805d998:	89 50 28             	mov    %edx,0x28(%eax)
  o->right_quote = right_quote;
 805d99b:	89 48 2c             	mov    %ecx,0x2c(%eax)
}
 805d99e:	83 c4 08             	add    $0x8,%esp
 805d9a1:	5b                   	pop    %ebx
 805d9a2:	c3                   	ret    
 805d9a3:	90                   	nop
{
  if (!o)
    o = &default_quoting_options;
  o->style = custom_quoting_style;
  if (!left_quote || !right_quote)
    abort ();
 805d9a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d9a8:	89 3c 24             	mov    %edi,(%esp)
 805d9ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d9af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d9b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d9b7:	b9 4f e3 00 00       	mov    $0xe34f,%ecx
 805d9bc:	e8 17 10 00 00       	call   805e9d8 <__afl_maybe_log>
 805d9c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d9c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d9c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d9cd:	8b 3c 24             	mov    (%esp),%edi
 805d9d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d9d4:	e8 27 bb fe ff       	call   8049500 <abort@plt>
 805d9d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805d9e0 <quotearg_buffer>:
   ARGSIZE.  */
size_t
quotearg_buffer (char *buffer, size_t buffersize,
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
 805d9e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d9e4:	89 3c 24             	mov    %edi,(%esp)
 805d9e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d9eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d9ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d9f3:	b9 d4 1a 00 00       	mov    $0x1ad4,%ecx
 805d9f8:	e8 db 0f 00 00       	call   805e9d8 <__afl_maybe_log>
 805d9fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805da01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805da05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805da09:	8b 3c 24             	mov    (%esp),%edi
 805da0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805da10:	57                   	push   %edi
 805da11:	56                   	push   %esi
 805da12:	53                   	push   %ebx
 805da13:	8b 44 24 20          	mov    0x20(%esp),%eax
  struct quoting_options const *p = o ? o : &default_quoting_options;
 805da17:	bb 80 ad 43 08       	mov    $0x843ad80,%ebx
 805da1c:	85 c0                	test   %eax,%eax
 805da1e:	0f 45 d8             	cmovne %eax,%ebx
  int e = errno;
 805da21:	e8 da b9 fe ff       	call   8049400 <__errno_location@plt>
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                       p->style, p->flags, p->quote_these_too,
 805da26:	8d 53 08             	lea    0x8(%ebx),%edx
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
 805da29:	83 ec 08             	sub    $0x8,%esp
quotearg_buffer (char *buffer, size_t buffersize,
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 805da2c:	8b 38                	mov    (%eax),%edi
 805da2e:	89 c6                	mov    %eax,%esi
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
 805da30:	ff 73 2c             	pushl  0x2c(%ebx)
 805da33:	ff 73 28             	pushl  0x28(%ebx)
 805da36:	52                   	push   %edx
 805da37:	ff 73 04             	pushl  0x4(%ebx)
 805da3a:	ff 33                	pushl  (%ebx)
 805da3c:	ff 74 24 38          	pushl  0x38(%esp)
 805da40:	8b 4c 24 38          	mov    0x38(%esp),%ecx
 805da44:	8b 54 24 34          	mov    0x34(%esp),%edx
 805da48:	8b 44 24 30          	mov    0x30(%esp),%eax
 805da4c:	e8 af b2 ff ff       	call   8058d00 <quotearg_buffer_restyled>
                                       p->style, p->flags, p->quote_these_too,
                                       p->left_quote, p->right_quote);
  errno = e;
  return r;
 805da51:	83 c4 20             	add    $0x20,%esp
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                       p->style, p->flags, p->quote_these_too,
                                       p->left_quote, p->right_quote);
  errno = e;
 805da54:	89 3e                	mov    %edi,(%esi)
  return r;
}
 805da56:	5b                   	pop    %ebx
 805da57:	5e                   	pop    %esi
 805da58:	5f                   	pop    %edi
 805da59:	c3                   	ret    
 805da5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805da60 <quotearg_alloc_mem>:
   NULL, and set_quoting_flags has not set the null byte elision
   flag.  */
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
 805da60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805da64:	89 3c 24             	mov    %edi,(%esp)
 805da67:	89 54 24 04          	mov    %edx,0x4(%esp)
 805da6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805da6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805da73:	b9 77 30 00 00       	mov    $0x3077,%ecx
 805da78:	e8 5b 0f 00 00       	call   805e9d8 <__afl_maybe_log>
 805da7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805da81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805da85:	8b 54 24 04          	mov    0x4(%esp),%edx
 805da89:	8b 3c 24             	mov    (%esp),%edi
 805da8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805da90:	55                   	push   %ebp
 805da91:	57                   	push   %edi
 805da92:	56                   	push   %esi
 805da93:	53                   	push   %ebx
  struct quoting_options const *p = o ? o : &default_quoting_options;
 805da94:	bb 80 ad 43 08       	mov    $0x843ad80,%ebx
   NULL, and set_quoting_flags has not set the null byte elision
   flag.  */
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
 805da99:	83 ec 1c             	sub    $0x1c,%esp
 805da9c:	8b 44 24 3c          	mov    0x3c(%esp),%eax
  struct quoting_options const *p = o ? o : &default_quoting_options;
 805daa0:	85 c0                	test   %eax,%eax
 805daa2:	0f 45 d8             	cmovne %eax,%ebx
  int e = errno;
 805daa5:	e8 56 b9 fe ff       	call   8049400 <__errno_location@plt>
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 805daaa:	8b 74 24 38          	mov    0x38(%esp),%esi
 805daae:	31 c9                	xor    %ecx,%ecx
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 805dab0:	8b 10                	mov    (%eax),%edx
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
                                             flags, p->quote_these_too,
 805dab2:	8d 6b 08             	lea    0x8(%ebx),%ebp
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 805dab5:	89 c7                	mov    %eax,%edi
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 805dab7:	85 f6                	test   %esi,%esi
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 805dab9:	89 14 24             	mov    %edx,(%esp)
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 805dabc:	0f 94 c1             	sete   %cl
 805dabf:	0b 4b 04             	or     0x4(%ebx),%ecx
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
 805dac2:	83 ec 08             	sub    $0x8,%esp
 805dac5:	ff 73 2c             	pushl  0x2c(%ebx)
 805dac8:	ff 73 28             	pushl  0x28(%ebx)
 805dacb:	31 d2                	xor    %edx,%edx
 805dacd:	55                   	push   %ebp
 805dace:	31 c0                	xor    %eax,%eax
 805dad0:	51                   	push   %ecx
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 805dad1:	89 ce                	mov    %ecx,%esi
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
 805dad3:	ff 33                	pushl  (%ebx)
 805dad5:	ff 74 24 50          	pushl  0x50(%esp)
 805dad9:	8b 4c 24 50          	mov    0x50(%esp),%ecx
 805dadd:	e8 1e b2 ff ff       	call   8058d00 <quotearg_buffer_restyled>
 805dae2:	89 44 24 2c          	mov    %eax,0x2c(%esp)
 805dae6:	8d 40 01             	lea    0x1(%eax),%eax
 805dae9:	83 c4 14             	add    $0x14,%esp
 805daec:	50                   	push   %eax
 805daed:	89 44 24 18          	mov    %eax,0x18(%esp)
 805daf1:	e8 0a 1c 00 00       	call   805f700 <xmalloc>
 805daf6:	89 44 24 14          	mov    %eax,0x14(%esp)
                                             flags, p->quote_these_too,
                                             p->left_quote,
                                             p->right_quote) + 1;
  char *buf = xcharalloc (bufsize);
  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,
 805dafa:	59                   	pop    %ecx
 805dafb:	5a                   	pop    %edx
 805dafc:	ff 73 2c             	pushl  0x2c(%ebx)
 805daff:	ff 73 28             	pushl  0x28(%ebx)
 805db02:	55                   	push   %ebp
 805db03:	56                   	push   %esi
 805db04:	ff 33                	pushl  (%ebx)
 805db06:	ff 74 24 50          	pushl  0x50(%esp)
 805db0a:	8b 4c 24 50          	mov    0x50(%esp),%ecx
 805db0e:	8b 54 24 28          	mov    0x28(%esp),%edx
 805db12:	e8 e9 b1 ff ff       	call   8058d00 <quotearg_buffer_restyled>
                            p->quote_these_too,
                            p->left_quote, p->right_quote);
  errno = e;
 805db17:	8b 5c 24 20          	mov    0x20(%esp),%ebx
  if (size)
 805db1b:	83 c4 20             	add    $0x20,%esp
                                             p->right_quote) + 1;
  char *buf = xcharalloc (bufsize);
  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,
                            p->quote_these_too,
                            p->left_quote, p->right_quote);
  errno = e;
 805db1e:	89 1f                	mov    %ebx,(%edi)
  if (size)
 805db20:	8b 7c 24 38          	mov    0x38(%esp),%edi
 805db24:	85 ff                	test   %edi,%edi
 805db26:	74 3a                	je     805db62 <quotearg_alloc_mem+0x102>
 805db28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805db2c:	89 3c 24             	mov    %edi,(%esp)
 805db2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805db33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805db37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805db3b:	b9 4a 41 00 00       	mov    $0x414a,%ecx
 805db40:	e8 93 0e 00 00       	call   805e9d8 <__afl_maybe_log>
 805db45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805db49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805db4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805db51:	8b 3c 24             	mov    (%esp),%edi
 805db54:	8d 64 24 10          	lea    0x10(%esp),%esp
    *size = bufsize - 1;
 805db58:	8b 54 24 38          	mov    0x38(%esp),%edx
 805db5c:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 805db60:	89 0a                	mov    %ecx,(%edx)
 805db62:	66 90                	xchg   %ax,%ax
  return buf;
}
 805db64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805db68:	89 3c 24             	mov    %edi,(%esp)
 805db6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805db6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805db73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805db77:	b9 39 53 00 00       	mov    $0x5339,%ecx
 805db7c:	e8 57 0e 00 00       	call   805e9d8 <__afl_maybe_log>
 805db81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805db85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805db89:	8b 54 24 04          	mov    0x4(%esp),%edx
 805db8d:	8b 3c 24             	mov    (%esp),%edi
 805db90:	8d 64 24 10          	lea    0x10(%esp),%esp
 805db94:	8b 44 24 04          	mov    0x4(%esp),%eax
 805db98:	83 c4 1c             	add    $0x1c,%esp
 805db9b:	5b                   	pop    %ebx
 805db9c:	5e                   	pop    %esi
 805db9d:	5f                   	pop    %edi
 805db9e:	5d                   	pop    %ebp
 805db9f:	c3                   	ret    

0805dba0 <quotearg_alloc>:

/* Equivalent to quotearg_alloc (ARG, ARGSIZE, NULL, O).  */
char *
quotearg_alloc (char const *arg, size_t argsize,
                struct quoting_options const *o)
{
 805dba0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dba4:	89 3c 24             	mov    %edi,(%esp)
 805dba7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dbab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dbaf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dbb3:	b9 2f d3 00 00       	mov    $0xd32f,%ecx
 805dbb8:	e8 1b 0e 00 00       	call   805e9d8 <__afl_maybe_log>
 805dbbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dbc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dbc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dbc9:	8b 3c 24             	mov    (%esp),%edi
 805dbcc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dbd0:	83 ec 0c             	sub    $0xc,%esp
  return quotearg_alloc_mem (arg, argsize, NULL, o);
 805dbd3:	ff 74 24 18          	pushl  0x18(%esp)
 805dbd7:	6a 00                	push   $0x0
 805dbd9:	ff 74 24 1c          	pushl  0x1c(%esp)
 805dbdd:	ff 74 24 1c          	pushl  0x1c(%esp)
 805dbe1:	e8 7a fe ff ff       	call   805da60 <quotearg_alloc_mem>
}
 805dbe6:	83 c4 1c             	add    $0x1c,%esp
 805dbe9:	c3                   	ret    
 805dbea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805dbf0 <quotearg_free>:
static struct slotvec slotvec0 = {sizeof slot0, slot0};
static struct slotvec *slotvec = &slotvec0;

void
quotearg_free (void)
{
 805dbf0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dbf4:	89 3c 24             	mov    %edi,(%esp)
 805dbf7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dbfb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dbff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dc03:	b9 c9 1a 00 00       	mov    $0x1ac9,%ecx
 805dc08:	e8 cb 0d 00 00       	call   805e9d8 <__afl_maybe_log>
 805dc0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dc11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dc15:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dc19:	8b 3c 24             	mov    (%esp),%edi
 805dc1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dc20:	55                   	push   %ebp
 805dc21:	57                   	push   %edi
 805dc22:	56                   	push   %esi
 805dc23:	53                   	push   %ebx
 805dc24:	83 ec 0c             	sub    $0xc,%esp
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805dc27:	8b 2d 9c a2 06 08    	mov    0x806a29c,%ebp
static struct slotvec *slotvec = &slotvec0;

void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
 805dc2d:	8b 35 90 a2 06 08    	mov    0x806a290,%esi
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805dc33:	83 fd 01             	cmp    $0x1,%ebp
 805dc36:	0f 86 c4 04 00 00    	jbe    805e100 <quotearg_free+0x510>
 805dc3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dc40:	89 3c 24             	mov    %edi,(%esp)
 805dc43:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dc47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dc4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dc4f:	b9 71 d1 00 00       	mov    $0xd171,%ecx
 805dc54:	e8 7f 0d 00 00       	call   805e9d8 <__afl_maybe_log>
 805dc59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dc5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dc61:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dc65:	8b 3c 24             	mov    (%esp),%edi
 805dc68:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
 805dc6c:	83 ec 0c             	sub    $0xc,%esp
 805dc6f:	8d 7d fe             	lea    -0x2(%ebp),%edi
 805dc72:	ff 76 0c             	pushl  0xc(%esi)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805dc75:	bb 02 00 00 00       	mov    $0x2,%ebx
    free (sv[i].val);
 805dc7a:	e8 21 b5 fe ff       	call   80491a0 <free@plt>
 805dc7f:	83 e7 07             	and    $0x7,%edi
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805dc82:	83 c4 10             	add    $0x10,%esp
 805dc85:	39 eb                	cmp    %ebp,%ebx
 805dc87:	0f 84 73 04 00 00    	je     805e100 <quotearg_free+0x510>
 805dc8d:	8d 76 00             	lea    0x0(%esi),%esi
 805dc90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dc94:	89 3c 24             	mov    %edi,(%esp)
 805dc97:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dc9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dc9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dca3:	b9 c3 1d 00 00       	mov    $0x1dc3,%ecx
 805dca8:	e8 2b 0d 00 00       	call   805e9d8 <__afl_maybe_log>
 805dcad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dcb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dcb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dcb9:	8b 3c 24             	mov    (%esp),%edi
 805dcbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dcc0:	85 ff                	test   %edi,%edi
 805dcc2:	0f 84 78 03 00 00    	je     805e040 <quotearg_free+0x450>
 805dcc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dccc:	89 3c 24             	mov    %edi,(%esp)
 805dccf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dcd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dcd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dcdb:	b9 96 b7 00 00       	mov    $0xb796,%ecx
 805dce0:	e8 f3 0c 00 00       	call   805e9d8 <__afl_maybe_log>
 805dce5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dce9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dced:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dcf1:	8b 3c 24             	mov    (%esp),%edi
 805dcf4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dcf8:	83 ff 01             	cmp    $0x1,%edi
 805dcfb:	0f 84 c1 02 00 00    	je     805dfc2 <quotearg_free+0x3d2>
 805dd01:	8d 76 00             	lea    0x0(%esi),%esi
 805dd04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dd08:	89 3c 24             	mov    %edi,(%esp)
 805dd0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dd13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dd17:	b9 af 71 00 00       	mov    $0x71af,%ecx
 805dd1c:	e8 b7 0c 00 00       	call   805e9d8 <__afl_maybe_log>
 805dd21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dd25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dd29:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dd2d:	8b 3c 24             	mov    (%esp),%edi
 805dd30:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dd34:	83 ff 02             	cmp    $0x2,%edi
 805dd37:	0f 84 41 02 00 00    	je     805df7e <quotearg_free+0x38e>
 805dd3d:	8d 76 00             	lea    0x0(%esi),%esi
 805dd40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dd44:	89 3c 24             	mov    %edi,(%esp)
 805dd47:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dd4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dd53:	b9 8b 39 00 00       	mov    $0x398b,%ecx
 805dd58:	e8 7b 0c 00 00       	call   805e9d8 <__afl_maybe_log>
 805dd5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dd61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dd65:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dd69:	8b 3c 24             	mov    (%esp),%edi
 805dd6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dd70:	83 ff 03             	cmp    $0x3,%edi
 805dd73:	0f 84 c1 01 00 00    	je     805df3a <quotearg_free+0x34a>
 805dd79:	8d 76 00             	lea    0x0(%esi),%esi
 805dd7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dd80:	89 3c 24             	mov    %edi,(%esp)
 805dd83:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dd8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dd8f:	b9 c1 34 00 00       	mov    $0x34c1,%ecx
 805dd94:	e8 3f 0c 00 00       	call   805e9d8 <__afl_maybe_log>
 805dd99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dd9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dda1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dda5:	8b 3c 24             	mov    (%esp),%edi
 805dda8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ddac:	83 ff 04             	cmp    $0x4,%edi
 805ddaf:	0f 84 41 01 00 00    	je     805def6 <quotearg_free+0x306>
 805ddb5:	8d 76 00             	lea    0x0(%esi),%esi
 805ddb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ddbc:	89 3c 24             	mov    %edi,(%esp)
 805ddbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ddc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ddc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ddcb:	b9 32 1b 00 00       	mov    $0x1b32,%ecx
 805ddd0:	e8 03 0c 00 00       	call   805e9d8 <__afl_maybe_log>
 805ddd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ddd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dddd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dde1:	8b 3c 24             	mov    (%esp),%edi
 805dde4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dde8:	83 ff 05             	cmp    $0x5,%edi
 805ddeb:	0f 84 c1 00 00 00    	je     805deb2 <quotearg_free+0x2c2>
 805ddf1:	8d 76 00             	lea    0x0(%esi),%esi
 805ddf4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ddf8:	89 3c 24             	mov    %edi,(%esp)
 805ddfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ddff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805de03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805de07:	b9 05 f4 00 00       	mov    $0xf405,%ecx
 805de0c:	e8 c7 0b 00 00       	call   805e9d8 <__afl_maybe_log>
 805de11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805de15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805de19:	8b 54 24 04          	mov    0x4(%esp),%edx
 805de1d:	8b 3c 24             	mov    (%esp),%edi
 805de20:	8d 64 24 10          	lea    0x10(%esp),%esp
 805de24:	83 ff 06             	cmp    $0x6,%edi
 805de27:	74 47                	je     805de70 <quotearg_free+0x280>
 805de29:	8d 76 00             	lea    0x0(%esi),%esi
 805de2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805de30:	89 3c 24             	mov    %edi,(%esp)
 805de33:	89 54 24 04          	mov    %edx,0x4(%esp)
 805de37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805de3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805de3f:	b9 ac 39 00 00       	mov    $0x39ac,%ecx
 805de44:	e8 8f 0b 00 00       	call   805e9d8 <__afl_maybe_log>
 805de49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805de4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805de51:	8b 54 24 04          	mov    0x4(%esp),%edx
 805de55:	8b 3c 24             	mov    (%esp),%edi
 805de58:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
 805de5c:	83 ec 0c             	sub    $0xc,%esp
 805de5f:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805de63:	bb 03 00 00 00       	mov    $0x3,%ebx
    free (sv[i].val);
 805de68:	e8 33 b3 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805de6d:	83 c4 10             	add    $0x10,%esp
    free (sv[i].val);
 805de70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805de74:	89 3c 24             	mov    %edi,(%esp)
 805de77:	89 54 24 04          	mov    %edx,0x4(%esp)
 805de7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805de7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805de83:	b9 97 f7 00 00       	mov    $0xf797,%ecx
 805de88:	e8 4b 0b 00 00       	call   805e9d8 <__afl_maybe_log>
 805de8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805de91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805de95:	8b 54 24 04          	mov    0x4(%esp),%edx
 805de99:	8b 3c 24             	mov    (%esp),%edi
 805de9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dea0:	83 ec 0c             	sub    $0xc,%esp
 805dea3:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805dea7:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805deaa:	e8 f1 b2 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805deaf:	83 c4 10             	add    $0x10,%esp
 805deb2:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 805deb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805deb8:	89 3c 24             	mov    %edi,(%esp)
 805debb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805debf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dec3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dec7:	b9 d1 99 00 00       	mov    $0x99d1,%ecx
 805decc:	e8 07 0b 00 00       	call   805e9d8 <__afl_maybe_log>
 805ded1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ded5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ded9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dedd:	8b 3c 24             	mov    (%esp),%edi
 805dee0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dee4:	83 ec 0c             	sub    $0xc,%esp
 805dee7:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805deeb:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805deee:	e8 ad b2 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805def3:	83 c4 10             	add    $0x10,%esp
 805def6:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 805def8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805defc:	89 3c 24             	mov    %edi,(%esp)
 805deff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805df03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805df07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805df0b:	b9 3e 75 00 00       	mov    $0x753e,%ecx
 805df10:	e8 c3 0a 00 00       	call   805e9d8 <__afl_maybe_log>
 805df15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805df19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805df1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805df21:	8b 3c 24             	mov    (%esp),%edi
 805df24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805df28:	83 ec 0c             	sub    $0xc,%esp
 805df2b:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805df2f:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805df32:	e8 69 b2 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805df37:	83 c4 10             	add    $0x10,%esp
 805df3a:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 805df3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805df40:	89 3c 24             	mov    %edi,(%esp)
 805df43:	89 54 24 04          	mov    %edx,0x4(%esp)
 805df47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805df4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805df4f:	b9 94 0d 00 00       	mov    $0xd94,%ecx
 805df54:	e8 7f 0a 00 00       	call   805e9d8 <__afl_maybe_log>
 805df59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805df5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805df61:	8b 54 24 04          	mov    0x4(%esp),%edx
 805df65:	8b 3c 24             	mov    (%esp),%edi
 805df68:	8d 64 24 10          	lea    0x10(%esp),%esp
 805df6c:	83 ec 0c             	sub    $0xc,%esp
 805df6f:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805df73:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805df76:	e8 25 b2 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805df7b:	83 c4 10             	add    $0x10,%esp
 805df7e:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 805df80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805df84:	89 3c 24             	mov    %edi,(%esp)
 805df87:	89 54 24 04          	mov    %edx,0x4(%esp)
 805df8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805df8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805df93:	b9 5f 4b 00 00       	mov    $0x4b5f,%ecx
 805df98:	e8 3b 0a 00 00       	call   805e9d8 <__afl_maybe_log>
 805df9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dfa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dfa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dfa9:	8b 3c 24             	mov    (%esp),%edi
 805dfac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dfb0:	83 ec 0c             	sub    $0xc,%esp
 805dfb3:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805dfb7:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805dfba:	e8 e1 b1 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805dfbf:	83 c4 10             	add    $0x10,%esp
 805dfc2:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 805dfc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dfc8:	89 3c 24             	mov    %edi,(%esp)
 805dfcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dfcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dfd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dfd7:	b9 b7 89 00 00       	mov    $0x89b7,%ecx
 805dfdc:	e8 f7 09 00 00       	call   805e9d8 <__afl_maybe_log>
 805dfe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dfe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dfe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dfed:	8b 3c 24             	mov    (%esp),%edi
 805dff0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dff4:	83 ec 0c             	sub    $0xc,%esp
 805dff7:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805dffb:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805dffe:	e8 9d b1 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e003:	83 c4 10             	add    $0x10,%esp
 805e006:	39 eb                	cmp    %ebp,%ebx
 805e008:	0f 84 f2 00 00 00    	je     805e100 <quotearg_free+0x510>
 805e00e:	66 90                	xchg   %ax,%ax
 805e010:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e014:	89 3c 24             	mov    %edi,(%esp)
 805e017:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e01b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e01f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e023:	b9 8d 1c 00 00       	mov    $0x1c8d,%ecx
 805e028:	e8 ab 09 00 00       	call   805e9d8 <__afl_maybe_log>
 805e02d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e031:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e035:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e039:	8b 3c 24             	mov    (%esp),%edi
 805e03c:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
 805e040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e044:	89 3c 24             	mov    %edi,(%esp)
 805e047:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e04b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e04f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e053:	b9 9b 9a 00 00       	mov    $0x9a9b,%ecx
 805e058:	e8 7b 09 00 00       	call   805e9d8 <__afl_maybe_log>
 805e05d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e065:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e069:	8b 3c 24             	mov    (%esp),%edi
 805e06c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e070:	83 ec 0c             	sub    $0xc,%esp
 805e073:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
 805e077:	e8 24 b1 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e07c:	58                   	pop    %eax
    free (sv[i].val);
 805e07d:	ff 74 de 0c          	pushl  0xc(%esi,%ebx,8)
 805e081:	e8 1a b1 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e086:	5a                   	pop    %edx
    free (sv[i].val);
 805e087:	ff 74 de 14          	pushl  0x14(%esi,%ebx,8)
 805e08b:	e8 10 b1 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e090:	59                   	pop    %ecx
    free (sv[i].val);
 805e091:	ff 74 de 1c          	pushl  0x1c(%esi,%ebx,8)
 805e095:	e8 06 b1 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e09a:	5f                   	pop    %edi
    free (sv[i].val);
 805e09b:	ff 74 de 24          	pushl  0x24(%esi,%ebx,8)
 805e09f:	e8 fc b0 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e0a4:	58                   	pop    %eax
    free (sv[i].val);
 805e0a5:	ff 74 de 2c          	pushl  0x2c(%esi,%ebx,8)
 805e0a9:	e8 f2 b0 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e0ae:	58                   	pop    %eax
    free (sv[i].val);
 805e0af:	ff 74 de 34          	pushl  0x34(%esi,%ebx,8)
 805e0b3:	e8 e8 b0 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e0b8:	58                   	pop    %eax
    free (sv[i].val);
 805e0b9:	ff 74 de 3c          	pushl  0x3c(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e0bd:	83 c3 08             	add    $0x8,%ebx
    free (sv[i].val);
 805e0c0:	e8 db b0 fe ff       	call   80491a0 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805e0c5:	83 c4 10             	add    $0x10,%esp
 805e0c8:	39 eb                	cmp    %ebp,%ebx
 805e0ca:	0f 85 70 ff ff ff    	jne    805e040 <quotearg_free+0x450>
 805e0d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e0d4:	89 3c 24             	mov    %edi,(%esp)
 805e0d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e0db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e0df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e0e3:	b9 cc b9 00 00       	mov    $0xb9cc,%ecx
 805e0e8:	e8 eb 08 00 00       	call   805e9d8 <__afl_maybe_log>
 805e0ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e0f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e0f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e0f9:	8b 3c 24             	mov    (%esp),%edi
 805e0fc:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
  if (sv[0].val != slot0)
 805e100:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e104:	89 3c 24             	mov    %edi,(%esp)
 805e107:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e10b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e10f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e113:	b9 d3 1d 00 00       	mov    $0x1dd3,%ecx
 805e118:	e8 bb 08 00 00       	call   805e9d8 <__afl_maybe_log>
 805e11d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e121:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e125:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e129:	8b 3c 24             	mov    (%esp),%edi
 805e12c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e130:	8b 46 04             	mov    0x4(%esi),%eax
 805e133:	3d 80 ac 43 08       	cmp    $0x843ac80,%eax
 805e138:	74 52                	je     805e18c <quotearg_free+0x59c>
 805e13a:	66 90                	xchg   %ax,%ax
 805e13c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e140:	89 3c 24             	mov    %edi,(%esp)
 805e143:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e147:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e14b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e14f:	b9 87 bc 00 00       	mov    $0xbc87,%ecx
 805e154:	e8 7f 08 00 00       	call   805e9d8 <__afl_maybe_log>
 805e159:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e15d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e161:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e165:	8b 3c 24             	mov    (%esp),%edi
 805e168:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      free (sv[0].val);
 805e16c:	83 ec 0c             	sub    $0xc,%esp
 805e16f:	50                   	push   %eax
 805e170:	e8 2b b0 fe ff       	call   80491a0 <free@plt>
      slotvec0.size = sizeof slot0;
 805e175:	c7 05 94 a2 06 08 00 	movl   $0x100,0x806a294
 805e17c:	01 00 00 
      slotvec0.val = slot0;
 805e17f:	c7 05 98 a2 06 08 80 	movl   $0x843ac80,0x806a298
 805e186:	ac 43 08 
 805e189:	83 c4 10             	add    $0x10,%esp
    }
  if (sv != &slotvec0)
 805e18c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e190:	89 3c 24             	mov    %edi,(%esp)
 805e193:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e197:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e19b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e19f:	b9 18 b5 00 00       	mov    $0xb518,%ecx
 805e1a4:	e8 2f 08 00 00       	call   805e9d8 <__afl_maybe_log>
 805e1a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e1ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e1b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e1b5:	8b 3c 24             	mov    (%esp),%edi
 805e1b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e1bc:	81 fe 94 a2 06 08    	cmp    $0x806a294,%esi
 805e1c2:	74 46                	je     805e20a <quotearg_free+0x61a>
 805e1c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e1c8:	89 3c 24             	mov    %edi,(%esp)
 805e1cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e1cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e1d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e1d7:	b9 ec da 00 00       	mov    $0xdaec,%ecx
 805e1dc:	e8 f7 07 00 00       	call   805e9d8 <__afl_maybe_log>
 805e1e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e1e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e1e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e1ed:	8b 3c 24             	mov    (%esp),%edi
 805e1f0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      free (sv);
 805e1f4:	83 ec 0c             	sub    $0xc,%esp
 805e1f7:	56                   	push   %esi
 805e1f8:	e8 a3 af fe ff       	call   80491a0 <free@plt>
      slotvec = &slotvec0;
 805e1fd:	c7 05 90 a2 06 08 94 	movl   $0x806a294,0x806a290
 805e204:	a2 06 08 
 805e207:	83 c4 10             	add    $0x10,%esp
 805e20a:	66 90                	xchg   %ax,%ax
    }
  nslots = 1;
 805e20c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e210:	89 3c 24             	mov    %edi,(%esp)
 805e213:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e217:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e21b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e21f:	b9 b4 f9 00 00       	mov    $0xf9b4,%ecx
 805e224:	e8 af 07 00 00       	call   805e9d8 <__afl_maybe_log>
 805e229:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e22d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e231:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e235:	8b 3c 24             	mov    (%esp),%edi
 805e238:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e23c:	c7 05 9c a2 06 08 01 	movl   $0x1,0x806a29c
 805e243:	00 00 00 
}
 805e246:	83 c4 0c             	add    $0xc,%esp
 805e249:	5b                   	pop    %ebx
 805e24a:	5e                   	pop    %esi
 805e24b:	5f                   	pop    %edi
 805e24c:	5d                   	pop    %ebp
 805e24d:	c3                   	ret    
 805e24e:	66 90                	xchg   %ax,%ax

0805e250 <quotearg_n>:
  }
}

char *
quotearg_n (int n, char const *arg)
{
 805e250:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e254:	89 3c 24             	mov    %edi,(%esp)
 805e257:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e25b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e25f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e263:	b9 f1 ce 00 00       	mov    $0xcef1,%ecx
 805e268:	e8 6b 07 00 00       	call   805e9d8 <__afl_maybe_log>
 805e26d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e271:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e275:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e279:	8b 3c 24             	mov    (%esp),%edi
 805e27c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e280:	8b 44 24 04          	mov    0x4(%esp),%eax
  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);
 805e284:	8b 54 24 08          	mov    0x8(%esp),%edx
 805e288:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 805e28d:	c7 44 24 04 80 ad 43 	movl   $0x843ad80,0x4(%esp)
 805e294:	08 
 805e295:	e9 86 f0 ff ff       	jmp    805d320 <quotearg_n_options>
 805e29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805e2a0 <quotearg_n_mem>:
}

char *
quotearg_n_mem (int n, char const *arg, size_t argsize)
{
 805e2a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e2a4:	89 3c 24             	mov    %edi,(%esp)
 805e2a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e2ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e2af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e2b3:	b9 50 52 00 00       	mov    $0x5250,%ecx
 805e2b8:	e8 1b 07 00 00       	call   805e9d8 <__afl_maybe_log>
 805e2bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e2c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e2c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e2c9:	8b 3c 24             	mov    (%esp),%edi
 805e2cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e2d0:	8b 44 24 04          	mov    0x4(%esp),%eax
  return quotearg_n_options (n, arg, argsize, &default_quoting_options);
 805e2d4:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 805e2d8:	8b 54 24 08          	mov    0x8(%esp),%edx
 805e2dc:	c7 44 24 04 80 ad 43 	movl   $0x843ad80,0x4(%esp)
 805e2e3:	08 
 805e2e4:	e9 37 f0 ff ff       	jmp    805d320 <quotearg_n_options>
 805e2e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805e2f0 <quotearg>:
}

char *
quotearg (char const *arg)
{
 805e2f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e2f4:	89 3c 24             	mov    %edi,(%esp)
 805e2f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e2fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e2ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e303:	b9 60 33 00 00       	mov    $0x3360,%ecx
 805e308:	e8 cb 06 00 00       	call   805e9d8 <__afl_maybe_log>
 805e30d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e311:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e315:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e319:	8b 3c 24             	mov    (%esp),%edi
 805e31c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e320:	8b 54 24 04          	mov    0x4(%esp),%edx
}

char *
quotearg_n (int n, char const *arg)
{
  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);
 805e324:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 805e329:	31 c0                	xor    %eax,%eax
 805e32b:	c7 44 24 04 80 ad 43 	movl   $0x843ad80,0x4(%esp)
 805e332:	08 
 805e333:	e9 e8 ef ff ff       	jmp    805d320 <quotearg_n_options>
 805e338:	90                   	nop
 805e339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805e340 <quotearg_mem>:
  return quotearg_n (0, arg);
}

char *
quotearg_mem (char const *arg, size_t argsize)
{
 805e340:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e344:	89 3c 24             	mov    %edi,(%esp)
 805e347:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e34b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e34f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e353:	b9 62 d2 00 00       	mov    $0xd262,%ecx
 805e358:	e8 7b 06 00 00       	call   805e9d8 <__afl_maybe_log>
 805e35d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e361:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e365:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e369:	8b 3c 24             	mov    (%esp),%edi
 805e36c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e370:	8b 54 24 04          	mov    0x4(%esp),%edx
}

char *
quotearg_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &default_quoting_options);
 805e374:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e378:	31 c0                	xor    %eax,%eax
 805e37a:	c7 44 24 04 80 ad 43 	movl   $0x843ad80,0x4(%esp)
 805e381:	08 
 805e382:	e9 99 ef ff ff       	jmp    805d320 <quotearg_n_options>
 805e387:	89 f6                	mov    %esi,%esi
 805e389:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805e390 <quotearg_n_style>:
  return quotearg_n_mem (0, arg, argsize);
}

char *
quotearg_n_style (int n, enum quoting_style s, char const *arg)
{
 805e390:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e394:	89 3c 24             	mov    %edi,(%esp)
 805e397:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e39b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e39f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e3a3:	b9 e7 49 00 00       	mov    $0x49e7,%ecx
 805e3a8:	e8 2b 06 00 00       	call   805e9d8 <__afl_maybe_log>
 805e3ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e3b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e3b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e3b9:	8b 3c 24             	mov    (%esp),%edi
 805e3bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e3c0:	53                   	push   %ebx
 805e3c1:	83 ec 38             	sub    $0x38,%esp
  struct quoting_options const o = quoting_options_from_style (s);
 805e3c4:	8b 54 24 44          	mov    0x44(%esp),%edx
 805e3c8:	89 e0                	mov    %esp,%eax
 805e3ca:	89 e3                	mov    %esp,%ebx
 805e3cc:	e8 af a0 ff ff       	call   8058480 <quoting_options_from_style>
  return quotearg_n_options (n, arg, SIZE_MAX, &o);
 805e3d1:	83 ec 0c             	sub    $0xc,%esp
 805e3d4:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 805e3d9:	53                   	push   %ebx
 805e3da:	8b 54 24 58          	mov    0x58(%esp),%edx
 805e3de:	8b 44 24 50          	mov    0x50(%esp),%eax
 805e3e2:	e8 39 ef ff ff       	call   805d320 <quotearg_n_options>
}
 805e3e7:	83 c4 48             	add    $0x48,%esp
 805e3ea:	5b                   	pop    %ebx
 805e3eb:	c3                   	ret    
 805e3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0805e3f0 <quotearg_n_style_mem>:

char *
quotearg_n_style_mem (int n, enum quoting_style s,
                      char const *arg, size_t argsize)
{
 805e3f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e3f4:	89 3c 24             	mov    %edi,(%esp)
 805e3f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e3fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e3ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e403:	b9 ca 8d 00 00       	mov    $0x8dca,%ecx
 805e408:	e8 cb 05 00 00       	call   805e9d8 <__afl_maybe_log>
 805e40d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e411:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e415:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e419:	8b 3c 24             	mov    (%esp),%edi
 805e41c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e420:	53                   	push   %ebx
 805e421:	83 ec 38             	sub    $0x38,%esp
  struct quoting_options const o = quoting_options_from_style (s);
 805e424:	8b 54 24 44          	mov    0x44(%esp),%edx
 805e428:	89 e0                	mov    %esp,%eax
 805e42a:	89 e3                	mov    %esp,%ebx
 805e42c:	e8 4f a0 ff ff       	call   8058480 <quoting_options_from_style>
  return quotearg_n_options (n, arg, argsize, &o);
 805e431:	83 ec 0c             	sub    $0xc,%esp
 805e434:	53                   	push   %ebx
 805e435:	8b 4c 24 5c          	mov    0x5c(%esp),%ecx
 805e439:	8b 54 24 58          	mov    0x58(%esp),%edx
 805e43d:	8b 44 24 50          	mov    0x50(%esp),%eax
 805e441:	e8 da ee ff ff       	call   805d320 <quotearg_n_options>
}
 805e446:	83 c4 48             	add    $0x48,%esp
 805e449:	5b                   	pop    %ebx
 805e44a:	c3                   	ret    
 805e44b:	90                   	nop
 805e44c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0805e450 <quotearg_style>:

char *
quotearg_style (enum quoting_style s, char const *arg)
{
 805e450:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e454:	89 3c 24             	mov    %edi,(%esp)
 805e457:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e45b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e45f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e463:	b9 33 6c 00 00       	mov    $0x6c33,%ecx
 805e468:	e8 6b 05 00 00       	call   805e9d8 <__afl_maybe_log>
 805e46d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e471:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e475:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e479:	8b 3c 24             	mov    (%esp),%edi
 805e47c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e480:	83 ec 10             	sub    $0x10,%esp
  return quotearg_n_style (0, s, arg);
 805e483:	ff 74 24 18          	pushl  0x18(%esp)
 805e487:	ff 74 24 18          	pushl  0x18(%esp)
 805e48b:	6a 00                	push   $0x0
 805e48d:	e8 fe fe ff ff       	call   805e390 <quotearg_n_style>
}
 805e492:	83 c4 1c             	add    $0x1c,%esp
 805e495:	c3                   	ret    
 805e496:	8d 76 00             	lea    0x0(%esi),%esi
 805e499:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805e4a0 <quotearg_style_mem>:

char *
quotearg_style_mem (enum quoting_style s, char const *arg, size_t argsize)
{
 805e4a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e4a4:	89 3c 24             	mov    %edi,(%esp)
 805e4a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e4ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e4af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e4b3:	b9 cd 24 00 00       	mov    $0x24cd,%ecx
 805e4b8:	e8 1b 05 00 00       	call   805e9d8 <__afl_maybe_log>
 805e4bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e4c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e4c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e4c9:	8b 3c 24             	mov    (%esp),%edi
 805e4cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e4d0:	83 ec 0c             	sub    $0xc,%esp
  return quotearg_n_style_mem (0, s, arg, argsize);
 805e4d3:	ff 74 24 18          	pushl  0x18(%esp)
 805e4d7:	ff 74 24 18          	pushl  0x18(%esp)
 805e4db:	ff 74 24 18          	pushl  0x18(%esp)
 805e4df:	6a 00                	push   $0x0
 805e4e1:	e8 0a ff ff ff       	call   805e3f0 <quotearg_n_style_mem>
}
 805e4e6:	83 c4 1c             	add    $0x1c,%esp
 805e4e9:	c3                   	ret    
 805e4ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805e4f0 <quotearg_char_mem>:

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
 805e4f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e4f4:	89 3c 24             	mov    %edi,(%esp)
 805e4f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e4fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e4ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e503:	b9 08 03 00 00       	mov    $0x308,%ecx
 805e508:	e8 cb 04 00 00       	call   805e9d8 <__afl_maybe_log>
 805e50d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e511:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e515:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e519:	8b 3c 24             	mov    (%esp),%edi
 805e51c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e520:	53                   	push   %ebx
 805e521:	83 ec 38             	sub    $0x38,%esp
  struct quoting_options options;
  options = default_quoting_options;
 805e524:	a1 80 ad 43 08       	mov    0x843ad80,%eax
 805e529:	8b 15 84 ad 43 08    	mov    0x843ad84,%edx
 805e52f:	8b 1d 88 ad 43 08    	mov    0x843ad88,%ebx
  return quotearg_n_style_mem (0, s, arg, argsize);
}

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
 805e535:	8b 4c 24 48          	mov    0x48(%esp),%ecx
  struct quoting_options options;
  options = default_quoting_options;
 805e539:	89 04 24             	mov    %eax,(%esp)
 805e53c:	a1 8c ad 43 08       	mov    0x843ad8c,%eax
 805e541:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e545:	8b 15 90 ad 43 08    	mov    0x843ad90,%edx
 805e54b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 805e54f:	8b 1d 94 ad 43 08    	mov    0x843ad94,%ebx
 805e555:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e559:	a1 98 ad 43 08       	mov    0x843ad98,%eax
 805e55e:	89 54 24 10          	mov    %edx,0x10(%esp)
 805e562:	8b 15 9c ad 43 08    	mov    0x843ad9c,%edx
 805e568:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 805e56c:	8b 1d a0 ad 43 08    	mov    0x843ada0,%ebx
 805e572:	89 44 24 18          	mov    %eax,0x18(%esp)
 805e576:	a1 a4 ad 43 08       	mov    0x843ada4,%eax
 805e57b:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 805e57f:	8b 15 a8 ad 43 08    	mov    0x843ada8,%edx
 805e585:	89 5c 24 20          	mov    %ebx,0x20(%esp)
 805e589:	8b 1d ac ad 43 08    	mov    0x843adac,%ebx
 805e58f:	89 44 24 24          	mov    %eax,0x24(%esp)
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 805e593:	89 c8                	mov    %ecx,%eax
  int shift = uc % INT_BITS;
 805e595:	83 e1 1f             	and    $0x1f,%ecx
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 805e598:	c0 e8 05             	shr    $0x5,%al

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  struct quoting_options options;
  options = default_quoting_options;
 805e59b:	89 54 24 28          	mov    %edx,0x28(%esp)
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 805e59f:	0f b6 d0             	movzbl %al,%edx

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  struct quoting_options options;
  options = default_quoting_options;
 805e5a2:	89 5c 24 2c          	mov    %ebx,0x2c(%esp)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  int shift = uc % INT_BITS;
  int r = (*p >> shift) & 1;
 805e5a6:	8b 5c 94 08          	mov    0x8(%esp,%edx,4),%ebx
 805e5aa:	89 d8                	mov    %ebx,%eax
 805e5ac:	d3 e8                	shr    %cl,%eax
  *p ^= ((i & 1) ^ r) << shift;
 805e5ae:	83 f0 01             	xor    $0x1,%eax
 805e5b1:	83 e0 01             	and    $0x1,%eax
 805e5b4:	d3 e0                	shl    %cl,%eax
 805e5b6:	31 d8                	xor    %ebx,%eax
 805e5b8:	89 44 94 08          	mov    %eax,0x8(%esp,%edx,4)
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  struct quoting_options options;
  options = default_quoting_options;
  set_char_quoting (&options, ch, 1);
  return quotearg_n_options (0, arg, argsize, &options);
 805e5bc:	83 ec 0c             	sub    $0xc,%esp
 805e5bf:	31 c0                	xor    %eax,%eax
 805e5c1:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
 805e5c5:	51                   	push   %ecx
 805e5c6:	8b 4c 24 54          	mov    0x54(%esp),%ecx
 805e5ca:	8b 54 24 50          	mov    0x50(%esp),%edx
 805e5ce:	e8 4d ed ff ff       	call   805d320 <quotearg_n_options>
}
 805e5d3:	83 c4 48             	add    $0x48,%esp
 805e5d6:	5b                   	pop    %ebx
 805e5d7:	c3                   	ret    
 805e5d8:	90                   	nop
 805e5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805e5e0 <quotearg_char>:

char *
quotearg_char (char const *arg, char ch)
{
 805e5e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e5e4:	89 3c 24             	mov    %edi,(%esp)
 805e5e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e5eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e5ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e5f3:	b9 7c 36 00 00       	mov    $0x367c,%ecx
 805e5f8:	e8 db 03 00 00       	call   805e9d8 <__afl_maybe_log>
 805e5fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e601:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e605:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e609:	8b 3c 24             	mov    (%esp),%edi
 805e60c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e610:	83 ec 10             	sub    $0x10,%esp
  return quotearg_char_mem (arg, SIZE_MAX, ch);
 805e613:	0f be 44 24 18       	movsbl 0x18(%esp),%eax
 805e618:	50                   	push   %eax
 805e619:	6a ff                	push   $0xffffffff
 805e61b:	ff 74 24 1c          	pushl  0x1c(%esp)
 805e61f:	e8 cc fe ff ff       	call   805e4f0 <quotearg_char_mem>
}
 805e624:	83 c4 1c             	add    $0x1c,%esp
 805e627:	c3                   	ret    
 805e628:	90                   	nop
 805e629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805e630 <quotearg_colon>:

char *
quotearg_colon (char const *arg)
{
 805e630:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e634:	89 3c 24             	mov    %edi,(%esp)
 805e637:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e63b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e63f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e643:	b9 61 32 00 00       	mov    $0x3261,%ecx
 805e648:	e8 8b 03 00 00       	call   805e9d8 <__afl_maybe_log>
 805e64d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e651:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e655:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e659:	8b 3c 24             	mov    (%esp),%edi
 805e65c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e660:	83 ec 10             	sub    $0x10,%esp
}

char *
quotearg_char (char const *arg, char ch)
{
  return quotearg_char_mem (arg, SIZE_MAX, ch);
 805e663:	6a 3a                	push   $0x3a
 805e665:	6a ff                	push   $0xffffffff
 805e667:	ff 74 24 1c          	pushl  0x1c(%esp)
 805e66b:	e8 80 fe ff ff       	call   805e4f0 <quotearg_char_mem>

char *
quotearg_colon (char const *arg)
{
  return quotearg_char (arg, ':');
}
 805e670:	83 c4 1c             	add    $0x1c,%esp
 805e673:	c3                   	ret    
 805e674:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805e67a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0805e680 <quotearg_colon_mem>:

char *
quotearg_colon_mem (char const *arg, size_t argsize)
{
 805e680:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e684:	89 3c 24             	mov    %edi,(%esp)
 805e687:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e68b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e68f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e693:	b9 90 b9 00 00       	mov    $0xb990,%ecx
 805e698:	e8 3b 03 00 00       	call   805e9d8 <__afl_maybe_log>
 805e69d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e6a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e6a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e6a9:	8b 3c 24             	mov    (%esp),%edi
 805e6ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e6b0:	83 ec 10             	sub    $0x10,%esp
  return quotearg_char_mem (arg, argsize, ':');
 805e6b3:	6a 3a                	push   $0x3a
 805e6b5:	ff 74 24 1c          	pushl  0x1c(%esp)
 805e6b9:	ff 74 24 1c          	pushl  0x1c(%esp)
 805e6bd:	e8 2e fe ff ff       	call   805e4f0 <quotearg_char_mem>
}
 805e6c2:	83 c4 1c             	add    $0x1c,%esp
 805e6c5:	c3                   	ret    
 805e6c6:	8d 76 00             	lea    0x0(%esi),%esi
 805e6c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805e6d0 <quotearg_n_custom_mem>:

char *
quotearg_n_custom_mem (int n, char const *left_quote,
                       char const *right_quote,
                       char const *arg, size_t argsize)
{
 805e6d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e6d4:	89 3c 24             	mov    %edi,(%esp)
 805e6d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e6db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e6df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e6e3:	b9 db 81 00 00       	mov    $0x81db,%ecx
 805e6e8:	e8 eb 02 00 00       	call   805e9d8 <__afl_maybe_log>
 805e6ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e6f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e6f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e6f9:	8b 3c 24             	mov    (%esp),%edi
 805e6fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e700:	53                   	push   %ebx
 805e701:	83 ec 3c             	sub    $0x3c,%esp
  struct quoting_options o = default_quoting_options;
 805e704:	a1 80 ad 43 08       	mov    0x843ad80,%eax
 805e709:	8b 15 84 ad 43 08    	mov    0x843ad84,%edx
 805e70f:	8b 0d 88 ad 43 08    	mov    0x843ad88,%ecx
 805e715:	8b 1d 8c ad 43 08    	mov    0x843ad8c,%ebx
 805e71b:	89 44 24 04          	mov    %eax,0x4(%esp)
 805e71f:	89 54 24 08          	mov    %edx,0x8(%esp)
 805e723:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 805e727:	89 5c 24 10          	mov    %ebx,0x10(%esp)
 805e72b:	a1 90 ad 43 08       	mov    0x843ad90,%eax
 805e730:	8b 15 94 ad 43 08    	mov    0x843ad94,%edx
 805e736:	8b 0d 98 ad 43 08    	mov    0x843ad98,%ecx
 805e73c:	8b 1d 9c ad 43 08    	mov    0x843ad9c,%ebx
 805e742:	89 44 24 14          	mov    %eax,0x14(%esp)
 805e746:	89 54 24 18          	mov    %edx,0x18(%esp)
 805e74a:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 805e74e:	89 5c 24 20          	mov    %ebx,0x20(%esp)
 805e752:	a1 a0 ad 43 08       	mov    0x843ada0,%eax
 805e757:	8b 15 a4 ad 43 08    	mov    0x843ada4,%edx
 805e75d:	8b 0d a8 ad 43 08    	mov    0x843ada8,%ecx
 805e763:	8b 1d ac ad 43 08    	mov    0x843adac,%ebx
 805e769:	89 44 24 24          	mov    %eax,0x24(%esp)
 805e76d:	89 54 24 28          	mov    %edx,0x28(%esp)
 805e771:	89 4c 24 2c          	mov    %ecx,0x2c(%esp)
 805e775:	89 5c 24 30          	mov    %ebx,0x30(%esp)
  set_custom_quoting (&o, left_quote, right_quote);
 805e779:	ff 74 24 4c          	pushl  0x4c(%esp)
 805e77d:	ff 74 24 4c          	pushl  0x4c(%esp)
 805e781:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
 805e785:	53                   	push   %ebx
 805e786:	e8 55 f1 ff ff       	call   805d8e0 <set_custom_quoting>
  return quotearg_n_options (n, arg, argsize, &o);
 805e78b:	8b 4c 24 60          	mov    0x60(%esp),%ecx
 805e78f:	8b 54 24 5c          	mov    0x5c(%esp),%edx
 805e793:	8b 44 24 50          	mov    0x50(%esp),%eax
 805e797:	89 1c 24             	mov    %ebx,(%esp)
 805e79a:	e8 81 eb ff ff       	call   805d320 <quotearg_n_options>
}
 805e79f:	83 c4 48             	add    $0x48,%esp
 805e7a2:	5b                   	pop    %ebx
 805e7a3:	c3                   	ret    
 805e7a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805e7aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0805e7b0 <quotearg_n_custom>:
}

char *
quotearg_n_custom (int n, char const *left_quote,
                   char const *right_quote, char const *arg)
{
 805e7b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e7b4:	89 3c 24             	mov    %edi,(%esp)
 805e7b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e7bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e7bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e7c3:	b9 2f 93 00 00       	mov    $0x932f,%ecx
 805e7c8:	e8 0b 02 00 00       	call   805e9d8 <__afl_maybe_log>
 805e7cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e7d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e7d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e7d9:	8b 3c 24             	mov    (%esp),%edi
 805e7dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e7e0:	83 ec 18             	sub    $0x18,%esp
  return quotearg_n_custom_mem (n, left_quote, right_quote, arg,
 805e7e3:	6a ff                	push   $0xffffffff
 805e7e5:	ff 74 24 2c          	pushl  0x2c(%esp)
 805e7e9:	ff 74 24 2c          	pushl  0x2c(%esp)
 805e7ed:	ff 74 24 2c          	pushl  0x2c(%esp)
 805e7f1:	ff 74 24 2c          	pushl  0x2c(%esp)
 805e7f5:	e8 d6 fe ff ff       	call   805e6d0 <quotearg_n_custom_mem>
                                SIZE_MAX);
}
 805e7fa:	83 c4 2c             	add    $0x2c,%esp
 805e7fd:	c3                   	ret    
 805e7fe:	66 90                	xchg   %ax,%ax

0805e800 <quotearg_custom>:
}

char *
quotearg_custom (char const *left_quote, char const *right_quote,
                 char const *arg)
{
 805e800:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e804:	89 3c 24             	mov    %edi,(%esp)
 805e807:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e80b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e80f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e813:	b9 47 43 00 00       	mov    $0x4347,%ecx
 805e818:	e8 bb 01 00 00       	call   805e9d8 <__afl_maybe_log>
 805e81d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e821:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e825:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e829:	8b 3c 24             	mov    (%esp),%edi
 805e82c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e830:	83 ec 18             	sub    $0x18,%esp

char *
quotearg_n_custom (int n, char const *left_quote,
                   char const *right_quote, char const *arg)
{
  return quotearg_n_custom_mem (n, left_quote, right_quote, arg,
 805e833:	6a ff                	push   $0xffffffff
 805e835:	ff 74 24 28          	pushl  0x28(%esp)
 805e839:	ff 74 24 28          	pushl  0x28(%esp)
 805e83d:	ff 74 24 28          	pushl  0x28(%esp)
 805e841:	6a 00                	push   $0x0
 805e843:	e8 88 fe ff ff       	call   805e6d0 <quotearg_n_custom_mem>
char *
quotearg_custom (char const *left_quote, char const *right_quote,
                 char const *arg)
{
  return quotearg_n_custom (0, left_quote, right_quote, arg);
}
 805e848:	83 c4 2c             	add    $0x2c,%esp
 805e84b:	c3                   	ret    
 805e84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0805e850 <quotearg_custom_mem>:

char *
quotearg_custom_mem (char const *left_quote, char const *right_quote,
                     char const *arg, size_t argsize)
{
 805e850:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e854:	89 3c 24             	mov    %edi,(%esp)
 805e857:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e85b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e85f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e863:	b9 03 e8 00 00       	mov    $0xe803,%ecx
 805e868:	e8 6b 01 00 00       	call   805e9d8 <__afl_maybe_log>
 805e86d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e871:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e875:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e879:	8b 3c 24             	mov    (%esp),%edi
 805e87c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e880:	83 ec 18             	sub    $0x18,%esp
  return quotearg_n_custom_mem (0, left_quote, right_quote, arg,
 805e883:	ff 74 24 28          	pushl  0x28(%esp)
 805e887:	ff 74 24 28          	pushl  0x28(%esp)
 805e88b:	ff 74 24 28          	pushl  0x28(%esp)
 805e88f:	ff 74 24 28          	pushl  0x28(%esp)
 805e893:	6a 00                	push   $0x0
 805e895:	e8 36 fe ff ff       	call   805e6d0 <quotearg_n_custom_mem>
                                argsize);
}
 805e89a:	83 c4 2c             	add    $0x2c,%esp
 805e89d:	c3                   	ret    
 805e89e:	66 90                	xchg   %ax,%ax

0805e8a0 <quote_n_mem>:
    NULL, NULL
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
 805e8a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e8a4:	89 3c 24             	mov    %edi,(%esp)
 805e8a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e8ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e8af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e8b3:	b9 bc af 00 00       	mov    $0xafbc,%ecx
 805e8b8:	e8 1b 01 00 00       	call   805e9d8 <__afl_maybe_log>
 805e8bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e8c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e8c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e8c9:	8b 3c 24             	mov    (%esp),%edi
 805e8cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e8d0:	8b 44 24 04          	mov    0x4(%esp),%eax
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 805e8d4:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 805e8d8:	8b 54 24 08          	mov    0x8(%esp),%edx
 805e8dc:	c7 44 24 04 60 a2 06 	movl   $0x806a260,0x4(%esp)
 805e8e3:	08 
 805e8e4:	e9 37 ea ff ff       	jmp    805d320 <quotearg_n_options>
 805e8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805e8f0 <quote_mem>:
}

char const *
quote_mem (char const *arg, size_t argsize)
{
 805e8f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e8f4:	89 3c 24             	mov    %edi,(%esp)
 805e8f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e8fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e8ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e903:	b9 6f 9e 00 00       	mov    $0x9e6f,%ecx
 805e908:	e8 cb 00 00 00       	call   805e9d8 <__afl_maybe_log>
 805e90d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e911:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e915:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e919:	8b 3c 24             	mov    (%esp),%edi
 805e91c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e920:	8b 54 24 04          	mov    0x4(%esp),%edx
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 805e924:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e928:	31 c0                	xor    %eax,%eax
 805e92a:	c7 44 24 04 60 a2 06 	movl   $0x806a260,0x4(%esp)
 805e931:	08 
 805e932:	e9 e9 e9 ff ff       	jmp    805d320 <quotearg_n_options>
 805e937:	89 f6                	mov    %esi,%esi
 805e939:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805e940 <quote_n>:
  return quote_n_mem (0, arg, argsize);
}

char const *
quote_n (int n, char const *arg)
{
 805e940:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e944:	89 3c 24             	mov    %edi,(%esp)
 805e947:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e94b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e94f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e953:	b9 9e 82 00 00       	mov    $0x829e,%ecx
 805e958:	e8 7b 00 00 00       	call   805e9d8 <__afl_maybe_log>
 805e95d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e961:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e965:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e969:	8b 3c 24             	mov    (%esp),%edi
 805e96c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e970:	8b 44 24 04          	mov    0x4(%esp),%eax
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 805e974:	8b 54 24 08          	mov    0x8(%esp),%edx
 805e978:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 805e97d:	c7 44 24 04 60 a2 06 	movl   $0x806a260,0x4(%esp)
 805e984:	08 
 805e985:	e9 96 e9 ff ff       	jmp    805d320 <quotearg_n_options>
 805e98a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805e990 <quote>:
  return quote_n_mem (n, arg, SIZE_MAX);
}

char const *
quote (char const *arg)
{
 805e990:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e994:	89 3c 24             	mov    %edi,(%esp)
 805e997:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e99b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e99f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e9a3:	b9 0c ea 00 00       	mov    $0xea0c,%ecx
 805e9a8:	e8 2b 00 00 00       	call   805e9d8 <__afl_maybe_log>
 805e9ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e9b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e9b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e9b9:	8b 3c 24             	mov    (%esp),%edi
 805e9bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e9c0:	8b 54 24 04          	mov    0x4(%esp),%edx
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 805e9c4:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 805e9c9:	31 c0                	xor    %eax,%eax
 805e9cb:	c7 44 24 04 60 a2 06 	movl   $0x806a260,0x4(%esp)
 805e9d2:	08 
 805e9d3:	e9 48 e9 ff ff       	jmp    805d320 <quotearg_n_options>

0805e9d8 <__afl_maybe_log>:
 805e9d8:	9f                   	lahf   
 805e9d9:	0f 90 c0             	seto   %al
 805e9dc:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 805e9e2:	85 d2                	test   %edx,%edx
 805e9e4:	74 22                	je     805ea08 <__afl_setup>

0805e9e6 <__afl_store>:
 805e9e6:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 805e9ec:	31 cf                	xor    %ecx,%edi
 805e9ee:	d1 e9                	shr    %ecx
 805e9f0:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 805e9f6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805e9fa:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805e9fe <__afl_return>:
 805e9fe:	04 7f                	add    $0x7f,%al
 805ea00:	9e                   	sahf   
 805ea01:	c3                   	ret    
 805ea02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805ea08 <__afl_setup>:
 805ea08:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 805ea0f:	75 ed                	jne    805e9fe <__afl_return>
 805ea11:	50                   	push   %eax
 805ea12:	51                   	push   %ecx
 805ea13:	68 10 eb 05 08       	push   $0x805eb10
 805ea18:	e8 c3 a8 fe ff       	call   80492e0 <getenv@plt>
 805ea1d:	83 c4 04             	add    $0x4,%esp
 805ea20:	85 c0                	test   %eax,%eax
 805ea22:	0f 84 db 00 00 00    	je     805eb03 <__afl_setup_abort>
 805ea28:	50                   	push   %eax
 805ea29:	e8 72 aa fe ff       	call   80494a0 <atoi@plt>
 805ea2e:	83 c4 04             	add    $0x4,%esp
 805ea31:	6a 00                	push   $0x0
 805ea33:	6a 00                	push   $0x0
 805ea35:	50                   	push   %eax
 805ea36:	e8 e5 a7 fe ff       	call   8049220 <shmat@plt>
 805ea3b:	83 c4 0c             	add    $0xc,%esp
 805ea3e:	83 f8 ff             	cmp    $0xffffffff,%eax
 805ea41:	0f 84 bc 00 00 00    	je     805eb03 <__afl_setup_abort>
 805ea47:	c6 00 01             	movb   $0x1,(%eax)
 805ea4a:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 805ea4f:	89 c2                	mov    %eax,%edx
 805ea51:	59                   	pop    %ecx
 805ea52:	58                   	pop    %eax

0805ea53 <__afl_forkserver>:
 805ea53:	50                   	push   %eax
 805ea54:	51                   	push   %ecx
 805ea55:	52                   	push   %edx
 805ea56:	6a 04                	push   $0x4
 805ea58:	68 e0 ad 43 08       	push   $0x843ade0
 805ea5d:	68 c7 00 00 00       	push   $0xc7
 805ea62:	e8 69 a9 fe ff       	call   80493d0 <write@plt>
 805ea67:	83 c4 0c             	add    $0xc,%esp
 805ea6a:	83 f8 04             	cmp    $0x4,%eax
 805ea6d:	75 6e                	jne    805eadd <__afl_fork_resume>

0805ea6f <__afl_fork_wait_loop>:
 805ea6f:	6a 04                	push   $0x4
 805ea71:	68 e0 ad 43 08       	push   $0x843ade0
 805ea76:	68 c6 00 00 00       	push   $0xc6
 805ea7b:	e8 e0 a6 fe ff       	call   8049160 <read@plt>
 805ea80:	83 c4 0c             	add    $0xc,%esp
 805ea83:	83 f8 04             	cmp    $0x4,%eax
 805ea86:	75 74                	jne    805eafc <__afl_die>
 805ea88:	e8 b3 a9 fe ff       	call   8049440 <fork@plt>
 805ea8d:	83 f8 00             	cmp    $0x0,%eax
 805ea90:	7c 6a                	jl     805eafc <__afl_die>
 805ea92:	74 49                	je     805eadd <__afl_fork_resume>
 805ea94:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 805ea99:	6a 04                	push   $0x4
 805ea9b:	68 40 ae 43 08       	push   $0x843ae40
 805eaa0:	68 c7 00 00 00       	push   $0xc7
 805eaa5:	e8 26 a9 fe ff       	call   80493d0 <write@plt>
 805eaaa:	83 c4 0c             	add    $0xc,%esp
 805eaad:	6a 00                	push   $0x0
 805eaaf:	68 e0 ad 43 08       	push   $0x843ade0
 805eab4:	ff 35 40 ae 43 08    	pushl  0x843ae40
 805eaba:	e8 b1 a7 fe ff       	call   8049270 <waitpid@plt>
 805eabf:	83 c4 0c             	add    $0xc,%esp
 805eac2:	83 f8 00             	cmp    $0x0,%eax
 805eac5:	7e 35                	jle    805eafc <__afl_die>
 805eac7:	6a 04                	push   $0x4
 805eac9:	68 e0 ad 43 08       	push   $0x843ade0
 805eace:	68 c7 00 00 00       	push   $0xc7
 805ead3:	e8 f8 a8 fe ff       	call   80493d0 <write@plt>
 805ead8:	83 c4 0c             	add    $0xc,%esp
 805eadb:	eb 92                	jmp    805ea6f <__afl_fork_wait_loop>

0805eadd <__afl_fork_resume>:
 805eadd:	68 c6 00 00 00       	push   $0xc6
 805eae2:	e8 39 aa fe ff       	call   8049520 <close@plt>
 805eae7:	68 c7 00 00 00       	push   $0xc7
 805eaec:	e8 2f aa fe ff       	call   8049520 <close@plt>
 805eaf1:	83 c4 08             	add    $0x8,%esp
 805eaf4:	5a                   	pop    %edx
 805eaf5:	59                   	pop    %ecx
 805eaf6:	58                   	pop    %eax
 805eaf7:	e9 ea fe ff ff       	jmp    805e9e6 <__afl_store>

0805eafc <__afl_die>:
 805eafc:	31 c0                	xor    %eax,%eax
 805eafe:	e8 8d a6 fe ff       	call   8049190 <_exit@plt>

0805eb03 <__afl_setup_abort>:
 805eb03:	fe 05 60 ae 43 08    	incb   0x843ae60
 805eb09:	59                   	pop    %ecx
 805eb0a:	58                   	pop    %eax
 805eb0b:	e9 ee fe ff ff       	jmp    805e9fe <__afl_return>

0805eb10 <.AFL_SHM_ENV>:
 805eb10:	5f                   	pop    %edi
 805eb11:	5f                   	pop    %edi
 805eb12:	41                   	inc    %ecx
 805eb13:	46                   	inc    %esi
 805eb14:	4c                   	dec    %esp
 805eb15:	5f                   	pop    %edi
 805eb16:	53                   	push   %ebx
 805eb17:	48                   	dec    %eax
 805eb18:	4d                   	dec    %ebp
 805eb19:	5f                   	pop    %edi
 805eb1a:	49                   	dec    %ecx
 805eb1b:	44                   	inc    %esp
 805eb1c:	00 66 90             	add    %ah,-0x70(%esi)
 805eb1f:	90                   	nop

0805eb20 <version_etc_arn>:
void
version_etc_arn (FILE *stream,
                 const char *command_name, const char *package,
                 const char *version,
                 const char * const * authors, size_t n_authors)
{
 805eb20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eb24:	89 3c 24             	mov    %edi,(%esp)
 805eb27:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eb2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eb2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eb33:	b9 6c 60 00 00       	mov    $0x606c,%ecx
 805eb38:	e8 73 0a 00 00       	call   805f5b0 <__afl_maybe_log>
 805eb3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eb41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eb45:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eb49:	8b 3c 24             	mov    (%esp),%edi
 805eb4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805eb50:	55                   	push   %ebp
 805eb51:	57                   	push   %edi
 805eb52:	56                   	push   %esi
 805eb53:	53                   	push   %ebx
 805eb54:	83 ec 2c             	sub    $0x2c,%esp
 805eb57:	8b 44 24 44          	mov    0x44(%esp),%eax
 805eb5b:	8b 74 24 40          	mov    0x40(%esp),%esi
 805eb5f:	8b 54 24 48          	mov    0x48(%esp),%edx
 805eb63:	8b 4c 24 4c          	mov    0x4c(%esp),%ecx
 805eb67:	8b 5c 24 50          	mov    0x50(%esp),%ebx
 805eb6b:	8b 7c 24 54          	mov    0x54(%esp),%edi
  if (command_name)
 805eb6f:	85 c0                	test   %eax,%eax
 805eb71:	0f 84 69 04 00 00    	je     805efe0 <version_etc_arn+0x4c0>
 805eb77:	90                   	nop
 805eb78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eb7c:	89 3c 24             	mov    %edi,(%esp)
 805eb7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eb83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eb87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eb8b:	b9 88 04 00 00       	mov    $0x488,%ecx
 805eb90:	e8 1b 0a 00 00       	call   805f5b0 <__afl_maybe_log>
 805eb95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eb99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eb9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eba1:	8b 3c 24             	mov    (%esp),%edi
 805eba4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805eba8:	83 ec 08             	sub    $0x8,%esp
 805ebab:	51                   	push   %ecx
 805ebac:	52                   	push   %edx
 805ebad:	50                   	push   %eax
 805ebae:	68 84 6a 06 08       	push   $0x8066a84
 805ebb3:	6a 01                	push   $0x1
 805ebb5:	56                   	push   %esi
 805ebb6:	e8 05 a9 fe ff       	call   80494c0 <__fprintf_chk@plt>
 805ebbb:	83 c4 20             	add    $0x20,%esp
 805ebbe:	66 90                	xchg   %ax,%ax
#endif

  /* TRANSLATORS: Translate "(C)" to the copyright symbol
     (C-in-a-circle), if this symbol is available in the user's
     locale.  Otherwise, do not translate "(C)"; leave it as-is.  */
  fprintf (stream, version_etc_copyright, _("(C)"), COPYRIGHT_YEAR);
 805ebc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ebc4:	89 3c 24             	mov    %edi,(%esp)
 805ebc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ebcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ebcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ebd3:	b9 82 31 00 00       	mov    $0x3182,%ecx
 805ebd8:	e8 d3 09 00 00       	call   805f5b0 <__afl_maybe_log>
 805ebdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ebe1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ebe5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ebe9:	8b 3c 24             	mov    (%esp),%edi
 805ebec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ebf0:	83 ec 04             	sub    $0x4,%esp
 805ebf3:	6a 05                	push   $0x5
 805ebf5:	68 97 6a 06 08       	push   $0x8066a97
 805ebfa:	6a 00                	push   $0x0
 805ebfc:	e8 0f a6 fe ff       	call   8049210 <dcgettext@plt>
 805ec01:	c7 04 24 df 07 00 00 	movl   $0x7df,(%esp)
 805ec08:	50                   	push   %eax
 805ec09:	68 a0 6d 06 08       	push   $0x8066da0
 805ec0e:	6a 01                	push   $0x1
 805ec10:	56                   	push   %esi
 805ec11:	e8 aa a8 fe ff       	call   80494c0 <__fprintf_chk@plt>

  fputs (_("\
 805ec16:	83 c4 1c             	add    $0x1c,%esp
 805ec19:	6a 05                	push   $0x5
 805ec1b:	68 20 6b 06 08       	push   $0x8066b20
 805ec20:	6a 00                	push   $0x0
 805ec22:	e8 e9 a5 fe ff       	call   8049210 <dcgettext@plt>
 805ec27:	5d                   	pop    %ebp
 805ec28:	5a                   	pop    %edx
 805ec29:	56                   	push   %esi
 805ec2a:	50                   	push   %eax
 805ec2b:	e8 20 a7 fe ff       	call   8049350 <fputs_unlocked@plt>
There is NO WARRANTY, to the extent permitted by law.\n\
\n\
"),
         stream);

  switch (n_authors)
 805ec30:	83 c4 10             	add    $0x10,%esp
 805ec33:	83 ff 09             	cmp    $0x9,%edi
 805ec36:	0f 87 c4 03 00 00    	ja     805f000 <version_etc_arn+0x4e0>
 805ec3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ec40:	89 3c 24             	mov    %edi,(%esp)
 805ec43:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ec47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ec4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ec4f:	b9 8b 6c 00 00       	mov    $0x6c8b,%ecx
 805ec54:	e8 57 09 00 00       	call   805f5b0 <__afl_maybe_log>
 805ec59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ec5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ec61:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ec65:	8b 3c 24             	mov    (%esp),%edi
 805ec68:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ec6c:	ff 24 bd 64 6d 06 08 	jmp    *0x8066d64(,%edi,4)
 805ec73:	90                   	nop
 805ec74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 8:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 805ec78:	8b 6b 1c             	mov    0x1c(%ebx),%ebp
 805ec7b:	8b 53 10             	mov    0x10(%ebx),%edx
 805ec7e:	83 ec 04             	sub    $0x4,%esp
 805ec81:	8b 4b 0c             	mov    0xc(%ebx),%ecx
 805ec84:	8b 7b 08             	mov    0x8(%ebx),%edi
 805ec87:	8b 43 18             	mov    0x18(%ebx),%eax
 805ec8a:	89 6c 24 1c          	mov    %ebp,0x1c(%esp)
 805ec8e:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805ec92:	89 7c 24 14          	mov    %edi,0x14(%esp)
 805ec96:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 805ec9a:	89 44 24 18          	mov    %eax,0x18(%esp)
 805ec9e:	8b 6b 14             	mov    0x14(%ebx),%ebp
 805eca1:	8b 7b 04             	mov    0x4(%ebx),%edi
 805eca4:	8b 1b                	mov    (%ebx),%ebx
 805eca6:	6a 05                	push   $0x5
 805eca8:	68 84 6c 06 08       	push   $0x8066c84
 805ecad:	6a 00                	push   $0x0
 805ecaf:	e8 5c a5 fe ff       	call   8049210 <dcgettext@plt>
 805ecb4:	83 c4 0c             	add    $0xc,%esp
 805ecb7:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805ecbb:	52                   	push   %edx
 805ecbc:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805ecc0:	51                   	push   %ecx
 805ecc1:	55                   	push   %ebp
 805ecc2:	ff 74 24 18          	pushl  0x18(%esp)
 805ecc6:	ff 74 24 20          	pushl  0x20(%esp)
 805ecca:	ff 74 24 28          	pushl  0x28(%esp)
 805ecce:	57                   	push   %edi
 805eccf:	90                   	nop
 805ecd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ecd4:	89 3c 24             	mov    %edi,(%esp)
 805ecd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ecdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ecdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ece3:	b9 da 7e 00 00       	mov    $0x7eda,%ecx
 805ece8:	e8 c3 08 00 00       	call   805f5b0 <__afl_maybe_log>
 805eced:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ecf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ecf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ecf9:	8b 3c 24             	mov    (%esp),%edi
 805ecfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ed00:	53                   	push   %ebx
 805ed01:	50                   	push   %eax
 805ed02:	6a 01                	push   $0x1
 805ed04:	56                   	push   %esi
 805ed05:	e8 b6 a7 fe ff       	call   80494c0 <__fprintf_chk@plt>
 805ed0a:	83 c4 30             	add    $0x30,%esp
 805ed0d:	8d 76 00             	lea    0x0(%esi),%esi
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805ed10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ed14:	89 3c 24             	mov    %edi,(%esp)
 805ed17:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ed1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ed1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ed23:	b9 29 8f 00 00       	mov    $0x8f29,%ecx
 805ed28:	e8 83 08 00 00       	call   805f5b0 <__afl_maybe_log>
 805ed2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ed31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ed35:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ed39:	8b 3c 24             	mov    (%esp),%edi
 805ed3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ed40:	83 c4 2c             	add    $0x2c,%esp
 805ed43:	5b                   	pop    %ebx
 805ed44:	5e                   	pop    %esi
 805ed45:	5f                   	pop    %edi
 805ed46:	5d                   	pop    %ebp
 805ed47:	c3                   	ret    
 805ed48:	90                   	nop
 805ed49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 9:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 805ed50:	8b 53 20             	mov    0x20(%ebx),%edx
 805ed53:	8b 43 1c             	mov    0x1c(%ebx),%eax
 805ed56:	83 ec 04             	sub    $0x4,%esp
 805ed59:	8b 7b 10             	mov    0x10(%ebx),%edi
 805ed5c:	8b 4b 14             	mov    0x14(%ebx),%ecx
 805ed5f:	8b 6b 18             	mov    0x18(%ebx),%ebp
 805ed62:	89 54 24 20          	mov    %edx,0x20(%esp)
 805ed66:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 805ed6a:	8b 53 0c             	mov    0xc(%ebx),%edx
 805ed6d:	8b 43 08             	mov    0x8(%ebx),%eax
 805ed70:	89 7c 24 10          	mov    %edi,0x10(%esp)
 805ed74:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 805ed78:	8b 7b 04             	mov    0x4(%ebx),%edi
 805ed7b:	8b 1b                	mov    (%ebx),%ebx
 805ed7d:	89 54 24 14          	mov    %edx,0x14(%esp)
 805ed81:	89 44 24 18          	mov    %eax,0x18(%esp)
 805ed85:	6a 05                	push   $0x5
 805ed87:	68 b4 6c 06 08       	push   $0x8066cb4
      /* 10 or more authors.  Use an abbreviation, since the human reader
         will probably not want to read the entire list anyway.  */
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 805ed8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ed90:	89 3c 24             	mov    %edi,(%esp)
 805ed93:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ed97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ed9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ed9f:	b9 cc f1 00 00       	mov    $0xf1cc,%ecx
 805eda4:	e8 07 08 00 00       	call   805f5b0 <__afl_maybe_log>
 805eda9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805edad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805edb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805edb5:	8b 3c 24             	mov    (%esp),%edi
 805edb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805edbc:	6a 00                	push   $0x0
 805edbe:	e8 4d a4 fe ff       	call   8049210 <dcgettext@plt>
 805edc3:	8b 54 24 2c          	mov    0x2c(%esp),%edx
 805edc7:	52                   	push   %edx
 805edc8:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
 805edcc:	51                   	push   %ecx
 805edcd:	55                   	push   %ebp
 805edce:	ff 74 24 24          	pushl  0x24(%esp)
 805edd2:	ff 74 24 2c          	pushl  0x2c(%esp)
 805edd6:	ff 74 24 34          	pushl  0x34(%esp)
 805edda:	ff 74 24 3c          	pushl  0x3c(%esp)
 805edde:	57                   	push   %edi
 805eddf:	53                   	push   %ebx
 805ede0:	50                   	push   %eax
 805ede1:	6a 01                	push   $0x1
 805ede3:	56                   	push   %esi
 805ede4:	e8 d7 a6 fe ff       	call   80494c0 <__fprintf_chk@plt>
 805ede9:	83 c4 40             	add    $0x40,%esp
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805edec:	83 c4 2c             	add    $0x2c,%esp
 805edef:	5b                   	pop    %ebx
 805edf0:	5e                   	pop    %esi
 805edf1:	5f                   	pop    %edi
 805edf2:	5d                   	pop    %ebp
 805edf3:	c3                   	ret    
 805edf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

  switch (n_authors)
    {
    case 0:
      /* The caller must provide at least one author name.  */
      abort ();
 805edf8:	e8 03 a7 fe ff       	call   8049500 <abort@plt>
 805edfd:	8d 76 00             	lea    0x0(%esi),%esi
    case 1:
      /* TRANSLATORS: %s denotes an author name.  */
      fprintf (stream, _("Written by %s.\n"), authors[0]);
 805ee00:	83 ec 04             	sub    $0x4,%esp
 805ee03:	8b 1b                	mov    (%ebx),%ebx
 805ee05:	6a 05                	push   $0x5
 805ee07:	68 9b 6a 06 08       	push   $0x8066a9b
 805ee0c:	6a 00                	push   $0x0
 805ee0e:	e8 fd a3 fe ff       	call   8049210 <dcgettext@plt>
 805ee13:	89 5c 24 5c          	mov    %ebx,0x5c(%esp)
 805ee17:	89 74 24 50          	mov    %esi,0x50(%esp)
 805ee1b:	89 44 24 58          	mov    %eax,0x58(%esp)
 805ee1f:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%esp)
 805ee26:	00 
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805ee27:	83 c4 3c             	add    $0x3c,%esp
 805ee2a:	5b                   	pop    %ebx
 805ee2b:	5e                   	pop    %esi
 805ee2c:	5f                   	pop    %edi
 805ee2d:	5d                   	pop    %ebp
 805ee2e:	e9 8d a6 fe ff       	jmp    80494c0 <__fprintf_chk@plt>
 805ee33:	90                   	nop
 805ee34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      /* TRANSLATORS: %s denotes an author name.  */
      fprintf (stream, _("Written by %s.\n"), authors[0]);
      break;
    case 2:
      /* TRANSLATORS: Each %s denotes an author name.  */
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
 805ee38:	83 ec 04             	sub    $0x4,%esp
 805ee3b:	8b 6b 04             	mov    0x4(%ebx),%ebp
 805ee3e:	8b 3b                	mov    (%ebx),%edi
 805ee40:	6a 05                	push   $0x5
 805ee42:	68 ab 6a 06 08       	push   $0x8066aab
 805ee47:	6a 00                	push   $0x0
 805ee49:	e8 c2 a3 fe ff       	call   8049210 <dcgettext@plt>
 805ee4e:	89 6c 24 60          	mov    %ebp,0x60(%esp)
 805ee52:	89 7c 24 5c          	mov    %edi,0x5c(%esp)
 805ee56:	89 74 24 50          	mov    %esi,0x50(%esp)
 805ee5a:	89 44 24 58          	mov    %eax,0x58(%esp)
 805ee5e:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%esp)
 805ee65:	00 
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805ee66:	83 c4 3c             	add    $0x3c,%esp
 805ee69:	5b                   	pop    %ebx
 805ee6a:	5e                   	pop    %esi
 805ee6b:	5f                   	pop    %edi
 805ee6c:	5d                   	pop    %ebp
 805ee6d:	e9 4e a6 fe ff       	jmp    80494c0 <__fprintf_chk@plt>
 805ee72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      /* TRANSLATORS: Each %s denotes an author name.  */
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
      break;
    case 3:
      /* TRANSLATORS: Each %s denotes an author name.  */
      fprintf (stream, _("Written by %s, %s, and %s.\n"),
 805ee78:	83 ec 04             	sub    $0x4,%esp
 805ee7b:	8b 6b 08             	mov    0x8(%ebx),%ebp
 805ee7e:	8b 7b 04             	mov    0x4(%ebx),%edi
 805ee81:	8b 1b                	mov    (%ebx),%ebx
 805ee83:	6a 05                	push   $0x5
 805ee85:	68 c2 6a 06 08       	push   $0x8066ac2
 805ee8a:	6a 00                	push   $0x0
 805ee8c:	e8 7f a3 fe ff       	call   8049210 <dcgettext@plt>
 805ee91:	89 6c 24 64          	mov    %ebp,0x64(%esp)
 805ee95:	89 7c 24 60          	mov    %edi,0x60(%esp)
 805ee99:	89 5c 24 5c          	mov    %ebx,0x5c(%esp)
 805ee9d:	89 74 24 50          	mov    %esi,0x50(%esp)
 805eea1:	89 44 24 58          	mov    %eax,0x58(%esp)
 805eea5:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%esp)
 805eeac:	00 
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805eead:	83 c4 3c             	add    $0x3c,%esp
 805eeb0:	5b                   	pop    %ebx
 805eeb1:	5e                   	pop    %esi
 805eeb2:	5f                   	pop    %edi
 805eeb3:	5d                   	pop    %ebp
 805eeb4:	e9 07 a6 fe ff       	jmp    80494c0 <__fprintf_chk@plt>
 805eeb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 4:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\nand %s.\n"),
 805eec0:	8b 43 0c             	mov    0xc(%ebx),%eax
 805eec3:	83 ec 04             	sub    $0x4,%esp
 805eec6:	8b 6b 08             	mov    0x8(%ebx),%ebp
 805eec9:	8b 7b 04             	mov    0x4(%ebx),%edi
 805eecc:	8b 1b                	mov    (%ebx),%ebx
 805eece:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eed2:	6a 05                	push   $0x5
 805eed4:	68 ec 6b 06 08       	push   $0x8066bec
 805eed9:	6a 00                	push   $0x0
 805eedb:	e8 30 a3 fe ff       	call   8049210 <dcgettext@plt>
 805eee0:	83 c4 0c             	add    $0xc,%esp
 805eee3:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 805eee7:	51                   	push   %ecx
 805eee8:	55                   	push   %ebp
 805eee9:	57                   	push   %edi
 805eeea:	53                   	push   %ebx
 805eeeb:	50                   	push   %eax
 805eeec:	6a 01                	push   $0x1
 805eeee:	56                   	push   %esi
 805eeef:	e8 cc a5 fe ff       	call   80494c0 <__fprintf_chk@plt>
 805eef4:	83 c4 20             	add    $0x20,%esp
 805eef7:	e9 11 fe ff ff       	jmp    805ed0d <version_etc_arn+0x1ed>
 805eefc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 5:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\n%s, and %s.\n"),
 805ef00:	8b 6b 0c             	mov    0xc(%ebx),%ebp
 805ef03:	8b 43 10             	mov    0x10(%ebx),%eax
 805ef06:	83 ec 04             	sub    $0x4,%esp
 805ef09:	8b 7b 04             	mov    0x4(%ebx),%edi
 805ef0c:	89 6c 24 0c          	mov    %ebp,0xc(%esp)
 805ef10:	89 44 24 10          	mov    %eax,0x10(%esp)
 805ef14:	8b 6b 08             	mov    0x8(%ebx),%ebp
 805ef17:	8b 1b                	mov    (%ebx),%ebx
 805ef19:	6a 05                	push   $0x5
 805ef1b:	68 0c 6c 06 08       	push   $0x8066c0c
 805ef20:	6a 00                	push   $0x0
 805ef22:	e8 e9 a2 fe ff       	call   8049210 <dcgettext@plt>
 805ef27:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805ef2b:	51                   	push   %ecx
 805ef2c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805ef30:	52                   	push   %edx
 805ef31:	55                   	push   %ebp
 805ef32:	57                   	push   %edi
 805ef33:	53                   	push   %ebx
 805ef34:	50                   	push   %eax
 805ef35:	6a 01                	push   $0x1
 805ef37:	56                   	push   %esi
 805ef38:	e8 83 a5 fe ff       	call   80494c0 <__fprintf_chk@plt>
 805ef3d:	83 c4 30             	add    $0x30,%esp
 805ef40:	e9 c8 fd ff ff       	jmp    805ed0d <version_etc_arn+0x1ed>
 805ef45:	8d 76 00             	lea    0x0(%esi),%esi
      break;
    case 6:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, and %s.\n"),
 805ef48:	8b 6b 10             	mov    0x10(%ebx),%ebp
 805ef4b:	8b 53 04             	mov    0x4(%ebx),%edx
 805ef4e:	83 ec 04             	sub    $0x4,%esp
 805ef51:	8b 43 14             	mov    0x14(%ebx),%eax
 805ef54:	8b 7b 08             	mov    0x8(%ebx),%edi
 805ef57:	89 6c 24 10          	mov    %ebp,0x10(%esp)
 805ef5b:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805ef5f:	89 44 24 14          	mov    %eax,0x14(%esp)
 805ef63:	8b 6b 0c             	mov    0xc(%ebx),%ebp
 805ef66:	8b 1b                	mov    (%ebx),%ebx
 805ef68:	6a 05                	push   $0x5
 805ef6a:	68 30 6c 06 08       	push   $0x8066c30
 805ef6f:	6a 00                	push   $0x0
 805ef71:	e8 9a a2 fe ff       	call   8049210 <dcgettext@plt>
 805ef76:	8b 4c 24 20          	mov    0x20(%esp),%ecx
 805ef7a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805ef7e:	89 0c 24             	mov    %ecx,(%esp)
 805ef81:	52                   	push   %edx
 805ef82:	55                   	push   %ebp
 805ef83:	57                   	push   %edi
 805ef84:	ff 74 24 24          	pushl  0x24(%esp)
 805ef88:	e9 42 fd ff ff       	jmp    805eccf <version_etc_arn+0x1af>
 805ef8d:	8d 76 00             	lea    0x0(%esi),%esi
      break;
    case 7:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"),
 805ef90:	8b 6b 14             	mov    0x14(%ebx),%ebp
 805ef93:	8b 53 08             	mov    0x8(%ebx),%edx
 805ef96:	83 ec 04             	sub    $0x4,%esp
 805ef99:	8b 4b 04             	mov    0x4(%ebx),%ecx
 805ef9c:	8b 43 18             	mov    0x18(%ebx),%eax
 805ef9f:	8b 7b 0c             	mov    0xc(%ebx),%edi
 805efa2:	89 6c 24 14          	mov    %ebp,0x14(%esp)
 805efa6:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805efaa:	89 44 24 18          	mov    %eax,0x18(%esp)
 805efae:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 805efb2:	8b 6b 10             	mov    0x10(%ebx),%ebp
 805efb5:	8b 1b                	mov    (%ebx),%ebx
 805efb7:	6a 05                	push   $0x5
 805efb9:	68 58 6c 06 08       	push   $0x8066c58
 805efbe:	6a 00                	push   $0x0
 805efc0:	e8 4b a2 fe ff       	call   8049210 <dcgettext@plt>
 805efc5:	5a                   	pop    %edx
 805efc6:	59                   	pop    %ecx
 805efc7:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805efcb:	52                   	push   %edx
 805efcc:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805efd0:	51                   	push   %ecx
 805efd1:	55                   	push   %ebp
 805efd2:	57                   	push   %edi
 805efd3:	ff 74 24 20          	pushl  0x20(%esp)
 805efd7:	ff 74 24 28          	pushl  0x28(%esp)
 805efdb:	e9 ef fc ff ff       	jmp    805eccf <version_etc_arn+0x1af>
 805efe0:	83 ec 0c             	sub    $0xc,%esp
 805efe3:	51                   	push   %ecx
 805efe4:	52                   	push   %edx
 805efe5:	68 90 6a 06 08       	push   $0x8066a90
 805efea:	6a 01                	push   $0x1
 805efec:	56                   	push   %esi
 805efed:	e8 ce a4 fe ff       	call   80494c0 <__fprintf_chk@plt>
 805eff2:	83 c4 20             	add    $0x20,%esp
 805eff5:	e9 c4 fb ff ff       	jmp    805ebbe <version_etc_arn+0x9e>
 805effa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      /* 10 or more authors.  Use an abbreviation, since the human reader
         will probably not want to read the entire list anyway.  */
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 805f000:	8b 4b 1c             	mov    0x1c(%ebx),%ecx
 805f003:	8b 6b 20             	mov    0x20(%ebx),%ebp
 805f006:	83 ec 04             	sub    $0x4,%esp
 805f009:	8b 7b 14             	mov    0x14(%ebx),%edi
 805f00c:	8b 53 10             	mov    0x10(%ebx),%edx
 805f00f:	8b 43 0c             	mov    0xc(%ebx),%eax
 805f012:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 805f016:	8b 4b 08             	mov    0x8(%ebx),%ecx
 805f019:	89 6c 24 20          	mov    %ebp,0x20(%esp)
 805f01d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
 805f021:	89 54 24 10          	mov    %edx,0x10(%esp)
 805f025:	89 44 24 14          	mov    %eax,0x14(%esp)
 805f029:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 805f02d:	8b 6b 18             	mov    0x18(%ebx),%ebp
 805f030:	8b 7b 04             	mov    0x4(%ebx),%edi
 805f033:	8b 1b                	mov    (%ebx),%ebx
 805f035:	6a 05                	push   $0x5
 805f037:	68 e8 6c 06 08       	push   $0x8066ce8
 805f03c:	e9 4b fd ff ff       	jmp    805ed8c <version_etc_arn+0x26c>
 805f041:	eb 0d                	jmp    805f050 <version_etc_ar>
 805f043:	90                   	nop
 805f044:	90                   	nop
 805f045:	90                   	nop
 805f046:	90                   	nop
 805f047:	90                   	nop
 805f048:	90                   	nop
 805f049:	90                   	nop
 805f04a:	90                   	nop
 805f04b:	90                   	nop
 805f04c:	90                   	nop
 805f04d:	90                   	nop
 805f04e:	90                   	nop
 805f04f:	90                   	nop

0805f050 <version_etc_ar>:
   Author names are given in the NULL-terminated array AUTHORS. */
void
version_etc_ar (FILE *stream,
                const char *command_name, const char *package,
                const char *version, const char * const * authors)
{
 805f050:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f054:	89 3c 24             	mov    %edi,(%esp)
 805f057:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f05b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f05f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f063:	b9 3d 77 00 00       	mov    $0x773d,%ecx
 805f068:	e8 43 05 00 00       	call   805f5b0 <__afl_maybe_log>
 805f06d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f071:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f075:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f079:	8b 3c 24             	mov    (%esp),%edi
 805f07c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f080:	83 ec 0c             	sub    $0xc,%esp
  size_t n_authors;

  for (n_authors = 0; authors[n_authors]; n_authors++)
 805f083:	31 c0                	xor    %eax,%eax
   Author names are given in the NULL-terminated array AUTHORS. */
void
version_etc_ar (FILE *stream,
                const char *command_name, const char *package,
                const char *version, const char * const * authors)
{
 805f085:	8b 54 24 20          	mov    0x20(%esp),%edx
  size_t n_authors;

  for (n_authors = 0; authors[n_authors]; n_authors++)
 805f089:	8b 0a                	mov    (%edx),%ecx
 805f08b:	85 c9                	test   %ecx,%ecx
 805f08d:	74 6d                	je     805f0fc <version_etc_ar+0xac>
 805f08f:	90                   	nop
 805f090:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f094:	89 3c 24             	mov    %edi,(%esp)
 805f097:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f09b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f09f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f0a3:	b9 a7 c4 00 00       	mov    $0xc4a7,%ecx
 805f0a8:	e8 03 05 00 00       	call   805f5b0 <__afl_maybe_log>
 805f0ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f0b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f0b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f0b9:	8b 3c 24             	mov    (%esp),%edi
 805f0bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f0c0:	83 c0 01             	add    $0x1,%eax
 805f0c3:	8b 0c 82             	mov    (%edx,%eax,4),%ecx
 805f0c6:	85 c9                	test   %ecx,%ecx
 805f0c8:	75 f6                	jne    805f0c0 <version_etc_ar+0x70>
 805f0ca:	66 90                	xchg   %ax,%ax
 805f0cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f0d0:	89 3c 24             	mov    %edi,(%esp)
 805f0d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f0d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f0db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f0df:	b9 46 1a 00 00       	mov    $0x1a46,%ecx
 805f0e4:	e8 c7 04 00 00       	call   805f5b0 <__afl_maybe_log>
 805f0e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f0ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f0f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f0f5:	8b 3c 24             	mov    (%esp),%edi
 805f0f8:	8d 64 24 10          	lea    0x10(%esp),%esp
    ;
  version_etc_arn (stream, command_name, package, version, authors, n_authors);
 805f0fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f100:	89 3c 24             	mov    %edi,(%esp)
 805f103:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f107:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f10b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f10f:	b9 ac ad 00 00       	mov    $0xadac,%ecx
 805f114:	e8 97 04 00 00       	call   805f5b0 <__afl_maybe_log>
 805f119:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f11d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f121:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f125:	8b 3c 24             	mov    (%esp),%edi
 805f128:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f12c:	83 ec 08             	sub    $0x8,%esp
 805f12f:	50                   	push   %eax
 805f130:	52                   	push   %edx
 805f131:	ff 74 24 2c          	pushl  0x2c(%esp)
 805f135:	ff 74 24 2c          	pushl  0x2c(%esp)
 805f139:	ff 74 24 2c          	pushl  0x2c(%esp)
 805f13d:	ff 74 24 2c          	pushl  0x2c(%esp)
 805f141:	e8 da f9 ff ff       	call   805eb20 <version_etc_arn>
}
 805f146:	83 c4 2c             	add    $0x2c,%esp
 805f149:	c3                   	ret    
 805f14a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805f150 <version_etc_va>:
   Author names are given in the NULL-terminated va_list AUTHORS. */
void
version_etc_va (FILE *stream,
                const char *command_name, const char *package,
                const char *version, va_list authors)
{
 805f150:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f154:	89 3c 24             	mov    %edi,(%esp)
 805f157:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f15b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f15f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f163:	b9 cf 1e 00 00       	mov    $0x1ecf,%ecx
 805f168:	e8 43 04 00 00       	call   805f5b0 <__afl_maybe_log>
 805f16d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f171:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f175:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f179:	8b 3c 24             	mov    (%esp),%edi
 805f17c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f180:	83 ec 3c             	sub    $0x3c,%esp
 805f183:	8b 44 24 50          	mov    0x50(%esp),%eax
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
 805f187:	8b 10                	mov    (%eax),%edx
 805f189:	85 d2                	test   %edx,%edx
 805f18b:	89 54 24 08          	mov    %edx,0x8(%esp)
 805f18f:	0f 84 9b 02 00 00    	je     805f430 <version_etc_va+0x2e0>
 805f195:	8d 76 00             	lea    0x0(%esi),%esi
 805f198:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f19c:	89 3c 24             	mov    %edi,(%esp)
 805f19f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f1a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f1a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f1ab:	b9 2e df 00 00       	mov    $0xdf2e,%ecx
 805f1b0:	e8 fb 03 00 00       	call   805f5b0 <__afl_maybe_log>
 805f1b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f1b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f1bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f1c1:	8b 3c 24             	mov    (%esp),%edi
 805f1c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f1c8:	8b 48 04             	mov    0x4(%eax),%ecx
 805f1cb:	85 c9                	test   %ecx,%ecx
 805f1cd:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 805f1d1:	0f 84 61 02 00 00    	je     805f438 <version_etc_va+0x2e8>
 805f1d7:	90                   	nop
 805f1d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f1dc:	89 3c 24             	mov    %edi,(%esp)
 805f1df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f1e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f1e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f1eb:	b9 e7 9d 00 00       	mov    $0x9de7,%ecx
 805f1f0:	e8 bb 03 00 00       	call   805f5b0 <__afl_maybe_log>
 805f1f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f1f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f1fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f201:	8b 3c 24             	mov    (%esp),%edi
 805f204:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f208:	8b 50 08             	mov    0x8(%eax),%edx
 805f20b:	85 d2                	test   %edx,%edx
 805f20d:	89 54 24 10          	mov    %edx,0x10(%esp)
 805f211:	0f 84 29 02 00 00    	je     805f440 <version_etc_va+0x2f0>
 805f217:	90                   	nop
 805f218:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f21c:	89 3c 24             	mov    %edi,(%esp)
 805f21f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f223:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f227:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f22b:	b9 a1 a1 00 00       	mov    $0xa1a1,%ecx
 805f230:	e8 7b 03 00 00       	call   805f5b0 <__afl_maybe_log>
 805f235:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f239:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f23d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f241:	8b 3c 24             	mov    (%esp),%edi
 805f244:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f248:	8b 48 0c             	mov    0xc(%eax),%ecx
 805f24b:	85 c9                	test   %ecx,%ecx
 805f24d:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 805f251:	0f 84 f9 01 00 00    	je     805f450 <version_etc_va+0x300>
 805f257:	90                   	nop
 805f258:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f25c:	89 3c 24             	mov    %edi,(%esp)
 805f25f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f263:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f267:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f26b:	b9 4b 6f 00 00       	mov    $0x6f4b,%ecx
 805f270:	e8 3b 03 00 00       	call   805f5b0 <__afl_maybe_log>
 805f275:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f279:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f27d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f281:	8b 3c 24             	mov    (%esp),%edi
 805f284:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f288:	8b 50 10             	mov    0x10(%eax),%edx
 805f28b:	85 d2                	test   %edx,%edx
 805f28d:	89 54 24 18          	mov    %edx,0x18(%esp)
 805f291:	0f 84 c9 01 00 00    	je     805f460 <version_etc_va+0x310>
 805f297:	90                   	nop
 805f298:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f29c:	89 3c 24             	mov    %edi,(%esp)
 805f29f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f2a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f2a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f2ab:	b9 3a 0b 00 00       	mov    $0xb3a,%ecx
 805f2b0:	e8 fb 02 00 00       	call   805f5b0 <__afl_maybe_log>
 805f2b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f2b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f2bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f2c1:	8b 3c 24             	mov    (%esp),%edi
 805f2c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f2c8:	8b 48 14             	mov    0x14(%eax),%ecx
 805f2cb:	85 c9                	test   %ecx,%ecx
 805f2cd:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 805f2d1:	0f 84 99 01 00 00    	je     805f470 <version_etc_va+0x320>
 805f2d7:	90                   	nop
 805f2d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f2dc:	89 3c 24             	mov    %edi,(%esp)
 805f2df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f2e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f2e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f2eb:	b9 97 22 00 00       	mov    $0x2297,%ecx
 805f2f0:	e8 bb 02 00 00       	call   805f5b0 <__afl_maybe_log>
 805f2f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f2f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f2fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f301:	8b 3c 24             	mov    (%esp),%edi
 805f304:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f308:	8b 50 18             	mov    0x18(%eax),%edx
 805f30b:	85 d2                	test   %edx,%edx
 805f30d:	89 54 24 20          	mov    %edx,0x20(%esp)
 805f311:	0f 84 69 01 00 00    	je     805f480 <version_etc_va+0x330>
 805f317:	90                   	nop
 805f318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f31c:	89 3c 24             	mov    %edi,(%esp)
 805f31f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f32b:	b9 5c f1 00 00       	mov    $0xf15c,%ecx
 805f330:	e8 7b 02 00 00       	call   805f5b0 <__afl_maybe_log>
 805f335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f33d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f341:	8b 3c 24             	mov    (%esp),%edi
 805f344:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f348:	8b 48 1c             	mov    0x1c(%eax),%ecx
 805f34b:	85 c9                	test   %ecx,%ecx
 805f34d:	89 4c 24 24          	mov    %ecx,0x24(%esp)
 805f351:	0f 84 39 01 00 00    	je     805f490 <version_etc_va+0x340>
 805f357:	90                   	nop
 805f358:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f35c:	89 3c 24             	mov    %edi,(%esp)
 805f35f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f363:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f367:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f36b:	b9 03 b0 00 00       	mov    $0xb003,%ecx
 805f370:	e8 3b 02 00 00       	call   805f5b0 <__afl_maybe_log>
 805f375:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f379:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f37d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f381:	8b 3c 24             	mov    (%esp),%edi
 805f384:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f388:	8b 50 20             	mov    0x20(%eax),%edx
 805f38b:	85 d2                	test   %edx,%edx
 805f38d:	89 54 24 28          	mov    %edx,0x28(%esp)
 805f391:	0f 84 09 01 00 00    	je     805f4a0 <version_etc_va+0x350>
 805f397:	90                   	nop
 805f398:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f39c:	89 3c 24             	mov    %edi,(%esp)
 805f39f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f3a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f3a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f3ab:	b9 b1 9c 00 00       	mov    $0x9cb1,%ecx
 805f3b0:	e8 fb 01 00 00       	call   805f5b0 <__afl_maybe_log>
 805f3b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f3b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f3bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f3c1:	8b 3c 24             	mov    (%esp),%edi
 805f3c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f3c8:	8b 48 24             	mov    0x24(%eax),%ecx
       n_authors++)
 805f3cb:	83 f9 01             	cmp    $0x1,%ecx
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
 805f3ce:	89 4c 24 2c          	mov    %ecx,0x2c(%esp)
       n_authors++)
 805f3d2:	19 c0                	sbb    %eax,%eax
 805f3d4:	83 c0 0a             	add    $0xa,%eax
 805f3d7:	90                   	nop
    ;
  version_etc_arn (stream, command_name, package, version,
 805f3d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f3dc:	89 3c 24             	mov    %edi,(%esp)
 805f3df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f3e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f3e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f3eb:	b9 24 bd 00 00       	mov    $0xbd24,%ecx
 805f3f0:	e8 bb 01 00 00       	call   805f5b0 <__afl_maybe_log>
 805f3f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f3f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f3fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f401:	8b 3c 24             	mov    (%esp),%edi
 805f404:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f408:	83 ec 08             	sub    $0x8,%esp
 805f40b:	50                   	push   %eax
 805f40c:	8d 54 24 14          	lea    0x14(%esp),%edx
 805f410:	52                   	push   %edx
 805f411:	ff 74 24 5c          	pushl  0x5c(%esp)
 805f415:	ff 74 24 5c          	pushl  0x5c(%esp)
 805f419:	ff 74 24 5c          	pushl  0x5c(%esp)
 805f41d:	ff 74 24 5c          	pushl  0x5c(%esp)
 805f421:	e8 fa f6 ff ff       	call   805eb20 <version_etc_arn>
                   authtab, n_authors);
}
 805f426:	83 c4 5c             	add    $0x5c,%esp
 805f429:	c3                   	ret    
 805f42a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
                const char *version, va_list authors)
{
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
 805f430:	31 c0                	xor    %eax,%eax
 805f432:	eb a3                	jmp    805f3d7 <version_etc_va+0x287>
 805f434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
       n_authors++)
 805f438:	b8 01 00 00 00       	mov    $0x1,%eax
 805f43d:	eb 98                	jmp    805f3d7 <version_etc_va+0x287>
 805f43f:	90                   	nop
 805f440:	b8 02 00 00 00       	mov    $0x2,%eax
 805f445:	eb 90                	jmp    805f3d7 <version_etc_va+0x287>
 805f447:	89 f6                	mov    %esi,%esi
 805f449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 805f450:	b8 03 00 00 00       	mov    $0x3,%eax
 805f455:	eb 80                	jmp    805f3d7 <version_etc_va+0x287>
 805f457:	89 f6                	mov    %esi,%esi
 805f459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 805f460:	b8 04 00 00 00       	mov    $0x4,%eax
 805f465:	e9 6d ff ff ff       	jmp    805f3d7 <version_etc_va+0x287>
 805f46a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805f470:	b8 05 00 00 00       	mov    $0x5,%eax
 805f475:	e9 5d ff ff ff       	jmp    805f3d7 <version_etc_va+0x287>
 805f47a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805f480:	b8 06 00 00 00       	mov    $0x6,%eax
 805f485:	e9 4d ff ff ff       	jmp    805f3d7 <version_etc_va+0x287>
 805f48a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805f490:	b8 07 00 00 00       	mov    $0x7,%eax
 805f495:	e9 3d ff ff ff       	jmp    805f3d7 <version_etc_va+0x287>
 805f49a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805f4a0:	b8 08 00 00 00       	mov    $0x8,%eax
 805f4a5:	e9 2d ff ff ff       	jmp    805f3d7 <version_etc_va+0x287>
 805f4aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805f4b0 <version_etc>:
   NULL argument at the end.  */
void
version_etc (FILE *stream,
             const char *command_name, const char *package,
             const char *version, /* const char *author1, ...*/ ...)
{
 805f4b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f4b4:	89 3c 24             	mov    %edi,(%esp)
 805f4b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f4bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f4bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f4c3:	b9 f9 a4 00 00       	mov    $0xa4f9,%ecx
 805f4c8:	e8 e3 00 00 00       	call   805f5b0 <__afl_maybe_log>
 805f4cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f4d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f4d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f4d9:	8b 3c 24             	mov    (%esp),%edi
 805f4dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f4e0:	83 ec 0c             	sub    $0xc,%esp
  va_list authors;

  va_start (authors, version);
 805f4e3:	8d 44 24 20          	lea    0x20(%esp),%eax
  version_etc_va (stream, command_name, package, version, authors);
 805f4e7:	83 ec 0c             	sub    $0xc,%esp
 805f4ea:	50                   	push   %eax
 805f4eb:	ff 74 24 2c          	pushl  0x2c(%esp)
 805f4ef:	ff 74 24 2c          	pushl  0x2c(%esp)
 805f4f3:	ff 74 24 2c          	pushl  0x2c(%esp)
 805f4f7:	ff 74 24 2c          	pushl  0x2c(%esp)
 805f4fb:	e8 50 fc ff ff       	call   805f150 <version_etc_va>
  va_end (authors);
}
 805f500:	83 c4 2c             	add    $0x2c,%esp
 805f503:	c3                   	ret    
 805f504:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805f50a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0805f510 <emit_bug_reporting_address>:

void
emit_bug_reporting_address (void)
{
 805f510:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f514:	89 3c 24             	mov    %edi,(%esp)
 805f517:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f51b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f51f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f523:	b9 a4 98 00 00       	mov    $0x98a4,%ecx
 805f528:	e8 83 00 00 00       	call   805f5b0 <__afl_maybe_log>
 805f52d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f531:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f535:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f539:	8b 3c 24             	mov    (%esp),%edi
 805f53c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f540:	53                   	push   %ebx
 805f541:	83 ec 0c             	sub    $0xc,%esp
  /* TRANSLATORS: The placeholder indicates the bug-reporting address
     for this package.  Please add _another line_ saying
     "Report translation bugs to <...>\n" with the address for translation
     bugs (typically your translation team's web or email address).  */
  printf (_("\nReport bugs to: %s\n"), PACKAGE_BUGREPORT);
 805f544:	6a 05                	push   $0x5
 805f546:	68 de 6a 06 08       	push   $0x8066ade
 805f54b:	6a 00                	push   $0x0
 805f54d:	e8 be 9c fe ff       	call   8049210 <dcgettext@plt>
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 805f552:	83 c4 0c             	add    $0xc,%esp
 805f555:	68 f3 6a 06 08       	push   $0x8066af3
 805f55a:	50                   	push   %eax
 805f55b:	6a 01                	push   $0x1
 805f55d:	e8 ce 9e fe ff       	call   8049430 <__printf_chk@plt>
#ifdef PACKAGE_PACKAGER_BUG_REPORTS
  printf (_("Report %s bugs to: %s\n"), PACKAGE_PACKAGER,
          PACKAGE_PACKAGER_BUG_REPORTS);
#endif
#ifdef PACKAGE_URL
  printf (_("%s home page: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
 805f562:	83 c4 0c             	add    $0xc,%esp
 805f565:	6a 05                	push   $0x5
 805f567:	68 09 6b 06 08       	push   $0x8066b09
 805f56c:	6a 00                	push   $0x0
 805f56e:	e8 9d 9c fe ff       	call   8049210 <dcgettext@plt>
 805f573:	68 58 63 06 08       	push   $0x8066358
 805f578:	68 a5 5b 06 08       	push   $0x8065ba5
 805f57d:	50                   	push   %eax
 805f57e:	6a 01                	push   $0x1
 805f580:	e8 ab 9e fe ff       	call   8049430 <__printf_chk@plt>
#else
  printf (_("%s home page: <http://www.gnu.org/software/%s/>\n"),
          PACKAGE_NAME, PACKAGE);
#endif
  fputs (_("General help using GNU software: <http://www.gnu.org/gethelp/>\n"),
 805f585:	83 c4 1c             	add    $0x1c,%esp
 805f588:	8b 1d d8 a2 06 08    	mov    0x806a2d8,%ebx
 805f58e:	6a 05                	push   $0x5
 805f590:	68 24 6d 06 08       	push   $0x8066d24
 805f595:	6a 00                	push   $0x0
 805f597:	e8 74 9c fe ff       	call   8049210 <dcgettext@plt>
 805f59c:	5a                   	pop    %edx
 805f59d:	59                   	pop    %ecx
 805f59e:	53                   	push   %ebx
 805f59f:	50                   	push   %eax
 805f5a0:	e8 ab 9d fe ff       	call   8049350 <fputs_unlocked@plt>
         stdout);
}
 805f5a5:	83 c4 18             	add    $0x18,%esp
 805f5a8:	5b                   	pop    %ebx
 805f5a9:	c3                   	ret    
 805f5aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805f5b0 <__afl_maybe_log>:
 805f5b0:	9f                   	lahf   
 805f5b1:	0f 90 c0             	seto   %al
 805f5b4:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 805f5ba:	85 d2                	test   %edx,%edx
 805f5bc:	74 22                	je     805f5e0 <__afl_setup>

0805f5be <__afl_store>:
 805f5be:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 805f5c4:	31 cf                	xor    %ecx,%edi
 805f5c6:	d1 e9                	shr    %ecx
 805f5c8:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 805f5ce:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805f5d2:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805f5d6 <__afl_return>:
 805f5d6:	04 7f                	add    $0x7f,%al
 805f5d8:	9e                   	sahf   
 805f5d9:	c3                   	ret    
 805f5da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805f5e0 <__afl_setup>:
 805f5e0:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 805f5e7:	75 ed                	jne    805f5d6 <__afl_return>
 805f5e9:	50                   	push   %eax
 805f5ea:	51                   	push   %ecx
 805f5eb:	68 e8 f6 05 08       	push   $0x805f6e8
 805f5f0:	e8 eb 9c fe ff       	call   80492e0 <getenv@plt>
 805f5f5:	83 c4 04             	add    $0x4,%esp
 805f5f8:	85 c0                	test   %eax,%eax
 805f5fa:	0f 84 db 00 00 00    	je     805f6db <__afl_setup_abort>
 805f600:	50                   	push   %eax
 805f601:	e8 9a 9e fe ff       	call   80494a0 <atoi@plt>
 805f606:	83 c4 04             	add    $0x4,%esp
 805f609:	6a 00                	push   $0x0
 805f60b:	6a 00                	push   $0x0
 805f60d:	50                   	push   %eax
 805f60e:	e8 0d 9c fe ff       	call   8049220 <shmat@plt>
 805f613:	83 c4 0c             	add    $0xc,%esp
 805f616:	83 f8 ff             	cmp    $0xffffffff,%eax
 805f619:	0f 84 bc 00 00 00    	je     805f6db <__afl_setup_abort>
 805f61f:	c6 00 01             	movb   $0x1,(%eax)
 805f622:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 805f627:	89 c2                	mov    %eax,%edx
 805f629:	59                   	pop    %ecx
 805f62a:	58                   	pop    %eax

0805f62b <__afl_forkserver>:
 805f62b:	50                   	push   %eax
 805f62c:	51                   	push   %ecx
 805f62d:	52                   	push   %edx
 805f62e:	6a 04                	push   $0x4
 805f630:	68 e0 ad 43 08       	push   $0x843ade0
 805f635:	68 c7 00 00 00       	push   $0xc7
 805f63a:	e8 91 9d fe ff       	call   80493d0 <write@plt>
 805f63f:	83 c4 0c             	add    $0xc,%esp
 805f642:	83 f8 04             	cmp    $0x4,%eax
 805f645:	75 6e                	jne    805f6b5 <__afl_fork_resume>

0805f647 <__afl_fork_wait_loop>:
 805f647:	6a 04                	push   $0x4
 805f649:	68 e0 ad 43 08       	push   $0x843ade0
 805f64e:	68 c6 00 00 00       	push   $0xc6
 805f653:	e8 08 9b fe ff       	call   8049160 <read@plt>
 805f658:	83 c4 0c             	add    $0xc,%esp
 805f65b:	83 f8 04             	cmp    $0x4,%eax
 805f65e:	75 74                	jne    805f6d4 <__afl_die>
 805f660:	e8 db 9d fe ff       	call   8049440 <fork@plt>
 805f665:	83 f8 00             	cmp    $0x0,%eax
 805f668:	7c 6a                	jl     805f6d4 <__afl_die>
 805f66a:	74 49                	je     805f6b5 <__afl_fork_resume>
 805f66c:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 805f671:	6a 04                	push   $0x4
 805f673:	68 40 ae 43 08       	push   $0x843ae40
 805f678:	68 c7 00 00 00       	push   $0xc7
 805f67d:	e8 4e 9d fe ff       	call   80493d0 <write@plt>
 805f682:	83 c4 0c             	add    $0xc,%esp
 805f685:	6a 00                	push   $0x0
 805f687:	68 e0 ad 43 08       	push   $0x843ade0
 805f68c:	ff 35 40 ae 43 08    	pushl  0x843ae40
 805f692:	e8 d9 9b fe ff       	call   8049270 <waitpid@plt>
 805f697:	83 c4 0c             	add    $0xc,%esp
 805f69a:	83 f8 00             	cmp    $0x0,%eax
 805f69d:	7e 35                	jle    805f6d4 <__afl_die>
 805f69f:	6a 04                	push   $0x4
 805f6a1:	68 e0 ad 43 08       	push   $0x843ade0
 805f6a6:	68 c7 00 00 00       	push   $0xc7
 805f6ab:	e8 20 9d fe ff       	call   80493d0 <write@plt>
 805f6b0:	83 c4 0c             	add    $0xc,%esp
 805f6b3:	eb 92                	jmp    805f647 <__afl_fork_wait_loop>

0805f6b5 <__afl_fork_resume>:
 805f6b5:	68 c6 00 00 00       	push   $0xc6
 805f6ba:	e8 61 9e fe ff       	call   8049520 <close@plt>
 805f6bf:	68 c7 00 00 00       	push   $0xc7
 805f6c4:	e8 57 9e fe ff       	call   8049520 <close@plt>
 805f6c9:	83 c4 08             	add    $0x8,%esp
 805f6cc:	5a                   	pop    %edx
 805f6cd:	59                   	pop    %ecx
 805f6ce:	58                   	pop    %eax
 805f6cf:	e9 ea fe ff ff       	jmp    805f5be <__afl_store>

0805f6d4 <__afl_die>:
 805f6d4:	31 c0                	xor    %eax,%eax
 805f6d6:	e8 b5 9a fe ff       	call   8049190 <_exit@plt>

0805f6db <__afl_setup_abort>:
 805f6db:	fe 05 60 ae 43 08    	incb   0x843ae60
 805f6e1:	59                   	pop    %ecx
 805f6e2:	58                   	pop    %eax
 805f6e3:	e9 ee fe ff ff       	jmp    805f5d6 <__afl_return>

0805f6e8 <.AFL_SHM_ENV>:
 805f6e8:	5f                   	pop    %edi
 805f6e9:	5f                   	pop    %edi
 805f6ea:	41                   	inc    %ecx
 805f6eb:	46                   	inc    %esi
 805f6ec:	4c                   	dec    %esp
 805f6ed:	5f                   	pop    %edi
 805f6ee:	53                   	push   %ebx
 805f6ef:	48                   	dec    %eax
 805f6f0:	4d                   	dec    %ebp
 805f6f1:	5f                   	pop    %edi
 805f6f2:	49                   	dec    %ecx
 805f6f3:	44                   	inc    %esp
 805f6f4:	00 66 90             	add    %ah,-0x70(%esi)
 805f6f7:	90                   	nop
 805f6f8:	66 90                	xchg   %ax,%ax
 805f6fa:	66 90                	xchg   %ax,%ax
 805f6fc:	66 90                	xchg   %ax,%ax
 805f6fe:	66 90                	xchg   %ax,%ax

0805f700 <xmalloc>:

/* Allocate N bytes of memory dynamically, with error checking.  */

void *
xmalloc (size_t n)
{
 805f700:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f704:	89 3c 24             	mov    %edi,(%esp)
 805f707:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f70b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f70f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f713:	b9 60 ab 00 00       	mov    $0xab60,%ecx
 805f718:	e8 23 0b 00 00       	call   8060240 <__afl_maybe_log>
 805f71d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f721:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f725:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f729:	8b 3c 24             	mov    (%esp),%edi
 805f72c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f730:	53                   	push   %ebx
 805f731:	83 ec 14             	sub    $0x14,%esp
 805f734:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  void *p = malloc (n);
 805f738:	53                   	push   %ebx
 805f739:	e8 c2 9b fe ff       	call   8049300 <malloc@plt>
  if (!p && n != 0)
 805f73e:	83 c4 10             	add    $0x10,%esp
 805f741:	85 c0                	test   %eax,%eax
 805f743:	75 67                	jne    805f7ac <xmalloc+0xac>
 805f745:	8d 76 00             	lea    0x0(%esi),%esi
 805f748:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f74c:	89 3c 24             	mov    %edi,(%esp)
 805f74f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f753:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f757:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f75b:	b9 71 24 00 00       	mov    $0x2471,%ecx
 805f760:	e8 db 0a 00 00       	call   8060240 <__afl_maybe_log>
 805f765:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f769:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f76d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f771:	8b 3c 24             	mov    (%esp),%edi
 805f774:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f778:	85 db                	test   %ebx,%ebx
 805f77a:	75 65                	jne    805f7e1 <xmalloc+0xe1>
 805f77c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f780:	89 3c 24             	mov    %edi,(%esp)
 805f783:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f78b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f78f:	b9 cf 41 00 00       	mov    $0x41cf,%ecx
 805f794:	e8 a7 0a 00 00       	call   8060240 <__afl_maybe_log>
 805f799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f79d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f7a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f7a5:	8b 3c 24             	mov    (%esp),%edi
 805f7a8:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return p;
}
 805f7ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f7b0:	89 3c 24             	mov    %edi,(%esp)
 805f7b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f7b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f7bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f7bf:	b9 88 40 00 00       	mov    $0x4088,%ecx
 805f7c4:	e8 77 0a 00 00       	call   8060240 <__afl_maybe_log>
 805f7c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f7cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f7d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f7d5:	8b 3c 24             	mov    (%esp),%edi
 805f7d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f7dc:	83 c4 08             	add    $0x8,%esp
 805f7df:	5b                   	pop    %ebx
 805f7e0:	c3                   	ret    
 805f7e1:	8d 76 00             	lea    0x0(%esi),%esi
void *
xmalloc (size_t n)
{
  void *p = malloc (n);
  if (!p && n != 0)
    xalloc_die ();
 805f7e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f7e8:	89 3c 24             	mov    %edi,(%esp)
 805f7eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f7ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f7f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f7f7:	b9 6d e7 00 00       	mov    $0xe76d,%ecx
 805f7fc:	e8 3f 0a 00 00       	call   8060240 <__afl_maybe_log>
 805f801:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f805:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f809:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f80d:	8b 3c 24             	mov    (%esp),%edi
 805f810:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f814:	e8 77 0b 00 00       	call   8060390 <xalloc_die>
 805f819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805f820 <xnmalloc>:

XALLOC_INLINE void *xnmalloc (size_t n, size_t s)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1, 2));
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
 805f820:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f824:	89 3c 24             	mov    %edi,(%esp)
 805f827:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f82b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f82f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f833:	b9 d9 94 00 00       	mov    $0x94d9,%ecx
 805f838:	e8 03 0a 00 00       	call   8060240 <__afl_maybe_log>
 805f83d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f841:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f845:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f849:	8b 3c 24             	mov    (%esp),%edi
 805f84c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f850:	53                   	push   %ebx
  if (xalloc_oversized (n, s))
 805f851:	31 d2                	xor    %edx,%edx
 805f853:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

XALLOC_INLINE void *xnmalloc (size_t n, size_t s)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1, 2));
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
 805f858:	83 ec 08             	sub    $0x8,%esp
 805f85b:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 805f85f:	8b 4c 24 10          	mov    0x10(%esp),%ecx
  if (xalloc_oversized (n, s))
 805f863:	f7 f3                	div    %ebx
 805f865:	39 c8                	cmp    %ecx,%eax
 805f867:	72 43                	jb     805f8ac <xnmalloc+0x8c>
 805f869:	8d 76 00             	lea    0x0(%esi),%esi
 805f86c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f870:	89 3c 24             	mov    %edi,(%esp)
 805f873:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f87b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f87f:	b9 67 37 00 00       	mov    $0x3767,%ecx
 805f884:	e8 b7 09 00 00       	call   8060240 <__afl_maybe_log>
 805f889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f88d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f891:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f895:	8b 3c 24             	mov    (%esp),%edi
 805f898:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return xmalloc (n * s);
 805f89c:	0f af cb             	imul   %ebx,%ecx
 805f89f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
}
 805f8a3:	83 c4 08             	add    $0x8,%esp
 805f8a6:	5b                   	pop    %ebx
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
  return xmalloc (n * s);
 805f8a7:	e9 54 fe ff ff       	jmp    805f700 <xmalloc>
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1, 2));
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
 805f8ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f8b0:	89 3c 24             	mov    %edi,(%esp)
 805f8b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f8b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f8bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f8bf:	b9 e1 73 00 00       	mov    $0x73e1,%ecx
 805f8c4:	e8 77 09 00 00       	call   8060240 <__afl_maybe_log>
 805f8c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f8cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f8d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f8d5:	8b 3c 24             	mov    (%esp),%edi
 805f8d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f8dc:	e8 af 0a 00 00       	call   8060390 <xalloc_die>
 805f8e1:	eb 0d                	jmp    805f8f0 <xcharalloc>
 805f8e3:	90                   	nop
 805f8e4:	90                   	nop
 805f8e5:	90                   	nop
 805f8e6:	90                   	nop
 805f8e7:	90                   	nop
 805f8e8:	90                   	nop
 805f8e9:	90                   	nop
 805f8ea:	90                   	nop
 805f8eb:	90                   	nop
 805f8ec:	90                   	nop
 805f8ed:	90                   	nop
 805f8ee:	90                   	nop
 805f8ef:	90                   	nop

0805f8f0 <xcharalloc>:
XALLOC_INLINE char *xcharalloc (size_t n)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1));
XALLOC_INLINE char *
xcharalloc (size_t n)
{
  return XNMALLOC (n, char);
 805f8f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f8f4:	89 3c 24             	mov    %edi,(%esp)
 805f8f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f8fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f8ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f903:	b9 c0 7b 00 00       	mov    $0x7bc0,%ecx
 805f908:	e8 33 09 00 00       	call   8060240 <__afl_maybe_log>
 805f90d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f911:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f915:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f919:	8b 3c 24             	mov    (%esp),%edi
 805f91c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f920:	e9 db fd ff ff       	jmp    805f700 <xmalloc>
 805f925:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 805f929:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805f930 <xrealloc>:
/* Change the size of an allocated block of memory P to N bytes,
   with error checking.  */

void *
xrealloc (void *p, size_t n)
{
 805f930:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f934:	89 3c 24             	mov    %edi,(%esp)
 805f937:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f93b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f93f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f943:	b9 40 9e 00 00       	mov    $0x9e40,%ecx
 805f948:	e8 f3 08 00 00       	call   8060240 <__afl_maybe_log>
 805f94d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f951:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f955:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f959:	8b 3c 24             	mov    (%esp),%edi
 805f95c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f960:	53                   	push   %ebx
 805f961:	83 ec 08             	sub    $0x8,%esp
 805f964:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 805f968:	8b 44 24 10          	mov    0x10(%esp),%eax
  if (!n && p)
 805f96c:	85 db                	test   %ebx,%ebx
 805f96e:	75 68                	jne    805f9d8 <xrealloc+0xa8>
 805f970:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f974:	89 3c 24             	mov    %edi,(%esp)
 805f977:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f97b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f97f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f983:	b9 2f 0b 00 00       	mov    $0xb2f,%ecx
 805f988:	e8 b3 08 00 00       	call   8060240 <__afl_maybe_log>
 805f98d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f991:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f995:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f999:	8b 3c 24             	mov    (%esp),%edi
 805f99c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f9a0:	85 c0                	test   %eax,%eax
 805f9a2:	0f 85 10 01 00 00    	jne    805fab8 <xrealloc+0x188>
 805f9a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f9ac:	89 3c 24             	mov    %edi,(%esp)
 805f9af:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f9b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f9b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f9bb:	b9 51 04 00 00       	mov    $0x451,%ecx
 805f9c0:	e8 7b 08 00 00       	call   8060240 <__afl_maybe_log>
 805f9c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f9c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f9cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f9d1:	8b 3c 24             	mov    (%esp),%edi
 805f9d4:	8d 64 24 10          	lea    0x10(%esp),%esp
         GNU, even if the underlying realloc is C99.  */
      free (p);
      return NULL;
    }

  p = realloc (p, n);
 805f9d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f9dc:	89 3c 24             	mov    %edi,(%esp)
 805f9df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f9e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f9e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f9eb:	b9 2a 35 00 00       	mov    $0x352a,%ecx
 805f9f0:	e8 4b 08 00 00       	call   8060240 <__afl_maybe_log>
 805f9f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f9f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f9fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fa01:	8b 3c 24             	mov    (%esp),%edi
 805fa04:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fa08:	83 ec 08             	sub    $0x8,%esp
 805fa0b:	53                   	push   %ebx
 805fa0c:	50                   	push   %eax
 805fa0d:	e8 de 98 fe ff       	call   80492f0 <realloc@plt>
  if (!p && n)
 805fa12:	83 c4 10             	add    $0x10,%esp
 805fa15:	85 c0                	test   %eax,%eax
 805fa17:	75 67                	jne    805fa80 <xrealloc+0x150>
 805fa19:	8d 76 00             	lea    0x0(%esi),%esi
 805fa1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fa20:	89 3c 24             	mov    %edi,(%esp)
 805fa23:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fa27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fa2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fa2f:	b9 13 4a 00 00       	mov    $0x4a13,%ecx
 805fa34:	e8 07 08 00 00       	call   8060240 <__afl_maybe_log>
 805fa39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fa3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fa41:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fa45:	8b 3c 24             	mov    (%esp),%edi
 805fa48:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fa4c:	85 db                	test   %ebx,%ebx
 805fa4e:	75 7b                	jne    805facb <xrealloc+0x19b>
 805fa50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fa54:	89 3c 24             	mov    %edi,(%esp)
 805fa57:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fa5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fa5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fa63:	b9 4b 6f 00 00       	mov    $0x6f4b,%ecx
 805fa68:	e8 d3 07 00 00       	call   8060240 <__afl_maybe_log>
 805fa6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fa71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fa75:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fa79:	8b 3c 24             	mov    (%esp),%edi
 805fa7c:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return p;
}
 805fa80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fa84:	89 3c 24             	mov    %edi,(%esp)
 805fa87:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fa8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fa8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fa93:	b9 7c c4 00 00       	mov    $0xc47c,%ecx
 805fa98:	e8 a3 07 00 00       	call   8060240 <__afl_maybe_log>
 805fa9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805faa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805faa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805faa9:	8b 3c 24             	mov    (%esp),%edi
 805faac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fab0:	83 c4 08             	add    $0x8,%esp
 805fab3:	5b                   	pop    %ebx
 805fab4:	c3                   	ret    
 805fab5:	8d 76 00             	lea    0x0(%esi),%esi
{
  if (!n && p)
    {
      /* The GNU and C99 realloc behaviors disagree here.  Act like
         GNU, even if the underlying realloc is C99.  */
      free (p);
 805fab8:	83 ec 0c             	sub    $0xc,%esp
 805fabb:	50                   	push   %eax
 805fabc:	e8 df 96 fe ff       	call   80491a0 <free@plt>
      return NULL;
 805fac1:	83 c4 10             	add    $0x10,%esp
 805fac4:	31 c0                	xor    %eax,%eax

  p = realloc (p, n);
  if (!p && n)
    xalloc_die ();
  return p;
}
 805fac6:	83 c4 08             	add    $0x8,%esp
 805fac9:	5b                   	pop    %ebx
 805faca:	c3                   	ret    
 805facb:	90                   	nop
      return NULL;
    }

  p = realloc (p, n);
  if (!p && n)
    xalloc_die ();
 805facc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fad0:	89 3c 24             	mov    %edi,(%esp)
 805fad3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fad7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fadb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fadf:	b9 96 ca 00 00       	mov    $0xca96,%ecx
 805fae4:	e8 57 07 00 00       	call   8060240 <__afl_maybe_log>
 805fae9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805faed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805faf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805faf5:	8b 3c 24             	mov    (%esp),%edi
 805faf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fafc:	e8 8f 08 00 00       	call   8060390 <xalloc_die>
 805fb01:	eb 0d                	jmp    805fb10 <xnrealloc>
 805fb03:	90                   	nop
 805fb04:	90                   	nop
 805fb05:	90                   	nop
 805fb06:	90                   	nop
 805fb07:	90                   	nop
 805fb08:	90                   	nop
 805fb09:	90                   	nop
 805fb0a:	90                   	nop
 805fb0b:	90                   	nop
 805fb0c:	90                   	nop
 805fb0d:	90                   	nop
 805fb0e:	90                   	nop
 805fb0f:	90                   	nop

0805fb10 <xnrealloc>:

XALLOC_INLINE void *xnrealloc (void *p, size_t n, size_t s)
                    _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
 805fb10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fb14:	89 3c 24             	mov    %edi,(%esp)
 805fb17:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fb1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fb1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fb23:	b9 c0 fa 00 00       	mov    $0xfac0,%ecx
 805fb28:	e8 13 07 00 00       	call   8060240 <__afl_maybe_log>
 805fb2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fb31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fb35:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fb39:	8b 3c 24             	mov    (%esp),%edi
 805fb3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fb40:	56                   	push   %esi
 805fb41:	53                   	push   %ebx
  if (xalloc_oversized (n, s))
 805fb42:	31 d2                	xor    %edx,%edx
 805fb44:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

XALLOC_INLINE void *xnrealloc (void *p, size_t n, size_t s)
                    _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
 805fb49:	83 ec 04             	sub    $0x4,%esp
 805fb4c:	8b 74 24 18          	mov    0x18(%esp),%esi
 805fb50:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 805fb54:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  if (xalloc_oversized (n, s))
 805fb58:	f7 f6                	div    %esi
 805fb5a:	39 c8                	cmp    %ecx,%eax
 805fb5c:	72 47                	jb     805fba5 <xnrealloc+0x95>
 805fb5e:	66 90                	xchg   %ax,%ax
 805fb60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fb64:	89 3c 24             	mov    %edi,(%esp)
 805fb67:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fb6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fb6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fb73:	b9 07 ef 00 00       	mov    $0xef07,%ecx
 805fb78:	e8 c3 06 00 00       	call   8060240 <__afl_maybe_log>
 805fb7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fb81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fb85:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fb89:	8b 3c 24             	mov    (%esp),%edi
 805fb8c:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return xrealloc (p, n * s);
 805fb90:	0f af ce             	imul   %esi,%ecx
 805fb93:	89 5c 24 10          	mov    %ebx,0x10(%esp)
 805fb97:	89 4c 24 14          	mov    %ecx,0x14(%esp)
}
 805fb9b:	83 c4 04             	add    $0x4,%esp
 805fb9e:	5b                   	pop    %ebx
 805fb9f:	5e                   	pop    %esi
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
  return xrealloc (p, n * s);
 805fba0:	e9 8b fd ff ff       	jmp    805f930 <xrealloc>
 805fba5:	8d 76 00             	lea    0x0(%esi),%esi
                    _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
 805fba8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fbac:	89 3c 24             	mov    %edi,(%esp)
 805fbaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fbb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fbb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fbbb:	b9 2e 9e 00 00       	mov    $0x9e2e,%ecx
 805fbc0:	e8 7b 06 00 00       	call   8060240 <__afl_maybe_log>
 805fbc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fbc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fbcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fbd1:	8b 3c 24             	mov    (%esp),%edi
 805fbd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fbd8:	e8 b3 07 00 00       	call   8060390 <xalloc_die>
 805fbdd:	8d 76 00             	lea    0x0(%esi),%esi

0805fbe0 <x2nrealloc>:

   */

XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
 805fbe0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fbe4:	89 3c 24             	mov    %edi,(%esp)
 805fbe7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fbeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fbef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fbf3:	b9 fe 4a 00 00       	mov    $0x4afe,%ecx
 805fbf8:	e8 43 06 00 00       	call   8060240 <__afl_maybe_log>
 805fbfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fc01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fc05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fc09:	8b 3c 24             	mov    (%esp),%edi
 805fc0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fc10:	57                   	push   %edi
 805fc11:	56                   	push   %esi
 805fc12:	53                   	push   %ebx
 805fc13:	8b 74 24 10          	mov    0x10(%esp),%esi
 805fc17:	8b 7c 24 14          	mov    0x14(%esp),%edi
 805fc1b:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  size_t n = *pn;

  if (! p)
 805fc1f:	85 f6                	test   %esi,%esi
   */

XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  size_t n = *pn;
 805fc21:	8b 0f                	mov    (%edi),%ecx

  if (! p)
 805fc23:	0f 84 c7 00 00 00    	je     805fcf0 <x2nrealloc+0x110>
 805fc29:	8d 76 00             	lea    0x0(%esi),%esi
 805fc2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fc30:	89 3c 24             	mov    %edi,(%esp)
 805fc33:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fc37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fc3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fc3f:	b9 23 09 00 00       	mov    $0x923,%ecx
 805fc44:	e8 f7 05 00 00       	call   8060240 <__afl_maybe_log>
 805fc49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fc4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fc51:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fc55:	8b 3c 24             	mov    (%esp),%edi
 805fc58:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
 805fc5c:	31 d2                	xor    %edx,%edx
 805fc5e:	b8 aa aa aa aa       	mov    $0xaaaaaaaa,%eax
 805fc63:	f7 f3                	div    %ebx
 805fc65:	39 c1                	cmp    %eax,%ecx
 805fc67:	0f 83 ce 00 00 00    	jae    805fd3b <x2nrealloc+0x15b>
 805fc6d:	8d 76 00             	lea    0x0(%esi),%esi
 805fc70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fc74:	89 3c 24             	mov    %edi,(%esp)
 805fc77:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fc7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fc7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fc83:	b9 2c e9 00 00       	mov    $0xe92c,%ecx
 805fc88:	e8 b3 05 00 00       	call   8060240 <__afl_maybe_log>
 805fc8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fc91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fc95:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fc99:	8b 3c 24             	mov    (%esp),%edi
 805fc9c:	8d 64 24 10          	lea    0x10(%esp),%esp
        xalloc_die ();
      n += n / 2 + 1;
 805fca0:	89 c8                	mov    %ecx,%eax
 805fca2:	d1 e8                	shr    %eax
 805fca4:	8d 4c 01 01          	lea    0x1(%ecx,%eax,1),%ecx
    }

  *pn = n;
 805fca8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fcac:	89 3c 24             	mov    %edi,(%esp)
 805fcaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fcb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fcb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fcbb:	b9 d3 69 00 00       	mov    $0x69d3,%ecx
 805fcc0:	e8 7b 05 00 00       	call   8060240 <__afl_maybe_log>
 805fcc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fcc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fccd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fcd1:	8b 3c 24             	mov    (%esp),%edi
 805fcd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fcd8:	89 0f                	mov    %ecx,(%edi)
  return xrealloc (p, n * s);
 805fcda:	89 74 24 10          	mov    %esi,0x10(%esp)
 805fcde:	0f af cb             	imul   %ebx,%ecx
 805fce1:	89 4c 24 14          	mov    %ecx,0x14(%esp)
}
 805fce5:	5b                   	pop    %ebx
 805fce6:	5e                   	pop    %esi
 805fce7:	5f                   	pop    %edi
        xalloc_die ();
      n += n / 2 + 1;
    }

  *pn = n;
  return xrealloc (p, n * s);
 805fce8:	e9 43 fc ff ff       	jmp    805f930 <xrealloc>
 805fced:	8d 76 00             	lea    0x0(%esi),%esi
{
  size_t n = *pn;

  if (! p)
    {
      if (! n)
 805fcf0:	85 c9                	test   %ecx,%ecx
 805fcf2:	75 b4                	jne    805fca8 <x2nrealloc+0xc8>
 805fcf4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fcf8:	89 3c 24             	mov    %edi,(%esp)
 805fcfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fcff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fd03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fd07:	b9 93 e5 00 00       	mov    $0xe593,%ecx
 805fd0c:	e8 2f 05 00 00       	call   8060240 <__afl_maybe_log>
 805fd11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fd15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fd19:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fd1d:	8b 3c 24             	mov    (%esp),%edi
 805fd20:	8d 64 24 10          	lea    0x10(%esp),%esp
             requests, when the invoking code specifies an old size of
             zero.  This is the largest "small" request for the GNU C
             library malloc.  */
          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };

          n = DEFAULT_MXFAST / s;
 805fd24:	31 d2                	xor    %edx,%edx
 805fd26:	b8 40 00 00 00       	mov    $0x40,%eax
          n += !n;
 805fd2b:	31 c9                	xor    %ecx,%ecx
             requests, when the invoking code specifies an old size of
             zero.  This is the largest "small" request for the GNU C
             library malloc.  */
          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };

          n = DEFAULT_MXFAST / s;
 805fd2d:	f7 f3                	div    %ebx
          n += !n;
 805fd2f:	85 c0                	test   %eax,%eax
 805fd31:	0f 94 c1             	sete   %cl
 805fd34:	01 c1                	add    %eax,%ecx
 805fd36:	e9 6d ff ff ff       	jmp    805fca8 <x2nrealloc+0xc8>
 805fd3b:	90                   	nop
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
        xalloc_die ();
 805fd3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fd40:	89 3c 24             	mov    %edi,(%esp)
 805fd43:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fd47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fd4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fd4f:	b9 ff 2d 00 00       	mov    $0x2dff,%ecx
 805fd54:	e8 e7 04 00 00       	call   8060240 <__afl_maybe_log>
 805fd59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fd5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fd61:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fd65:	8b 3c 24             	mov    (%esp),%edi
 805fd68:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fd6c:	e8 1f 06 00 00       	call   8060390 <xalloc_die>
 805fd71:	eb 0d                	jmp    805fd80 <x2realloc>
 805fd73:	90                   	nop
 805fd74:	90                   	nop
 805fd75:	90                   	nop
 805fd76:	90                   	nop
 805fd77:	90                   	nop
 805fd78:	90                   	nop
 805fd79:	90                   	nop
 805fd7a:	90                   	nop
 805fd7b:	90                   	nop
 805fd7c:	90                   	nop
 805fd7d:	90                   	nop
 805fd7e:	90                   	nop
 805fd7f:	90                   	nop

0805fd80 <x2realloc>:
   return the pointer to the new block.  *PN is never set to zero, and
   the returned pointer is never null.  */

void *
x2realloc (void *p, size_t *pn)
{
 805fd80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fd84:	89 3c 24             	mov    %edi,(%esp)
 805fd87:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fd8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fd8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fd93:	b9 c2 f0 00 00       	mov    $0xf0c2,%ecx
 805fd98:	e8 a3 04 00 00       	call   8060240 <__afl_maybe_log>
 805fd9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fda1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fda5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fda9:	8b 3c 24             	mov    (%esp),%edi
 805fdac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fdb0:	55                   	push   %ebp
 805fdb1:	57                   	push   %edi
 805fdb2:	56                   	push   %esi
 805fdb3:	53                   	push   %ebx
 805fdb4:	83 ec 18             	sub    $0x18,%esp
 805fdb7:	8b 7c 24 2c          	mov    0x2c(%esp),%edi
 805fdbb:	8b 6c 24 30          	mov    0x30(%esp),%ebp
  return x2nrealloc (p, pn+(lava_get(130))*(0x6c6175df==(lava_get(130))||0xdf75616c==(lava_get(130))), 1+(lava_get(227))*(0x6c61757e==(lava_get(227))||0x7e75616c==(lava_get(227))));
 805fdbf:	68 e3 00 00 00       	push   $0xe3
 805fdc4:	e8 07 3b ff ff       	call   80538d0 <lava_get>
 805fdc9:	c7 04 24 e3 00 00 00 	movl   $0xe3,(%esp)
 805fdd0:	89 c3                	mov    %eax,%ebx
 805fdd2:	e8 f9 3a ff ff       	call   80538d0 <lava_get>
 805fdd7:	83 c4 10             	add    $0x10,%esp
 805fdda:	3d 7e 75 61 6c       	cmp    $0x6c61757e,%eax
 805fddf:	ba 01 00 00 00       	mov    $0x1,%edx
 805fde4:	74 4c                	je     805fe32 <x2realloc+0xb2>
 805fde6:	66 90                	xchg   %ax,%ax
 805fde8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fdec:	89 3c 24             	mov    %edi,(%esp)
 805fdef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fdf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fdf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fdfb:	b9 50 32 00 00       	mov    $0x3250,%ecx
 805fe00:	e8 3b 04 00 00       	call   8060240 <__afl_maybe_log>
 805fe05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fe09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fe0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fe11:	8b 3c 24             	mov    (%esp),%edi
 805fe14:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fe18:	83 ec 0c             	sub    $0xc,%esp
 805fe1b:	68 e3 00 00 00       	push   $0xe3
 805fe20:	e8 ab 3a ff ff       	call   80538d0 <lava_get>
 805fe25:	31 d2                	xor    %edx,%edx
 805fe27:	83 c4 10             	add    $0x10,%esp
 805fe2a:	3d 6c 61 75 7e       	cmp    $0x7e75616c,%eax
 805fe2f:	0f 94 c2             	sete   %dl
 805fe32:	66 90                	xchg   %ax,%ax
 805fe34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fe38:	89 3c 24             	mov    %edi,(%esp)
 805fe3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fe3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fe43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fe47:	b9 37 78 00 00       	mov    $0x7837,%ecx
 805fe4c:	e8 ef 03 00 00       	call   8060240 <__afl_maybe_log>
 805fe51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fe55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fe59:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fe5d:	8b 3c 24             	mov    (%esp),%edi
 805fe60:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fe64:	83 ec 0c             	sub    $0xc,%esp
 805fe67:	0f af da             	imul   %edx,%ebx
 805fe6a:	68 82 00 00 00       	push   $0x82
 805fe6f:	e8 5c 3a ff ff       	call   80538d0 <lava_get>
 805fe74:	83 c3 01             	add    $0x1,%ebx
 805fe77:	c7 04 24 82 00 00 00 	movl   $0x82,(%esp)
 805fe7e:	89 c6                	mov    %eax,%esi
 805fe80:	e8 4b 3a ff ff       	call   80538d0 <lava_get>
 805fe85:	83 c4 10             	add    $0x10,%esp
 805fe88:	3d df 75 61 6c       	cmp    $0x6c6175df,%eax
 805fe8d:	ba 01 00 00 00       	mov    $0x1,%edx
 805fe92:	74 4a                	je     805fede <x2realloc+0x15e>
 805fe94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fe98:	89 3c 24             	mov    %edi,(%esp)
 805fe9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fe9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fea3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fea7:	b9 89 85 00 00       	mov    $0x8589,%ecx
 805feac:	e8 8f 03 00 00       	call   8060240 <__afl_maybe_log>
 805feb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805feb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805feb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805febd:	8b 3c 24             	mov    (%esp),%edi
 805fec0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fec4:	83 ec 0c             	sub    $0xc,%esp
 805fec7:	68 82 00 00 00       	push   $0x82
 805fecc:	e8 ff 39 ff ff       	call   80538d0 <lava_get>
 805fed1:	31 d2                	xor    %edx,%edx
 805fed3:	83 c4 10             	add    $0x10,%esp
 805fed6:	3d 6c 61 75 df       	cmp    $0xdf75616c,%eax
 805fedb:	0f 94 c2             	sete   %dl
 805fede:	66 90                	xchg   %ax,%ax
 805fee0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fee4:	89 3c 24             	mov    %edi,(%esp)
 805fee7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805feeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805feef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fef3:	b9 ed ac 00 00       	mov    $0xaced,%ecx
 805fef8:	e8 43 03 00 00       	call   8060240 <__afl_maybe_log>
 805fefd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ff01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ff05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ff09:	8b 3c 24             	mov    (%esp),%edi
 805ff0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ff10:	8d 0c b5 00 00 00 00 	lea    0x0(,%esi,4),%ecx
 805ff17:	0f af ca             	imul   %edx,%ecx
 805ff1a:	01 e9                	add    %ebp,%ecx
XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  size_t n = *pn;

  if (! p)
 805ff1c:	85 ff                	test   %edi,%edi
   */

XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  size_t n = *pn;
 805ff1e:	8b 31                	mov    (%ecx),%esi

  if (! p)
 805ff20:	0f 84 ca 00 00 00    	je     805fff0 <x2realloc+0x270>
 805ff26:	66 90                	xchg   %ax,%ax
 805ff28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ff2c:	89 3c 24             	mov    %edi,(%esp)
 805ff2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ff33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ff37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ff3b:	b9 1f da 00 00       	mov    $0xda1f,%ecx
 805ff40:	e8 fb 02 00 00       	call   8060240 <__afl_maybe_log>
 805ff45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ff49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ff4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ff51:	8b 3c 24             	mov    (%esp),%edi
 805ff54:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
 805ff58:	31 d2                	xor    %edx,%edx
 805ff5a:	b8 aa aa aa aa       	mov    $0xaaaaaaaa,%eax
 805ff5f:	f7 f3                	div    %ebx
 805ff61:	39 c6                	cmp    %eax,%esi
 805ff63:	0f 83 d3 00 00 00    	jae    806003c <x2realloc+0x2bc>
 805ff69:	8d 76 00             	lea    0x0(%esi),%esi
 805ff6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ff70:	89 3c 24             	mov    %edi,(%esp)
 805ff73:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ff77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ff7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ff7f:	b9 f8 84 00 00       	mov    $0x84f8,%ecx
 805ff84:	e8 b7 02 00 00       	call   8060240 <__afl_maybe_log>
 805ff89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ff8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ff91:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ff95:	8b 3c 24             	mov    (%esp),%edi
 805ff98:	8d 64 24 10          	lea    0x10(%esp),%esp
        xalloc_die ();
      n += n / 2 + 1;
 805ff9c:	89 f5                	mov    %esi,%ebp
 805ff9e:	d1 ed                	shr    %ebp
 805ffa0:	8d 74 35 01          	lea    0x1(%ebp,%esi,1),%esi
    }

  *pn = n;
  return xrealloc (p, n * s);
 805ffa4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ffa8:	89 3c 24             	mov    %edi,(%esp)
 805ffab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ffaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ffb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ffb7:	b9 0d f7 00 00       	mov    $0xf70d,%ecx
 805ffbc:	e8 7f 02 00 00       	call   8060240 <__afl_maybe_log>
 805ffc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ffc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ffc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ffcd:	8b 3c 24             	mov    (%esp),%edi
 805ffd0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ffd4:	0f af de             	imul   %esi,%ebx
      if ((size_t) -1 / 3 * 2 / s <= n)
        xalloc_die ();
      n += n / 2 + 1;
    }

  *pn = n;
 805ffd7:	89 31                	mov    %esi,(%ecx)
  return xrealloc (p, n * s);
 805ffd9:	89 7c 24 20          	mov    %edi,0x20(%esp)
 805ffdd:	89 5c 24 24          	mov    %ebx,0x24(%esp)
}
 805ffe1:	83 c4 0c             	add    $0xc,%esp
 805ffe4:	5b                   	pop    %ebx
 805ffe5:	5e                   	pop    %esi
 805ffe6:	5f                   	pop    %edi
 805ffe7:	5d                   	pop    %ebp
 805ffe8:	e9 43 f9 ff ff       	jmp    805f930 <xrealloc>
 805ffed:	8d 76 00             	lea    0x0(%esi),%esi
{
  size_t n = *pn;

  if (! p)
    {
      if (! n)
 805fff0:	85 f6                	test   %esi,%esi
 805fff2:	75 b0                	jne    805ffa4 <x2realloc+0x224>
 805fff4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fff8:	89 3c 24             	mov    %edi,(%esp)
 805fffb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ffff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060003:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060007:	b9 d8 0a 00 00       	mov    $0xad8,%ecx
 806000c:	e8 2f 02 00 00       	call   8060240 <__afl_maybe_log>
 8060011:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060015:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060019:	8b 54 24 04          	mov    0x4(%esp),%edx
 806001d:	8b 3c 24             	mov    (%esp),%edi
 8060020:	8d 64 24 10          	lea    0x10(%esp),%esp
             requests, when the invoking code specifies an old size of
             zero.  This is the largest "small" request for the GNU C
             library malloc.  */
          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };

          n = DEFAULT_MXFAST / s;
 8060024:	31 d2                	xor    %edx,%edx
 8060026:	b8 40 00 00 00       	mov    $0x40,%eax
 806002b:	f7 f3                	div    %ebx
          n += !n;
 806002d:	31 d2                	xor    %edx,%edx
 806002f:	85 c0                	test   %eax,%eax
 8060031:	0f 94 c2             	sete   %dl
 8060034:	8d 34 02             	lea    (%edx,%eax,1),%esi
 8060037:	e9 68 ff ff ff       	jmp    805ffa4 <x2realloc+0x224>
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
        xalloc_die ();
 806003c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060040:	89 3c 24             	mov    %edi,(%esp)
 8060043:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060047:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806004b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806004f:	b9 bb de 00 00       	mov    $0xdebb,%ecx
 8060054:	e8 e7 01 00 00       	call   8060240 <__afl_maybe_log>
 8060059:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806005d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060061:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060065:	8b 3c 24             	mov    (%esp),%edi
 8060068:	8d 64 24 10          	lea    0x10(%esp),%esp
 806006c:	e8 1f 03 00 00       	call   8060390 <xalloc_die>
 8060071:	eb 0d                	jmp    8060080 <xzalloc>
 8060073:	90                   	nop
 8060074:	90                   	nop
 8060075:	90                   	nop
 8060076:	90                   	nop
 8060077:	90                   	nop
 8060078:	90                   	nop
 8060079:	90                   	nop
 806007a:	90                   	nop
 806007b:	90                   	nop
 806007c:	90                   	nop
 806007d:	90                   	nop
 806007e:	90                   	nop
 806007f:	90                   	nop

08060080 <xzalloc>:
   There's no need for xnzalloc (N, S), since it would be equivalent
   to xcalloc (N, S).  */

void *
xzalloc (size_t s)
{
 8060080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060084:	89 3c 24             	mov    %edi,(%esp)
 8060087:	89 54 24 04          	mov    %edx,0x4(%esp)
 806008b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806008f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060093:	b9 2c 5f 00 00       	mov    $0x5f2c,%ecx
 8060098:	e8 a3 01 00 00       	call   8060240 <__afl_maybe_log>
 806009d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80600a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80600a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80600a9:	8b 3c 24             	mov    (%esp),%edi
 80600ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80600b0:	53                   	push   %ebx
 80600b1:	83 ec 14             	sub    $0x14,%esp
 80600b4:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  return memset (xmalloc (s), 0, s);
 80600b8:	53                   	push   %ebx
 80600b9:	e8 42 f6 ff ff       	call   805f700 <xmalloc>
 80600be:	83 c4 0c             	add    $0xc,%esp
 80600c1:	53                   	push   %ebx
 80600c2:	6a 00                	push   $0x0
 80600c4:	50                   	push   %eax
 80600c5:	e8 16 93 fe ff       	call   80493e0 <memset@plt>
}
 80600ca:	83 c4 18             	add    $0x18,%esp
 80600cd:	5b                   	pop    %ebx
 80600ce:	c3                   	ret    
 80600cf:	90                   	nop

080600d0 <xcalloc>:
/* Allocate zeroed memory for N elements of S bytes, with error
   checking.  S must be nonzero.  */

void *
xcalloc (size_t n, size_t s)
{
 80600d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80600d4:	89 3c 24             	mov    %edi,(%esp)
 80600d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80600db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80600df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80600e3:	b9 a8 88 00 00       	mov    $0x88a8,%ecx
 80600e8:	e8 53 01 00 00       	call   8060240 <__afl_maybe_log>
 80600ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80600f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80600f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80600f9:	8b 3c 24             	mov    (%esp),%edi
 80600fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060100:	83 ec 14             	sub    $0x14,%esp
  void *p;
  /* Test for overflow, since some calloc implementations don't have
     proper overflow checks.  But omit overflow and size-zero tests if
     HAVE_GNU_CALLOC, since GNU calloc catches overflow and never
     returns NULL if successful.  */
  if ((! HAVE_GNU_CALLOC && xalloc_oversized (n, s))
 8060103:	ff 74 24 1c          	pushl  0x1c(%esp)
 8060107:	ff 74 24 1c          	pushl  0x1c(%esp)
 806010b:	e8 40 94 fe ff       	call   8049550 <calloc@plt>
 8060110:	83 c4 10             	add    $0x10,%esp
 8060113:	85 c0                	test   %eax,%eax
 8060115:	74 35                	je     806014c <xcalloc+0x7c>
 8060117:	90                   	nop
 8060118:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806011c:	89 3c 24             	mov    %edi,(%esp)
 806011f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060123:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060127:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806012b:	b9 58 48 00 00       	mov    $0x4858,%ecx
 8060130:	e8 0b 01 00 00       	call   8060240 <__afl_maybe_log>
 8060135:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060139:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806013d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060141:	8b 3c 24             	mov    (%esp),%edi
 8060144:	8d 64 24 10          	lea    0x10(%esp),%esp
      || (! (p = calloc (n, s)) && (HAVE_GNU_CALLOC || n != 0)))
    xalloc_die ();
  return p;
}
 8060148:	83 c4 0c             	add    $0xc,%esp
 806014b:	c3                   	ret    
     proper overflow checks.  But omit overflow and size-zero tests if
     HAVE_GNU_CALLOC, since GNU calloc catches overflow and never
     returns NULL if successful.  */
  if ((! HAVE_GNU_CALLOC && xalloc_oversized (n, s))
      || (! (p = calloc (n, s)) && (HAVE_GNU_CALLOC || n != 0)))
    xalloc_die ();
 806014c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060150:	89 3c 24             	mov    %edi,(%esp)
 8060153:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806015b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806015f:	b9 fa 7a 00 00       	mov    $0x7afa,%ecx
 8060164:	e8 d7 00 00 00       	call   8060240 <__afl_maybe_log>
 8060169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806016d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060171:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060175:	8b 3c 24             	mov    (%esp),%edi
 8060178:	8d 64 24 10          	lea    0x10(%esp),%esp
 806017c:	e8 0f 02 00 00       	call   8060390 <xalloc_die>
 8060181:	eb 0d                	jmp    8060190 <xmemdup>
 8060183:	90                   	nop
 8060184:	90                   	nop
 8060185:	90                   	nop
 8060186:	90                   	nop
 8060187:	90                   	nop
 8060188:	90                   	nop
 8060189:	90                   	nop
 806018a:	90                   	nop
 806018b:	90                   	nop
 806018c:	90                   	nop
 806018d:	90                   	nop
 806018e:	90                   	nop
 806018f:	90                   	nop

08060190 <xmemdup>:
   for xnmemdup (P, N, S), since xmemdup (P, N * S) works without any
   need for an arithmetic overflow check.  */

void *
xmemdup (void const *p, size_t s)
{
 8060190:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060194:	89 3c 24             	mov    %edi,(%esp)
 8060197:	89 54 24 04          	mov    %edx,0x4(%esp)
 806019b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806019f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80601a3:	b9 83 67 00 00       	mov    $0x6783,%ecx
 80601a8:	e8 93 00 00 00       	call   8060240 <__afl_maybe_log>
 80601ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80601b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80601b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80601b9:	8b 3c 24             	mov    (%esp),%edi
 80601bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80601c0:	53                   	push   %ebx
 80601c1:	83 ec 14             	sub    $0x14,%esp
 80601c4:	8b 5c 24 20          	mov    0x20(%esp),%ebx
  return memcpy (xmalloc (s), p, s);
 80601c8:	53                   	push   %ebx
 80601c9:	e8 32 f5 ff ff       	call   805f700 <xmalloc>

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 80601ce:	83 c4 0c             	add    $0xc,%esp
 80601d1:	53                   	push   %ebx
 80601d2:	ff 74 24 18          	pushl  0x18(%esp)
 80601d6:	50                   	push   %eax
 80601d7:	e8 d4 8f fe ff       	call   80491b0 <memcpy@plt>
}
 80601dc:	83 c4 18             	add    $0x18,%esp
 80601df:	5b                   	pop    %ebx
 80601e0:	c3                   	ret    
 80601e1:	eb 0d                	jmp    80601f0 <xstrdup>
 80601e3:	90                   	nop
 80601e4:	90                   	nop
 80601e5:	90                   	nop
 80601e6:	90                   	nop
 80601e7:	90                   	nop
 80601e8:	90                   	nop
 80601e9:	90                   	nop
 80601ea:	90                   	nop
 80601eb:	90                   	nop
 80601ec:	90                   	nop
 80601ed:	90                   	nop
 80601ee:	90                   	nop
 80601ef:	90                   	nop

080601f0 <xstrdup>:

/* Clone STRING.  */

char *
xstrdup (char const *string)
{
 80601f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80601f4:	89 3c 24             	mov    %edi,(%esp)
 80601f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80601fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80601ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060203:	b9 cb 63 00 00       	mov    $0x63cb,%ecx
 8060208:	e8 33 00 00 00       	call   8060240 <__afl_maybe_log>
 806020d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060211:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060215:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060219:	8b 3c 24             	mov    (%esp),%edi
 806021c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060220:	53                   	push   %ebx
 8060221:	83 ec 14             	sub    $0x14,%esp
 8060224:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  return xmemdup (string, strlen (string) + 1);
 8060228:	53                   	push   %ebx
 8060229:	e8 72 91 fe ff       	call   80493a0 <strlen@plt>
 806022e:	5a                   	pop    %edx
 806022f:	59                   	pop    %ecx
 8060230:	83 c0 01             	add    $0x1,%eax
 8060233:	50                   	push   %eax
 8060234:	53                   	push   %ebx
 8060235:	e8 56 ff ff ff       	call   8060190 <xmemdup>
}
 806023a:	83 c4 18             	add    $0x18,%esp
 806023d:	5b                   	pop    %ebx
 806023e:	c3                   	ret    
 806023f:	90                   	nop

08060240 <__afl_maybe_log>:
 8060240:	9f                   	lahf   
 8060241:	0f 90 c0             	seto   %al
 8060244:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 806024a:	85 d2                	test   %edx,%edx
 806024c:	74 22                	je     8060270 <__afl_setup>

0806024e <__afl_store>:
 806024e:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8060254:	31 cf                	xor    %ecx,%edi
 8060256:	d1 e9                	shr    %ecx
 8060258:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 806025e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8060262:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08060266 <__afl_return>:
 8060266:	04 7f                	add    $0x7f,%al
 8060268:	9e                   	sahf   
 8060269:	c3                   	ret    
 806026a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08060270 <__afl_setup>:
 8060270:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8060277:	75 ed                	jne    8060266 <__afl_return>
 8060279:	50                   	push   %eax
 806027a:	51                   	push   %ecx
 806027b:	68 78 03 06 08       	push   $0x8060378
 8060280:	e8 5b 90 fe ff       	call   80492e0 <getenv@plt>
 8060285:	83 c4 04             	add    $0x4,%esp
 8060288:	85 c0                	test   %eax,%eax
 806028a:	0f 84 db 00 00 00    	je     806036b <__afl_setup_abort>
 8060290:	50                   	push   %eax
 8060291:	e8 0a 92 fe ff       	call   80494a0 <atoi@plt>
 8060296:	83 c4 04             	add    $0x4,%esp
 8060299:	6a 00                	push   $0x0
 806029b:	6a 00                	push   $0x0
 806029d:	50                   	push   %eax
 806029e:	e8 7d 8f fe ff       	call   8049220 <shmat@plt>
 80602a3:	83 c4 0c             	add    $0xc,%esp
 80602a6:	83 f8 ff             	cmp    $0xffffffff,%eax
 80602a9:	0f 84 bc 00 00 00    	je     806036b <__afl_setup_abort>
 80602af:	c6 00 01             	movb   $0x1,(%eax)
 80602b2:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 80602b7:	89 c2                	mov    %eax,%edx
 80602b9:	59                   	pop    %ecx
 80602ba:	58                   	pop    %eax

080602bb <__afl_forkserver>:
 80602bb:	50                   	push   %eax
 80602bc:	51                   	push   %ecx
 80602bd:	52                   	push   %edx
 80602be:	6a 04                	push   $0x4
 80602c0:	68 e0 ad 43 08       	push   $0x843ade0
 80602c5:	68 c7 00 00 00       	push   $0xc7
 80602ca:	e8 01 91 fe ff       	call   80493d0 <write@plt>
 80602cf:	83 c4 0c             	add    $0xc,%esp
 80602d2:	83 f8 04             	cmp    $0x4,%eax
 80602d5:	75 6e                	jne    8060345 <__afl_fork_resume>

080602d7 <__afl_fork_wait_loop>:
 80602d7:	6a 04                	push   $0x4
 80602d9:	68 e0 ad 43 08       	push   $0x843ade0
 80602de:	68 c6 00 00 00       	push   $0xc6
 80602e3:	e8 78 8e fe ff       	call   8049160 <read@plt>
 80602e8:	83 c4 0c             	add    $0xc,%esp
 80602eb:	83 f8 04             	cmp    $0x4,%eax
 80602ee:	75 74                	jne    8060364 <__afl_die>
 80602f0:	e8 4b 91 fe ff       	call   8049440 <fork@plt>
 80602f5:	83 f8 00             	cmp    $0x0,%eax
 80602f8:	7c 6a                	jl     8060364 <__afl_die>
 80602fa:	74 49                	je     8060345 <__afl_fork_resume>
 80602fc:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8060301:	6a 04                	push   $0x4
 8060303:	68 40 ae 43 08       	push   $0x843ae40
 8060308:	68 c7 00 00 00       	push   $0xc7
 806030d:	e8 be 90 fe ff       	call   80493d0 <write@plt>
 8060312:	83 c4 0c             	add    $0xc,%esp
 8060315:	6a 00                	push   $0x0
 8060317:	68 e0 ad 43 08       	push   $0x843ade0
 806031c:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8060322:	e8 49 8f fe ff       	call   8049270 <waitpid@plt>
 8060327:	83 c4 0c             	add    $0xc,%esp
 806032a:	83 f8 00             	cmp    $0x0,%eax
 806032d:	7e 35                	jle    8060364 <__afl_die>
 806032f:	6a 04                	push   $0x4
 8060331:	68 e0 ad 43 08       	push   $0x843ade0
 8060336:	68 c7 00 00 00       	push   $0xc7
 806033b:	e8 90 90 fe ff       	call   80493d0 <write@plt>
 8060340:	83 c4 0c             	add    $0xc,%esp
 8060343:	eb 92                	jmp    80602d7 <__afl_fork_wait_loop>

08060345 <__afl_fork_resume>:
 8060345:	68 c6 00 00 00       	push   $0xc6
 806034a:	e8 d1 91 fe ff       	call   8049520 <close@plt>
 806034f:	68 c7 00 00 00       	push   $0xc7
 8060354:	e8 c7 91 fe ff       	call   8049520 <close@plt>
 8060359:	83 c4 08             	add    $0x8,%esp
 806035c:	5a                   	pop    %edx
 806035d:	59                   	pop    %ecx
 806035e:	58                   	pop    %eax
 806035f:	e9 ea fe ff ff       	jmp    806024e <__afl_store>

08060364 <__afl_die>:
 8060364:	31 c0                	xor    %eax,%eax
 8060366:	e8 25 8e fe ff       	call   8049190 <_exit@plt>

0806036b <__afl_setup_abort>:
 806036b:	fe 05 60 ae 43 08    	incb   0x843ae60
 8060371:	59                   	pop    %ecx
 8060372:	58                   	pop    %eax
 8060373:	e9 ee fe ff ff       	jmp    8060266 <__afl_return>

08060378 <.AFL_SHM_ENV>:
 8060378:	5f                   	pop    %edi
 8060379:	5f                   	pop    %edi
 806037a:	41                   	inc    %ecx
 806037b:	46                   	inc    %esi
 806037c:	4c                   	dec    %esp
 806037d:	5f                   	pop    %edi
 806037e:	53                   	push   %ebx
 806037f:	48                   	dec    %eax
 8060380:	4d                   	dec    %ebp
 8060381:	5f                   	pop    %edi
 8060382:	49                   	dec    %ecx
 8060383:	44                   	inc    %esp
 8060384:	00 66 90             	add    %ah,-0x70(%esi)
 8060387:	66 90                	xchg   %ax,%ax
 8060389:	66 90                	xchg   %ax,%ax
 806038b:	66 90                	xchg   %ax,%ax
 806038d:	66 90                	xchg   %ax,%ax
 806038f:	90                   	nop

08060390 <xalloc_die>:
#include "gettext.h"
#define _(msgid) gettext (msgid)

void
xalloc_die (void)
{
 8060390:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060394:	89 3c 24             	mov    %edi,(%esp)
 8060397:	89 54 24 04          	mov    %edx,0x4(%esp)
 806039b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806039f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80603a3:	b9 2f e8 00 00       	mov    $0xe82f,%ecx
 80603a8:	e8 43 00 00 00       	call   80603f0 <__afl_maybe_log>
 80603ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80603b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80603b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80603b9:	8b 3c 24             	mov    (%esp),%edi
 80603bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80603c0:	83 ec 10             	sub    $0x10,%esp
  error (exit_failure, 0, "%s", _("memory exhausted"));
 80603c3:	6a 05                	push   $0x5
 80603c5:	68 cf 6d 06 08       	push   $0x8066dcf
 80603ca:	6a 00                	push   $0x0
 80603cc:	e8 3f 8e fe ff       	call   8049210 <dcgettext@plt>
 80603d1:	8b 15 50 a2 06 08    	mov    0x806a250,%edx
 80603d7:	50                   	push   %eax
 80603d8:	68 ac 66 06 08       	push   $0x80666ac
 80603dd:	6a 00                	push   $0x0
 80603df:	52                   	push   %edx
 80603e0:	e8 db 8e fe ff       	call   80492c0 <error@plt>

  /* _Noreturn cannot be given to error, since it may return if
     its first argument is 0.  To help compilers understand the
     xalloc_die does not return, call abort.  Also, the abort is a
     safety feature if exit_failure is 0 (which shouldn't happen).  */
  abort ();
 80603e5:	83 c4 20             	add    $0x20,%esp
 80603e8:	e8 13 91 fe ff       	call   8049500 <abort@plt>
 80603ed:	8d 76 00             	lea    0x0(%esi),%esi

080603f0 <__afl_maybe_log>:
 80603f0:	9f                   	lahf   
 80603f1:	0f 90 c0             	seto   %al
 80603f4:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 80603fa:	85 d2                	test   %edx,%edx
 80603fc:	74 22                	je     8060420 <__afl_setup>

080603fe <__afl_store>:
 80603fe:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8060404:	31 cf                	xor    %ecx,%edi
 8060406:	d1 e9                	shr    %ecx
 8060408:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 806040e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8060412:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08060416 <__afl_return>:
 8060416:	04 7f                	add    $0x7f,%al
 8060418:	9e                   	sahf   
 8060419:	c3                   	ret    
 806041a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08060420 <__afl_setup>:
 8060420:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8060427:	75 ed                	jne    8060416 <__afl_return>
 8060429:	50                   	push   %eax
 806042a:	51                   	push   %ecx
 806042b:	68 28 05 06 08       	push   $0x8060528
 8060430:	e8 ab 8e fe ff       	call   80492e0 <getenv@plt>
 8060435:	83 c4 04             	add    $0x4,%esp
 8060438:	85 c0                	test   %eax,%eax
 806043a:	0f 84 db 00 00 00    	je     806051b <__afl_setup_abort>
 8060440:	50                   	push   %eax
 8060441:	e8 5a 90 fe ff       	call   80494a0 <atoi@plt>
 8060446:	83 c4 04             	add    $0x4,%esp
 8060449:	6a 00                	push   $0x0
 806044b:	6a 00                	push   $0x0
 806044d:	50                   	push   %eax
 806044e:	e8 cd 8d fe ff       	call   8049220 <shmat@plt>
 8060453:	83 c4 0c             	add    $0xc,%esp
 8060456:	83 f8 ff             	cmp    $0xffffffff,%eax
 8060459:	0f 84 bc 00 00 00    	je     806051b <__afl_setup_abort>
 806045f:	c6 00 01             	movb   $0x1,(%eax)
 8060462:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8060467:	89 c2                	mov    %eax,%edx
 8060469:	59                   	pop    %ecx
 806046a:	58                   	pop    %eax

0806046b <__afl_forkserver>:
 806046b:	50                   	push   %eax
 806046c:	51                   	push   %ecx
 806046d:	52                   	push   %edx
 806046e:	6a 04                	push   $0x4
 8060470:	68 e0 ad 43 08       	push   $0x843ade0
 8060475:	68 c7 00 00 00       	push   $0xc7
 806047a:	e8 51 8f fe ff       	call   80493d0 <write@plt>
 806047f:	83 c4 0c             	add    $0xc,%esp
 8060482:	83 f8 04             	cmp    $0x4,%eax
 8060485:	75 6e                	jne    80604f5 <__afl_fork_resume>

08060487 <__afl_fork_wait_loop>:
 8060487:	6a 04                	push   $0x4
 8060489:	68 e0 ad 43 08       	push   $0x843ade0
 806048e:	68 c6 00 00 00       	push   $0xc6
 8060493:	e8 c8 8c fe ff       	call   8049160 <read@plt>
 8060498:	83 c4 0c             	add    $0xc,%esp
 806049b:	83 f8 04             	cmp    $0x4,%eax
 806049e:	75 74                	jne    8060514 <__afl_die>
 80604a0:	e8 9b 8f fe ff       	call   8049440 <fork@plt>
 80604a5:	83 f8 00             	cmp    $0x0,%eax
 80604a8:	7c 6a                	jl     8060514 <__afl_die>
 80604aa:	74 49                	je     80604f5 <__afl_fork_resume>
 80604ac:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 80604b1:	6a 04                	push   $0x4
 80604b3:	68 40 ae 43 08       	push   $0x843ae40
 80604b8:	68 c7 00 00 00       	push   $0xc7
 80604bd:	e8 0e 8f fe ff       	call   80493d0 <write@plt>
 80604c2:	83 c4 0c             	add    $0xc,%esp
 80604c5:	6a 00                	push   $0x0
 80604c7:	68 e0 ad 43 08       	push   $0x843ade0
 80604cc:	ff 35 40 ae 43 08    	pushl  0x843ae40
 80604d2:	e8 99 8d fe ff       	call   8049270 <waitpid@plt>
 80604d7:	83 c4 0c             	add    $0xc,%esp
 80604da:	83 f8 00             	cmp    $0x0,%eax
 80604dd:	7e 35                	jle    8060514 <__afl_die>
 80604df:	6a 04                	push   $0x4
 80604e1:	68 e0 ad 43 08       	push   $0x843ade0
 80604e6:	68 c7 00 00 00       	push   $0xc7
 80604eb:	e8 e0 8e fe ff       	call   80493d0 <write@plt>
 80604f0:	83 c4 0c             	add    $0xc,%esp
 80604f3:	eb 92                	jmp    8060487 <__afl_fork_wait_loop>

080604f5 <__afl_fork_resume>:
 80604f5:	68 c6 00 00 00       	push   $0xc6
 80604fa:	e8 21 90 fe ff       	call   8049520 <close@plt>
 80604ff:	68 c7 00 00 00       	push   $0xc7
 8060504:	e8 17 90 fe ff       	call   8049520 <close@plt>
 8060509:	83 c4 08             	add    $0x8,%esp
 806050c:	5a                   	pop    %edx
 806050d:	59                   	pop    %ecx
 806050e:	58                   	pop    %eax
 806050f:	e9 ea fe ff ff       	jmp    80603fe <__afl_store>

08060514 <__afl_die>:
 8060514:	31 c0                	xor    %eax,%eax
 8060516:	e8 75 8c fe ff       	call   8049190 <_exit@plt>

0806051b <__afl_setup_abort>:
 806051b:	fe 05 60 ae 43 08    	incb   0x843ae60
 8060521:	59                   	pop    %ecx
 8060522:	58                   	pop    %eax
 8060523:	e9 ee fe ff ff       	jmp    8060416 <__afl_return>

08060528 <.AFL_SHM_ENV>:
 8060528:	5f                   	pop    %edi
 8060529:	5f                   	pop    %edi
 806052a:	41                   	inc    %ecx
 806052b:	46                   	inc    %esi
 806052c:	4c                   	dec    %esp
 806052d:	5f                   	pop    %edi
 806052e:	53                   	push   %ebx
 806052f:	48                   	dec    %eax
 8060530:	4d                   	dec    %ebp
 8060531:	5f                   	pop    %edi
 8060532:	49                   	dec    %ecx
 8060533:	44                   	inc    %esp
 8060534:	00 66 90             	add    %ah,-0x70(%esi)
 8060537:	66 90                	xchg   %ax,%ax
 8060539:	66 90                	xchg   %ax,%ax
 806053b:	66 90                	xchg   %ax,%ax
 806053d:	66 90                	xchg   %ax,%ax
 806053f:	90                   	nop

08060540 <collate_error>:

static void
collate_error (int collation_errno,
               char const *s1, size_t s1len,
               char const *s2, size_t s2len)
{
 8060540:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060544:	89 3c 24             	mov    %edi,(%esp)
 8060547:	89 54 24 04          	mov    %edx,0x4(%esp)
 806054b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806054f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060553:	b9 4b 73 00 00       	mov    $0x734b,%ecx
 8060558:	e8 7b 02 00 00       	call   80607d8 <__afl_maybe_log>
 806055d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060561:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060565:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060569:	8b 3c 24             	mov    (%esp),%edi
 806056c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060570:	57                   	push   %edi
 8060571:	56                   	push   %esi
 8060572:	89 cf                	mov    %ecx,%edi
 8060574:	53                   	push   %ebx
 8060575:	89 c6                	mov    %eax,%esi
 8060577:	89 d3                	mov    %edx,%ebx
  error (0, collation_errno, _("string comparison failed"));
 8060579:	83 ec 04             	sub    $0x4,%esp
 806057c:	6a 05                	push   $0x5
 806057e:	68 e0 6d 06 08       	push   $0x8066de0
 8060583:	6a 00                	push   $0x0
 8060585:	e8 86 8c fe ff       	call   8049210 <dcgettext@plt>
 806058a:	83 c4 0c             	add    $0xc,%esp
 806058d:	50                   	push   %eax
 806058e:	56                   	push   %esi
 806058f:	6a 00                	push   $0x0
 8060591:	e8 2a 8d fe ff       	call   80492c0 <error@plt>
  error (0, 0, _("Set LC_ALL='C' to work around the problem."));
 8060596:	83 c4 0c             	add    $0xc,%esp
 8060599:	6a 05                	push   $0x5
 806059b:	68 fc 6d 06 08       	push   $0x8066dfc
 80605a0:	6a 00                	push   $0x0
 80605a2:	e8 69 8c fe ff       	call   8049210 <dcgettext@plt>
 80605a7:	83 c4 0c             	add    $0xc,%esp
 80605aa:	50                   	push   %eax
 80605ab:	6a 00                	push   $0x0
 80605ad:	6a 00                	push   $0x0
 80605af:	e8 0c 8d fe ff       	call   80492c0 <error@plt>
  error (exit_failure, 0,
 80605b4:	ff 74 24 24          	pushl  0x24(%esp)
 80605b8:	ff 74 24 24          	pushl  0x24(%esp)
 80605bc:	6a 06                	push   $0x6
 80605be:	6a 01                	push   $0x1
 80605c0:	e8 2b de ff ff       	call   805e3f0 <quotearg_n_style_mem>
 80605c5:	83 c4 20             	add    $0x20,%esp
 80605c8:	89 c6                	mov    %eax,%esi
 80605ca:	57                   	push   %edi
 80605cb:	53                   	push   %ebx
 80605cc:	6a 06                	push   $0x6
 80605ce:	6a 00                	push   $0x0
 80605d0:	e8 1b de ff ff       	call   805e3f0 <quotearg_n_style_mem>
         _("The strings compared were %s and %s."),
 80605d5:	83 c4 0c             	add    $0xc,%esp
               char const *s1, size_t s1len,
               char const *s2, size_t s2len)
{
  error (0, collation_errno, _("string comparison failed"));
  error (0, 0, _("Set LC_ALL='C' to work around the problem."));
  error (exit_failure, 0,
 80605d8:	89 c3                	mov    %eax,%ebx
         _("The strings compared were %s and %s."),
 80605da:	6a 05                	push   $0x5
 80605dc:	68 28 6e 06 08       	push   $0x8066e28
 80605e1:	6a 00                	push   $0x0
 80605e3:	e8 28 8c fe ff       	call   8049210 <dcgettext@plt>
               char const *s1, size_t s1len,
               char const *s2, size_t s2len)
{
  error (0, collation_errno, _("string comparison failed"));
  error (0, 0, _("Set LC_ALL='C' to work around the problem."));
  error (exit_failure, 0,
 80605e8:	8b 15 50 a2 06 08    	mov    0x806a250,%edx
 80605ee:	89 34 24             	mov    %esi,(%esp)
 80605f1:	53                   	push   %ebx
 80605f2:	50                   	push   %eax
 80605f3:	6a 00                	push   $0x0
 80605f5:	52                   	push   %edx
 80605f6:	e8 c5 8c fe ff       	call   80492c0 <error@plt>
 80605fb:	83 c4 20             	add    $0x20,%esp
         _("The strings compared were %s and %s."),
         quotearg_n_style_mem (0, locale_quoting_style, s1, s1len),
         quotearg_n_style_mem (1, locale_quoting_style, s2, s2len));
}
 80605fe:	5b                   	pop    %ebx
 80605ff:	5e                   	pop    %esi
 8060600:	5f                   	pop    %edi
 8060601:	c3                   	ret    
 8060602:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8060609:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08060610 <xmemcoll>:
   restore their original contents before returning.  Report an error
   and exit if there is an error.  */

int
xmemcoll (char *s1, size_t s1len, char *s2, size_t s2len)
{
 8060610:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060614:	89 3c 24             	mov    %edi,(%esp)
 8060617:	89 54 24 04          	mov    %edx,0x4(%esp)
 806061b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806061f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060623:	b9 da 6b 00 00       	mov    $0x6bda,%ecx
 8060628:	e8 ab 01 00 00       	call   80607d8 <__afl_maybe_log>
 806062d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060631:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060635:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060639:	8b 3c 24             	mov    (%esp),%edi
 806063c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060640:	55                   	push   %ebp
 8060641:	57                   	push   %edi
 8060642:	56                   	push   %esi
 8060643:	53                   	push   %ebx
 8060644:	83 ec 0c             	sub    $0xc,%esp
 8060647:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 806064b:	8b 74 24 28          	mov    0x28(%esp),%esi
 806064f:	8b 7c 24 2c          	mov    0x2c(%esp),%edi
  int diff = memcoll (s1, s1len, s2, s2len);
 8060653:	57                   	push   %edi
 8060654:	56                   	push   %esi
 8060655:	53                   	push   %ebx
 8060656:	ff 74 24 2c          	pushl  0x2c(%esp)
 806065a:	e8 c1 4f 00 00       	call   8065620 <memcoll>
 806065f:	89 c5                	mov    %eax,%ebp
  int collation_errno = errno;
 8060661:	e8 9a 8d fe ff       	call   8049400 <__errno_location@plt>
 8060666:	8b 00                	mov    (%eax),%eax
  if (collation_errno)
 8060668:	83 c4 10             	add    $0x10,%esp
 806066b:	85 c0                	test   %eax,%eax
 806066d:	74 44                	je     80606b3 <xmemcoll+0xa3>
 806066f:	90                   	nop
 8060670:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060674:	89 3c 24             	mov    %edi,(%esp)
 8060677:	89 54 24 04          	mov    %edx,0x4(%esp)
 806067b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806067f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060683:	b9 01 14 00 00       	mov    $0x1401,%ecx
 8060688:	e8 4b 01 00 00       	call   80607d8 <__afl_maybe_log>
 806068d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060691:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060695:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060699:	8b 3c 24             	mov    (%esp),%edi
 806069c:	8d 64 24 10          	lea    0x10(%esp),%esp
    collate_error (collation_errno, s1, s1len, s2, s2len);
 80606a0:	83 ec 08             	sub    $0x8,%esp
 80606a3:	89 d9                	mov    %ebx,%ecx
 80606a5:	57                   	push   %edi
 80606a6:	56                   	push   %esi
 80606a7:	8b 54 24 30          	mov    0x30(%esp),%edx
 80606ab:	e8 90 fe ff ff       	call   8060540 <collate_error>
 80606b0:	83 c4 10             	add    $0x10,%esp
 80606b3:	90                   	nop
  return diff;
}
 80606b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80606b8:	89 3c 24             	mov    %edi,(%esp)
 80606bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80606bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80606c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80606c7:	b9 fb 38 00 00       	mov    $0x38fb,%ecx
 80606cc:	e8 07 01 00 00       	call   80607d8 <__afl_maybe_log>
 80606d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80606d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80606d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80606dd:	8b 3c 24             	mov    (%esp),%edi
 80606e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80606e4:	83 c4 0c             	add    $0xc,%esp
 80606e7:	89 e8                	mov    %ebp,%eax
 80606e9:	5b                   	pop    %ebx
 80606ea:	5e                   	pop    %esi
 80606eb:	5f                   	pop    %edi
 80606ec:	5d                   	pop    %ebp
 80606ed:	c3                   	ret    
 80606ee:	66 90                	xchg   %ax,%ax

080606f0 <xmemcoll0>:
   according to the LC_COLLATE locale.  S1SIZE and S2SIZE must be > 0.
   Report an error and exit if there is an error.  */

int
xmemcoll0 (char const *s1, size_t s1size, char const *s2, size_t s2size)
{
 80606f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80606f4:	89 3c 24             	mov    %edi,(%esp)
 80606f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80606fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80606ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060703:	b9 0c f1 00 00       	mov    $0xf10c,%ecx
 8060708:	e8 cb 00 00 00       	call   80607d8 <__afl_maybe_log>
 806070d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060711:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060715:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060719:	8b 3c 24             	mov    (%esp),%edi
 806071c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060720:	55                   	push   %ebp
 8060721:	57                   	push   %edi
 8060722:	56                   	push   %esi
 8060723:	53                   	push   %ebx
 8060724:	83 ec 0c             	sub    $0xc,%esp
 8060727:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 806072b:	8b 7c 24 28          	mov    0x28(%esp),%edi
 806072f:	8b 74 24 2c          	mov    0x2c(%esp),%esi
  int diff = memcoll0 (s1, s1size, s2, s2size);
 8060733:	56                   	push   %esi
 8060734:	57                   	push   %edi
 8060735:	53                   	push   %ebx
 8060736:	ff 74 24 2c          	pushl  0x2c(%esp)
 806073a:	e8 51 50 00 00       	call   8065790 <memcoll0>
 806073f:	89 c5                	mov    %eax,%ebp
  int collation_errno = errno;
 8060741:	e8 ba 8c fe ff       	call   8049400 <__errno_location@plt>
 8060746:	8b 00                	mov    (%eax),%eax
  if (collation_errno)
 8060748:	83 c4 10             	add    $0x10,%esp
 806074b:	85 c0                	test   %eax,%eax
 806074d:	74 48                	je     8060797 <xmemcoll0+0xa7>
 806074f:	90                   	nop
 8060750:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060754:	89 3c 24             	mov    %edi,(%esp)
 8060757:	89 54 24 04          	mov    %edx,0x4(%esp)
 806075b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806075f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060763:	b9 64 63 00 00       	mov    $0x6364,%ecx
 8060768:	e8 6b 00 00 00       	call   80607d8 <__afl_maybe_log>
 806076d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060771:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060775:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060779:	8b 3c 24             	mov    (%esp),%edi
 806077c:	8d 64 24 10          	lea    0x10(%esp),%esp
    collate_error (collation_errno, s1, s1size - 1, s2, s2size - 1);
 8060780:	83 ec 08             	sub    $0x8,%esp
 8060783:	83 ee 01             	sub    $0x1,%esi
 8060786:	8d 4b ff             	lea    -0x1(%ebx),%ecx
 8060789:	56                   	push   %esi
 806078a:	57                   	push   %edi
 806078b:	8b 54 24 30          	mov    0x30(%esp),%edx
 806078f:	e8 ac fd ff ff       	call   8060540 <collate_error>
 8060794:	83 c4 10             	add    $0x10,%esp
 8060797:	90                   	nop
  return diff;
}
 8060798:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806079c:	89 3c 24             	mov    %edi,(%esp)
 806079f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80607a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80607a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80607ab:	b9 bf 67 00 00       	mov    $0x67bf,%ecx
 80607b0:	e8 23 00 00 00       	call   80607d8 <__afl_maybe_log>
 80607b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80607b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80607bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80607c1:	8b 3c 24             	mov    (%esp),%edi
 80607c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80607c8:	83 c4 0c             	add    $0xc,%esp
 80607cb:	89 e8                	mov    %ebp,%eax
 80607cd:	5b                   	pop    %ebx
 80607ce:	5e                   	pop    %esi
 80607cf:	5f                   	pop    %edi
 80607d0:	5d                   	pop    %ebp
 80607d1:	c3                   	ret    
 80607d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080607d8 <__afl_maybe_log>:
 80607d8:	9f                   	lahf   
 80607d9:	0f 90 c0             	seto   %al
 80607dc:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 80607e2:	85 d2                	test   %edx,%edx
 80607e4:	74 22                	je     8060808 <__afl_setup>

080607e6 <__afl_store>:
 80607e6:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 80607ec:	31 cf                	xor    %ecx,%edi
 80607ee:	d1 e9                	shr    %ecx
 80607f0:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 80607f6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80607fa:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080607fe <__afl_return>:
 80607fe:	04 7f                	add    $0x7f,%al
 8060800:	9e                   	sahf   
 8060801:	c3                   	ret    
 8060802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08060808 <__afl_setup>:
 8060808:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 806080f:	75 ed                	jne    80607fe <__afl_return>
 8060811:	50                   	push   %eax
 8060812:	51                   	push   %ecx
 8060813:	68 10 09 06 08       	push   $0x8060910
 8060818:	e8 c3 8a fe ff       	call   80492e0 <getenv@plt>
 806081d:	83 c4 04             	add    $0x4,%esp
 8060820:	85 c0                	test   %eax,%eax
 8060822:	0f 84 db 00 00 00    	je     8060903 <__afl_setup_abort>
 8060828:	50                   	push   %eax
 8060829:	e8 72 8c fe ff       	call   80494a0 <atoi@plt>
 806082e:	83 c4 04             	add    $0x4,%esp
 8060831:	6a 00                	push   $0x0
 8060833:	6a 00                	push   $0x0
 8060835:	50                   	push   %eax
 8060836:	e8 e5 89 fe ff       	call   8049220 <shmat@plt>
 806083b:	83 c4 0c             	add    $0xc,%esp
 806083e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8060841:	0f 84 bc 00 00 00    	je     8060903 <__afl_setup_abort>
 8060847:	c6 00 01             	movb   $0x1,(%eax)
 806084a:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 806084f:	89 c2                	mov    %eax,%edx
 8060851:	59                   	pop    %ecx
 8060852:	58                   	pop    %eax

08060853 <__afl_forkserver>:
 8060853:	50                   	push   %eax
 8060854:	51                   	push   %ecx
 8060855:	52                   	push   %edx
 8060856:	6a 04                	push   $0x4
 8060858:	68 e0 ad 43 08       	push   $0x843ade0
 806085d:	68 c7 00 00 00       	push   $0xc7
 8060862:	e8 69 8b fe ff       	call   80493d0 <write@plt>
 8060867:	83 c4 0c             	add    $0xc,%esp
 806086a:	83 f8 04             	cmp    $0x4,%eax
 806086d:	75 6e                	jne    80608dd <__afl_fork_resume>

0806086f <__afl_fork_wait_loop>:
 806086f:	6a 04                	push   $0x4
 8060871:	68 e0 ad 43 08       	push   $0x843ade0
 8060876:	68 c6 00 00 00       	push   $0xc6
 806087b:	e8 e0 88 fe ff       	call   8049160 <read@plt>
 8060880:	83 c4 0c             	add    $0xc,%esp
 8060883:	83 f8 04             	cmp    $0x4,%eax
 8060886:	75 74                	jne    80608fc <__afl_die>
 8060888:	e8 b3 8b fe ff       	call   8049440 <fork@plt>
 806088d:	83 f8 00             	cmp    $0x0,%eax
 8060890:	7c 6a                	jl     80608fc <__afl_die>
 8060892:	74 49                	je     80608dd <__afl_fork_resume>
 8060894:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8060899:	6a 04                	push   $0x4
 806089b:	68 40 ae 43 08       	push   $0x843ae40
 80608a0:	68 c7 00 00 00       	push   $0xc7
 80608a5:	e8 26 8b fe ff       	call   80493d0 <write@plt>
 80608aa:	83 c4 0c             	add    $0xc,%esp
 80608ad:	6a 00                	push   $0x0
 80608af:	68 e0 ad 43 08       	push   $0x843ade0
 80608b4:	ff 35 40 ae 43 08    	pushl  0x843ae40
 80608ba:	e8 b1 89 fe ff       	call   8049270 <waitpid@plt>
 80608bf:	83 c4 0c             	add    $0xc,%esp
 80608c2:	83 f8 00             	cmp    $0x0,%eax
 80608c5:	7e 35                	jle    80608fc <__afl_die>
 80608c7:	6a 04                	push   $0x4
 80608c9:	68 e0 ad 43 08       	push   $0x843ade0
 80608ce:	68 c7 00 00 00       	push   $0xc7
 80608d3:	e8 f8 8a fe ff       	call   80493d0 <write@plt>
 80608d8:	83 c4 0c             	add    $0xc,%esp
 80608db:	eb 92                	jmp    806086f <__afl_fork_wait_loop>

080608dd <__afl_fork_resume>:
 80608dd:	68 c6 00 00 00       	push   $0xc6
 80608e2:	e8 39 8c fe ff       	call   8049520 <close@plt>
 80608e7:	68 c7 00 00 00       	push   $0xc7
 80608ec:	e8 2f 8c fe ff       	call   8049520 <close@plt>
 80608f1:	83 c4 08             	add    $0x8,%esp
 80608f4:	5a                   	pop    %edx
 80608f5:	59                   	pop    %ecx
 80608f6:	58                   	pop    %eax
 80608f7:	e9 ea fe ff ff       	jmp    80607e6 <__afl_store>

080608fc <__afl_die>:
 80608fc:	31 c0                	xor    %eax,%eax
 80608fe:	e8 8d 88 fe ff       	call   8049190 <_exit@plt>

08060903 <__afl_setup_abort>:
 8060903:	fe 05 60 ae 43 08    	incb   0x843ae60
 8060909:	59                   	pop    %ecx
 806090a:	58                   	pop    %eax
 806090b:	e9 ee fe ff ff       	jmp    80607fe <__afl_return>

08060910 <.AFL_SHM_ENV>:
 8060910:	5f                   	pop    %edi
 8060911:	5f                   	pop    %edi
 8060912:	41                   	inc    %ecx
 8060913:	46                   	inc    %esi
 8060914:	4c                   	dec    %esp
 8060915:	5f                   	pop    %edi
 8060916:	53                   	push   %ebx
 8060917:	48                   	dec    %eax
 8060918:	4d                   	dec    %ebp
 8060919:	5f                   	pop    %edi
 806091a:	49                   	dec    %ecx
 806091b:	44                   	inc    %esp
 806091c:	00 66 90             	add    %ah,-0x70(%esi)
 806091f:	90                   	nop

08060920 <xstrtoul>:
/* FIXME: comment.  */

strtol_error
__xstrtol (const char *s, char **ptr, int strtol_base,
           __strtol_t *val, const char *valid_suffixes)
{
 8060920:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060924:	89 3c 24             	mov    %edi,(%esp)
 8060927:	89 54 24 04          	mov    %edx,0x4(%esp)
 806092b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806092f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060933:	b9 1f d2 00 00       	mov    $0xd21f,%ecx
 8060938:	e8 1b 1a 00 00       	call   8062358 <__afl_maybe_log>
 806093d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060941:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060945:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060949:	8b 3c 24             	mov    (%esp),%edi
 806094c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060950:	55                   	push   %ebp
 8060951:	57                   	push   %edi
 8060952:	56                   	push   %esi
 8060953:	53                   	push   %ebx
 8060954:	83 ec 2c             	sub    $0x2c,%esp
 8060957:	8b 74 24 48          	mov    0x48(%esp),%esi
 806095b:	8b 44 24 44          	mov    0x44(%esp),%eax
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;

  assure (0 <= strtol_base && strtol_base <= 36);
 806095f:	83 fe 24             	cmp    $0x24,%esi
 8060962:	0f 87 a7 19 00 00    	ja     806230f <xstrtoul+0x19ef>
 8060968:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806096c:	89 3c 24             	mov    %edi,(%esp)
 806096f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060973:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060977:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806097b:	b9 20 37 00 00       	mov    $0x3720,%ecx
 8060980:	e8 d3 19 00 00       	call   8062358 <__afl_maybe_log>
 8060985:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060989:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806098d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060991:	8b 3c 24             	mov    (%esp),%edi
 8060994:	8d 64 24 10          	lea    0x10(%esp),%esp

  p = (ptr ? ptr : &t_ptr);
 8060998:	8d 54 24 1c          	lea    0x1c(%esp),%edx
 806099c:	85 c0                	test   %eax,%eax
 806099e:	0f 45 d0             	cmovne %eax,%edx
 80609a1:	89 54 24 08          	mov    %edx,0x8(%esp)

  errno = 0;
 80609a5:	e8 56 8a fe ff       	call   8049400 <__errno_location@plt>

  if (! TYPE_SIGNED (__strtol_t))
    {
      const char *q = s;
      unsigned char ch = *q;
 80609aa:	8b 4c 24 40          	mov    0x40(%esp),%ecx

  assure (0 <= strtol_base && strtol_base <= 36);

  p = (ptr ? ptr : &t_ptr);

  errno = 0;
 80609ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 80609b4:	89 c7                	mov    %eax,%edi

  if (! TYPE_SIGNED (__strtol_t))
    {
      const char *q = s;
      unsigned char ch = *q;
 80609b6:	0f b6 19             	movzbl (%ecx),%ebx
 80609b9:	e8 82 8b fe ff       	call   8049540 <__ctype_b_loc@plt>
      while (isspace (ch))
 80609be:	8b 54 24 40          	mov    0x40(%esp),%edx
 80609c2:	8b 28                	mov    (%eax),%ebp
 80609c4:	eb 10                	jmp    80609d6 <xstrtoul+0xb6>
 80609c6:	8d 76 00             	lea    0x0(%esi),%esi
 80609c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
        ch = *++q;
 80609d0:	83 c2 01             	add    $0x1,%edx
 80609d3:	0f b6 1a             	movzbl (%edx),%ebx
 80609d6:	66 90                	xchg   %ax,%ax

  if (! TYPE_SIGNED (__strtol_t))
    {
      const char *q = s;
      unsigned char ch = *q;
      while (isspace (ch))
 80609d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80609dc:	89 3c 24             	mov    %edi,(%esp)
 80609df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80609e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80609e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80609eb:	b9 37 02 00 00       	mov    $0x237,%ecx
 80609f0:	e8 63 19 00 00       	call   8062358 <__afl_maybe_log>
 80609f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80609f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80609fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060a01:	8b 3c 24             	mov    (%esp),%edi
 8060a04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060a08:	0f b6 c3             	movzbl %bl,%eax
 8060a0b:	f6 44 45 01 20       	testb  $0x20,0x1(%ebp,%eax,2)
 8060a10:	75 be                	jne    80609d0 <xstrtoul+0xb0>
 8060a12:	66 90                	xchg   %ax,%ax
 8060a14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060a18:	89 3c 24             	mov    %edi,(%esp)
 8060a1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060a1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060a23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060a27:	b9 1d 36 00 00       	mov    $0x361d,%ecx
 8060a2c:	e8 27 19 00 00       	call   8062358 <__afl_maybe_log>
 8060a31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060a35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060a39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060a3d:	8b 3c 24             	mov    (%esp),%edi
 8060a40:	8d 64 24 10          	lea    0x10(%esp),%esp
        ch = *++q;
      if (ch == '-')
 8060a44:	80 fb 2d             	cmp    $0x2d,%bl
 8060a47:	0f 85 a3 00 00 00    	jne    8060af0 <xstrtoul+0x1d0>
 8060a4d:	8d 76 00             	lea    0x0(%esi),%esi
 8060a50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060a54:	89 3c 24             	mov    %edi,(%esp)
 8060a57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060a5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060a5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060a63:	b9 6a 3f 00 00       	mov    $0x3f6a,%ecx
 8060a68:	e8 eb 18 00 00       	call   8062358 <__afl_maybe_log>
 8060a6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060a71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060a75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060a79:	8b 3c 24             	mov    (%esp),%edi
 8060a7c:	8d 64 24 10          	lea    0x10(%esp),%esp
        return LONGINT_INVALID;
 8060a80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060a84:	89 3c 24             	mov    %edi,(%esp)
 8060a87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060a8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060a8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060a93:	b9 7d be 00 00       	mov    $0xbe7d,%ecx
 8060a98:	e8 bb 18 00 00       	call   8062358 <__afl_maybe_log>
 8060a9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060aa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060aa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060aa9:	8b 3c 24             	mov    (%esp),%edi
 8060aac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060ab0:	b8 04 00 00 00       	mov    $0x4,%eax
 8060ab5:	8d 76 00             	lea    0x0(%esi),%esi
        err |= LONGINT_INVALID_SUFFIX_CHAR;
    }

  *val = tmp;
  return err;
}
 8060ab8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060abc:	89 3c 24             	mov    %edi,(%esp)
 8060abf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060ac3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060ac7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060acb:	b9 76 04 00 00       	mov    $0x476,%ecx
 8060ad0:	e8 83 18 00 00       	call   8062358 <__afl_maybe_log>
 8060ad5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ad9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060add:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ae1:	8b 3c 24             	mov    (%esp),%edi
 8060ae4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060ae8:	83 c4 2c             	add    $0x2c,%esp
 8060aeb:	5b                   	pop    %ebx
 8060aec:	5e                   	pop    %esi
 8060aed:	5f                   	pop    %edi
 8060aee:	5d                   	pop    %ebp
 8060aef:	c3                   	ret    
        ch = *++q;
      if (ch == '-')
        return LONGINT_INVALID;
    }

  tmp = __strtol (s, p, strtol_base);
 8060af0:	83 ec 04             	sub    $0x4,%esp
 8060af3:	56                   	push   %esi
 8060af4:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8060af8:	53                   	push   %ebx
 8060af9:	ff 74 24 4c          	pushl  0x4c(%esp)
 8060afd:	e8 6e 88 fe ff       	call   8049370 <strtoul@plt>

  if (*p == s)
 8060b02:	83 c4 10             	add    $0x10,%esp
 8060b05:	8b 2b                	mov    (%ebx),%ebp
        ch = *++q;
      if (ch == '-')
        return LONGINT_INVALID;
    }

  tmp = __strtol (s, p, strtol_base);
 8060b07:	89 c6                	mov    %eax,%esi

  if (*p == s)
 8060b09:	3b 6c 24 40          	cmp    0x40(%esp),%ebp
 8060b0d:	0f 84 0b 04 00 00    	je     8060f1e <xstrtoul+0x5fe>
 8060b13:	90                   	nop
 8060b14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060b18:	89 3c 24             	mov    %edi,(%esp)
 8060b1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060b1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060b23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060b27:	b9 a7 3d 00 00       	mov    $0x3da7,%ecx
 8060b2c:	e8 27 18 00 00       	call   8062358 <__afl_maybe_log>
 8060b31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060b35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060b39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060b3d:	8b 3c 24             	mov    (%esp),%edi
 8060b40:	8d 64 24 10          	lea    0x10(%esp),%esp
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
        tmp = 1;
      else
        return LONGINT_INVALID;
    }
  else if (errno != 0)
 8060b44:	8b 3f                	mov    (%edi),%edi
 8060b46:	85 ff                	test   %edi,%edi
 8060b48:	0f 85 22 01 00 00    	jne    8060c70 <xstrtoul+0x350>
 8060b4e:	66 90                	xchg   %ax,%ax
 8060b50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060b54:	89 3c 24             	mov    %edi,(%esp)
 8060b57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060b5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060b5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060b63:	b9 fa 78 00 00       	mov    $0x78fa,%ecx
 8060b68:	e8 eb 17 00 00       	call   8062358 <__afl_maybe_log>
 8060b6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060b71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060b75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060b79:	8b 3c 24             	mov    (%esp),%edi
 8060b7c:	8d 64 24 10          	lea    0x10(%esp),%esp
           __strtol_t *val, const char *valid_suffixes)
{
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;
 8060b80:	31 db                	xor    %ebx,%ebx
 8060b82:	66 90                	xchg   %ax,%ax
    }

  /* Let valid_suffixes == NULL mean "allow any suffix".  */
  /* FIXME: update all callers except the ones that allow suffixes
     after the number, changing last parameter NULL to "".  */
  if (!valid_suffixes)
 8060b84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060b88:	89 3c 24             	mov    %edi,(%esp)
 8060b8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060b8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060b93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060b97:	b9 1d 75 00 00       	mov    $0x751d,%ecx
 8060b9c:	e8 b7 17 00 00       	call   8062358 <__afl_maybe_log>
 8060ba1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ba5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060ba9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060bad:	8b 3c 24             	mov    (%esp),%edi
 8060bb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060bb4:	8b 54 24 50          	mov    0x50(%esp),%edx
 8060bb8:	85 d2                	test   %edx,%edx
 8060bba:	74 6c                	je     8060c28 <xstrtoul+0x308>
 8060bbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060bc0:	89 3c 24             	mov    %edi,(%esp)
 8060bc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060bc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060bcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060bcf:	b9 fe 95 00 00       	mov    $0x95fe,%ecx
 8060bd4:	e8 7f 17 00 00       	call   8062358 <__afl_maybe_log>
 8060bd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060bdd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060be1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060be5:	8b 3c 24             	mov    (%esp),%edi
 8060be8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *val = tmp;
      return err;
    }

  if (**p != '\0')
 8060bec:	0f b6 4d 00          	movzbl 0x0(%ebp),%ecx
 8060bf0:	84 c9                	test   %cl,%cl
 8060bf2:	0f 85 bd 00 00 00    	jne    8060cb5 <xstrtoul+0x395>
 8060bf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060bfc:	89 3c 24             	mov    %edi,(%esp)
 8060bff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060c03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060c07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060c0b:	b9 f1 00 00 00       	mov    $0xf1,%ecx
 8060c10:	e8 43 17 00 00       	call   8062358 <__afl_maybe_log>
 8060c15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060c19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060c1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060c21:	8b 3c 24             	mov    (%esp),%edi
 8060c24:	8d 64 24 10          	lea    0x10(%esp),%esp
      *p += suffixes;
      if (**p)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
    }

  *val = tmp;
 8060c28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060c2c:	89 3c 24             	mov    %edi,(%esp)
 8060c2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060c33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060c37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060c3b:	b9 7f e1 00 00       	mov    $0xe17f,%ecx
 8060c40:	e8 13 17 00 00       	call   8062358 <__afl_maybe_log>
 8060c45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060c49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060c4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060c51:	8b 3c 24             	mov    (%esp),%edi
 8060c54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060c58:	8b 7c 24 4c          	mov    0x4c(%esp),%edi
  return err;
 8060c5c:	89 d8                	mov    %ebx,%eax
      *p += suffixes;
      if (**p)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
    }

  *val = tmp;
 8060c5e:	89 37                	mov    %esi,(%edi)
  return err;
}
 8060c60:	83 c4 2c             	add    $0x2c,%esp
 8060c63:	5b                   	pop    %ebx
 8060c64:	5e                   	pop    %esi
 8060c65:	5f                   	pop    %edi
 8060c66:	5d                   	pop    %ebp
 8060c67:	c3                   	ret    
 8060c68:	90                   	nop
 8060c69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      else
        return LONGINT_INVALID;
    }
  else if (errno != 0)
    {
      if (errno != ERANGE)
 8060c70:	83 ff 22             	cmp    $0x22,%edi
        return LONGINT_INVALID;
      err = LONGINT_OVERFLOW;
 8060c73:	bb 01 00 00 00       	mov    $0x1,%ebx
      else
        return LONGINT_INVALID;
    }
  else if (errno != 0)
    {
      if (errno != ERANGE)
 8060c78:	0f 85 02 fe ff ff    	jne    8060a80 <xstrtoul+0x160>
 8060c7e:	66 90                	xchg   %ax,%ax
 8060c80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060c84:	89 3c 24             	mov    %edi,(%esp)
 8060c87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060c8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060c8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060c93:	b9 f0 5d 00 00       	mov    $0x5df0,%ecx
 8060c98:	e8 bb 16 00 00       	call   8062358 <__afl_maybe_log>
 8060c9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ca1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060ca5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ca9:	8b 3c 24             	mov    (%esp),%edi
 8060cac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060cb0:	e9 cd fe ff ff       	jmp    8060b82 <xstrtoul+0x262>
 8060cb5:	8d 76 00             	lea    0x0(%esi),%esi
 8060cb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060cbc:	89 3c 24             	mov    %edi,(%esp)
 8060cbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060cc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060cc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060ccb:	b9 15 c7 00 00       	mov    $0xc715,%ecx
 8060cd0:	e8 83 16 00 00       	call   8062358 <__afl_maybe_log>
 8060cd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060cd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060cdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ce1:	8b 3c 24             	mov    (%esp),%edi
 8060ce4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060ce8:	83 ec 08             	sub    $0x8,%esp
 8060ceb:	0f be c1             	movsbl %cl,%eax
 8060cee:	88 4c 24 17          	mov    %cl,0x17(%esp)
 8060cf2:	50                   	push   %eax
 8060cf3:	ff 74 24 5c          	pushl  0x5c(%esp)
 8060cf7:	e8 84 86 fe ff       	call   8049380 <strchr@plt>
 8060cfc:	83 c4 10             	add    $0x10,%esp
    {
      int base = 1024;
      int suffixes = 1;
      strtol_error overflow;

      if (!strchr (valid_suffixes, **p))
 8060cff:	85 c0                	test   %eax,%eax
 8060d01:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
 8060d06:	0f 84 24 03 00 00    	je     8061030 <xstrtoul+0x710>
 8060d0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060d10:	89 3c 24             	mov    %edi,(%esp)
 8060d13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060d17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060d1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060d1f:	b9 76 96 00 00       	mov    $0x9676,%ecx
 8060d24:	e8 2f 16 00 00       	call   8062358 <__afl_maybe_log>
 8060d29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060d2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060d31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060d35:	8b 3c 24             	mov    (%esp),%edi
 8060d38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060d3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060d40:	89 3c 24             	mov    %edi,(%esp)
 8060d43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060d47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060d4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060d4f:	b9 ce 68 00 00       	mov    $0x68ce,%ecx
 8060d54:	e8 ff 15 00 00       	call   8062358 <__afl_maybe_log>
 8060d59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060d5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060d61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060d65:	8b 3c 24             	mov    (%esp),%edi
 8060d68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060d6c:	88 54 24 0f          	mov    %dl,0xf(%esp)
        {
          *val = tmp;
          return err | LONGINT_INVALID_SUFFIX_CHAR;
        }

      if (strchr (valid_suffixes, '0'))
 8060d70:	83 ec 08             	sub    $0x8,%esp
 8060d73:	6a 30                	push   $0x30
 8060d75:	ff 74 24 5c          	pushl  0x5c(%esp)
 8060d79:	e8 02 86 fe ff       	call   8049380 <strchr@plt>
 8060d7e:	83 c4 10             	add    $0x10,%esp
 8060d81:	85 c0                	test   %eax,%eax
 8060d83:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
 8060d88:	0f 84 de 00 00 00    	je     8060e6c <xstrtoul+0x54c>
 8060d8e:	66 90                	xchg   %ax,%ax
 8060d90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060d94:	89 3c 24             	mov    %edi,(%esp)
 8060d97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060d9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060d9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060da3:	b9 f0 15 00 00       	mov    $0x15f0,%ecx
 8060da8:	e8 ab 15 00 00       	call   8062358 <__afl_maybe_log>
 8060dad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060db1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060db5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060db9:	8b 3c 24             	mov    (%esp),%edi
 8060dbc:	8d 64 24 10          	lea    0x10(%esp),%esp
             the base.  A suffix "B" (e.g. "100MB") stands for a power
             of 1000, whereas a suffix "iB" (e.g. "100MiB") stands for
             a power of 1024.  If no suffix (e.g. "100M"), assume
             power-of-1024.  */

          switch (p[0][1])
 8060dc0:	0f b6 45 01          	movzbl 0x1(%ebp),%eax
 8060dc4:	3c 44                	cmp    $0x44,%al
 8060dc6:	0f 84 2b 10 00 00    	je     8061df7 <xstrtoul+0x14d7>
 8060dcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060dd0:	89 3c 24             	mov    %edi,(%esp)
 8060dd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060dd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060ddb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060ddf:	b9 dd 6b 00 00       	mov    $0x6bdd,%ecx
 8060de4:	e8 6f 15 00 00       	call   8062358 <__afl_maybe_log>
 8060de9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ded:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060df1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060df5:	8b 3c 24             	mov    (%esp),%edi
 8060df8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060dfc:	3c 69                	cmp    $0x69,%al
 8060dfe:	0f 84 dc 0f 00 00    	je     8061de0 <xstrtoul+0x14c0>
 8060e04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060e08:	89 3c 24             	mov    %edi,(%esp)
 8060e0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060e0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060e13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060e17:	b9 e2 1e 00 00       	mov    $0x1ee2,%ecx
 8060e1c:	e8 37 15 00 00       	call   8062358 <__afl_maybe_log>
 8060e21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060e25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060e29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060e2d:	8b 3c 24             	mov    (%esp),%edi
 8060e30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060e34:	3c 42                	cmp    $0x42,%al
 8060e36:	0f 84 bb 0f 00 00    	je     8061df7 <xstrtoul+0x14d7>
 8060e3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060e40:	89 3c 24             	mov    %edi,(%esp)
 8060e43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060e47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060e4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060e4f:	b9 47 90 00 00       	mov    $0x9047,%ecx
 8060e54:	e8 ff 14 00 00       	call   8062358 <__afl_maybe_log>
 8060e59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060e5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060e61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060e65:	8b 3c 24             	mov    (%esp),%edi
 8060e68:	8d 64 24 10          	lea    0x10(%esp),%esp
    }

  if (**p != '\0')
    {
      int base = 1024;
      int suffixes = 1;
 8060e6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060e70:	89 3c 24             	mov    %edi,(%esp)
 8060e73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060e77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060e7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060e7f:	b9 65 f9 00 00       	mov    $0xf965,%ecx
 8060e84:	e8 cf 14 00 00       	call   8062358 <__afl_maybe_log>
 8060e89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060e8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060e91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060e95:	8b 3c 24             	mov    (%esp),%edi
 8060e98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060e9c:	bf 01 00 00 00       	mov    $0x1,%edi
      return err;
    }

  if (**p != '\0')
    {
      int base = 1024;
 8060ea1:	b9 00 04 00 00       	mov    $0x400,%ecx
 8060ea6:	66 90                	xchg   %ax,%ax
              suffixes++;
              break;
            }
        }

      switch (**p)
 8060ea8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060eac:	89 3c 24             	mov    %edi,(%esp)
 8060eaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060eb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060eb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060ebb:	b9 ff 60 00 00       	mov    $0x60ff,%ecx
 8060ec0:	e8 93 14 00 00       	call   8062358 <__afl_maybe_log>
 8060ec5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ec9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060ecd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ed1:	8b 3c 24             	mov    (%esp),%edi
 8060ed4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060ed8:	83 ea 42             	sub    $0x42,%edx
 8060edb:	80 fa 35             	cmp    $0x35,%dl
 8060ede:	0f 87 4c 01 00 00    	ja     8061030 <xstrtoul+0x710>
 8060ee4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060ee8:	89 3c 24             	mov    %edi,(%esp)
 8060eeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060eef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060ef3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060ef7:	b9 9c b3 00 00       	mov    $0xb39c,%ecx
 8060efc:	e8 57 14 00 00       	call   8062358 <__afl_maybe_log>
 8060f01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060f05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060f09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060f0d:	8b 3c 24             	mov    (%esp),%edi
 8060f10:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060f14:	0f b6 d2             	movzbl %dl,%edx
 8060f17:	ff 24 95 a8 6e 06 08 	jmp    *0x8066ea8(,%edx,4)
 8060f1e:	66 90                	xchg   %ax,%ax

  if (*p == s)
    {
      /* If there is no number but there is a valid suffix, assume the
         number is 1.  The string is invalid otherwise.  */
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
 8060f20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060f24:	89 3c 24             	mov    %edi,(%esp)
 8060f27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060f2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060f2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060f33:	b9 84 68 00 00       	mov    $0x6884,%ecx
 8060f38:	e8 1b 14 00 00       	call   8062358 <__afl_maybe_log>
 8060f3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060f41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060f45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060f49:	8b 3c 24             	mov    (%esp),%edi
 8060f4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060f50:	8b 74 24 50          	mov    0x50(%esp),%esi
 8060f54:	85 f6                	test   %esi,%esi
 8060f56:	0f 84 24 fb ff ff    	je     8060a80 <xstrtoul+0x160>
 8060f5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060f60:	89 3c 24             	mov    %edi,(%esp)
 8060f63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060f67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060f6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060f6f:	b9 e4 e2 00 00       	mov    $0xe2e4,%ecx
 8060f74:	e8 df 13 00 00       	call   8062358 <__afl_maybe_log>
 8060f79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060f7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060f81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060f85:	8b 3c 24             	mov    (%esp),%edi
 8060f88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060f8c:	8b 5c 24 40          	mov    0x40(%esp),%ebx
 8060f90:	0f b6 0b             	movzbl (%ebx),%ecx
 8060f93:	84 c9                	test   %cl,%cl
 8060f95:	0f 84 e5 fa ff ff    	je     8060a80 <xstrtoul+0x160>
 8060f9b:	90                   	nop
 8060f9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060fa0:	89 3c 24             	mov    %edi,(%esp)
 8060fa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060fa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060fab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060faf:	b9 30 57 00 00       	mov    $0x5730,%ecx
 8060fb4:	e8 9f 13 00 00       	call   8062358 <__afl_maybe_log>
 8060fb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060fbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060fc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060fc5:	8b 3c 24             	mov    (%esp),%edi
 8060fc8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060fcc:	83 ec 08             	sub    $0x8,%esp
 8060fcf:	0f be f9             	movsbl %cl,%edi
           __strtol_t *val, const char *valid_suffixes)
{
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;
 8060fd2:	31 db                	xor    %ebx,%ebx

  if (*p == s)
    {
      /* If there is no number but there is a valid suffix, assume the
         number is 1.  The string is invalid otherwise.  */
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
 8060fd4:	88 4c 24 17          	mov    %cl,0x17(%esp)
 8060fd8:	57                   	push   %edi
        tmp = 1;
 8060fd9:	be 01 00 00 00       	mov    $0x1,%esi

  if (*p == s)
    {
      /* If there is no number but there is a valid suffix, assume the
         number is 1.  The string is invalid otherwise.  */
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
 8060fde:	ff 74 24 5c          	pushl  0x5c(%esp)
 8060fe2:	e8 99 83 fe ff       	call   8049380 <strchr@plt>
 8060fe7:	83 c4 10             	add    $0x10,%esp
 8060fea:	85 c0                	test   %eax,%eax
 8060fec:	0f b6 54 24 0f       	movzbl 0xf(%esp),%edx
 8060ff1:	0f 85 45 fd ff ff    	jne    8060d3c <xstrtoul+0x41c>
 8060ff7:	90                   	nop
 8060ff8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060ffc:	89 3c 24             	mov    %edi,(%esp)
 8060fff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061003:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061007:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806100b:	b9 89 68 00 00       	mov    $0x6889,%ecx
 8061010:	e8 43 13 00 00       	call   8062358 <__afl_maybe_log>
 8061015:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061019:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806101d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061021:	8b 3c 24             	mov    (%esp),%edi
 8061024:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061028:	e9 53 fa ff ff       	jmp    8060a80 <xstrtoul+0x160>
 806102d:	8d 76 00             	lea    0x0(%esi),%esi
        case 'Z': /* zetta or 2**70 */
          overflow = bkm_scale_by_power (&tmp, base, 7);
          break;

        default:
          *val = tmp;
 8061030:	8b 4c 24 4c          	mov    0x4c(%esp),%ecx
          return err | LONGINT_INVALID_SUFFIX_CHAR;
 8061034:	89 d8                	mov    %ebx,%eax
 8061036:	83 c8 02             	or     $0x2,%eax
        case 'Z': /* zetta or 2**70 */
          overflow = bkm_scale_by_power (&tmp, base, 7);
          break;

        default:
          *val = tmp;
 8061039:	89 31                	mov    %esi,(%ecx)
          return err | LONGINT_INVALID_SUFFIX_CHAR;
 806103b:	e9 75 fa ff ff       	jmp    8060ab5 <xstrtoul+0x195>
        case 'B':
          overflow = bkm_scale (&tmp, 1024);
          break;

        case 'c':
          overflow = LONGINT_OK;
 8061040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061044:	89 3c 24             	mov    %edi,(%esp)
 8061047:	89 54 24 04          	mov    %edx,0x4(%esp)
 806104b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806104f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061053:	b9 7a c6 00 00       	mov    $0xc67a,%ecx
 8061058:	e8 fb 12 00 00       	call   8062358 <__afl_maybe_log>
 806105d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061065:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061069:	8b 3c 24             	mov    (%esp),%edi
 806106c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061070:	31 d2                	xor    %edx,%edx
 8061072:	66 90                	xchg   %ax,%ax
          *val = tmp;
          return err | LONGINT_INVALID_SUFFIX_CHAR;
        }

      err |= overflow;
      *p += suffixes;
 8061074:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061078:	89 3c 24             	mov    %edi,(%esp)
 806107b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806107f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061083:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061087:	b9 33 dc 00 00       	mov    $0xdc33,%ecx
 806108c:	e8 c7 12 00 00       	call   8062358 <__afl_maybe_log>
 8061091:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061095:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061099:	8b 54 24 04          	mov    0x4(%esp),%edx
 806109d:	8b 3c 24             	mov    (%esp),%edi
 80610a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80610a4:	01 ef                	add    %ebp,%edi
 80610a6:	8b 6c 24 08          	mov    0x8(%esp),%ebp
        default:
          *val = tmp;
          return err | LONGINT_INVALID_SUFFIX_CHAR;
        }

      err |= overflow;
 80610aa:	09 da                	or     %ebx,%edx
      *p += suffixes;
      if (**p)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
 80610ac:	89 d3                	mov    %edx,%ebx
 80610ae:	83 cb 02             	or     $0x2,%ebx
          *val = tmp;
          return err | LONGINT_INVALID_SUFFIX_CHAR;
        }

      err |= overflow;
      *p += suffixes;
 80610b1:	89 7d 00             	mov    %edi,0x0(%ebp)
      if (**p)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
 80610b4:	80 3f 00             	cmpb   $0x0,(%edi)
 80610b7:	0f 44 da             	cmove  %edx,%ebx
 80610ba:	e9 69 fb ff ff       	jmp    8060c28 <xstrtoul+0x308>
 80610bf:	90                   	nop
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80610c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80610c4:	89 3c 24             	mov    %edi,(%esp)
 80610c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80610cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80610cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80610d3:	b9 b2 bb 00 00       	mov    $0xbbb2,%ecx
 80610d8:	e8 7b 12 00 00       	call   8062358 <__afl_maybe_log>
 80610dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80610e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80610e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80610e9:	8b 3c 24             	mov    (%esp),%edi
 80610ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80610f0:	81 fe ff ff ff 7f    	cmp    $0x7fffffff,%esi
 80610f6:	0f 87 78 09 00 00    	ja     8061a74 <xstrtoul+0x1154>
 80610fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061100:	89 3c 24             	mov    %edi,(%esp)
 8061103:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061107:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806110b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806110f:	b9 ea af 00 00       	mov    $0xafea,%ecx
 8061114:	e8 3f 12 00 00       	call   8062358 <__afl_maybe_log>
 8061119:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806111d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061121:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061125:	8b 3c 24             	mov    (%esp),%edi
 8061128:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 806112c:	01 f6                	add    %esi,%esi
  return LONGINT_OK;
 806112e:	31 d2                	xor    %edx,%edx
 8061130:	e9 3d ff ff ff       	jmp    8061072 <xstrtoul+0x752>
 8061135:	8d 76 00             	lea    0x0(%esi),%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061138:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806113c:	89 3c 24             	mov    %edi,(%esp)
 806113f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061143:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061147:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806114b:	b9 5d 78 00 00       	mov    $0x785d,%ecx
 8061150:	e8 03 12 00 00       	call   8062358 <__afl_maybe_log>
 8061155:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061159:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806115d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061161:	8b 3c 24             	mov    (%esp),%edi
 8061164:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061168:	81 fe ff ff 7f 00    	cmp    $0x7fffff,%esi
 806116e:	0f 87 00 09 00 00    	ja     8061a74 <xstrtoul+0x1154>
 8061174:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061178:	89 3c 24             	mov    %edi,(%esp)
 806117b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806117f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061183:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061187:	b9 3c c0 00 00       	mov    $0xc03c,%ecx
 806118c:	e8 c7 11 00 00       	call   8062358 <__afl_maybe_log>
 8061191:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061195:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061199:	8b 54 24 04          	mov    0x4(%esp),%edx
 806119d:	8b 3c 24             	mov    (%esp),%edi
 80611a0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80611a4:	c1 e6 09             	shl    $0x9,%esi
  return LONGINT_OK;
 80611a7:	31 d2                	xor    %edx,%edx
 80611a9:	e9 c4 fe ff ff       	jmp    8061072 <xstrtoul+0x752>
 80611ae:	66 90                	xchg   %ax,%ax
 80611b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80611b4:	89 3c 24             	mov    %edi,(%esp)
 80611b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80611bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80611bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80611c3:	b9 b8 6d 00 00       	mov    $0x6db8,%ecx
 80611c8:	e8 8b 11 00 00       	call   8062358 <__afl_maybe_log>
 80611cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80611d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80611d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80611d9:	8b 3c 24             	mov    (%esp),%edi
 80611dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80611e0:	31 d2                	xor    %edx,%edx
 80611e2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80611e7:	f7 f1                	div    %ecx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80611e9:	39 c6                	cmp    %eax,%esi
 80611eb:	0f 87 53 0d 00 00    	ja     8061f44 <xstrtoul+0x1624>
 80611f1:	8d 76 00             	lea    0x0(%esi),%esi
 80611f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80611f8:	89 3c 24             	mov    %edi,(%esp)
 80611fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80611ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061203:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061207:	b9 ff 5d 00 00       	mov    $0x5dff,%ecx
 806120c:	e8 47 11 00 00       	call   8062358 <__afl_maybe_log>
 8061211:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061215:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061219:	8b 54 24 04          	mov    0x4(%esp),%edx
 806121d:	8b 3c 24             	mov    (%esp),%edi
 8061220:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061224:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061227:	89 c2                	mov    %eax,%edx
 8061229:	39 f0                	cmp    %esi,%eax
 806122b:	0f 82 a6 10 00 00    	jb     80622d7 <xstrtoul+0x19b7>
 8061231:	8d 76 00             	lea    0x0(%esi),%esi
 8061234:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061238:	89 3c 24             	mov    %edi,(%esp)
 806123b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806123f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061243:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061247:	b9 fb e3 00 00       	mov    $0xe3fb,%ecx
 806124c:	e8 07 11 00 00       	call   8062358 <__afl_maybe_log>
 8061251:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061255:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061259:	8b 54 24 04          	mov    0x4(%esp),%edx
 806125d:	8b 3c 24             	mov    (%esp),%edi
 8061260:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061264:	0f af f1             	imul   %ecx,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8061267:	31 c0                	xor    %eax,%eax
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061269:	39 f2                	cmp    %esi,%edx
 806126b:	0f 82 3e 0d 00 00    	jb     8061faf <xstrtoul+0x168f>
 8061271:	8d 76 00             	lea    0x0(%esi),%esi
 8061274:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061278:	89 3c 24             	mov    %edi,(%esp)
 806127b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806127f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061283:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061287:	b9 10 f2 00 00       	mov    $0xf210,%ecx
 806128c:	e8 c7 10 00 00       	call   8062358 <__afl_maybe_log>
 8061291:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061295:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061299:	8b 54 24 04          	mov    0x4(%esp),%edx
 806129d:	8b 3c 24             	mov    (%esp),%edi
 80612a0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80612a4:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80612a7:	39 f2                	cmp    %esi,%edx
 80612a9:	0f 82 34 0d 00 00    	jb     8061fe3 <xstrtoul+0x16c3>
 80612af:	90                   	nop
 80612b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80612b4:	89 3c 24             	mov    %edi,(%esp)
 80612b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80612bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80612bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80612c3:	b9 3e 4c 00 00       	mov    $0x4c3e,%ecx
 80612c8:	e8 8b 10 00 00       	call   8062358 <__afl_maybe_log>
 80612cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80612d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80612d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80612d9:	8b 3c 24             	mov    (%esp),%edi
 80612dc:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80612e0:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80612e3:	39 f2                	cmp    %esi,%edx
 80612e5:	0f 82 2c 0d 00 00    	jb     8062017 <xstrtoul+0x16f7>
 80612eb:	90                   	nop
 80612ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80612f0:	89 3c 24             	mov    %edi,(%esp)
 80612f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80612f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80612fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80612ff:	b9 e6 3f 00 00       	mov    $0x3fe6,%ecx
 8061304:	e8 4f 10 00 00       	call   8062358 <__afl_maybe_log>
 8061309:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806130d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061311:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061315:	8b 3c 24             	mov    (%esp),%edi
 8061318:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 806131c:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 806131f:	39 f2                	cmp    %esi,%edx
 8061321:	0f 82 24 0d 00 00    	jb     806204b <xstrtoul+0x172b>
 8061327:	90                   	nop
 8061328:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806132c:	89 3c 24             	mov    %edi,(%esp)
 806132f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061333:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061337:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806133b:	b9 db 21 00 00       	mov    $0x21db,%ecx
 8061340:	e8 13 10 00 00       	call   8062358 <__afl_maybe_log>
 8061345:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061349:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806134d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061351:	8b 3c 24             	mov    (%esp),%edi
 8061354:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061358:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 806135b:	39 f2                	cmp    %esi,%edx
 806135d:	0f 82 f9 08 00 00    	jb     8061c5c <xstrtoul+0x133c>
 8061363:	90                   	nop
 8061364:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061368:	89 3c 24             	mov    %edi,(%esp)
 806136b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806136f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061373:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061377:	b9 ad f9 00 00       	mov    $0xf9ad,%ecx
 806137c:	e8 d7 0f 00 00       	call   8062358 <__afl_maybe_log>
 8061381:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061385:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061389:	8b 54 24 04          	mov    0x4(%esp),%edx
 806138d:	8b 3c 24             	mov    (%esp),%edi
 8061390:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
  return LONGINT_OK;
 8061394:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061398:	89 3c 24             	mov    %edi,(%esp)
 806139b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806139f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80613a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80613a7:	b9 79 2f 00 00       	mov    $0x2f79,%ecx
 80613ac:	e8 a7 0f 00 00       	call   8062358 <__afl_maybe_log>
 80613b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80613b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80613b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80613bd:	8b 3c 24             	mov    (%esp),%edi
 80613c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80613c4:	31 d2                	xor    %edx,%edx
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80613c6:	0f af f1             	imul   %ecx,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 80613c9:	09 c2                	or     %eax,%edx
          overflow = bkm_scale_by_power (&tmp, base, 8);
          break;

        case 'Z': /* zetta or 2**70 */
          overflow = bkm_scale_by_power (&tmp, base, 7);
          break;
 80613cb:	e9 a2 fc ff ff       	jmp    8061072 <xstrtoul+0x752>
 80613d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80613d4:	89 3c 24             	mov    %edi,(%esp)
 80613d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80613db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80613df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80613e3:	b9 20 57 00 00       	mov    $0x5720,%ecx
 80613e8:	e8 6b 0f 00 00       	call   8062358 <__afl_maybe_log>
 80613ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80613f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80613f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80613f9:	8b 3c 24             	mov    (%esp),%edi
 80613fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061400:	31 d2                	xor    %edx,%edx
 8061402:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8061407:	f7 f1                	div    %ecx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061409:	39 c6                	cmp    %eax,%esi
 806140b:	0f 87 26 0a 00 00    	ja     8061e37 <xstrtoul+0x1517>
 8061411:	8d 76 00             	lea    0x0(%esi),%esi
 8061414:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061418:	89 3c 24             	mov    %edi,(%esp)
 806141b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806141f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061423:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061427:	b9 d0 e4 00 00       	mov    $0xe4d0,%ecx
 806142c:	e8 27 0f 00 00       	call   8062358 <__afl_maybe_log>
 8061431:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061435:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061439:	8b 54 24 04          	mov    0x4(%esp),%edx
 806143d:	8b 3c 24             	mov    (%esp),%edi
 8061440:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061444:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061447:	39 f0                	cmp    %esi,%eax
 8061449:	0f 82 6f 0d 00 00    	jb     80621be <xstrtoul+0x189e>
 806144f:	90                   	nop
 8061450:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061454:	89 3c 24             	mov    %edi,(%esp)
 8061457:	89 54 24 04          	mov    %edx,0x4(%esp)
 806145b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806145f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061463:	b9 10 3d 00 00       	mov    $0x3d10,%ecx
 8061468:	e8 eb 0e 00 00       	call   8062358 <__afl_maybe_log>
 806146d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061471:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061475:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061479:	8b 3c 24             	mov    (%esp),%edi
 806147c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061480:	0f af f1             	imul   %ecx,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8061483:	31 d2                	xor    %edx,%edx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061485:	39 f0                	cmp    %esi,%eax
 8061487:	0f 82 16 0a 00 00    	jb     8061ea3 <xstrtoul+0x1583>
 806148d:	8d 76 00             	lea    0x0(%esi),%esi
 8061490:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061494:	89 3c 24             	mov    %edi,(%esp)
 8061497:	89 54 24 04          	mov    %edx,0x4(%esp)
 806149b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806149f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80614a3:	b9 c1 95 00 00       	mov    $0x95c1,%ecx
 80614a8:	e8 ab 0e 00 00       	call   8062358 <__afl_maybe_log>
 80614ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80614b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80614b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80614b9:	8b 3c 24             	mov    (%esp),%edi
 80614bc:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80614c0:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80614c3:	39 f0                	cmp    %esi,%eax
 80614c5:	0f 82 0c 0a 00 00    	jb     8061ed7 <xstrtoul+0x15b7>
 80614cb:	90                   	nop
 80614cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80614d0:	89 3c 24             	mov    %edi,(%esp)
 80614d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80614d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80614db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80614df:	b9 e2 f4 00 00       	mov    $0xf4e2,%ecx
 80614e4:	e8 6f 0e 00 00       	call   8062358 <__afl_maybe_log>
 80614e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80614ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80614f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80614f5:	8b 3c 24             	mov    (%esp),%edi
 80614f8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80614fc:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80614ff:	39 f0                	cmp    %esi,%eax
 8061501:	0f 82 04 0a 00 00    	jb     8061f0b <xstrtoul+0x15eb>
 8061507:	90                   	nop
 8061508:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806150c:	89 3c 24             	mov    %edi,(%esp)
 806150f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061513:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061517:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806151b:	b9 d0 3b 00 00       	mov    $0x3bd0,%ecx
 8061520:	e8 33 0e 00 00       	call   8062358 <__afl_maybe_log>
 8061525:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061529:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806152d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061531:	8b 3c 24             	mov    (%esp),%edi
 8061534:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061538:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 806153b:	39 f0                	cmp    %esi,%eax
 806153d:	0f 82 9d 03 00 00    	jb     80618e0 <xstrtoul+0xfc0>
 8061543:	90                   	nop
 8061544:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061548:	89 3c 24             	mov    %edi,(%esp)
 806154b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806154f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061553:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061557:	b9 d6 db 00 00       	mov    $0xdbd6,%ecx
 806155c:	e8 f7 0d 00 00       	call   8062358 <__afl_maybe_log>
 8061561:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061565:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061569:	8b 54 24 04          	mov    0x4(%esp),%edx
 806156d:	8b 3c 24             	mov    (%esp),%edi
 8061570:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061574:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061578:	89 3c 24             	mov    %edi,(%esp)
 806157b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806157f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061583:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061587:	b9 b5 9f 00 00       	mov    $0x9fb5,%ecx
 806158c:	e8 c7 0d 00 00       	call   8062358 <__afl_maybe_log>
 8061591:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061595:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061599:	8b 54 24 04          	mov    0x4(%esp),%edx
 806159d:	8b 3c 24             	mov    (%esp),%edi
 80615a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80615a4:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80615a7:	39 f0                	cmp    %esi,%eax
 80615a9:	0f 82 c9 01 00 00    	jb     8061778 <xstrtoul+0xe58>
 80615af:	90                   	nop
 80615b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80615b4:	89 3c 24             	mov    %edi,(%esp)
 80615b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80615bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80615bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80615c3:	b9 98 3a 00 00       	mov    $0x3a98,%ecx
 80615c8:	e8 8b 0d 00 00       	call   8062358 <__afl_maybe_log>
 80615cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80615d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80615d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80615d9:	8b 3c 24             	mov    (%esp),%edi
 80615dc:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80615e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80615e4:	89 3c 24             	mov    %edi,(%esp)
 80615e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80615eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80615ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80615f3:	b9 77 d2 00 00       	mov    $0xd277,%ecx
 80615f8:	e8 5b 0d 00 00       	call   8062358 <__afl_maybe_log>
 80615fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061601:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061605:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061609:	8b 3c 24             	mov    (%esp),%edi
 806160c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061610:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061613:	39 f0                	cmp    %esi,%eax
 8061615:	0f 82 90 01 00 00    	jb     80617ab <xstrtoul+0xe8b>
 806161b:	90                   	nop
 806161c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061620:	89 3c 24             	mov    %edi,(%esp)
 8061623:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061627:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806162b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806162f:	b9 12 5b 00 00       	mov    $0x5b12,%ecx
 8061634:	e8 1f 0d 00 00       	call   8062358 <__afl_maybe_log>
 8061639:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806163d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061641:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061645:	8b 3c 24             	mov    (%esp),%edi
 8061648:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
  return LONGINT_OK;
 806164c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061650:	89 3c 24             	mov    %edi,(%esp)
 8061653:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061657:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806165b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806165f:	b9 9f 6b 00 00       	mov    $0x6b9f,%ecx
 8061664:	e8 ef 0c 00 00       	call   8062358 <__afl_maybe_log>
 8061669:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806166d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061671:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061675:	8b 3c 24             	mov    (%esp),%edi
 8061678:	8d 64 24 10          	lea    0x10(%esp),%esp
 806167c:	31 c0                	xor    %eax,%eax
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 806167e:	0f af f1             	imul   %ecx,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8061681:	09 c2                	or     %eax,%edx
 8061683:	e9 ea f9 ff ff       	jmp    8061072 <xstrtoul+0x752>
 8061688:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806168c:	89 3c 24             	mov    %edi,(%esp)
 806168f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061693:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061697:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806169b:	b9 32 c1 00 00       	mov    $0xc132,%ecx
 80616a0:	e8 b3 0c 00 00       	call   8062358 <__afl_maybe_log>
 80616a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80616a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80616ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80616b1:	8b 3c 24             	mov    (%esp),%edi
 80616b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80616b8:	31 d2                	xor    %edx,%edx
 80616ba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80616bf:	f7 f1                	div    %ecx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80616c1:	39 c6                	cmp    %eax,%esi
 80616c3:	0f 87 7d 0a 00 00    	ja     8062146 <xstrtoul+0x1826>
 80616c9:	8d 76 00             	lea    0x0(%esi),%esi
 80616cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80616d0:	89 3c 24             	mov    %edi,(%esp)
 80616d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80616d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80616db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80616df:	b9 e8 61 00 00       	mov    $0x61e8,%ecx
 80616e4:	e8 6f 0c 00 00       	call   8062358 <__afl_maybe_log>
 80616e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80616ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80616f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80616f5:	8b 3c 24             	mov    (%esp),%edi
 80616f8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80616fc:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80616ff:	39 f0                	cmp    %esi,%eax
 8061701:	0f 82 98 0b 00 00    	jb     806229f <xstrtoul+0x197f>
 8061707:	90                   	nop
 8061708:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806170c:	89 3c 24             	mov    %edi,(%esp)
 806170f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061713:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061717:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806171b:	b9 7c cf 00 00       	mov    $0xcf7c,%ecx
 8061720:	e8 33 0c 00 00       	call   8062358 <__afl_maybe_log>
 8061725:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061729:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806172d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061731:	8b 3c 24             	mov    (%esp),%edi
 8061734:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061738:	0f af f1             	imul   %ecx,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 806173b:	31 d2                	xor    %edx,%edx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 806173d:	39 f0                	cmp    %esi,%eax
 806173f:	0f 83 9b fe ff ff    	jae    80615e0 <xstrtoul+0xcc0>
 8061745:	8d 76 00             	lea    0x0(%esi),%esi
 8061748:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806174c:	89 3c 24             	mov    %edi,(%esp)
 806174f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061753:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061757:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806175b:	b9 72 7a 00 00       	mov    $0x7a72,%ecx
 8061760:	e8 f3 0b 00 00       	call   8062358 <__afl_maybe_log>
 8061765:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061769:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806176d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061771:	8b 3c 24             	mov    (%esp),%edi
 8061774:	8d 64 24 10          	lea    0x10(%esp),%esp
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8061778:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806177c:	89 3c 24             	mov    %edi,(%esp)
 806177f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061783:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061787:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806178b:	b9 55 87 00 00       	mov    $0x8755,%ecx
 8061790:	e8 c3 0b 00 00       	call   8062358 <__afl_maybe_log>
 8061795:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061799:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806179d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80617a1:	8b 3c 24             	mov    (%esp),%edi
 80617a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80617a8:	83 ca 01             	or     $0x1,%edx
 80617ab:	90                   	nop
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 80617ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80617b0:	89 3c 24             	mov    %edi,(%esp)
 80617b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80617b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80617bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80617bf:	b9 f1 59 00 00       	mov    $0x59f1,%ecx
 80617c4:	e8 8f 0b 00 00       	call   8062358 <__afl_maybe_log>
 80617c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80617cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80617d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80617d5:	8b 3c 24             	mov    (%esp),%edi
 80617d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80617dc:	b8 01 00 00 00       	mov    $0x1,%eax
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 80617e1:	be ff ff ff ff       	mov    $0xffffffff,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 80617e6:	09 c2                	or     %eax,%edx
 80617e8:	e9 85 f8 ff ff       	jmp    8061072 <xstrtoul+0x752>
 80617ed:	8d 76 00             	lea    0x0(%esi),%esi
 80617f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80617f4:	89 3c 24             	mov    %edi,(%esp)
 80617f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80617fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80617ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061803:	b9 c5 ff 00 00       	mov    $0xffc5,%ecx
 8061808:	e8 4b 0b 00 00       	call   8062358 <__afl_maybe_log>
 806180d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061811:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061815:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061819:	8b 3c 24             	mov    (%esp),%edi
 806181c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061820:	31 d2                	xor    %edx,%edx
 8061822:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8061827:	f7 f1                	div    %ecx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061829:	39 f0                	cmp    %esi,%eax
 806182b:	0f 82 51 09 00 00    	jb     8062182 <xstrtoul+0x1862>
 8061831:	8d 76 00             	lea    0x0(%esi),%esi
 8061834:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061838:	89 3c 24             	mov    %edi,(%esp)
 806183b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806183f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061843:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061847:	b9 60 b1 00 00       	mov    $0xb160,%ecx
 806184c:	e8 07 0b 00 00       	call   8062358 <__afl_maybe_log>
 8061851:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061855:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061859:	8b 54 24 04          	mov    0x4(%esp),%edx
 806185d:	8b 3c 24             	mov    (%esp),%edi
 8061860:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061864:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061867:	39 c6                	cmp    %eax,%esi
 8061869:	0f 87 f8 09 00 00    	ja     8062267 <xstrtoul+0x1947>
 806186f:	90                   	nop
 8061870:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061874:	89 3c 24             	mov    %edi,(%esp)
 8061877:	89 54 24 04          	mov    %edx,0x4(%esp)
 806187b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806187f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061883:	b9 d1 fd 00 00       	mov    $0xfdd1,%ecx
 8061888:	e8 cb 0a 00 00       	call   8062358 <__afl_maybe_log>
 806188d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061891:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061895:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061899:	8b 3c 24             	mov    (%esp),%edi
 806189c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80618a0:	0f af f1             	imul   %ecx,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 80618a3:	31 d2                	xor    %edx,%edx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 80618a5:	39 c6                	cmp    %eax,%esi
 80618a7:	0f 86 c7 fc ff ff    	jbe    8061574 <xstrtoul+0xc54>
 80618ad:	8d 76 00             	lea    0x0(%esi),%esi
 80618b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80618b4:	89 3c 24             	mov    %edi,(%esp)
 80618b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80618bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80618bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80618c3:	b9 c5 a9 00 00       	mov    $0xa9c5,%ecx
 80618c8:	e8 8b 0a 00 00       	call   8062358 <__afl_maybe_log>
 80618cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80618d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80618d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80618d9:	8b 3c 24             	mov    (%esp),%edi
 80618dc:	8d 64 24 10          	lea    0x10(%esp),%esp
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 80618e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80618e4:	89 3c 24             	mov    %edi,(%esp)
 80618e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80618eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80618ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80618f3:	b9 b8 96 00 00       	mov    $0x96b8,%ecx
 80618f8:	e8 5b 0a 00 00       	call   8062358 <__afl_maybe_log>
 80618fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061901:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061905:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061909:	8b 3c 24             	mov    (%esp),%edi
 806190c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061910:	83 ca 01             	or     $0x1,%edx
 8061913:	e9 60 fe ff ff       	jmp    8061778 <xstrtoul+0xe58>
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061918:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806191c:	89 3c 24             	mov    %edi,(%esp)
 806191f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061923:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061927:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806192b:	b9 7d 13 00 00       	mov    $0x137d,%ecx
 8061930:	e8 23 0a 00 00       	call   8062358 <__afl_maybe_log>
 8061935:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061939:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806193d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061941:	8b 3c 24             	mov    (%esp),%edi
 8061944:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061948:	31 d2                	xor    %edx,%edx
 806194a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 806194f:	f7 f1                	div    %ecx
 8061951:	39 c6                	cmp    %eax,%esi
 8061953:	0f 87 37 07 00 00    	ja     8062090 <xstrtoul+0x1770>
 8061959:	8d 76 00             	lea    0x0(%esi),%esi
 806195c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061960:	89 3c 24             	mov    %edi,(%esp)
 8061963:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061967:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806196b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806196f:	b9 2b cd 00 00       	mov    $0xcd2b,%ecx
 8061974:	e8 df 09 00 00       	call   8062358 <__afl_maybe_log>
 8061979:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806197d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061981:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061985:	8b 3c 24             	mov    (%esp),%edi
 8061988:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 806198c:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 806198f:	39 f0                	cmp    %esi,%eax
 8061991:	0f 82 f9 06 00 00    	jb     8062090 <xstrtoul+0x1770>
 8061997:	90                   	nop
 8061998:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806199c:	89 3c 24             	mov    %edi,(%esp)
 806199f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80619a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80619a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80619ab:	b9 f9 fd 00 00       	mov    $0xfdf9,%ecx
 80619b0:	e8 a3 09 00 00       	call   8062358 <__afl_maybe_log>
 80619b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80619b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80619bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80619c1:	8b 3c 24             	mov    (%esp),%edi
 80619c4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 80619c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80619cc:	89 3c 24             	mov    %edi,(%esp)
 80619cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80619d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80619d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80619db:	b9 a9 04 00 00       	mov    $0x4a9,%ecx
 80619e0:	e8 73 09 00 00       	call   8062358 <__afl_maybe_log>
 80619e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80619e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80619ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80619f1:	8b 3c 24             	mov    (%esp),%edi
 80619f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80619f8:	0f af f1             	imul   %ecx,%esi
  return LONGINT_OK;
 80619fb:	31 d2                	xor    %edx,%edx
 80619fd:	e9 70 f6 ff ff       	jmp    8061072 <xstrtoul+0x752>
 8061a02:	66 90                	xchg   %ax,%ax
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061a04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061a08:	89 3c 24             	mov    %edi,(%esp)
 8061a0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061a0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061a13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061a17:	b9 36 c3 00 00       	mov    $0xc336,%ecx
 8061a1c:	e8 37 09 00 00       	call   8062358 <__afl_maybe_log>
 8061a21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061a25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061a29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061a2d:	8b 3c 24             	mov    (%esp),%edi
 8061a30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061a34:	31 d2                	xor    %edx,%edx
 8061a36:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8061a3b:	f7 f1                	div    %ecx
 8061a3d:	39 c6                	cmp    %eax,%esi
 8061a3f:	76 87                	jbe    80619c8 <xstrtoul+0x10a8>
 8061a41:	8d 76 00             	lea    0x0(%esi),%esi
 8061a44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061a48:	89 3c 24             	mov    %edi,(%esp)
 8061a4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061a4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061a53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061a57:	b9 12 f7 00 00       	mov    $0xf712,%ecx
 8061a5c:	e8 f7 08 00 00       	call   8062358 <__afl_maybe_log>
 8061a61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061a65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061a69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061a6d:	8b 3c 24             	mov    (%esp),%edi
 8061a70:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
 8061a74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061a78:	89 3c 24             	mov    %edi,(%esp)
 8061a7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061a7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061a83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061a87:	b9 ba 80 00 00       	mov    $0x80ba,%ecx
 8061a8c:	e8 c7 08 00 00       	call   8062358 <__afl_maybe_log>
 8061a91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061a95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061a99:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061a9d:	8b 3c 24             	mov    (%esp),%edi
 8061aa0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061aa4:	be ff ff ff ff       	mov    $0xffffffff,%esi
      return LONGINT_OVERFLOW;
 8061aa9:	ba 01 00 00 00       	mov    $0x1,%edx
 8061aae:	e9 bf f5 ff ff       	jmp    8061072 <xstrtoul+0x752>
 8061ab3:	90                   	nop
 8061ab4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061ab8:	89 3c 24             	mov    %edi,(%esp)
 8061abb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061abf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061ac3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061ac7:	b9 80 b6 00 00       	mov    $0xb680,%ecx
 8061acc:	e8 87 08 00 00       	call   8062358 <__afl_maybe_log>
 8061ad1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061ad5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061ad9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061add:	8b 3c 24             	mov    (%esp),%edi
 8061ae0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061ae4:	31 d2                	xor    %edx,%edx
 8061ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8061aeb:	f7 f1                	div    %ecx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061aed:	39 c6                	cmp    %eax,%esi
 8061aef:	0f 87 da 05 00 00    	ja     80620cf <xstrtoul+0x17af>
 8061af5:	8d 76 00             	lea    0x0(%esi),%esi
 8061af8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061afc:	89 3c 24             	mov    %edi,(%esp)
 8061aff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061b03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061b07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061b0b:	b9 2b ed 00 00       	mov    $0xed2b,%ecx
 8061b10:	e8 43 08 00 00       	call   8062358 <__afl_maybe_log>
 8061b15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061b19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061b1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061b21:	8b 3c 24             	mov    (%esp),%edi
 8061b24:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061b28:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061b2b:	89 c2                	mov    %eax,%edx
 8061b2d:	39 c6                	cmp    %eax,%esi
 8061b2f:	0f 87 c2 06 00 00    	ja     80621f7 <xstrtoul+0x18d7>
 8061b35:	8d 76 00             	lea    0x0(%esi),%esi
 8061b38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061b3c:	89 3c 24             	mov    %edi,(%esp)
 8061b3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061b43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061b47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061b4b:	b9 6f 5a 00 00       	mov    $0x5a6f,%ecx
 8061b50:	e8 03 08 00 00       	call   8062358 <__afl_maybe_log>
 8061b55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061b59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061b5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061b61:	8b 3c 24             	mov    (%esp),%edi
 8061b64:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061b68:	0f af f1             	imul   %ecx,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8061b6b:	31 c0                	xor    %eax,%eax
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061b6d:	39 d6                	cmp    %edx,%esi
 8061b6f:	0f 87 6e 04 00 00    	ja     8061fe3 <xstrtoul+0x16c3>
 8061b75:	8d 76 00             	lea    0x0(%esi),%esi
 8061b78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061b7c:	89 3c 24             	mov    %edi,(%esp)
 8061b7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061b83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061b87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061b8b:	b9 3b 02 00 00       	mov    $0x23b,%ecx
 8061b90:	e8 c3 07 00 00       	call   8062358 <__afl_maybe_log>
 8061b95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061b99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061b9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061ba1:	8b 3c 24             	mov    (%esp),%edi
 8061ba4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061ba8:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061bab:	39 d6                	cmp    %edx,%esi
 8061bad:	0f 87 64 04 00 00    	ja     8062017 <xstrtoul+0x16f7>
 8061bb3:	90                   	nop
 8061bb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061bb8:	89 3c 24             	mov    %edi,(%esp)
 8061bbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061bbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061bc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061bc7:	b9 cf 36 00 00       	mov    $0x36cf,%ecx
 8061bcc:	e8 87 07 00 00       	call   8062358 <__afl_maybe_log>
 8061bd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061bd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061bd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061bdd:	8b 3c 24             	mov    (%esp),%edi
 8061be0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061be4:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061be7:	39 f2                	cmp    %esi,%edx
 8061be9:	0f 82 5c 04 00 00    	jb     806204b <xstrtoul+0x172b>
 8061bef:	90                   	nop
 8061bf0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061bf4:	89 3c 24             	mov    %edi,(%esp)
 8061bf7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061bfb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061bff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061c03:	b9 db 4e 00 00       	mov    $0x4edb,%ecx
 8061c08:	e8 4b 07 00 00       	call   8062358 <__afl_maybe_log>
 8061c0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061c11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061c15:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061c19:	8b 3c 24             	mov    (%esp),%edi
 8061c1c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061c20:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061c23:	39 d6                	cmp    %edx,%esi
 8061c25:	0f 86 69 f7 ff ff    	jbe    8061394 <xstrtoul+0xa74>
 8061c2b:	90                   	nop
 8061c2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061c30:	89 3c 24             	mov    %edi,(%esp)
 8061c33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061c37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061c3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061c3f:	b9 cb a0 00 00       	mov    $0xa0cb,%ecx
 8061c44:	e8 0f 07 00 00       	call   8062358 <__afl_maybe_log>
 8061c49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061c4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061c51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061c55:	8b 3c 24             	mov    (%esp),%edi
 8061c58:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 8061c5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061c60:	89 3c 24             	mov    %edi,(%esp)
 8061c63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061c67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061c6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061c6f:	b9 48 0e 00 00       	mov    $0xe48,%ecx
 8061c74:	e8 df 06 00 00       	call   8062358 <__afl_maybe_log>
 8061c79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061c7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061c81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061c85:	8b 3c 24             	mov    (%esp),%edi
 8061c88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061c8c:	ba 01 00 00 00       	mov    $0x1,%edx
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 8061c91:	be ff ff ff ff       	mov    $0xffffffff,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8061c96:	09 c2                	or     %eax,%edx
 8061c98:	e9 d5 f3 ff ff       	jmp    8061072 <xstrtoul+0x752>
 8061c9d:	8d 76 00             	lea    0x0(%esi),%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061ca0:	81 fe ff ff 3f 00    	cmp    $0x3fffff,%esi
 8061ca6:	0f 87 c8 fd ff ff    	ja     8061a74 <xstrtoul+0x1154>
 8061cac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061cb0:	89 3c 24             	mov    %edi,(%esp)
 8061cb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061cb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061cbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061cbf:	b9 c6 21 00 00       	mov    $0x21c6,%ecx
 8061cc4:	e8 8f 06 00 00       	call   8062358 <__afl_maybe_log>
 8061cc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061ccd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061cd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061cd5:	8b 3c 24             	mov    (%esp),%edi
 8061cd8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061cdc:	c1 e6 0a             	shl    $0xa,%esi
  return LONGINT_OK;
 8061cdf:	31 d2                	xor    %edx,%edx
 8061ce1:	e9 8c f3 ff ff       	jmp    8061072 <xstrtoul+0x752>
 8061ce6:	66 90                	xchg   %ax,%ax
 8061ce8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061cec:	89 3c 24             	mov    %edi,(%esp)
 8061cef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061cf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061cf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061cfb:	b9 46 0f 00 00       	mov    $0xf46,%ecx
 8061d00:	e8 53 06 00 00       	call   8062358 <__afl_maybe_log>
 8061d05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061d09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061d0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061d11:	8b 3c 24             	mov    (%esp),%edi
 8061d14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061d18:	31 d2                	xor    %edx,%edx
 8061d1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8061d1f:	f7 f1                	div    %ecx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061d21:	39 c6                	cmp    %eax,%esi
 8061d23:	0f 87 e1 03 00 00    	ja     806210a <xstrtoul+0x17ea>
 8061d29:	8d 76 00             	lea    0x0(%esi),%esi
 8061d2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061d30:	89 3c 24             	mov    %edi,(%esp)
 8061d33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061d37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061d3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061d3f:	b9 cd 06 00 00       	mov    $0x6cd,%ecx
 8061d44:	e8 0f 06 00 00       	call   8062358 <__afl_maybe_log>
 8061d49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061d4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061d51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061d55:	8b 3c 24             	mov    (%esp),%edi
 8061d58:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061d5c:	0f af f1             	imul   %ecx,%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061d5f:	39 c6                	cmp    %eax,%esi
 8061d61:	0f 87 c8 04 00 00    	ja     806222f <xstrtoul+0x190f>
 8061d67:	90                   	nop
 8061d68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061d6c:	89 3c 24             	mov    %edi,(%esp)
 8061d6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061d73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061d77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061d7b:	b9 64 0c 00 00       	mov    $0xc64,%ecx
 8061d80:	e8 d3 05 00 00       	call   8062358 <__afl_maybe_log>
 8061d85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061d89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061d8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061d91:	8b 3c 24             	mov    (%esp),%edi
 8061d94:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 8061d98:	0f af f1             	imul   %ecx,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8061d9b:	31 d2                	xor    %edx,%edx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8061d9d:	39 c6                	cmp    %eax,%esi
 8061d9f:	0f 86 a7 f8 ff ff    	jbe    806164c <xstrtoul+0xd2c>
 8061da5:	8d 76 00             	lea    0x0(%esi),%esi
 8061da8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061dac:	89 3c 24             	mov    %edi,(%esp)
 8061daf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061db3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061db7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061dbb:	b9 ba fa 00 00       	mov    $0xfaba,%ecx
 8061dc0:	e8 93 05 00 00       	call   8062358 <__afl_maybe_log>
 8061dc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061dc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061dcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061dd1:	8b 3c 24             	mov    (%esp),%edi
 8061dd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061dd8:	e9 ce f9 ff ff       	jmp    80617ab <xstrtoul+0xe8b>
 8061ddd:	8d 76 00             	lea    0x0(%esi),%esi

          switch (p[0][1])
            {
            case 'i':
              if (p[0][2] == 'B')
                suffixes += 2;
 8061de0:	31 c0                	xor    %eax,%eax
 8061de2:	80 7d 02 42          	cmpb   $0x42,0x2(%ebp)
 8061de6:	b9 00 04 00 00       	mov    $0x400,%ecx
 8061deb:	0f 94 c0             	sete   %al
 8061dee:	8d 7c 00 01          	lea    0x1(%eax,%eax,1),%edi
 8061df2:	e9 af f0 ff ff       	jmp    8060ea6 <xstrtoul+0x586>
 8061df7:	90                   	nop
              break;

            case 'B':
            case 'D': /* 'D' is obsolescent */
              base = 1000;
              suffixes++;
 8061df8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061dfc:	89 3c 24             	mov    %edi,(%esp)
 8061dff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061e03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061e07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061e0b:	b9 d8 1f 00 00       	mov    $0x1fd8,%ecx
 8061e10:	e8 43 05 00 00       	call   8062358 <__afl_maybe_log>
 8061e15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061e19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061e1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061e21:	8b 3c 24             	mov    (%esp),%edi
 8061e24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061e28:	bf 02 00 00 00       	mov    $0x2,%edi
                suffixes += 2;
              break;

            case 'B':
            case 'D': /* 'D' is obsolescent */
              base = 1000;
 8061e2d:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
 8061e32:	e9 6f f0 ff ff       	jmp    8060ea6 <xstrtoul+0x586>
 8061e37:	90                   	nop
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 8061e38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061e3c:	89 3c 24             	mov    %edi,(%esp)
 8061e3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061e43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061e47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061e4b:	b9 05 2e 00 00       	mov    $0x2e05,%ecx
 8061e50:	e8 03 05 00 00       	call   8062358 <__afl_maybe_log>
 8061e55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061e59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061e5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061e61:	8b 3c 24             	mov    (%esp),%edi
 8061e64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061e68:	ba 01 00 00 00       	mov    $0x1,%edx
 8061e6d:	8d 76 00             	lea    0x0(%esi),%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8061e70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061e74:	89 3c 24             	mov    %edi,(%esp)
 8061e77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061e7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061e7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061e83:	b9 27 4e 00 00       	mov    $0x4e27,%ecx
 8061e88:	e8 cb 04 00 00       	call   8062358 <__afl_maybe_log>
 8061e8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061e91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061e95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061e99:	8b 3c 24             	mov    (%esp),%edi
 8061e9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061ea0:	83 ca 01             	or     $0x1,%edx
 8061ea3:	90                   	nop
 8061ea4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061ea8:	89 3c 24             	mov    %edi,(%esp)
 8061eab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061eaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061eb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061eb7:	b9 2f 14 00 00       	mov    $0x142f,%ecx
 8061ebc:	e8 97 04 00 00       	call   8062358 <__afl_maybe_log>
 8061ec1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061ec5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061ec9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061ecd:	8b 3c 24             	mov    (%esp),%edi
 8061ed0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061ed4:	83 ca 01             	or     $0x1,%edx
 8061ed7:	90                   	nop
 8061ed8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061edc:	89 3c 24             	mov    %edi,(%esp)
 8061edf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061ee3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061ee7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061eeb:	b9 4d 62 00 00       	mov    $0x624d,%ecx
 8061ef0:	e8 63 04 00 00       	call   8062358 <__afl_maybe_log>
 8061ef5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061ef9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061efd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061f01:	8b 3c 24             	mov    (%esp),%edi
 8061f04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061f08:	83 ca 01             	or     $0x1,%edx
 8061f0b:	90                   	nop
 8061f0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061f10:	89 3c 24             	mov    %edi,(%esp)
 8061f13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061f17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061f1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061f1f:	b9 cb 02 00 00       	mov    $0x2cb,%ecx
 8061f24:	e8 2f 04 00 00       	call   8062358 <__afl_maybe_log>
 8061f29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061f2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061f31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061f35:	8b 3c 24             	mov    (%esp),%edi
 8061f38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061f3c:	83 ca 01             	or     $0x1,%edx
 8061f3f:	e9 9c f9 ff ff       	jmp    80618e0 <xstrtoul+0xfc0>
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 8061f44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061f48:	89 3c 24             	mov    %edi,(%esp)
 8061f4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061f4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061f53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061f57:	b9 06 ca 00 00       	mov    $0xca06,%ecx
 8061f5c:	e8 f7 03 00 00       	call   8062358 <__afl_maybe_log>
 8061f61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061f65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061f69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061f6d:	8b 3c 24             	mov    (%esp),%edi
 8061f70:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061f74:	b8 01 00 00 00       	mov    $0x1,%eax
 8061f79:	8d 76 00             	lea    0x0(%esi),%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8061f7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061f80:	89 3c 24             	mov    %edi,(%esp)
 8061f83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061f87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061f8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061f8f:	b9 bd cd 00 00       	mov    $0xcdbd,%ecx
 8061f94:	e8 bf 03 00 00       	call   8062358 <__afl_maybe_log>
 8061f99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061f9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061fa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061fa5:	8b 3c 24             	mov    (%esp),%edi
 8061fa8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061fac:	83 c8 01             	or     $0x1,%eax
 8061faf:	90                   	nop
 8061fb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061fb4:	89 3c 24             	mov    %edi,(%esp)
 8061fb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061fbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061fbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061fc3:	b9 47 4a 00 00       	mov    $0x4a47,%ecx
 8061fc8:	e8 8b 03 00 00       	call   8062358 <__afl_maybe_log>
 8061fcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061fd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061fd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061fd9:	8b 3c 24             	mov    (%esp),%edi
 8061fdc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061fe0:	83 c8 01             	or     $0x1,%eax
 8061fe3:	90                   	nop
 8061fe4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061fe8:	89 3c 24             	mov    %edi,(%esp)
 8061feb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061fef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061ff3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061ff7:	b9 55 a2 00 00       	mov    $0xa255,%ecx
 8061ffc:	e8 57 03 00 00       	call   8062358 <__afl_maybe_log>
 8062001:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062005:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062009:	8b 54 24 04          	mov    0x4(%esp),%edx
 806200d:	8b 3c 24             	mov    (%esp),%edi
 8062010:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062014:	83 c8 01             	or     $0x1,%eax
 8062017:	90                   	nop
 8062018:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806201c:	89 3c 24             	mov    %edi,(%esp)
 806201f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062023:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062027:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806202b:	b9 cb fd 00 00       	mov    $0xfdcb,%ecx
 8062030:	e8 23 03 00 00       	call   8062358 <__afl_maybe_log>
 8062035:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062039:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806203d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062041:	8b 3c 24             	mov    (%esp),%edi
 8062044:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062048:	83 c8 01             	or     $0x1,%eax
 806204b:	90                   	nop
 806204c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062050:	89 3c 24             	mov    %edi,(%esp)
 8062053:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062057:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806205b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806205f:	b9 a9 9b 00 00       	mov    $0x9ba9,%ecx
 8062064:	e8 ef 02 00 00       	call   8062358 <__afl_maybe_log>
 8062069:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806206d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062071:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062075:	8b 3c 24             	mov    (%esp),%edi
 8062078:	8d 64 24 10          	lea    0x10(%esp),%esp
 806207c:	83 c8 01             	or     $0x1,%eax
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 806207f:	ba 01 00 00 00       	mov    $0x1,%edx
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 8062084:	be ff ff ff ff       	mov    $0xffffffff,%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 8062089:	09 c2                	or     %eax,%edx
 806208b:	e9 e2 ef ff ff       	jmp    8061072 <xstrtoul+0x752>
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 8062090:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062094:	89 3c 24             	mov    %edi,(%esp)
 8062097:	89 54 24 04          	mov    %edx,0x4(%esp)
 806209b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806209f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80620a3:	b9 f6 b1 00 00       	mov    $0xb1f6,%ecx
 80620a8:	e8 ab 02 00 00       	call   8062358 <__afl_maybe_log>
 80620ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80620b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80620b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80620b9:	8b 3c 24             	mov    (%esp),%edi
 80620bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80620c0:	ba 01 00 00 00       	mov    $0x1,%edx
    {
      *x = STRTOL_T_MAXIMUM;
 80620c5:	be ff ff ff ff       	mov    $0xffffffff,%esi
          break;

        case 'M': /* mega or mebi */
        case 'm': /* 'm' is undocumented; for compatibility only */
          overflow = bkm_scale_by_power (&tmp, base, 2);
          break;
 80620ca:	e9 a3 ef ff ff       	jmp    8061072 <xstrtoul+0x752>
 80620cf:	90                   	nop
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 80620d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80620d4:	89 3c 24             	mov    %edi,(%esp)
 80620d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80620db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80620df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80620e3:	b9 ea 11 00 00       	mov    $0x11ea,%ecx
 80620e8:	e8 6b 02 00 00       	call   8062358 <__afl_maybe_log>
 80620ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80620f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80620f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80620f9:	8b 3c 24             	mov    (%esp),%edi
 80620fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062100:	b8 01 00 00 00       	mov    $0x1,%eax
 8062105:	e9 a5 fe ff ff       	jmp    8061faf <xstrtoul+0x168f>
 806210a:	66 90                	xchg   %ax,%ax
 806210c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062110:	89 3c 24             	mov    %edi,(%esp)
 8062113:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062117:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806211b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806211f:	b9 e7 cd 00 00       	mov    $0xcde7,%ecx
 8062124:	e8 2f 02 00 00       	call   8062358 <__afl_maybe_log>
 8062129:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806212d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062131:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062135:	8b 3c 24             	mov    (%esp),%edi
 8062138:	8d 64 24 10          	lea    0x10(%esp),%esp
 806213c:	ba 01 00 00 00       	mov    $0x1,%edx
 8062141:	e9 32 f6 ff ff       	jmp    8061778 <xstrtoul+0xe58>
 8062146:	66 90                	xchg   %ax,%ax
 8062148:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806214c:	89 3c 24             	mov    %edi,(%esp)
 806214f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062153:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062157:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806215b:	b9 d2 89 00 00       	mov    $0x89d2,%ecx
 8062160:	e8 f3 01 00 00       	call   8062358 <__afl_maybe_log>
 8062165:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062169:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806216d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062171:	8b 3c 24             	mov    (%esp),%edi
 8062174:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062178:	ba 01 00 00 00       	mov    $0x1,%edx
 806217d:	e9 5e f7 ff ff       	jmp    80618e0 <xstrtoul+0xfc0>
 8062182:	66 90                	xchg   %ax,%ax
 8062184:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062188:	89 3c 24             	mov    %edi,(%esp)
 806218b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806218f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062193:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062197:	b9 23 37 00 00       	mov    $0x3723,%ecx
 806219c:	e8 b7 01 00 00       	call   8062358 <__afl_maybe_log>
 80621a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80621a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80621a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80621ad:	8b 3c 24             	mov    (%esp),%edi
 80621b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80621b4:	ba 01 00 00 00       	mov    $0x1,%edx
 80621b9:	e9 4d fd ff ff       	jmp    8061f0b <xstrtoul+0x15eb>
 80621be:	66 90                	xchg   %ax,%ax
    }
  *x *= scale_factor;
  return LONGINT_OK;
 80621c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80621c4:	89 3c 24             	mov    %edi,(%esp)
 80621c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80621cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80621cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80621d3:	b9 19 c4 00 00       	mov    $0xc419,%ecx
 80621d8:	e8 7b 01 00 00       	call   8062358 <__afl_maybe_log>
 80621dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80621e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80621e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80621e9:	8b 3c 24             	mov    (%esp),%edi
 80621ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80621f0:	31 d2                	xor    %edx,%edx
 80621f2:	e9 76 fc ff ff       	jmp    8061e6d <xstrtoul+0x154d>
 80621f7:	90                   	nop
 80621f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80621fc:	89 3c 24             	mov    %edi,(%esp)
 80621ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062203:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062207:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806220b:	b9 08 d3 00 00       	mov    $0xd308,%ecx
 8062210:	e8 43 01 00 00       	call   8062358 <__afl_maybe_log>
 8062215:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062219:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806221d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062221:	8b 3c 24             	mov    (%esp),%edi
 8062224:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062228:	31 c0                	xor    %eax,%eax
 806222a:	e9 80 fd ff ff       	jmp    8061faf <xstrtoul+0x168f>
 806222f:	90                   	nop
 8062230:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062234:	89 3c 24             	mov    %edi,(%esp)
 8062237:	89 54 24 04          	mov    %edx,0x4(%esp)
 806223b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806223f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062243:	b9 e1 2d 00 00       	mov    $0x2de1,%ecx
 8062248:	e8 0b 01 00 00       	call   8062358 <__afl_maybe_log>
 806224d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062251:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062255:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062259:	8b 3c 24             	mov    (%esp),%edi
 806225c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062260:	31 d2                	xor    %edx,%edx
 8062262:	e9 11 f5 ff ff       	jmp    8061778 <xstrtoul+0xe58>
 8062267:	90                   	nop
 8062268:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806226c:	89 3c 24             	mov    %edi,(%esp)
 806226f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062273:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062277:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806227b:	b9 b2 ee 00 00       	mov    $0xeeb2,%ecx
 8062280:	e8 d3 00 00 00       	call   8062358 <__afl_maybe_log>
 8062285:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062289:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806228d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062291:	8b 3c 24             	mov    (%esp),%edi
 8062294:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062298:	31 d2                	xor    %edx,%edx
 806229a:	e9 6c fc ff ff       	jmp    8061f0b <xstrtoul+0x15eb>
 806229f:	90                   	nop
 80622a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80622a4:	89 3c 24             	mov    %edi,(%esp)
 80622a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80622ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80622af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80622b3:	b9 72 ce 00 00       	mov    $0xce72,%ecx
 80622b8:	e8 9b 00 00 00       	call   8062358 <__afl_maybe_log>
 80622bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80622c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80622c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80622c9:	8b 3c 24             	mov    (%esp),%edi
 80622cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80622d0:	31 d2                	xor    %edx,%edx
 80622d2:	e9 09 f6 ff ff       	jmp    80618e0 <xstrtoul+0xfc0>
 80622d7:	90                   	nop
 80622d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80622dc:	89 3c 24             	mov    %edi,(%esp)
 80622df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80622e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80622e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80622eb:	b9 52 82 00 00       	mov    $0x8252,%ecx
 80622f0:	e8 63 00 00 00       	call   8062358 <__afl_maybe_log>
 80622f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80622f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80622fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062301:	8b 3c 24             	mov    (%esp),%edi
 8062304:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062308:	31 c0                	xor    %eax,%eax
 806230a:	e9 6a fc ff ff       	jmp    8061f79 <xstrtoul+0x1659>
 806230f:	90                   	nop
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;

  assure (0 <= strtol_base && strtol_base <= 36);
 8062310:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062314:	89 3c 24             	mov    %edi,(%esp)
 8062317:	89 54 24 04          	mov    %edx,0x4(%esp)
 806231b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806231f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062323:	b9 8a 23 00 00       	mov    $0x238a,%ecx
 8062328:	e8 2b 00 00 00       	call   8062358 <__afl_maybe_log>
 806232d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062331:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062335:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062339:	8b 3c 24             	mov    (%esp),%edi
 806233c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062340:	68 80 6f 06 08       	push   $0x8066f80
 8062345:	6a 60                	push   $0x60
 8062347:	68 50 6e 06 08       	push   $0x8066e50
 806234c:	68 80 6e 06 08       	push   $0x8066e80
 8062351:	e8 da 71 fe ff       	call   8049530 <__assert_fail@plt>
 8062356:	66 90                	xchg   %ax,%ax

08062358 <__afl_maybe_log>:
 8062358:	9f                   	lahf   
 8062359:	0f 90 c0             	seto   %al
 806235c:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8062362:	85 d2                	test   %edx,%edx
 8062364:	74 22                	je     8062388 <__afl_setup>

08062366 <__afl_store>:
 8062366:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 806236c:	31 cf                	xor    %ecx,%edi
 806236e:	d1 e9                	shr    %ecx
 8062370:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8062376:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 806237a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0806237e <__afl_return>:
 806237e:	04 7f                	add    $0x7f,%al
 8062380:	9e                   	sahf   
 8062381:	c3                   	ret    
 8062382:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08062388 <__afl_setup>:
 8062388:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 806238f:	75 ed                	jne    806237e <__afl_return>
 8062391:	50                   	push   %eax
 8062392:	51                   	push   %ecx
 8062393:	68 90 24 06 08       	push   $0x8062490
 8062398:	e8 43 6f fe ff       	call   80492e0 <getenv@plt>
 806239d:	83 c4 04             	add    $0x4,%esp
 80623a0:	85 c0                	test   %eax,%eax
 80623a2:	0f 84 db 00 00 00    	je     8062483 <__afl_setup_abort>
 80623a8:	50                   	push   %eax
 80623a9:	e8 f2 70 fe ff       	call   80494a0 <atoi@plt>
 80623ae:	83 c4 04             	add    $0x4,%esp
 80623b1:	6a 00                	push   $0x0
 80623b3:	6a 00                	push   $0x0
 80623b5:	50                   	push   %eax
 80623b6:	e8 65 6e fe ff       	call   8049220 <shmat@plt>
 80623bb:	83 c4 0c             	add    $0xc,%esp
 80623be:	83 f8 ff             	cmp    $0xffffffff,%eax
 80623c1:	0f 84 bc 00 00 00    	je     8062483 <__afl_setup_abort>
 80623c7:	c6 00 01             	movb   $0x1,(%eax)
 80623ca:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 80623cf:	89 c2                	mov    %eax,%edx
 80623d1:	59                   	pop    %ecx
 80623d2:	58                   	pop    %eax

080623d3 <__afl_forkserver>:
 80623d3:	50                   	push   %eax
 80623d4:	51                   	push   %ecx
 80623d5:	52                   	push   %edx
 80623d6:	6a 04                	push   $0x4
 80623d8:	68 e0 ad 43 08       	push   $0x843ade0
 80623dd:	68 c7 00 00 00       	push   $0xc7
 80623e2:	e8 e9 6f fe ff       	call   80493d0 <write@plt>
 80623e7:	83 c4 0c             	add    $0xc,%esp
 80623ea:	83 f8 04             	cmp    $0x4,%eax
 80623ed:	75 6e                	jne    806245d <__afl_fork_resume>

080623ef <__afl_fork_wait_loop>:
 80623ef:	6a 04                	push   $0x4
 80623f1:	68 e0 ad 43 08       	push   $0x843ade0
 80623f6:	68 c6 00 00 00       	push   $0xc6
 80623fb:	e8 60 6d fe ff       	call   8049160 <read@plt>
 8062400:	83 c4 0c             	add    $0xc,%esp
 8062403:	83 f8 04             	cmp    $0x4,%eax
 8062406:	75 74                	jne    806247c <__afl_die>
 8062408:	e8 33 70 fe ff       	call   8049440 <fork@plt>
 806240d:	83 f8 00             	cmp    $0x0,%eax
 8062410:	7c 6a                	jl     806247c <__afl_die>
 8062412:	74 49                	je     806245d <__afl_fork_resume>
 8062414:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8062419:	6a 04                	push   $0x4
 806241b:	68 40 ae 43 08       	push   $0x843ae40
 8062420:	68 c7 00 00 00       	push   $0xc7
 8062425:	e8 a6 6f fe ff       	call   80493d0 <write@plt>
 806242a:	83 c4 0c             	add    $0xc,%esp
 806242d:	6a 00                	push   $0x0
 806242f:	68 e0 ad 43 08       	push   $0x843ade0
 8062434:	ff 35 40 ae 43 08    	pushl  0x843ae40
 806243a:	e8 31 6e fe ff       	call   8049270 <waitpid@plt>
 806243f:	83 c4 0c             	add    $0xc,%esp
 8062442:	83 f8 00             	cmp    $0x0,%eax
 8062445:	7e 35                	jle    806247c <__afl_die>
 8062447:	6a 04                	push   $0x4
 8062449:	68 e0 ad 43 08       	push   $0x843ade0
 806244e:	68 c7 00 00 00       	push   $0xc7
 8062453:	e8 78 6f fe ff       	call   80493d0 <write@plt>
 8062458:	83 c4 0c             	add    $0xc,%esp
 806245b:	eb 92                	jmp    80623ef <__afl_fork_wait_loop>

0806245d <__afl_fork_resume>:
 806245d:	68 c6 00 00 00       	push   $0xc6
 8062462:	e8 b9 70 fe ff       	call   8049520 <close@plt>
 8062467:	68 c7 00 00 00       	push   $0xc7
 806246c:	e8 af 70 fe ff       	call   8049520 <close@plt>
 8062471:	83 c4 08             	add    $0x8,%esp
 8062474:	5a                   	pop    %edx
 8062475:	59                   	pop    %ecx
 8062476:	58                   	pop    %eax
 8062477:	e9 ea fe ff ff       	jmp    8062366 <__afl_store>

0806247c <__afl_die>:
 806247c:	31 c0                	xor    %eax,%eax
 806247e:	e8 0d 6d fe ff       	call   8049190 <_exit@plt>

08062483 <__afl_setup_abort>:
 8062483:	fe 05 60 ae 43 08    	incb   0x843ae60
 8062489:	59                   	pop    %ecx
 806248a:	58                   	pop    %eax
 806248b:	e9 ee fe ff ff       	jmp    806237e <__afl_return>

08062490 <.AFL_SHM_ENV>:
 8062490:	5f                   	pop    %edi
 8062491:	5f                   	pop    %edi
 8062492:	41                   	inc    %ecx
 8062493:	46                   	inc    %esi
 8062494:	4c                   	dec    %esp
 8062495:	5f                   	pop    %edi
 8062496:	53                   	push   %ebx
 8062497:	48                   	dec    %eax
 8062498:	4d                   	dec    %ebp
 8062499:	5f                   	pop    %edi
 806249a:	49                   	dec    %ecx
 806249b:	44                   	inc    %esp
 806249c:	00 66 90             	add    %ah,-0x70(%esi)
 806249f:	90                   	nop

080624a0 <rpl_fclose>:

/* Override fclose() to call the overridden fflush() or close().  */

int
rpl_fclose (FILE *fp)
{
 80624a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80624a4:	89 3c 24             	mov    %edi,(%esp)
 80624a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80624ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80624af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80624b3:	b9 39 f1 00 00       	mov    $0xf139,%ecx
 80624b8:	e8 53 0a 00 00       	call   8062f10 <__afl_maybe_log>
 80624bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80624c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80624c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80624c9:	8b 3c 24             	mov    (%esp),%edi
 80624cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80624d0:	55                   	push   %ebp
 80624d1:	57                   	push   %edi
 80624d2:	56                   	push   %esi
 80624d3:	53                   	push   %ebx
 80624d4:	83 ec 28             	sub    $0x28,%esp
 80624d7:	8b 5c 24 3c          	mov    0x3c(%esp),%ebx
  int saved_errno = 0;
  int fd;
  int result = 0;

  /* Don't change behavior on memstreams.  */
  fd = fileno (fp+(lava_get(293))*(0x6c61753c==(lava_get(293))||0x3c75616c==(lava_get(293)))+(lava_get(296))*(0x6c617539==(lava_get(296))||0x3975616c==(lava_get(296)))+(lava_get(297))*(0x6c617538==(lava_get(297))||0x3875616c==(lava_get(297))));
 80624db:	68 25 01 00 00       	push   $0x125
 80624e0:	e8 eb 13 ff ff       	call   80538d0 <lava_get>
 80624e5:	c7 04 24 25 01 00 00 	movl   $0x125,(%esp)
 80624ec:	89 c7                	mov    %eax,%edi
 80624ee:	e8 dd 13 ff ff       	call   80538d0 <lava_get>
 80624f3:	83 c4 10             	add    $0x10,%esp
 80624f6:	3d 3c 75 61 6c       	cmp    $0x6c61753c,%eax
 80624fb:	ba 01 00 00 00       	mov    $0x1,%edx
 8062500:	74 4c                	je     806254e <rpl_fclose+0xae>
 8062502:	66 90                	xchg   %ax,%ax
 8062504:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062508:	89 3c 24             	mov    %edi,(%esp)
 806250b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806250f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062513:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062517:	b9 68 34 00 00       	mov    $0x3468,%ecx
 806251c:	e8 ef 09 00 00       	call   8062f10 <__afl_maybe_log>
 8062521:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062525:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062529:	8b 54 24 04          	mov    0x4(%esp),%edx
 806252d:	8b 3c 24             	mov    (%esp),%edi
 8062530:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062534:	83 ec 0c             	sub    $0xc,%esp
 8062537:	68 25 01 00 00       	push   $0x125
 806253c:	e8 8f 13 ff ff       	call   80538d0 <lava_get>
 8062541:	31 d2                	xor    %edx,%edx
 8062543:	83 c4 10             	add    $0x10,%esp
 8062546:	3d 6c 61 75 3c       	cmp    $0x3c75616c,%eax
 806254b:	0f 94 c2             	sete   %dl
 806254e:	66 90                	xchg   %ax,%ax
 8062550:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062554:	89 3c 24             	mov    %edi,(%esp)
 8062557:	89 54 24 04          	mov    %edx,0x4(%esp)
 806255b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806255f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062563:	b9 2b 54 00 00       	mov    $0x542b,%ecx
 8062568:	e8 a3 09 00 00       	call   8062f10 <__afl_maybe_log>
 806256d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062571:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062575:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062579:	8b 3c 24             	mov    (%esp),%edi
 806257c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062580:	83 ec 0c             	sub    $0xc,%esp
 8062583:	0f af d7             	imul   %edi,%edx
 8062586:	68 28 01 00 00       	push   $0x128
 806258b:	89 d5                	mov    %edx,%ebp
 806258d:	e8 3e 13 ff ff       	call   80538d0 <lava_get>
 8062592:	c7 04 24 28 01 00 00 	movl   $0x128,(%esp)
 8062599:	89 c6                	mov    %eax,%esi
 806259b:	e8 30 13 ff ff       	call   80538d0 <lava_get>
 80625a0:	83 c4 10             	add    $0x10,%esp
 80625a3:	3d 39 75 61 6c       	cmp    $0x6c617539,%eax
 80625a8:	b9 01 00 00 00       	mov    $0x1,%ecx
 80625ad:	74 4b                	je     80625fa <rpl_fclose+0x15a>
 80625af:	90                   	nop
 80625b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80625b4:	89 3c 24             	mov    %edi,(%esp)
 80625b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80625bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80625bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80625c3:	b9 c4 f5 00 00       	mov    $0xf5c4,%ecx
 80625c8:	e8 43 09 00 00       	call   8062f10 <__afl_maybe_log>
 80625cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80625d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80625d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80625d9:	8b 3c 24             	mov    (%esp),%edi
 80625dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80625e0:	83 ec 0c             	sub    $0xc,%esp
 80625e3:	68 28 01 00 00       	push   $0x128
 80625e8:	e8 e3 12 ff ff       	call   80538d0 <lava_get>
 80625ed:	31 c9                	xor    %ecx,%ecx
 80625ef:	83 c4 10             	add    $0x10,%esp
 80625f2:	3d 6c 61 75 39       	cmp    $0x3975616c,%eax
 80625f7:	0f 94 c1             	sete   %cl
 80625fa:	66 90                	xchg   %ax,%ax
 80625fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062600:	89 3c 24             	mov    %edi,(%esp)
 8062603:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062607:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806260b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806260f:	b9 ac 86 00 00       	mov    $0x86ac,%ecx
 8062614:	e8 f7 08 00 00       	call   8062f10 <__afl_maybe_log>
 8062619:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806261d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062621:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062625:	8b 3c 24             	mov    (%esp),%edi
 8062628:	8d 64 24 10          	lea    0x10(%esp),%esp
 806262c:	83 ec 0c             	sub    $0xc,%esp
 806262f:	0f af f1             	imul   %ecx,%esi
 8062632:	68 29 01 00 00       	push   $0x129
 8062637:	e8 94 12 ff ff       	call   80538d0 <lava_get>
 806263c:	8d 3c 2e             	lea    (%esi,%ebp,1),%edi
 806263f:	c7 04 24 29 01 00 00 	movl   $0x129,(%esp)
 8062646:	89 c5                	mov    %eax,%ebp
 8062648:	e8 83 12 ff ff       	call   80538d0 <lava_get>
 806264d:	83 c4 10             	add    $0x10,%esp
 8062650:	3d 38 75 61 6c       	cmp    $0x6c617538,%eax
 8062655:	ba 01 00 00 00       	mov    $0x1,%edx
 806265a:	74 4a                	je     80626a6 <rpl_fclose+0x206>
 806265c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062660:	89 3c 24             	mov    %edi,(%esp)
 8062663:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062667:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806266b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806266f:	b9 ce ec 00 00       	mov    $0xecce,%ecx
 8062674:	e8 97 08 00 00       	call   8062f10 <__afl_maybe_log>
 8062679:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806267d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062681:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062685:	8b 3c 24             	mov    (%esp),%edi
 8062688:	8d 64 24 10          	lea    0x10(%esp),%esp
 806268c:	83 ec 0c             	sub    $0xc,%esp
 806268f:	68 29 01 00 00       	push   $0x129
 8062694:	e8 37 12 ff ff       	call   80538d0 <lava_get>
 8062699:	31 d2                	xor    %edx,%edx
 806269b:	83 c4 10             	add    $0x10,%esp
 806269e:	3d 6c 61 75 38       	cmp    $0x3875616c,%eax
 80626a3:	0f 94 c2             	sete   %dl
 80626a6:	66 90                	xchg   %ax,%ax
 80626a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80626ac:	89 3c 24             	mov    %edi,(%esp)
 80626af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80626b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80626b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80626bb:	b9 12 d3 00 00       	mov    $0xd312,%ecx
 80626c0:	e8 4b 08 00 00       	call   8062f10 <__afl_maybe_log>
 80626c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80626c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80626cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80626d1:	8b 3c 24             	mov    (%esp),%edi
 80626d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80626d8:	0f af ea             	imul   %edx,%ebp
 80626db:	83 ec 0c             	sub    $0xc,%esp
 80626de:	01 fd                	add    %edi,%ebp
 80626e0:	69 c5 94 00 00 00    	imul   $0x94,%ebp,%eax
 80626e6:	01 d8                	add    %ebx,%eax
 80626e8:	50                   	push   %eax
 80626e9:	e8 22 6d fe ff       	call   8049410 <fileno@plt>
  if (fd < 0)
 80626ee:	83 c4 10             	add    $0x10,%esp
 80626f1:	85 c0                	test   %eax,%eax
 80626f3:	0f 88 07 08 00 00    	js     8062f00 <rpl_fclose+0xa60>
 80626f9:	8d 76 00             	lea    0x0(%esi),%esi
 80626fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062700:	89 3c 24             	mov    %edi,(%esp)
 8062703:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062707:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806270b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806270f:	b9 a4 11 00 00       	mov    $0x11a4,%ecx
 8062714:	e8 f7 07 00 00       	call   8062f10 <__afl_maybe_log>
 8062719:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806271d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062721:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062725:	8b 3c 24             	mov    (%esp),%edi
 8062728:	8d 64 24 10          	lea    0x10(%esp),%esp
    return fclose_nothrow (fp);

  /* We only need to flush the file if it is not reading or if it is
     seekable.  This only guarantees the file position of input files
     if the fflush module is also in use.  */
  if ((!freading (fp) || lseek (fileno (fp+(lava_get(318))*(0x6c617523==(lava_get(318))||0x2375616c==(lava_get(318)))+(lava_get(346))*(0x6c617507==(lava_get(346))||0x775616c==(lava_get(346)))+(lava_get(321))*(0x6c617520==(lava_get(321))||0x2075616c==(lava_get(321)))+(lava_get(347))*(0x6c617506==(lava_get(347))||0x675616c==(lava_get(347)))+(lava_get(322))*(0x6c61751f==(lava_get(322))||0x1f75616c==(lava_get(322))))+(lava_get(318))*(0x6c617523==(lava_get(318))||0x2375616c==(lava_get(318)))+(lava_get(347))*(0x6c617506==(lava_get(347))||0x675616c==(lava_get(347))), 0+(lava_get(346))*(0x6c617507==(lava_get(346))||0x775616c==(lava_get(346)))+(lava_get(322))*(0x6c61751f==(lava_get(322))||0x1f75616c==(lava_get(322))), SEEK_CUR) != -1)
 806272c:	83 ec 0c             	sub    $0xc,%esp
 806272f:	53                   	push   %ebx
 8062730:	e8 db 6b fe ff       	call   8049310 <__freading@plt>
 8062735:	83 c4 10             	add    $0x10,%esp
 8062738:	85 c0                	test   %eax,%eax
 806273a:	0f 84 b8 06 00 00    	je     8062df8 <rpl_fclose+0x958>
 8062740:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062744:	89 3c 24             	mov    %edi,(%esp)
 8062747:	89 54 24 04          	mov    %edx,0x4(%esp)
 806274b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806274f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062753:	b9 2c d5 00 00       	mov    $0xd52c,%ecx
 8062758:	e8 b3 07 00 00       	call   8062f10 <__afl_maybe_log>
 806275d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062761:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062765:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062769:	8b 3c 24             	mov    (%esp),%edi
 806276c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062770:	83 ec 0c             	sub    $0xc,%esp
 8062773:	68 5a 01 00 00       	push   $0x15a
 8062778:	e8 53 11 ff ff       	call   80538d0 <lava_get>
 806277d:	c7 04 24 5a 01 00 00 	movl   $0x15a,(%esp)
 8062784:	89 c6                	mov    %eax,%esi
 8062786:	e8 45 11 ff ff       	call   80538d0 <lava_get>
 806278b:	83 c4 10             	add    $0x10,%esp
 806278e:	3d 07 75 61 6c       	cmp    $0x6c617507,%eax
 8062793:	b9 01 00 00 00       	mov    $0x1,%ecx
 8062798:	74 4c                	je     80627e6 <rpl_fclose+0x346>
 806279a:	66 90                	xchg   %ax,%ax
 806279c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80627a0:	89 3c 24             	mov    %edi,(%esp)
 80627a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80627a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80627ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80627af:	b9 8c 82 00 00       	mov    $0x828c,%ecx
 80627b4:	e8 57 07 00 00       	call   8062f10 <__afl_maybe_log>
 80627b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80627bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80627c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80627c5:	8b 3c 24             	mov    (%esp),%edi
 80627c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80627cc:	83 ec 0c             	sub    $0xc,%esp
 80627cf:	68 5a 01 00 00       	push   $0x15a
 80627d4:	e8 f7 10 ff ff       	call   80538d0 <lava_get>
 80627d9:	31 c9                	xor    %ecx,%ecx
 80627db:	83 c4 10             	add    $0x10,%esp
 80627de:	3d 6c 61 75 07       	cmp    $0x775616c,%eax
 80627e3:	0f 94 c1             	sete   %cl
 80627e6:	66 90                	xchg   %ax,%ax
 80627e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80627ec:	89 3c 24             	mov    %edi,(%esp)
 80627ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80627f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80627f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80627fb:	b9 c0 d0 00 00       	mov    $0xd0c0,%ecx
 8062800:	e8 0b 07 00 00       	call   8062f10 <__afl_maybe_log>
 8062805:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062809:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806280d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062811:	8b 3c 24             	mov    (%esp),%edi
 8062814:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062818:	83 ec 0c             	sub    $0xc,%esp
 806281b:	68 42 01 00 00       	push   $0x142
 8062820:	0f af f1             	imul   %ecx,%esi
 8062823:	e8 a8 10 ff ff       	call   80538d0 <lava_get>
 8062828:	c7 04 24 42 01 00 00 	movl   $0x142,(%esp)
 806282f:	89 c7                	mov    %eax,%edi
 8062831:	e8 9a 10 ff ff       	call   80538d0 <lava_get>
 8062836:	83 c4 10             	add    $0x10,%esp
 8062839:	3d 1f 75 61 6c       	cmp    $0x6c61751f,%eax
 806283e:	ba 01 00 00 00       	mov    $0x1,%edx
 8062843:	74 4d                	je     8062892 <rpl_fclose+0x3f2>
 8062845:	8d 76 00             	lea    0x0(%esi),%esi
 8062848:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806284c:	89 3c 24             	mov    %edi,(%esp)
 806284f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062853:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062857:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806285b:	b9 6a d5 00 00       	mov    $0xd56a,%ecx
 8062860:	e8 ab 06 00 00       	call   8062f10 <__afl_maybe_log>
 8062865:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062869:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806286d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062871:	8b 3c 24             	mov    (%esp),%edi
 8062874:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062878:	83 ec 0c             	sub    $0xc,%esp
 806287b:	68 42 01 00 00       	push   $0x142
 8062880:	e8 4b 10 ff ff       	call   80538d0 <lava_get>
 8062885:	31 d2                	xor    %edx,%edx
 8062887:	83 c4 10             	add    $0x10,%esp
 806288a:	3d 6c 61 75 1f       	cmp    $0x1f75616c,%eax
 806288f:	0f 94 c2             	sete   %dl
 8062892:	66 90                	xchg   %ax,%ax
 8062894:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062898:	89 3c 24             	mov    %edi,(%esp)
 806289b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806289f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80628a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80628a7:	b9 53 a8 00 00       	mov    $0xa853,%ecx
 80628ac:	e8 5f 06 00 00       	call   8062f10 <__afl_maybe_log>
 80628b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80628b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80628b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80628bd:	8b 3c 24             	mov    (%esp),%edi
 80628c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80628c4:	0f af fa             	imul   %edx,%edi
 80628c7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 80628ce:	00 
 80628cf:	83 ec 0c             	sub    $0xc,%esp
 80628d2:	01 fe                	add    %edi,%esi
 80628d4:	89 74 24 14          	mov    %esi,0x14(%esp)
 80628d8:	68 3e 01 00 00       	push   $0x13e
 80628dd:	e8 ee 0f ff ff       	call   80538d0 <lava_get>
 80628e2:	c7 04 24 3e 01 00 00 	movl   $0x13e,(%esp)
 80628e9:	89 c5                	mov    %eax,%ebp
 80628eb:	e8 e0 0f ff ff       	call   80538d0 <lava_get>
 80628f0:	83 c4 10             	add    $0x10,%esp
 80628f3:	3d 23 75 61 6c       	cmp    $0x6c617523,%eax
 80628f8:	b9 01 00 00 00       	mov    $0x1,%ecx
 80628fd:	74 4b                	je     806294a <rpl_fclose+0x4aa>
 80628ff:	90                   	nop
 8062900:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062904:	89 3c 24             	mov    %edi,(%esp)
 8062907:	89 54 24 04          	mov    %edx,0x4(%esp)
 806290b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806290f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062913:	b9 ba b4 00 00       	mov    $0xb4ba,%ecx
 8062918:	e8 f3 05 00 00       	call   8062f10 <__afl_maybe_log>
 806291d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062921:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062925:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062929:	8b 3c 24             	mov    (%esp),%edi
 806292c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062930:	83 ec 0c             	sub    $0xc,%esp
 8062933:	68 3e 01 00 00       	push   $0x13e
 8062938:	e8 93 0f ff ff       	call   80538d0 <lava_get>
 806293d:	31 c9                	xor    %ecx,%ecx
 806293f:	83 c4 10             	add    $0x10,%esp
 8062942:	3d 6c 61 75 23       	cmp    $0x2375616c,%eax
 8062947:	0f 94 c1             	sete   %cl
 806294a:	66 90                	xchg   %ax,%ax
 806294c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062950:	89 3c 24             	mov    %edi,(%esp)
 8062953:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062957:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806295b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806295f:	b9 78 db 00 00       	mov    $0xdb78,%ecx
 8062964:	e8 a7 05 00 00       	call   8062f10 <__afl_maybe_log>
 8062969:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806296d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062971:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062975:	8b 3c 24             	mov    (%esp),%edi
 8062978:	8d 64 24 10          	lea    0x10(%esp),%esp
 806297c:	83 ec 0c             	sub    $0xc,%esp
 806297f:	0f af cd             	imul   %ebp,%ecx
 8062982:	68 5a 01 00 00       	push   $0x15a
 8062987:	89 cd                	mov    %ecx,%ebp
 8062989:	e8 42 0f ff ff       	call   80538d0 <lava_get>
 806298e:	c7 04 24 5a 01 00 00 	movl   $0x15a,(%esp)
 8062995:	89 c6                	mov    %eax,%esi
 8062997:	e8 34 0f ff ff       	call   80538d0 <lava_get>
 806299c:	83 c4 10             	add    $0x10,%esp
 806299f:	3d 07 75 61 6c       	cmp    $0x6c617507,%eax
 80629a4:	ba 01 00 00 00       	mov    $0x1,%edx
 80629a9:	74 4b                	je     80629f6 <rpl_fclose+0x556>
 80629ab:	90                   	nop
 80629ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80629b0:	89 3c 24             	mov    %edi,(%esp)
 80629b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80629b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80629bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80629bf:	b9 30 63 00 00       	mov    $0x6330,%ecx
 80629c4:	e8 47 05 00 00       	call   8062f10 <__afl_maybe_log>
 80629c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80629cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80629d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80629d5:	8b 3c 24             	mov    (%esp),%edi
 80629d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80629dc:	83 ec 0c             	sub    $0xc,%esp
 80629df:	68 5a 01 00 00       	push   $0x15a
 80629e4:	e8 e7 0e ff ff       	call   80538d0 <lava_get>
 80629e9:	31 d2                	xor    %edx,%edx
 80629eb:	83 c4 10             	add    $0x10,%esp
 80629ee:	3d 6c 61 75 07       	cmp    $0x775616c,%eax
 80629f3:	0f 94 c2             	sete   %dl
 80629f6:	66 90                	xchg   %ax,%ax
 80629f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80629fc:	89 3c 24             	mov    %edi,(%esp)
 80629ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062a03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062a07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062a0b:	b9 0d db 00 00       	mov    $0xdb0d,%ecx
 8062a10:	e8 fb 04 00 00       	call   8062f10 <__afl_maybe_log>
 8062a15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062a19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062a1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062a21:	8b 3c 24             	mov    (%esp),%edi
 8062a24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062a28:	89 d7                	mov    %edx,%edi
 8062a2a:	83 ec 0c             	sub    $0xc,%esp
 8062a2d:	0f af fe             	imul   %esi,%edi
 8062a30:	68 5b 01 00 00       	push   $0x15b
 8062a35:	e8 96 0e ff ff       	call   80538d0 <lava_get>
 8062a3a:	01 ef                	add    %ebp,%edi
 8062a3c:	c7 04 24 5b 01 00 00 	movl   $0x15b,(%esp)
 8062a43:	89 c6                	mov    %eax,%esi
 8062a45:	e8 86 0e ff ff       	call   80538d0 <lava_get>
 8062a4a:	83 c4 10             	add    $0x10,%esp
 8062a4d:	3d 06 75 61 6c       	cmp    $0x6c617506,%eax
 8062a52:	b9 01 00 00 00       	mov    $0x1,%ecx
 8062a57:	74 4d                	je     8062aa6 <rpl_fclose+0x606>
 8062a59:	8d 76 00             	lea    0x0(%esi),%esi
 8062a5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062a60:	89 3c 24             	mov    %edi,(%esp)
 8062a63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062a67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062a6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062a6f:	b9 37 cf 00 00       	mov    $0xcf37,%ecx
 8062a74:	e8 97 04 00 00       	call   8062f10 <__afl_maybe_log>
 8062a79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062a7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062a81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062a85:	8b 3c 24             	mov    (%esp),%edi
 8062a88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062a8c:	83 ec 0c             	sub    $0xc,%esp
 8062a8f:	68 5b 01 00 00       	push   $0x15b
 8062a94:	e8 37 0e ff ff       	call   80538d0 <lava_get>
 8062a99:	31 c9                	xor    %ecx,%ecx
 8062a9b:	83 c4 10             	add    $0x10,%esp
 8062a9e:	3d 6c 61 75 06       	cmp    $0x675616c,%eax
 8062aa3:	0f 94 c1             	sete   %cl
 8062aa6:	66 90                	xchg   %ax,%ax
 8062aa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062aac:	89 3c 24             	mov    %edi,(%esp)
 8062aaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062ab3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062ab7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062abb:	b9 96 9c 00 00       	mov    $0x9c96,%ecx
 8062ac0:	e8 4b 04 00 00       	call   8062f10 <__afl_maybe_log>
 8062ac5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062ac9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062acd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062ad1:	8b 3c 24             	mov    (%esp),%edi
 8062ad4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062ad8:	83 ec 0c             	sub    $0xc,%esp
 8062adb:	68 41 01 00 00       	push   $0x141
 8062ae0:	0f af f1             	imul   %ecx,%esi
 8062ae3:	e8 e8 0d ff ff       	call   80538d0 <lava_get>
 8062ae8:	c7 04 24 41 01 00 00 	movl   $0x141,(%esp)
 8062aef:	89 c5                	mov    %eax,%ebp
 8062af1:	e8 da 0d ff ff       	call   80538d0 <lava_get>
 8062af6:	83 c4 10             	add    $0x10,%esp
 8062af9:	3d 20 75 61 6c       	cmp    $0x6c617520,%eax
 8062afe:	ba 01 00 00 00       	mov    $0x1,%edx
 8062b03:	74 4d                	je     8062b52 <rpl_fclose+0x6b2>
 8062b05:	8d 76 00             	lea    0x0(%esi),%esi
 8062b08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062b0c:	89 3c 24             	mov    %edi,(%esp)
 8062b0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062b13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062b17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062b1b:	b9 37 34 00 00       	mov    $0x3437,%ecx
 8062b20:	e8 eb 03 00 00       	call   8062f10 <__afl_maybe_log>
 8062b25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062b29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062b2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062b31:	8b 3c 24             	mov    (%esp),%edi
 8062b34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062b38:	83 ec 0c             	sub    $0xc,%esp
 8062b3b:	68 41 01 00 00       	push   $0x141
 8062b40:	e8 8b 0d ff ff       	call   80538d0 <lava_get>
 8062b45:	31 d2                	xor    %edx,%edx
 8062b47:	83 c4 10             	add    $0x10,%esp
 8062b4a:	3d 6c 61 75 20       	cmp    $0x2075616c,%eax
 8062b4f:	0f 94 c2             	sete   %dl
 8062b52:	66 90                	xchg   %ax,%ax
 8062b54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062b58:	89 3c 24             	mov    %edi,(%esp)
 8062b5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062b5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062b63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062b67:	b9 a8 40 00 00       	mov    $0x40a8,%ecx
 8062b6c:	e8 9f 03 00 00       	call   8062f10 <__afl_maybe_log>
 8062b71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062b75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062b79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062b7d:	8b 3c 24             	mov    (%esp),%edi
 8062b80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062b84:	83 ec 0c             	sub    $0xc,%esp
 8062b87:	01 fe                	add    %edi,%esi
 8062b89:	0f af ea             	imul   %edx,%ebp
 8062b8c:	68 42 01 00 00       	push   $0x142
 8062b91:	e8 3a 0d ff ff       	call   80538d0 <lava_get>
 8062b96:	8d 3c 2e             	lea    (%esi,%ebp,1),%edi
 8062b99:	c7 04 24 42 01 00 00 	movl   $0x142,(%esp)
 8062ba0:	89 c6                	mov    %eax,%esi
 8062ba2:	e8 29 0d ff ff       	call   80538d0 <lava_get>
 8062ba7:	83 c4 10             	add    $0x10,%esp
 8062baa:	3d 1f 75 61 6c       	cmp    $0x6c61751f,%eax
 8062baf:	b9 01 00 00 00       	mov    $0x1,%ecx
 8062bb4:	74 4c                	je     8062c02 <rpl_fclose+0x762>
 8062bb6:	66 90                	xchg   %ax,%ax
 8062bb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062bbc:	89 3c 24             	mov    %edi,(%esp)
 8062bbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062bc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062bc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062bcb:	b9 3f 7f 00 00       	mov    $0x7f3f,%ecx
 8062bd0:	e8 3b 03 00 00       	call   8062f10 <__afl_maybe_log>
 8062bd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062bd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062bdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062be1:	8b 3c 24             	mov    (%esp),%edi
 8062be4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062be8:	83 ec 0c             	sub    $0xc,%esp
 8062beb:	68 42 01 00 00       	push   $0x142
 8062bf0:	e8 db 0c ff ff       	call   80538d0 <lava_get>
 8062bf5:	31 c9                	xor    %ecx,%ecx
 8062bf7:	83 c4 10             	add    $0x10,%esp
 8062bfa:	3d 6c 61 75 1f       	cmp    $0x1f75616c,%eax
 8062bff:	0f 94 c1             	sete   %cl
 8062c02:	66 90                	xchg   %ax,%ax
 8062c04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062c08:	89 3c 24             	mov    %edi,(%esp)
 8062c0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062c0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062c13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062c17:	b9 d3 bd 00 00       	mov    $0xbdd3,%ecx
 8062c1c:	e8 ef 02 00 00       	call   8062f10 <__afl_maybe_log>
 8062c21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062c25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062c29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062c2d:	8b 3c 24             	mov    (%esp),%edi
 8062c30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062c34:	0f af f1             	imul   %ecx,%esi
 8062c37:	83 ec 0c             	sub    $0xc,%esp
 8062c3a:	01 f7                	add    %esi,%edi
 8062c3c:	69 c7 94 00 00 00    	imul   $0x94,%edi,%eax
 8062c42:	01 d8                	add    %ebx,%eax
 8062c44:	50                   	push   %eax
 8062c45:	e8 c6 67 fe ff       	call   8049410 <fileno@plt>
 8062c4a:	c7 04 24 5b 01 00 00 	movl   $0x15b,(%esp)
 8062c51:	89 c7                	mov    %eax,%edi
 8062c53:	e8 78 0c ff ff       	call   80538d0 <lava_get>
 8062c58:	c7 04 24 5b 01 00 00 	movl   $0x15b,(%esp)
 8062c5f:	89 c5                	mov    %eax,%ebp
 8062c61:	e8 6a 0c ff ff       	call   80538d0 <lava_get>
 8062c66:	83 c4 10             	add    $0x10,%esp
 8062c69:	3d 06 75 61 6c       	cmp    $0x6c617506,%eax
 8062c6e:	ba 01 00 00 00       	mov    $0x1,%edx
 8062c73:	74 4d                	je     8062cc2 <rpl_fclose+0x822>
 8062c75:	8d 76 00             	lea    0x0(%esi),%esi
 8062c78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062c7c:	89 3c 24             	mov    %edi,(%esp)
 8062c7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062c83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062c87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062c8b:	b9 e3 3d 00 00       	mov    $0x3de3,%ecx
 8062c90:	e8 7b 02 00 00       	call   8062f10 <__afl_maybe_log>
 8062c95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062c99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062c9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062ca1:	8b 3c 24             	mov    (%esp),%edi
 8062ca4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062ca8:	83 ec 0c             	sub    $0xc,%esp
 8062cab:	68 5b 01 00 00       	push   $0x15b
 8062cb0:	e8 1b 0c ff ff       	call   80538d0 <lava_get>
 8062cb5:	31 d2                	xor    %edx,%edx
 8062cb7:	83 c4 10             	add    $0x10,%esp
 8062cba:	3d 6c 61 75 06       	cmp    $0x675616c,%eax
 8062cbf:	0f 94 c2             	sete   %dl
 8062cc2:	66 90                	xchg   %ax,%ax
 8062cc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062cc8:	89 3c 24             	mov    %edi,(%esp)
 8062ccb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062ccf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062cd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062cd7:	b9 aa e0 00 00       	mov    $0xe0aa,%ecx
 8062cdc:	e8 2f 02 00 00       	call   8062f10 <__afl_maybe_log>
 8062ce1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062ce5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062ce9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062ced:	8b 3c 24             	mov    (%esp),%edi
 8062cf0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062cf4:	83 ec 0c             	sub    $0xc,%esp
 8062cf7:	0f af d5             	imul   %ebp,%edx
 8062cfa:	68 3e 01 00 00       	push   $0x13e
 8062cff:	89 d5                	mov    %edx,%ebp
 8062d01:	e8 ca 0b ff ff       	call   80538d0 <lava_get>
 8062d06:	c7 04 24 3e 01 00 00 	movl   $0x13e,(%esp)
 8062d0d:	89 c6                	mov    %eax,%esi
 8062d0f:	e8 bc 0b ff ff       	call   80538d0 <lava_get>
 8062d14:	83 c4 10             	add    $0x10,%esp
 8062d17:	3d 23 75 61 6c       	cmp    $0x6c617523,%eax
 8062d1c:	b9 01 00 00 00       	mov    $0x1,%ecx
 8062d21:	74 4b                	je     8062d6e <rpl_fclose+0x8ce>
 8062d23:	90                   	nop
 8062d24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062d28:	89 3c 24             	mov    %edi,(%esp)
 8062d2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062d2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062d33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062d37:	b9 ed e1 00 00       	mov    $0xe1ed,%ecx
 8062d3c:	e8 cf 01 00 00       	call   8062f10 <__afl_maybe_log>
 8062d41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062d45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062d49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062d4d:	8b 3c 24             	mov    (%esp),%edi
 8062d50:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062d54:	83 ec 0c             	sub    $0xc,%esp
 8062d57:	68 3e 01 00 00       	push   $0x13e
 8062d5c:	e8 6f 0b ff ff       	call   80538d0 <lava_get>
 8062d61:	31 c9                	xor    %ecx,%ecx
 8062d63:	83 c4 10             	add    $0x10,%esp
 8062d66:	3d 6c 61 75 23       	cmp    $0x2375616c,%eax
 8062d6b:	0f 94 c1             	sete   %cl
 8062d6e:	66 90                	xchg   %ax,%ax
 8062d70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062d74:	89 3c 24             	mov    %edi,(%esp)
 8062d77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062d7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062d7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062d83:	b9 fb b8 00 00       	mov    $0xb8fb,%ecx
 8062d88:	e8 83 01 00 00       	call   8062f10 <__afl_maybe_log>
 8062d8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062d91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062d95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062d99:	8b 3c 24             	mov    (%esp),%edi
 8062d9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062da0:	0f af f1             	imul   %ecx,%esi
 8062da3:	01 ef                	add    %ebp,%edi
 8062da5:	6a 01                	push   $0x1
 8062da7:	ff 74 24 10          	pushl  0x10(%esp)
 8062dab:	ff 74 24 10          	pushl  0x10(%esp)
 8062daf:	01 f7                	add    %esi,%edi
 8062db1:	57                   	push   %edi
 8062db2:	e8 f9 66 fe ff       	call   80494b0 <lseek64@plt>
 8062db7:	21 d0                	and    %edx,%eax
 8062db9:	83 c4 10             	add    $0x10,%esp
 8062dbc:	83 f8 ff             	cmp    $0xffffffff,%eax
 8062dbf:	0f 84 3b 01 00 00    	je     8062f00 <rpl_fclose+0xa60>
 8062dc5:	8d 76 00             	lea    0x0(%esi),%esi
 8062dc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062dcc:	89 3c 24             	mov    %edi,(%esp)
 8062dcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062dd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062dd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062ddb:	b9 5f 5c 00 00       	mov    $0x5c5f,%ecx
 8062de0:	e8 2b 01 00 00       	call   8062f10 <__afl_maybe_log>
 8062de5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062de9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062ded:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062df1:	8b 3c 24             	mov    (%esp),%edi
 8062df4:	8d 64 24 10          	lea    0x10(%esp),%esp
      && fflush (fp))
 8062df8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062dfc:	89 3c 24             	mov    %edi,(%esp)
 8062dff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062e03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062e07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062e0b:	b9 cd 1d 00 00       	mov    $0x1dcd,%ecx
 8062e10:	e8 fb 00 00 00       	call   8062f10 <__afl_maybe_log>
 8062e15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062e19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062e1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062e21:	8b 3c 24             	mov    (%esp),%edi
 8062e24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062e28:	83 ec 0c             	sub    $0xc,%esp
 8062e2b:	53                   	push   %ebx
 8062e2c:	e8 2f 02 00 00       	call   8063060 <rpl_fflush>
 8062e31:	83 c4 10             	add    $0x10,%esp
 8062e34:	85 c0                	test   %eax,%eax
 8062e36:	0f 84 c4 00 00 00    	je     8062f00 <rpl_fclose+0xa60>
 8062e3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062e40:	89 3c 24             	mov    %edi,(%esp)
 8062e43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062e47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062e4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062e4f:	b9 c2 12 00 00       	mov    $0x12c2,%ecx
 8062e54:	e8 b7 00 00 00       	call   8062f10 <__afl_maybe_log>
 8062e59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062e5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062e61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062e65:	8b 3c 24             	mov    (%esp),%edi
 8062e68:	8d 64 24 10          	lea    0x10(%esp),%esp
    saved_errno = errno;
 8062e6c:	e8 8f 65 fe ff       	call   8049400 <__errno_location@plt>
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8062e71:	83 ec 0c             	sub    $0xc,%esp
  /* We only need to flush the file if it is not reading or if it is
     seekable.  This only guarantees the file position of input files
     if the fflush module is also in use.  */
  if ((!freading (fp) || lseek (fileno (fp+(lava_get(318))*(0x6c617523==(lava_get(318))||0x2375616c==(lava_get(318)))+(lava_get(346))*(0x6c617507==(lava_get(346))||0x775616c==(lava_get(346)))+(lava_get(321))*(0x6c617520==(lava_get(321))||0x2075616c==(lava_get(321)))+(lava_get(347))*(0x6c617506==(lava_get(347))||0x675616c==(lava_get(347)))+(lava_get(322))*(0x6c61751f==(lava_get(322))||0x1f75616c==(lava_get(322))))+(lava_get(318))*(0x6c617523==(lava_get(318))||0x2375616c==(lava_get(318)))+(lava_get(347))*(0x6c617506==(lava_get(347))||0x675616c==(lava_get(347))), 0+(lava_get(346))*(0x6c617507==(lava_get(346))||0x775616c==(lava_get(346)))+(lava_get(322))*(0x6c61751f==(lava_get(322))||0x1f75616c==(lava_get(322))), SEEK_CUR) != -1)
      && fflush (fp))
    saved_errno = errno;
 8062e74:	8b 38                	mov    (%eax),%edi
 8062e76:	89 c5                	mov    %eax,%ebp
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8062e78:	53                   	push   %ebx
 8062e79:	e8 52 63 fe ff       	call   80491d0 <fclose@plt>
# endif

#endif /* !WINDOWS_SOCKETS */

  if (saved_errno != 0)
 8062e7e:	83 c4 10             	add    $0x10,%esp
 8062e81:	85 ff                	test   %edi,%edi
 8062e83:	74 3b                	je     8062ec0 <rpl_fclose+0xa20>
 8062e85:	8d 76 00             	lea    0x0(%esi),%esi
 8062e88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062e8c:	89 3c 24             	mov    %edi,(%esp)
 8062e8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062e93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062e97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062e9b:	b9 e3 ee 00 00       	mov    $0xeee3,%ecx
 8062ea0:	e8 6b 00 00 00       	call   8062f10 <__afl_maybe_log>
 8062ea5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062ea9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062ead:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062eb1:	8b 3c 24             	mov    (%esp),%edi
 8062eb4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      errno = saved_errno;
 8062eb8:	89 7d 00             	mov    %edi,0x0(%ebp)
      result = EOF;
 8062ebb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    }

  return result;
}
 8062ec0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062ec4:	89 3c 24             	mov    %edi,(%esp)
 8062ec7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062ecb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062ecf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062ed3:	b9 f7 c5 00 00       	mov    $0xc5f7,%ecx
 8062ed8:	e8 33 00 00 00       	call   8062f10 <__afl_maybe_log>
 8062edd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062ee1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062ee5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062ee9:	8b 3c 24             	mov    (%esp),%edi
 8062eec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062ef0:	83 c4 1c             	add    $0x1c,%esp
 8062ef3:	5b                   	pop    %ebx
 8062ef4:	5e                   	pop    %esi
 8062ef5:	5f                   	pop    %edi
 8062ef6:	5d                   	pop    %ebp
 8062ef7:	c3                   	ret    
 8062ef8:	90                   	nop
 8062ef9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8062f00:	89 5c 24 30          	mov    %ebx,0x30(%esp)
      errno = saved_errno;
      result = EOF;
    }

  return result;
}
 8062f04:	83 c4 1c             	add    $0x1c,%esp
 8062f07:	5b                   	pop    %ebx
 8062f08:	5e                   	pop    %esi
 8062f09:	5f                   	pop    %edi
 8062f0a:	5d                   	pop    %ebp
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8062f0b:	e9 c0 62 fe ff       	jmp    80491d0 <fclose@plt>

08062f10 <__afl_maybe_log>:
 8062f10:	9f                   	lahf   
 8062f11:	0f 90 c0             	seto   %al
 8062f14:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8062f1a:	85 d2                	test   %edx,%edx
 8062f1c:	74 22                	je     8062f40 <__afl_setup>

08062f1e <__afl_store>:
 8062f1e:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8062f24:	31 cf                	xor    %ecx,%edi
 8062f26:	d1 e9                	shr    %ecx
 8062f28:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8062f2e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8062f32:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08062f36 <__afl_return>:
 8062f36:	04 7f                	add    $0x7f,%al
 8062f38:	9e                   	sahf   
 8062f39:	c3                   	ret    
 8062f3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08062f40 <__afl_setup>:
 8062f40:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8062f47:	75 ed                	jne    8062f36 <__afl_return>
 8062f49:	50                   	push   %eax
 8062f4a:	51                   	push   %ecx
 8062f4b:	68 48 30 06 08       	push   $0x8063048
 8062f50:	e8 8b 63 fe ff       	call   80492e0 <getenv@plt>
 8062f55:	83 c4 04             	add    $0x4,%esp
 8062f58:	85 c0                	test   %eax,%eax
 8062f5a:	0f 84 db 00 00 00    	je     806303b <__afl_setup_abort>
 8062f60:	50                   	push   %eax
 8062f61:	e8 3a 65 fe ff       	call   80494a0 <atoi@plt>
 8062f66:	83 c4 04             	add    $0x4,%esp
 8062f69:	6a 00                	push   $0x0
 8062f6b:	6a 00                	push   $0x0
 8062f6d:	50                   	push   %eax
 8062f6e:	e8 ad 62 fe ff       	call   8049220 <shmat@plt>
 8062f73:	83 c4 0c             	add    $0xc,%esp
 8062f76:	83 f8 ff             	cmp    $0xffffffff,%eax
 8062f79:	0f 84 bc 00 00 00    	je     806303b <__afl_setup_abort>
 8062f7f:	c6 00 01             	movb   $0x1,(%eax)
 8062f82:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8062f87:	89 c2                	mov    %eax,%edx
 8062f89:	59                   	pop    %ecx
 8062f8a:	58                   	pop    %eax

08062f8b <__afl_forkserver>:
 8062f8b:	50                   	push   %eax
 8062f8c:	51                   	push   %ecx
 8062f8d:	52                   	push   %edx
 8062f8e:	6a 04                	push   $0x4
 8062f90:	68 e0 ad 43 08       	push   $0x843ade0
 8062f95:	68 c7 00 00 00       	push   $0xc7
 8062f9a:	e8 31 64 fe ff       	call   80493d0 <write@plt>
 8062f9f:	83 c4 0c             	add    $0xc,%esp
 8062fa2:	83 f8 04             	cmp    $0x4,%eax
 8062fa5:	75 6e                	jne    8063015 <__afl_fork_resume>

08062fa7 <__afl_fork_wait_loop>:
 8062fa7:	6a 04                	push   $0x4
 8062fa9:	68 e0 ad 43 08       	push   $0x843ade0
 8062fae:	68 c6 00 00 00       	push   $0xc6
 8062fb3:	e8 a8 61 fe ff       	call   8049160 <read@plt>
 8062fb8:	83 c4 0c             	add    $0xc,%esp
 8062fbb:	83 f8 04             	cmp    $0x4,%eax
 8062fbe:	75 74                	jne    8063034 <__afl_die>
 8062fc0:	e8 7b 64 fe ff       	call   8049440 <fork@plt>
 8062fc5:	83 f8 00             	cmp    $0x0,%eax
 8062fc8:	7c 6a                	jl     8063034 <__afl_die>
 8062fca:	74 49                	je     8063015 <__afl_fork_resume>
 8062fcc:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8062fd1:	6a 04                	push   $0x4
 8062fd3:	68 40 ae 43 08       	push   $0x843ae40
 8062fd8:	68 c7 00 00 00       	push   $0xc7
 8062fdd:	e8 ee 63 fe ff       	call   80493d0 <write@plt>
 8062fe2:	83 c4 0c             	add    $0xc,%esp
 8062fe5:	6a 00                	push   $0x0
 8062fe7:	68 e0 ad 43 08       	push   $0x843ade0
 8062fec:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8062ff2:	e8 79 62 fe ff       	call   8049270 <waitpid@plt>
 8062ff7:	83 c4 0c             	add    $0xc,%esp
 8062ffa:	83 f8 00             	cmp    $0x0,%eax
 8062ffd:	7e 35                	jle    8063034 <__afl_die>
 8062fff:	6a 04                	push   $0x4
 8063001:	68 e0 ad 43 08       	push   $0x843ade0
 8063006:	68 c7 00 00 00       	push   $0xc7
 806300b:	e8 c0 63 fe ff       	call   80493d0 <write@plt>
 8063010:	83 c4 0c             	add    $0xc,%esp
 8063013:	eb 92                	jmp    8062fa7 <__afl_fork_wait_loop>

08063015 <__afl_fork_resume>:
 8063015:	68 c6 00 00 00       	push   $0xc6
 806301a:	e8 01 65 fe ff       	call   8049520 <close@plt>
 806301f:	68 c7 00 00 00       	push   $0xc7
 8063024:	e8 f7 64 fe ff       	call   8049520 <close@plt>
 8063029:	83 c4 08             	add    $0x8,%esp
 806302c:	5a                   	pop    %edx
 806302d:	59                   	pop    %ecx
 806302e:	58                   	pop    %eax
 806302f:	e9 ea fe ff ff       	jmp    8062f1e <__afl_store>

08063034 <__afl_die>:
 8063034:	31 c0                	xor    %eax,%eax
 8063036:	e8 55 61 fe ff       	call   8049190 <_exit@plt>

0806303b <__afl_setup_abort>:
 806303b:	fe 05 60 ae 43 08    	incb   0x843ae60
 8063041:	59                   	pop    %ecx
 8063042:	58                   	pop    %eax
 8063043:	e9 ee fe ff ff       	jmp    8062f36 <__afl_return>

08063048 <.AFL_SHM_ENV>:
 8063048:	5f                   	pop    %edi
 8063049:	5f                   	pop    %edi
 806304a:	41                   	inc    %ecx
 806304b:	46                   	inc    %esi
 806304c:	4c                   	dec    %esp
 806304d:	5f                   	pop    %edi
 806304e:	53                   	push   %ebx
 806304f:	48                   	dec    %eax
 8063050:	4d                   	dec    %ebp
 8063051:	5f                   	pop    %edi
 8063052:	49                   	dec    %ecx
 8063053:	44                   	inc    %esp
 8063054:	00 66 90             	add    %ah,-0x70(%esi)
 8063057:	66 90                	xchg   %ax,%ax
 8063059:	66 90                	xchg   %ax,%ax
 806305b:	66 90                	xchg   %ax,%ax
 806305d:	66 90                	xchg   %ax,%ax
 806305f:	90                   	nop

08063060 <rpl_fflush>:

/* Flush all pending data on STREAM according to POSIX rules.  Both
   output and seekable input streams are supported.  */
int
rpl_fflush (FILE *stream)
{
 8063060:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063064:	89 3c 24             	mov    %edi,(%esp)
 8063067:	89 54 24 04          	mov    %edx,0x4(%esp)
 806306b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806306f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063073:	b9 7c 21 00 00       	mov    $0x217c,%ecx
 8063078:	e8 5b 07 00 00       	call   80637d8 <__afl_maybe_log>
 806307d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063081:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063085:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063089:	8b 3c 24             	mov    (%esp),%edi
 806308c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063090:	55                   	push   %ebp
 8063091:	57                   	push   %edi
 8063092:	56                   	push   %esi
 8063093:	53                   	push   %ebx
 8063094:	83 ec 0c             	sub    $0xc,%esp
 8063097:	8b 74 24 20          	mov    0x20(%esp),%esi
     fflush in this case.

     We test ! freading (stream) here, rather than fwriting (stream), because
     what we need to know is whether the stream holds a "read buffer", and on
     mingw this is indicated by _IOREAD, regardless of _IOWRT.  */
  if (stream == NULL || ! freading (stream))
 806309b:	85 f6                	test   %esi,%esi
 806309d:	74 75                	je     8063114 <rpl_fflush+0xb4>
 806309f:	90                   	nop
 80630a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80630a4:	89 3c 24             	mov    %edi,(%esp)
 80630a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80630ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80630af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80630b3:	b9 47 08 00 00       	mov    $0x847,%ecx
 80630b8:	e8 1b 07 00 00       	call   80637d8 <__afl_maybe_log>
 80630bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80630c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80630c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80630c9:	8b 3c 24             	mov    (%esp),%edi
 80630cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80630d0:	83 ec 0c             	sub    $0xc,%esp
 80630d3:	56                   	push   %esi
 80630d4:	e8 37 62 fe ff       	call   8049310 <__freading@plt>
 80630d9:	83 c4 10             	add    $0x10,%esp
 80630dc:	85 c0                	test   %eax,%eax
 80630de:	0f 85 84 02 00 00    	jne    8063368 <rpl_fflush+0x308>
 80630e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80630e8:	89 3c 24             	mov    %edi,(%esp)
 80630eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80630ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80630f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80630f7:	b9 81 21 00 00       	mov    $0x2181,%ecx
 80630fc:	e8 d7 06 00 00       	call   80637d8 <__afl_maybe_log>
 8063101:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063105:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063109:	8b 54 24 04          	mov    0x4(%esp),%edx
 806310d:	8b 3c 24             	mov    (%esp),%edi
 8063110:	8d 64 24 10          	lea    0x10(%esp),%esp
    return fflush (stream+(lava_get(468))*(0x6c61748d==(lava_get(468))||0x8d74616c==(lava_get(468)))+(lava_get(471))*(0x6c61748a==(lava_get(471))||0x8a74616c==(lava_get(471)))+(lava_get(472))*(0x6c617489==(lava_get(472))||0x8974616c==(lava_get(472))));
 8063114:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063118:	89 3c 24             	mov    %edi,(%esp)
 806311b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806311f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063123:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063127:	b9 1f ba 00 00       	mov    $0xba1f,%ecx
 806312c:	e8 a7 06 00 00       	call   80637d8 <__afl_maybe_log>
 8063131:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063135:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063139:	8b 54 24 04          	mov    0x4(%esp),%edx
 806313d:	8b 3c 24             	mov    (%esp),%edi
 8063140:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063144:	83 ec 0c             	sub    $0xc,%esp
 8063147:	68 d4 01 00 00       	push   $0x1d4
 806314c:	e8 7f 07 ff ff       	call   80538d0 <lava_get>
 8063151:	c7 04 24 d4 01 00 00 	movl   $0x1d4,(%esp)
 8063158:	89 c5                	mov    %eax,%ebp
 806315a:	e8 71 07 ff ff       	call   80538d0 <lava_get>
 806315f:	83 c4 10             	add    $0x10,%esp
 8063162:	3d 8d 74 61 6c       	cmp    $0x6c61748d,%eax
 8063167:	ba 01 00 00 00       	mov    $0x1,%edx
 806316c:	74 4c                	je     80631ba <rpl_fflush+0x15a>
 806316e:	66 90                	xchg   %ax,%ax
 8063170:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063174:	89 3c 24             	mov    %edi,(%esp)
 8063177:	89 54 24 04          	mov    %edx,0x4(%esp)
 806317b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806317f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063183:	b9 78 67 00 00       	mov    $0x6778,%ecx
 8063188:	e8 4b 06 00 00       	call   80637d8 <__afl_maybe_log>
 806318d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063191:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063195:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063199:	8b 3c 24             	mov    (%esp),%edi
 806319c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80631a0:	83 ec 0c             	sub    $0xc,%esp
 80631a3:	68 d4 01 00 00       	push   $0x1d4
 80631a8:	e8 23 07 ff ff       	call   80538d0 <lava_get>
 80631ad:	31 d2                	xor    %edx,%edx
 80631af:	83 c4 10             	add    $0x10,%esp
 80631b2:	3d 6c 61 74 8d       	cmp    $0x8d74616c,%eax
 80631b7:	0f 94 c2             	sete   %dl
 80631ba:	66 90                	xchg   %ax,%ax
 80631bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80631c0:	89 3c 24             	mov    %edi,(%esp)
 80631c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80631c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80631cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80631cf:	b9 f7 9f 00 00       	mov    $0x9ff7,%ecx
 80631d4:	e8 ff 05 00 00       	call   80637d8 <__afl_maybe_log>
 80631d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80631dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80631e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80631e5:	8b 3c 24             	mov    (%esp),%edi
 80631e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80631ec:	83 ec 0c             	sub    $0xc,%esp
 80631ef:	0f af d5             	imul   %ebp,%edx
 80631f2:	68 d7 01 00 00       	push   $0x1d7
 80631f7:	89 d7                	mov    %edx,%edi
 80631f9:	e8 d2 06 ff ff       	call   80538d0 <lava_get>
 80631fe:	c7 04 24 d7 01 00 00 	movl   $0x1d7,(%esp)
 8063205:	89 c3                	mov    %eax,%ebx
 8063207:	e8 c4 06 ff ff       	call   80538d0 <lava_get>
 806320c:	83 c4 10             	add    $0x10,%esp
 806320f:	3d 8a 74 61 6c       	cmp    $0x6c61748a,%eax
 8063214:	b9 01 00 00 00       	mov    $0x1,%ecx
 8063219:	74 4b                	je     8063266 <rpl_fflush+0x206>
 806321b:	90                   	nop
 806321c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063220:	89 3c 24             	mov    %edi,(%esp)
 8063223:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063227:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806322b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806322f:	b9 ca 6f 00 00       	mov    $0x6fca,%ecx
 8063234:	e8 9f 05 00 00       	call   80637d8 <__afl_maybe_log>
 8063239:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806323d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063241:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063245:	8b 3c 24             	mov    (%esp),%edi
 8063248:	8d 64 24 10          	lea    0x10(%esp),%esp
 806324c:	83 ec 0c             	sub    $0xc,%esp
 806324f:	68 d7 01 00 00       	push   $0x1d7
 8063254:	e8 77 06 ff ff       	call   80538d0 <lava_get>
 8063259:	31 c9                	xor    %ecx,%ecx
 806325b:	83 c4 10             	add    $0x10,%esp
 806325e:	3d 6c 61 74 8a       	cmp    $0x8a74616c,%eax
 8063263:	0f 94 c1             	sete   %cl
 8063266:	66 90                	xchg   %ax,%ax
 8063268:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806326c:	89 3c 24             	mov    %edi,(%esp)
 806326f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063273:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063277:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806327b:	b9 d2 bb 00 00       	mov    $0xbbd2,%ecx
 8063280:	e8 53 05 00 00       	call   80637d8 <__afl_maybe_log>
 8063285:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063289:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806328d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063291:	8b 3c 24             	mov    (%esp),%edi
 8063294:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063298:	0f af d9             	imul   %ecx,%ebx
 806329b:	83 ec 0c             	sub    $0xc,%esp
 806329e:	68 d8 01 00 00       	push   $0x1d8
 80632a3:	8d 3c 3b             	lea    (%ebx,%edi,1),%edi
 80632a6:	e8 25 06 ff ff       	call   80538d0 <lava_get>
 80632ab:	c7 04 24 d8 01 00 00 	movl   $0x1d8,(%esp)
 80632b2:	89 c3                	mov    %eax,%ebx
 80632b4:	e8 17 06 ff ff       	call   80538d0 <lava_get>
 80632b9:	83 c4 10             	add    $0x10,%esp
 80632bc:	3d 89 74 61 6c       	cmp    $0x6c617489,%eax
 80632c1:	b9 01 00 00 00       	mov    $0x1,%ecx
 80632c6:	74 4a                	je     8063312 <rpl_fflush+0x2b2>
 80632c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80632cc:	89 3c 24             	mov    %edi,(%esp)
 80632cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80632d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80632d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80632db:	b9 e7 e5 00 00       	mov    $0xe5e7,%ecx
 80632e0:	e8 f3 04 00 00       	call   80637d8 <__afl_maybe_log>
 80632e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80632e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80632ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80632f1:	8b 3c 24             	mov    (%esp),%edi
 80632f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80632f8:	83 ec 0c             	sub    $0xc,%esp
 80632fb:	68 d8 01 00 00       	push   $0x1d8
 8063300:	e8 cb 05 ff ff       	call   80538d0 <lava_get>
 8063305:	31 c9                	xor    %ecx,%ecx
 8063307:	83 c4 10             	add    $0x10,%esp
 806330a:	3d 6c 61 74 89       	cmp    $0x8974616c,%eax
 806330f:	0f 94 c1             	sete   %cl
 8063312:	66 90                	xchg   %ax,%ax

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream+(lava_get(368))*(0x6c6174f1==(lava_get(368))||0xf174616c==(lava_get(368)))+(lava_get(371))*(0x6c6174ee==(lava_get(371))||0xee74616c==(lava_get(371)))+(lava_get(372))*(0x6c6174ed==(lava_get(372))||0xed74616c==(lava_get(372))));

  return fflush (stream+(lava_get(393))*(0x6c6174d8==(lava_get(393))||0xd874616c==(lava_get(393)))+(lava_get(396))*(0x6c6174d5==(lava_get(396))||0xd574616c==(lava_get(396)))+(lava_get(397))*(0x6c6174d4==(lava_get(397))||0xd474616c==(lava_get(397))));
 8063314:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063318:	89 3c 24             	mov    %edi,(%esp)
 806331b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806331f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063323:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063327:	b9 74 b9 00 00       	mov    $0xb974,%ecx
 806332c:	e8 a7 04 00 00       	call   80637d8 <__afl_maybe_log>
 8063331:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063335:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063339:	8b 54 24 04          	mov    0x4(%esp),%edx
 806333d:	8b 3c 24             	mov    (%esp),%edi
 8063340:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063344:	0f af d9             	imul   %ecx,%ebx
 8063347:	01 fb                	add    %edi,%ebx
 8063349:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
 806334f:	01 f0                	add    %esi,%eax
 8063351:	89 44 24 20          	mov    %eax,0x20(%esp)
    return 0;

# endif
  }
#endif
}
 8063355:	83 c4 0c             	add    $0xc,%esp
 8063358:	5b                   	pop    %ebx
 8063359:	5e                   	pop    %esi
 806335a:	5f                   	pop    %edi
 806335b:	5d                   	pop    %ebp

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream+(lava_get(368))*(0x6c6174f1==(lava_get(368))||0xf174616c==(lava_get(368)))+(lava_get(371))*(0x6c6174ee==(lava_get(371))||0xee74616c==(lava_get(371)))+(lava_get(372))*(0x6c6174ed==(lava_get(372))||0xed74616c==(lava_get(372))));

  return fflush (stream+(lava_get(393))*(0x6c6174d8==(lava_get(393))||0xd874616c==(lava_get(393)))+(lava_get(396))*(0x6c6174d5==(lava_get(396))||0xd574616c==(lava_get(396)))+(lava_get(397))*(0x6c6174d4==(lava_get(397))||0xd474616c==(lava_get(397))));
 806335c:	e9 1f 5e fe ff       	jmp    8049180 <fflush@plt>
 8063361:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  if (stream == NULL || ! freading (stream))
    return fflush (stream+(lava_get(468))*(0x6c61748d==(lava_get(468))||0x8d74616c==(lava_get(468)))+(lava_get(471))*(0x6c61748a==(lava_get(471))||0x8a74616c==(lava_get(471)))+(lava_get(472))*(0x6c617489==(lava_get(472))||0x8974616c==(lava_get(472))));

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream+(lava_get(368))*(0x6c6174f1==(lava_get(368))||0xf174616c==(lava_get(368)))+(lava_get(371))*(0x6c6174ee==(lava_get(371))||0xee74616c==(lava_get(371)))+(lava_get(372))*(0x6c6174ed==(lava_get(372))||0xed74616c==(lava_get(372))));
 8063368:	83 ec 0c             	sub    $0xc,%esp
 806336b:	68 70 01 00 00       	push   $0x170
 8063370:	e8 5b 05 ff ff       	call   80538d0 <lava_get>
 8063375:	c7 04 24 70 01 00 00 	movl   $0x170,(%esp)
 806337c:	89 c7                	mov    %eax,%edi
 806337e:	e8 4d 05 ff ff       	call   80538d0 <lava_get>
 8063383:	83 c4 10             	add    $0x10,%esp
 8063386:	3d f1 74 61 6c       	cmp    $0x6c6174f1,%eax
 806338b:	ba 01 00 00 00       	mov    $0x1,%edx
 8063390:	74 4c                	je     80633de <rpl_fflush+0x37e>
 8063392:	66 90                	xchg   %ax,%ax
 8063394:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063398:	89 3c 24             	mov    %edi,(%esp)
 806339b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806339f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80633a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80633a7:	b9 70 67 00 00       	mov    $0x6770,%ecx
 80633ac:	e8 27 04 00 00       	call   80637d8 <__afl_maybe_log>
 80633b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80633b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80633b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80633bd:	8b 3c 24             	mov    (%esp),%edi
 80633c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80633c4:	83 ec 0c             	sub    $0xc,%esp
 80633c7:	68 70 01 00 00       	push   $0x170
 80633cc:	e8 ff 04 ff ff       	call   80538d0 <lava_get>
 80633d1:	31 d2                	xor    %edx,%edx
 80633d3:	83 c4 10             	add    $0x10,%esp
 80633d6:	3d 6c 61 74 f1       	cmp    $0xf174616c,%eax
 80633db:	0f 94 c2             	sete   %dl
 80633de:	66 90                	xchg   %ax,%ax
 80633e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80633e4:	89 3c 24             	mov    %edi,(%esp)
 80633e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80633eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80633ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80633f3:	b9 cd 5f 00 00       	mov    $0x5fcd,%ecx
 80633f8:	e8 db 03 00 00       	call   80637d8 <__afl_maybe_log>
 80633fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063401:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063405:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063409:	8b 3c 24             	mov    (%esp),%edi
 806340c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063410:	83 ec 0c             	sub    $0xc,%esp
 8063413:	0f af d7             	imul   %edi,%edx
 8063416:	68 73 01 00 00       	push   $0x173
 806341b:	89 d3                	mov    %edx,%ebx
 806341d:	e8 ae 04 ff ff       	call   80538d0 <lava_get>
 8063422:	c7 04 24 73 01 00 00 	movl   $0x173,(%esp)
 8063429:	89 c5                	mov    %eax,%ebp
 806342b:	e8 a0 04 ff ff       	call   80538d0 <lava_get>
 8063430:	83 c4 10             	add    $0x10,%esp
 8063433:	3d ee 74 61 6c       	cmp    $0x6c6174ee,%eax
 8063438:	b9 01 00 00 00       	mov    $0x1,%ecx
 806343d:	74 4b                	je     806348a <rpl_fflush+0x42a>
 806343f:	90                   	nop
 8063440:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063444:	89 3c 24             	mov    %edi,(%esp)
 8063447:	89 54 24 04          	mov    %edx,0x4(%esp)
 806344b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806344f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063453:	b9 17 f3 00 00       	mov    $0xf317,%ecx
 8063458:	e8 7b 03 00 00       	call   80637d8 <__afl_maybe_log>
 806345d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063461:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063465:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063469:	8b 3c 24             	mov    (%esp),%edi
 806346c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063470:	83 ec 0c             	sub    $0xc,%esp
 8063473:	68 73 01 00 00       	push   $0x173
 8063478:	e8 53 04 ff ff       	call   80538d0 <lava_get>
 806347d:	31 c9                	xor    %ecx,%ecx
 806347f:	83 c4 10             	add    $0x10,%esp
 8063482:	3d 6c 61 74 ee       	cmp    $0xee74616c,%eax
 8063487:	0f 94 c1             	sete   %cl
 806348a:	66 90                	xchg   %ax,%ax
 806348c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063490:	89 3c 24             	mov    %edi,(%esp)
 8063493:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063497:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806349b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806349f:	b9 dc db 00 00       	mov    $0xdbdc,%ecx
 80634a4:	e8 2f 03 00 00       	call   80637d8 <__afl_maybe_log>
 80634a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80634ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80634b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80634b5:	8b 3c 24             	mov    (%esp),%edi
 80634b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80634bc:	83 ec 0c             	sub    $0xc,%esp
 80634bf:	0f af e9             	imul   %ecx,%ebp
 80634c2:	68 74 01 00 00       	push   $0x174
 80634c7:	e8 04 04 ff ff       	call   80538d0 <lava_get>
 80634cc:	01 dd                	add    %ebx,%ebp
 80634ce:	c7 04 24 74 01 00 00 	movl   $0x174,(%esp)
 80634d5:	89 c7                	mov    %eax,%edi
 80634d7:	e8 f4 03 ff ff       	call   80538d0 <lava_get>
 80634dc:	83 c4 10             	add    $0x10,%esp
 80634df:	3d ed 74 61 6c       	cmp    $0x6c6174ed,%eax
 80634e4:	ba 01 00 00 00       	mov    $0x1,%edx
 80634e9:	74 4b                	je     8063536 <rpl_fflush+0x4d6>
 80634eb:	90                   	nop
 80634ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80634f0:	89 3c 24             	mov    %edi,(%esp)
 80634f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80634f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80634fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80634ff:	b9 b9 c7 00 00       	mov    $0xc7b9,%ecx
 8063504:	e8 cf 02 00 00       	call   80637d8 <__afl_maybe_log>
 8063509:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806350d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063511:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063515:	8b 3c 24             	mov    (%esp),%edi
 8063518:	8d 64 24 10          	lea    0x10(%esp),%esp
 806351c:	83 ec 0c             	sub    $0xc,%esp
 806351f:	68 74 01 00 00       	push   $0x174
 8063524:	e8 a7 03 ff ff       	call   80538d0 <lava_get>
 8063529:	31 d2                	xor    %edx,%edx
 806352b:	83 c4 10             	add    $0x10,%esp
 806352e:	3d 6c 61 74 ed       	cmp    $0xed74616c,%eax
 8063533:	0f 94 c2             	sete   %dl
 8063536:	66 90                	xchg   %ax,%ax
 8063538:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806353c:	89 3c 24             	mov    %edi,(%esp)
 806353f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063543:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063547:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806354b:	b9 13 cc 00 00       	mov    $0xcc13,%ecx
 8063550:	e8 83 02 00 00       	call   80637d8 <__afl_maybe_log>
 8063555:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063559:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806355d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063561:	8b 3c 24             	mov    (%esp),%edi
 8063564:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063568:	0f af fa             	imul   %edx,%edi
 806356b:	8d 44 3d 00          	lea    0x0(%ebp,%edi,1),%eax
 806356f:	69 d8 94 00 00 00    	imul   $0x94,%eax,%ebx
 8063575:	01 f3                	add    %esi,%ebx

/* Clear the stream's ungetc buffer, preserving the value of ftello (fp).  */
static void
clear_ungetc_buffer_preserving_position (FILE *fp)
{
  if (fp->_flags & _IO_IN_BACKUP)
 8063577:	f7 03 00 01 00 00    	testl  $0x100,(%ebx)
 806357d:	0f 85 3d 02 00 00    	jne    80637c0 <rpl_fflush+0x760>
 8063583:	90                   	nop
 8063584:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063588:	89 3c 24             	mov    %edi,(%esp)
 806358b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806358f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063593:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063597:	b9 00 6a 00 00       	mov    $0x6a00,%ecx
 806359c:	e8 37 02 00 00       	call   80637d8 <__afl_maybe_log>
 80635a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80635a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80635a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80635ad:	8b 3c 24             	mov    (%esp),%edi
 80635b0:	8d 64 24 10          	lea    0x10(%esp),%esp

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream+(lava_get(368))*(0x6c6174f1==(lava_get(368))||0xf174616c==(lava_get(368)))+(lava_get(371))*(0x6c6174ee==(lava_get(371))||0xee74616c==(lava_get(371)))+(lava_get(372))*(0x6c6174ed==(lava_get(372))||0xed74616c==(lava_get(372))));

  return fflush (stream+(lava_get(393))*(0x6c6174d8==(lava_get(393))||0xd874616c==(lava_get(393)))+(lava_get(396))*(0x6c6174d5==(lava_get(396))||0xd574616c==(lava_get(396)))+(lava_get(397))*(0x6c6174d4==(lava_get(397))||0xd474616c==(lava_get(397))));
 80635b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80635b8:	89 3c 24             	mov    %edi,(%esp)
 80635bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80635bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80635c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80635c7:	b9 9d d9 00 00       	mov    $0xd99d,%ecx
 80635cc:	e8 07 02 00 00       	call   80637d8 <__afl_maybe_log>
 80635d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80635d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80635d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80635dd:	8b 3c 24             	mov    (%esp),%edi
 80635e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80635e4:	83 ec 0c             	sub    $0xc,%esp
 80635e7:	68 89 01 00 00       	push   $0x189
 80635ec:	e8 df 02 ff ff       	call   80538d0 <lava_get>
 80635f1:	c7 04 24 89 01 00 00 	movl   $0x189,(%esp)
 80635f8:	89 c7                	mov    %eax,%edi
 80635fa:	e8 d1 02 ff ff       	call   80538d0 <lava_get>
 80635ff:	83 c4 10             	add    $0x10,%esp
 8063602:	3d d8 74 61 6c       	cmp    $0x6c6174d8,%eax
 8063607:	b9 01 00 00 00       	mov    $0x1,%ecx
 806360c:	74 4c                	je     806365a <rpl_fflush+0x5fa>
 806360e:	66 90                	xchg   %ax,%ax
 8063610:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063614:	89 3c 24             	mov    %edi,(%esp)
 8063617:	89 54 24 04          	mov    %edx,0x4(%esp)
 806361b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806361f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063623:	b9 50 36 00 00       	mov    $0x3650,%ecx
 8063628:	e8 ab 01 00 00       	call   80637d8 <__afl_maybe_log>
 806362d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063631:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063635:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063639:	8b 3c 24             	mov    (%esp),%edi
 806363c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063640:	83 ec 0c             	sub    $0xc,%esp
 8063643:	68 89 01 00 00       	push   $0x189
 8063648:	e8 83 02 ff ff       	call   80538d0 <lava_get>
 806364d:	31 c9                	xor    %ecx,%ecx
 806364f:	83 c4 10             	add    $0x10,%esp
 8063652:	3d 6c 61 74 d8       	cmp    $0xd874616c,%eax
 8063657:	0f 94 c1             	sete   %cl
 806365a:	66 90                	xchg   %ax,%ax
 806365c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063660:	89 3c 24             	mov    %edi,(%esp)
 8063663:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063667:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806366b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806366f:	b9 a9 f7 00 00       	mov    $0xf7a9,%ecx
 8063674:	e8 5f 01 00 00       	call   80637d8 <__afl_maybe_log>
 8063679:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806367d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063681:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063685:	8b 3c 24             	mov    (%esp),%edi
 8063688:	8d 64 24 10          	lea    0x10(%esp),%esp
 806368c:	83 ec 0c             	sub    $0xc,%esp
 806368f:	68 8c 01 00 00       	push   $0x18c
 8063694:	0f af f9             	imul   %ecx,%edi
 8063697:	e8 34 02 ff ff       	call   80538d0 <lava_get>
 806369c:	c7 04 24 8c 01 00 00 	movl   $0x18c,(%esp)
 80636a3:	89 c5                	mov    %eax,%ebp
 80636a5:	e8 26 02 ff ff       	call   80538d0 <lava_get>
 80636aa:	83 c4 10             	add    $0x10,%esp
 80636ad:	3d d5 74 61 6c       	cmp    $0x6c6174d5,%eax
 80636b2:	ba 01 00 00 00       	mov    $0x1,%edx
 80636b7:	74 4d                	je     8063706 <rpl_fflush+0x6a6>
 80636b9:	8d 76 00             	lea    0x0(%esi),%esi
 80636bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80636c0:	89 3c 24             	mov    %edi,(%esp)
 80636c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80636c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80636cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80636cf:	b9 98 d7 00 00       	mov    $0xd798,%ecx
 80636d4:	e8 ff 00 00 00       	call   80637d8 <__afl_maybe_log>
 80636d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80636dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80636e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80636e5:	8b 3c 24             	mov    (%esp),%edi
 80636e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80636ec:	83 ec 0c             	sub    $0xc,%esp
 80636ef:	68 8c 01 00 00       	push   $0x18c
 80636f4:	e8 d7 01 ff ff       	call   80538d0 <lava_get>
 80636f9:	31 d2                	xor    %edx,%edx
 80636fb:	83 c4 10             	add    $0x10,%esp
 80636fe:	3d 6c 61 74 d5       	cmp    $0xd574616c,%eax
 8063703:	0f 94 c2             	sete   %dl
 8063706:	66 90                	xchg   %ax,%ax
 8063708:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806370c:	89 3c 24             	mov    %edi,(%esp)
 806370f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063713:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063717:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806371b:	b9 a8 29 00 00       	mov    $0x29a8,%ecx
 8063720:	e8 b3 00 00 00       	call   80637d8 <__afl_maybe_log>
 8063725:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063729:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806372d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063731:	8b 3c 24             	mov    (%esp),%edi
 8063734:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063738:	83 ec 0c             	sub    $0xc,%esp
 806373b:	0f af ea             	imul   %edx,%ebp
 806373e:	68 8d 01 00 00       	push   $0x18d
 8063743:	e8 88 01 ff ff       	call   80538d0 <lava_get>
 8063748:	c7 04 24 8d 01 00 00 	movl   $0x18d,(%esp)
 806374f:	89 c3                	mov    %eax,%ebx
 8063751:	8d 7c 3d 00          	lea    0x0(%ebp,%edi,1),%edi
 8063755:	e8 76 01 ff ff       	call   80538d0 <lava_get>
 806375a:	83 c4 10             	add    $0x10,%esp
 806375d:	3d d4 74 61 6c       	cmp    $0x6c6174d4,%eax
 8063762:	b9 01 00 00 00       	mov    $0x1,%ecx
 8063767:	0f 84 a5 fb ff ff    	je     8063312 <rpl_fflush+0x2b2>
 806376d:	8d 76 00             	lea    0x0(%esi),%esi
 8063770:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063774:	89 3c 24             	mov    %edi,(%esp)
 8063777:	89 54 24 04          	mov    %edx,0x4(%esp)
 806377b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806377f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063783:	b9 54 f6 00 00       	mov    $0xf654,%ecx
 8063788:	e8 4b 00 00 00       	call   80637d8 <__afl_maybe_log>
 806378d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063791:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063795:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063799:	8b 3c 24             	mov    (%esp),%edi
 806379c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80637a0:	83 ec 0c             	sub    $0xc,%esp
 80637a3:	68 8d 01 00 00       	push   $0x18d
 80637a8:	e8 23 01 ff ff       	call   80538d0 <lava_get>
 80637ad:	31 c9                	xor    %ecx,%ecx
 80637af:	83 c4 10             	add    $0x10,%esp
 80637b2:	3d 6c 61 74 d4       	cmp    $0xd474616c,%eax
 80637b7:	0f 94 c1             	sete   %cl
 80637ba:	e9 53 fb ff ff       	jmp    8063312 <rpl_fflush+0x2b2>
 80637bf:	90                   	nop
static void
clear_ungetc_buffer_preserving_position (FILE *fp)
{
  if (fp->_flags & _IO_IN_BACKUP)
    /* _IO_free_backup_area is a bit complicated.  Simply call fseek.  */
    fseeko (fp, 0, SEEK_CUR);
 80637c0:	6a 01                	push   $0x1
 80637c2:	6a 00                	push   $0x0
 80637c4:	6a 00                	push   $0x0
 80637c6:	53                   	push   %ebx
 80637c7:	e8 54 01 00 00       	call   8063920 <rpl_fseeko>
 80637cc:	83 c4 10             	add    $0x10,%esp
 80637cf:	e9 e0 fd ff ff       	jmp    80635b4 <rpl_fflush+0x554>
 80637d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

080637d8 <__afl_maybe_log>:
 80637d8:	9f                   	lahf   
 80637d9:	0f 90 c0             	seto   %al
 80637dc:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 80637e2:	85 d2                	test   %edx,%edx
 80637e4:	74 22                	je     8063808 <__afl_setup>

080637e6 <__afl_store>:
 80637e6:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 80637ec:	31 cf                	xor    %ecx,%edi
 80637ee:	d1 e9                	shr    %ecx
 80637f0:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 80637f6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80637fa:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080637fe <__afl_return>:
 80637fe:	04 7f                	add    $0x7f,%al
 8063800:	9e                   	sahf   
 8063801:	c3                   	ret    
 8063802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08063808 <__afl_setup>:
 8063808:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 806380f:	75 ed                	jne    80637fe <__afl_return>
 8063811:	50                   	push   %eax
 8063812:	51                   	push   %ecx
 8063813:	68 10 39 06 08       	push   $0x8063910
 8063818:	e8 c3 5a fe ff       	call   80492e0 <getenv@plt>
 806381d:	83 c4 04             	add    $0x4,%esp
 8063820:	85 c0                	test   %eax,%eax
 8063822:	0f 84 db 00 00 00    	je     8063903 <__afl_setup_abort>
 8063828:	50                   	push   %eax
 8063829:	e8 72 5c fe ff       	call   80494a0 <atoi@plt>
 806382e:	83 c4 04             	add    $0x4,%esp
 8063831:	6a 00                	push   $0x0
 8063833:	6a 00                	push   $0x0
 8063835:	50                   	push   %eax
 8063836:	e8 e5 59 fe ff       	call   8049220 <shmat@plt>
 806383b:	83 c4 0c             	add    $0xc,%esp
 806383e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8063841:	0f 84 bc 00 00 00    	je     8063903 <__afl_setup_abort>
 8063847:	c6 00 01             	movb   $0x1,(%eax)
 806384a:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 806384f:	89 c2                	mov    %eax,%edx
 8063851:	59                   	pop    %ecx
 8063852:	58                   	pop    %eax

08063853 <__afl_forkserver>:
 8063853:	50                   	push   %eax
 8063854:	51                   	push   %ecx
 8063855:	52                   	push   %edx
 8063856:	6a 04                	push   $0x4
 8063858:	68 e0 ad 43 08       	push   $0x843ade0
 806385d:	68 c7 00 00 00       	push   $0xc7
 8063862:	e8 69 5b fe ff       	call   80493d0 <write@plt>
 8063867:	83 c4 0c             	add    $0xc,%esp
 806386a:	83 f8 04             	cmp    $0x4,%eax
 806386d:	75 6e                	jne    80638dd <__afl_fork_resume>

0806386f <__afl_fork_wait_loop>:
 806386f:	6a 04                	push   $0x4
 8063871:	68 e0 ad 43 08       	push   $0x843ade0
 8063876:	68 c6 00 00 00       	push   $0xc6
 806387b:	e8 e0 58 fe ff       	call   8049160 <read@plt>
 8063880:	83 c4 0c             	add    $0xc,%esp
 8063883:	83 f8 04             	cmp    $0x4,%eax
 8063886:	75 74                	jne    80638fc <__afl_die>
 8063888:	e8 b3 5b fe ff       	call   8049440 <fork@plt>
 806388d:	83 f8 00             	cmp    $0x0,%eax
 8063890:	7c 6a                	jl     80638fc <__afl_die>
 8063892:	74 49                	je     80638dd <__afl_fork_resume>
 8063894:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8063899:	6a 04                	push   $0x4
 806389b:	68 40 ae 43 08       	push   $0x843ae40
 80638a0:	68 c7 00 00 00       	push   $0xc7
 80638a5:	e8 26 5b fe ff       	call   80493d0 <write@plt>
 80638aa:	83 c4 0c             	add    $0xc,%esp
 80638ad:	6a 00                	push   $0x0
 80638af:	68 e0 ad 43 08       	push   $0x843ade0
 80638b4:	ff 35 40 ae 43 08    	pushl  0x843ae40
 80638ba:	e8 b1 59 fe ff       	call   8049270 <waitpid@plt>
 80638bf:	83 c4 0c             	add    $0xc,%esp
 80638c2:	83 f8 00             	cmp    $0x0,%eax
 80638c5:	7e 35                	jle    80638fc <__afl_die>
 80638c7:	6a 04                	push   $0x4
 80638c9:	68 e0 ad 43 08       	push   $0x843ade0
 80638ce:	68 c7 00 00 00       	push   $0xc7
 80638d3:	e8 f8 5a fe ff       	call   80493d0 <write@plt>
 80638d8:	83 c4 0c             	add    $0xc,%esp
 80638db:	eb 92                	jmp    806386f <__afl_fork_wait_loop>

080638dd <__afl_fork_resume>:
 80638dd:	68 c6 00 00 00       	push   $0xc6
 80638e2:	e8 39 5c fe ff       	call   8049520 <close@plt>
 80638e7:	68 c7 00 00 00       	push   $0xc7
 80638ec:	e8 2f 5c fe ff       	call   8049520 <close@plt>
 80638f1:	83 c4 08             	add    $0x8,%esp
 80638f4:	5a                   	pop    %edx
 80638f5:	59                   	pop    %ecx
 80638f6:	58                   	pop    %eax
 80638f7:	e9 ea fe ff ff       	jmp    80637e6 <__afl_store>

080638fc <__afl_die>:
 80638fc:	31 c0                	xor    %eax,%eax
 80638fe:	e8 8d 58 fe ff       	call   8049190 <_exit@plt>

08063903 <__afl_setup_abort>:
 8063903:	fe 05 60 ae 43 08    	incb   0x843ae60
 8063909:	59                   	pop    %ecx
 806390a:	58                   	pop    %eax
 806390b:	e9 ee fe ff ff       	jmp    80637fe <__afl_return>

08063910 <.AFL_SHM_ENV>:
 8063910:	5f                   	pop    %edi
 8063911:	5f                   	pop    %edi
 8063912:	41                   	inc    %ecx
 8063913:	46                   	inc    %esi
 8063914:	4c                   	dec    %esp
 8063915:	5f                   	pop    %edi
 8063916:	53                   	push   %ebx
 8063917:	48                   	dec    %eax
 8063918:	4d                   	dec    %ebp
 8063919:	5f                   	pop    %edi
 806391a:	49                   	dec    %ecx
 806391b:	44                   	inc    %esp
 806391c:	00 66 90             	add    %ah,-0x70(%esi)
 806391f:	90                   	nop

08063920 <rpl_fseeko>:
#  define fseeko _fseeki64
# else /* mingw */
#  define fseeko fseeko64
# endif
#endif
{
 8063920:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063924:	89 3c 24             	mov    %edi,(%esp)
 8063927:	89 54 24 04          	mov    %edx,0x4(%esp)
 806392b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806392f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063933:	b9 f7 cf 00 00       	mov    $0xcff7,%ecx
 8063938:	e8 f3 01 00 00       	call   8063b30 <__afl_maybe_log>
 806393d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063941:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063945:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063949:	8b 3c 24             	mov    (%esp),%edi
 806394c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063950:	55                   	push   %ebp
 8063951:	57                   	push   %edi
 8063952:	56                   	push   %esi
 8063953:	53                   	push   %ebx
 8063954:	83 ec 0c             	sub    $0xc,%esp
 8063957:	8b 5c 24 20          	mov    0x20(%esp),%ebx
 806395b:	8b 74 24 24          	mov    0x24(%esp),%esi
 806395f:	8b 7c 24 28          	mov    0x28(%esp),%edi
 8063963:	8b 6c 24 2c          	mov    0x2c(%esp),%ebp
    return EOF;
#endif

  /* These tests are based on fpurge.c.  */
#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
  if (fp->_IO_read_end == fp->_IO_read_ptr
 8063967:	8b 43 04             	mov    0x4(%ebx),%eax
 806396a:	39 43 08             	cmp    %eax,0x8(%ebx)
 806396d:	0f 84 7d 00 00 00    	je     80639f0 <rpl_fseeko+0xd0>
 8063973:	90                   	nop
 8063974:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063978:	89 3c 24             	mov    %edi,(%esp)
 806397b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806397f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063983:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063987:	b9 c3 38 00 00       	mov    $0x38c3,%ecx
 806398c:	e8 9f 01 00 00       	call   8063b30 <__afl_maybe_log>
 8063991:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063995:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063999:	8b 54 24 04          	mov    0x4(%esp),%edx
 806399d:	8b 3c 24             	mov    (%esp),%edi
 80639a0:	8d 64 24 10          	lea    0x10(%esp),%esp
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
 80639a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80639a8:	89 3c 24             	mov    %edi,(%esp)
 80639ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80639af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80639b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80639b7:	b9 c5 db 00 00       	mov    $0xdbc5,%ecx
 80639bc:	e8 6f 01 00 00       	call   8063b30 <__afl_maybe_log>
 80639c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80639c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80639c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80639cd:	8b 3c 24             	mov    (%esp),%edi
 80639d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80639d4:	89 6c 24 2c          	mov    %ebp,0x2c(%esp)
 80639d8:	89 74 24 24          	mov    %esi,0x24(%esp)
 80639dc:	89 7c 24 28          	mov    %edi,0x28(%esp)
 80639e0:	89 5c 24 20          	mov    %ebx,0x20(%esp)
}
 80639e4:	83 c4 0c             	add    $0xc,%esp
 80639e7:	5b                   	pop    %ebx
 80639e8:	5e                   	pop    %esi
 80639e9:	5f                   	pop    %edi
 80639ea:	5d                   	pop    %ebp
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
 80639eb:	e9 f0 57 fe ff       	jmp    80491e0 <fseeko64@plt>
#endif

  /* These tests are based on fpurge.c.  */
#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
  if (fp->_IO_read_end == fp->_IO_read_ptr
      && fp->_IO_write_ptr == fp->_IO_write_base
 80639f0:	8b 53 10             	mov    0x10(%ebx),%edx
 80639f3:	39 53 14             	cmp    %edx,0x14(%ebx)
 80639f6:	75 ac                	jne    80639a4 <rpl_fseeko+0x84>
 80639f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80639fc:	89 3c 24             	mov    %edi,(%esp)
 80639ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063a03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063a07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063a0b:	b9 90 c6 00 00       	mov    $0xc690,%ecx
 8063a10:	e8 1b 01 00 00       	call   8063b30 <__afl_maybe_log>
 8063a15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063a19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063a1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063a21:	8b 3c 24             	mov    (%esp),%edi
 8063a24:	8d 64 24 10          	lea    0x10(%esp),%esp
      && fp->_IO_save_base == NULL)
 8063a28:	8b 4b 24             	mov    0x24(%ebx),%ecx
 8063a2b:	85 c9                	test   %ecx,%ecx
 8063a2d:	0f 85 71 ff ff ff    	jne    80639a4 <rpl_fseeko+0x84>
 8063a33:	90                   	nop
 8063a34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063a38:	89 3c 24             	mov    %edi,(%esp)
 8063a3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063a3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063a43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063a47:	b9 06 d3 00 00       	mov    $0xd306,%ecx
 8063a4c:	e8 df 00 00 00       	call   8063b30 <__afl_maybe_log>
 8063a51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063a55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063a59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063a5d:	8b 3c 24             	mov    (%esp),%edi
 8063a60:	8d 64 24 10          	lea    0x10(%esp),%esp
#endif
    {
      /* We get here when an fflush() call immediately preceded this one (or
         if ftell() has created buffers but no I/O has occurred on a
         newly-opened stream).  We know there are no buffers.  */
      off_t pos = lseek (fileno (fp), offset, whence);
 8063a64:	83 ec 0c             	sub    $0xc,%esp
 8063a67:	53                   	push   %ebx
 8063a68:	e8 a3 59 fe ff       	call   8049410 <fileno@plt>
 8063a6d:	55                   	push   %ebp
 8063a6e:	57                   	push   %edi
 8063a6f:	56                   	push   %esi
 8063a70:	50                   	push   %eax
 8063a71:	e8 3a 5a fe ff       	call   80494b0 <lseek64@plt>
      if (pos == -1)
 8063a76:	89 c6                	mov    %eax,%esi
 8063a78:	83 c4 20             	add    $0x20,%esp
 8063a7b:	21 d6                	and    %edx,%esi
 8063a7d:	83 fe ff             	cmp    $0xffffffff,%esi
 8063a80:	74 76                	je     8063af8 <rpl_fseeko+0x1d8>
 8063a82:	66 90                	xchg   %ax,%ax
 8063a84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063a88:	89 3c 24             	mov    %edi,(%esp)
 8063a8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063a8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063a93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063a97:	b9 71 78 00 00       	mov    $0x7871,%ecx
 8063a9c:	e8 8f 00 00 00       	call   8063b30 <__afl_maybe_log>
 8063aa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063aa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063aa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063aad:	8b 3c 24             	mov    (%esp),%edi
 8063ab0:	8d 64 24 10          	lea    0x10(%esp),%esp
#endif
          return -1;
        }

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
      fp->_flags &= ~_IO_EOF_SEEN;
 8063ab4:	83 23 ef             	andl   $0xffffffef,(%ebx)
      fp->_offset = pos;
 8063ab7:	89 43 4c             	mov    %eax,0x4c(%ebx)
      fp->_flag &= ~_IOEOF;
#elif defined __MINT__              /* Atari FreeMiNT */
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
 8063aba:	31 c0                	xor    %eax,%eax
          return -1;
        }

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
      fp->_flags &= ~_IO_EOF_SEEN;
      fp->_offset = pos;
 8063abc:	89 53 50             	mov    %edx,0x50(%ebx)
 8063abf:	90                   	nop
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
}
 8063ac0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063ac4:	89 3c 24             	mov    %edi,(%esp)
 8063ac7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063acb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063acf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063ad3:	b9 ae 1a 00 00       	mov    $0x1aae,%ecx
 8063ad8:	e8 53 00 00 00       	call   8063b30 <__afl_maybe_log>
 8063add:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063ae1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063ae5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063ae9:	8b 3c 24             	mov    (%esp),%edi
 8063aec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063af0:	83 c4 0c             	add    $0xc,%esp
 8063af3:	5b                   	pop    %ebx
 8063af4:	5e                   	pop    %esi
 8063af5:	5f                   	pop    %edi
 8063af6:	5d                   	pop    %ebp
 8063af7:	c3                   	ret    
        {
#if defined __sferror || defined __DragonFly__ || defined __ANDROID__
          /* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin, Android */
          fp_->_flags &= ~__SOFF;
#endif
          return -1;
 8063af8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063afc:	89 3c 24             	mov    %edi,(%esp)
 8063aff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063b03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063b07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063b0b:	b9 e5 6f 00 00       	mov    $0x6fe5,%ecx
 8063b10:	e8 1b 00 00 00       	call   8063b30 <__afl_maybe_log>
 8063b15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063b19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063b1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063b21:	8b 3c 24             	mov    (%esp),%edi
 8063b24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063b28:	83 c8 ff             	or     $0xffffffff,%eax
 8063b2b:	eb 92                	jmp    8063abf <rpl_fseeko+0x19f>
 8063b2d:	8d 76 00             	lea    0x0(%esi),%esi

08063b30 <__afl_maybe_log>:
 8063b30:	9f                   	lahf   
 8063b31:	0f 90 c0             	seto   %al
 8063b34:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8063b3a:	85 d2                	test   %edx,%edx
 8063b3c:	74 22                	je     8063b60 <__afl_setup>

08063b3e <__afl_store>:
 8063b3e:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8063b44:	31 cf                	xor    %ecx,%edi
 8063b46:	d1 e9                	shr    %ecx
 8063b48:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8063b4e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8063b52:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08063b56 <__afl_return>:
 8063b56:	04 7f                	add    $0x7f,%al
 8063b58:	9e                   	sahf   
 8063b59:	c3                   	ret    
 8063b5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08063b60 <__afl_setup>:
 8063b60:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8063b67:	75 ed                	jne    8063b56 <__afl_return>
 8063b69:	50                   	push   %eax
 8063b6a:	51                   	push   %ecx
 8063b6b:	68 68 3c 06 08       	push   $0x8063c68
 8063b70:	e8 6b 57 fe ff       	call   80492e0 <getenv@plt>
 8063b75:	83 c4 04             	add    $0x4,%esp
 8063b78:	85 c0                	test   %eax,%eax
 8063b7a:	0f 84 db 00 00 00    	je     8063c5b <__afl_setup_abort>
 8063b80:	50                   	push   %eax
 8063b81:	e8 1a 59 fe ff       	call   80494a0 <atoi@plt>
 8063b86:	83 c4 04             	add    $0x4,%esp
 8063b89:	6a 00                	push   $0x0
 8063b8b:	6a 00                	push   $0x0
 8063b8d:	50                   	push   %eax
 8063b8e:	e8 8d 56 fe ff       	call   8049220 <shmat@plt>
 8063b93:	83 c4 0c             	add    $0xc,%esp
 8063b96:	83 f8 ff             	cmp    $0xffffffff,%eax
 8063b99:	0f 84 bc 00 00 00    	je     8063c5b <__afl_setup_abort>
 8063b9f:	c6 00 01             	movb   $0x1,(%eax)
 8063ba2:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8063ba7:	89 c2                	mov    %eax,%edx
 8063ba9:	59                   	pop    %ecx
 8063baa:	58                   	pop    %eax

08063bab <__afl_forkserver>:
 8063bab:	50                   	push   %eax
 8063bac:	51                   	push   %ecx
 8063bad:	52                   	push   %edx
 8063bae:	6a 04                	push   $0x4
 8063bb0:	68 e0 ad 43 08       	push   $0x843ade0
 8063bb5:	68 c7 00 00 00       	push   $0xc7
 8063bba:	e8 11 58 fe ff       	call   80493d0 <write@plt>
 8063bbf:	83 c4 0c             	add    $0xc,%esp
 8063bc2:	83 f8 04             	cmp    $0x4,%eax
 8063bc5:	75 6e                	jne    8063c35 <__afl_fork_resume>

08063bc7 <__afl_fork_wait_loop>:
 8063bc7:	6a 04                	push   $0x4
 8063bc9:	68 e0 ad 43 08       	push   $0x843ade0
 8063bce:	68 c6 00 00 00       	push   $0xc6
 8063bd3:	e8 88 55 fe ff       	call   8049160 <read@plt>
 8063bd8:	83 c4 0c             	add    $0xc,%esp
 8063bdb:	83 f8 04             	cmp    $0x4,%eax
 8063bde:	75 74                	jne    8063c54 <__afl_die>
 8063be0:	e8 5b 58 fe ff       	call   8049440 <fork@plt>
 8063be5:	83 f8 00             	cmp    $0x0,%eax
 8063be8:	7c 6a                	jl     8063c54 <__afl_die>
 8063bea:	74 49                	je     8063c35 <__afl_fork_resume>
 8063bec:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8063bf1:	6a 04                	push   $0x4
 8063bf3:	68 40 ae 43 08       	push   $0x843ae40
 8063bf8:	68 c7 00 00 00       	push   $0xc7
 8063bfd:	e8 ce 57 fe ff       	call   80493d0 <write@plt>
 8063c02:	83 c4 0c             	add    $0xc,%esp
 8063c05:	6a 00                	push   $0x0
 8063c07:	68 e0 ad 43 08       	push   $0x843ade0
 8063c0c:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8063c12:	e8 59 56 fe ff       	call   8049270 <waitpid@plt>
 8063c17:	83 c4 0c             	add    $0xc,%esp
 8063c1a:	83 f8 00             	cmp    $0x0,%eax
 8063c1d:	7e 35                	jle    8063c54 <__afl_die>
 8063c1f:	6a 04                	push   $0x4
 8063c21:	68 e0 ad 43 08       	push   $0x843ade0
 8063c26:	68 c7 00 00 00       	push   $0xc7
 8063c2b:	e8 a0 57 fe ff       	call   80493d0 <write@plt>
 8063c30:	83 c4 0c             	add    $0xc,%esp
 8063c33:	eb 92                	jmp    8063bc7 <__afl_fork_wait_loop>

08063c35 <__afl_fork_resume>:
 8063c35:	68 c6 00 00 00       	push   $0xc6
 8063c3a:	e8 e1 58 fe ff       	call   8049520 <close@plt>
 8063c3f:	68 c7 00 00 00       	push   $0xc7
 8063c44:	e8 d7 58 fe ff       	call   8049520 <close@plt>
 8063c49:	83 c4 08             	add    $0x8,%esp
 8063c4c:	5a                   	pop    %edx
 8063c4d:	59                   	pop    %ecx
 8063c4e:	58                   	pop    %eax
 8063c4f:	e9 ea fe ff ff       	jmp    8063b3e <__afl_store>

08063c54 <__afl_die>:
 8063c54:	31 c0                	xor    %eax,%eax
 8063c56:	e8 35 55 fe ff       	call   8049190 <_exit@plt>

08063c5b <__afl_setup_abort>:
 8063c5b:	fe 05 60 ae 43 08    	incb   0x843ae60
 8063c61:	59                   	pop    %ecx
 8063c62:	58                   	pop    %eax
 8063c63:	e9 ee fe ff ff       	jmp    8063b56 <__afl_return>

08063c68 <.AFL_SHM_ENV>:
 8063c68:	5f                   	pop    %edi
 8063c69:	5f                   	pop    %edi
 8063c6a:	41                   	inc    %ecx
 8063c6b:	46                   	inc    %esi
 8063c6c:	4c                   	dec    %esp
 8063c6d:	5f                   	pop    %edi
 8063c6e:	53                   	push   %ebx
 8063c6f:	48                   	dec    %eax
 8063c70:	4d                   	dec    %ebp
 8063c71:	5f                   	pop    %edi
 8063c72:	49                   	dec    %ecx
 8063c73:	44                   	inc    %esp
 8063c74:	00 66 90             	add    %ah,-0x70(%esi)
 8063c77:	66 90                	xchg   %ax,%ax
 8063c79:	66 90                	xchg   %ax,%ax
 8063c7b:	66 90                	xchg   %ax,%ax
 8063c7d:	66 90                	xchg   %ax,%ax
 8063c7f:	90                   	nop

08063c80 <c_strcasecmp>:

#include "c-ctype.h"

int
c_strcasecmp (const char *s1, const char *s2)
{
 8063c80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063c84:	89 3c 24             	mov    %edi,(%esp)
 8063c87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063c8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063c8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063c93:	b9 8f cb 00 00       	mov    $0xcb8f,%ecx
 8063c98:	e8 9b 01 00 00       	call   8063e38 <__afl_maybe_log>
 8063c9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063ca1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063ca5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063ca9:	8b 3c 24             	mov    (%esp),%edi
 8063cac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063cb0:	55                   	push   %ebp
 8063cb1:	57                   	push   %edi
 8063cb2:	56                   	push   %esi
 8063cb3:	53                   	push   %ebx
 8063cb4:	8b 74 24 14          	mov    0x14(%esp),%esi
 8063cb8:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  register const unsigned char *p1 = (const unsigned char *) s1;
  register const unsigned char *p2 = (const unsigned char *) s2;
  unsigned char c1, c2;

  if (p1 == p2)
 8063cbc:	39 de                	cmp    %ebx,%esi
 8063cbe:	75 78                	jne    8063d38 <c_strcasecmp+0xb8>
 8063cc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063cc4:	89 3c 24             	mov    %edi,(%esp)
 8063cc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063ccb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063ccf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063cd3:	b9 0b f9 00 00       	mov    $0xf90b,%ecx
 8063cd8:	e8 5b 01 00 00       	call   8063e38 <__afl_maybe_log>
 8063cdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063ce1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063ce5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063ce9:	8b 3c 24             	mov    (%esp),%edi
 8063cec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063cf0:	e9 08 01 00 00       	jmp    8063dfd <c_strcasecmp+0x17d>
 8063cf5:	8d 76 00             	lea    0x0(%esi),%esi
      c2 = c_tolower (*p2);

      if (c1 == '\0')
        break;

      ++p1;
 8063cf8:	83 c6 01             	add    $0x1,%esi
      ++p2;
 8063cfb:	83 c3 01             	add    $0x1,%ebx
    }
  while (c1 == c2);
 8063cfe:	38 d0                	cmp    %dl,%al
 8063d00:	0f 85 ba 00 00 00    	jne    8063dc0 <c_strcasecmp+0x140>
 8063d06:	66 90                	xchg   %ax,%ax
 8063d08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063d0c:	89 3c 24             	mov    %edi,(%esp)
 8063d0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063d13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063d17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063d1b:	b9 6d 3b 00 00       	mov    $0x3b6d,%ecx
 8063d20:	e8 13 01 00 00       	call   8063e38 <__afl_maybe_log>
 8063d25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063d29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063d2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063d31:	8b 3c 24             	mov    (%esp),%edi
 8063d34:	8d 64 24 10          	lea    0x10(%esp),%esp
  if (p1 == p2)
    return 0;

  do
    {
      c1 = c_tolower (*p1);
 8063d38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063d3c:	89 3c 24             	mov    %edi,(%esp)
 8063d3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063d43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063d47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063d4b:	b9 bd a9 00 00       	mov    $0xa9bd,%ecx
 8063d50:	e8 e3 00 00 00       	call   8063e38 <__afl_maybe_log>
 8063d55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063d59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063d5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063d61:	8b 3c 24             	mov    (%esp),%edi
 8063d64:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063d68:	0f b6 06             	movzbl (%esi),%eax
 8063d6b:	8d 48 bf             	lea    -0x41(%eax),%ecx
 8063d6e:	8d 50 20             	lea    0x20(%eax),%edx
 8063d71:	83 f9 19             	cmp    $0x19,%ecx
      c2 = c_tolower (*p2);
 8063d74:	0f b6 0b             	movzbl (%ebx),%ecx
  if (p1 == p2)
    return 0;

  do
    {
      c1 = c_tolower (*p1);
 8063d77:	0f 46 c2             	cmovbe %edx,%eax
      c2 = c_tolower (*p2);
 8063d7a:	8d 69 bf             	lea    -0x41(%ecx),%ebp
 8063d7d:	8d 51 20             	lea    0x20(%ecx),%edx
 8063d80:	83 fd 19             	cmp    $0x19,%ebp
 8063d83:	0f 47 d1             	cmova  %ecx,%edx

      if (c1 == '\0')
 8063d86:	84 c0                	test   %al,%al
 8063d88:	0f 85 6a ff ff ff    	jne    8063cf8 <c_strcasecmp+0x78>
 8063d8e:	66 90                	xchg   %ax,%ax
 8063d90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063d94:	89 3c 24             	mov    %edi,(%esp)
 8063d97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063d9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063d9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063da3:	b9 75 52 00 00       	mov    $0x5275,%ecx
 8063da8:	e8 8b 00 00 00       	call   8063e38 <__afl_maybe_log>
 8063dad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063db1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063db5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063db9:	8b 3c 24             	mov    (%esp),%edi
 8063dbc:	8d 64 24 10          	lea    0x10(%esp),%esp
      ++p2;
    }
  while (c1 == c2);

  if (UCHAR_MAX <= INT_MAX)
    return c1 - c2;
 8063dc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063dc4:	89 3c 24             	mov    %edi,(%esp)
 8063dc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063dcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063dcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063dd3:	b9 6e 5c 00 00       	mov    $0x5c6e,%ecx
 8063dd8:	e8 5b 00 00 00       	call   8063e38 <__afl_maybe_log>
 8063ddd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063de1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063de5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063de9:	8b 3c 24             	mov    (%esp),%edi
 8063dec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063df0:	0f b6 f2             	movzbl %dl,%esi
 8063df3:	0f b6 c0             	movzbl %al,%eax
  else
    /* On machines where 'char' and 'int' are types of the same size, the
       difference of two 'unsigned char' values - including the sign bit -
       doesn't fit in an 'int'.  */
    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
}
 8063df6:	5b                   	pop    %ebx
      ++p2;
    }
  while (c1 == c2);

  if (UCHAR_MAX <= INT_MAX)
    return c1 - c2;
 8063df7:	29 f0                	sub    %esi,%eax
  else
    /* On machines where 'char' and 'int' are types of the same size, the
       difference of two 'unsigned char' values - including the sign bit -
       doesn't fit in an 'int'.  */
    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
}
 8063df9:	5e                   	pop    %esi
 8063dfa:	5f                   	pop    %edi
 8063dfb:	5d                   	pop    %ebp
 8063dfc:	c3                   	ret    
 8063dfd:	8d 76 00             	lea    0x0(%esi),%esi
 8063e00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063e04:	89 3c 24             	mov    %edi,(%esp)
 8063e07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063e0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063e0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063e13:	b9 aa ef 00 00       	mov    $0xefaa,%ecx
 8063e18:	e8 1b 00 00 00       	call   8063e38 <__afl_maybe_log>
 8063e1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063e21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063e25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063e29:	8b 3c 24             	mov    (%esp),%edi
 8063e2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063e30:	5b                   	pop    %ebx
  register const unsigned char *p1 = (const unsigned char *) s1;
  register const unsigned char *p2 = (const unsigned char *) s2;
  unsigned char c1, c2;

  if (p1 == p2)
    return 0;
 8063e31:	31 c0                	xor    %eax,%eax
  else
    /* On machines where 'char' and 'int' are types of the same size, the
       difference of two 'unsigned char' values - including the sign bit -
       doesn't fit in an 'int'.  */
    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
}
 8063e33:	5e                   	pop    %esi
 8063e34:	5f                   	pop    %edi
 8063e35:	5d                   	pop    %ebp
 8063e36:	c3                   	ret    
 8063e37:	90                   	nop

08063e38 <__afl_maybe_log>:
 8063e38:	9f                   	lahf   
 8063e39:	0f 90 c0             	seto   %al
 8063e3c:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8063e42:	85 d2                	test   %edx,%edx
 8063e44:	74 22                	je     8063e68 <__afl_setup>

08063e46 <__afl_store>:
 8063e46:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 8063e4c:	31 cf                	xor    %ecx,%edi
 8063e4e:	d1 e9                	shr    %ecx
 8063e50:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8063e56:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8063e5a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08063e5e <__afl_return>:
 8063e5e:	04 7f                	add    $0x7f,%al
 8063e60:	9e                   	sahf   
 8063e61:	c3                   	ret    
 8063e62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08063e68 <__afl_setup>:
 8063e68:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 8063e6f:	75 ed                	jne    8063e5e <__afl_return>
 8063e71:	50                   	push   %eax
 8063e72:	51                   	push   %ecx
 8063e73:	68 70 3f 06 08       	push   $0x8063f70
 8063e78:	e8 63 54 fe ff       	call   80492e0 <getenv@plt>
 8063e7d:	83 c4 04             	add    $0x4,%esp
 8063e80:	85 c0                	test   %eax,%eax
 8063e82:	0f 84 db 00 00 00    	je     8063f63 <__afl_setup_abort>
 8063e88:	50                   	push   %eax
 8063e89:	e8 12 56 fe ff       	call   80494a0 <atoi@plt>
 8063e8e:	83 c4 04             	add    $0x4,%esp
 8063e91:	6a 00                	push   $0x0
 8063e93:	6a 00                	push   $0x0
 8063e95:	50                   	push   %eax
 8063e96:	e8 85 53 fe ff       	call   8049220 <shmat@plt>
 8063e9b:	83 c4 0c             	add    $0xc,%esp
 8063e9e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8063ea1:	0f 84 bc 00 00 00    	je     8063f63 <__afl_setup_abort>
 8063ea7:	c6 00 01             	movb   $0x1,(%eax)
 8063eaa:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 8063eaf:	89 c2                	mov    %eax,%edx
 8063eb1:	59                   	pop    %ecx
 8063eb2:	58                   	pop    %eax

08063eb3 <__afl_forkserver>:
 8063eb3:	50                   	push   %eax
 8063eb4:	51                   	push   %ecx
 8063eb5:	52                   	push   %edx
 8063eb6:	6a 04                	push   $0x4
 8063eb8:	68 e0 ad 43 08       	push   $0x843ade0
 8063ebd:	68 c7 00 00 00       	push   $0xc7
 8063ec2:	e8 09 55 fe ff       	call   80493d0 <write@plt>
 8063ec7:	83 c4 0c             	add    $0xc,%esp
 8063eca:	83 f8 04             	cmp    $0x4,%eax
 8063ecd:	75 6e                	jne    8063f3d <__afl_fork_resume>

08063ecf <__afl_fork_wait_loop>:
 8063ecf:	6a 04                	push   $0x4
 8063ed1:	68 e0 ad 43 08       	push   $0x843ade0
 8063ed6:	68 c6 00 00 00       	push   $0xc6
 8063edb:	e8 80 52 fe ff       	call   8049160 <read@plt>
 8063ee0:	83 c4 0c             	add    $0xc,%esp
 8063ee3:	83 f8 04             	cmp    $0x4,%eax
 8063ee6:	75 74                	jne    8063f5c <__afl_die>
 8063ee8:	e8 53 55 fe ff       	call   8049440 <fork@plt>
 8063eed:	83 f8 00             	cmp    $0x0,%eax
 8063ef0:	7c 6a                	jl     8063f5c <__afl_die>
 8063ef2:	74 49                	je     8063f3d <__afl_fork_resume>
 8063ef4:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8063ef9:	6a 04                	push   $0x4
 8063efb:	68 40 ae 43 08       	push   $0x843ae40
 8063f00:	68 c7 00 00 00       	push   $0xc7
 8063f05:	e8 c6 54 fe ff       	call   80493d0 <write@plt>
 8063f0a:	83 c4 0c             	add    $0xc,%esp
 8063f0d:	6a 00                	push   $0x0
 8063f0f:	68 e0 ad 43 08       	push   $0x843ade0
 8063f14:	ff 35 40 ae 43 08    	pushl  0x843ae40
 8063f1a:	e8 51 53 fe ff       	call   8049270 <waitpid@plt>
 8063f1f:	83 c4 0c             	add    $0xc,%esp
 8063f22:	83 f8 00             	cmp    $0x0,%eax
 8063f25:	7e 35                	jle    8063f5c <__afl_die>
 8063f27:	6a 04                	push   $0x4
 8063f29:	68 e0 ad 43 08       	push   $0x843ade0
 8063f2e:	68 c7 00 00 00       	push   $0xc7
 8063f33:	e8 98 54 fe ff       	call   80493d0 <write@plt>
 8063f38:	83 c4 0c             	add    $0xc,%esp
 8063f3b:	eb 92                	jmp    8063ecf <__afl_fork_wait_loop>

08063f3d <__afl_fork_resume>:
 8063f3d:	68 c6 00 00 00       	push   $0xc6
 8063f42:	e8 d9 55 fe ff       	call   8049520 <close@plt>
 8063f47:	68 c7 00 00 00       	push   $0xc7
 8063f4c:	e8 cf 55 fe ff       	call   8049520 <close@plt>
 8063f51:	83 c4 08             	add    $0x8,%esp
 8063f54:	5a                   	pop    %edx
 8063f55:	59                   	pop    %ecx
 8063f56:	58                   	pop    %eax
 8063f57:	e9 ea fe ff ff       	jmp    8063e46 <__afl_store>

08063f5c <__afl_die>:
 8063f5c:	31 c0                	xor    %eax,%eax
 8063f5e:	e8 2d 52 fe ff       	call   8049190 <_exit@plt>

08063f63 <__afl_setup_abort>:
 8063f63:	fe 05 60 ae 43 08    	incb   0x843ae60
 8063f69:	59                   	pop    %ecx
 8063f6a:	58                   	pop    %eax
 8063f6b:	e9 ee fe ff ff       	jmp    8063e5e <__afl_return>

08063f70 <.AFL_SHM_ENV>:
 8063f70:	5f                   	pop    %edi
 8063f71:	5f                   	pop    %edi
 8063f72:	41                   	inc    %ecx
 8063f73:	46                   	inc    %esi
 8063f74:	4c                   	dec    %esp
 8063f75:	5f                   	pop    %edi
 8063f76:	53                   	push   %ebx
 8063f77:	48                   	dec    %eax
 8063f78:	4d                   	dec    %ebp
 8063f79:	5f                   	pop    %edi
 8063f7a:	49                   	dec    %ecx
 8063f7b:	44                   	inc    %esp
 8063f7c:	00 66 90             	add    %ah,-0x70(%esi)
 8063f7f:	90                   	nop

08063f80 <close_stream>:
   that writes to STREAM -- just let the internal stream state record
   the failure.  That's what the ferror test is checking below.  */

int
close_stream (FILE *stream)
{
 8063f80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063f84:	89 3c 24             	mov    %edi,(%esp)
 8063f87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063f8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063f8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063f93:	b9 fd 7c 00 00       	mov    $0x7cfd,%ecx
 8063f98:	e8 ab 03 00 00       	call   8064348 <__afl_maybe_log>
 8063f9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8063fa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8063fa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8063fa9:	8b 3c 24             	mov    (%esp),%edi
 8063fac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8063fb0:	55                   	push   %ebp
 8063fb1:	57                   	push   %edi
 8063fb2:	56                   	push   %esi
 8063fb3:	53                   	push   %ebx
 8063fb4:	83 ec 18             	sub    $0x18,%esp
 8063fb7:	8b 74 24 2c          	mov    0x2c(%esp),%esi
  const bool some_pending = (__fpending (stream+(lava_get(443))*(0x6c6174a6==(lava_get(443))||0xa674616c==(lava_get(443)))+(lava_get(446))*(0x6c6174a3==(lava_get(446))||0xa374616c==(lava_get(446)))+(lava_get(447))*(0x6c6174a2==(lava_get(447))||0xa274616c==(lava_get(447)))) != 0);
 8063fbb:	68 bb 01 00 00       	push   $0x1bb
 8063fc0:	e8 0b f9 fe ff       	call   80538d0 <lava_get>
 8063fc5:	c7 04 24 bb 01 00 00 	movl   $0x1bb,(%esp)
 8063fcc:	89 c7                	mov    %eax,%edi
 8063fce:	e8 fd f8 fe ff       	call   80538d0 <lava_get>
 8063fd3:	83 c4 10             	add    $0x10,%esp
 8063fd6:	3d a6 74 61 6c       	cmp    $0x6c6174a6,%eax
 8063fdb:	ba 01 00 00 00       	mov    $0x1,%edx
 8063fe0:	74 4c                	je     806402e <close_stream+0xae>
 8063fe2:	66 90                	xchg   %ax,%ax
 8063fe4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8063fe8:	89 3c 24             	mov    %edi,(%esp)
 8063feb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8063fef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8063ff3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8063ff7:	b9 1f 5a 00 00       	mov    $0x5a1f,%ecx
 8063ffc:	e8 47 03 00 00       	call   8064348 <__afl_maybe_log>
 8064001:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064005:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064009:	8b 54 24 04          	mov    0x4(%esp),%edx
 806400d:	8b 3c 24             	mov    (%esp),%edi
 8064010:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064014:	83 ec 0c             	sub    $0xc,%esp
 8064017:	68 bb 01 00 00       	push   $0x1bb
 806401c:	e8 af f8 fe ff       	call   80538d0 <lava_get>
 8064021:	31 d2                	xor    %edx,%edx
 8064023:	83 c4 10             	add    $0x10,%esp
 8064026:	3d 6c 61 74 a6       	cmp    $0xa674616c,%eax
 806402b:	0f 94 c2             	sete   %dl
 806402e:	66 90                	xchg   %ax,%ax
 8064030:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064034:	89 3c 24             	mov    %edi,(%esp)
 8064037:	89 54 24 04          	mov    %edx,0x4(%esp)
 806403b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806403f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064043:	b9 25 43 00 00       	mov    $0x4325,%ecx
 8064048:	e8 fb 02 00 00       	call   8064348 <__afl_maybe_log>
 806404d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064051:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064055:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064059:	8b 3c 24             	mov    (%esp),%edi
 806405c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064060:	83 ec 0c             	sub    $0xc,%esp
 8064063:	0f af d7             	imul   %edi,%edx
 8064066:	68 be 01 00 00       	push   $0x1be
 806406b:	89 d5                	mov    %edx,%ebp
 806406d:	e8 5e f8 fe ff       	call   80538d0 <lava_get>
 8064072:	c7 04 24 be 01 00 00 	movl   $0x1be,(%esp)
 8064079:	89 c3                	mov    %eax,%ebx
 806407b:	e8 50 f8 fe ff       	call   80538d0 <lava_get>
 8064080:	83 c4 10             	add    $0x10,%esp
 8064083:	3d a3 74 61 6c       	cmp    $0x6c6174a3,%eax
 8064088:	b9 01 00 00 00       	mov    $0x1,%ecx
 806408d:	74 4b                	je     80640da <close_stream+0x15a>
 806408f:	90                   	nop
 8064090:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064094:	89 3c 24             	mov    %edi,(%esp)
 8064097:	89 54 24 04          	mov    %edx,0x4(%esp)
 806409b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806409f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80640a3:	b9 f9 f1 00 00       	mov    $0xf1f9,%ecx
 80640a8:	e8 9b 02 00 00       	call   8064348 <__afl_maybe_log>
 80640ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80640b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80640b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80640b9:	8b 3c 24             	mov    (%esp),%edi
 80640bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80640c0:	83 ec 0c             	sub    $0xc,%esp
 80640c3:	68 be 01 00 00       	push   $0x1be
 80640c8:	e8 03 f8 fe ff       	call   80538d0 <lava_get>
 80640cd:	31 c9                	xor    %ecx,%ecx
 80640cf:	83 c4 10             	add    $0x10,%esp
 80640d2:	3d 6c 61 74 a3       	cmp    $0xa374616c,%eax
 80640d7:	0f 94 c1             	sete   %cl
 80640da:	66 90                	xchg   %ax,%ax
 80640dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80640e0:	89 3c 24             	mov    %edi,(%esp)
 80640e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80640e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80640eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80640ef:	b9 5c 24 00 00       	mov    $0x245c,%ecx
 80640f4:	e8 4f 02 00 00       	call   8064348 <__afl_maybe_log>
 80640f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80640fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064101:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064105:	8b 3c 24             	mov    (%esp),%edi
 8064108:	8d 64 24 10          	lea    0x10(%esp),%esp
 806410c:	83 ec 0c             	sub    $0xc,%esp
 806410f:	0f af d9             	imul   %ecx,%ebx
 8064112:	68 bf 01 00 00       	push   $0x1bf
 8064117:	e8 b4 f7 fe ff       	call   80538d0 <lava_get>
 806411c:	8d 3c 2b             	lea    (%ebx,%ebp,1),%edi
 806411f:	c7 04 24 bf 01 00 00 	movl   $0x1bf,(%esp)
 8064126:	89 c5                	mov    %eax,%ebp
 8064128:	e8 a3 f7 fe ff       	call   80538d0 <lava_get>
 806412d:	83 c4 10             	add    $0x10,%esp
 8064130:	3d a2 74 61 6c       	cmp    $0x6c6174a2,%eax
 8064135:	ba 01 00 00 00       	mov    $0x1,%edx
 806413a:	74 4a                	je     8064186 <close_stream+0x206>
 806413c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064140:	89 3c 24             	mov    %edi,(%esp)
 8064143:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064147:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806414b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806414f:	b9 2b 42 00 00       	mov    $0x422b,%ecx
 8064154:	e8 ef 01 00 00       	call   8064348 <__afl_maybe_log>
 8064159:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806415d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064161:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064165:	8b 3c 24             	mov    (%esp),%edi
 8064168:	8d 64 24 10          	lea    0x10(%esp),%esp
 806416c:	83 ec 0c             	sub    $0xc,%esp
 806416f:	68 bf 01 00 00       	push   $0x1bf
 8064174:	e8 57 f7 fe ff       	call   80538d0 <lava_get>
 8064179:	31 d2                	xor    %edx,%edx
 806417b:	83 c4 10             	add    $0x10,%esp
 806417e:	3d 6c 61 74 a2       	cmp    $0xa274616c,%eax
 8064183:	0f 94 c2             	sete   %dl
 8064186:	66 90                	xchg   %ax,%ax
 8064188:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806418c:	89 3c 24             	mov    %edi,(%esp)
 806418f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064193:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064197:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806419b:	b9 62 57 00 00       	mov    $0x5762,%ecx
 80641a0:	e8 a3 01 00 00       	call   8064348 <__afl_maybe_log>
 80641a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80641a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80641ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80641b1:	8b 3c 24             	mov    (%esp),%edi
 80641b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80641b8:	0f af ea             	imul   %edx,%ebp
 80641bb:	83 ec 0c             	sub    $0xc,%esp
 80641be:	01 fd                	add    %edi,%ebp
 80641c0:	69 c5 94 00 00 00    	imul   $0x94,%ebp,%eax
 80641c6:	01 f0                	add    %esi,%eax
 80641c8:	50                   	push   %eax
 80641c9:	e8 c2 50 fe ff       	call   8049290 <__fpending@plt>

/* Faster versions when locking is not required.  */
__STDIO_INLINE int
__NTH (ferror_unlocked (FILE *__stream))
{
  return _IO_ferror_unlocked (__stream);
 80641ce:	8b 1e                	mov    (%esi),%ebx
 80641d0:	89 c7                	mov    %eax,%edi
  const bool prev_fail = (ferror (stream) != 0);
  const bool fclose_fail = (fclose (stream) != 0);
 80641d2:	89 34 24             	mov    %esi,(%esp)
 80641d5:	e8 c6 e2 ff ff       	call   80624a0 <rpl_fclose>
 80641da:	83 c4 10             	add    $0x10,%esp
 80641dd:	83 e3 20             	and    $0x20,%ebx
 80641e0:	85 c0                	test   %eax,%eax
 80641e2:	0f 95 c1             	setne  %cl
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 80641e5:	85 db                	test   %ebx,%ebx
 80641e7:	0f 85 e3 00 00 00    	jne    80642d0 <close_stream+0x350>
 80641ed:	8d 76 00             	lea    0x0(%esi),%esi
 80641f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80641f4:	89 3c 24             	mov    %edi,(%esp)
 80641f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80641fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80641ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064203:	b9 89 be 00 00       	mov    $0xbe89,%ecx
 8064208:	e8 3b 01 00 00       	call   8064348 <__afl_maybe_log>
 806420d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064211:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064215:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064219:	8b 3c 24             	mov    (%esp),%edi
 806421c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064220:	84 c9                	test   %cl,%cl
 8064222:	74 70                	je     8064294 <close_stream+0x314>
 8064224:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064228:	89 3c 24             	mov    %edi,(%esp)
 806422b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806422f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064233:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064237:	b9 de f6 00 00       	mov    $0xf6de,%ecx
 806423c:	e8 07 01 00 00       	call   8064348 <__afl_maybe_log>
 8064241:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064245:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064249:	8b 54 24 04          	mov    0x4(%esp),%edx
 806424d:	8b 3c 24             	mov    (%esp),%edi
 8064250:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064254:	85 ff                	test   %edi,%edi
    {
      if (! fclose_fail)
        errno = 0;
      return EOF;
 8064256:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 806425b:	0f 84 c7 00 00 00    	je     8064328 <close_stream+0x3a8>
 8064261:	8d 76 00             	lea    0x0(%esi),%esi
 8064264:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064268:	89 3c 24             	mov    %edi,(%esp)
 806426b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806426f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064273:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064277:	b9 21 a4 00 00       	mov    $0xa421,%ecx
 806427c:	e8 c7 00 00 00       	call   8064348 <__afl_maybe_log>
 8064281:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064285:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064289:	8b 54 24 04          	mov    0x4(%esp),%edx
 806428d:	8b 3c 24             	mov    (%esp),%edi
 8064290:	8d 64 24 10          	lea    0x10(%esp),%esp
        errno = 0;
      return EOF;
    }

  return 0;
}
 8064294:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064298:	89 3c 24             	mov    %edi,(%esp)
 806429b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806429f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80642a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80642a7:	b9 69 1b 00 00       	mov    $0x1b69,%ecx
 80642ac:	e8 97 00 00 00       	call   8064348 <__afl_maybe_log>
 80642b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80642b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80642b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80642bd:	8b 3c 24             	mov    (%esp),%edi
 80642c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80642c4:	83 c4 0c             	add    $0xc,%esp
 80642c7:	89 d8                	mov    %ebx,%eax
 80642c9:	5b                   	pop    %ebx
 80642ca:	5e                   	pop    %esi
 80642cb:	5f                   	pop    %edi
 80642cc:	5d                   	pop    %ebp
 80642cd:	c3                   	ret    
 80642ce:	66 90                	xchg   %ax,%ax
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
    {
      if (! fclose_fail)
 80642d0:	84 c9                	test   %cl,%cl
        errno = 0;
      return EOF;
 80642d2:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
    {
      if (! fclose_fail)
 80642d7:	75 bb                	jne    8064294 <close_stream+0x314>
 80642d9:	8d 76 00             	lea    0x0(%esi),%esi
 80642dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80642e0:	89 3c 24             	mov    %edi,(%esp)
 80642e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80642e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80642eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80642ef:	b9 06 57 00 00       	mov    $0x5706,%ecx
 80642f4:	e8 4f 00 00 00       	call   8064348 <__afl_maybe_log>
 80642f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80642fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064301:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064305:	8b 3c 24             	mov    (%esp),%edi
 8064308:	8d 64 24 10          	lea    0x10(%esp),%esp
        errno = 0;
 806430c:	e8 ef 50 fe ff       	call   8049400 <__errno_location@plt>
 8064311:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      return EOF;
    }

  return 0;
}
 8064317:	83 c4 0c             	add    $0xc,%esp
 806431a:	89 d8                	mov    %ebx,%eax
 806431c:	5b                   	pop    %ebx
 806431d:	5e                   	pop    %esi
 806431e:	5f                   	pop    %edi
 806431f:	5d                   	pop    %ebp
 8064320:	c3                   	ret    
 8064321:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8064328:	e8 d3 50 fe ff       	call   8049400 <__errno_location@plt>
 806432d:	31 db                	xor    %ebx,%ebx
 806432f:	83 38 09             	cmpl   $0x9,(%eax)
 8064332:	0f 95 c3             	setne  %bl
        errno = 0;
      return EOF;
    }

  return 0;
}
 8064335:	83 c4 0c             	add    $0xc,%esp
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8064338:	f7 db                	neg    %ebx
        errno = 0;
      return EOF;
    }

  return 0;
}
 806433a:	89 d8                	mov    %ebx,%eax
 806433c:	5b                   	pop    %ebx
 806433d:	5e                   	pop    %esi
 806433e:	5f                   	pop    %edi
 806433f:	5d                   	pop    %ebp
 8064340:	c3                   	ret    
 8064341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08064348 <__afl_maybe_log>:
 8064348:	9f                   	lahf   
 8064349:	0f 90 c0             	seto   %al
 806434c:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8064352:	85 d2                	test   %edx,%edx
 8064354:	74 22                	je     8064378 <__afl_setup>

08064356 <__afl_store>:
 8064356:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 806435c:	31 cf                	xor    %ecx,%edi
 806435e:	d1 e9                	shr    %ecx
 8064360:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8064366:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 806436a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0806436e <__afl_return>:
 806436e:	04 7f                	add    $0x7f,%al
 8064370:	9e                   	sahf   
 8064371:	c3                   	ret    
 8064372:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08064378 <__afl_setup>:
 8064378:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 806437f:	75 ed                	jne    806436e <__afl_return>
 8064381:	50                   	push   %eax
 8064382:	51                   	push   %ecx
 8064383:	68 80 44 06 08       	push   $0x8064480
 8064388:	e8 53 4f fe ff       	call   80492e0 <getenv@plt>
 806438d:	83 c4 04             	add    $0x4,%esp
 8064390:	85 c0                	test   %eax,%eax
 8064392:	0f 84 db 00 00 00    	je     8064473 <__afl_setup_abort>
 8064398:	50                   	push   %eax
 8064399:	e8 02 51 fe ff       	call   80494a0 <atoi@plt>
 806439e:	83 c4 04             	add    $0x4,%esp
 80643a1:	6a 00                	push   $0x0
 80643a3:	6a 00                	push   $0x0
 80643a5:	50                   	push   %eax
 80643a6:	e8 75 4e fe ff       	call   8049220 <shmat@plt>
 80643ab:	83 c4 0c             	add    $0xc,%esp
 80643ae:	83 f8 ff             	cmp    $0xffffffff,%eax
 80643b1:	0f 84 bc 00 00 00    	je     8064473 <__afl_setup_abort>
 80643b7:	c6 00 01             	movb   $0x1,(%eax)
 80643ba:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 80643bf:	89 c2                	mov    %eax,%edx
 80643c1:	59                   	pop    %ecx
 80643c2:	58                   	pop    %eax

080643c3 <__afl_forkserver>:
 80643c3:	50                   	push   %eax
 80643c4:	51                   	push   %ecx
 80643c5:	52                   	push   %edx
 80643c6:	6a 04                	push   $0x4
 80643c8:	68 e0 ad 43 08       	push   $0x843ade0
 80643cd:	68 c7 00 00 00       	push   $0xc7
 80643d2:	e8 f9 4f fe ff       	call   80493d0 <write@plt>
 80643d7:	83 c4 0c             	add    $0xc,%esp
 80643da:	83 f8 04             	cmp    $0x4,%eax
 80643dd:	75 6e                	jne    806444d <__afl_fork_resume>

080643df <__afl_fork_wait_loop>:
 80643df:	6a 04                	push   $0x4
 80643e1:	68 e0 ad 43 08       	push   $0x843ade0
 80643e6:	68 c6 00 00 00       	push   $0xc6
 80643eb:	e8 70 4d fe ff       	call   8049160 <read@plt>
 80643f0:	83 c4 0c             	add    $0xc,%esp
 80643f3:	83 f8 04             	cmp    $0x4,%eax
 80643f6:	75 74                	jne    806446c <__afl_die>
 80643f8:	e8 43 50 fe ff       	call   8049440 <fork@plt>
 80643fd:	83 f8 00             	cmp    $0x0,%eax
 8064400:	7c 6a                	jl     806446c <__afl_die>
 8064402:	74 49                	je     806444d <__afl_fork_resume>
 8064404:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8064409:	6a 04                	push   $0x4
 806440b:	68 40 ae 43 08       	push   $0x843ae40
 8064410:	68 c7 00 00 00       	push   $0xc7
 8064415:	e8 b6 4f fe ff       	call   80493d0 <write@plt>
 806441a:	83 c4 0c             	add    $0xc,%esp
 806441d:	6a 00                	push   $0x0
 806441f:	68 e0 ad 43 08       	push   $0x843ade0
 8064424:	ff 35 40 ae 43 08    	pushl  0x843ae40
 806442a:	e8 41 4e fe ff       	call   8049270 <waitpid@plt>
 806442f:	83 c4 0c             	add    $0xc,%esp
 8064432:	83 f8 00             	cmp    $0x0,%eax
 8064435:	7e 35                	jle    806446c <__afl_die>
 8064437:	6a 04                	push   $0x4
 8064439:	68 e0 ad 43 08       	push   $0x843ade0
 806443e:	68 c7 00 00 00       	push   $0xc7
 8064443:	e8 88 4f fe ff       	call   80493d0 <write@plt>
 8064448:	83 c4 0c             	add    $0xc,%esp
 806444b:	eb 92                	jmp    80643df <__afl_fork_wait_loop>

0806444d <__afl_fork_resume>:
 806444d:	68 c6 00 00 00       	push   $0xc6
 8064452:	e8 c9 50 fe ff       	call   8049520 <close@plt>
 8064457:	68 c7 00 00 00       	push   $0xc7
 806445c:	e8 bf 50 fe ff       	call   8049520 <close@plt>
 8064461:	83 c4 08             	add    $0x8,%esp
 8064464:	5a                   	pop    %edx
 8064465:	59                   	pop    %ecx
 8064466:	58                   	pop    %eax
 8064467:	e9 ea fe ff ff       	jmp    8064356 <__afl_store>

0806446c <__afl_die>:
 806446c:	31 c0                	xor    %eax,%eax
 806446e:	e8 1d 4d fe ff       	call   8049190 <_exit@plt>

08064473 <__afl_setup_abort>:
 8064473:	fe 05 60 ae 43 08    	incb   0x843ae60
 8064479:	59                   	pop    %ecx
 806447a:	58                   	pop    %eax
 806447b:	e9 ee fe ff ff       	jmp    806436e <__afl_return>

08064480 <.AFL_SHM_ENV>:
 8064480:	5f                   	pop    %edi
 8064481:	5f                   	pop    %edi
 8064482:	41                   	inc    %ecx
 8064483:	46                   	inc    %esi
 8064484:	4c                   	dec    %esp
 8064485:	5f                   	pop    %edi
 8064486:	53                   	push   %ebx
 8064487:	48                   	dec    %eax
 8064488:	4d                   	dec    %ebp
 8064489:	5f                   	pop    %edi
 806448a:	49                   	dec    %ecx
 806448b:	44                   	inc    %esp
 806448c:	00 66 90             	add    %ah,-0x70(%esi)
 806448f:	90                   	nop

08064490 <locale_charset>:
#ifdef STATIC
STATIC
#endif
const char *
locale_charset (void)
{
 8064490:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064494:	89 3c 24             	mov    %edi,(%esp)
 8064497:	89 54 24 04          	mov    %edx,0x4(%esp)
 806449b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806449f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80644a3:	b9 a6 7b 00 00       	mov    $0x7ba6,%ecx
 80644a8:	e8 6b 0e 00 00       	call   8065318 <__afl_maybe_log>
 80644ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80644b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80644b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80644b9:	8b 3c 24             	mov    (%esp),%edi
 80644bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80644c0:	55                   	push   %ebp
 80644c1:	57                   	push   %edi
 80644c2:	56                   	push   %esi
 80644c3:	53                   	push   %ebx

#endif

  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";
 80644c4:	be dd 6a 06 08       	mov    $0x8066add,%esi
#ifdef STATIC
STATIC
#endif
const char *
locale_charset (void)
{
 80644c9:	81 ec 98 00 00 00    	sub    $0x98,%esp
#if !(defined WINDOWS_NATIVE || defined OS2)

# if HAVE_LANGINFO_CODESET

  /* Most systems support nl_langinfo (CODESET) nowadays.  */
  codeset = nl_langinfo (CODESET);
 80644cf:	6a 0e                	push   $0xe
 80644d1:	e8 8a 4f fe ff       	call   8049460 <nl_langinfo@plt>
static const char *
get_charset_aliases (void)
{
  const char *cp;

  cp = charset_aliases;
 80644d6:	8b 1d b0 ad 43 08    	mov    0x843adb0,%ebx
        }
    }

#endif

  if (codeset == NULL)
 80644dc:	83 c4 10             	add    $0x10,%esp
    /* The canonical name cannot be determined.  */
    codeset = "";
 80644df:	85 c0                	test   %eax,%eax
 80644e1:	0f 45 f0             	cmovne %eax,%esi
get_charset_aliases (void)
{
  const char *cp;

  cp = charset_aliases;
  if (cp == NULL)
 80644e4:	85 db                	test   %ebx,%ebx
 80644e6:	0f 84 7e 02 00 00    	je     806476a <locale_charset+0x2da>
 80644ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80644f0:	89 3c 24             	mov    %edi,(%esp)
 80644f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80644f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80644fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80644ff:	b9 52 47 00 00       	mov    $0x4752,%ecx
 8064504:	e8 0f 0e 00 00       	call   8065318 <__afl_maybe_log>
 8064509:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806450d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064511:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064515:	8b 3c 24             	mov    (%esp),%edi
 8064518:	8d 64 24 10          	lea    0x10(%esp),%esp
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
       *aliases != '\0';
 806451c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064520:	89 3c 24             	mov    %edi,(%esp)
 8064523:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064527:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806452b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806452f:	b9 ec 15 00 00       	mov    $0x15ec,%ecx
 8064534:	e8 df 0d 00 00       	call   8065318 <__afl_maybe_log>
 8064539:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806453d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064541:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064545:	8b 3c 24             	mov    (%esp),%edi
 8064548:	8d 64 24 10          	lea    0x10(%esp),%esp
 806454c:	0f b6 2b             	movzbl (%ebx),%ebp
  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
 806454f:	89 ea                	mov    %ebp,%edx
 8064551:	84 d2                	test   %dl,%dl
 8064553:	0f 85 9b 00 00 00    	jne    80645f4 <locale_charset+0x164>
 8064559:	8d 76 00             	lea    0x0(%esi),%esi
 806455c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064560:	89 3c 24             	mov    %edi,(%esp)
 8064563:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064567:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806456b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806456f:	b9 09 48 00 00       	mov    $0x4809,%ecx
 8064574:	e8 9f 0d 00 00       	call   8065318 <__afl_maybe_log>
 8064579:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806457d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064581:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064585:	8b 3c 24             	mov    (%esp),%edi
 8064588:	8d 64 24 10          	lea    0x10(%esp),%esp
 806458c:	e9 93 01 00 00       	jmp    8064724 <locale_charset+0x294>
 8064591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *aliases != '\0';
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
 8064598:	83 ec 0c             	sub    $0xc,%esp
 806459b:	53                   	push   %ebx
 806459c:	e8 ff 4d fe ff       	call   80493a0 <strlen@plt>
 80645a1:	8d 5c 03 01          	lea    0x1(%ebx,%eax,1),%ebx
 80645a5:	89 1c 24             	mov    %ebx,(%esp)
 80645a8:	e8 f3 4d fe ff       	call   80493a0 <strlen@plt>
 80645ad:	8d 5c 03 01          	lea    0x1(%ebx,%eax,1),%ebx
 80645b1:	83 c4 10             	add    $0x10,%esp
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
       *aliases != '\0';
 80645b4:	0f b6 2b             	movzbl (%ebx),%ebp
  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
 80645b7:	89 e9                	mov    %ebp,%ecx
 80645b9:	84 c9                	test   %cl,%cl
 80645bb:	0f 84 63 01 00 00    	je     8064724 <locale_charset+0x294>
 80645c1:	8d 76 00             	lea    0x0(%esi),%esi
 80645c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80645c8:	89 3c 24             	mov    %edi,(%esp)
 80645cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80645cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80645d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80645d7:	b9 4a a8 00 00       	mov    $0xa84a,%ecx
 80645dc:	e8 37 0d 00 00       	call   8065318 <__afl_maybe_log>
 80645e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80645e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80645e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80645ed:	8b 3c 24             	mov    (%esp),%edi
 80645f0:	8d 64 24 10          	lea    0x10(%esp),%esp
       *aliases != '\0';
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
    if (strcmp (codeset, aliases) == 0
 80645f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80645f8:	89 3c 24             	mov    %edi,(%esp)
 80645fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80645ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064603:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064607:	b9 5b 05 00 00       	mov    $0x55b,%ecx
 806460c:	e8 07 0d 00 00       	call   8065318 <__afl_maybe_log>
 8064611:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064615:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064619:	8b 54 24 04          	mov    0x4(%esp),%edx
 806461d:	8b 3c 24             	mov    (%esp),%edi
 8064620:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064624:	83 ec 08             	sub    $0x8,%esp
 8064627:	53                   	push   %ebx
 8064628:	56                   	push   %esi
 8064629:	e8 12 4b fe ff       	call   8049140 <strcmp@plt>
 806462e:	83 c4 10             	add    $0x10,%esp
 8064631:	85 c0                	test   %eax,%eax
 8064633:	0f 84 ab 00 00 00    	je     80646e4 <locale_charset+0x254>
 8064639:	8d 76 00             	lea    0x0(%esi),%esi
 806463c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064640:	89 3c 24             	mov    %edi,(%esp)
 8064643:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064647:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806464b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806464f:	b9 db b6 00 00       	mov    $0xb6db,%ecx
 8064654:	e8 bf 0c 00 00       	call   8065318 <__afl_maybe_log>
 8064659:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806465d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064661:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064665:	8b 3c 24             	mov    (%esp),%edi
 8064668:	8d 64 24 10          	lea    0x10(%esp),%esp
        || (aliases[0] == '*' && aliases[1] == '\0'))
 806466c:	89 e8                	mov    %ebp,%eax
 806466e:	3c 2a                	cmp    $0x2a,%al
 8064670:	0f 85 22 ff ff ff    	jne    8064598 <locale_charset+0x108>
 8064676:	66 90                	xchg   %ax,%ax
 8064678:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806467c:	89 3c 24             	mov    %edi,(%esp)
 806467f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064683:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064687:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806468b:	b9 25 64 00 00       	mov    $0x6425,%ecx
 8064690:	e8 83 0c 00 00       	call   8065318 <__afl_maybe_log>
 8064695:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064699:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806469d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80646a1:	8b 3c 24             	mov    (%esp),%edi
 80646a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80646a8:	80 7b 01 00          	cmpb   $0x0,0x1(%ebx)
 80646ac:	0f 85 e6 fe ff ff    	jne    8064598 <locale_charset+0x108>
 80646b2:	66 90                	xchg   %ax,%ax
 80646b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80646b8:	89 3c 24             	mov    %edi,(%esp)
 80646bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80646bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80646c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80646c7:	b9 f1 c3 00 00       	mov    $0xc3f1,%ecx
 80646cc:	e8 47 0c 00 00       	call   8065318 <__afl_maybe_log>
 80646d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80646d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80646d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80646dd:	8b 3c 24             	mov    (%esp),%edi
 80646e0:	8d 64 24 10          	lea    0x10(%esp),%esp
      {
        codeset = aliases + strlen (aliases) + 1;
 80646e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80646e8:	89 3c 24             	mov    %edi,(%esp)
 80646eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80646ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80646f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80646f7:	b9 0d ce 00 00       	mov    $0xce0d,%ecx
 80646fc:	e8 17 0c 00 00       	call   8065318 <__afl_maybe_log>
 8064701:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064705:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064709:	8b 54 24 04          	mov    0x4(%esp),%edx
 806470d:	8b 3c 24             	mov    (%esp),%edi
 8064710:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064714:	83 ec 0c             	sub    $0xc,%esp
 8064717:	53                   	push   %ebx
 8064718:	e8 83 4c fe ff       	call   80493a0 <strlen@plt>
 806471d:	8d 74 03 01          	lea    0x1(%ebx,%eax,1),%esi
 8064721:	83 c4 10             	add    $0x10,%esp

  /* Don't return an empty string.  GNU libc and GNU libiconv interpret
     the empty string as denoting "the locale's character encoding",
     thus GNU libiconv would call this function a second time.  */
  if (codeset[0] == '\0')
    codeset = "ASCII";
 8064724:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064728:	89 3c 24             	mov    %edi,(%esp)
 806472b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806472f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064733:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064737:	b9 33 aa 00 00       	mov    $0xaa33,%ecx
 806473c:	e8 d7 0b 00 00       	call   8065318 <__afl_maybe_log>
 8064741:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064745:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064749:	8b 54 24 04          	mov    0x4(%esp),%edx
 806474d:	8b 3c 24             	mov    (%esp),%edi
 8064750:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064754:	80 3e 00             	cmpb   $0x0,(%esi)
 8064757:	b8 98 6f 06 08       	mov    $0x8066f98,%eax
 806475c:	0f 45 c6             	cmovne %esi,%eax
  if (strcmp (codeset, "UTF-8") == 0 && MB_CUR_MAX_L (uselocale (NULL)) <= 1)
    codeset = "ASCII";
#endif

  return codeset;
}
 806475f:	81 c4 8c 00 00 00    	add    $0x8c,%esp
 8064765:	5b                   	pop    %ebx
 8064766:	5e                   	pop    %esi
 8064767:	5f                   	pop    %edi
 8064768:	5d                   	pop    %ebp
 8064769:	c3                   	ret    
 806476a:	66 90                	xchg   %ax,%ax
      const char *base = "charset.alias";
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
 806476c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064770:	89 3c 24             	mov    %edi,(%esp)
 8064773:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064777:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806477b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806477f:	b9 5b d2 00 00       	mov    $0xd25b,%ecx
 8064784:	e8 8f 0b 00 00       	call   8065318 <__afl_maybe_log>
 8064789:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806478d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064791:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064795:	8b 3c 24             	mov    (%esp),%edi
 8064798:	8d 64 24 10          	lea    0x10(%esp),%esp
 806479c:	83 ec 0c             	sub    $0xc,%esp
 806479f:	68 9e 6f 06 08       	push   $0x8066f9e
 80647a4:	e8 37 4b fe ff       	call   80492e0 <getenv@plt>
      if (dir == NULL || dir[0] == '\0')
 80647a9:	83 c4 10             	add    $0x10,%esp
 80647ac:	85 c0                	test   %eax,%eax
      const char *base = "charset.alias";
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
 80647ae:	89 c5                	mov    %eax,%ebp
      if (dir == NULL || dir[0] == '\0')
 80647b0:	0f 84 c5 06 00 00    	je     8064e7b <locale_charset+0x9eb>
 80647b6:	66 90                	xchg   %ax,%ax
 80647b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80647bc:	89 3c 24             	mov    %edi,(%esp)
 80647bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80647c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80647c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80647cb:	b9 2f 91 00 00       	mov    $0x912f,%ecx
 80647d0:	e8 43 0b 00 00       	call   8065318 <__afl_maybe_log>
 80647d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80647d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80647dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80647e1:	8b 3c 24             	mov    (%esp),%edi
 80647e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80647e8:	80 38 00             	cmpb   $0x0,(%eax)
 80647eb:	0f 84 8a 06 00 00    	je     8064e7b <locale_charset+0x9eb>
 80647f1:	8d 76 00             	lea    0x0(%esi),%esi
 80647f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80647f8:	89 3c 24             	mov    %edi,(%esp)
 80647fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80647ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064803:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064807:	b9 ee 9e 00 00       	mov    $0x9eee,%ecx
 806480c:	e8 07 0b 00 00       	call   8065318 <__afl_maybe_log>
 8064811:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064815:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064819:	8b 54 24 04          	mov    0x4(%esp),%edx
 806481d:	8b 3c 24             	mov    (%esp),%edi
 8064820:	8d 64 24 10          	lea    0x10(%esp),%esp
        dir = relocate (LIBDIR);

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
 8064824:	83 ec 0c             	sub    $0xc,%esp
 8064827:	50                   	push   %eax
 8064828:	e8 73 4b fe ff       	call   80493a0 <strlen@plt>
 806482d:	83 c4 10             	add    $0x10,%esp
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
 8064830:	85 c0                	test   %eax,%eax
      if (dir == NULL || dir[0] == '\0')
        dir = relocate (LIBDIR);

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
 8064832:	89 c7                	mov    %eax,%edi
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
 8064834:	0f 85 a0 0a 00 00    	jne    80652da <locale_charset+0xe4a>
 806483a:	66 90                	xchg   %ax,%ax
 806483c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064840:	89 3c 24             	mov    %edi,(%esp)
 8064843:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064847:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806484b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806484f:	b9 e2 19 00 00       	mov    $0x19e2,%ecx
 8064854:	e8 bf 0a 00 00       	call   8065318 <__afl_maybe_log>
 8064859:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806485d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064861:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064865:	8b 3c 24             	mov    (%esp),%edi
 8064868:	8d 64 24 10          	lea    0x10(%esp),%esp
 806486c:	b8 0e 00 00 00       	mov    $0xe,%eax
 8064871:	8d 76 00             	lea    0x0(%esi),%esi
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
 8064874:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064878:	89 3c 24             	mov    %edi,(%esp)
 806487b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806487f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064883:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064887:	b9 4b e6 00 00       	mov    $0xe64b,%ecx
 806488c:	e8 87 0a 00 00       	call   8065318 <__afl_maybe_log>
 8064891:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064895:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064899:	8b 54 24 04          	mov    0x4(%esp),%edx
 806489d:	8b 3c 24             	mov    (%esp),%edi
 80648a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80648a4:	83 ec 0c             	sub    $0xc,%esp
 80648a7:	50                   	push   %eax
 80648a8:	e8 53 4a fe ff       	call   8049300 <malloc@plt>
 80648ad:	89 44 24 14          	mov    %eax,0x14(%esp)
        if (file_name != NULL)
 80648b1:	83 c4 10             	add    $0x10,%esp
 80648b4:	85 c0                	test   %eax,%eax
 80648b6:	0f 84 91 09 00 00    	je     806524d <locale_charset+0xdbd>
 80648bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80648c0:	89 3c 24             	mov    %edi,(%esp)
 80648c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80648c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80648cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80648cf:	b9 69 b2 00 00       	mov    $0xb269,%ecx
 80648d4:	e8 3f 0a 00 00       	call   8065318 <__afl_maybe_log>
 80648d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80648dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80648e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80648e5:	8b 3c 24             	mov    (%esp),%edi
 80648e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80648ec:	83 ec 04             	sub    $0x4,%esp
 80648ef:	57                   	push   %edi
 80648f0:	55                   	push   %ebp
 80648f1:	ff 74 24 10          	pushl  0x10(%esp)
 80648f5:	e8 b6 48 fe ff       	call   80491b0 <memcpy@plt>
 80648fa:	83 c4 10             	add    $0x10,%esp
 80648fd:	8d 76 00             	lea    0x0(%esi),%esi
          {
            memcpy (file_name, dir, dir_len);
            if (add_slash)
              file_name[dir_len] = DIRECTORY_SEPARATOR;
            memcpy (file_name + dir_len + add_slash, base, base_len + 1);
 8064900:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064904:	89 3c 24             	mov    %edi,(%esp)
 8064907:	89 54 24 04          	mov    %edx,0x4(%esp)
 806490b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806490f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064913:	b9 b1 cd 00 00       	mov    $0xcdb1,%ecx
 8064918:	e8 fb 09 00 00       	call   8065318 <__afl_maybe_log>
 806491d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064921:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064925:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064929:	8b 3c 24             	mov    (%esp),%edi
 806492c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064930:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 8064934:	bd 73 00 00 00       	mov    $0x73,%ebp
 8064939:	83 ec 08             	sub    $0x8,%esp
 806493c:	89 c8                	mov    %ecx,%eax
 806493e:	01 f8                	add    %edi,%eax
 8064940:	66 89 68 0c          	mov    %bp,0xc(%eax)
 8064944:	c7 00 63 68 61 72    	movl   $0x72616863,(%eax)
 806494a:	c7 40 04 73 65 74 2e 	movl   $0x2e746573,0x4(%eax)
 8064951:	c7 40 08 61 6c 69 61 	movl   $0x61696c61,0x8(%eax)
 8064958:	68 00 00 02 00       	push   $0x20000
 806495d:	51                   	push   %ecx
 806495e:	e8 ed 47 fe ff       	call   8049150 <open64@plt>
             a symbolic link to that file under the name "charset.alias" in
             some writable directory and defining the environment variable
             CHARSETALIASDIR to point to that directory.  */
          fd = open (file_name,
                     O_RDONLY | (HAVE_WORKING_O_NOFOLLOW ? O_NOFOLLOW : 0));
          if (fd < 0)
 8064963:	83 c4 10             	add    $0x10,%esp
 8064966:	85 c0                	test   %eax,%eax
 8064968:	89 c5                	mov    %eax,%ebp
 806496a:	0f 88 4c 08 00 00    	js     80651bc <locale_charset+0xd2c>
 8064970:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064974:	89 3c 24             	mov    %edi,(%esp)
 8064977:	89 54 24 04          	mov    %edx,0x4(%esp)
 806497b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806497f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064983:	b9 d8 16 00 00       	mov    $0x16d8,%ecx
 8064988:	e8 8b 09 00 00       	call   8065318 <__afl_maybe_log>
 806498d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064991:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064995:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064999:	8b 3c 24             	mov    (%esp),%edi
 806499c:	8d 64 24 10          	lea    0x10(%esp),%esp
            cp = "";
          else
            {
              FILE *fp;

              fp = fdopen (fd, "r");
 80649a0:	83 ec 08             	sub    $0x8,%esp
 80649a3:	68 b9 66 06 08       	push   $0x80666b9
 80649a8:	50                   	push   %eax
 80649a9:	e8 92 49 fe ff       	call   8049340 <fdopen@plt>
              if (fp == NULL)
 80649ae:	83 c4 10             	add    $0x10,%esp
 80649b1:	85 c0                	test   %eax,%eax
            cp = "";
          else
            {
              FILE *fp;

              fp = fdopen (fd, "r");
 80649b3:	89 c7                	mov    %eax,%edi
              if (fp == NULL)
 80649b5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 80649bc:	0f 84 bb 07 00 00    	je     806517d <locale_charset+0xced>
 80649c2:	66 90                	xchg   %ax,%ax
 80649c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80649c8:	89 3c 24             	mov    %edi,(%esp)
 80649cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80649cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80649d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80649d7:	b9 4d 93 00 00       	mov    $0x934d,%ecx
 80649dc:	e8 37 09 00 00       	call   8065318 <__afl_maybe_log>
 80649e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80649e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80649e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80649ed:	8b 3c 24             	mov    (%esp),%edi
 80649f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80649f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
# ifdef __USE_POSIX
/* This is defined in POSIX.1:1996.  */
__STDIO_INLINE int
getc_unlocked (FILE *__fp)
{
  return _IO_getc_unlocked (__fp);
 80649f8:	8b 4f 04             	mov    0x4(%edi),%ecx
 80649fb:	3b 4f 08             	cmp    0x8(%edi),%ecx
 80649fe:	0f 83 08 03 00 00    	jae    8064d0c <locale_charset+0x87c>
 8064a04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064a08:	89 3c 24             	mov    %edi,(%esp)
 8064a0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064a0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064a13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064a17:	b9 a8 98 00 00       	mov    $0x98a8,%ecx
 8064a1c:	e8 f7 08 00 00       	call   8065318 <__afl_maybe_log>
 8064a21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064a25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064a29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064a2d:	8b 3c 24             	mov    (%esp),%edi
 8064a30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064a34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064a38:	89 3c 24             	mov    %edi,(%esp)
 8064a3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064a3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064a43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064a47:	b9 e8 bf 00 00       	mov    $0xbfe8,%ecx
 8064a4c:	e8 c7 08 00 00       	call   8065318 <__afl_maybe_log>
 8064a51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064a55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064a59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064a5d:	8b 3c 24             	mov    (%esp),%edi
 8064a60:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064a64:	8d 51 01             	lea    0x1(%ecx),%edx
 8064a67:	89 57 04             	mov    %edx,0x4(%edi)
 8064a6a:	0f b6 01             	movzbl (%ecx),%eax
 8064a6d:	8d 76 00             	lea    0x0(%esi),%esi
                      char *old_res_ptr;

                      c = getc (fp);
                      if (c == EOF)
                        break;
                      if (c == '\n' || c == ' ' || c == '\t')
 8064a70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064a74:	89 3c 24             	mov    %edi,(%esp)
 8064a77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064a7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064a7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064a83:	b9 73 40 00 00       	mov    $0x4073,%ecx
 8064a88:	e8 8b 08 00 00       	call   8065318 <__afl_maybe_log>
 8064a8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064a91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064a95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064a99:	8b 3c 24             	mov    (%esp),%edi
 8064a9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064aa0:	8d 68 f7             	lea    -0x9(%eax),%ebp
 8064aa3:	83 fd 01             	cmp    $0x1,%ebp
 8064aa6:	0f 86 4c ff ff ff    	jbe    80649f8 <locale_charset+0x568>
 8064aac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064ab0:	89 3c 24             	mov    %edi,(%esp)
 8064ab3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064ab7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064abb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064abf:	b9 c3 8d 00 00       	mov    $0x8dc3,%ecx
 8064ac4:	e8 4f 08 00 00       	call   8065318 <__afl_maybe_log>
 8064ac9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064acd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064ad1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064ad5:	8b 3c 24             	mov    (%esp),%edi
 8064ad8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064adc:	83 f8 20             	cmp    $0x20,%eax
 8064adf:	0f 84 13 ff ff ff    	je     80649f8 <locale_charset+0x568>
 8064ae5:	8d 76 00             	lea    0x0(%esi),%esi
 8064ae8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064aec:	89 3c 24             	mov    %edi,(%esp)
 8064aef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064af3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064af7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064afb:	b9 67 87 00 00       	mov    $0x8767,%ecx
 8064b00:	e8 13 08 00 00       	call   8065318 <__afl_maybe_log>
 8064b05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064b09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064b0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064b11:	8b 3c 24             	mov    (%esp),%edi
 8064b14:	8d 64 24 10          	lea    0x10(%esp),%esp
                        continue;
                      if (c == '#')
 8064b18:	83 f8 23             	cmp    $0x23,%eax
 8064b1b:	0f 84 33 05 00 00    	je     8065054 <locale_charset+0xbc4>
 8064b21:	8d 76 00             	lea    0x0(%esi),%esi
 8064b24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064b28:	89 3c 24             	mov    %edi,(%esp)
 8064b2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064b2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064b33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064b37:	b9 76 0d 00 00       	mov    $0xd76,%ecx
 8064b3c:	e8 d7 07 00 00       	call   8065318 <__afl_maybe_log>
 8064b41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064b45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064b49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064b4d:	8b 3c 24             	mov    (%esp),%edi
 8064b50:	8d 64 24 10          	lea    0x10(%esp),%esp
                          while (!(c == EOF || c == '\n'));
                          if (c == EOF)
                            break;
                          continue;
                        }
                      ungetc (c, fp);
 8064b54:	83 ec 08             	sub    $0x8,%esp
 8064b57:	57                   	push   %edi
 8064b58:	50                   	push   %eax
 8064b59:	e8 92 48 fe ff       	call   80493f0 <ungetc@plt>
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
 8064b5e:	8d 44 24 5d          	lea    0x5d(%esp),%eax
 8064b62:	50                   	push   %eax
 8064b63:	8d 4c 24 2e          	lea    0x2e(%esp),%ecx
 8064b67:	51                   	push   %ecx
 8064b68:	68 ae 6f 06 08       	push   $0x8066fae
 8064b6d:	57                   	push   %edi
 8064b6e:	e8 1d 48 fe ff       	call   8049390 <fscanf@plt>
 8064b73:	83 c4 20             	add    $0x20,%esp
 8064b76:	83 f8 01             	cmp    $0x1,%eax
 8064b79:	0f 8e 05 02 00 00    	jle    8064d84 <locale_charset+0x8f4>
 8064b7f:	90                   	nop
 8064b80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064b84:	89 3c 24             	mov    %edi,(%esp)
 8064b87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064b8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064b8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064b93:	b9 43 1e 00 00       	mov    $0x1e43,%ecx
 8064b98:	e8 7b 07 00 00       	call   8065318 <__afl_maybe_log>
 8064b9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064ba1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064ba5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064ba9:	8b 3c 24             	mov    (%esp),%edi
 8064bac:	8d 64 24 10          	lea    0x10(%esp),%esp
                        break;
                      l1 = strlen (buf1);
 8064bb0:	83 ec 0c             	sub    $0xc,%esp
 8064bb3:	8d 54 24 26          	lea    0x26(%esp),%edx
 8064bb7:	52                   	push   %edx
 8064bb8:	e8 e3 47 fe ff       	call   80493a0 <strlen@plt>
 8064bbd:	59                   	pop    %ecx
                      l2 = strlen (buf2);
 8064bbe:	8d 6c 24 59          	lea    0x59(%esp),%ebp
                          continue;
                        }
                      ungetc (c, fp);
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
                        break;
                      l1 = strlen (buf1);
 8064bc2:	89 44 24 14          	mov    %eax,0x14(%esp)
                      l2 = strlen (buf2);
 8064bc6:	55                   	push   %ebp
 8064bc7:	e8 d4 47 fe ff       	call   80493a0 <strlen@plt>
 8064bcc:	83 c4 10             	add    $0x10,%esp
 8064bcf:	89 c1                	mov    %eax,%ecx
                      old_res_ptr = res_ptr;
                      if (res_size == 0)
 8064bd1:	8b 14 24             	mov    (%esp),%edx
                        {
                          res_size = l1 + 1 + l2 + 1;
 8064bd4:	8b 44 24 08          	mov    0x8(%esp),%eax
 8064bd8:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 8064bdc:	01 c8                	add    %ecx,%eax
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
                        break;
                      l1 = strlen (buf1);
                      l2 = strlen (buf2);
                      old_res_ptr = res_ptr;
                      if (res_size == 0)
 8064bde:	85 d2                	test   %edx,%edx
 8064be0:	0f 85 10 06 00 00    	jne    80651f6 <locale_charset+0xd66>
 8064be6:	66 90                	xchg   %ax,%ax
 8064be8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064bec:	89 3c 24             	mov    %edi,(%esp)
 8064bef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064bf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064bf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064bfb:	b9 56 11 00 00       	mov    $0x1156,%ecx
 8064c00:	e8 13 07 00 00       	call   8065318 <__afl_maybe_log>
 8064c05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064c09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064c0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064c11:	8b 3c 24             	mov    (%esp),%edi
 8064c14:	8d 64 24 10          	lea    0x10(%esp),%esp
                        {
                          res_size = l1 + 1 + l2 + 1;
 8064c18:	8d 50 02             	lea    0x2(%eax),%edx
                          res_ptr = (char *) malloc (res_size + 1);
 8064c1b:	83 ec 0c             	sub    $0xc,%esp
 8064c1e:	83 c0 03             	add    $0x3,%eax
                      l1 = strlen (buf1);
                      l2 = strlen (buf2);
                      old_res_ptr = res_ptr;
                      if (res_size == 0)
                        {
                          res_size = l1 + 1 + l2 + 1;
 8064c21:	89 54 24 0c          	mov    %edx,0xc(%esp)
                          res_ptr = (char *) malloc (res_size + 1);
 8064c25:	50                   	push   %eax
 8064c26:	e8 d5 46 fe ff       	call   8049300 <malloc@plt>
 8064c2b:	83 c4 10             	add    $0x10,%esp
 8064c2e:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8064c32:	89 c5                	mov    %eax,%ebp
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
                        }
                      if (res_ptr == NULL)
 8064c34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064c38:	89 3c 24             	mov    %edi,(%esp)
 8064c3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064c3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064c43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064c47:	b9 12 d9 00 00       	mov    $0xd912,%ecx
 8064c4c:	e8 c7 06 00 00       	call   8065318 <__afl_maybe_log>
 8064c51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064c55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064c59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064c5d:	8b 3c 24             	mov    (%esp),%edi
 8064c60:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064c64:	85 ed                	test   %ebp,%ebp
 8064c66:	0f 84 1e 06 00 00    	je     806528a <locale_charset+0xdfa>
 8064c6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064c70:	89 3c 24             	mov    %edi,(%esp)
 8064c73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064c77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064c7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064c7f:	b9 66 d6 00 00       	mov    $0xd666,%ecx
 8064c84:	e8 8f 06 00 00       	call   8065318 <__afl_maybe_log>
 8064c89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064c8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064c91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064c95:	8b 3c 24             	mov    (%esp),%edi
 8064c98:	8d 64 24 10          	lea    0x10(%esp),%esp
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
 8064c9c:	8b 1c 24             	mov    (%esp),%ebx
#endif

__fortify_function char *
__NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
{
  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));
 8064c9f:	83 ec 08             	sub    $0x8,%esp
 8064ca2:	8d 44 24 22          	lea    0x22(%esp),%eax
 8064ca6:	29 cb                	sub    %ecx,%ebx
 8064ca8:	50                   	push   %eax
 8064ca9:	89 d9                	mov    %ebx,%ecx
 8064cab:	2b 4c 24 14          	sub    0x14(%esp),%ecx
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
 8064caf:	8d 5c 1d ff          	lea    -0x1(%ebp,%ebx,1),%ebx
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
 8064cb3:	8d 54 0d fe          	lea    -0x2(%ebp,%ecx,1),%edx
 8064cb7:	52                   	push   %edx
 8064cb8:	e8 c3 45 fe ff       	call   8049280 <strcpy@plt>
 8064cbd:	58                   	pop    %eax
 8064cbe:	5a                   	pop    %edx
 8064cbf:	8d 44 24 55          	lea    0x55(%esp),%eax
 8064cc3:	50                   	push   %eax
 8064cc4:	53                   	push   %ebx
 8064cc5:	89 eb                	mov    %ebp,%ebx
 8064cc7:	e8 b4 45 fe ff       	call   8049280 <strcpy@plt>
 8064ccc:	83 c4 10             	add    $0x10,%esp
 8064ccf:	8b 4f 04             	mov    0x4(%edi),%ecx
 8064cd2:	3b 4f 08             	cmp    0x8(%edi),%ecx
 8064cd5:	0f 82 59 fd ff ff    	jb     8064a34 <locale_charset+0x5a4>
 8064cdb:	90                   	nop
 8064cdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064ce0:	89 3c 24             	mov    %edi,(%esp)
 8064ce3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064ce7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064ceb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064cef:	b9 46 62 00 00       	mov    $0x6246,%ecx
 8064cf4:	e8 1f 06 00 00       	call   8065318 <__afl_maybe_log>
 8064cf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064cfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064d01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064d05:	8b 3c 24             	mov    (%esp),%edi
 8064d08:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064d0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064d10:	89 3c 24             	mov    %edi,(%esp)
 8064d13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064d17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064d1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064d1f:	b9 93 f6 00 00       	mov    $0xf693,%ecx
 8064d24:	e8 ef 05 00 00       	call   8065318 <__afl_maybe_log>
 8064d29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064d2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064d31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064d35:	8b 3c 24             	mov    (%esp),%edi
 8064d38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064d3c:	83 ec 0c             	sub    $0xc,%esp
 8064d3f:	57                   	push   %edi
 8064d40:	e8 0b 47 fe ff       	call   8049450 <__uflow@plt>
                      char buf2[50+1];
                      size_t l1, l2;
                      char *old_res_ptr;

                      c = getc (fp);
                      if (c == EOF)
 8064d45:	83 c4 10             	add    $0x10,%esp
 8064d48:	83 f8 ff             	cmp    $0xffffffff,%eax
 8064d4b:	0f 85 1c fd ff ff    	jne    8064a6d <locale_charset+0x5dd>
 8064d51:	8d 76 00             	lea    0x0(%esi),%esi
 8064d54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064d58:	89 3c 24             	mov    %edi,(%esp)
 8064d5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064d5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064d63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064d67:	b9 dc 5b 00 00       	mov    $0x5bdc,%ecx
 8064d6c:	e8 a7 05 00 00       	call   8065318 <__afl_maybe_log>
 8064d71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064d75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064d79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064d7d:	8b 3c 24             	mov    (%esp),%edi
 8064d80:	8d 64 24 10          	lea    0x10(%esp),%esp
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
                    }
                  fclose (fp);
 8064d84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064d88:	89 3c 24             	mov    %edi,(%esp)
 8064d8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064d8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064d93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064d97:	b9 ee 47 00 00       	mov    $0x47ee,%ecx
 8064d9c:	e8 77 05 00 00       	call   8065318 <__afl_maybe_log>
 8064da1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064da5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064da9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064dad:	8b 3c 24             	mov    (%esp),%edi
 8064db0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064db4:	83 ec 0c             	sub    $0xc,%esp
 8064db7:	57                   	push   %edi
 8064db8:	e8 e3 d6 ff ff       	call   80624a0 <rpl_fclose>
                  if (res_size == 0)
 8064dbd:	83 c4 10             	add    $0x10,%esp
 8064dc0:	8b 3c 24             	mov    (%esp),%edi
 8064dc3:	85 ff                	test   %edi,%edi
 8064dc5:	0f 84 f1 03 00 00    	je     80651bc <locale_charset+0xd2c>
 8064dcb:	90                   	nop
 8064dcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064dd0:	89 3c 24             	mov    %edi,(%esp)
 8064dd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064dd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064ddb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064ddf:	b9 a4 37 00 00       	mov    $0x37a4,%ecx
 8064de4:	e8 2f 05 00 00       	call   8065318 <__afl_maybe_log>
 8064de9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064ded:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064df1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064df5:	8b 3c 24             	mov    (%esp),%edi
 8064df8:	8d 64 24 10          	lea    0x10(%esp),%esp
                    cp = "";
                  else
                    {
                      *(res_ptr + res_size) = '\0';
 8064dfc:	c6 04 3b 00          	movb   $0x0,(%ebx,%edi,1)
                      cp = res_ptr;
                    }
                }
            }

          free (file_name);
 8064e00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064e04:	89 3c 24             	mov    %edi,(%esp)
 8064e07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064e0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064e0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064e13:	b9 32 c4 00 00       	mov    $0xc432,%ecx
 8064e18:	e8 fb 04 00 00       	call   8065318 <__afl_maybe_log>
 8064e1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064e21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064e25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064e29:	8b 3c 24             	mov    (%esp),%edi
 8064e2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064e30:	83 ec 0c             	sub    $0xc,%esp
 8064e33:	ff 74 24 10          	pushl  0x10(%esp)
 8064e37:	e8 64 43 fe ff       	call   80491a0 <free@plt>
 8064e3c:	83 c4 10             	add    $0x10,%esp
 8064e3f:	90                   	nop
           "CP1386" "\0" "GBK" "\0"
           "CP3372" "\0" "EUC-JP" "\0";
# endif
#endif

      charset_aliases = cp;
 8064e40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064e44:	89 3c 24             	mov    %edi,(%esp)
 8064e47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064e4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064e4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064e53:	b9 5f e3 00 00       	mov    $0xe35f,%ecx
 8064e58:	e8 bb 04 00 00       	call   8065318 <__afl_maybe_log>
 8064e5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064e61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064e65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064e69:	8b 3c 24             	mov    (%esp),%edi
 8064e6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064e70:	89 1d b0 ad 43 08    	mov    %ebx,0x843adb0
 8064e76:	e9 a1 f6 ff ff       	jmp    806451c <locale_charset+0x8c>
 8064e7b:	90                   	nop
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
      if (dir == NULL || dir[0] == '\0')
 8064e7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064e80:	89 3c 24             	mov    %edi,(%esp)
 8064e83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064e87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064e8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064e8f:	b9 1e 9a 00 00       	mov    $0x9a1e,%ecx
 8064e94:	e8 7f 04 00 00       	call   8065318 <__afl_maybe_log>
 8064e99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064e9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064ea1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064ea5:	8b 3c 24             	mov    (%esp),%edi
 8064ea8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064eac:	ba 0d 00 00 00       	mov    $0xd,%edx
        dir = relocate (LIBDIR);

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
 8064eb1:	bf 0e 00 00 00       	mov    $0xe,%edi
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
      if (dir == NULL || dir[0] == '\0')
 8064eb6:	bd 89 6f 06 08       	mov    $0x8066f89,%ebp
 8064ebb:	90                   	nop

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
 8064ebc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064ec0:	89 3c 24             	mov    %edi,(%esp)
 8064ec3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064ec7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064ecb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064ecf:	b9 74 3d 00 00       	mov    $0x3d74,%ecx
 8064ed4:	e8 3f 04 00 00       	call   8065318 <__afl_maybe_log>
 8064ed9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064edd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064ee1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064ee5:	8b 3c 24             	mov    (%esp),%edi
 8064ee8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064eec:	80 7c 15 00 2f       	cmpb   $0x2f,0x0(%ebp,%edx,1)
 8064ef1:	0f 84 da 01 00 00    	je     80650d1 <locale_charset+0xc41>
 8064ef7:	90                   	nop
 8064ef8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064efc:	89 3c 24             	mov    %edi,(%esp)
 8064eff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064f03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064f07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064f0b:	b9 16 87 00 00       	mov    $0x8716,%ecx
 8064f10:	e8 03 04 00 00       	call   8065318 <__afl_maybe_log>
 8064f15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064f19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064f1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064f21:	8b 3c 24             	mov    (%esp),%edi
 8064f24:	8d 64 24 10          	lea    0x10(%esp),%esp
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
 8064f28:	8d 4f 0f             	lea    0xf(%edi),%ecx
 8064f2b:	83 ec 0c             	sub    $0xc,%esp
 8064f2e:	51                   	push   %ecx
 8064f2f:	e8 cc 43 fe ff       	call   8049300 <malloc@plt>
 8064f34:	89 44 24 14          	mov    %eax,0x14(%esp)
        if (file_name != NULL)
 8064f38:	83 c4 10             	add    $0x10,%esp
 8064f3b:	85 c0                	test   %eax,%eax
 8064f3d:	0f 84 0a 03 00 00    	je     806524d <locale_charset+0xdbd>
 8064f43:	90                   	nop
 8064f44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064f48:	89 3c 24             	mov    %edi,(%esp)
 8064f4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064f4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064f53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064f57:	b9 ca 73 00 00       	mov    $0x73ca,%ecx
 8064f5c:	e8 b7 03 00 00       	call   8065318 <__afl_maybe_log>
 8064f61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064f65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064f69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064f6d:	8b 3c 24             	mov    (%esp),%edi
 8064f70:	8d 64 24 10          	lea    0x10(%esp),%esp
      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
 8064f74:	8d 47 01             	lea    0x1(%edi),%eax

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 8064f77:	83 ec 04             	sub    $0x4,%esp
 8064f7a:	89 44 24 04          	mov    %eax,0x4(%esp)
 8064f7e:	57                   	push   %edi
 8064f7f:	55                   	push   %ebp
 8064f80:	8b 6c 24 10          	mov    0x10(%esp),%ebp
 8064f84:	55                   	push   %ebp
 8064f85:	e8 26 42 fe ff       	call   80491b0 <memcpy@plt>
        if (file_name != NULL)
          {
            memcpy (file_name, dir, dir_len);
            if (add_slash)
              file_name[dir_len] = DIRECTORY_SEPARATOR;
 8064f8a:	83 c4 10             	add    $0x10,%esp
 8064f8d:	c6 44 3d 00 2f       	movb   $0x2f,0x0(%ebp,%edi,1)
 8064f92:	8b 3c 24             	mov    (%esp),%edi
 8064f95:	e9 63 f9 ff ff       	jmp    80648fd <locale_charset+0x46d>
 8064f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8064fa0:	8d 4d 01             	lea    0x1(%ebp),%ecx
 8064fa3:	89 4f 04             	mov    %ecx,0x4(%edi)
 8064fa6:	0f b6 45 00          	movzbl 0x0(%ebp),%eax
 8064faa:	66 90                	xchg   %ax,%ax
                      if (c == '#')
                        {
                          /* Skip comment, to end of line.  */
                          do
                            c = getc (fp);
                          while (!(c == EOF || c == '\n'));
 8064fac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064fb0:	89 3c 24             	mov    %edi,(%esp)
 8064fb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064fb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064fbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064fbf:	b9 0e 92 00 00       	mov    $0x920e,%ecx
 8064fc4:	e8 4f 03 00 00       	call   8065318 <__afl_maybe_log>
 8064fc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8064fcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8064fd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8064fd5:	8b 3c 24             	mov    (%esp),%edi
 8064fd8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8064fdc:	83 f8 0a             	cmp    $0xa,%eax
 8064fdf:	0f 84 27 01 00 00    	je     806510c <locale_charset+0xc7c>
 8064fe5:	8d 76 00             	lea    0x0(%esi),%esi
 8064fe8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8064fec:	89 3c 24             	mov    %edi,(%esp)
 8064fef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8064ff3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8064ff7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8064ffb:	b9 58 56 00 00       	mov    $0x5658,%ecx
 8065000:	e8 13 03 00 00       	call   8065318 <__afl_maybe_log>
 8065005:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065009:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806500d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065011:	8b 3c 24             	mov    (%esp),%edi
 8065014:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065018:	83 f8 ff             	cmp    $0xffffffff,%eax
 806501b:	0f 84 eb 00 00 00    	je     806510c <locale_charset+0xc7c>
 8065021:	8d 76 00             	lea    0x0(%esi),%esi
 8065024:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065028:	89 3c 24             	mov    %edi,(%esp)
 806502b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806502f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065033:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065037:	b9 c3 a7 00 00       	mov    $0xa7c3,%ecx
 806503c:	e8 d7 02 00 00       	call   8065318 <__afl_maybe_log>
 8065041:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065045:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065049:	8b 54 24 04          	mov    0x4(%esp),%edx
 806504d:	8b 3c 24             	mov    (%esp),%edi
 8065050:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065054:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065058:	89 3c 24             	mov    %edi,(%esp)
 806505b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806505f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065063:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065067:	b9 f8 24 00 00       	mov    $0x24f8,%ecx
 806506c:	e8 a7 02 00 00       	call   8065318 <__afl_maybe_log>
 8065071:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065075:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065079:	8b 54 24 04          	mov    0x4(%esp),%edx
 806507d:	8b 3c 24             	mov    (%esp),%edi
 8065080:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065084:	8b 6f 04             	mov    0x4(%edi),%ebp
 8065087:	3b 6f 08             	cmp    0x8(%edi),%ebp
 806508a:	0f 82 10 ff ff ff    	jb     8064fa0 <locale_charset+0xb10>
 8065090:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065094:	89 3c 24             	mov    %edi,(%esp)
 8065097:	89 54 24 04          	mov    %edx,0x4(%esp)
 806509b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806509f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80650a3:	b9 9a 34 00 00       	mov    $0x349a,%ecx
 80650a8:	e8 6b 02 00 00       	call   8065318 <__afl_maybe_log>
 80650ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80650b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80650b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80650b9:	8b 3c 24             	mov    (%esp),%edi
 80650bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80650c0:	83 ec 0c             	sub    $0xc,%esp
 80650c3:	57                   	push   %edi
 80650c4:	e8 87 43 fe ff       	call   8049450 <__uflow@plt>
 80650c9:	83 c4 10             	add    $0x10,%esp
 80650cc:	e9 d9 fe ff ff       	jmp    8064faa <locale_charset+0xb1a>
 80650d1:	8d 76 00             	lea    0x0(%esi),%esi
 80650d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80650d8:	89 3c 24             	mov    %edi,(%esp)
 80650db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80650df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80650e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80650e7:	b9 80 e2 00 00       	mov    $0xe280,%ecx
 80650ec:	e8 27 02 00 00       	call   8065318 <__afl_maybe_log>
 80650f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80650f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80650f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80650fd:	8b 3c 24             	mov    (%esp),%edi
 8065100:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065104:	8d 47 0e             	lea    0xe(%edi),%eax
 8065107:	e9 65 f7 ff ff       	jmp    8064871 <locale_charset+0x3e1>
                          if (c == EOF)
 806510c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065110:	89 3c 24             	mov    %edi,(%esp)
 8065113:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065117:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806511b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806511f:	b9 ff 0e 00 00       	mov    $0xeff,%ecx
 8065124:	e8 ef 01 00 00       	call   8065318 <__afl_maybe_log>
 8065129:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806512d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065131:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065135:	8b 3c 24             	mov    (%esp),%edi
 8065138:	8d 64 24 10          	lea    0x10(%esp),%esp
 806513c:	83 f8 ff             	cmp    $0xffffffff,%eax
 806513f:	0f 85 b3 f8 ff ff    	jne    80649f8 <locale_charset+0x568>
 8065145:	8d 76 00             	lea    0x0(%esi),%esi
 8065148:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806514c:	89 3c 24             	mov    %edi,(%esp)
 806514f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065153:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065157:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806515b:	b9 9e ad 00 00       	mov    $0xad9e,%ecx
 8065160:	e8 b3 01 00 00       	call   8065318 <__afl_maybe_log>
 8065165:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065169:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806516d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065171:	8b 3c 24             	mov    (%esp),%edi
 8065174:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065178:	e9 07 fc ff ff       	jmp    8064d84 <locale_charset+0x8f4>
 806517d:	8d 76 00             	lea    0x0(%esi),%esi

              fp = fdopen (fd, "r");
              if (fp == NULL)
                {
                  /* Out of memory.  Treat the file as empty.  */
                  close (fd);
 8065180:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065184:	89 3c 24             	mov    %edi,(%esp)
 8065187:	89 54 24 04          	mov    %edx,0x4(%esp)
 806518b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806518f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065193:	b9 7a be 00 00       	mov    $0xbe7a,%ecx
 8065198:	e8 7b 01 00 00       	call   8065318 <__afl_maybe_log>
 806519d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80651a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80651a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80651a9:	8b 3c 24             	mov    (%esp),%edi
 80651ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80651b0:	83 ec 0c             	sub    $0xc,%esp
 80651b3:	55                   	push   %ebp
 80651b4:	e8 67 43 fe ff       	call   8049520 <close@plt>
 80651b9:	83 c4 10             	add    $0x10,%esp
                  cp = "";
 80651bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80651c0:	89 3c 24             	mov    %edi,(%esp)
 80651c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80651c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80651cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80651cf:	b9 57 8e 00 00       	mov    $0x8e57,%ecx
 80651d4:	e8 3f 01 00 00       	call   8065318 <__afl_maybe_log>
 80651d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80651dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80651e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80651e5:	8b 3c 24             	mov    (%esp),%edi
 80651e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80651ec:	bb dd 6a 06 08       	mov    $0x8066add,%ebx
 80651f1:	e9 0a fc ff ff       	jmp    8064e00 <locale_charset+0x970>
 80651f6:	66 90                	xchg   %ax,%ax
                          res_size = l1 + 1 + l2 + 1;
                          res_ptr = (char *) malloc (res_size + 1);
                        }
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
 80651f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80651fc:	89 3c 24             	mov    %edi,(%esp)
 80651ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065203:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065207:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806520b:	b9 0f 98 00 00       	mov    $0x980f,%ecx
 8065210:	e8 03 01 00 00       	call   8065318 <__afl_maybe_log>
 8065215:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065219:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806521d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065221:	8b 3c 24             	mov    (%esp),%edi
 8065224:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065228:	03 04 24             	add    (%esp),%eax
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
 806522b:	83 ec 08             	sub    $0x8,%esp
                          res_size = l1 + 1 + l2 + 1;
                          res_ptr = (char *) malloc (res_size + 1);
                        }
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
 806522e:	8d 68 02             	lea    0x2(%eax),%ebp
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
 8065231:	83 c0 03             	add    $0x3,%eax
                          res_size = l1 + 1 + l2 + 1;
                          res_ptr = (char *) malloc (res_size + 1);
                        }
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
 8065234:	89 6c 24 08          	mov    %ebp,0x8(%esp)
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
 8065238:	50                   	push   %eax
 8065239:	53                   	push   %ebx
 806523a:	e8 b1 40 fe ff       	call   80492f0 <realloc@plt>
 806523f:	83 c4 10             	add    $0x10,%esp
 8065242:	89 c5                	mov    %eax,%ebp
 8065244:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8065248:	e9 e7 f9 ff ff       	jmp    8064c34 <locale_charset+0x7a4>
 806524d:	8d 76 00             	lea    0x0(%esi),%esi
          }
      }

      if (file_name == NULL)
        /* Out of memory.  Treat the file as empty.  */
        cp = "";
 8065250:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065254:	89 3c 24             	mov    %edi,(%esp)
 8065257:	89 54 24 04          	mov    %edx,0x4(%esp)
 806525b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806525f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065263:	b9 e5 28 00 00       	mov    $0x28e5,%ecx
 8065268:	e8 ab 00 00 00       	call   8065318 <__afl_maybe_log>
 806526d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065271:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065275:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065279:	8b 3c 24             	mov    (%esp),%edi
 806527c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065280:	bb dd 6a 06 08       	mov    $0x8066add,%ebx
 8065285:	e9 b5 fb ff ff       	jmp    8064e3f <locale_charset+0x9af>
 806528a:	66 90                	xchg   %ax,%ax
                        }
                      if (res_ptr == NULL)
                        {
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
 806528c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065290:	89 3c 24             	mov    %edi,(%esp)
 8065293:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065297:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806529b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806529f:	b9 e6 4f 00 00       	mov    $0x4fe6,%ecx
 80652a4:	e8 6f 00 00 00       	call   8065318 <__afl_maybe_log>
 80652a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80652ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80652b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80652b5:	8b 3c 24             	mov    (%esp),%edi
 80652b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80652bc:	83 ec 0c             	sub    $0xc,%esp
 80652bf:	53                   	push   %ebx
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
                    }
                  fclose (fp);
                  if (res_size == 0)
                    cp = "";
 80652c0:	bb dd 6a 06 08       	mov    $0x8066add,%ebx
                        }
                      if (res_ptr == NULL)
                        {
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
 80652c5:	e8 d6 3e fe ff       	call   80491a0 <free@plt>
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
                    }
                  fclose (fp);
 80652ca:	89 3c 24             	mov    %edi,(%esp)
 80652cd:	e8 ce d1 ff ff       	call   80624a0 <rpl_fclose>
 80652d2:	83 c4 10             	add    $0x10,%esp
 80652d5:	e9 26 fb ff ff       	jmp    8064e00 <locale_charset+0x970>
 80652da:	66 90                	xchg   %ax,%ax
 80652dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80652e0:	89 3c 24             	mov    %edi,(%esp)
 80652e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80652e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80652eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80652ef:	b9 f8 42 00 00       	mov    $0x42f8,%ecx
 80652f4:	e8 1f 00 00 00       	call   8065318 <__afl_maybe_log>
 80652f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80652fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065301:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065305:	8b 3c 24             	mov    (%esp),%edi
 8065308:	8d 64 24 10          	lea    0x10(%esp),%esp
 806530c:	8d 50 ff             	lea    -0x1(%eax),%edx
 806530f:	e9 a7 fb ff ff       	jmp    8064ebb <locale_charset+0xa2b>
 8065314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08065318 <__afl_maybe_log>:
 8065318:	9f                   	lahf   
 8065319:	0f 90 c0             	seto   %al
 806531c:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 8065322:	85 d2                	test   %edx,%edx
 8065324:	74 22                	je     8065348 <__afl_setup>

08065326 <__afl_store>:
 8065326:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 806532c:	31 cf                	xor    %ecx,%edi
 806532e:	d1 e9                	shr    %ecx
 8065330:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 8065336:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 806533a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0806533e <__afl_return>:
 806533e:	04 7f                	add    $0x7f,%al
 8065340:	9e                   	sahf   
 8065341:	c3                   	ret    
 8065342:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08065348 <__afl_setup>:
 8065348:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 806534f:	75 ed                	jne    806533e <__afl_return>
 8065351:	50                   	push   %eax
 8065352:	51                   	push   %ecx
 8065353:	68 50 54 06 08       	push   $0x8065450
 8065358:	e8 83 3f fe ff       	call   80492e0 <getenv@plt>
 806535d:	83 c4 04             	add    $0x4,%esp
 8065360:	85 c0                	test   %eax,%eax
 8065362:	0f 84 db 00 00 00    	je     8065443 <__afl_setup_abort>
 8065368:	50                   	push   %eax
 8065369:	e8 32 41 fe ff       	call   80494a0 <atoi@plt>
 806536e:	83 c4 04             	add    $0x4,%esp
 8065371:	6a 00                	push   $0x0
 8065373:	6a 00                	push   $0x0
 8065375:	50                   	push   %eax
 8065376:	e8 a5 3e fe ff       	call   8049220 <shmat@plt>
 806537b:	83 c4 0c             	add    $0xc,%esp
 806537e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8065381:	0f 84 bc 00 00 00    	je     8065443 <__afl_setup_abort>
 8065387:	c6 00 01             	movb   $0x1,(%eax)
 806538a:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 806538f:	89 c2                	mov    %eax,%edx
 8065391:	59                   	pop    %ecx
 8065392:	58                   	pop    %eax

08065393 <__afl_forkserver>:
 8065393:	50                   	push   %eax
 8065394:	51                   	push   %ecx
 8065395:	52                   	push   %edx
 8065396:	6a 04                	push   $0x4
 8065398:	68 e0 ad 43 08       	push   $0x843ade0
 806539d:	68 c7 00 00 00       	push   $0xc7
 80653a2:	e8 29 40 fe ff       	call   80493d0 <write@plt>
 80653a7:	83 c4 0c             	add    $0xc,%esp
 80653aa:	83 f8 04             	cmp    $0x4,%eax
 80653ad:	75 6e                	jne    806541d <__afl_fork_resume>

080653af <__afl_fork_wait_loop>:
 80653af:	6a 04                	push   $0x4
 80653b1:	68 e0 ad 43 08       	push   $0x843ade0
 80653b6:	68 c6 00 00 00       	push   $0xc6
 80653bb:	e8 a0 3d fe ff       	call   8049160 <read@plt>
 80653c0:	83 c4 0c             	add    $0xc,%esp
 80653c3:	83 f8 04             	cmp    $0x4,%eax
 80653c6:	75 74                	jne    806543c <__afl_die>
 80653c8:	e8 73 40 fe ff       	call   8049440 <fork@plt>
 80653cd:	83 f8 00             	cmp    $0x0,%eax
 80653d0:	7c 6a                	jl     806543c <__afl_die>
 80653d2:	74 49                	je     806541d <__afl_fork_resume>
 80653d4:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 80653d9:	6a 04                	push   $0x4
 80653db:	68 40 ae 43 08       	push   $0x843ae40
 80653e0:	68 c7 00 00 00       	push   $0xc7
 80653e5:	e8 e6 3f fe ff       	call   80493d0 <write@plt>
 80653ea:	83 c4 0c             	add    $0xc,%esp
 80653ed:	6a 00                	push   $0x0
 80653ef:	68 e0 ad 43 08       	push   $0x843ade0
 80653f4:	ff 35 40 ae 43 08    	pushl  0x843ae40
 80653fa:	e8 71 3e fe ff       	call   8049270 <waitpid@plt>
 80653ff:	83 c4 0c             	add    $0xc,%esp
 8065402:	83 f8 00             	cmp    $0x0,%eax
 8065405:	7e 35                	jle    806543c <__afl_die>
 8065407:	6a 04                	push   $0x4
 8065409:	68 e0 ad 43 08       	push   $0x843ade0
 806540e:	68 c7 00 00 00       	push   $0xc7
 8065413:	e8 b8 3f fe ff       	call   80493d0 <write@plt>
 8065418:	83 c4 0c             	add    $0xc,%esp
 806541b:	eb 92                	jmp    80653af <__afl_fork_wait_loop>

0806541d <__afl_fork_resume>:
 806541d:	68 c6 00 00 00       	push   $0xc6
 8065422:	e8 f9 40 fe ff       	call   8049520 <close@plt>
 8065427:	68 c7 00 00 00       	push   $0xc7
 806542c:	e8 ef 40 fe ff       	call   8049520 <close@plt>
 8065431:	83 c4 08             	add    $0x8,%esp
 8065434:	5a                   	pop    %edx
 8065435:	59                   	pop    %ecx
 8065436:	58                   	pop    %eax
 8065437:	e9 ea fe ff ff       	jmp    8065326 <__afl_store>

0806543c <__afl_die>:
 806543c:	31 c0                	xor    %eax,%eax
 806543e:	e8 4d 3d fe ff       	call   8049190 <_exit@plt>

08065443 <__afl_setup_abort>:
 8065443:	fe 05 60 ae 43 08    	incb   0x843ae60
 8065449:	59                   	pop    %ecx
 806544a:	58                   	pop    %eax
 806544b:	e9 ee fe ff ff       	jmp    806533e <__afl_return>

08065450 <.AFL_SHM_ENV>:
 8065450:	5f                   	pop    %edi
 8065451:	5f                   	pop    %edi
 8065452:	41                   	inc    %ecx
 8065453:	46                   	inc    %esi
 8065454:	4c                   	dec    %esp
 8065455:	5f                   	pop    %edi
 8065456:	53                   	push   %ebx
 8065457:	48                   	dec    %eax
 8065458:	4d                   	dec    %ebp
 8065459:	5f                   	pop    %edi
 806545a:	49                   	dec    %ecx
 806545b:	44                   	inc    %esp
 806545c:	00 66 90             	add    %ah,-0x70(%esi)
 806545f:	90                   	nop

08065460 <strcoll_loop>:
   nonzero sizes, and the last byte in each block must be a null byte.
   Set errno to an error number if there is an error, and to zero
   otherwise.  */
static int
strcoll_loop (char const *s1, size_t s1size, char const *s2, size_t s2size)
{
 8065460:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065464:	89 3c 24             	mov    %edi,(%esp)
 8065467:	89 54 24 04          	mov    %edx,0x4(%esp)
 806546b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806546f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065473:	b9 ee 40 00 00       	mov    $0x40ee,%ecx
 8065478:	e8 3b 04 00 00       	call   80658b8 <__afl_maybe_log>
 806547d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065481:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065485:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065489:	8b 3c 24             	mov    (%esp),%edi
 806548c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065490:	55                   	push   %ebp
 8065491:	57                   	push   %edi
 8065492:	56                   	push   %esi
 8065493:	53                   	push   %ebx
 8065494:	89 c6                	mov    %eax,%esi
 8065496:	89 cb                	mov    %ecx,%ebx
 8065498:	83 ec 1c             	sub    $0x1c,%esp
 806549b:	8b 7c 24 30          	mov    0x30(%esp),%edi
 806549f:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80654a3:	e8 58 3f fe ff       	call   8049400 <__errno_location@plt>
 80654a8:	89 c5                	mov    %eax,%ebp
 80654aa:	66 90                	xchg   %ax,%ax
  int diff;

  while (! (errno = 0, (diff = strcoll (s1, s2)) || errno))
 80654ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80654b0:	89 3c 24             	mov    %edi,(%esp)
 80654b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80654b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80654bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80654bf:	b9 3f 5a 00 00       	mov    $0x5a3f,%ecx
 80654c4:	e8 ef 03 00 00       	call   80658b8 <__afl_maybe_log>
 80654c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80654cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80654d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80654d5:	8b 3c 24             	mov    (%esp),%edi
 80654d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80654dc:	83 ec 08             	sub    $0x8,%esp
 80654df:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%ebp)
 80654e6:	53                   	push   %ebx
 80654e7:	56                   	push   %esi
 80654e8:	e8 e3 3d fe ff       	call   80492d0 <strcoll@plt>
 80654ed:	83 c4 10             	add    $0x10,%esp
 80654f0:	85 c0                	test   %eax,%eax
 80654f2:	74 6c                	je     8065560 <strcoll_loop+0x100>
 80654f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80654f8:	89 3c 24             	mov    %edi,(%esp)
 80654fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80654ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065503:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065507:	b9 30 c8 00 00       	mov    $0xc830,%ecx
 806550c:	e8 a7 03 00 00       	call   80658b8 <__afl_maybe_log>
 8065511:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065515:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065519:	8b 54 24 04          	mov    0x4(%esp),%edx
 806551d:	8b 3c 24             	mov    (%esp),%edi
 8065520:	8d 64 24 10          	lea    0x10(%esp),%esp
      if (s2size == 0)
        return 1;
    }

  return diff;
}
 8065524:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065528:	89 3c 24             	mov    %edi,(%esp)
 806552b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806552f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065533:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065537:	b9 ef 74 00 00       	mov    $0x74ef,%ecx
 806553c:	e8 77 03 00 00       	call   80658b8 <__afl_maybe_log>
 8065541:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065545:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065549:	8b 54 24 04          	mov    0x4(%esp),%edx
 806554d:	8b 3c 24             	mov    (%esp),%edi
 8065550:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065554:	83 c4 1c             	add    $0x1c,%esp
 8065557:	5b                   	pop    %ebx
 8065558:	5e                   	pop    %esi
 8065559:	5f                   	pop    %edi
 806555a:	5d                   	pop    %ebp
 806555b:	c3                   	ret    
 806555c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  while (! (errno = 0, (diff = strcoll (s1, s2)) || errno))
    {
      /* strcoll found no difference, but perhaps it was fooled by NUL
         characters in the data.  Work around this problem by advancing
         past the NUL chars.  */
      size_t size1 = strlen (s1) + 1;
 8065560:	83 ec 0c             	sub    $0xc,%esp
 8065563:	56                   	push   %esi
 8065564:	e8 37 3e fe ff       	call   80493a0 <strlen@plt>
 8065569:	8d 50 01             	lea    0x1(%eax),%edx
      size_t size2 = strlen (s2) + 1;
 806556c:	89 1c 24             	mov    %ebx,(%esp)
  while (! (errno = 0, (diff = strcoll (s1, s2)) || errno))
    {
      /* strcoll found no difference, but perhaps it was fooled by NUL
         characters in the data.  Work around this problem by advancing
         past the NUL chars.  */
      size_t size1 = strlen (s1) + 1;
 806556f:	89 54 24 18          	mov    %edx,0x18(%esp)
      size_t size2 = strlen (s2) + 1;
 8065573:	e8 28 3e fe ff       	call   80493a0 <strlen@plt>
 8065578:	83 c4 10             	add    $0x10,%esp
      s1 += size1;
 806557b:	8b 4c 24 08          	mov    0x8(%esp),%ecx
    {
      /* strcoll found no difference, but perhaps it was fooled by NUL
         characters in the data.  Work around this problem by advancing
         past the NUL chars.  */
      size_t size1 = strlen (s1) + 1;
      size_t size2 = strlen (s2) + 1;
 806557f:	83 c0 01             	add    $0x1,%eax
      s1 += size1;
      s2 += size2;
 8065582:	01 c3                	add    %eax,%ebx
      s1size -= size1;
      s2size -= size2;
 8065584:	29 c7                	sub    %eax,%edi
      /* strcoll found no difference, but perhaps it was fooled by NUL
         characters in the data.  Work around this problem by advancing
         past the NUL chars.  */
      size_t size1 = strlen (s1) + 1;
      size_t size2 = strlen (s2) + 1;
      s1 += size1;
 8065586:	01 ce                	add    %ecx,%esi
      s2 += size2;
      s1size -= size1;
      s2size -= size2;

      if (s1size == 0)
 8065588:	29 4c 24 0c          	sub    %ecx,0xc(%esp)
 806558c:	74 7a                	je     8065608 <strcoll_loop+0x1a8>
 806558e:	66 90                	xchg   %ax,%ax
 8065590:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065594:	89 3c 24             	mov    %edi,(%esp)
 8065597:	89 54 24 04          	mov    %edx,0x4(%esp)
 806559b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806559f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80655a3:	b9 e0 2e 00 00       	mov    $0x2ee0,%ecx
 80655a8:	e8 0b 03 00 00       	call   80658b8 <__afl_maybe_log>
 80655ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80655b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80655b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80655b9:	8b 3c 24             	mov    (%esp),%edi
 80655bc:	8d 64 24 10          	lea    0x10(%esp),%esp
        return - (s2size != 0);
      if (s2size == 0)
 80655c0:	85 ff                	test   %edi,%edi
 80655c2:	0f 85 e2 fe ff ff    	jne    80654aa <strcoll_loop+0x4a>
 80655c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80655cc:	89 3c 24             	mov    %edi,(%esp)
 80655cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80655d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80655d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80655db:	b9 2c a5 00 00       	mov    $0xa52c,%ecx
 80655e0:	e8 d3 02 00 00       	call   80658b8 <__afl_maybe_log>
 80655e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80655e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80655ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80655f1:	8b 3c 24             	mov    (%esp),%edi
 80655f4:	8d 64 24 10          	lea    0x10(%esp),%esp
        return 1;
    }

  return diff;
}
 80655f8:	83 c4 1c             	add    $0x1c,%esp
      s2size -= size2;

      if (s1size == 0)
        return - (s2size != 0);
      if (s2size == 0)
        return 1;
 80655fb:	b8 01 00 00 00       	mov    $0x1,%eax
    }

  return diff;
}
 8065600:	5b                   	pop    %ebx
 8065601:	5e                   	pop    %esi
 8065602:	5f                   	pop    %edi
 8065603:	5d                   	pop    %ebp
 8065604:	c3                   	ret    
 8065605:	8d 76 00             	lea    0x0(%esi),%esi
      s2 += size2;
      s1size -= size1;
      s2size -= size2;

      if (s1size == 0)
        return - (s2size != 0);
 8065608:	31 c0                	xor    %eax,%eax
 806560a:	85 ff                	test   %edi,%edi
 806560c:	0f 95 c0             	setne  %al
 806560f:	f7 d8                	neg    %eax
 8065611:	e9 0e ff ff ff       	jmp    8065524 <strcoll_loop+0xc4>
 8065616:	8d 76 00             	lea    0x0(%esi),%esi
 8065619:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08065620 <memcoll>:
   adjacent.  Perhaps temporarily modify the bytes after S1 and S2,
   but restore their original contents before returning.  Set errno to an
   error number if there is an error, and to zero otherwise.  */
int
memcoll (char *s1, size_t s1len, char *s2, size_t s2len)
{
 8065620:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065624:	89 3c 24             	mov    %edi,(%esp)
 8065627:	89 54 24 04          	mov    %edx,0x4(%esp)
 806562b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806562f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8065633:	b9 21 e8 00 00       	mov    $0xe821,%ecx
 8065638:	e8 7b 02 00 00       	call   80658b8 <__afl_maybe_log>
 806563d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065641:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065645:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065649:	8b 3c 24             	mov    (%esp),%edi
 806564c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8065650:	55                   	push   %ebp
 8065651:	57                   	push   %edi
 8065652:	56                   	push   %esi
 8065653:	53                   	push   %ebx
 8065654:	83 ec 1c             	sub    $0x1c,%esp
 8065657:	8b 6c 24 34          	mov    0x34(%esp),%ebp
 806565b:	8b 7c 24 3c          	mov    0x3c(%esp),%edi

  /* strcoll is slow on many platforms, so check for the common case
     where the arguments are bytewise equal.  Otherwise, walk through
     the buffers using strcoll on each substring.  */

  if (s1len == s2len && memcmp (s1, s2, s1len) == 0)
 806565f:	39 fd                	cmp    %edi,%ebp
 8065661:	0f 84 b9 00 00 00    	je     8065720 <memcoll+0x100>
 8065667:	90                   	nop
 8065668:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806566c:	89 3c 24             	mov    %edi,(%esp)
 806566f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065673:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8065677:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806567b:	b9 78 a7 00 00       	mov    $0xa778,%ecx
 8065680:	e8 33 02 00 00       	call   80658b8 <__afl_maybe_log>
 8065685:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8065689:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806568d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065691:	8b 3c 24             	mov    (%esp),%edi
 8065694:	8d 64 24 10          	lea    0x10(%esp),%esp
      errno = 0;
      diff = 0;
    }
  else
    {
      char n1 = s1[s1len];
 8065698:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806569c:	89 3c 24             	mov    %edi,(%esp)
 806569f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80656a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80656a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80656ab:	b9 01 52 00 00       	mov    $0x5201,%ecx
 80656b0:	e8 03 02 00 00       	call   80658b8 <__afl_maybe_log>
 80656b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80656b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80656bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80656c1:	8b 3c 24             	mov    (%esp),%edi
 80656c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80656c8:	8b 74 24 30          	mov    0x30(%esp),%esi
      char n2 = s2[s2len];
 80656cc:	8b 5c 24 38          	mov    0x38(%esp),%ebx

      s1[s1len] = '\0';
      s2[s2len] = '\0';

      diff = strcoll_loop (s1, s1len + 1, s2, s2len + 1);
 80656d0:	8d 55 01             	lea    0x1(%ebp),%edx
 80656d3:	83 ec 0c             	sub    $0xc,%esp
      errno = 0;
      diff = 0;
    }
  else
    {
      char n1 = s1[s1len];
 80656d6:	01 ee                	add    %ebp,%esi
      char n2 = s2[s2len];
 80656d8:	01 fb                	add    %edi,%ebx

      s1[s1len] = '\0';
      s2[s2len] = '\0';

      diff = strcoll_loop (s1, s1len + 1, s2, s2len + 1);
 80656da:	8d 6f 01             	lea    0x1(%edi),%ebp
      errno = 0;
      diff = 0;
    }
  else
    {
      char n1 = s1[s1len];
 80656dd:	0f b6 06             	movzbl (%esi),%eax
      char n2 = s2[s2len];
 80656e0:	0f b6 0b             	movzbl (%ebx),%ecx

      s1[s1len] = '\0';
 80656e3:	c6 06 00             	movb   $0x0,(%esi)
      s2[s2len] = '\0';
 80656e6:	c6 03 00             	movb   $0x0,(%ebx)
      errno = 0;
      diff = 0;
    }
  else
    {
      char n1 = s1[s1len];
 80656e9:	88 44 24 1a          	mov    %al,0x1a(%esp)
      char n2 = s2[s2len];
 80656ed:	88 4c 24 1b          	mov    %cl,0x1b(%esp)

      s1[s1len] = '\0';
      s2[s2len] = '\0';

      diff = strcoll_loop (s1, s1len + 1, s2, s2len + 1);
 80656f1:	55                   	push   %ebp
 80656f2:	8b 4c 24 48          	mov    0x48(%esp),%ecx
 80656f6:	8b 44 24 40          	mov    0x40(%esp),%eax
 80656fa:	e8 61 fd ff ff       	call   8065460 <strcoll_loop>

      s1[s1len] = n1;
 80656ff:	0f b6 54 24 1e       	movzbl 0x1e(%esp),%edx
      s2[s2len] = n2;
 8065704:	0f b6 4c 24 1f       	movzbl 0x1f(%esp),%ecx
 8065709:	83 c4 10             	add    $0x10,%esp
      s1[s1len] = '\0';
      s2[s2len] = '\0';

      diff = strcoll_loop (s1, s1len + 1, s2, s2len + 1);

      s1[s1len] = n1;
 806570c:	88 16                	mov    %dl,(%esi)
      s2[s2len] = n2;
 806570e:	88 0b                	mov    %cl,(%ebx)
    }

  return diff;
}
 8065710:	83 c4 1c             	add    $0x1c,%esp
 8065713:	5b                   	pop    %ebx
 8065714:	5e                   	pop    %esi
 8065715:	5f                   	pop    %edi
 8065716:	5d                   	pop    %ebp
 8065717:	c3                   	ret    
 8065718:	90                   	nop
 8065719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

  /* strcoll is slow on many platforms, so check for the common case
     where the arguments are bytewise equal.  Otherwise, walk through
     the buffers using strcoll on each substring.  */

  if (s1len == s2len && memcmp (s1, s2, s1len) == 0)
 8065720:	83 ec 04             	sub    $0x4,%esp
 8065723:	55                   	push   %ebp
 8065724:	ff 74 24 40          	pushl  0x40(%esp)
 8065728:	ff 74 24 3c          	pushl  0x3c(%esp)
 806572c:	e8 bf 3a fe ff       	call   80491f0 <memcmp@plt>
 8065731:	83 c4 10             	add    $0x10,%esp
 8065734:	85 c0                	test   %eax,%eax
 8065736:	0f 85 5c ff ff ff    	jne    8065698 <memcoll+0x78>
 806573c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065740:	89 3c 24             	mov    %edi,(%esp)
 8065743:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065747:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806574b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806574f:	b9 c5 fe 00 00       	mov    $0xfec5,%ecx
 8065754:	e8 5f 01 00 00       	call   80658b8 <__afl_maybe_log>
 8065759:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806575d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065761:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065765:	8b 3c 24             	mov    (%esp),%edi
 8065768:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      errno = 0;
 806576c:	e8 8f 3c fe ff       	call   8049400 <__errno_location@plt>
 8065771:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      s1[s1len] = n1;
      s2[s2len] = n2;
    }

  return diff;
}
 8065777:	83 c4 1c             	add    $0x1c,%esp
     the buffers using strcoll on each substring.  */

  if (s1len == s2len && memcmp (s1, s2, s1len) == 0)
    {
      errno = 0;
      diff = 0;
 806577a:	31 c0                	xor    %eax,%eax
      s1[s1len] = n1;
      s2[s2len] = n2;
    }

  return diff;
}
 806577c:	5b                   	pop    %ebx
 806577d:	5e                   	pop    %esi
 806577e:	5f                   	pop    %edi
 806577f:	5d                   	pop    %ebp
 8065780:	c3                   	ret    
 8065781:	eb 0d                	jmp    8065790 <memcoll0>
 8065783:	90                   	nop
 8065784:	90                   	nop
 8065785:	90                   	nop
 8065786:	90                   	nop
 8065787:	90                   	nop
 8065788:	90                   	nop
 8065789:	90                   	nop
 806578a:	90                   	nop
 806578b:	90                   	nop
 806578c:	90                   	nop
 806578d:	90                   	nop
 806578e:	90                   	nop
 806578f:	90                   	nop

08065790 <memcoll0>:
   according to the LC_COLLATE locale.  S1SIZE and S2SIZE must be > 0.
   Set errno to an error number if there is an error, and to zero
   otherwise.  */
int
memcoll0 (char const *s1, size_t s1size, char const *s2, size_t s2size)
{
 8065790:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065794:	89 3c 24             	mov    %edi,(%esp)
 8065797:	89 54 24 04          	mov    %edx,0x4(%esp)
 806579b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806579f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80657a3:	b9 6f b9 00 00       	mov    $0xb96f,%ecx
 80657a8:	e8 0b 01 00 00       	call   80658b8 <__afl_maybe_log>
 80657ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80657b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80657b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80657b9:	8b 3c 24             	mov    (%esp),%edi
 80657bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80657c0:	55                   	push   %ebp
 80657c1:	57                   	push   %edi
 80657c2:	56                   	push   %esi
 80657c3:	53                   	push   %ebx
 80657c4:	83 ec 0c             	sub    $0xc,%esp
 80657c7:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 80657cb:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 80657cf:	8b 7c 24 20          	mov    0x20(%esp),%edi
 80657d3:	8b 6c 24 28          	mov    0x28(%esp),%ebp
  if (s1size == s2size && memcmp (s1, s2, s1size) == 0)
 80657d7:	39 f3                	cmp    %esi,%ebx
 80657d9:	74 7d                	je     8065858 <memcoll0+0xc8>
 80657db:	90                   	nop
 80657dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80657e0:	89 3c 24             	mov    %edi,(%esp)
 80657e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80657e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80657eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80657ef:	b9 df 10 00 00       	mov    $0x10df,%ecx
 80657f4:	e8 bf 00 00 00       	call   80658b8 <__afl_maybe_log>
 80657f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80657fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065801:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065805:	8b 3c 24             	mov    (%esp),%edi
 8065808:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      errno = 0;
      return 0;
    }
  else
    return strcoll_loop (s1, s1size, s2, s2size);
 806580c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065810:	89 3c 24             	mov    %edi,(%esp)
 8065813:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065817:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806581b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806581f:	b9 f7 96 00 00       	mov    $0x96f7,%ecx
 8065824:	e8 8f 00 00 00       	call   80658b8 <__afl_maybe_log>
 8065829:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806582d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065831:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065835:	8b 3c 24             	mov    (%esp),%edi
 8065838:	8d 64 24 10          	lea    0x10(%esp),%esp
 806583c:	89 74 24 20          	mov    %esi,0x20(%esp)
}
 8065840:	83 c4 0c             	add    $0xc,%esp
    {
      errno = 0;
      return 0;
    }
  else
    return strcoll_loop (s1, s1size, s2, s2size);
 8065843:	89 e9                	mov    %ebp,%ecx
 8065845:	89 da                	mov    %ebx,%edx
 8065847:	89 f8                	mov    %edi,%eax
}
 8065849:	5b                   	pop    %ebx
 806584a:	5e                   	pop    %esi
 806584b:	5f                   	pop    %edi
 806584c:	5d                   	pop    %ebp
    {
      errno = 0;
      return 0;
    }
  else
    return strcoll_loop (s1, s1size, s2, s2size);
 806584d:	e9 0e fc ff ff       	jmp    8065460 <strcoll_loop>
 8065852:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   Set errno to an error number if there is an error, and to zero
   otherwise.  */
int
memcoll0 (char const *s1, size_t s1size, char const *s2, size_t s2size)
{
  if (s1size == s2size && memcmp (s1, s2, s1size) == 0)
 8065858:	83 ec 04             	sub    $0x4,%esp
 806585b:	53                   	push   %ebx
 806585c:	55                   	push   %ebp
 806585d:	57                   	push   %edi
 806585e:	e8 8d 39 fe ff       	call   80491f0 <memcmp@plt>
 8065863:	83 c4 10             	add    $0x10,%esp
 8065866:	85 c0                	test   %eax,%eax
 8065868:	75 a2                	jne    806580c <memcoll0+0x7c>
 806586a:	66 90                	xchg   %ax,%ax
 806586c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8065870:	89 3c 24             	mov    %edi,(%esp)
 8065873:	89 54 24 04          	mov    %edx,0x4(%esp)
 8065877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806587b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806587f:	b9 26 35 00 00       	mov    $0x3526,%ecx
 8065884:	e8 2f 00 00 00       	call   80658b8 <__afl_maybe_log>
 8065889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806588d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8065891:	8b 54 24 04          	mov    0x4(%esp),%edx
 8065895:	8b 3c 24             	mov    (%esp),%edi
 8065898:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      errno = 0;
 806589c:	e8 5f 3b fe ff       	call   8049400 <__errno_location@plt>
 80658a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      return 0;
    }
  else
    return strcoll_loop (s1, s1size, s2, s2size);
}
 80658a7:	83 c4 0c             	add    $0xc,%esp
 80658aa:	31 c0                	xor    %eax,%eax
 80658ac:	5b                   	pop    %ebx
 80658ad:	5e                   	pop    %esi
 80658ae:	5f                   	pop    %edi
 80658af:	5d                   	pop    %ebp
 80658b0:	c3                   	ret    
 80658b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

080658b8 <__afl_maybe_log>:
 80658b8:	9f                   	lahf   
 80658b9:	0f 90 c0             	seto   %al
 80658bc:	8b 15 c0 ad 43 08    	mov    0x843adc0,%edx
 80658c2:	85 d2                	test   %edx,%edx
 80658c4:	74 22                	je     80658e8 <__afl_setup>

080658c6 <__afl_store>:
 80658c6:	8b 3d 20 ae 43 08    	mov    0x843ae20,%edi
 80658cc:	31 cf                	xor    %ecx,%edi
 80658ce:	d1 e9                	shr    %ecx
 80658d0:	89 0d 20 ae 43 08    	mov    %ecx,0x843ae20
 80658d6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80658da:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080658de <__afl_return>:
 80658de:	04 7f                	add    $0x7f,%al
 80658e0:	9e                   	sahf   
 80658e1:	c3                   	ret    
 80658e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080658e8 <__afl_setup>:
 80658e8:	80 3d 60 ae 43 08 00 	cmpb   $0x0,0x843ae60
 80658ef:	75 ed                	jne    80658de <__afl_return>
 80658f1:	50                   	push   %eax
 80658f2:	51                   	push   %ecx
 80658f3:	68 f0 59 06 08       	push   $0x80659f0
 80658f8:	e8 e3 39 fe ff       	call   80492e0 <getenv@plt>
 80658fd:	83 c4 04             	add    $0x4,%esp
 8065900:	85 c0                	test   %eax,%eax
 8065902:	0f 84 db 00 00 00    	je     80659e3 <__afl_setup_abort>
 8065908:	50                   	push   %eax
 8065909:	e8 92 3b fe ff       	call   80494a0 <atoi@plt>
 806590e:	83 c4 04             	add    $0x4,%esp
 8065911:	6a 00                	push   $0x0
 8065913:	6a 00                	push   $0x0
 8065915:	50                   	push   %eax
 8065916:	e8 05 39 fe ff       	call   8049220 <shmat@plt>
 806591b:	83 c4 0c             	add    $0xc,%esp
 806591e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8065921:	0f 84 bc 00 00 00    	je     80659e3 <__afl_setup_abort>
 8065927:	c6 00 01             	movb   $0x1,(%eax)
 806592a:	a3 c0 ad 43 08       	mov    %eax,0x843adc0
 806592f:	89 c2                	mov    %eax,%edx
 8065931:	59                   	pop    %ecx
 8065932:	58                   	pop    %eax

08065933 <__afl_forkserver>:
 8065933:	50                   	push   %eax
 8065934:	51                   	push   %ecx
 8065935:	52                   	push   %edx
 8065936:	6a 04                	push   $0x4
 8065938:	68 e0 ad 43 08       	push   $0x843ade0
 806593d:	68 c7 00 00 00       	push   $0xc7
 8065942:	e8 89 3a fe ff       	call   80493d0 <write@plt>
 8065947:	83 c4 0c             	add    $0xc,%esp
 806594a:	83 f8 04             	cmp    $0x4,%eax
 806594d:	75 6e                	jne    80659bd <__afl_fork_resume>

0806594f <__afl_fork_wait_loop>:
 806594f:	6a 04                	push   $0x4
 8065951:	68 e0 ad 43 08       	push   $0x843ade0
 8065956:	68 c6 00 00 00       	push   $0xc6
 806595b:	e8 00 38 fe ff       	call   8049160 <read@plt>
 8065960:	83 c4 0c             	add    $0xc,%esp
 8065963:	83 f8 04             	cmp    $0x4,%eax
 8065966:	75 74                	jne    80659dc <__afl_die>
 8065968:	e8 d3 3a fe ff       	call   8049440 <fork@plt>
 806596d:	83 f8 00             	cmp    $0x0,%eax
 8065970:	7c 6a                	jl     80659dc <__afl_die>
 8065972:	74 49                	je     80659bd <__afl_fork_resume>
 8065974:	a3 40 ae 43 08       	mov    %eax,0x843ae40
 8065979:	6a 04                	push   $0x4
 806597b:	68 40 ae 43 08       	push   $0x843ae40
 8065980:	68 c7 00 00 00       	push   $0xc7
 8065985:	e8 46 3a fe ff       	call   80493d0 <write@plt>
 806598a:	83 c4 0c             	add    $0xc,%esp
 806598d:	6a 00                	push   $0x0
 806598f:	68 e0 ad 43 08       	push   $0x843ade0
 8065994:	ff 35 40 ae 43 08    	pushl  0x843ae40
 806599a:	e8 d1 38 fe ff       	call   8049270 <waitpid@plt>
 806599f:	83 c4 0c             	add    $0xc,%esp
 80659a2:	83 f8 00             	cmp    $0x0,%eax
 80659a5:	7e 35                	jle    80659dc <__afl_die>
 80659a7:	6a 04                	push   $0x4
 80659a9:	68 e0 ad 43 08       	push   $0x843ade0
 80659ae:	68 c7 00 00 00       	push   $0xc7
 80659b3:	e8 18 3a fe ff       	call   80493d0 <write@plt>
 80659b8:	83 c4 0c             	add    $0xc,%esp
 80659bb:	eb 92                	jmp    806594f <__afl_fork_wait_loop>

080659bd <__afl_fork_resume>:
 80659bd:	68 c6 00 00 00       	push   $0xc6
 80659c2:	e8 59 3b fe ff       	call   8049520 <close@plt>
 80659c7:	68 c7 00 00 00       	push   $0xc7
 80659cc:	e8 4f 3b fe ff       	call   8049520 <close@plt>
 80659d1:	83 c4 08             	add    $0x8,%esp
 80659d4:	5a                   	pop    %edx
 80659d5:	59                   	pop    %ecx
 80659d6:	58                   	pop    %eax
 80659d7:	e9 ea fe ff ff       	jmp    80658c6 <__afl_store>

080659dc <__afl_die>:
 80659dc:	31 c0                	xor    %eax,%eax
 80659de:	e8 ad 37 fe ff       	call   8049190 <_exit@plt>

080659e3 <__afl_setup_abort>:
 80659e3:	fe 05 60 ae 43 08    	incb   0x843ae60
 80659e9:	59                   	pop    %ecx
 80659ea:	58                   	pop    %eax
 80659eb:	e9 ee fe ff ff       	jmp    80658de <__afl_return>

080659f0 <.AFL_SHM_ENV>:
 80659f0:	5f                   	pop    %edi
 80659f1:	5f                   	pop    %edi
 80659f2:	41                   	inc    %ecx
 80659f3:	46                   	inc    %esi
 80659f4:	4c                   	dec    %esp
 80659f5:	5f                   	pop    %edi
 80659f6:	53                   	push   %ebx
 80659f7:	48                   	dec    %eax
 80659f8:	4d                   	dec    %ebp
 80659f9:	5f                   	pop    %edi
 80659fa:	49                   	dec    %ecx
 80659fb:	44                   	inc    %esp
 80659fc:	00 66 90             	add    %ah,-0x70(%esi)
 80659ff:	90                   	nop

08065a00 <__libc_csu_init>:
 8065a00:	55                   	push   %ebp
 8065a01:	57                   	push   %edi
 8065a02:	31 ff                	xor    %edi,%edi
 8065a04:	56                   	push   %esi
 8065a05:	53                   	push   %ebx
 8065a06:	e8 b5 b4 fe ff       	call   8050ec0 <__x86.get_pc_thunk.bx>
 8065a0b:	81 c3 01 47 00 00    	add    $0x4701,%ebx
 8065a11:	83 ec 1c             	sub    $0x1c,%esp
 8065a14:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8065a18:	8d b3 f8 fe ff ff    	lea    -0x108(%ebx),%esi
 8065a1e:	e8 b1 36 fe ff       	call   80490d4 <_init>
 8065a23:	8d 83 f4 fe ff ff    	lea    -0x10c(%ebx),%eax
 8065a29:	29 c6                	sub    %eax,%esi
 8065a2b:	c1 fe 02             	sar    $0x2,%esi
 8065a2e:	85 f6                	test   %esi,%esi
 8065a30:	74 27                	je     8065a59 <__libc_csu_init+0x59>
 8065a32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8065a38:	8b 44 24 38          	mov    0x38(%esp),%eax
 8065a3c:	89 2c 24             	mov    %ebp,(%esp)
 8065a3f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8065a43:	8b 44 24 34          	mov    0x34(%esp),%eax
 8065a47:	89 44 24 04          	mov    %eax,0x4(%esp)
 8065a4b:	ff 94 bb f4 fe ff ff 	call   *-0x10c(%ebx,%edi,4)
 8065a52:	83 c7 01             	add    $0x1,%edi
 8065a55:	39 f7                	cmp    %esi,%edi
 8065a57:	75 df                	jne    8065a38 <__libc_csu_init+0x38>
 8065a59:	83 c4 1c             	add    $0x1c,%esp
 8065a5c:	5b                   	pop    %ebx
 8065a5d:	5e                   	pop    %esi
 8065a5e:	5f                   	pop    %edi
 8065a5f:	5d                   	pop    %ebp
 8065a60:	c3                   	ret    
 8065a61:	eb 0d                	jmp    8065a70 <__libc_csu_fini>
 8065a63:	90                   	nop
 8065a64:	90                   	nop
 8065a65:	90                   	nop
 8065a66:	90                   	nop
 8065a67:	90                   	nop
 8065a68:	90                   	nop
 8065a69:	90                   	nop
 8065a6a:	90                   	nop
 8065a6b:	90                   	nop
 8065a6c:	90                   	nop
 8065a6d:	90                   	nop
 8065a6e:	90                   	nop
 8065a6f:	90                   	nop

08065a70 <__libc_csu_fini>:
 8065a70:	f3 c3                	repz ret 
 8065a72:	66 90                	xchg   %ax,%ax
 8065a74:	66 90                	xchg   %ax,%ax
 8065a76:	66 90                	xchg   %ax,%ax
 8065a78:	66 90                	xchg   %ax,%ax
 8065a7a:	66 90                	xchg   %ax,%ax
 8065a7c:	66 90                	xchg   %ax,%ax
 8065a7e:	66 90                	xchg   %ax,%ax

08065a80 <atexit>:
 8065a80:	53                   	push   %ebx
 8065a81:	e8 3a b4 fe ff       	call   8050ec0 <__x86.get_pc_thunk.bx>
 8065a86:	81 c3 86 46 00 00    	add    $0x4686,%ebx
 8065a8c:	83 ec 18             	sub    $0x18,%esp
 8065a8f:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8065a95:	85 c0                	test   %eax,%eax
 8065a97:	74 1f                	je     8065ab8 <atexit+0x38>
 8065a99:	8b 00                	mov    (%eax),%eax
 8065a9b:	89 44 24 08          	mov    %eax,0x8(%esp)
 8065a9f:	8b 44 24 20          	mov    0x20(%esp),%eax
 8065aa3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 8065aaa:	00 
 8065aab:	89 04 24             	mov    %eax,(%esp)
 8065aae:	e8 fd 37 fe ff       	call   80492b0 <__cxa_atexit@plt>
 8065ab3:	83 c4 18             	add    $0x18,%esp
 8065ab6:	5b                   	pop    %ebx
 8065ab7:	c3                   	ret    
 8065ab8:	31 c0                	xor    %eax,%eax
 8065aba:	eb df                	jmp    8065a9b <atexit+0x1b>

Disassembly of section .fini:

08065abc <_fini>:
 8065abc:	53                   	push   %ebx
 8065abd:	83 ec 08             	sub    $0x8,%esp
 8065ac0:	e8 fb b3 fe ff       	call   8050ec0 <__x86.get_pc_thunk.bx>
 8065ac5:	81 c3 47 46 00 00    	add    $0x4647,%ebx
 8065acb:	83 c4 08             	add    $0x8,%esp
 8065ace:	5b                   	pop    %ebx
 8065acf:	c3                   	ret    
