
src/base64:     file format elf32-i386


Disassembly of section .init:

080490bc <_init>:
 80490bc:	53                   	push   %ebx
 80490bd:	83 ec 08             	sub    $0x8,%esp
 80490c0:	e8 1b 18 00 00       	call   804a8e0 <__x86.get_pc_thunk.bx>
 80490c5:	81 c3 47 e0 01 00    	add    $0x1e047,%ebx
 80490cb:	8b 83 f8 ff ff ff    	mov    -0x8(%ebx),%eax
 80490d1:	85 c0                	test   %eax,%eax
 80490d3:	74 05                	je     80490da <_init+0x1e>
 80490d5:	e8 16 02 00 00       	call   80492f0 <__gmon_start__@plt>
 80490da:	83 c4 08             	add    $0x8,%esp
 80490dd:	5b                   	pop    %ebx
 80490de:	c3                   	ret    

Disassembly of section .plt:

080490e0 <strcmp@plt-0x10>:
 80490e0:	ff 35 10 71 06 08    	pushl  0x8067110
 80490e6:	ff 25 14 71 06 08    	jmp    *0x8067114
 80490ec:	00 00                	add    %al,(%eax)
	...

080490f0 <strcmp@plt>:
 80490f0:	ff 25 18 71 06 08    	jmp    *0x8067118
 80490f6:	68 00 00 00 00       	push   $0x0
 80490fb:	e9 e0 ff ff ff       	jmp    80490e0 <_init+0x24>

08049100 <open64@plt>:
 8049100:	ff 25 1c 71 06 08    	jmp    *0x806711c
 8049106:	68 08 00 00 00       	push   $0x8
 804910b:	e9 d0 ff ff ff       	jmp    80490e0 <_init+0x24>

08049110 <read@plt>:
 8049110:	ff 25 20 71 06 08    	jmp    *0x8067120
 8049116:	68 10 00 00 00       	push   $0x10
 804911b:	e9 c0 ff ff ff       	jmp    80490e0 <_init+0x24>

08049120 <printf@plt>:
 8049120:	ff 25 24 71 06 08    	jmp    *0x8067124
 8049126:	68 18 00 00 00       	push   $0x18
 804912b:	e9 b0 ff ff ff       	jmp    80490e0 <_init+0x24>

08049130 <fflush@plt>:
 8049130:	ff 25 28 71 06 08    	jmp    *0x8067128
 8049136:	68 20 00 00 00       	push   $0x20
 804913b:	e9 a0 ff ff ff       	jmp    80490e0 <_init+0x24>

08049140 <_exit@plt>:
 8049140:	ff 25 2c 71 06 08    	jmp    *0x806712c
 8049146:	68 28 00 00 00       	push   $0x28
 804914b:	e9 90 ff ff ff       	jmp    80490e0 <_init+0x24>

08049150 <memmove@plt>:
 8049150:	ff 25 30 71 06 08    	jmp    *0x8067130
 8049156:	68 30 00 00 00       	push   $0x30
 804915b:	e9 80 ff ff ff       	jmp    80490e0 <_init+0x24>

08049160 <free@plt>:
 8049160:	ff 25 34 71 06 08    	jmp    *0x8067134
 8049166:	68 38 00 00 00       	push   $0x38
 804916b:	e9 70 ff ff ff       	jmp    80490e0 <_init+0x24>

08049170 <memcpy@plt>:
 8049170:	ff 25 38 71 06 08    	jmp    *0x8067138
 8049176:	68 40 00 00 00       	push   $0x40
 804917b:	e9 60 ff ff ff       	jmp    80490e0 <_init+0x24>

08049180 <mbsinit@plt>:
 8049180:	ff 25 3c 71 06 08    	jmp    *0x806713c
 8049186:	68 48 00 00 00       	push   $0x48
 804918b:	e9 50 ff ff ff       	jmp    80490e0 <_init+0x24>

08049190 <__strtoull_internal@plt>:
 8049190:	ff 25 40 71 06 08    	jmp    *0x8067140
 8049196:	68 50 00 00 00       	push   $0x50
 804919b:	e9 40 ff ff ff       	jmp    80490e0 <_init+0x24>

080491a0 <fclose@plt>:
 80491a0:	ff 25 44 71 06 08    	jmp    *0x8067144
 80491a6:	68 58 00 00 00       	push   $0x58
 80491ab:	e9 30 ff ff ff       	jmp    80490e0 <_init+0x24>

080491b0 <fseeko64@plt>:
 80491b0:	ff 25 48 71 06 08    	jmp    *0x8067148
 80491b6:	68 60 00 00 00       	push   $0x60
 80491bb:	e9 20 ff ff ff       	jmp    80490e0 <_init+0x24>

080491c0 <memcmp@plt>:
 80491c0:	ff 25 4c 71 06 08    	jmp    *0x806714c
 80491c6:	68 68 00 00 00       	push   $0x68
 80491cb:	e9 10 ff ff ff       	jmp    80490e0 <_init+0x24>

080491d0 <dprintf@plt>:
 80491d0:	ff 25 50 71 06 08    	jmp    *0x8067150
 80491d6:	68 70 00 00 00       	push   $0x70
 80491db:	e9 00 ff ff ff       	jmp    80490e0 <_init+0x24>

080491e0 <dcgettext@plt>:
 80491e0:	ff 25 54 71 06 08    	jmp    *0x8067154
 80491e6:	68 78 00 00 00       	push   $0x78
 80491eb:	e9 f0 fe ff ff       	jmp    80490e0 <_init+0x24>

080491f0 <shmat@plt>:
 80491f0:	ff 25 58 71 06 08    	jmp    *0x8067158
 80491f6:	68 80 00 00 00       	push   $0x80
 80491fb:	e9 e0 fe ff ff       	jmp    80490e0 <_init+0x24>

08049200 <textdomain@plt>:
 8049200:	ff 25 5c 71 06 08    	jmp    *0x806715c
 8049206:	68 88 00 00 00       	push   $0x88
 804920b:	e9 d0 fe ff ff       	jmp    80490e0 <_init+0x24>

08049210 <iswprint@plt>:
 8049210:	ff 25 60 71 06 08    	jmp    *0x8067160
 8049216:	68 90 00 00 00       	push   $0x90
 804921b:	e9 c0 fe ff ff       	jmp    80490e0 <_init+0x24>

08049220 <fwrite@plt>:
 8049220:	ff 25 64 71 06 08    	jmp    *0x8067164
 8049226:	68 98 00 00 00       	push   $0x98
 804922b:	e9 b0 fe ff ff       	jmp    80490e0 <_init+0x24>

08049230 <__ctype_get_mb_cur_max@plt>:
 8049230:	ff 25 68 71 06 08    	jmp    *0x8067168
 8049236:	68 a0 00 00 00       	push   $0xa0
 804923b:	e9 a0 fe ff ff       	jmp    80490e0 <_init+0x24>

08049240 <waitpid@plt>:
 8049240:	ff 25 6c 71 06 08    	jmp    *0x806716c
 8049246:	68 a8 00 00 00       	push   $0xa8
 804924b:	e9 90 fe ff ff       	jmp    80490e0 <_init+0x24>

08049250 <strcpy@plt>:
 8049250:	ff 25 70 71 06 08    	jmp    *0x8067170
 8049256:	68 b0 00 00 00       	push   $0xb0
 804925b:	e9 80 fe ff ff       	jmp    80490e0 <_init+0x24>

08049260 <__fpending@plt>:
 8049260:	ff 25 74 71 06 08    	jmp    *0x8067174
 8049266:	68 b8 00 00 00       	push   $0xb8
 804926b:	e9 70 fe ff ff       	jmp    80490e0 <_init+0x24>

08049270 <mbrtowc@plt>:
 8049270:	ff 25 78 71 06 08    	jmp    *0x8067178
 8049276:	68 c0 00 00 00       	push   $0xc0
 804927b:	e9 60 fe ff ff       	jmp    80490e0 <_init+0x24>

08049280 <__cxa_atexit@plt>:
 8049280:	ff 25 7c 71 06 08    	jmp    *0x806717c
 8049286:	68 c8 00 00 00       	push   $0xc8
 804928b:	e9 50 fe ff ff       	jmp    80490e0 <_init+0x24>

08049290 <error@plt>:
 8049290:	ff 25 80 71 06 08    	jmp    *0x8067180
 8049296:	68 d0 00 00 00       	push   $0xd0
 804929b:	e9 40 fe ff ff       	jmp    80490e0 <_init+0x24>

080492a0 <fread_unlocked@plt>:
 80492a0:	ff 25 84 71 06 08    	jmp    *0x8067184
 80492a6:	68 d8 00 00 00       	push   $0xd8
 80492ab:	e9 30 fe ff ff       	jmp    80490e0 <_init+0x24>

080492b0 <getenv@plt>:
 80492b0:	ff 25 88 71 06 08    	jmp    *0x8067188
 80492b6:	68 e0 00 00 00       	push   $0xe0
 80492bb:	e9 20 fe ff ff       	jmp    80490e0 <_init+0x24>

080492c0 <realloc@plt>:
 80492c0:	ff 25 8c 71 06 08    	jmp    *0x806718c
 80492c6:	68 e8 00 00 00       	push   $0xe8
 80492cb:	e9 10 fe ff ff       	jmp    80490e0 <_init+0x24>

080492d0 <malloc@plt>:
 80492d0:	ff 25 90 71 06 08    	jmp    *0x8067190
 80492d6:	68 f0 00 00 00       	push   $0xf0
 80492db:	e9 00 fe ff ff       	jmp    80490e0 <_init+0x24>

080492e0 <__freading@plt>:
 80492e0:	ff 25 94 71 06 08    	jmp    *0x8067194
 80492e6:	68 f8 00 00 00       	push   $0xf8
 80492eb:	e9 f0 fd ff ff       	jmp    80490e0 <_init+0x24>

080492f0 <__gmon_start__@plt>:
 80492f0:	ff 25 98 71 06 08    	jmp    *0x8067198
 80492f6:	68 00 01 00 00       	push   $0x100
 80492fb:	e9 e0 fd ff ff       	jmp    80490e0 <_init+0x24>

08049300 <exit@plt>:
 8049300:	ff 25 9c 71 06 08    	jmp    *0x806719c
 8049306:	68 08 01 00 00       	push   $0x108
 804930b:	e9 d0 fd ff ff       	jmp    80490e0 <_init+0x24>

08049310 <fdopen@plt>:
 8049310:	ff 25 a0 71 06 08    	jmp    *0x80671a0
 8049316:	68 10 01 00 00       	push   $0x110
 804931b:	e9 c0 fd ff ff       	jmp    80490e0 <_init+0x24>

08049320 <fputs_unlocked@plt>:
 8049320:	ff 25 a4 71 06 08    	jmp    *0x80671a4
 8049326:	68 18 01 00 00       	push   $0x118
 804932b:	e9 b0 fd ff ff       	jmp    80490e0 <_init+0x24>

08049330 <getopt_long@plt>:
 8049330:	ff 25 a8 71 06 08    	jmp    *0x80671a8
 8049336:	68 20 01 00 00       	push   $0x120
 804933b:	e9 a0 fd ff ff       	jmp    80490e0 <_init+0x24>

08049340 <strchr@plt>:
 8049340:	ff 25 ac 71 06 08    	jmp    *0x80671ac
 8049346:	68 28 01 00 00       	push   $0x128
 804934b:	e9 90 fd ff ff       	jmp    80490e0 <_init+0x24>

08049350 <fscanf@plt>:
 8049350:	ff 25 b0 71 06 08    	jmp    *0x80671b0
 8049356:	68 30 01 00 00       	push   $0x130
 804935b:	e9 80 fd ff ff       	jmp    80490e0 <_init+0x24>

08049360 <strlen@plt>:
 8049360:	ff 25 b4 71 06 08    	jmp    *0x80671b4
 8049366:	68 38 01 00 00       	push   $0x138
 804936b:	e9 70 fd ff ff       	jmp    80490e0 <_init+0x24>

08049370 <__libc_start_main@plt>:
 8049370:	ff 25 b8 71 06 08    	jmp    *0x80671b8
 8049376:	68 40 01 00 00       	push   $0x140
 804937b:	e9 60 fd ff ff       	jmp    80490e0 <_init+0x24>

08049380 <fprintf@plt>:
 8049380:	ff 25 bc 71 06 08    	jmp    *0x80671bc
 8049386:	68 48 01 00 00       	push   $0x148
 804938b:	e9 50 fd ff ff       	jmp    80490e0 <_init+0x24>

08049390 <write@plt>:
 8049390:	ff 25 c0 71 06 08    	jmp    *0x80671c0
 8049396:	68 50 01 00 00       	push   $0x150
 804939b:	e9 40 fd ff ff       	jmp    80490e0 <_init+0x24>

080493a0 <fopen@plt>:
 80493a0:	ff 25 c4 71 06 08    	jmp    *0x80671c4
 80493a6:	68 58 01 00 00       	push   $0x158
 80493ab:	e9 30 fd ff ff       	jmp    80490e0 <_init+0x24>

080493b0 <memset@plt>:
 80493b0:	ff 25 c8 71 06 08    	jmp    *0x80671c8
 80493b6:	68 60 01 00 00       	push   $0x160
 80493bb:	e9 20 fd ff ff       	jmp    80490e0 <_init+0x24>

080493c0 <ungetc@plt>:
 80493c0:	ff 25 cc 71 06 08    	jmp    *0x80671cc
 80493c6:	68 68 01 00 00       	push   $0x168
 80493cb:	e9 10 fd ff ff       	jmp    80490e0 <_init+0x24>

080493d0 <__errno_location@plt>:
 80493d0:	ff 25 d0 71 06 08    	jmp    *0x80671d0
 80493d6:	68 70 01 00 00       	push   $0x170
 80493db:	e9 00 fd ff ff       	jmp    80490e0 <_init+0x24>

080493e0 <memchr@plt>:
 80493e0:	ff 25 d4 71 06 08    	jmp    *0x80671d4
 80493e6:	68 78 01 00 00       	push   $0x178
 80493eb:	e9 f0 fc ff ff       	jmp    80490e0 <_init+0x24>

080493f0 <fileno@plt>:
 80493f0:	ff 25 d8 71 06 08    	jmp    *0x80671d8
 80493f6:	68 80 01 00 00       	push   $0x180
 80493fb:	e9 e0 fc ff ff       	jmp    80490e0 <_init+0x24>

08049400 <fwrite_unlocked@plt>:
 8049400:	ff 25 dc 71 06 08    	jmp    *0x80671dc
 8049406:	68 88 01 00 00       	push   $0x188
 804940b:	e9 d0 fc ff ff       	jmp    80490e0 <_init+0x24>

08049410 <__printf_chk@plt>:
 8049410:	ff 25 e0 71 06 08    	jmp    *0x80671e0
 8049416:	68 90 01 00 00       	push   $0x190
 804941b:	e9 c0 fc ff ff       	jmp    80490e0 <_init+0x24>

08049420 <fork@plt>:
 8049420:	ff 25 e4 71 06 08    	jmp    *0x80671e4
 8049426:	68 98 01 00 00       	push   $0x198
 804942b:	e9 b0 fc ff ff       	jmp    80490e0 <_init+0x24>

08049430 <__uflow@plt>:
 8049430:	ff 25 e8 71 06 08    	jmp    *0x80671e8
 8049436:	68 a0 01 00 00       	push   $0x1a0
 804943b:	e9 a0 fc ff ff       	jmp    80490e0 <_init+0x24>

08049440 <nl_langinfo@plt>:
 8049440:	ff 25 ec 71 06 08    	jmp    *0x80671ec
 8049446:	68 a8 01 00 00       	push   $0x1a8
 804944b:	e9 90 fc ff ff       	jmp    80490e0 <_init+0x24>

08049450 <setlocale@plt>:
 8049450:	ff 25 f0 71 06 08    	jmp    *0x80671f0
 8049456:	68 b0 01 00 00       	push   $0x1b0
 804945b:	e9 80 fc ff ff       	jmp    80490e0 <_init+0x24>

08049460 <strrchr@plt>:
 8049460:	ff 25 f4 71 06 08    	jmp    *0x80671f4
 8049466:	68 b8 01 00 00       	push   $0x1b8
 804946b:	e9 70 fc ff ff       	jmp    80490e0 <_init+0x24>

08049470 <__overflow@plt>:
 8049470:	ff 25 f8 71 06 08    	jmp    *0x80671f8
 8049476:	68 c0 01 00 00       	push   $0x1c0
 804947b:	e9 60 fc ff ff       	jmp    80490e0 <_init+0x24>

08049480 <atoi@plt>:
 8049480:	ff 25 fc 71 06 08    	jmp    *0x80671fc
 8049486:	68 c8 01 00 00       	push   $0x1c8
 804948b:	e9 50 fc ff ff       	jmp    80490e0 <_init+0x24>

08049490 <lseek64@plt>:
 8049490:	ff 25 00 72 06 08    	jmp    *0x8067200
 8049496:	68 d0 01 00 00       	push   $0x1d0
 804949b:	e9 40 fc ff ff       	jmp    80490e0 <_init+0x24>

080494a0 <__fprintf_chk@plt>:
 80494a0:	ff 25 04 72 06 08    	jmp    *0x8067204
 80494a6:	68 d8 01 00 00       	push   $0x1d8
 80494ab:	e9 30 fc ff ff       	jmp    80490e0 <_init+0x24>

080494b0 <bindtextdomain@plt>:
 80494b0:	ff 25 08 72 06 08    	jmp    *0x8067208
 80494b6:	68 e0 01 00 00       	push   $0x1e0
 80494bb:	e9 20 fc ff ff       	jmp    80490e0 <_init+0x24>

080494c0 <posix_fadvise64@plt>:
 80494c0:	ff 25 0c 72 06 08    	jmp    *0x806720c
 80494c6:	68 e8 01 00 00       	push   $0x1e8
 80494cb:	e9 10 fc ff ff       	jmp    80490e0 <_init+0x24>

080494d0 <strncmp@plt>:
 80494d0:	ff 25 10 72 06 08    	jmp    *0x8067210
 80494d6:	68 f0 01 00 00       	push   $0x1f0
 80494db:	e9 00 fc ff ff       	jmp    80490e0 <_init+0x24>

080494e0 <abort@plt>:
 80494e0:	ff 25 14 72 06 08    	jmp    *0x8067214
 80494e6:	68 f8 01 00 00       	push   $0x1f8
 80494eb:	e9 f0 fb ff ff       	jmp    80490e0 <_init+0x24>

080494f0 <close@plt>:
 80494f0:	ff 25 18 72 06 08    	jmp    *0x8067218
 80494f6:	68 00 02 00 00       	push   $0x200
 80494fb:	e9 e0 fb ff ff       	jmp    80490e0 <_init+0x24>

08049500 <__assert_fail@plt>:
 8049500:	ff 25 1c 72 06 08    	jmp    *0x806721c
 8049506:	68 08 02 00 00       	push   $0x208
 804950b:	e9 d0 fb ff ff       	jmp    80490e0 <_init+0x24>

08049510 <__ctype_b_loc@plt>:
 8049510:	ff 25 20 72 06 08    	jmp    *0x8067220
 8049516:	68 10 02 00 00       	push   $0x210
 804951b:	e9 c0 fb ff ff       	jmp    80490e0 <_init+0x24>

08049520 <calloc@plt>:
 8049520:	ff 25 24 72 06 08    	jmp    *0x8067224
 8049526:	68 18 02 00 00       	push   $0x218
 804952b:	e9 b0 fb ff ff       	jmp    80490e0 <_init+0x24>

Disassembly of section .text:

08049530 <main>:
;
}

int
main (int argc, char **argv)
{
 8049530:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049534:	89 3c 24             	mov    %edi,(%esp)
 8049537:	89 54 24 04          	mov    %edx,0x4(%esp)
 804953b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804953f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049543:	b9 81 14 00 00       	mov    $0x1481,%ecx
 8049548:	e8 b3 5f 00 00       	call   804f500 <__afl_maybe_log>
 804954d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049551:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049555:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049559:	8b 3c 24             	mov    (%esp),%edi
 804955c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049560:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8049564:	83 e4 f0             	and    $0xfffffff0,%esp
 8049567:	ff 71 fc             	pushl  -0x4(%ecx)
 804956a:	55                   	push   %ebp
 804956b:	89 e5                	mov    %esp,%ebp
 804956d:	57                   	push   %edi
 804956e:	56                   	push   %esi
 804956f:	53                   	push   %ebx
 8049570:	51                   	push   %ecx
 8049571:	83 ec 34             	sub    $0x34,%esp
 8049574:	8b 59 04             	mov    0x4(%ecx),%ebx
 8049577:	8b 31                	mov    (%ecx),%esi
  /* True if --decode has been given and we should decode data. */
  bool decode = false;
  /* True if we should ignore non-base64-alphabetic characters. */
  bool ignore_garbage = false;
  /* Wrap encoded base64 data around the 76:th column, by default. */
  uintmax_t wrap_column = 76;
 8049579:	c7 45 e0 4c 00 00 00 	movl   $0x4c,-0x20(%ebp)
 8049580:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
 8049587:	ff 33                	pushl  (%ebx)
 8049589:	e8 02 a5 00 00       	call   8053a90 <set_program_name>
  setlocale (LC_ALL, "");
 804958e:	58                   	pop    %eax
 804958f:	5a                   	pop    %edx
 8049590:	68 fd 3b 06 08       	push   $0x8063bfd
 8049595:	6a 06                	push   $0x6
 8049597:	e8 b4 fe ff ff       	call   8049450 <setlocale@plt>
  bindtextdomain (PACKAGE, LOCALEDIR);
 804959c:	59                   	pop    %ecx
 804959d:	5f                   	pop    %edi
 804959e:	68 10 31 06 08       	push   $0x8063110
 80495a3:	68 02 31 06 08       	push   $0x8063102
  int opt;
  FILE *input_fh;
  const char *infile;

  /* True if --decode has been given and we should decode data. */
  bool decode = false;
 80495a8:	31 ff                	xor    %edi,%edi
  uintmax_t wrap_column = 76;

  initialize_main (&argc, &argv);
  set_program_name (argv[0]);
  setlocale (LC_ALL, "");
  bindtextdomain (PACKAGE, LOCALEDIR);
 80495aa:	e8 01 ff ff ff       	call   80494b0 <bindtextdomain@plt>
  textdomain (PACKAGE);
 80495af:	c7 04 24 02 31 06 08 	movl   $0x8063102,(%esp)
 80495b6:	e8 45 fc ff ff       	call   8049200 <textdomain@plt>

  atexit (close_stdout);
 80495bb:	c7 04 24 40 34 05 08 	movl   $0x8053440,(%esp)
 80495c2:	e8 29 9a 01 00       	call   8062ff0 <atexit>
 80495c7:	83 c4 10             	add    $0x10,%esp
  const char *infile;

  /* True if --decode has been given and we should decode data. */
  bool decode = false;
  /* True if we should ignore non-base64-alphabetic characters. */
  bool ignore_garbage = false;
 80495ca:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
 80495ce:	66 90                	xchg   %ax,%ax
  atexit (close_stdout);

  while (1)
    {
        {
            int temp_1 = !((opt = getopt_long(argc, argv, "diw:", long_options, ((void *)0))) != -1);
 80495d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80495d4:	89 3c 24             	mov    %edi,(%esp)
 80495d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80495db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80495df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80495e3:	b9 34 ae 00 00       	mov    $0xae34,%ecx
 80495e8:	e8 13 5f 00 00       	call   804f500 <__afl_maybe_log>
 80495ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80495f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80495f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80495f9:	8b 3c 24             	mov    (%esp),%edi
 80495fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049600:	83 ec 0c             	sub    $0xc,%esp
 8049603:	6a 00                	push   $0x0
 8049605:	68 40 36 06 08       	push   $0x8063640
 804960a:	68 28 31 06 08       	push   $0x8063128
 804960f:	53                   	push   %ebx
 8049610:	56                   	push   %esi
 8049611:	e8 1a fd ff ff       	call   8049330 <getopt_long@plt>
// ABS Label 288
if(temp_1 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 288);
}
if (temp_1)
 8049616:	83 c4 20             	add    $0x20,%esp
 8049619:	83 f8 ff             	cmp    $0xffffffff,%eax
 804961c:	0f 84 44 03 00 00    	je     8049966 <main+0x436>
 8049622:	66 90                	xchg   %ax,%ax
 8049624:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049628:	89 3c 24             	mov    %edi,(%esp)
 804962b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804962f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049633:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049637:	b9 d0 79 00 00       	mov    $0x79d0,%ecx
 804963c:	e8 bf 5e 00 00       	call   804f500 <__afl_maybe_log>
 8049641:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049645:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049649:	8b 54 24 04          	mov    0x4(%esp),%edx
 804964d:	8b 3c 24             	mov    (%esp),%edi
 8049650:	8d 64 24 10          	lea    0x10(%esp),%esp
                break;
        }
        switch (opt) {
 8049654:	83 f8 64             	cmp    $0x64,%eax
 8049657:	0f 84 cd 02 00 00    	je     804992a <main+0x3fa>
 804965d:	8d 76 00             	lea    0x0(%esi),%esi
 8049660:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049664:	89 3c 24             	mov    %edi,(%esp)
 8049667:	89 54 24 04          	mov    %edx,0x4(%esp)
 804966b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804966f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049673:	b9 42 8b 00 00       	mov    $0x8b42,%ecx
 8049678:	e8 83 5e 00 00       	call   804f500 <__afl_maybe_log>
 804967d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049681:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049685:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049689:	8b 3c 24             	mov    (%esp),%edi
 804968c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049690:	0f 8f ba 00 00 00    	jg     8049750 <main+0x220>
 8049696:	66 90                	xchg   %ax,%ax
 8049698:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804969c:	89 3c 24             	mov    %edi,(%esp)
 804969f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80496a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80496a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80496ab:	b9 a5 34 00 00       	mov    $0x34a5,%ecx
 80496b0:	e8 4b 5e 00 00       	call   804f500 <__afl_maybe_log>
 80496b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80496b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80496bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80496c1:	8b 3c 24             	mov    (%esp),%edi
 80496c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80496c8:	3d 7d ff ff ff       	cmp    $0xffffff7d,%eax
 80496cd:	0f 84 81 01 00 00    	je     8049854 <main+0x324>
 80496d3:	90                   	nop
 80496d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80496d8:	89 3c 24             	mov    %edi,(%esp)
 80496db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80496df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80496e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80496e7:	b9 78 1a 00 00       	mov    $0x1a78,%ecx
 80496ec:	e8 0f 5e 00 00       	call   804f500 <__afl_maybe_log>
 80496f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80496f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80496f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80496fd:	8b 3c 24             	mov    (%esp),%edi
 8049700:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049704:	3d 7e ff ff ff       	cmp    $0xffffff7e,%eax
 8049709:	0f 85 de 01 00 00    	jne    80498ed <main+0x3bd>
 804970f:	90                   	nop
 8049710:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049714:	89 3c 24             	mov    %edi,(%esp)
 8049717:	89 54 24 04          	mov    %edx,0x4(%esp)
 804971b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804971f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049723:	b9 d7 94 00 00       	mov    $0x94d7,%ecx
 8049728:	e8 d3 5d 00 00       	call   804f500 <__afl_maybe_log>
 804972d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049731:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049735:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049739:	8b 3c 24             	mov    (%esp),%edi
 804973c:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
          case 'i':
            ignore_garbage = 1;
            break;
          case GETOPT_HELP_CHAR:
            usage(0);
 8049740:	83 ec 0c             	sub    $0xc,%esp
 8049743:	6a 00                	push   $0x0
 8049745:	e8 96 54 00 00       	call   804ebe0 <usage>
 804974a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
	report_label_coverage("ABS", 288);
}
if (temp_1)
                break;
        }
        switch (opt) {
 8049750:	83 f8 69             	cmp    $0x69,%eax
 8049753:	0f 84 59 01 00 00    	je     80498b2 <main+0x382>
 8049759:	8d 76 00             	lea    0x0(%esi),%esi
 804975c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049760:	89 3c 24             	mov    %edi,(%esp)
 8049763:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049767:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804976b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804976f:	b9 c2 e8 00 00       	mov    $0xe8c2,%ecx
 8049774:	e8 87 5d 00 00       	call   804f500 <__afl_maybe_log>
 8049779:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804977d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049781:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049785:	8b 3c 24             	mov    (%esp),%edi
 8049788:	8d 64 24 10          	lea    0x10(%esp),%esp
 804978c:	83 f8 77             	cmp    $0x77,%eax
 804978f:	0f 85 58 01 00 00    	jne    80498ed <main+0x3bd>
 8049795:	8d 76 00             	lea    0x0(%esi),%esi
 8049798:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804979c:	89 3c 24             	mov    %edi,(%esp)
 804979f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80497a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80497a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80497ab:	b9 af 2f 00 00       	mov    $0x2faf,%ecx
 80497b0:	e8 4b 5d 00 00       	call   804f500 <__afl_maybe_log>
 80497b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80497b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80497bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80497c1:	8b 3c 24             	mov    (%esp),%edi
 80497c4:	8d 64 24 10          	lea    0x10(%esp),%esp
          case 'd':
            decode = 1;
            break;
          case 'w':
            if (xstrtoumax(optarg, ((void *)0), 0, &wrap_column, ((void *)0)) != LONGINT_OK)
 80497c8:	8d 45 e0             	lea    -0x20(%ebp),%eax
 80497cb:	83 ec 0c             	sub    $0xc,%esp
 80497ce:	6a 00                	push   $0x0
 80497d0:	50                   	push   %eax
 80497d1:	6a 00                	push   $0x0
 80497d3:	6a 00                	push   $0x0
 80497d5:	ff 35 e0 72 06 08    	pushl  0x80672e0
 80497db:	e8 40 25 01 00       	call   805bd20 <xstrtoumax>
 80497e0:	83 c4 20             	add    $0x20,%esp
 80497e3:	85 c0                	test   %eax,%eax
 80497e5:	0f 84 e3 fd ff ff    	je     80495ce <main+0x9e>
 80497eb:	90                   	nop
 80497ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80497f0:	89 3c 24             	mov    %edi,(%esp)
 80497f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80497f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80497fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80497ff:	b9 1b 32 00 00       	mov    $0x321b,%ecx
 8049804:	e8 f7 5c 00 00       	call   804f500 <__afl_maybe_log>
 8049809:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804980d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049811:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049815:	8b 3c 24             	mov    (%esp),%edi
 8049818:	8d 64 24 10          	lea    0x10(%esp),%esp
                error(1, 0, gettext("invalid wrap size: %s"), quotearg(optarg));
 804981c:	83 ec 0c             	sub    $0xc,%esp
 804981f:	ff 35 e0 72 06 08    	pushl  0x80672e0
 8049825:	e8 56 04 01 00       	call   8059c80 <quotearg>
 804982a:	83 c4 0c             	add    $0xc,%esp
 804982d:	89 45 d0             	mov    %eax,-0x30(%ebp)
 8049830:	6a 05                	push   $0x5
 8049832:	68 2d 31 06 08       	push   $0x806312d
 8049837:	6a 00                	push   $0x0
 8049839:	e8 a2 f9 ff ff       	call   80491e0 <dcgettext@plt>
 804983e:	8b 4d d0             	mov    -0x30(%ebp),%ecx
 8049841:	51                   	push   %ecx
 8049842:	50                   	push   %eax
 8049843:	6a 00                	push   $0x0
 8049845:	6a 01                	push   $0x1
 8049847:	e8 44 fa ff ff       	call   8049290 <error@plt>
 804984c:	83 c4 20             	add    $0x20,%esp
 804984f:	e9 7a fd ff ff       	jmp    80495ce <main+0x9e>
          case GETOPT_HELP_CHAR:
            usage(0);
            break;
            ;
          case GETOPT_VERSION_CHAR:
            version_etc(stdout, "base64", "GNU coreutils", Version, ("Simon Josefsson"), (char *)((void *)0));
 8049854:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049858:	89 3c 24             	mov    %edi,(%esp)
 804985b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804985f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049863:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049867:	b9 a5 b1 00 00       	mov    $0xb1a5,%ecx
 804986c:	e8 8f 5c 00 00       	call   804f500 <__afl_maybe_log>
 8049871:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049875:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049879:	8b 54 24 04          	mov    0x4(%esp),%edx
 804987d:	8b 3c 24             	mov    (%esp),%edi
 8049880:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049884:	50                   	push   %eax
 8049885:	50                   	push   %eax
 8049886:	6a 00                	push   $0x0
 8049888:	68 43 31 06 08       	push   $0x8063143
 804988d:	ff 35 48 72 06 08    	pushl  0x8067248
 8049893:	68 fe 30 06 08       	push   $0x80630fe
 8049898:	68 83 30 06 08       	push   $0x8063083
 804989d:	ff 35 d8 72 06 08    	pushl  0x80672d8
 80498a3:	e8 98 15 01 00       	call   805ae40 <version_etc>
            exit(0);
 80498a8:	83 c4 14             	add    $0x14,%esp
 80498ab:	6a 00                	push   $0x0
 80498ad:	e8 4e fa ff ff       	call   8049300 <exit@plt>
 80498b2:	66 90                	xchg   %ax,%ax
          case 'w':
            if (xstrtoumax(optarg, ((void *)0), 0, &wrap_column, ((void *)0)) != LONGINT_OK)
                error(1, 0, gettext("invalid wrap size: %s"), quotearg(optarg));
            break;
          case 'i':
            ignore_garbage = 1;
 80498b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80498b8:	89 3c 24             	mov    %edi,(%esp)
 80498bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80498bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80498c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80498c7:	b9 5b 50 00 00       	mov    $0x505b,%ecx
 80498cc:	e8 2f 5c 00 00       	call   804f500 <__afl_maybe_log>
 80498d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80498d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80498d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80498dd:	8b 3c 24             	mov    (%esp),%edi
 80498e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80498e4:	c6 45 d7 01          	movb   $0x1,-0x29(%ebp)
 80498e8:	e9 e1 fc ff ff       	jmp    80495ce <main+0x9e>
 80498ed:	8d 76 00             	lea    0x0(%esi),%esi
            version_etc(stdout, "base64", "GNU coreutils", Version, ("Simon Josefsson"), (char *)((void *)0));
            exit(0);
            break;
            ;
          default:
            usage(1);
 80498f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80498f4:	89 3c 24             	mov    %edi,(%esp)
 80498f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80498fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80498ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049903:	b9 c0 d3 00 00       	mov    $0xd3c0,%ecx
 8049908:	e8 f3 5b 00 00       	call   804f500 <__afl_maybe_log>
 804990d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049911:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049915:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049919:	8b 3c 24             	mov    (%esp),%edi
 804991c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049920:	83 ec 0c             	sub    $0xc,%esp
 8049923:	6a 01                	push   $0x1
 8049925:	e8 b6 52 00 00       	call   804ebe0 <usage>
 804992a:	66 90                	xchg   %ax,%ax
if (temp_1)
                break;
        }
        switch (opt) {
          case 'd':
            decode = 1;
 804992c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049930:	89 3c 24             	mov    %edi,(%esp)
 8049933:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049937:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804993b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804993f:	b9 c7 44 00 00       	mov    $0x44c7,%ecx
 8049944:	e8 b7 5b 00 00       	call   804f500 <__afl_maybe_log>
 8049949:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804994d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049951:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049955:	8b 3c 24             	mov    (%esp),%edi
 8049958:	8d 64 24 10          	lea    0x10(%esp),%esp
 804995c:	bf 01 00 00 00       	mov    $0x1,%edi
 8049961:	e9 68 fc ff ff       	jmp    80495ce <main+0x9e>
 8049966:	66 90                	xchg   %ax,%ax
    };


  
// ABS Label 289
if(argc < 0)  {
 8049968:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804996c:	89 3c 24             	mov    %edi,(%esp)
 804996f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049973:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049977:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804997b:	b9 dd bf 00 00       	mov    $0xbfdd,%ecx
 8049980:	e8 7b 5b 00 00       	call   804f500 <__afl_maybe_log>
 8049985:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049989:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804998d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049991:	8b 3c 24             	mov    (%esp),%edi
 8049994:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049998:	85 f6                	test   %esi,%esi
 804999a:	0f 88 c5 0d 00 00    	js     804a765 <main+0x1235>
 80499a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80499a4:	89 3c 24             	mov    %edi,(%esp)
 80499a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80499ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80499af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80499b3:	b9 8c c8 00 00       	mov    $0xc88c,%ecx
 80499b8:	e8 43 5b 00 00       	call   804f500 <__afl_maybe_log>
 80499bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80499c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80499c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80499c9:	8b 3c 24             	mov    (%esp),%edi
 80499cc:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 289);
}
// ABS Label 290
if(optind < 0)  {
 80499d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80499d4:	89 3c 24             	mov    %edi,(%esp)
 80499d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80499db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80499df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80499e3:	b9 18 7c 00 00       	mov    $0x7c18,%ecx
 80499e8:	e8 13 5b 00 00       	call   804f500 <__afl_maybe_log>
 80499ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80499f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80499f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80499f9:	8b 3c 24             	mov    (%esp),%edi
 80499fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049a00:	83 3d cc 72 06 08 00 	cmpl   $0x0,0x80672cc
 8049a07:	0f 88 0c 0d 00 00    	js     804a719 <main+0x11e9>
 8049a0d:	8d 76 00             	lea    0x0(%esi),%esi
 8049a10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049a14:	89 3c 24             	mov    %edi,(%esp)
 8049a17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049a1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049a1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049a23:	b9 0e 6e 00 00       	mov    $0x6e0e,%ecx
 8049a28:	e8 d3 5a 00 00       	call   804f500 <__afl_maybe_log>
 8049a2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049a31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049a35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049a39:	8b 3c 24             	mov    (%esp),%edi
 8049a3c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 290);
}

// AOR Label 291
if(argc / optind != argc - optind)  {
 8049a40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049a44:	89 3c 24             	mov    %edi,(%esp)
 8049a47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049a4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049a4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049a53:	b9 8e bf 00 00       	mov    $0xbf8e,%ecx
 8049a58:	e8 a3 5a 00 00       	call   804f500 <__afl_maybe_log>
 8049a5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049a61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049a65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049a69:	8b 3c 24             	mov    (%esp),%edi
 8049a6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049a70:	8b 0d cc 72 06 08    	mov    0x80672cc,%ecx
 8049a76:	89 f0                	mov    %esi,%eax
 8049a78:	99                   	cltd   
 8049a79:	f7 f9                	idiv   %ecx
 8049a7b:	89 f2                	mov    %esi,%edx
 8049a7d:	29 ca                	sub    %ecx,%edx
 8049a7f:	39 d0                	cmp    %edx,%eax
 8049a81:	74 4b                	je     8049ace <main+0x59e>
 8049a83:	90                   	nop
 8049a84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049a88:	89 3c 24             	mov    %edi,(%esp)
 8049a8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049a8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049a93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049a97:	b9 5b 94 00 00       	mov    $0x945b,%ecx
 8049a9c:	e8 5f 5a 00 00       	call   804f500 <__afl_maybe_log>
 8049aa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049aa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049aa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049aad:	8b 3c 24             	mov    (%esp),%edi
 8049ab0:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("AOR", 291);
 8049ab4:	51                   	push   %ecx
 8049ab5:	51                   	push   %ecx
 8049ab6:	68 23 01 00 00       	push   $0x123
 8049abb:	68 58 30 06 08       	push   $0x8063058
 8049ac0:	e8 eb 0e 00 00       	call   804a9b0 <report_label_coverage>
 8049ac5:	8b 0d cc 72 06 08    	mov    0x80672cc,%ecx
 8049acb:	83 c4 10             	add    $0x10,%esp
 8049ace:	66 90                	xchg   %ax,%ax
}
// AOR Label 292
if(argc + optind != argc - optind)  {
 8049ad0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ad4:	89 3c 24             	mov    %edi,(%esp)
 8049ad7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049adb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049adf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049ae3:	b9 33 0a 00 00       	mov    $0xa33,%ecx
 8049ae8:	e8 13 5a 00 00       	call   804f500 <__afl_maybe_log>
 8049aed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049af1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049af5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049af9:	8b 3c 24             	mov    (%esp),%edi
 8049afc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049b00:	8d 14 0e             	lea    (%esi,%ecx,1),%edx
 8049b03:	89 f0                	mov    %esi,%eax
 8049b05:	29 c8                	sub    %ecx,%eax
 8049b07:	39 c2                	cmp    %eax,%edx
 8049b09:	74 4b                	je     8049b56 <main+0x626>
 8049b0b:	90                   	nop
 8049b0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049b10:	89 3c 24             	mov    %edi,(%esp)
 8049b13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049b17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049b1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049b1f:	b9 c3 85 00 00       	mov    $0x85c3,%ecx
 8049b24:	e8 d7 59 00 00       	call   804f500 <__afl_maybe_log>
 8049b29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049b2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049b31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049b35:	8b 3c 24             	mov    (%esp),%edi
 8049b38:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("AOR", 292);
 8049b3c:	52                   	push   %edx
 8049b3d:	52                   	push   %edx
 8049b3e:	68 24 01 00 00       	push   $0x124
 8049b43:	68 58 30 06 08       	push   $0x8063058
 8049b48:	e8 63 0e 00 00       	call   804a9b0 <report_label_coverage>
 8049b4d:	8b 0d cc 72 06 08    	mov    0x80672cc,%ecx
 8049b53:	83 c4 10             	add    $0x10,%esp
 8049b56:	66 90                	xchg   %ax,%ax
}
// AOR Label 293
if(argc * optind != argc - optind)  {
 8049b58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049b5c:	89 3c 24             	mov    %edi,(%esp)
 8049b5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049b63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049b67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049b6b:	b9 41 bf 00 00       	mov    $0xbf41,%ecx
 8049b70:	e8 8b 59 00 00       	call   804f500 <__afl_maybe_log>
 8049b75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049b79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049b7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049b81:	8b 3c 24             	mov    (%esp),%edi
 8049b84:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049b88:	89 f2                	mov    %esi,%edx
 8049b8a:	89 f0                	mov    %esi,%eax
 8049b8c:	0f af d1             	imul   %ecx,%edx
 8049b8f:	29 c8                	sub    %ecx,%eax
 8049b91:	39 c2                	cmp    %eax,%edx
 8049b93:	74 47                	je     8049bdc <main+0x6ac>
 8049b95:	8d 76 00             	lea    0x0(%esi),%esi
 8049b98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049b9c:	89 3c 24             	mov    %edi,(%esp)
 8049b9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049ba3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049ba7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049bab:	b9 75 fa 00 00       	mov    $0xfa75,%ecx
 8049bb0:	e8 4b 59 00 00       	call   804f500 <__afl_maybe_log>
 8049bb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049bb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049bbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049bc1:	8b 3c 24             	mov    (%esp),%edi
 8049bc4:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("AOR", 293);
 8049bc8:	50                   	push   %eax
 8049bc9:	50                   	push   %eax
 8049bca:	68 25 01 00 00       	push   $0x125
 8049bcf:	68 58 30 06 08       	push   $0x8063058
 8049bd4:	e8 d7 0d 00 00       	call   804a9b0 <report_label_coverage>
 8049bd9:	83 c4 10             	add    $0x10,%esp
}

// ROR Label 294
if((argc - optind <= 1) != (argc - optind > 1))  {
 8049bdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049be0:	89 3c 24             	mov    %edi,(%esp)
 8049be3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049be7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049beb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049bef:	b9 9b a4 00 00       	mov    $0xa49b,%ecx
 8049bf4:	e8 07 59 00 00       	call   804f500 <__afl_maybe_log>
 8049bf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049bfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049c01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049c05:	8b 3c 24             	mov    (%esp),%edi
 8049c08:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049c0c:	89 f1                	mov    %esi,%ecx
 8049c0e:	2b 0d cc 72 06 08    	sub    0x80672cc,%ecx
 8049c14:	83 e9 01             	sub    $0x1,%ecx
 8049c17:	0f 9e c2             	setle  %dl
 8049c1a:	0f 9f c0             	setg   %al
 8049c1d:	38 c2                	cmp    %al,%dl
 8049c1f:	74 47                	je     8049c68 <main+0x738>
 8049c21:	8d 76 00             	lea    0x0(%esi),%esi
 8049c24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049c28:	89 3c 24             	mov    %edi,(%esp)
 8049c2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049c2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049c33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049c37:	b9 dc 67 00 00       	mov    $0x67dc,%ecx
 8049c3c:	e8 bf 58 00 00       	call   804f500 <__afl_maybe_log>
 8049c41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049c45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049c49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049c4d:	8b 3c 24             	mov    (%esp),%edi
 8049c50:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 294);
 8049c54:	50                   	push   %eax
 8049c55:	50                   	push   %eax
 8049c56:	68 26 01 00 00       	push   $0x126
 8049c5b:	68 48 30 06 08       	push   $0x8063048
 8049c60:	e8 4b 0d 00 00       	call   804a9b0 <report_label_coverage>
 8049c65:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 295
if((argc - optind < 1) != (argc - optind > 1))  {
 8049c68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049c6c:	89 3c 24             	mov    %edi,(%esp)
 8049c6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049c73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049c77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049c7b:	b9 55 ce 00 00       	mov    $0xce55,%ecx
 8049c80:	e8 7b 58 00 00       	call   804f500 <__afl_maybe_log>
 8049c85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049c89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049c8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049c91:	8b 3c 24             	mov    (%esp),%edi
 8049c94:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049c98:	89 f1                	mov    %esi,%ecx
 8049c9a:	2b 0d cc 72 06 08    	sub    0x80672cc,%ecx
 8049ca0:	85 c9                	test   %ecx,%ecx
 8049ca2:	0f 9e c2             	setle  %dl
 8049ca5:	83 e9 01             	sub    $0x1,%ecx
 8049ca8:	0f 9f c0             	setg   %al
 8049cab:	38 c2                	cmp    %al,%dl
 8049cad:	74 45                	je     8049cf4 <main+0x7c4>
 8049caf:	90                   	nop
 8049cb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049cb4:	89 3c 24             	mov    %edi,(%esp)
 8049cb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049cbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049cbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049cc3:	b9 18 e7 00 00       	mov    $0xe718,%ecx
 8049cc8:	e8 33 58 00 00       	call   804f500 <__afl_maybe_log>
 8049ccd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049cd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049cd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049cd9:	8b 3c 24             	mov    (%esp),%edi
 8049cdc:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 295);
 8049ce0:	50                   	push   %eax
 8049ce1:	50                   	push   %eax
 8049ce2:	68 27 01 00 00       	push   $0x127
 8049ce7:	68 48 30 06 08       	push   $0x8063048
 8049cec:	e8 bf 0c 00 00       	call   804a9b0 <report_label_coverage>
 8049cf1:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 296
if((argc - optind >= 1) != (argc - optind > 1))  {
 8049cf4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049cf8:	89 3c 24             	mov    %edi,(%esp)
 8049cfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049cff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049d03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049d07:	b9 a4 fc 00 00       	mov    $0xfca4,%ecx
 8049d0c:	e8 ef 57 00 00       	call   804f500 <__afl_maybe_log>
 8049d11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049d15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049d19:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049d1d:	8b 3c 24             	mov    (%esp),%edi
 8049d20:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049d24:	89 f1                	mov    %esi,%ecx
 8049d26:	2b 0d cc 72 06 08    	sub    0x80672cc,%ecx
 8049d2c:	85 c9                	test   %ecx,%ecx
 8049d2e:	0f 9f c2             	setg   %dl
 8049d31:	83 e9 01             	sub    $0x1,%ecx
 8049d34:	0f 9f c0             	setg   %al
 8049d37:	38 c2                	cmp    %al,%dl
 8049d39:	74 45                	je     8049d80 <main+0x850>
 8049d3b:	90                   	nop
 8049d3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049d40:	89 3c 24             	mov    %edi,(%esp)
 8049d43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049d47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049d4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049d4f:	b9 20 56 00 00       	mov    $0x5620,%ecx
 8049d54:	e8 a7 57 00 00       	call   804f500 <__afl_maybe_log>
 8049d59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049d5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049d61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049d65:	8b 3c 24             	mov    (%esp),%edi
 8049d68:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 296);
 8049d6c:	50                   	push   %eax
 8049d6d:	50                   	push   %eax
 8049d6e:	68 28 01 00 00       	push   $0x128
 8049d73:	68 48 30 06 08       	push   $0x8063048
 8049d78:	e8 33 0c 00 00       	call   804a9b0 <report_label_coverage>
 8049d7d:	83 c4 10             	add    $0x10,%esp
}
if (argc - optind > 1)
 8049d80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049d84:	89 3c 24             	mov    %edi,(%esp)
 8049d87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049d8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049d8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049d93:	b9 c4 f9 00 00       	mov    $0xf9c4,%ecx
 8049d98:	e8 63 57 00 00       	call   804f500 <__afl_maybe_log>
 8049d9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049da1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049da5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049da9:	8b 3c 24             	mov    (%esp),%edi
 8049dac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049db0:	8b 0d cc 72 06 08    	mov    0x80672cc,%ecx
 8049db6:	89 f2                	mov    %esi,%edx
 8049db8:	29 ca                	sub    %ecx,%edx
 8049dba:	83 ea 01             	sub    $0x1,%edx
 8049dbd:	0f 8f 8f 0a 00 00    	jg     804a852 <main+0x1322>
 8049dc3:	90                   	nop
 8049dc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049dc8:	89 3c 24             	mov    %edi,(%esp)
 8049dcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049dcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049dd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049dd7:	b9 c0 b0 00 00       	mov    $0xb0c0,%ecx
 8049ddc:	e8 1f 57 00 00       	call   804f500 <__afl_maybe_log>
 8049de1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049de5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049de9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049ded:	8b 3c 24             	mov    (%esp),%edi
 8049df0:	8d 64 24 10          	lea    0x10(%esp),%esp
      usage (EXIT_FAILURE);
    }

  
// ABS Label 297
if(argc < 0)  {
 8049df4:	85 f6                	test   %esi,%esi
 8049df6:	0f 88 d1 08 00 00    	js     804a6cd <main+0x119d>
 8049dfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049e00:	89 3c 24             	mov    %edi,(%esp)
 8049e03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049e07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049e0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049e0f:	b9 f8 52 00 00       	mov    $0x52f8,%ecx
 8049e14:	e8 e7 56 00 00       	call   804f500 <__afl_maybe_log>
 8049e19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049e1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049e21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049e25:	8b 3c 24             	mov    (%esp),%edi
 8049e28:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 297);
}
// ABS Label 298
if(optind < 0)  {
 8049e2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049e30:	89 3c 24             	mov    %edi,(%esp)
 8049e33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049e37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049e3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049e3f:	b9 93 d5 00 00       	mov    $0xd593,%ecx
 8049e44:	e8 b7 56 00 00       	call   804f500 <__afl_maybe_log>
 8049e49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049e4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049e51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049e55:	8b 3c 24             	mov    (%esp),%edi
 8049e58:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049e5c:	83 3d cc 72 06 08 00 	cmpl   $0x0,0x80672cc
 8049e63:	0f 88 18 08 00 00    	js     804a681 <main+0x1151>
 8049e69:	8d 76 00             	lea    0x0(%esi),%esi
 8049e6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049e70:	89 3c 24             	mov    %edi,(%esp)
 8049e73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049e77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049e7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049e7f:	b9 8a 0e 00 00       	mov    $0xe8a,%ecx
 8049e84:	e8 77 56 00 00       	call   804f500 <__afl_maybe_log>
 8049e89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049e8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049e91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049e95:	8b 3c 24             	mov    (%esp),%edi
 8049e98:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 298);
}

// ROR Label 299
if((optind <= argc) != (optind < argc))  {
 8049e9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ea0:	89 3c 24             	mov    %edi,(%esp)
 8049ea3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049ea7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049eab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049eaf:	b9 72 03 00 00       	mov    $0x372,%ecx
 8049eb4:	e8 47 56 00 00       	call   804f500 <__afl_maybe_log>
 8049eb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049ebd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049ec1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049ec5:	8b 3c 24             	mov    (%esp),%edi
 8049ec8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049ecc:	a1 cc 72 06 08       	mov    0x80672cc,%eax
 8049ed1:	39 f0                	cmp    %esi,%eax
 8049ed3:	0f 9e c1             	setle  %cl
 8049ed6:	39 c6                	cmp    %eax,%esi
 8049ed8:	0f 9f c2             	setg   %dl
 8049edb:	38 d1                	cmp    %dl,%cl
 8049edd:	74 4a                	je     8049f29 <main+0x9f9>
 8049edf:	90                   	nop
 8049ee0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ee4:	89 3c 24             	mov    %edi,(%esp)
 8049ee7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049eeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049eef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049ef3:	b9 f1 6b 00 00       	mov    $0x6bf1,%ecx
 8049ef8:	e8 03 56 00 00       	call   804f500 <__afl_maybe_log>
 8049efd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049f01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049f05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f09:	8b 3c 24             	mov    (%esp),%edi
 8049f0c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 299);
 8049f10:	51                   	push   %ecx
 8049f11:	51                   	push   %ecx
 8049f12:	68 2b 01 00 00       	push   $0x12b
 8049f17:	68 48 30 06 08       	push   $0x8063048
 8049f1c:	e8 8f 0a 00 00       	call   804a9b0 <report_label_coverage>
 8049f21:	a1 cc 72 06 08       	mov    0x80672cc,%eax
 8049f26:	83 c4 10             	add    $0x10,%esp
 8049f29:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 300
if((optind > argc) != (optind < argc))  {
 8049f2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049f30:	89 3c 24             	mov    %edi,(%esp)
 8049f33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049f37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049f3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049f3f:	b9 24 6d 00 00       	mov    $0x6d24,%ecx
 8049f44:	e8 b7 55 00 00       	call   804f500 <__afl_maybe_log>
 8049f49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049f4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049f51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f55:	8b 3c 24             	mov    (%esp),%edi
 8049f58:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049f5c:	39 f0                	cmp    %esi,%eax
 8049f5e:	0f 9f c1             	setg   %cl
 8049f61:	39 c6                	cmp    %eax,%esi
 8049f63:	0f 9f c2             	setg   %dl
 8049f66:	38 d1                	cmp    %dl,%cl
 8049f68:	74 4b                	je     8049fb5 <main+0xa85>
 8049f6a:	66 90                	xchg   %ax,%ax
 8049f6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049f70:	89 3c 24             	mov    %edi,(%esp)
 8049f73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049f77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049f7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049f7f:	b9 ba f7 00 00       	mov    $0xf7ba,%ecx
 8049f84:	e8 77 55 00 00       	call   804f500 <__afl_maybe_log>
 8049f89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049f8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049f91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049f95:	8b 3c 24             	mov    (%esp),%edi
 8049f98:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 300);
 8049f9c:	52                   	push   %edx
 8049f9d:	52                   	push   %edx
 8049f9e:	68 2c 01 00 00       	push   $0x12c
 8049fa3:	68 48 30 06 08       	push   $0x8063048
 8049fa8:	e8 03 0a 00 00       	call   804a9b0 <report_label_coverage>
 8049fad:	a1 cc 72 06 08       	mov    0x80672cc,%eax
 8049fb2:	83 c4 10             	add    $0x10,%esp
 8049fb5:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 301
if((optind >= argc) != (optind < argc))  {
 8049fb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049fbc:	89 3c 24             	mov    %edi,(%esp)
 8049fbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8049fc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049fc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8049fcb:	b9 23 1a 00 00       	mov    $0x1a23,%ecx
 8049fd0:	e8 2b 55 00 00       	call   804f500 <__afl_maybe_log>
 8049fd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8049fd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8049fdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049fe1:	8b 3c 24             	mov    (%esp),%edi
 8049fe4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8049fe8:	39 f0                	cmp    %esi,%eax
 8049fea:	0f 9d c1             	setge  %cl
 8049fed:	39 c6                	cmp    %eax,%esi
 8049fef:	0f 9f c2             	setg   %dl
 8049ff2:	38 d1                	cmp    %dl,%cl
 8049ff4:	74 4b                	je     804a041 <main+0xb11>
 8049ff6:	66 90                	xchg   %ax,%ax
 8049ff8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8049ffc:	89 3c 24             	mov    %edi,(%esp)
 8049fff:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a003:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a007:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a00b:	b9 2a 94 00 00       	mov    $0x942a,%ecx
 804a010:	e8 eb 54 00 00       	call   804f500 <__afl_maybe_log>
 804a015:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a019:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a01d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a021:	8b 3c 24             	mov    (%esp),%edi
 804a024:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 301);
 804a028:	50                   	push   %eax
 804a029:	50                   	push   %eax
 804a02a:	68 2d 01 00 00       	push   $0x12d
 804a02f:	68 48 30 06 08       	push   $0x8063048
 804a034:	e8 77 09 00 00       	call   804a9b0 <report_label_coverage>
 804a039:	a1 cc 72 06 08       	mov    0x80672cc,%eax
 804a03e:	83 c4 10             	add    $0x10,%esp
 804a041:	8d 76 00             	lea    0x0(%esi),%esi
}
if (optind < argc)
 804a044:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a048:	89 3c 24             	mov    %edi,(%esp)
 804a04b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a04f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a053:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a057:	b9 96 f2 00 00       	mov    $0xf296,%ecx
 804a05c:	e8 9f 54 00 00       	call   804f500 <__afl_maybe_log>
 804a061:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a065:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a069:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a06d:	8b 3c 24             	mov    (%esp),%edi
 804a070:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a074:	39 c6                	cmp    %eax,%esi
    infile = argv[optind];
  else
    infile = "-";
 804a076:	c7 45 d0 4a 38 06 08 	movl   $0x806384a,-0x30(%ebp)
// ROR Label 301
if((optind >= argc) != (optind < argc))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 301);
}
if (optind < argc)
 804a07d:	7e 37                	jle    804a0b6 <main+0xb86>
 804a07f:	90                   	nop
 804a080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a084:	89 3c 24             	mov    %edi,(%esp)
 804a087:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a08b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a08f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a093:	b9 36 3a 00 00       	mov    $0x3a36,%ecx
 804a098:	e8 63 54 00 00       	call   804f500 <__afl_maybe_log>
 804a09d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a0a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a0a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a0a9:	8b 3c 24             	mov    (%esp),%edi
 804a0ac:	8d 64 24 10          	lea    0x10(%esp),%esp
    infile = argv[optind];
 804a0b0:	8b 1c 83             	mov    (%ebx,%eax,4),%ebx
 804a0b3:	89 5d d0             	mov    %ebx,-0x30(%ebp)
 804a0b6:	66 90                	xchg   %ax,%ax

  
// MCC Label 302
if(( 1 ) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 302);
 804a0b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a0bc:	89 3c 24             	mov    %edi,(%esp)
 804a0bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a0c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a0c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a0cb:	b9 95 04 00 00       	mov    $0x495,%ecx
 804a0d0:	e8 2b 54 00 00       	call   804f500 <__afl_maybe_log>
 804a0d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a0d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a0dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a0e1:	8b 3c 24             	mov    (%esp),%edi
 804a0e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a0e8:	50                   	push   %eax
 804a0e9:	50                   	push   %eax
 804a0ea:	68 2e 01 00 00       	push   $0x12e
 804a0ef:	68 64 30 06 08       	push   $0x8063064
 804a0f4:	e8 b7 08 00 00       	call   804a9b0 <report_label_coverage>
}
if (STREQ (infile, "-"))
 804a0f9:	8b 75 d0             	mov    -0x30(%ebp),%esi
 804a0fc:	83 c4 10             	add    $0x10,%esp
 804a0ff:	80 3e 2d             	cmpb   $0x2d,(%esi)
 804a102:	0f 84 cd 03 00 00    	je     804a4d5 <main+0xfa5>
 804a108:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a10c:	89 3c 24             	mov    %edi,(%esp)
 804a10f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a113:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a117:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a11b:	b9 8d 05 00 00       	mov    $0x58d,%ecx
 804a120:	e8 db 53 00 00       	call   804f500 <__afl_maybe_log>
 804a125:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a129:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a12d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a131:	8b 3c 24             	mov    (%esp),%edi
 804a134:	8d 64 24 10          	lea    0x10(%esp),%esp
        xfreopen (NULL, "rb", stdin);
      input_fh = stdin;
    }
  else
    {
      input_fh = fopen (infile, "rb");
 804a138:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a13c:	89 3c 24             	mov    %edi,(%esp)
 804a13f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a143:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a147:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a14b:	b9 5c f3 00 00       	mov    $0xf35c,%ecx
 804a150:	e8 ab 53 00 00       	call   804f500 <__afl_maybe_log>
 804a155:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a159:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a15d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a161:	8b 3c 24             	mov    (%esp),%edi
 804a164:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a168:	50                   	push   %eax
 804a169:	50                   	push   %eax
 804a16a:	68 64 31 06 08       	push   $0x8063164
 804a16f:	ff 75 d0             	pushl  -0x30(%ebp)
 804a172:	e8 29 f2 ff ff       	call   80493a0 <fopen@plt>
asm volatile (""::: "memory");
	report_label_coverage("ABS", 303);
}

// ROR Label 304
if((input_fh != ((void *)0)) != (input_fh == ((void *)0)))  {
 804a177:	83 c4 10             	add    $0x10,%esp
 804a17a:	85 c0                	test   %eax,%eax
        xfreopen (NULL, "rb", stdin);
      input_fh = stdin;
    }
  else
    {
      input_fh = fopen (infile, "rb");
 804a17c:	89 c3                	mov    %eax,%ebx
asm volatile (""::: "memory");
	report_label_coverage("ABS", 303);
}

// ROR Label 304
if((input_fh != ((void *)0)) != (input_fh == ((void *)0)))  {
 804a17e:	0f 94 c2             	sete   %dl
 804a181:	0f 95 c1             	setne  %cl
 804a184:	38 d1                	cmp    %dl,%cl
 804a186:	74 4b                	je     804a1d3 <main+0xca3>
 804a188:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a18c:	89 3c 24             	mov    %edi,(%esp)
 804a18f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a193:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a197:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a19b:	b9 62 79 00 00       	mov    $0x7962,%ecx
 804a1a0:	e8 5b 53 00 00       	call   804f500 <__afl_maybe_log>
 804a1a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a1a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a1ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a1b1:	8b 3c 24             	mov    (%esp),%edi
 804a1b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a1b8:	88 55 d6             	mov    %dl,-0x2a(%ebp)
asm volatile (""::: "memory");
	report_label_coverage("ROR", 304);
 804a1bb:	50                   	push   %eax
 804a1bc:	50                   	push   %eax
 804a1bd:	68 30 01 00 00       	push   $0x130
 804a1c2:	68 48 30 06 08       	push   $0x8063048
 804a1c7:	e8 e4 07 00 00       	call   804a9b0 <report_label_coverage>
 804a1cc:	0f b6 55 d6          	movzbl -0x2a(%ebp),%edx
 804a1d0:	83 c4 10             	add    $0x10,%esp
 804a1d3:	90                   	nop
}
if (input_fh == NULL)
 804a1d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a1d8:	89 3c 24             	mov    %edi,(%esp)
 804a1db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a1df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a1e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a1e7:	b9 2e 75 00 00       	mov    $0x752e,%ecx
 804a1ec:	e8 0f 53 00 00       	call   804f500 <__afl_maybe_log>
 804a1f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a1f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a1f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a1fd:	8b 3c 24             	mov    (%esp),%edi
 804a200:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a204:	84 d2                	test   %dl,%dl
 804a206:	0f 85 f6 05 00 00    	jne    804a802 <main+0x12d2>
 804a20c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a210:	89 3c 24             	mov    %edi,(%esp)
 804a213:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a217:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a21b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a21f:	b9 ea c2 00 00       	mov    $0xc2ea,%ecx
 804a224:	e8 d7 52 00 00       	call   804f500 <__afl_maybe_log>
 804a229:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a22d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a231:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a235:	8b 3c 24             	mov    (%esp),%edi
 804a238:	8d 64 24 10          	lea    0x10(%esp),%esp
// ABS Label 287
if(input_fh < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 287);
}
fadvise (input_fh, FADVISE_SEQUENTIAL);
 804a23c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a240:	89 3c 24             	mov    %edi,(%esp)
 804a243:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a247:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a24b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a24f:	b9 e1 de 00 00       	mov    $0xdee1,%ecx
 804a254:	e8 a7 52 00 00       	call   804f500 <__afl_maybe_log>
 804a259:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a25d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a261:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a265:	8b 3c 24             	mov    (%esp),%edi
 804a268:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a26c:	50                   	push   %eax
 804a26d:	50                   	push   %eax
 804a26e:	6a 02                	push   $0x2
 804a270:	53                   	push   %ebx
 804a271:	e8 0a 96 00 00       	call   8053880 <fadvise>
// ABS Label 305
if(decode < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 305);
}
if (decode)
 804a276:	89 f8                	mov    %edi,%eax
 804a278:	83 c4 10             	add    $0x10,%esp
 804a27b:	84 c0                	test   %al,%al
 804a27d:	0f 84 03 02 00 00    	je     804a486 <main+0xf56>
 804a283:	90                   	nop
 804a284:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a288:	89 3c 24             	mov    %edi,(%esp)
 804a28b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a28f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a293:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a297:	b9 af b4 00 00       	mov    $0xb4af,%ecx
 804a29c:	e8 5f 52 00 00       	call   804f500 <__afl_maybe_log>
 804a2a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a2a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a2a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a2ad:	8b 3c 24             	mov    (%esp),%edi
 804a2b0:	8d 64 24 10          	lea    0x10(%esp),%esp
    do_decode (input_fh, stdout, ignore_garbage);
 804a2b4:	0f b6 4d d7          	movzbl -0x29(%ebp),%ecx
 804a2b8:	8b 15 d8 72 06 08    	mov    0x80672d8,%edx
 804a2be:	89 d8                	mov    %ebx,%eax
 804a2c0:	e8 0b 2a 00 00       	call   804ccd0 <do_decode>
 804a2c5:	8d 76 00             	lea    0x0(%esi),%esi
  else
    do_encode (input_fh, stdout, wrap_column);

  {
    int temp_1 = rpl_fclose(input_fh);
 804a2c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a2cc:	89 3c 24             	mov    %edi,(%esp)
 804a2cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a2d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a2d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a2db:	b9 32 ea 00 00       	mov    $0xea32,%ecx
 804a2e0:	e8 1b 52 00 00       	call   804f500 <__afl_maybe_log>
 804a2e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a2e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a2ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a2f1:	8b 3c 24             	mov    (%esp),%edi
 804a2f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a2f8:	83 ec 0c             	sub    $0xc,%esp
 804a2fb:	53                   	push   %ebx
 804a2fc:	e8 ef 53 01 00       	call   805f6f0 <rpl_fclose>
    int temp_2 = -1;
    
// ABS Label 306
if(temp_1 < 0)  {
 804a301:	83 c4 10             	add    $0x10,%esp
 804a304:	85 c0                	test   %eax,%eax
    do_decode (input_fh, stdout, ignore_garbage);
  else
    do_encode (input_fh, stdout, wrap_column);

  {
    int temp_1 = rpl_fclose(input_fh);
 804a306:	89 c3                	mov    %eax,%ebx
    int temp_2 = -1;
    
// ABS Label 306
if(temp_1 < 0)  {
 804a308:	0f 88 29 03 00 00    	js     804a637 <main+0x1107>
 804a30e:	66 90                	xchg   %ax,%ax
 804a310:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a314:	89 3c 24             	mov    %edi,(%esp)
 804a317:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a31b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a31f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a323:	b9 89 6b 00 00       	mov    $0x6b89,%ecx
 804a328:	e8 d3 51 00 00       	call   804f500 <__afl_maybe_log>
 804a32d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a331:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a335:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a339:	8b 3c 24             	mov    (%esp),%edi
 804a33c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 306);
}
// ABS Label 307
if(temp_2 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 307);
 804a340:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a344:	89 3c 24             	mov    %edi,(%esp)
 804a347:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a34b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a34f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a353:	b9 d3 4b 00 00       	mov    $0x4bd3,%ecx
 804a358:	e8 a3 51 00 00       	call   804f500 <__afl_maybe_log>
 804a35d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a361:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a365:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a369:	8b 3c 24             	mov    (%esp),%edi
 804a36c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a370:	56                   	push   %esi
 804a371:	56                   	push   %esi
 804a372:	68 33 01 00 00       	push   $0x133
 804a377:	68 5c 30 06 08       	push   $0x806305c
 804a37c:	e8 2f 06 00 00       	call   804a9b0 <report_label_coverage>
}

// ROR Label 308
if((temp_1 != temp_2) != (temp_1 == temp_2))  {
 804a381:	83 c4 10             	add    $0x10,%esp
 804a384:	83 c3 01             	add    $0x1,%ebx
 804a387:	0f 94 c2             	sete   %dl
 804a38a:	0f 95 c1             	setne  %cl
 804a38d:	38 d1                	cmp    %dl,%cl
 804a38f:	74 4e                	je     804a3df <main+0xeaf>
 804a391:	8d 76 00             	lea    0x0(%esi),%esi
 804a394:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a398:	89 3c 24             	mov    %edi,(%esp)
 804a39b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a39f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a3a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a3a7:	b9 f0 be 00 00       	mov    $0xbef0,%ecx
 804a3ac:	e8 4f 51 00 00       	call   804f500 <__afl_maybe_log>
 804a3b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a3b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a3b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a3bd:	8b 3c 24             	mov    (%esp),%edi
 804a3c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a3c4:	88 55 d7             	mov    %dl,-0x29(%ebp)
asm volatile (""::: "memory");
	report_label_coverage("ROR", 308);
 804a3c7:	51                   	push   %ecx
 804a3c8:	51                   	push   %ecx
 804a3c9:	68 34 01 00 00       	push   $0x134
 804a3ce:	68 48 30 06 08       	push   $0x8063048
 804a3d3:	e8 d8 05 00 00       	call   804a9b0 <report_label_coverage>
 804a3d8:	0f b6 55 d7          	movzbl -0x29(%ebp),%edx
 804a3dc:	83 c4 10             	add    $0x10,%esp
 804a3df:	90                   	nop
}
if (temp_1 == temp_2) {
 804a3e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a3e4:	89 3c 24             	mov    %edi,(%esp)
 804a3e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a3eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a3ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a3f3:	b9 99 ff 00 00       	mov    $0xff99,%ecx
 804a3f8:	e8 03 51 00 00       	call   804f500 <__afl_maybe_log>
 804a3fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a401:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a405:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a409:	8b 3c 24             	mov    (%esp),%edi
 804a40c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a410:	84 d2                	test   %dl,%dl
 804a412:	0f 85 37 01 00 00    	jne    804a54f <main+0x101f>
 804a418:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a41c:	89 3c 24             	mov    %edi,(%esp)
 804a41f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a423:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a427:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a42b:	b9 f5 e7 00 00       	mov    $0xe7f5,%ecx
 804a430:	e8 cb 50 00 00       	call   804f500 <__afl_maybe_log>
 804a435:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a439:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a43d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a441:	8b 3c 24             	mov    (%esp),%edi
 804a444:	8d 64 24 10          	lea    0x10(%esp),%esp
    }
}


  return EXIT_SUCCESS;
}
 804a448:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a44c:	89 3c 24             	mov    %edi,(%esp)
 804a44f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a453:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a457:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a45b:	b9 9a b5 00 00       	mov    $0xb59a,%ecx
 804a460:	e8 9b 50 00 00       	call   804f500 <__afl_maybe_log>
 804a465:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a469:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a46d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a471:	8b 3c 24             	mov    (%esp),%edi
 804a474:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a478:	8d 65 f0             	lea    -0x10(%ebp),%esp
 804a47b:	31 c0                	xor    %eax,%eax
 804a47d:	59                   	pop    %ecx
 804a47e:	5b                   	pop    %ebx
 804a47f:	5e                   	pop    %esi
 804a480:	5f                   	pop    %edi
 804a481:	5d                   	pop    %ebp
 804a482:	8d 61 fc             	lea    -0x4(%ecx),%esp
 804a485:	c3                   	ret    
 804a486:	66 90                	xchg   %ax,%ax
	report_label_coverage("ABS", 305);
}
if (decode)
    do_decode (input_fh, stdout, ignore_garbage);
  else
    do_encode (input_fh, stdout, wrap_column);
 804a488:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a48c:	89 3c 24             	mov    %edi,(%esp)
 804a48f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a493:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a497:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a49b:	b9 dd cb 00 00       	mov    $0xcbdd,%ecx
 804a4a0:	e8 5b 50 00 00       	call   804f500 <__afl_maybe_log>
 804a4a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a4a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a4ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a4b1:	8b 3c 24             	mov    (%esp),%edi
 804a4b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a4b8:	8b 15 d8 72 06 08    	mov    0x80672d8,%edx
 804a4be:	50                   	push   %eax
 804a4bf:	50                   	push   %eax
 804a4c0:	ff 75 e4             	pushl  -0x1c(%ebp)
 804a4c3:	89 d8                	mov    %ebx,%eax
 804a4c5:	ff 75 e0             	pushl  -0x20(%ebp)
 804a4c8:	e8 23 05 00 00       	call   804a9f0 <do_encode>
 804a4cd:	83 c4 10             	add    $0x10,%esp
 804a4d0:	e9 f0 fd ff ff       	jmp    804a2c5 <main+0xd95>
 804a4d5:	8d 76 00             	lea    0x0(%esi),%esi
// MCC Label 302
if(( 1 ) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 302);
}
if (STREQ (infile, "-"))
 804a4d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a4dc:	89 3c 24             	mov    %edi,(%esp)
 804a4df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a4e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a4e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a4eb:	b9 06 59 00 00       	mov    $0x5906,%ecx
 804a4f0:	e8 0b 50 00 00       	call   804f500 <__afl_maybe_log>
 804a4f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a4f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a4fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a501:	8b 3c 24             	mov    (%esp),%edi
 804a504:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a508:	80 7e 01 00          	cmpb   $0x0,0x1(%esi)
 804a50c:	0f 85 26 fc ff ff    	jne    804a138 <main+0xc08>
 804a512:	66 90                	xchg   %ax,%ax
 804a514:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a518:	89 3c 24             	mov    %edi,(%esp)
 804a51b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a51f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a523:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a527:	b9 e5 14 00 00       	mov    $0x14e5,%ecx
 804a52c:	e8 cf 4f 00 00       	call   804f500 <__afl_maybe_log>
 804a531:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a535:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a539:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a53d:	8b 3c 24             	mov    (%esp),%edi
 804a540:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (O_BINARY)
        xfreopen (NULL, "rb", stdin);
      input_fh = stdin;
 804a544:	8b 1d d0 72 06 08    	mov    0x80672d0,%ebx
 804a54a:	e9 ed fc ff ff       	jmp    804a23c <main+0xd0c>
 804a54f:	90                   	nop
if (temp_1 == temp_2) {
        
// MCC Label 309
if(( 1 ) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 309);
 804a550:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a554:	89 3c 24             	mov    %edi,(%esp)
 804a557:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a55b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a55f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a563:	b9 bc d0 00 00       	mov    $0xd0bc,%ecx
 804a568:	e8 93 4f 00 00       	call   804f500 <__afl_maybe_log>
 804a56d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a571:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a575:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a579:	8b 3c 24             	mov    (%esp),%edi
 804a57c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a580:	52                   	push   %edx
 804a581:	52                   	push   %edx
 804a582:	68 35 01 00 00       	push   $0x135
 804a587:	68 64 30 06 08       	push   $0x8063064
 804a58c:	e8 1f 04 00 00       	call   804a9b0 <report_label_coverage>
}
if ((strcmp(infile, "-") == 0))
 804a591:	8b 7d d0             	mov    -0x30(%ebp),%edi
 804a594:	83 c4 10             	add    $0x10,%esp
 804a597:	80 3f 2d             	cmpb   $0x2d,(%edi)
 804a59a:	0f 85 11 02 00 00    	jne    804a7b1 <main+0x1281>
 804a5a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a5a4:	89 3c 24             	mov    %edi,(%esp)
 804a5a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a5ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a5af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a5b3:	b9 7e f0 00 00       	mov    $0xf07e,%ecx
 804a5b8:	e8 43 4f 00 00       	call   804f500 <__afl_maybe_log>
 804a5bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a5c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a5c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a5c9:	8b 3c 24             	mov    (%esp),%edi
 804a5cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a5d0:	80 7f 01 00          	cmpb   $0x0,0x1(%edi)
 804a5d4:	0f 85 d7 01 00 00    	jne    804a7b1 <main+0x1281>
 804a5da:	66 90                	xchg   %ax,%ax
 804a5dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a5e0:	89 3c 24             	mov    %edi,(%esp)
 804a5e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a5e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a5eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a5ef:	b9 a1 5a 00 00       	mov    $0x5aa1,%ecx
 804a5f4:	e8 07 4f 00 00       	call   804f500 <__afl_maybe_log>
 804a5f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a5fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a601:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a605:	8b 3c 24             	mov    (%esp),%edi
 804a608:	8d 64 24 10          	lea    0x10(%esp),%esp
            error(1, (*__errno_location()), gettext("closing standard input"));
 804a60c:	50                   	push   %eax
 804a60d:	6a 05                	push   $0x5
 804a60f:	68 67 31 06 08       	push   $0x8063167
 804a614:	6a 00                	push   $0x0
 804a616:	e8 c5 eb ff ff       	call   80491e0 <dcgettext@plt>
 804a61b:	89 c6                	mov    %eax,%esi
 804a61d:	e8 ae ed ff ff       	call   80493d0 <__errno_location@plt>
 804a622:	83 c4 0c             	add    $0xc,%esp
 804a625:	56                   	push   %esi
 804a626:	ff 30                	pushl  (%eax)
 804a628:	6a 01                	push   $0x1
 804a62a:	e8 61 ec ff ff       	call   8049290 <error@plt>
 804a62f:	83 c4 10             	add    $0x10,%esp
 804a632:	e9 11 fe ff ff       	jmp    804a448 <main+0xf18>
 804a637:	90                   	nop
    int temp_2 = -1;
    
// ABS Label 306
if(temp_1 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 306);
 804a638:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a63c:	89 3c 24             	mov    %edi,(%esp)
 804a63f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a643:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a647:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a64b:	b9 ab 90 00 00       	mov    $0x90ab,%ecx
 804a650:	e8 ab 4e 00 00       	call   804f500 <__afl_maybe_log>
 804a655:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a659:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a65d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a661:	8b 3c 24             	mov    (%esp),%edi
 804a664:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a668:	57                   	push   %edi
 804a669:	57                   	push   %edi
 804a66a:	68 32 01 00 00       	push   $0x132
 804a66f:	68 5c 30 06 08       	push   $0x806305c
 804a674:	e8 37 03 00 00       	call   804a9b0 <report_label_coverage>
 804a679:	83 c4 10             	add    $0x10,%esp
 804a67c:	e9 bf fc ff ff       	jmp    804a340 <main+0xe10>
 804a681:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ABS", 297);
}
// ABS Label 298
if(optind < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 298);
 804a684:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a688:	89 3c 24             	mov    %edi,(%esp)
 804a68b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a68f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a693:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a697:	b9 dd 84 00 00       	mov    $0x84dd,%ecx
 804a69c:	e8 5f 4e 00 00       	call   804f500 <__afl_maybe_log>
 804a6a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a6a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a6a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a6ad:	8b 3c 24             	mov    (%esp),%edi
 804a6b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a6b4:	50                   	push   %eax
 804a6b5:	50                   	push   %eax
 804a6b6:	68 2a 01 00 00       	push   $0x12a
 804a6bb:	68 5c 30 06 08       	push   $0x806305c
 804a6c0:	e8 eb 02 00 00       	call   804a9b0 <report_label_coverage>
 804a6c5:	83 c4 10             	add    $0x10,%esp
 804a6c8:	e9 cf f7 ff ff       	jmp    8049e9c <main+0x96c>
 804a6cd:	8d 76 00             	lea    0x0(%esi),%esi

  
// ABS Label 297
if(argc < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 297);
 804a6d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a6d4:	89 3c 24             	mov    %edi,(%esp)
 804a6d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a6db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a6df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a6e3:	b9 d6 1b 00 00       	mov    $0x1bd6,%ecx
 804a6e8:	e8 13 4e 00 00       	call   804f500 <__afl_maybe_log>
 804a6ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a6f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a6f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a6f9:	8b 3c 24             	mov    (%esp),%edi
 804a6fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a700:	50                   	push   %eax
 804a701:	50                   	push   %eax
 804a702:	68 29 01 00 00       	push   $0x129
 804a707:	68 5c 30 06 08       	push   $0x806305c
 804a70c:	e8 9f 02 00 00       	call   804a9b0 <report_label_coverage>
 804a711:	83 c4 10             	add    $0x10,%esp
 804a714:	e9 13 f7 ff ff       	jmp    8049e2c <main+0x8fc>
 804a719:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ABS", 289);
}
// ABS Label 290
if(optind < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 290);
 804a71c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a720:	89 3c 24             	mov    %edi,(%esp)
 804a723:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a727:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a72b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a72f:	b9 fb 65 00 00       	mov    $0x65fb,%ecx
 804a734:	e8 c7 4d 00 00       	call   804f500 <__afl_maybe_log>
 804a739:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a73d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a741:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a745:	8b 3c 24             	mov    (%esp),%edi
 804a748:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a74c:	50                   	push   %eax
 804a74d:	50                   	push   %eax
 804a74e:	68 22 01 00 00       	push   $0x122
 804a753:	68 5c 30 06 08       	push   $0x806305c
 804a758:	e8 53 02 00 00       	call   804a9b0 <report_label_coverage>
 804a75d:	83 c4 10             	add    $0x10,%esp
 804a760:	e9 db f2 ff ff       	jmp    8049a40 <main+0x510>
 804a765:	8d 76 00             	lea    0x0(%esi),%esi

  
// ABS Label 289
if(argc < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 289);
 804a768:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a76c:	89 3c 24             	mov    %edi,(%esp)
 804a76f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a773:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a777:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a77b:	b9 65 c6 00 00       	mov    $0xc665,%ecx
 804a780:	e8 7b 4d 00 00       	call   804f500 <__afl_maybe_log>
 804a785:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a789:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a78d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a791:	8b 3c 24             	mov    (%esp),%edi
 804a794:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a798:	50                   	push   %eax
 804a799:	50                   	push   %eax
 804a79a:	68 21 01 00 00       	push   $0x121
 804a79f:	68 5c 30 06 08       	push   $0x806305c
 804a7a4:	e8 07 02 00 00       	call   804a9b0 <report_label_coverage>
 804a7a9:	83 c4 10             	add    $0x10,%esp
 804a7ac:	e9 1f f2 ff ff       	jmp    80499d0 <main+0x4a0>
 804a7b1:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("MCC", 309);
}
if ((strcmp(infile, "-") == 0))
            error(1, (*__errno_location()), gettext("closing standard input"));
        else
            error(1, (*__errno_location()), "%s", infile);
 804a7b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a7b8:	89 3c 24             	mov    %edi,(%esp)
 804a7bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a7bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a7c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a7c7:	b9 a2 ea 00 00       	mov    $0xeaa2,%ecx
 804a7cc:	e8 2f 4d 00 00       	call   804f500 <__afl_maybe_log>
 804a7d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a7d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a7d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a7dd:	8b 3c 24             	mov    (%esp),%edi
 804a7e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a7e4:	e8 e7 eb ff ff       	call   80493d0 <__errno_location@plt>
 804a7e9:	ff 75 d0             	pushl  -0x30(%ebp)
 804a7ec:	68 40 31 06 08       	push   $0x8063140
 804a7f1:	ff 30                	pushl  (%eax)
 804a7f3:	6a 01                	push   $0x1
 804a7f5:	e8 96 ea ff ff       	call   8049290 <error@plt>
 804a7fa:	83 c4 10             	add    $0x10,%esp
 804a7fd:	e9 46 fc ff ff       	jmp    804a448 <main+0xf18>
 804a802:	66 90                	xchg   %ax,%ax
if((input_fh != ((void *)0)) != (input_fh == ((void *)0)))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 304);
}
if (input_fh == NULL)
        error (EXIT_FAILURE, errno, "%s", infile);
 804a804:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a808:	89 3c 24             	mov    %edi,(%esp)
 804a80b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a80f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a813:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a817:	b9 c5 17 00 00       	mov    $0x17c5,%ecx
 804a81c:	e8 df 4c 00 00       	call   804f500 <__afl_maybe_log>
 804a821:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a825:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a829:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a82d:	8b 3c 24             	mov    (%esp),%edi
 804a830:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a834:	e8 97 eb ff ff       	call   80493d0 <__errno_location@plt>
 804a839:	ff 75 d0             	pushl  -0x30(%ebp)
 804a83c:	68 40 31 06 08       	push   $0x8063140
 804a841:	ff 30                	pushl  (%eax)
 804a843:	6a 01                	push   $0x1
 804a845:	e8 46 ea ff ff       	call   8049290 <error@plt>
 804a84a:	83 c4 10             	add    $0x10,%esp
 804a84d:	e9 ea f9 ff ff       	jmp    804a23c <main+0xd0c>
 804a852:	66 90                	xchg   %ax,%ax
asm volatile (""::: "memory");
	report_label_coverage("ROR", 296);
}
if (argc - optind > 1)
    {
      error (0, 0, _("extra operand %s"), quote (argv[optind]));
 804a854:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a858:	89 3c 24             	mov    %edi,(%esp)
 804a85b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a85f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a863:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a867:	b9 71 d8 00 00       	mov    $0xd871,%ecx
 804a86c:	e8 8f 4c 00 00       	call   804f500 <__afl_maybe_log>
 804a871:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a875:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a879:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a87d:	8b 3c 24             	mov    (%esp),%edi
 804a880:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a884:	83 ec 0c             	sub    $0xc,%esp
 804a887:	ff 34 8b             	pushl  (%ebx,%ecx,4)
 804a88a:	e8 91 fa 00 00       	call   805a320 <quote>
 804a88f:	83 c4 0c             	add    $0xc,%esp
 804a892:	89 c3                	mov    %eax,%ebx
 804a894:	6a 05                	push   $0x5
 804a896:	68 53 31 06 08       	push   $0x8063153
 804a89b:	6a 00                	push   $0x0
 804a89d:	e8 3e e9 ff ff       	call   80491e0 <dcgettext@plt>
 804a8a2:	53                   	push   %ebx
 804a8a3:	50                   	push   %eax
 804a8a4:	6a 00                	push   $0x0
 804a8a6:	6a 00                	push   $0x0
 804a8a8:	e8 e3 e9 ff ff       	call   8049290 <error@plt>
      usage (EXIT_FAILURE);
 804a8ad:	83 c4 14             	add    $0x14,%esp
 804a8b0:	6a 01                	push   $0x1
 804a8b2:	e8 29 43 00 00       	call   804ebe0 <usage>
 804a8b7:	90                   	nop

0804a8b8 <_start>:
 804a8b8:	31 ed                	xor    %ebp,%ebp
 804a8ba:	5e                   	pop    %esi
 804a8bb:	89 e1                	mov    %esp,%ecx
 804a8bd:	83 e4 f0             	and    $0xfffffff0,%esp
 804a8c0:	50                   	push   %eax
 804a8c1:	54                   	push   %esp
 804a8c2:	52                   	push   %edx
 804a8c3:	68 e0 2f 06 08       	push   $0x8062fe0
 804a8c8:	68 70 2f 06 08       	push   $0x8062f70
 804a8cd:	51                   	push   %ecx
 804a8ce:	56                   	push   %esi
 804a8cf:	68 30 95 04 08       	push   $0x8049530
 804a8d4:	e8 97 ea ff ff       	call   8049370 <__libc_start_main@plt>
 804a8d9:	f4                   	hlt    
 804a8da:	66 90                	xchg   %ax,%ax
 804a8dc:	66 90                	xchg   %ax,%ax
 804a8de:	66 90                	xchg   %ax,%ax

0804a8e0 <__x86.get_pc_thunk.bx>:
 804a8e0:	8b 1c 24             	mov    (%esp),%ebx
 804a8e3:	c3                   	ret    
 804a8e4:	66 90                	xchg   %ax,%ax
 804a8e6:	66 90                	xchg   %ax,%ax
 804a8e8:	66 90                	xchg   %ax,%ax
 804a8ea:	66 90                	xchg   %ax,%ax
 804a8ec:	66 90                	xchg   %ax,%ax
 804a8ee:	66 90                	xchg   %ax,%ax

0804a8f0 <deregister_tm_clones>:
 804a8f0:	b8 a3 72 06 08       	mov    $0x80672a3,%eax
 804a8f5:	2d a0 72 06 08       	sub    $0x80672a0,%eax
 804a8fa:	83 f8 06             	cmp    $0x6,%eax
 804a8fd:	76 1a                	jbe    804a919 <deregister_tm_clones+0x29>
 804a8ff:	b8 00 00 00 00       	mov    $0x0,%eax
 804a904:	85 c0                	test   %eax,%eax
 804a906:	74 11                	je     804a919 <deregister_tm_clones+0x29>
 804a908:	55                   	push   %ebp
 804a909:	89 e5                	mov    %esp,%ebp
 804a90b:	83 ec 14             	sub    $0x14,%esp
 804a90e:	68 a0 72 06 08       	push   $0x80672a0
 804a913:	ff d0                	call   *%eax
 804a915:	83 c4 10             	add    $0x10,%esp
 804a918:	c9                   	leave  
 804a919:	f3 c3                	repz ret 
 804a91b:	90                   	nop
 804a91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0804a920 <register_tm_clones>:
 804a920:	b8 a0 72 06 08       	mov    $0x80672a0,%eax
 804a925:	2d a0 72 06 08       	sub    $0x80672a0,%eax
 804a92a:	c1 f8 02             	sar    $0x2,%eax
 804a92d:	89 c2                	mov    %eax,%edx
 804a92f:	c1 ea 1f             	shr    $0x1f,%edx
 804a932:	01 d0                	add    %edx,%eax
 804a934:	d1 f8                	sar    %eax
 804a936:	74 1b                	je     804a953 <register_tm_clones+0x33>
 804a938:	ba 00 00 00 00       	mov    $0x0,%edx
 804a93d:	85 d2                	test   %edx,%edx
 804a93f:	74 12                	je     804a953 <register_tm_clones+0x33>
 804a941:	55                   	push   %ebp
 804a942:	89 e5                	mov    %esp,%ebp
 804a944:	83 ec 10             	sub    $0x10,%esp
 804a947:	50                   	push   %eax
 804a948:	68 a0 72 06 08       	push   $0x80672a0
 804a94d:	ff d2                	call   *%edx
 804a94f:	83 c4 10             	add    $0x10,%esp
 804a952:	c9                   	leave  
 804a953:	f3 c3                	repz ret 
 804a955:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 804a959:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0804a960 <__do_global_dtors_aux>:
 804a960:	80 3d e4 72 06 08 00 	cmpb   $0x0,0x80672e4
 804a967:	75 13                	jne    804a97c <__do_global_dtors_aux+0x1c>
 804a969:	55                   	push   %ebp
 804a96a:	89 e5                	mov    %esp,%ebp
 804a96c:	83 ec 08             	sub    $0x8,%esp
 804a96f:	e8 7c ff ff ff       	call   804a8f0 <deregister_tm_clones>
 804a974:	c6 05 e4 72 06 08 01 	movb   $0x1,0x80672e4
 804a97b:	c9                   	leave  
 804a97c:	f3 c3                	repz ret 
 804a97e:	66 90                	xchg   %ax,%ax

0804a980 <frame_dummy>:
 804a980:	b8 08 70 06 08       	mov    $0x8067008,%eax
 804a985:	8b 10                	mov    (%eax),%edx
 804a987:	85 d2                	test   %edx,%edx
 804a989:	75 05                	jne    804a990 <frame_dummy+0x10>
 804a98b:	eb 93                	jmp    804a920 <register_tm_clones>
 804a98d:	8d 76 00             	lea    0x0(%esi),%esi
 804a990:	ba 00 00 00 00       	mov    $0x0,%edx
 804a995:	85 d2                	test   %edx,%edx
 804a997:	74 f2                	je     804a98b <frame_dummy+0xb>
 804a999:	55                   	push   %ebp
 804a99a:	89 e5                	mov    %esp,%ebp
 804a99c:	83 ec 14             	sub    $0x14,%esp
 804a99f:	50                   	push   %eax
 804a9a0:	ff d2                	call   *%edx
 804a9a2:	83 c4 10             	add    $0x10,%esp
 804a9a5:	c9                   	leave  
 804a9a6:	e9 75 ff ff ff       	jmp    804a920 <register_tm_clones>
 804a9ab:	66 90                	xchg   %ax,%ax
 804a9ad:	66 90                	xchg   %ax,%ax
 804a9af:	90                   	nop

0804a9b0 <report_label_coverage>:
void __attribute__ ((noinline)) report_label_coverage(char * crit, int id) {
	asm volatile (""::: "memory");
 804a9b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a9b4:	89 3c 24             	mov    %edi,(%esp)
 804a9b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a9bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a9bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804a9c3:	b9 8c a7 00 00       	mov    $0xa78c,%ecx
 804a9c8:	e8 33 4b 00 00       	call   804f500 <__afl_maybe_log>
 804a9cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804a9d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804a9d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804a9d9:	8b 3c 24             	mov    (%esp),%edi
 804a9dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804a9e0:	c3                   	ret    
 804a9e1:	eb 0d                	jmp    804a9f0 <do_encode>
 804a9e3:	90                   	nop
 804a9e4:	90                   	nop
 804a9e5:	90                   	nop
 804a9e6:	90                   	nop
 804a9e7:	90                   	nop
 804a9e8:	90                   	nop
 804a9e9:	90                   	nop
 804a9ea:	90                   	nop
 804a9eb:	90                   	nop
 804a9ec:	90                   	nop
 804a9ed:	90                   	nop
 804a9ee:	90                   	nop
 804a9ef:	90                   	nop

0804a9f0 <do_encode>:

}

static void
do_encode (FILE *in, FILE *out, uintmax_t wrap_column)
{
 804a9f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804a9f4:	89 3c 24             	mov    %edi,(%esp)
 804a9f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804a9fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804a9ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aa03:	b9 ce f5 00 00       	mov    $0xf5ce,%ecx
 804aa08:	e8 f3 4a 00 00       	call   804f500 <__afl_maybe_log>
 804aa0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aa11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aa15:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aa19:	8b 3c 24             	mov    (%esp),%edi
 804aa1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aa20:	55                   	push   %ebp
 804aa21:	57                   	push   %edi
 804aa22:	89 c5                	mov    %eax,%ebp
 804aa24:	56                   	push   %esi
 804aa25:	53                   	push   %ebx
 804aa26:	81 ec 3c 18 01 00    	sub    $0x1183c,%esp
 804aa2c:	8b 84 24 50 18 01 00 	mov    0x11850(%esp),%eax
 804aa33:	89 54 24 20          	mov    %edx,0x20(%esp)
 804aa37:	8b 94 24 54 18 01 00 	mov    0x11854(%esp),%edx
  size_t current_column = 0;
 804aa3e:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
 804aa45:	00 
asm volatile (""::: "memory");
	report_label_coverage("ABS", 181);
}

// ROR Label 182
if((wrap_column != 0) != (wrap_column == 0))  {
 804aa46:	89 c7                	mov    %eax,%edi

}

static void
do_encode (FILE *in, FILE *out, uintmax_t wrap_column)
{
 804aa48:	89 44 24 08          	mov    %eax,0x8(%esp)
asm volatile (""::: "memory");
	report_label_coverage("ABS", 181);
}

// ROR Label 182
if((wrap_column != 0) != (wrap_column == 0))  {
 804aa4c:	09 d7                	or     %edx,%edi

}

static void
do_encode (FILE *in, FILE *out, uintmax_t wrap_column)
{
 804aa4e:	89 54 24 0c          	mov    %edx,0xc(%esp)
asm volatile (""::: "memory");
	report_label_coverage("ABS", 181);
}

// ROR Label 182
if((wrap_column != 0) != (wrap_column == 0))  {
 804aa52:	89 7c 24 2c          	mov    %edi,0x2c(%esp)
 804aa56:	8d 76 00             	lea    0x0(%esi),%esi
 804aa59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
  size_t sum;

  do {
    {
        size_t n;
        sum = 0;
 804aa60:	31 db                	xor    %ebx,%ebx
        do {
            {
                n = fread_unlocked(inbuf + sum, 1, (1024 * 3 * 10) - sum, in);
 804aa62:	be 00 78 00 00       	mov    $0x7800,%esi
 804aa67:	eb 7b                	jmp    804aae4 <do_encode+0xf4>
 804aa69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
// ABS Label 213
if(temp_2 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 213);
}
if (temp_2)
 804aa70:	81 fb ff 77 00 00    	cmp    $0x77ff,%ebx
 804aa76:	0f 87 ec 00 00 00    	ja     804ab68 <do_encode+0x178>
 804aa7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aa80:	89 3c 24             	mov    %edi,(%esp)
 804aa83:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aa87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aa8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aa8f:	b9 40 1e 00 00       	mov    $0x1e40,%ecx
 804aa94:	e8 67 4a 00 00       	call   804f500 <__afl_maybe_log>
 804aa99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aa9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aaa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aaa5:	8b 3c 24             	mov    (%esp),%edi
 804aaa8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aaac:	a8 20                	test   $0x20,%al
 804aaae:	0f 85 b4 00 00 00    	jne    804ab68 <do_encode+0x178>
 804aab4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aab8:	89 3c 24             	mov    %edi,(%esp)
 804aabb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aabf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aac3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aac7:	b9 d4 70 00 00       	mov    $0x70d4,%ecx
 804aacc:	e8 2f 4a 00 00       	call   804f500 <__afl_maybe_log>
 804aad1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aad5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aad9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aadd:	8b 3c 24             	mov    (%esp),%edi
 804aae0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
        size_t n;
        sum = 0;
        do {
            {
                n = fread_unlocked(inbuf + sum, 1, (1024 * 3 * 10) - sum, in);
 804aae4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aae8:	89 3c 24             	mov    %edi,(%esp)
 804aaeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aaef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aaf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aaf7:	b9 62 73 00 00       	mov    $0x7362,%ecx
 804aafc:	e8 ff 49 00 00       	call   804f500 <__afl_maybe_log>
 804ab01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ab05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ab09:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ab0d:	8b 3c 24             	mov    (%esp),%edi
 804ab10:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ab14:	89 f1                	mov    %esi,%ecx
 804ab16:	55                   	push   %ebp
 804ab17:	29 d9                	sub    %ebx,%ecx
 804ab19:	51                   	push   %ecx
 804ab1a:	6a 01                	push   $0x1
 804ab1c:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 804ab20:	01 d8                	add    %ebx,%eax
 804ab22:	50                   	push   %eax
 804ab23:	e8 78 e7 ff ff       	call   80492a0 <fread_unlocked@plt>
                sum += n;
 804ab28:	01 c3                	add    %eax,%ebx
 804ab2a:	8b 45 00             	mov    0x0(%ebp),%eax
            }
            {
                int temp_2 = !(!feof_unlocked(in) && !ferror_unlocked(in) && sum < (1024 * 3 * 10));
 804ab2d:	83 c4 10             	add    $0x10,%esp
 804ab30:	a8 10                	test   $0x10,%al
 804ab32:	0f 84 38 ff ff ff    	je     804aa70 <do_encode+0x80>
 804ab38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ab3c:	89 3c 24             	mov    %edi,(%esp)
 804ab3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ab43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ab47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ab4b:	b9 b8 ec 00 00       	mov    $0xecb8,%ecx
 804ab50:	e8 ab 49 00 00       	call   804f500 <__afl_maybe_log>
 804ab55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ab59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ab5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ab61:	8b 3c 24             	mov    (%esp),%edi
 804ab64:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 214);
}

// ROR Label 215
if((sum <= 0) != (sum > 0))  {
 804ab68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ab6c:	89 3c 24             	mov    %edi,(%esp)
 804ab6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ab73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ab77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ab7b:	b9 ae 57 00 00       	mov    $0x57ae,%ecx
 804ab80:	e8 7b 49 00 00       	call   804f500 <__afl_maybe_log>
 804ab85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ab89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ab8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ab91:	8b 3c 24             	mov    (%esp),%edi
 804ab94:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ab98:	85 db                	test   %ebx,%ebx
 804ab9a:	0f 95 44 24 17       	setne  0x17(%esp)
 804ab9f:	0f b6 54 24 17       	movzbl 0x17(%esp),%edx
 804aba4:	0f 94 c1             	sete   %cl
 804aba7:	38 d1                	cmp    %dl,%cl
 804aba9:	74 46                	je     804abf1 <do_encode+0x201>
 804abab:	90                   	nop
 804abac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804abb0:	89 3c 24             	mov    %edi,(%esp)
 804abb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804abb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804abbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804abbf:	b9 2e c0 00 00       	mov    $0xc02e,%ecx
 804abc4:	e8 37 49 00 00       	call   804f500 <__afl_maybe_log>
 804abc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804abcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804abd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804abd5:	8b 3c 24             	mov    (%esp),%edi
 804abd8:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 215);
 804abdc:	83 ec 08             	sub    $0x8,%esp
 804abdf:	68 d7 00 00 00       	push   $0xd7
 804abe4:	68 48 30 06 08       	push   $0x8063048
 804abe9:	e8 c2 fd ff ff       	call   804a9b0 <report_label_coverage>
 804abee:	83 c4 10             	add    $0x10,%esp
 804abf1:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 216
if((sum < 0) != (sum > 0))  {
 804abf4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804abf8:	89 3c 24             	mov    %edi,(%esp)
 804abfb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804abff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ac03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ac07:	b9 d8 f7 00 00       	mov    $0xf7d8,%ecx
 804ac0c:	e8 ef 48 00 00       	call   804f500 <__afl_maybe_log>
 804ac11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ac15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ac19:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ac1d:	8b 3c 24             	mov    (%esp),%edi
 804ac20:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ac24:	80 7c 24 17 00       	cmpb   $0x0,0x17(%esp)
 804ac29:	0f 85 e9 04 00 00    	jne    804b118 <do_encode+0x728>
 804ac2f:	90                   	nop
 804ac30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ac34:	89 3c 24             	mov    %edi,(%esp)
 804ac37:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ac3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ac3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ac43:	b9 38 89 00 00       	mov    $0x8938,%ecx
 804ac48:	e8 b3 48 00 00       	call   804f500 <__afl_maybe_log>
 804ac4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ac51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ac55:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ac59:	8b 3c 24             	mov    (%esp),%edi
 804ac5c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 216);
}
// ROR Label 217
if((sum >= 0) != (sum > 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 217);
 804ac60:	83 ec 08             	sub    $0x8,%esp
 804ac63:	68 d9 00 00 00       	push   $0xd9
 804ac68:	68 48 30 06 08       	push   $0x8063048
 804ac6d:	e8 3e fd ff ff       	call   804a9b0 <report_label_coverage>
 804ac72:	83 c4 10             	add    $0x10,%esp
 804ac75:	8d 76 00             	lea    0x0(%esi),%esi
 804ac78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ac7c:	89 3c 24             	mov    %edi,(%esp)
 804ac7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ac83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ac87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ac8b:	b9 f7 c2 00 00       	mov    $0xc2f7,%ecx
 804ac90:	e8 6b 48 00 00       	call   804f500 <__afl_maybe_log>
 804ac95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ac99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ac9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aca1:	8b 3c 24             	mov    (%esp),%edi
 804aca4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aca8:	8b 45 00             	mov    0x0(%ebp),%eax
}
wrap_write(outbuf, ((((sum) + 2) / 3) * 4), wrap_column, &current_column, out);
        }
    }
    {
        int temp_1 = !(!feof_unlocked(in) && !ferror_unlocked(in) && sum == (1024 * 3 * 10));
 804acab:	a8 10                	test   $0x10,%al
 804acad:	0f 85 a1 00 00 00    	jne    804ad54 <do_encode+0x364>
 804acb3:	90                   	nop
 804acb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804acb8:	89 3c 24             	mov    %edi,(%esp)
 804acbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804acbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804acc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804acc7:	b9 54 8d 00 00       	mov    $0x8d54,%ecx
 804accc:	e8 2f 48 00 00       	call   804f500 <__afl_maybe_log>
 804acd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804acd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804acd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804acdd:	8b 3c 24             	mov    (%esp),%edi
 804ace0:	8d 64 24 10          	lea    0x10(%esp),%esp
// ABS Label 221
if(temp_1 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 221);
}
if (temp_1)
 804ace4:	81 fb 00 78 00 00    	cmp    $0x7800,%ebx
 804acea:	75 68                	jne    804ad54 <do_encode+0x364>
 804acec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804acf0:	89 3c 24             	mov    %edi,(%esp)
 804acf3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804acf7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804acfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804acff:	b9 d4 9b 00 00       	mov    $0x9bd4,%ecx
 804ad04:	e8 f7 47 00 00       	call   804f500 <__afl_maybe_log>
 804ad09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ad0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ad11:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ad15:	8b 3c 24             	mov    (%esp),%edi
 804ad18:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ad1c:	a8 20                	test   $0x20,%al
 804ad1e:	0f 84 3c fd ff ff    	je     804aa60 <do_encode+0x70>
 804ad24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ad28:	89 3c 24             	mov    %edi,(%esp)
 804ad2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ad2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ad33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ad37:	b9 14 7a 00 00       	mov    $0x7a14,%ecx
 804ad3c:	e8 bf 47 00 00       	call   804f500 <__afl_maybe_log>
 804ad41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ad45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ad49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ad4d:	8b 3c 24             	mov    (%esp),%edi
 804ad50:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 223);
}

// COR Label 224
if((wrap_column || current_column > 0) != (wrap_column && current_column > 0))  {
 804ad54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ad58:	89 3c 24             	mov    %edi,(%esp)
 804ad5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ad5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ad63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ad67:	b9 3f 6a 00 00       	mov    $0x6a3f,%ecx
 804ad6c:	e8 8f 47 00 00       	call   804f500 <__afl_maybe_log>
 804ad71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ad75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ad79:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ad7d:	8b 3c 24             	mov    (%esp),%edi
 804ad80:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ad84:	8b 74 24 0c          	mov    0xc(%esp),%esi
 804ad88:	8b 5c 24 08          	mov    0x8(%esp),%ebx
 804ad8c:	89 f2                	mov    %esi,%edx
 804ad8e:	09 da                	or     %ebx,%edx
 804ad90:	0f 85 48 11 00 00    	jne    804bede <do_encode+0x14ee>
 804ad96:	66 90                	xchg   %ax,%ax
 804ad98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ad9c:	89 3c 24             	mov    %edi,(%esp)
 804ad9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ada3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ada7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804adab:	b9 bd 9c 00 00       	mov    $0x9cbd,%ecx
 804adb0:	e8 4b 47 00 00       	call   804f500 <__afl_maybe_log>
 804adb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804adb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804adbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804adc1:	8b 3c 24             	mov    (%esp),%edi
 804adc4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804adc8:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
 804adcd:	0f 85 79 11 00 00    	jne    804bf4c <do_encode+0x155c>
 804add3:	90                   	nop
 804add4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804add8:	89 3c 24             	mov    %edi,(%esp)
 804addb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804addf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ade3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ade7:	b9 35 69 00 00       	mov    $0x6935,%ecx
 804adec:	e8 0f 47 00 00       	call   804f500 <__afl_maybe_log>
 804adf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804adf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804adf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804adfd:	8b 3c 24             	mov    (%esp),%edi
 804ae00:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("COR", 224);
}

// ROR Label 225
if((current_column <= 0) != (current_column > 0))  {
 804ae04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ae08:	89 3c 24             	mov    %edi,(%esp)
 804ae0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ae13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ae17:	b9 d7 3e 00 00       	mov    $0x3ed7,%ecx
 804ae1c:	e8 df 46 00 00       	call   804f500 <__afl_maybe_log>
 804ae21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ae25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ae29:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ae2d:	8b 3c 24             	mov    (%esp),%edi
 804ae30:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ae34:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 804ae38:	85 c9                	test   %ecx,%ecx
 804ae3a:	0f 94 c0             	sete   %al
 804ae3d:	0f 95 c3             	setne  %bl
 804ae40:	38 d8                	cmp    %bl,%al
 804ae42:	89 c6                	mov    %eax,%esi
 804ae44:	74 46                	je     804ae8c <do_encode+0x49c>
 804ae46:	66 90                	xchg   %ax,%ax
 804ae48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ae4c:	89 3c 24             	mov    %edi,(%esp)
 804ae4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ae57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ae5b:	b9 c4 24 00 00       	mov    $0x24c4,%ecx
 804ae60:	e8 9b 46 00 00       	call   804f500 <__afl_maybe_log>
 804ae65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ae69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ae6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ae71:	8b 3c 24             	mov    (%esp),%edi
 804ae74:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 225);
 804ae78:	51                   	push   %ecx
 804ae79:	51                   	push   %ecx
 804ae7a:	68 e1 00 00 00       	push   $0xe1
 804ae7f:	68 48 30 06 08       	push   $0x8063048
 804ae84:	e8 27 fb ff ff       	call   804a9b0 <report_label_coverage>
 804ae89:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 226
if((current_column < 0) != (current_column > 0))  {
 804ae8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ae90:	89 3c 24             	mov    %edi,(%esp)
 804ae93:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ae97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ae9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ae9f:	b9 6a e9 00 00       	mov    $0xe96a,%ecx
 804aea4:	e8 57 46 00 00       	call   804f500 <__afl_maybe_log>
 804aea9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aead:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aeb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aeb5:	8b 3c 24             	mov    (%esp),%edi
 804aeb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804aebc:	84 db                	test   %bl,%bl
 804aebe:	0f 85 69 12 00 00    	jne    804c12d <do_encode+0x173d>
 804aec4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aec8:	89 3c 24             	mov    %edi,(%esp)
 804aecb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aecf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804aed3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804aed7:	b9 20 4d 00 00       	mov    $0x4d20,%ecx
 804aedc:	e8 1f 46 00 00       	call   804f500 <__afl_maybe_log>
 804aee1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804aee5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804aee9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804aeed:	8b 3c 24             	mov    (%esp),%edi
 804aef0:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 226);
}
// ROR Label 227
if((current_column >= 0) != (current_column > 0))  {
 804aef4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804aef8:	89 3c 24             	mov    %edi,(%esp)
 804aefb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804aeff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af03:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804af07:	b9 04 99 00 00       	mov    $0x9904,%ecx
 804af0c:	e8 ef 45 00 00       	call   804f500 <__afl_maybe_log>
 804af11:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804af15:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804af19:	8b 54 24 04          	mov    0x4(%esp),%edx
 804af1d:	8b 3c 24             	mov    (%esp),%edi
 804af20:	8d 64 24 10          	lea    0x10(%esp),%esp
 804af24:	89 f1                	mov    %esi,%ecx
 804af26:	84 c9                	test   %cl,%cl
 804af28:	0f 85 b5 11 00 00    	jne    804c0e3 <do_encode+0x16f3>
 804af2e:	66 90                	xchg   %ax,%ax
 804af30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804af34:	89 3c 24             	mov    %edi,(%esp)
 804af37:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804af43:	b9 fe 3c 00 00       	mov    $0x3cfe,%ecx
 804af48:	e8 b3 45 00 00       	call   804f500 <__afl_maybe_log>
 804af4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804af51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804af55:	8b 54 24 04          	mov    0x4(%esp),%edx
 804af59:	8b 3c 24             	mov    (%esp),%edi
 804af5c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 227);
}

// MCC Label 228
if(wrap_column && current_column > 0 ) {
 804af60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804af64:	89 3c 24             	mov    %edi,(%esp)
 804af67:	89 54 24 04          	mov    %edx,0x4(%esp)
 804af6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804af6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804af73:	b9 a3 30 00 00       	mov    $0x30a3,%ecx
 804af78:	e8 83 45 00 00       	call   804f500 <__afl_maybe_log>
 804af7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804af81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804af85:	8b 54 24 04          	mov    0x4(%esp),%edx
 804af89:	8b 3c 24             	mov    (%esp),%edi
 804af8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804af90:	8b 7c 24 0c          	mov    0xc(%esp),%edi
 804af94:	8b 44 24 08          	mov    0x8(%esp),%eax
 804af98:	89 fa                	mov    %edi,%edx
 804af9a:	09 c2                	or     %eax,%edx
 804af9c:	0f 84 f3 0f 00 00    	je     804bf95 <do_encode+0x15a5>
 804afa2:	66 90                	xchg   %ax,%ax
 804afa4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804afa8:	89 3c 24             	mov    %edi,(%esp)
 804afab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804afaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804afb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804afb7:	b9 d1 54 00 00       	mov    $0x54d1,%ecx
 804afbc:	e8 3f 45 00 00       	call   804f500 <__afl_maybe_log>
 804afc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804afc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804afc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804afcd:	8b 3c 24             	mov    (%esp),%edi
 804afd0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804afd4:	84 db                	test   %bl,%bl
 804afd6:	0f 85 9d 11 00 00    	jne    804c179 <do_encode+0x1789>
 804afdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804afe0:	89 3c 24             	mov    %edi,(%esp)
 804afe3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804afe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804afeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804afef:	b9 0a b6 00 00       	mov    $0xb60a,%ecx
 804aff4:	e8 07 45 00 00       	call   804f500 <__afl_maybe_log>
 804aff9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804affd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b001:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b005:	8b 3c 24             	mov    (%esp),%edi
 804b008:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 228);
}
// MCC Label 229
if(wrap_column && !(current_column > 0) ) {
 804b00c:	89 f1                	mov    %esi,%ecx
 804b00e:	84 c9                	test   %cl,%cl
 804b010:	0f 85 e3 13 00 00    	jne    804c3f9 <do_encode+0x1a09>
 804b016:	66 90                	xchg   %ax,%ax
 804b018:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b01c:	89 3c 24             	mov    %edi,(%esp)
 804b01f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b023:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b027:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b02b:	b9 94 7e 00 00       	mov    $0x7e94,%ecx
 804b030:	e8 cb 44 00 00       	call   804f500 <__afl_maybe_log>
 804b035:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b039:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b03d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b041:	8b 3c 24             	mov    (%esp),%edi
 804b044:	8d 64 24 10          	lea    0x10(%esp),%esp
// ABS Label 235
if(temp_1 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 235);
}
if (temp_1)
 804b048:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b04c:	89 3c 24             	mov    %edi,(%esp)
 804b04f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b053:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b057:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b05b:	b9 8b 93 00 00       	mov    $0x938b,%ecx
 804b060:	e8 9b 44 00 00       	call   804f500 <__afl_maybe_log>
 804b065:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b069:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b06d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b071:	8b 3c 24             	mov    (%esp),%edi
 804b074:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b078:	f6 45 00 20          	testb  $0x20,0x0(%ebp)
 804b07c:	74 58                	je     804b0d6 <do_encode+0x6e6>
 804b07e:	66 90                	xchg   %ax,%ax
 804b080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b084:	89 3c 24             	mov    %edi,(%esp)
 804b087:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b08b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b08f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b093:	b9 76 b0 00 00       	mov    $0xb076,%ecx
 804b098:	e8 63 44 00 00       	call   804f500 <__afl_maybe_log>
 804b09d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b0a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b0a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b0a9:	8b 3c 24             	mov    (%esp),%edi
 804b0ac:	8d 64 24 10          	lea    0x10(%esp),%esp
        error(1, (*__errno_location()), gettext("read error"));
 804b0b0:	52                   	push   %edx
 804b0b1:	6a 05                	push   $0x5
 804b0b3:	68 68 30 06 08       	push   $0x8063068
 804b0b8:	6a 00                	push   $0x0
 804b0ba:	e8 21 e1 ff ff       	call   80491e0 <dcgettext@plt>
 804b0bf:	89 c5                	mov    %eax,%ebp
 804b0c1:	e8 0a e3 ff ff       	call   80493d0 <__errno_location@plt>
 804b0c6:	83 c4 0c             	add    $0xc,%esp
 804b0c9:	55                   	push   %ebp
 804b0ca:	ff 30                	pushl  (%eax)
 804b0cc:	6a 01                	push   $0x1
 804b0ce:	e8 bd e1 ff ff       	call   8049290 <error@plt>
 804b0d3:	83 c4 10             	add    $0x10,%esp
 804b0d6:	66 90                	xchg   %ax,%ax
}
;
}
 804b0d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b0dc:	89 3c 24             	mov    %edi,(%esp)
 804b0df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b0e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b0e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b0eb:	b9 9a 0f 00 00       	mov    $0xf9a,%ecx
 804b0f0:	e8 0b 44 00 00       	call   804f500 <__afl_maybe_log>
 804b0f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b0f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b0fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b101:	8b 3c 24             	mov    (%esp),%edi
 804b104:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b108:	81 c4 3c 18 01 00    	add    $0x1183c,%esp
 804b10e:	5b                   	pop    %ebx
 804b10f:	5e                   	pop    %esi
 804b110:	5f                   	pop    %edi
 804b111:	5d                   	pop    %ebp
 804b112:	c3                   	ret    
 804b113:	90                   	nop
 804b114:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	report_label_coverage("ROR", 215);
}
// ROR Label 216
if((sum < 0) != (sum > 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 216);
 804b118:	83 ec 08             	sub    $0x8,%esp
// ABS Label 218
if(sum < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 218);
}
base64_encode(inbuf, sum, outbuf, ((((sum) + 2) / 3) * 4));
 804b11b:	bf ab aa aa aa       	mov    $0xaaaaaaab,%edi
	report_label_coverage("ROR", 215);
}
// ROR Label 216
if((sum < 0) != (sum > 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 216);
 804b120:	68 d8 00 00 00       	push   $0xd8
 804b125:	68 48 30 06 08       	push   $0x8063048
 804b12a:	e8 81 f8 ff ff       	call   804a9b0 <report_label_coverage>
// ABS Label 218
if(sum < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 218);
}
base64_encode(inbuf, sum, outbuf, ((((sum) + 2) / 3) * 4));
 804b12f:	8d 43 02             	lea    0x2(%ebx),%eax
 804b132:	f7 e7                	mul    %edi
 804b134:	d1 ea                	shr    %edx
 804b136:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
 804b13d:	89 74 24 28          	mov    %esi,0x28(%esp)
 804b141:	56                   	push   %esi
 804b142:	8d 8c 24 44 78 00 00 	lea    0x7844(%esp),%ecx
 804b149:	51                   	push   %ecx
 804b14a:	53                   	push   %ebx
 804b14b:	8d 44 24 4c          	lea    0x4c(%esp),%eax
 804b14f:	50                   	push   %eax
 804b150:	e8 fb 4f 00 00       	call   8050150 <base64_encode>
asm volatile (""::: "memory");
	report_label_coverage("ABS", 181);
}

// ROR Label 182
if((wrap_column != 0) != (wrap_column == 0))  {
 804b155:	83 c4 20             	add    $0x20,%esp
 804b158:	8b 7c 24 2c          	mov    0x2c(%esp),%edi
 804b15c:	85 ff                	test   %edi,%edi
 804b15e:	0f 94 c0             	sete   %al
 804b161:	0f 95 c1             	setne  %cl
 804b164:	38 c1                	cmp    %al,%cl
 804b166:	88 44 24 24          	mov    %al,0x24(%esp)
 804b16a:	0f 84 b0 0c 00 00    	je     804be20 <do_encode+0x1430>
 804b170:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b174:	89 3c 24             	mov    %edi,(%esp)
 804b177:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b17b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b17f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b183:	b9 57 ac 00 00       	mov    $0xac57,%ecx
 804b188:	e8 73 43 00 00       	call   804f500 <__afl_maybe_log>
 804b18d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b191:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b195:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b199:	8b 3c 24             	mov    (%esp),%edi
 804b19c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 182);
 804b1a0:	83 ec 08             	sub    $0x8,%esp
 804b1a3:	68 b6 00 00 00       	push   $0xb6
 804b1a8:	68 48 30 06 08       	push   $0x8063048
 804b1ad:	e8 fe f7 ff ff       	call   804a9b0 <report_label_coverage>
}
if (wrap_column == 0)
 804b1b2:	83 c4 10             	add    $0x10,%esp
 804b1b5:	0f b6 54 24 24       	movzbl 0x24(%esp),%edx
 804b1ba:	84 d2                	test   %dl,%dl
 804b1bc:	0f 84 56 02 00 00    	je     804b418 <do_encode+0xa28>
 804b1c2:	66 90                	xchg   %ax,%ax
 804b1c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b1c8:	89 3c 24             	mov    %edi,(%esp)
 804b1cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b1cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b1d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b1d7:	b9 e7 77 00 00       	mov    $0x77e7,%ecx
 804b1dc:	e8 1f 43 00 00       	call   804f500 <__afl_maybe_log>
 804b1e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b1e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b1e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b1ed:	8b 3c 24             	mov    (%esp),%edi
 804b1f0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      /* Simple write. */
      {
    size_t temp_1 = fwrite_unlocked(buffer, 1, len, stdout);
 804b1f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b1f8:	89 3c 24             	mov    %edi,(%esp)
 804b1fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b1ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b203:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b207:	b9 9a b9 00 00       	mov    $0xb99a,%ecx
 804b20c:	e8 ef 42 00 00       	call   804f500 <__afl_maybe_log>
 804b211:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b215:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b219:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b21d:	8b 3c 24             	mov    (%esp),%edi
 804b220:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b224:	ff 35 d8 72 06 08    	pushl  0x80672d8
 804b22a:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
 804b22e:	57                   	push   %edi
 804b22f:	6a 01                	push   $0x1
 804b231:	8d b4 24 3c 78 00 00 	lea    0x783c(%esp),%esi
 804b238:	56                   	push   %esi
 804b239:	e8 c2 e1 ff ff       	call   8049400 <fwrite_unlocked@plt>
asm volatile (""::: "memory");
	report_label_coverage("ABS", 184);
}

// ROR Label 185
if((temp_1 <= len) != (temp_1 < len))  {
 804b23e:	83 c4 10             	add    $0x10,%esp
 804b241:	39 c7                	cmp    %eax,%edi
}
if (wrap_column == 0)
    {
      /* Simple write. */
      {
    size_t temp_1 = fwrite_unlocked(buffer, 1, len, stdout);
 804b243:	89 c6                	mov    %eax,%esi
asm volatile (""::: "memory");
	report_label_coverage("ABS", 184);
}

// ROR Label 185
if((temp_1 <= len) != (temp_1 < len))  {
 804b245:	0f 93 c2             	setae  %dl
 804b248:	0f 97 c0             	seta   %al
 804b24b:	38 c2                	cmp    %al,%dl
 804b24d:	89 c7                	mov    %eax,%edi
 804b24f:	74 48                	je     804b299 <do_encode+0x8a9>
 804b251:	8d 76 00             	lea    0x0(%esi),%esi
 804b254:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b258:	89 3c 24             	mov    %edi,(%esp)
 804b25b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b25f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b263:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b267:	b9 dc ba 00 00       	mov    $0xbadc,%ecx
 804b26c:	e8 8f 42 00 00       	call   804f500 <__afl_maybe_log>
 804b271:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b275:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b279:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b27d:	8b 3c 24             	mov    (%esp),%edi
 804b280:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 185);
 804b284:	83 ec 08             	sub    $0x8,%esp
 804b287:	68 b9 00 00 00       	push   $0xb9
 804b28c:	68 48 30 06 08       	push   $0x8063048
 804b291:	e8 1a f7 ff ff       	call   804a9b0 <report_label_coverage>
 804b296:	83 c4 10             	add    $0x10,%esp
 804b299:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 186
if((temp_1 > len) != (temp_1 < len))  {
 804b29c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b2a0:	89 3c 24             	mov    %edi,(%esp)
 804b2a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b2a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b2ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b2af:	b9 c6 e8 00 00       	mov    $0xe8c6,%ecx
 804b2b4:	e8 47 42 00 00       	call   804f500 <__afl_maybe_log>
 804b2b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b2bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b2c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b2c5:	8b 3c 24             	mov    (%esp),%edi
 804b2c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b2cc:	39 74 24 18          	cmp    %esi,0x18(%esp)
 804b2d0:	89 fa                	mov    %edi,%edx
 804b2d2:	0f 92 c0             	setb   %al
 804b2d5:	38 c2                	cmp    %al,%dl
 804b2d7:	74 48                	je     804b321 <do_encode+0x931>
 804b2d9:	8d 76 00             	lea    0x0(%esi),%esi
 804b2dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b2e0:	89 3c 24             	mov    %edi,(%esp)
 804b2e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b2e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b2eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b2ef:	b9 65 b6 00 00       	mov    $0xb665,%ecx
 804b2f4:	e8 07 42 00 00       	call   804f500 <__afl_maybe_log>
 804b2f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b2fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b301:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b305:	8b 3c 24             	mov    (%esp),%edi
 804b308:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 186);
 804b30c:	83 ec 08             	sub    $0x8,%esp
 804b30f:	68 ba 00 00 00       	push   $0xba
 804b314:	68 48 30 06 08       	push   $0x8063048
 804b319:	e8 92 f6 ff ff       	call   804a9b0 <report_label_coverage>
 804b31e:	83 c4 10             	add    $0x10,%esp
 804b321:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 187
if((temp_1 >= len) != (temp_1 < len))  {
 804b324:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b328:	89 3c 24             	mov    %edi,(%esp)
 804b32b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b32f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b333:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b337:	b9 06 ec 00 00       	mov    $0xec06,%ecx
 804b33c:	e8 bf 41 00 00       	call   804f500 <__afl_maybe_log>
 804b341:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b345:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b349:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b34d:	8b 3c 24             	mov    (%esp),%edi
 804b350:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b354:	39 74 24 18          	cmp    %esi,0x18(%esp)
 804b358:	89 f9                	mov    %edi,%ecx
 804b35a:	0f 96 c0             	setbe  %al
 804b35d:	38 c1                	cmp    %al,%cl
 804b35f:	74 48                	je     804b3a9 <do_encode+0x9b9>
 804b361:	8d 76 00             	lea    0x0(%esi),%esi
 804b364:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b368:	89 3c 24             	mov    %edi,(%esp)
 804b36b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b36f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b373:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b377:	b9 e7 fb 00 00       	mov    $0xfbe7,%ecx
 804b37c:	e8 7f 41 00 00       	call   804f500 <__afl_maybe_log>
 804b381:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b385:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b389:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b38d:	8b 3c 24             	mov    (%esp),%edi
 804b390:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 187);
 804b394:	83 ec 08             	sub    $0x8,%esp
 804b397:	68 bb 00 00 00       	push   $0xbb
 804b39c:	68 48 30 06 08       	push   $0x8063048
 804b3a1:	e8 0a f6 ff ff       	call   804a9b0 <report_label_coverage>
 804b3a6:	83 c4 10             	add    $0x10,%esp
 804b3a9:	8d 76 00             	lea    0x0(%esi),%esi
}
if (temp_1 < len)
 804b3ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b3b0:	89 3c 24             	mov    %edi,(%esp)
 804b3b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b3b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b3bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b3bf:	b9 d7 8b 00 00       	mov    $0x8bd7,%ecx
 804b3c4:	e8 37 41 00 00       	call   804f500 <__afl_maybe_log>
 804b3c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b3cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b3d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b3d5:	8b 3c 24             	mov    (%esp),%edi
 804b3d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b3dc:	89 fa                	mov    %edi,%edx
 804b3de:	84 d2                	test   %dl,%dl
 804b3e0:	0f 85 9f 0c 00 00    	jne    804c085 <do_encode+0x1695>
 804b3e6:	66 90                	xchg   %ax,%ax
 804b3e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b3ec:	89 3c 24             	mov    %edi,(%esp)
 804b3ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b3f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b3f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b3fb:	b9 09 9a 00 00       	mov    $0x9a09,%ecx
 804b400:	e8 fb 40 00 00       	call   804f500 <__afl_maybe_log>
 804b405:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b409:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b40d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b411:	8b 3c 24             	mov    (%esp),%edi
 804b414:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 189);
}

// ROR Label 190
if((written <= len) != (written < len))  {
 804b418:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b41c:	89 3c 24             	mov    %edi,(%esp)
 804b41f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b423:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b427:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b42b:	b9 c7 e6 00 00       	mov    $0xe6c7,%ecx
 804b430:	e8 cb 40 00 00       	call   804f500 <__afl_maybe_log>
 804b435:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b439:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b43d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b441:	8b 3c 24             	mov    (%esp),%edi
 804b444:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b448:	8b 7c 24 18          	mov    0x18(%esp),%edi
 804b44c:	85 ff                	test   %edi,%edi
 804b44e:	0f 84 40 0a 00 00    	je     804be94 <do_encode+0x14a4>
 804b454:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b458:	89 3c 24             	mov    %edi,(%esp)
 804b45b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b45f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b463:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b467:	b9 47 c4 00 00       	mov    $0xc447,%ecx
 804b46c:	e8 8f 40 00 00       	call   804f500 <__afl_maybe_log>
 804b471:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b475:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b479:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b47d:	8b 3c 24             	mov    (%esp),%edi
 804b480:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 190);
}
// ROR Label 191
if((written > len) != (written < len))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 191);
 804b484:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b488:	89 3c 24             	mov    %edi,(%esp)
 804b48b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b48f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b493:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b497:	b9 5d 45 00 00       	mov    $0x455d,%ecx
 804b49c:	e8 5f 40 00 00       	call   804f500 <__afl_maybe_log>
 804b4a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b4a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b4a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b4ad:	8b 3c 24             	mov    (%esp),%edi
 804b4b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b4b4:	83 ec 08             	sub    $0x8,%esp
 804b4b7:	68 bf 00 00 00       	push   $0xbf
 804b4bc:	68 48 30 06 08       	push   $0x8063048
 804b4c1:	e8 ea f4 ff ff       	call   804a9b0 <report_label_coverage>
 804b4c6:	83 c4 10             	add    $0x10,%esp
 804b4c9:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 192
if((written >= len) != (written < len))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 192);
 804b4cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b4d0:	89 3c 24             	mov    %edi,(%esp)
 804b4d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b4d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b4db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b4df:	b9 9b da 00 00       	mov    $0xda9b,%ecx
 804b4e4:	e8 17 40 00 00       	call   804f500 <__afl_maybe_log>
 804b4e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b4ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b4f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b4f5:	8b 3c 24             	mov    (%esp),%edi
 804b4f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b4fc:	83 ec 08             	sub    $0x8,%esp
}
for (; written < len;)
 804b4ff:	31 f6                	xor    %esi,%esi
	report_label_coverage("ROR", 191);
}
// ROR Label 192
if((written >= len) != (written < len))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 192);
 804b501:	68 c0 00 00 00       	push   $0xc0
 804b506:	68 48 30 06 08       	push   $0x8063048
 804b50b:	e8 a0 f4 ff ff       	call   804a9b0 <report_label_coverage>
}
for (; written < len;)
 804b510:	83 c4 10             	add    $0x10,%esp
 804b513:	8b 44 24 18          	mov    0x18(%esp),%eax
 804b517:	31 c9                	xor    %ecx,%ecx
 804b519:	85 c0                	test   %eax,%eax
 804b51b:	0f 84 2f 08 00 00    	je     804bd50 <do_encode+0x1360>
 804b521:	8d 76 00             	lea    0x0(%esi),%esi
 804b524:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b528:	89 3c 24             	mov    %edi,(%esp)
 804b52b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b52f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b533:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b537:	b9 4a ee 00 00       	mov    $0xee4a,%ecx
 804b53c:	e8 bf 3f 00 00       	call   804f500 <__afl_maybe_log>
 804b541:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b545:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b549:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b54d:	8b 3c 24             	mov    (%esp),%edi
 804b550:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b554:	89 5c 24 24          	mov    %ebx,0x24(%esp)
 804b558:	89 6c 24 28          	mov    %ebp,0x28(%esp)
 804b55c:	89 cd                	mov    %ecx,%ebp
 804b55e:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 804b562:	e9 81 02 00 00       	jmp    804b7e8 <do_encode+0xdf8>
 804b567:	89 f6                	mov    %esi,%esi
 804b569:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
}

// ROR Label 204
if((to_write != 0) != (to_write == 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 204);
 804b570:	83 ec 08             	sub    $0x8,%esp
 804b573:	68 cc 00 00 00       	push   $0xcc
 804b578:	68 48 30 06 08       	push   $0x8063048
 804b57d:	e8 2e f4 ff ff       	call   804a9b0 <report_label_coverage>
}
if (to_write == 0)
 804b582:	83 c4 10             	add    $0x10,%esp
 804b585:	0f b6 54 24 1c       	movzbl 0x1c(%esp),%edx
 804b58a:	84 d2                	test   %dl,%dl
 804b58c:	0f 84 ba 03 00 00    	je     804b94c <do_encode+0xf5c>
 804b592:	66 90                	xchg   %ax,%ax
 804b594:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b598:	89 3c 24             	mov    %edi,(%esp)
 804b59b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b59f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b5a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b5a7:	b9 a1 9a 00 00       	mov    $0x9aa1,%ecx
 804b5ac:	e8 4f 3f 00 00       	call   804f500 <__afl_maybe_log>
 804b5b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b5b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b5b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b5bd:	8b 3c 24             	mov    (%esp),%edi
 804b5c0:	8d 64 24 10          	lea    0x10(%esp),%esp
# ifdef __USE_MISC
/* Faster version when locking is not necessary.  */
__STDIO_INLINE int
fputc_unlocked (int __c, FILE *__stream)
{
  return _IO_putc_unlocked (__c, __stream);
 804b5c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b5c8:	89 3c 24             	mov    %edi,(%esp)
 804b5cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b5cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b5d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b5d7:	b9 96 d9 00 00       	mov    $0xd996,%ecx
 804b5dc:	e8 1f 3f 00 00       	call   804f500 <__afl_maybe_log>
 804b5e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b5e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b5e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b5ed:	8b 3c 24             	mov    (%esp),%edi
 804b5f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b5f4:	8b 5c 24 20          	mov    0x20(%esp),%ebx
 804b5f8:	8b 43 14             	mov    0x14(%ebx),%eax
 804b5fb:	3b 43 18             	cmp    0x18(%ebx),%eax
 804b5fe:	0f 83 a4 07 00 00    	jae    804bda8 <do_encode+0x13b8>
 804b604:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b608:	89 3c 24             	mov    %edi,(%esp)
 804b60b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b60f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b613:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b617:	b9 ae 29 00 00       	mov    $0x29ae,%ecx
 804b61c:	e8 df 3e 00 00       	call   804f500 <__afl_maybe_log>
 804b621:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b625:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b629:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b62d:	8b 3c 24             	mov    (%esp),%edi
 804b630:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b634:	8b 4c 24 20          	mov    0x20(%esp),%ecx
 804b638:	8d 50 01             	lea    0x1(%eax),%edx
 804b63b:	89 51 14             	mov    %edx,0x14(%ecx)
 804b63e:	c6 00 0a             	movb   $0xa,(%eax)
 804b641:	8d 76 00             	lea    0x0(%esi),%esi
 804b644:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b648:	89 3c 24             	mov    %edi,(%esp)
 804b64b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b64f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b653:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b657:	b9 96 eb 00 00       	mov    $0xeb96,%ecx
 804b65c:	e8 9f 3e 00 00       	call   804f500 <__afl_maybe_log>
 804b661:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b665:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b669:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b66d:	8b 3c 24             	mov    (%esp),%edi
 804b670:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b674:	0f b6 5c 24 17       	movzbl 0x17(%esp),%ebx
 804b679:	31 f6                	xor    %esi,%esi
 804b67b:	90                   	nop
	report_label_coverage("ABS", 205);
}
// ABS Label 206
if(temp_2 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 206);
 804b67c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b680:	89 3c 24             	mov    %edi,(%esp)
 804b683:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b687:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b68b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b68f:	b9 b9 c1 00 00       	mov    $0xc1b9,%ecx
 804b694:	e8 67 3e 00 00       	call   804f500 <__afl_maybe_log>
 804b699:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b69d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b6a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b6a5:	8b 3c 24             	mov    (%esp),%edi
 804b6a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b6ac:	83 ec 08             	sub    $0x8,%esp
 804b6af:	68 ce 00 00 00       	push   $0xce
 804b6b4:	68 5c 30 06 08       	push   $0x806305c
 804b6b9:	e8 f2 f2 ff ff       	call   804a9b0 <report_label_coverage>
}

// ROR Label 207
if((temp_1 != temp_2) != (temp_1 == temp_2))  {
 804b6be:	89 f2                	mov    %esi,%edx
 804b6c0:	83 c4 10             	add    $0x10,%esp
 804b6c3:	38 da                	cmp    %bl,%dl
 804b6c5:	74 46                	je     804b70d <do_encode+0xd1d>
 804b6c7:	90                   	nop
 804b6c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b6cc:	89 3c 24             	mov    %edi,(%esp)
 804b6cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b6d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b6d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b6db:	b9 58 49 00 00       	mov    $0x4958,%ecx
 804b6e0:	e8 1b 3e 00 00       	call   804f500 <__afl_maybe_log>
 804b6e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b6e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b6ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b6f1:	8b 3c 24             	mov    (%esp),%edi
 804b6f4:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 207);
 804b6f8:	83 ec 08             	sub    $0x8,%esp
 804b6fb:	68 cf 00 00 00       	push   $0xcf
 804b700:	68 48 30 06 08       	push   $0x8063048
 804b705:	e8 a6 f2 ff ff       	call   804a9b0 <report_label_coverage>
 804b70a:	83 c4 10             	add    $0x10,%esp
 804b70d:	8d 76 00             	lea    0x0(%esi),%esi
}
if (temp_1 == temp_2)
 804b710:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b714:	89 3c 24             	mov    %edi,(%esp)
 804b717:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b71b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b71f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b723:	b9 9f 2a 00 00       	mov    $0x2a9f,%ecx
 804b728:	e8 d3 3d 00 00       	call   804f500 <__afl_maybe_log>
 804b72d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b731:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b735:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b739:	8b 3c 24             	mov    (%esp),%edi
 804b73c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b740:	89 f1                	mov    %esi,%ecx
        error(1, (*__errno_location()), gettext("write error"));
}
;
            *current_column = 0;
 804b742:	31 db                	xor    %ebx,%ebx
// ROR Label 207
if((temp_1 != temp_2) != (temp_1 == temp_2))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 207);
}
if (temp_1 == temp_2)
 804b744:	84 c9                	test   %cl,%cl
 804b746:	0f 85 d4 05 00 00    	jne    804bd20 <do_encode+0x1330>
 804b74c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b750:	89 3c 24             	mov    %edi,(%esp)
 804b753:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b757:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b75b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b75f:	b9 89 7c 00 00       	mov    $0x7c89,%ecx
 804b764:	e8 97 3d 00 00       	call   804f500 <__afl_maybe_log>
 804b769:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b76d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b771:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b775:	8b 3c 24             	mov    (%esp),%edi
 804b778:	8d 64 24 10          	lea    0x10(%esp),%esp
// ROR Label 192
if((written >= len) != (written < len))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 192);
}
for (; written < len;)
 804b77c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b780:	89 3c 24             	mov    %edi,(%esp)
 804b783:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b78b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b78f:	b9 64 30 00 00       	mov    $0x3064,%ecx
 804b794:	e8 67 3d 00 00       	call   804f500 <__afl_maybe_log>
 804b799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b79d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b7a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b7a5:	8b 3c 24             	mov    (%esp),%edi
 804b7a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b7ac:	3b 6c 24 18          	cmp    0x18(%esp),%ebp
 804b7b0:	0f 83 2e 04 00 00    	jae    804bbe4 <do_encode+0x11f4>
 804b7b6:	66 90                	xchg   %ax,%ax
 804b7b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b7bc:	89 3c 24             	mov    %edi,(%esp)
 804b7bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b7c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b7c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b7cb:	b9 e1 09 00 00       	mov    $0x9e1,%ecx
 804b7d0:	e8 2b 3d 00 00       	call   804f500 <__afl_maybe_log>
 804b7d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b7d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b7dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b7e1:	8b 3c 24             	mov    (%esp),%edi
 804b7e4:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ABS", 199);
}


// AOR Label 202
if(wrap_column * *current_column != wrap_column - *current_column)  {
 804b7e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b7ec:	89 3c 24             	mov    %edi,(%esp)
 804b7ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b7f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b7f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b7fb:	b9 0d 94 00 00       	mov    $0x940d,%ecx
 804b800:	e8 fb 3c 00 00       	call   804f500 <__afl_maybe_log>
 804b805:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b809:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b80d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b811:	8b 3c 24             	mov    (%esp),%edi
 804b814:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b818:	8b 74 24 08          	mov    0x8(%esp),%esi
 804b81c:	8b 7c 24 0c          	mov    0xc(%esp),%edi
 804b820:	31 d2                	xor    %edx,%edx
 804b822:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 804b826:	8b 44 24 08          	mov    0x8(%esp),%eax
 804b82a:	29 de                	sub    %ebx,%esi
 804b82c:	19 d7                	sbb    %edx,%edi
 804b82e:	f7 e3                	mul    %ebx
 804b830:	0f af cb             	imul   %ebx,%ecx
 804b833:	31 f0                	xor    %esi,%eax
 804b835:	01 ca                	add    %ecx,%edx
 804b837:	31 fa                	xor    %edi,%edx
 804b839:	09 c2                	or     %eax,%edx
 804b83b:	74 48                	je     804b885 <do_encode+0xe95>
 804b83d:	8d 76 00             	lea    0x0(%esi),%esi
 804b840:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b844:	89 3c 24             	mov    %edi,(%esp)
 804b847:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b84b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b84f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b853:	b9 5f 3a 00 00       	mov    $0x3a5f,%ecx
 804b858:	e8 a3 3c 00 00       	call   804f500 <__afl_maybe_log>
 804b85d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b861:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b865:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b869:	8b 3c 24             	mov    (%esp),%edi
 804b86c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("AOR", 202);
 804b870:	83 ec 08             	sub    $0x8,%esp
 804b873:	68 ca 00 00 00       	push   $0xca
 804b878:	68 58 30 06 08       	push   $0x8063058
 804b87d:	e8 2e f1 ff ff       	call   804a9b0 <report_label_coverage>
 804b882:	83 c4 10             	add    $0x10,%esp
 804b885:	8d 76 00             	lea    0x0(%esi),%esi
}
uintmax_t cols_remaining = wrap_column - *current_column;
        size_t to_write = MIN (cols_remaining, SIZE_MAX);
 804b888:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b88c:	89 3c 24             	mov    %edi,(%esp)
 804b88f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b893:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b897:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b89b:	b9 11 01 00 00       	mov    $0x111,%ecx
 804b8a0:	e8 5b 3c 00 00       	call   804f500 <__afl_maybe_log>
 804b8a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b8a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b8ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b8b1:	8b 3c 24             	mov    (%esp),%edi
 804b8b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b8b8:	85 ff                	test   %edi,%edi
 804b8ba:	bf ff ff ff ff       	mov    $0xffffffff,%edi
 804b8bf:	0f 44 fe             	cmove  %esi,%edi
        to_write = MIN (to_write, len - written);
 804b8c2:	8b 74 24 18          	mov    0x18(%esp),%esi
 804b8c6:	29 ee                	sub    %ebp,%esi
 804b8c8:	39 fe                	cmp    %edi,%esi
 804b8ca:	0f 43 f7             	cmovae %edi,%esi
asm volatile (""::: "memory");
	report_label_coverage("ABS", 203);
}

// ROR Label 204
if((to_write != 0) != (to_write == 0))  {
 804b8cd:	85 f6                	test   %esi,%esi
 804b8cf:	0f 94 c0             	sete   %al
 804b8d2:	0f 95 c1             	setne  %cl
 804b8d5:	38 c1                	cmp    %al,%cl
 804b8d7:	88 44 24 1c          	mov    %al,0x1c(%esp)
 804b8db:	0f 85 8f fc ff ff    	jne    804b570 <do_encode+0xb80>
 804b8e1:	8d 76 00             	lea    0x0(%esi),%esi
 804b8e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b8e8:	89 3c 24             	mov    %edi,(%esp)
 804b8eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b8ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b8f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b8f7:	b9 ce 98 00 00       	mov    $0x98ce,%ecx
 804b8fc:	e8 ff 3b 00 00       	call   804f500 <__afl_maybe_log>
 804b901:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b905:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b909:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b90d:	8b 3c 24             	mov    (%esp),%edi
 804b910:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 204);
}
if (to_write == 0)
 804b914:	84 c9                	test   %cl,%cl
 804b916:	0f 85 a8 fc ff ff    	jne    804b5c4 <do_encode+0xbd4>
 804b91c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b920:	89 3c 24             	mov    %edi,(%esp)
 804b923:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b927:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b92b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b92f:	b9 59 07 00 00       	mov    $0x759,%ecx
 804b934:	e8 c7 3b 00 00       	call   804f500 <__afl_maybe_log>
 804b939:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b93d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b941:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b945:	8b 3c 24             	mov    (%esp),%edi
 804b948:	8d 64 24 10          	lea    0x10(%esp),%esp
            *current_column = 0;
          }
        else
          {
            {
    size_t temp_1 = fwrite_unlocked(buffer + written, 1, to_write, stdout);
 804b94c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b950:	89 3c 24             	mov    %edi,(%esp)
 804b953:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b957:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b95b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b95f:	b9 be b5 00 00       	mov    $0xb5be,%ecx
 804b964:	e8 97 3b 00 00       	call   804f500 <__afl_maybe_log>
 804b969:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b96d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b971:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b975:	8b 3c 24             	mov    (%esp),%edi
 804b978:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b97c:	ff 35 d8 72 06 08    	pushl  0x80672d8
 804b982:	56                   	push   %esi
 804b983:	6a 01                	push   $0x1
 804b985:	8d bc 24 3c 78 00 00 	lea    0x783c(%esp),%edi
 804b98c:	01 ef                	add    %ebp,%edi
 804b98e:	57                   	push   %edi
 804b98f:	e8 6c da ff ff       	call   8049400 <fwrite_unlocked@plt>
asm volatile (""::: "memory");
	report_label_coverage("ABS", 209);
}

// ROR Label 210
if((temp_1 <= to_write) != (temp_1 < to_write))  {
 804b994:	83 c4 10             	add    $0x10,%esp
 804b997:	39 c6                	cmp    %eax,%esi
 804b999:	0f 97 c1             	seta   %cl
 804b99c:	0f 93 c2             	setae  %dl
 804b99f:	38 ca                	cmp    %cl,%dl
 804b9a1:	89 cf                	mov    %ecx,%edi
 804b9a3:	74 50                	je     804b9f5 <do_encode+0x1005>
 804b9a5:	8d 76 00             	lea    0x0(%esi),%esi
 804b9a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b9ac:	89 3c 24             	mov    %edi,(%esp)
 804b9af:	89 54 24 04          	mov    %edx,0x4(%esp)
 804b9b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804b9b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804b9bb:	b9 33 fe 00 00       	mov    $0xfe33,%ecx
 804b9c0:	e8 3b 3b 00 00       	call   804f500 <__afl_maybe_log>
 804b9c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804b9c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804b9cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804b9d1:	8b 3c 24             	mov    (%esp),%edi
 804b9d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804b9d8:	89 44 24 1c          	mov    %eax,0x1c(%esp)
asm volatile (""::: "memory");
	report_label_coverage("ROR", 210);
 804b9dc:	83 ec 08             	sub    $0x8,%esp
 804b9df:	68 d2 00 00 00       	push   $0xd2
 804b9e4:	68 48 30 06 08       	push   $0x8063048
 804b9e9:	e8 c2 ef ff ff       	call   804a9b0 <report_label_coverage>
 804b9ee:	83 c4 10             	add    $0x10,%esp
 804b9f1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 804b9f5:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 211
if((temp_1 > to_write) != (temp_1 < to_write))  {
 804b9f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804b9fc:	89 3c 24             	mov    %edi,(%esp)
 804b9ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ba03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ba07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ba0b:	b9 b4 d2 00 00       	mov    $0xd2b4,%ecx
 804ba10:	e8 eb 3a 00 00       	call   804f500 <__afl_maybe_log>
 804ba15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ba19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ba1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ba21:	8b 3c 24             	mov    (%esp),%edi
 804ba24:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ba28:	39 c6                	cmp    %eax,%esi
 804ba2a:	89 f9                	mov    %edi,%ecx
 804ba2c:	0f 92 c2             	setb   %dl
 804ba2f:	38 d1                	cmp    %dl,%cl
 804ba31:	74 4e                	je     804ba81 <do_encode+0x1091>
 804ba33:	90                   	nop
 804ba34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ba38:	89 3c 24             	mov    %edi,(%esp)
 804ba3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ba3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ba43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ba47:	b9 47 68 00 00       	mov    $0x6847,%ecx
 804ba4c:	e8 af 3a 00 00       	call   804f500 <__afl_maybe_log>
 804ba51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ba55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ba59:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ba5d:	8b 3c 24             	mov    (%esp),%edi
 804ba60:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ba64:	89 44 24 1c          	mov    %eax,0x1c(%esp)
asm volatile (""::: "memory");
	report_label_coverage("ROR", 211);
 804ba68:	83 ec 08             	sub    $0x8,%esp
 804ba6b:	68 d3 00 00 00       	push   $0xd3
 804ba70:	68 48 30 06 08       	push   $0x8063048
 804ba75:	e8 36 ef ff ff       	call   804a9b0 <report_label_coverage>
 804ba7a:	83 c4 10             	add    $0x10,%esp
 804ba7d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 804ba81:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 212
if((temp_1 >= to_write) != (temp_1 < to_write))  {
 804ba84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ba88:	89 3c 24             	mov    %edi,(%esp)
 804ba8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ba8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ba93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ba97:	b9 d4 ba 00 00       	mov    $0xbad4,%ecx
 804ba9c:	e8 5f 3a 00 00       	call   804f500 <__afl_maybe_log>
 804baa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804baa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804baa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804baad:	8b 3c 24             	mov    (%esp),%edi
 804bab0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bab4:	39 c6                	cmp    %eax,%esi
 804bab6:	89 fa                	mov    %edi,%edx
 804bab8:	0f 96 c0             	setbe  %al
 804babb:	38 c2                	cmp    %al,%dl
 804babd:	74 46                	je     804bb05 <do_encode+0x1115>
 804babf:	90                   	nop
 804bac0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bac4:	89 3c 24             	mov    %edi,(%esp)
 804bac7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bacb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bacf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bad3:	b9 e4 fc 00 00       	mov    $0xfce4,%ecx
 804bad8:	e8 23 3a 00 00       	call   804f500 <__afl_maybe_log>
 804badd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bae1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bae5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bae9:	8b 3c 24             	mov    (%esp),%edi
 804baec:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 212);
 804baf0:	83 ec 08             	sub    $0x8,%esp
 804baf3:	68 d4 00 00 00       	push   $0xd4
 804baf8:	68 48 30 06 08       	push   $0x8063048
 804bafd:	e8 ae ee ff ff       	call   804a9b0 <report_label_coverage>
 804bb02:	83 c4 10             	add    $0x10,%esp
 804bb05:	8d 76 00             	lea    0x0(%esi),%esi
}
if (temp_1 < to_write)
 804bb08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bb0c:	89 3c 24             	mov    %edi,(%esp)
 804bb0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bb13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bb17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bb1b:	b9 a3 aa 00 00       	mov    $0xaaa3,%ecx
 804bb20:	e8 db 39 00 00       	call   804f500 <__afl_maybe_log>
 804bb25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bb29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bb2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bb31:	8b 3c 24             	mov    (%esp),%edi
 804bb34:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bb38:	89 f9                	mov    %edi,%ecx
 804bb3a:	84 c9                	test   %cl,%cl
 804bb3c:	0f 85 ae 01 00 00    	jne    804bcf0 <do_encode+0x1300>
 804bb42:	66 90                	xchg   %ax,%ax
 804bb44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bb48:	89 3c 24             	mov    %edi,(%esp)
 804bb4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bb4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bb53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bb57:	b9 b9 a8 00 00       	mov    $0xa8b9,%ecx
 804bb5c:	e8 9f 39 00 00       	call   804f500 <__afl_maybe_log>
 804bb61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bb65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bb69:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bb6d:	8b 3c 24             	mov    (%esp),%edi
 804bb70:	8d 64 24 10          	lea    0x10(%esp),%esp
        error(1, (*__errno_location()), gettext("write error"));
}
;
            *current_column += to_write;
 804bb74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bb78:	89 3c 24             	mov    %edi,(%esp)
 804bb7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bb7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bb83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bb87:	b9 5b 97 00 00       	mov    $0x975b,%ecx
 804bb8c:	e8 6f 39 00 00       	call   804f500 <__afl_maybe_log>
 804bb91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bb95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bb99:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bb9d:	8b 3c 24             	mov    (%esp),%edi
 804bba0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bba4:	01 f3                	add    %esi,%ebx
            written += to_write;
 804bba6:	01 f5                	add    %esi,%ebp
// ROR Label 192
if((written >= len) != (written < len))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 192);
}
for (; written < len;)
 804bba8:	3b 6c 24 18          	cmp    0x18(%esp),%ebp
 804bbac:	0f 82 36 fc ff ff    	jb     804b7e8 <do_encode+0xdf8>
 804bbb2:	66 90                	xchg   %ax,%ax
 804bbb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bbb8:	89 3c 24             	mov    %edi,(%esp)
 804bbbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bbbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bbc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bbc7:	b9 73 d4 00 00       	mov    $0xd473,%ecx
 804bbcc:	e8 2f 39 00 00       	call   804f500 <__afl_maybe_log>
 804bbd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bbd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bbd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bbdd:	8b 3c 24             	mov    (%esp),%edi
 804bbe0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bbe4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bbe8:	89 3c 24             	mov    %edi,(%esp)
 804bbeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bbef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bbf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bbf7:	b9 35 4f 00 00       	mov    $0x4f35,%ecx
 804bbfc:	e8 ff 38 00 00       	call   804f500 <__afl_maybe_log>
 804bc01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bc05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bc09:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bc0d:	8b 3c 24             	mov    (%esp),%edi
 804bc10:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bc14:	89 ee                	mov    %ebp,%esi
asm volatile (""::: "memory");
	report_label_coverage("ABS", 194);
}

// ROR Label 195
if((written <= len) != (written < len))  {
 804bc16:	39 74 24 18          	cmp    %esi,0x18(%esp)
 804bc1a:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
 804bc1e:	8b 6c 24 28          	mov    0x28(%esp),%ebp
 804bc22:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 804bc26:	0f 83 24 01 00 00    	jae    804bd50 <do_encode+0x1360>
 804bc2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bc30:	89 3c 24             	mov    %edi,(%esp)
 804bc33:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bc37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bc3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bc3f:	b9 f0 5c 00 00       	mov    $0x5cf0,%ecx
 804bc44:	e8 b7 38 00 00       	call   804f500 <__afl_maybe_log>
 804bc49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bc4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bc51:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bc55:	8b 3c 24             	mov    (%esp),%edi
 804bc58:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 195);
}
// ROR Label 196
if((written > len) != (written < len))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 196);
 804bc5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bc60:	89 3c 24             	mov    %edi,(%esp)
 804bc63:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bc67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bc6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bc6f:	b9 b4 26 00 00       	mov    $0x26b4,%ecx
 804bc74:	e8 87 38 00 00       	call   804f500 <__afl_maybe_log>
 804bc79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bc7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bc81:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bc85:	8b 3c 24             	mov    (%esp),%edi
 804bc88:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bc8c:	83 ec 08             	sub    $0x8,%esp
 804bc8f:	68 c4 00 00 00       	push   $0xc4
 804bc94:	68 48 30 06 08       	push   $0x8063048
 804bc99:	e8 12 ed ff ff       	call   804a9b0 <report_label_coverage>
 804bc9e:	83 c4 10             	add    $0x10,%esp
 804bca1:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 197
if((written >= len) != (written < len))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 197);
 804bca4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bca8:	89 3c 24             	mov    %edi,(%esp)
 804bcab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bcaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bcb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bcb7:	b9 a3 a2 00 00       	mov    $0xa2a3,%ecx
 804bcbc:	e8 3f 38 00 00       	call   804f500 <__afl_maybe_log>
 804bcc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bcc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bcc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bccd:	8b 3c 24             	mov    (%esp),%edi
 804bcd0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bcd4:	83 ec 08             	sub    $0x8,%esp
 804bcd7:	68 c5 00 00 00       	push   $0xc5
 804bcdc:	68 48 30 06 08       	push   $0x8063048
 804bce1:	e8 ca ec ff ff       	call   804a9b0 <report_label_coverage>
 804bce6:	83 c4 10             	add    $0x10,%esp
 804bce9:	e9 87 ef ff ff       	jmp    804ac75 <do_encode+0x285>
 804bcee:	66 90                	xchg   %ax,%ax
if((temp_1 >= to_write) != (temp_1 < to_write))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 212);
}
if (temp_1 < to_write)
        error(1, (*__errno_location()), gettext("write error"));
 804bcf0:	83 ec 04             	sub    $0x4,%esp
 804bcf3:	6a 05                	push   $0x5
 804bcf5:	68 4c 30 06 08       	push   $0x806304c
 804bcfa:	6a 00                	push   $0x0
 804bcfc:	e8 df d4 ff ff       	call   80491e0 <dcgettext@plt>
 804bd01:	89 c7                	mov    %eax,%edi
 804bd03:	e8 c8 d6 ff ff       	call   80493d0 <__errno_location@plt>
 804bd08:	83 c4 0c             	add    $0xc,%esp
 804bd0b:	57                   	push   %edi
 804bd0c:	ff 30                	pushl  (%eax)
 804bd0e:	6a 01                	push   $0x1
 804bd10:	e8 7b d5 ff ff       	call   8049290 <error@plt>
 804bd15:	83 c4 10             	add    $0x10,%esp
 804bd18:	e9 57 fe ff ff       	jmp    804bb74 <do_encode+0x1184>
 804bd1d:	8d 76 00             	lea    0x0(%esi),%esi
if((temp_1 != temp_2) != (temp_1 == temp_2))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 207);
}
if (temp_1 == temp_2)
        error(1, (*__errno_location()), gettext("write error"));
 804bd20:	83 ec 04             	sub    $0x4,%esp
 804bd23:	6a 05                	push   $0x5
 804bd25:	68 4c 30 06 08       	push   $0x806304c
 804bd2a:	6a 00                	push   $0x0
 804bd2c:	e8 af d4 ff ff       	call   80491e0 <dcgettext@plt>
 804bd31:	89 c7                	mov    %eax,%edi
 804bd33:	e8 98 d6 ff ff       	call   80493d0 <__errno_location@plt>
 804bd38:	83 c4 0c             	add    $0xc,%esp
 804bd3b:	57                   	push   %edi
 804bd3c:	ff 30                	pushl  (%eax)
 804bd3e:	6a 01                	push   $0x1
 804bd40:	e8 4b d5 ff ff       	call   8049290 <error@plt>
 804bd45:	83 c4 10             	add    $0x10,%esp
 804bd48:	e9 2f fa ff ff       	jmp    804b77c <do_encode+0xd8c>
 804bd4d:	8d 76 00             	lea    0x0(%esi),%esi
}

// ROR Label 195
if((written <= len) != (written < len))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 195);
 804bd50:	83 ec 08             	sub    $0x8,%esp
 804bd53:	68 c3 00 00 00       	push   $0xc3
 804bd58:	68 48 30 06 08       	push   $0x8063048
 804bd5d:	e8 4e ec ff ff       	call   804a9b0 <report_label_coverage>
 804bd62:	83 c4 10             	add    $0x10,%esp
}
// ROR Label 196
if((written > len) != (written < len))  {
 804bd65:	39 74 24 18          	cmp    %esi,0x18(%esp)
 804bd69:	0f 83 32 ff ff ff    	jae    804bca1 <do_encode+0x12b1>
 804bd6f:	90                   	nop
 804bd70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bd74:	89 3c 24             	mov    %edi,(%esp)
 804bd77:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bd7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bd7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bd83:	b9 ce 67 00 00       	mov    $0x67ce,%ecx
 804bd88:	e8 73 37 00 00       	call   804f500 <__afl_maybe_log>
 804bd8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bd91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bd95:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bd99:	8b 3c 24             	mov    (%esp),%edi
 804bd9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bda0:	e9 b7 fe ff ff       	jmp    804bc5c <do_encode+0x126c>
 804bda5:	8d 76 00             	lea    0x0(%esi),%esi
 804bda8:	83 ec 08             	sub    $0x8,%esp
 804bdab:	6a 0a                	push   $0xa
 804bdad:	ff 74 24 2c          	pushl  0x2c(%esp)
 804bdb1:	e8 ba d6 ff ff       	call   8049470 <__overflow@plt>
            {
    int temp_1 = fputc_unlocked('\n', out);
    int temp_2 = -1;
    
// ABS Label 205
if(temp_1 < 0)  {
 804bdb6:	83 c4 10             	add    $0x10,%esp
 804bdb9:	85 c0                	test   %eax,%eax
 804bdbb:	89 c7                	mov    %eax,%edi
 804bdbd:	0f 89 7e f8 ff ff    	jns    804b641 <do_encode+0xc51>
 804bdc3:	90                   	nop
 804bdc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bdc8:	89 3c 24             	mov    %edi,(%esp)
 804bdcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bdcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bdd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bdd7:	b9 22 f7 00 00       	mov    $0xf722,%ecx
 804bddc:	e8 1f 37 00 00       	call   804f500 <__afl_maybe_log>
 804bde1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bde5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bde9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bded:	8b 3c 24             	mov    (%esp),%edi
 804bdf0:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 205);
 804bdf4:	83 ec 08             	sub    $0x8,%esp
 804bdf7:	68 cd 00 00 00       	push   $0xcd
 804bdfc:	68 5c 30 06 08       	push   $0x806305c
 804be01:	e8 aa eb ff ff       	call   804a9b0 <report_label_coverage>
 804be06:	83 c4 10             	add    $0x10,%esp
 804be09:	83 ff ff             	cmp    $0xffffffff,%edi
 804be0c:	0f 94 c0             	sete   %al
 804be0f:	0f 95 c3             	setne  %bl
 804be12:	89 c6                	mov    %eax,%esi
 804be14:	e9 62 f8 ff ff       	jmp    804b67b <do_encode+0xc8b>
 804be19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
// ROR Label 182
if((wrap_column != 0) != (wrap_column == 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 182);
}
if (wrap_column == 0)
 804be20:	84 c9                	test   %cl,%cl
 804be22:	0f 85 cc f3 ff ff    	jne    804b1f4 <do_encode+0x804>
 804be28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804be2c:	89 3c 24             	mov    %edi,(%esp)
 804be2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804be33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804be37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804be3b:	b9 6a 5f 00 00       	mov    $0x5f6a,%ecx
 804be40:	e8 bb 36 00 00       	call   804f500 <__afl_maybe_log>
 804be45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804be49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804be4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804be51:	8b 3c 24             	mov    (%esp),%edi
 804be54:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 189);
}

// ROR Label 190
if((written <= len) != (written < len))  {
 804be58:	8b 7c 24 18          	mov    0x18(%esp),%edi
 804be5c:	85 ff                	test   %edi,%edi
 804be5e:	0f 85 20 f6 ff ff    	jne    804b484 <do_encode+0xa94>
 804be64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804be68:	89 3c 24             	mov    %edi,(%esp)
 804be6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804be6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804be73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804be77:	b9 8b 2e 00 00       	mov    $0x2e8b,%ecx
 804be7c:	e8 7f 36 00 00       	call   804f500 <__afl_maybe_log>
 804be81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804be85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804be89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804be8d:	8b 3c 24             	mov    (%esp),%edi
 804be90:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 190);
 804be94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804be98:	89 3c 24             	mov    %edi,(%esp)
 804be9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804be9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bea3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bea7:	b9 da d9 00 00       	mov    $0xd9da,%ecx
 804beac:	e8 4f 36 00 00       	call   804f500 <__afl_maybe_log>
 804beb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804beb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804beb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bebd:	8b 3c 24             	mov    (%esp),%edi
 804bec0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bec4:	83 ec 08             	sub    $0x8,%esp
 804bec7:	68 be 00 00 00       	push   $0xbe
 804becc:	68 48 30 06 08       	push   $0x8063048
 804bed1:	e8 da ea ff ff       	call   804a9b0 <report_label_coverage>
 804bed6:	83 c4 10             	add    $0x10,%esp
 804bed9:	e9 eb f5 ff ff       	jmp    804b4c9 <do_encode+0xad9>
 804bede:	66 90                	xchg   %ax,%ax
asm volatile (""::: "memory");
	report_label_coverage("ABS", 223);
}

// COR Label 224
if((wrap_column || current_column > 0) != (wrap_column && current_column > 0))  {
 804bee0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bee4:	89 3c 24             	mov    %edi,(%esp)
 804bee7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804beeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804beef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bef3:	b9 0e 34 00 00       	mov    $0x340e,%ecx
 804bef8:	e8 03 36 00 00       	call   804f500 <__afl_maybe_log>
 804befd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bf01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bf05:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bf09:	8b 3c 24             	mov    (%esp),%edi
 804bf0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bf10:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
 804bf15:	0f 85 e9 ee ff ff    	jne    804ae04 <do_encode+0x414>
 804bf1b:	90                   	nop
 804bf1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bf20:	89 3c 24             	mov    %edi,(%esp)
 804bf23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bf27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bf2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bf2f:	b9 72 db 00 00       	mov    $0xdb72,%ecx
 804bf34:	e8 c7 35 00 00       	call   804f500 <__afl_maybe_log>
 804bf39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bf3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bf41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bf45:	8b 3c 24             	mov    (%esp),%edi
 804bf48:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("COR", 224);
 804bf4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bf50:	89 3c 24             	mov    %edi,(%esp)
 804bf53:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bf57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bf5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bf5f:	b9 b9 98 00 00       	mov    $0x98b9,%ecx
 804bf64:	e8 97 35 00 00       	call   804f500 <__afl_maybe_log>
 804bf69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bf6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bf71:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bf75:	8b 3c 24             	mov    (%esp),%edi
 804bf78:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bf7c:	53                   	push   %ebx
 804bf7d:	53                   	push   %ebx
 804bf7e:	68 e0 00 00 00       	push   $0xe0
 804bf83:	68 60 30 06 08       	push   $0x8063060
 804bf88:	e8 23 ea ff ff       	call   804a9b0 <report_label_coverage>
 804bf8d:	83 c4 10             	add    $0x10,%esp
 804bf90:	e9 6f ee ff ff       	jmp    804ae04 <do_encode+0x414>
 804bf95:	8d 76 00             	lea    0x0(%esi),%esi
if(wrap_column && !(current_column > 0) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 229);
}
// MCC Label 230
if(!(wrap_column) && current_column > 0 ) {
 804bf98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bf9c:	89 3c 24             	mov    %edi,(%esp)
 804bf9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bfa3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bfa7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bfab:	b9 af 2f 00 00       	mov    $0x2faf,%ecx
 804bfb0:	e8 4b 35 00 00       	call   804f500 <__afl_maybe_log>
 804bfb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bfb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bfbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bfc1:	8b 3c 24             	mov    (%esp),%edi
 804bfc4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804bfc8:	84 db                	test   %bl,%bl
 804bfca:	0f 85 df 03 00 00    	jne    804c3af <do_encode+0x19bf>
 804bfd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804bfd4:	89 3c 24             	mov    %edi,(%esp)
 804bfd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804bfdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804bfdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804bfe3:	b9 c4 03 00 00       	mov    $0x3c4,%ecx
 804bfe8:	e8 13 35 00 00       	call   804f500 <__afl_maybe_log>
 804bfed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804bff1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804bff5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804bff9:	8b 3c 24             	mov    (%esp),%edi
 804bffc:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 230);
}
// MCC Label 231
if(!(wrap_column) && !(current_column > 0) ) {
 804c000:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c004:	89 3c 24             	mov    %edi,(%esp)
 804c007:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c00b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c00f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c013:	b9 e6 96 00 00       	mov    $0x96e6,%ecx
 804c018:	e8 e3 34 00 00       	call   804f500 <__afl_maybe_log>
 804c01d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c021:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c025:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c029:	8b 3c 24             	mov    (%esp),%edi
 804c02c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c030:	89 f3                	mov    %esi,%ebx
 804c032:	84 db                	test   %bl,%bl
 804c034:	0f 84 0e f0 ff ff    	je     804b048 <do_encode+0x658>
 804c03a:	66 90                	xchg   %ax,%ax
 804c03c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c040:	89 3c 24             	mov    %edi,(%esp)
 804c043:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c047:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c04b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c04f:	b9 e4 be 00 00       	mov    $0xbee4,%ecx
 804c054:	e8 a7 34 00 00       	call   804f500 <__afl_maybe_log>
 804c059:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c05d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c061:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c065:	8b 3c 24             	mov    (%esp),%edi
 804c068:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 231);
 804c06c:	50                   	push   %eax
 804c06d:	50                   	push   %eax
 804c06e:	68 e7 00 00 00       	push   $0xe7
 804c073:	68 64 30 06 08       	push   $0x8063064
 804c078:	e8 33 e9 ff ff       	call   804a9b0 <report_label_coverage>
 804c07d:	83 c4 10             	add    $0x10,%esp
 804c080:	e9 c3 ef ff ff       	jmp    804b048 <do_encode+0x658>
 804c085:	8d 76 00             	lea    0x0(%esi),%esi
if((temp_1 >= len) != (temp_1 < len))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 187);
}
if (temp_1 < len)
        error(1, (*__errno_location()), gettext("write error"));
 804c088:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c08c:	89 3c 24             	mov    %edi,(%esp)
 804c08f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c093:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c097:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c09b:	b9 fb 2f 00 00       	mov    $0x2ffb,%ecx
 804c0a0:	e8 5b 34 00 00       	call   804f500 <__afl_maybe_log>
 804c0a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c0a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c0ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c0b1:	8b 3c 24             	mov    (%esp),%edi
 804c0b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c0b8:	57                   	push   %edi
 804c0b9:	6a 05                	push   $0x5
 804c0bb:	68 4c 30 06 08       	push   $0x806304c
 804c0c0:	6a 00                	push   $0x0
 804c0c2:	e8 19 d1 ff ff       	call   80491e0 <dcgettext@plt>
 804c0c7:	89 c6                	mov    %eax,%esi
 804c0c9:	e8 02 d3 ff ff       	call   80493d0 <__errno_location@plt>
 804c0ce:	83 c4 0c             	add    $0xc,%esp
 804c0d1:	56                   	push   %esi
 804c0d2:	ff 30                	pushl  (%eax)
 804c0d4:	6a 01                	push   $0x1
 804c0d6:	e8 b5 d1 ff ff       	call   8049290 <error@plt>
 804c0db:	83 c4 10             	add    $0x10,%esp
 804c0de:	e9 35 f3 ff ff       	jmp    804b418 <do_encode+0xa28>
 804c0e3:	90                   	nop
	report_label_coverage("ROR", 226);
}
// ROR Label 227
if((current_column >= 0) != (current_column > 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 227);
 804c0e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c0e8:	89 3c 24             	mov    %edi,(%esp)
 804c0eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c0ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c0f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c0f7:	b9 f8 a6 00 00       	mov    $0xa6f8,%ecx
 804c0fc:	e8 ff 33 00 00       	call   804f500 <__afl_maybe_log>
 804c101:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c105:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c109:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c10d:	8b 3c 24             	mov    (%esp),%edi
 804c110:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c114:	50                   	push   %eax
 804c115:	50                   	push   %eax
 804c116:	68 e3 00 00 00       	push   $0xe3
 804c11b:	68 48 30 06 08       	push   $0x8063048
 804c120:	e8 8b e8 ff ff       	call   804a9b0 <report_label_coverage>
 804c125:	83 c4 10             	add    $0x10,%esp
 804c128:	e9 33 ee ff ff       	jmp    804af60 <do_encode+0x570>
 804c12d:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("ROR", 225);
}
// ROR Label 226
if((current_column < 0) != (current_column > 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 226);
 804c130:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c134:	89 3c 24             	mov    %edi,(%esp)
 804c137:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c13b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c13f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c143:	b9 08 cc 00 00       	mov    $0xcc08,%ecx
 804c148:	e8 b3 33 00 00       	call   804f500 <__afl_maybe_log>
 804c14d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c151:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c155:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c159:	8b 3c 24             	mov    (%esp),%edi
 804c15c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c160:	52                   	push   %edx
 804c161:	52                   	push   %edx
 804c162:	68 e2 00 00 00       	push   $0xe2
 804c167:	68 48 30 06 08       	push   $0x8063048
 804c16c:	e8 3f e8 ff ff       	call   804a9b0 <report_label_coverage>
 804c171:	83 c4 10             	add    $0x10,%esp
 804c174:	e9 7b ed ff ff       	jmp    804aef4 <do_encode+0x504>
 804c179:	8d 76 00             	lea    0x0(%esi),%esi
}

// MCC Label 228
if(wrap_column && current_column > 0 ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 228);
 804c17c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c180:	89 3c 24             	mov    %edi,(%esp)
 804c183:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c187:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c18b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c18f:	b9 ee 25 00 00       	mov    $0x25ee,%ecx
 804c194:	e8 67 33 00 00       	call   804f500 <__afl_maybe_log>
 804c199:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c19d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c1a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c1a5:	8b 3c 24             	mov    (%esp),%edi
 804c1a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c1ac:	50                   	push   %eax
 804c1ad:	50                   	push   %eax
 804c1ae:	68 e4 00 00 00       	push   $0xe4
 804c1b3:	68 64 30 06 08       	push   $0x8063064
 804c1b8:	e8 f3 e7 ff ff       	call   804a9b0 <report_label_coverage>
}
// MCC Label 229
if(wrap_column && !(current_column > 0) ) {
 804c1bd:	89 f0                	mov    %esi,%eax
 804c1bf:	83 c4 10             	add    $0x10,%esp
 804c1c2:	84 c0                	test   %al,%al
 804c1c4:	0f 85 2f 02 00 00    	jne    804c3f9 <do_encode+0x1a09>
 804c1ca:	66 90                	xchg   %ax,%ax
 804c1cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c1d0:	89 3c 24             	mov    %edi,(%esp)
 804c1d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c1d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c1db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c1df:	b9 e8 05 00 00       	mov    $0x5e8,%ecx
 804c1e4:	e8 17 33 00 00       	call   804f500 <__afl_maybe_log>
 804c1e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c1ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c1f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c1f5:	8b 3c 24             	mov    (%esp),%edi
 804c1f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c1fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c200:	89 3c 24             	mov    %edi,(%esp)
 804c203:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c207:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c20b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c20f:	b9 95 8b 00 00       	mov    $0x8b95,%ecx
 804c214:	e8 e7 32 00 00       	call   804f500 <__afl_maybe_log>
 804c219:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c21d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c221:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c225:	8b 3c 24             	mov    (%esp),%edi
 804c228:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c22c:	8b 74 24 20          	mov    0x20(%esp),%esi
 804c230:	8b 5e 14             	mov    0x14(%esi),%ebx
 804c233:	3b 5e 18             	cmp    0x18(%esi),%ebx
 804c236:	0f 83 41 02 00 00    	jae    804c47d <do_encode+0x1a8d>
 804c23c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c240:	89 3c 24             	mov    %edi,(%esp)
 804c243:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c247:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c24b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c24f:	b9 8f 21 00 00       	mov    $0x218f,%ecx
 804c254:	e8 a7 32 00 00       	call   804f500 <__afl_maybe_log>
 804c259:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c25d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c261:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c265:	8b 3c 24             	mov    (%esp),%edi
 804c268:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c26c:	8b 4c 24 20          	mov    0x20(%esp),%ecx
 804c270:	8d 53 01             	lea    0x1(%ebx),%edx
 804c273:	89 51 14             	mov    %edx,0x14(%ecx)
 804c276:	c6 03 0a             	movb   $0xa,(%ebx)
 804c279:	bb 0a 00 00 00       	mov    $0xa,%ebx
 804c27e:	66 90                	xchg   %ax,%ax
	report_label_coverage("ABS", 232);
}
// ABS Label 233
if(temp_2 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 233);
 804c280:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c284:	89 3c 24             	mov    %edi,(%esp)
 804c287:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c28b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c28f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c293:	b9 bd ee 00 00       	mov    $0xeebd,%ecx
 804c298:	e8 63 32 00 00       	call   804f500 <__afl_maybe_log>
 804c29d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c2a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c2a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c2a9:	8b 3c 24             	mov    (%esp),%edi
 804c2ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c2b0:	56                   	push   %esi
 804c2b1:	56                   	push   %esi
 804c2b2:	68 e9 00 00 00       	push   $0xe9
 804c2b7:	68 5c 30 06 08       	push   $0x806305c
 804c2bc:	e8 ef e6 ff ff       	call   804a9b0 <report_label_coverage>
}

// ROR Label 234
if((temp_1 != temp_2) != (temp_1 == temp_2))  {
 804c2c1:	83 c4 10             	add    $0x10,%esp
 804c2c4:	83 c3 01             	add    $0x1,%ebx
 804c2c7:	0f 94 c0             	sete   %al
 804c2ca:	0f 95 c2             	setne  %dl
 804c2cd:	38 c2                	cmp    %al,%dl
 804c2cf:	89 c6                	mov    %eax,%esi
 804c2d1:	74 45                	je     804c318 <do_encode+0x1928>
 804c2d3:	90                   	nop
 804c2d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c2d8:	89 3c 24             	mov    %edi,(%esp)
 804c2db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c2df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c2e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c2e7:	b9 d9 ec 00 00       	mov    $0xecd9,%ecx
 804c2ec:	e8 0f 32 00 00       	call   804f500 <__afl_maybe_log>
 804c2f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c2f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c2f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c2fd:	8b 3c 24             	mov    (%esp),%edi
 804c300:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 234);
 804c304:	53                   	push   %ebx
 804c305:	53                   	push   %ebx
 804c306:	68 ea 00 00 00       	push   $0xea
 804c30b:	68 48 30 06 08       	push   $0x8063048
 804c310:	e8 9b e6 ff ff       	call   804a9b0 <report_label_coverage>
 804c315:	83 c4 10             	add    $0x10,%esp
}
if (temp_1 == temp_2)
 804c318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c31c:	89 3c 24             	mov    %edi,(%esp)
 804c31f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c32b:	b9 c6 fc 00 00       	mov    $0xfcc6,%ecx
 804c330:	e8 cb 31 00 00       	call   804f500 <__afl_maybe_log>
 804c335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c33d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c341:	8b 3c 24             	mov    (%esp),%edi
 804c344:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c348:	89 f3                	mov    %esi,%ebx
 804c34a:	84 db                	test   %bl,%bl
 804c34c:	0f 84 f6 ec ff ff    	je     804b048 <do_encode+0x658>
 804c352:	66 90                	xchg   %ax,%ax
 804c354:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c358:	89 3c 24             	mov    %edi,(%esp)
 804c35b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c35f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c363:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c367:	b9 07 7e 00 00       	mov    $0x7e07,%ecx
 804c36c:	e8 8f 31 00 00       	call   804f500 <__afl_maybe_log>
 804c371:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c375:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c379:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c37d:	8b 3c 24             	mov    (%esp),%edi
 804c380:	8d 64 24 10          	lea    0x10(%esp),%esp
        error(1, (*__errno_location()), gettext("write error"));
 804c384:	51                   	push   %ecx
 804c385:	6a 05                	push   $0x5
 804c387:	68 4c 30 06 08       	push   $0x806304c
 804c38c:	6a 00                	push   $0x0
 804c38e:	e8 4d ce ff ff       	call   80491e0 <dcgettext@plt>
 804c393:	89 c7                	mov    %eax,%edi
 804c395:	e8 36 d0 ff ff       	call   80493d0 <__errno_location@plt>
 804c39a:	83 c4 0c             	add    $0xc,%esp
 804c39d:	57                   	push   %edi
 804c39e:	ff 30                	pushl  (%eax)
 804c3a0:	6a 01                	push   $0x1
 804c3a2:	e8 e9 ce ff ff       	call   8049290 <error@plt>
 804c3a7:	83 c4 10             	add    $0x10,%esp
 804c3aa:	e9 99 ec ff ff       	jmp    804b048 <do_encode+0x658>
 804c3af:	90                   	nop
	report_label_coverage("MCC", 229);
}
// MCC Label 230
if(!(wrap_column) && current_column > 0 ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 230);
 804c3b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c3b4:	89 3c 24             	mov    %edi,(%esp)
 804c3b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c3bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c3bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c3c3:	b9 da 7c 00 00       	mov    $0x7cda,%ecx
 804c3c8:	e8 33 31 00 00       	call   804f500 <__afl_maybe_log>
 804c3cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c3d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c3d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c3d9:	8b 3c 24             	mov    (%esp),%edi
 804c3dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c3e0:	50                   	push   %eax
 804c3e1:	50                   	push   %eax
 804c3e2:	68 e6 00 00 00       	push   $0xe6
 804c3e7:	68 64 30 06 08       	push   $0x8063064
 804c3ec:	e8 bf e5 ff ff       	call   804a9b0 <report_label_coverage>
 804c3f1:	83 c4 10             	add    $0x10,%esp
 804c3f4:	e9 07 fc ff ff       	jmp    804c000 <do_encode+0x1610>
 804c3f9:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("MCC", 228);
}
// MCC Label 229
if(wrap_column && !(current_column > 0) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 229);
 804c3fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c400:	89 3c 24             	mov    %edi,(%esp)
 804c403:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c407:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c40b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c40f:	b9 75 cf 00 00       	mov    $0xcf75,%ecx
 804c414:	e8 e7 30 00 00       	call   804f500 <__afl_maybe_log>
 804c419:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c41d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c421:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c425:	8b 3c 24             	mov    (%esp),%edi
 804c428:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c42c:	50                   	push   %eax
 804c42d:	50                   	push   %eax
 804c42e:	68 e5 00 00 00       	push   $0xe5
 804c433:	68 64 30 06 08       	push   $0x8063064
 804c438:	e8 73 e5 ff ff       	call   804a9b0 <report_label_coverage>
// MCC Label 231
if(!(wrap_column) && !(current_column > 0) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 231);
}
if (wrap_column && current_column > 0) {
 804c43d:	83 c4 10             	add    $0x10,%esp
 804c440:	84 db                	test   %bl,%bl
 804c442:	0f 84 00 ec ff ff    	je     804b048 <do_encode+0x658>
 804c448:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c44c:	89 3c 24             	mov    %edi,(%esp)
 804c44f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c453:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c457:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c45b:	b9 e6 45 00 00       	mov    $0x45e6,%ecx
 804c460:	e8 9b 30 00 00       	call   804f500 <__afl_maybe_log>
 804c465:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c469:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c46d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c471:	8b 3c 24             	mov    (%esp),%edi
 804c474:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c478:	e9 7f fd ff ff       	jmp    804c1fc <do_encode+0x180c>
 804c47d:	8d 76 00             	lea    0x0(%esi),%esi
 804c480:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c484:	89 3c 24             	mov    %edi,(%esp)
 804c487:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c48b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c48f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c493:	b9 f7 0d 00 00       	mov    $0xdf7,%ecx
 804c498:	e8 63 30 00 00       	call   804f500 <__afl_maybe_log>
 804c49d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c4a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c4a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c4a9:	8b 3c 24             	mov    (%esp),%edi
 804c4ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c4b0:	50                   	push   %eax
 804c4b1:	50                   	push   %eax
 804c4b2:	6a 0a                	push   $0xa
 804c4b4:	ff 74 24 2c          	pushl  0x2c(%esp)
 804c4b8:	e8 b3 cf ff ff       	call   8049470 <__overflow@plt>
    int temp_1 = fputc_unlocked('\n', out);
    int temp_2 = -1;
    
// ABS Label 232
if(temp_1 < 0)  {
 804c4bd:	83 c4 10             	add    $0x10,%esp
 804c4c0:	85 c0                	test   %eax,%eax
 804c4c2:	89 c3                	mov    %eax,%ebx
 804c4c4:	0f 89 b4 fd ff ff    	jns    804c27e <do_encode+0x188e>
 804c4ca:	66 90                	xchg   %ax,%ax
 804c4cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c4d0:	89 3c 24             	mov    %edi,(%esp)
 804c4d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c4d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c4db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c4df:	b9 44 5b 00 00       	mov    $0x5b44,%ecx
 804c4e4:	e8 17 30 00 00       	call   804f500 <__afl_maybe_log>
 804c4e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c4ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c4f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c4f5:	8b 3c 24             	mov    (%esp),%edi
 804c4f8:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 232);
 804c4fc:	57                   	push   %edi
 804c4fd:	57                   	push   %edi
 804c4fe:	68 e8 00 00 00       	push   $0xe8
 804c503:	68 5c 30 06 08       	push   $0x806305c
 804c508:	e8 a3 e4 ff ff       	call   804a9b0 <report_label_coverage>
 804c50d:	83 c4 10             	add    $0x10,%esp
 804c510:	e9 69 fd ff ff       	jmp    804c27e <do_encode+0x188e>
 804c515:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 804c519:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0804c520 <lava_set>:
#include "coverage.h"
#include <stdio.h>
extern unsigned int lava_get(unsigned int) ;
static unsigned int lava_val[1000000];
void lava_set(unsigned int bug_num, unsigned int val);
void lava_set(unsigned int bug_num, unsigned int val) { lava_val[bug_num] = val; }
 804c520:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c524:	89 3c 24             	mov    %edi,(%esp)
 804c527:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c52b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c52f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c533:	b9 f3 3d 00 00       	mov    $0x3df3,%ecx
 804c538:	e8 c3 2f 00 00       	call   804f500 <__afl_maybe_log>
 804c53d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c541:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c545:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c549:	8b 3c 24             	mov    (%esp),%edi
 804c54c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c550:	8b 54 24 08          	mov    0x8(%esp),%edx
 804c554:	8b 44 24 04          	mov    0x4(%esp),%eax
 804c558:	89 14 85 00 73 06 08 	mov    %edx,0x8067300(,%eax,4)
 804c55f:	c3                   	ret    

0804c560 <lava_get>:
unsigned int lava_get(unsigned int bug_num);


#define SWAP_UINT32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) | (((x) & 0x0000FF00) << 8) | ((x) << 24))
#include <stdio.h>
unsigned int lava_get(unsigned int bug_num) {
 804c560:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c564:	89 3c 24             	mov    %edi,(%esp)
 804c567:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c56b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c56f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c573:	b9 31 83 00 00       	mov    $0x8331,%ecx
 804c578:	e8 83 2f 00 00       	call   804f500 <__afl_maybe_log>
 804c57d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c581:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c585:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c589:	8b 3c 24             	mov    (%esp),%edi
 804c58c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c590:	57                   	push   %edi
 804c591:	56                   	push   %esi
asm volatile (""::: "memory");
	report_label_coverage("ABS", 8);
}

// AOR Label 9
if(1818326625 / bug_num != 1818326625 - bug_num)  {
 804c592:	b8 61 76 61 6c       	mov    $0x6c617661,%eax
unsigned int lava_get(unsigned int bug_num);


#define SWAP_UINT32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) | (((x) & 0x0000FF00) << 8) | ((x) << 24))
#include <stdio.h>
unsigned int lava_get(unsigned int bug_num) {
 804c597:	53                   	push   %ebx
 804c598:	8b 74 24 10          	mov    0x10(%esp),%esi
asm volatile (""::: "memory");
	report_label_coverage("ABS", 8);
}

// AOR Label 9
if(1818326625 / bug_num != 1818326625 - bug_num)  {
 804c59c:	31 d2                	xor    %edx,%edx
 804c59e:	89 c3                	mov    %eax,%ebx
 804c5a0:	f7 f6                	div    %esi
 804c5a2:	29 f3                	sub    %esi,%ebx
 804c5a4:	39 d8                	cmp    %ebx,%eax
 804c5a6:	74 3e                	je     804c5e6 <lava_get+0x86>
 804c5a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c5ac:	89 3c 24             	mov    %edi,(%esp)
 804c5af:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c5b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c5b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c5bb:	b9 ea 17 00 00       	mov    $0x17ea,%ecx
 804c5c0:	e8 3b 2f 00 00       	call   804f500 <__afl_maybe_log>
 804c5c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c5c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c5cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c5d1:	8b 3c 24             	mov    (%esp),%edi
 804c5d4:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("AOR", 9);
 804c5d8:	6a 09                	push   $0x9
 804c5da:	68 58 30 06 08       	push   $0x8063058
 804c5df:	e8 cc e3 ff ff       	call   804a9b0 <report_label_coverage>
 804c5e4:	59                   	pop    %ecx
 804c5e5:	5f                   	pop    %edi
 804c5e6:	66 90                	xchg   %ax,%ax
}
// AOR Label 10
if(1818326625 + bug_num != 1818326625 - bug_num)  {
 804c5e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c5ec:	89 3c 24             	mov    %edi,(%esp)
 804c5ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c5f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c5f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c5fb:	b9 02 11 00 00       	mov    $0x1102,%ecx
 804c600:	e8 fb 2e 00 00       	call   804f500 <__afl_maybe_log>
 804c605:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c609:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c60d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c611:	8b 3c 24             	mov    (%esp),%edi
 804c614:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c618:	8d 8e 61 76 61 6c    	lea    0x6c617661(%esi),%ecx
 804c61e:	39 cb                	cmp    %ecx,%ebx
 804c620:	74 40                	je     804c662 <lava_get+0x102>
 804c622:	66 90                	xchg   %ax,%ax
 804c624:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c628:	89 3c 24             	mov    %edi,(%esp)
 804c62b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c62f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c633:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c637:	b9 17 67 00 00       	mov    $0x6717,%ecx
 804c63c:	e8 bf 2e 00 00       	call   804f500 <__afl_maybe_log>
 804c641:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c645:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c649:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c64d:	8b 3c 24             	mov    (%esp),%edi
 804c650:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("AOR", 10);
 804c654:	6a 0a                	push   $0xa
 804c656:	68 58 30 06 08       	push   $0x8063058
 804c65b:	e8 50 e3 ff ff       	call   804a9b0 <report_label_coverage>
 804c660:	58                   	pop    %eax
 804c661:	5a                   	pop    %edx
 804c662:	66 90                	xchg   %ax,%ax
}
// AOR Label 11
if(1818326625 * bug_num != 1818326625 - bug_num)  {
 804c664:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c668:	89 3c 24             	mov    %edi,(%esp)
 804c66b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c66f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c673:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c677:	b9 71 82 00 00       	mov    $0x8271,%ecx
 804c67c:	e8 7f 2e 00 00       	call   804f500 <__afl_maybe_log>
 804c681:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c685:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c689:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c68d:	8b 3c 24             	mov    (%esp),%edi
 804c690:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c694:	69 fe 61 76 61 6c    	imul   $0x6c617661,%esi,%edi
 804c69a:	39 fb                	cmp    %edi,%ebx
 804c69c:	74 40                	je     804c6de <lava_get+0x17e>
 804c69e:	66 90                	xchg   %ax,%ax
 804c6a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c6a4:	89 3c 24             	mov    %edi,(%esp)
 804c6a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c6ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c6af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c6b3:	b9 3d 7c 00 00       	mov    $0x7c3d,%ecx
 804c6b8:	e8 43 2e 00 00       	call   804f500 <__afl_maybe_log>
 804c6bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c6c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c6c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c6c9:	8b 3c 24             	mov    (%esp),%edi
 804c6cc:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("AOR", 11);
 804c6d0:	6a 0b                	push   $0xb
 804c6d2:	68 58 30 06 08       	push   $0x8063058
 804c6d7:	e8 d4 e2 ff ff       	call   804a9b0 <report_label_coverage>
 804c6dc:	5f                   	pop    %edi
 804c6dd:	58                   	pop    %eax
 804c6de:	66 90                	xchg   %ax,%ax
}

// COR Label 12
if((1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num] || (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {
 804c6e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c6e4:	89 3c 24             	mov    %edi,(%esp)
 804c6e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c6eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c6ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c6f3:	b9 cd ac 00 00       	mov    $0xaccd,%ecx
 804c6f8:	e8 03 2e 00 00       	call   804f500 <__afl_maybe_log>
 804c6fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c701:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c705:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c709:	8b 3c 24             	mov    (%esp),%edi
 804c70c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c710:	8b 04 b5 00 73 06 08 	mov    0x8067300(,%esi,4),%eax
 804c717:	89 df                	mov    %ebx,%edi
 804c719:	0f cf                	bswap  %edi
 804c71b:	39 c3                	cmp    %eax,%ebx
 804c71d:	0f 84 7d 04 00 00    	je     804cba0 <lava_get+0x640>
 804c723:	90                   	nop
 804c724:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c728:	89 3c 24             	mov    %edi,(%esp)
 804c72b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c72f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c733:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c737:	b9 69 9f 00 00       	mov    $0x9f69,%ecx
 804c73c:	e8 bf 2d 00 00       	call   804f500 <__afl_maybe_log>
 804c741:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c745:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c749:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c74d:	8b 3c 24             	mov    (%esp),%edi
 804c750:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c754:	39 f8                	cmp    %edi,%eax
 804c756:	0f 84 7c 04 00 00    	je     804cbd8 <lava_get+0x678>
 804c75c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c760:	89 3c 24             	mov    %edi,(%esp)
 804c763:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c767:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c76b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c76f:	b9 c6 8d 00 00       	mov    $0x8dc6,%ecx
 804c774:	e8 87 2d 00 00       	call   804f500 <__afl_maybe_log>
 804c779:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c77d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c781:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c785:	8b 3c 24             	mov    (%esp),%edi
 804c788:	8d 64 24 10          	lea    0x10(%esp),%esp
}

// ROR Label 13
if((1818326625 - bug_num != lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num]))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 13);
 804c78c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c790:	89 3c 24             	mov    %edi,(%esp)
 804c793:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c797:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c79b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c79f:	b9 f1 61 00 00       	mov    $0x61f1,%ecx
 804c7a4:	e8 57 2d 00 00       	call   804f500 <__afl_maybe_log>
 804c7a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c7ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c7b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c7b5:	8b 3c 24             	mov    (%esp),%edi
 804c7b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c7bc:	6a 0d                	push   $0xd
 804c7be:	68 48 30 06 08       	push   $0x8063048
 804c7c3:	e8 e8 e1 ff ff       	call   804a9b0 <report_label_coverage>
 804c7c8:	5a                   	pop    %edx
 804c7c9:	59                   	pop    %ecx
 804c7ca:	8b 04 b5 00 73 06 08 	mov    0x8067300(,%esi,4),%eax
 804c7d1:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 14
if(((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) != lava_val[bug_num]) != ((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {
 804c7d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c7d8:	89 3c 24             	mov    %edi,(%esp)
 804c7db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c7df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c7e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c7e7:	b9 af 31 00 00       	mov    $0x31af,%ecx
 804c7ec:	e8 0f 2d 00 00       	call   804f500 <__afl_maybe_log>
 804c7f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c7f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c7f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c7fd:	8b 3c 24             	mov    (%esp),%edi
 804c800:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c804:	39 f8                	cmp    %edi,%eax
 804c806:	0f 94 c2             	sete   %dl
 804c809:	0f 95 c1             	setne  %cl
 804c80c:	38 d1                	cmp    %dl,%cl
 804c80e:	74 4a                	je     804c85a <lava_get+0x2fa>
 804c810:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c814:	89 3c 24             	mov    %edi,(%esp)
 804c817:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c81b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c81f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c823:	b9 84 b9 00 00       	mov    $0xb984,%ecx
 804c828:	e8 d3 2c 00 00       	call   804f500 <__afl_maybe_log>
 804c82d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c831:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c835:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c839:	8b 3c 24             	mov    (%esp),%edi
 804c83c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 14);
 804c840:	6a 0e                	push   $0xe
 804c842:	68 48 30 06 08       	push   $0x8063048
 804c847:	e8 64 e1 ff ff       	call   804a9b0 <report_label_coverage>
 804c84c:	8b 04 b5 00 73 06 08 	mov    0x8067300(,%esi,4),%eax
 804c853:	5a                   	pop    %edx
 804c854:	59                   	pop    %ecx
 804c855:	39 f8                	cmp    %edi,%eax
 804c857:	0f 94 c2             	sete   %dl
 804c85a:	66 90                	xchg   %ax,%ax
}

// MCC Label 15
if(1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {
 804c85c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c860:	89 3c 24             	mov    %edi,(%esp)
 804c863:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c867:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c86b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c86f:	b9 6a 5f 00 00       	mov    $0x5f6a,%ecx
 804c874:	e8 87 2c 00 00       	call   804f500 <__afl_maybe_log>
 804c879:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c87d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c881:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c885:	8b 3c 24             	mov    (%esp),%edi
 804c888:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c88c:	39 c3                	cmp    %eax,%ebx
 804c88e:	0f 94 c1             	sete   %cl
 804c891:	75 69                	jne    804c8fc <lava_get+0x39c>
 804c893:	90                   	nop
 804c894:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c898:	89 3c 24             	mov    %edi,(%esp)
 804c89b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c89f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c8a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c8a7:	b9 81 67 00 00       	mov    $0x6781,%ecx
 804c8ac:	e8 4f 2c 00 00       	call   804f500 <__afl_maybe_log>
 804c8b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c8b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c8b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c8bd:	8b 3c 24             	mov    (%esp),%edi
 804c8c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c8c4:	84 d2                	test   %dl,%dl
 804c8c6:	0f 85 e4 03 00 00    	jne    804ccb0 <lava_get+0x750>
 804c8cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c8d0:	89 3c 24             	mov    %edi,(%esp)
 804c8d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c8d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c8db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c8df:	b9 35 04 00 00       	mov    $0x435,%ecx
 804c8e4:	e8 17 2c 00 00       	call   804f500 <__afl_maybe_log>
 804c8e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c8ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c8f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c8f5:	8b 3c 24             	mov    (%esp),%edi
 804c8f8:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 15);
}
// MCC Label 16
if(1818326625 - bug_num == lava_val[bug_num] && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {
 804c8fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c900:	89 3c 24             	mov    %edi,(%esp)
 804c903:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c907:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c90b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c90f:	b9 55 ab 00 00       	mov    $0xab55,%ecx
 804c914:	e8 e7 2b 00 00       	call   804f500 <__afl_maybe_log>
 804c919:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c91d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c921:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c925:	8b 3c 24             	mov    (%esp),%edi
 804c928:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c92c:	39 f8                	cmp    %edi,%eax
 804c92e:	74 79                	je     804c9a9 <lava_get+0x449>
 804c930:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c934:	89 3c 24             	mov    %edi,(%esp)
 804c937:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c93b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c93f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c943:	b9 01 c5 00 00       	mov    $0xc501,%ecx
 804c948:	e8 b3 2b 00 00       	call   804f500 <__afl_maybe_log>
 804c94d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c951:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c955:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c959:	8b 3c 24             	mov    (%esp),%edi
 804c95c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c960:	84 c9                	test   %cl,%cl
 804c962:	74 45                	je     804c9a9 <lava_get+0x449>
 804c964:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c968:	89 3c 24             	mov    %edi,(%esp)
 804c96b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c96f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c973:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c977:	b9 a0 d6 00 00       	mov    $0xd6a0,%ecx
 804c97c:	e8 7f 2b 00 00       	call   804f500 <__afl_maybe_log>
 804c981:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c985:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c989:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c98d:	8b 3c 24             	mov    (%esp),%edi
 804c990:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 16);
 804c994:	6a 10                	push   $0x10
 804c996:	68 64 30 06 08       	push   $0x8063064
 804c99b:	e8 10 e0 ff ff       	call   804a9b0 <report_label_coverage>
 804c9a0:	5a                   	pop    %edx
 804c9a1:	59                   	pop    %ecx
 804c9a2:	8b 04 b5 00 73 06 08 	mov    0x8067300(,%esi,4),%eax
 804c9a9:	8d 76 00             	lea    0x0(%esi),%esi
}
// MCC Label 17
if(!(1818326625 - bug_num == lava_val[bug_num]) && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {
 804c9ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c9b0:	89 3c 24             	mov    %edi,(%esp)
 804c9b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c9b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c9bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c9bf:	b9 18 01 00 00       	mov    $0x118,%ecx
 804c9c4:	e8 37 2b 00 00       	call   804f500 <__afl_maybe_log>
 804c9c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804c9cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804c9d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804c9d5:	8b 3c 24             	mov    (%esp),%edi
 804c9d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804c9dc:	39 c3                	cmp    %eax,%ebx
 804c9de:	0f 95 c2             	setne  %dl
 804c9e1:	74 69                	je     804ca4c <lava_get+0x4ec>
 804c9e3:	90                   	nop
 804c9e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804c9e8:	89 3c 24             	mov    %edi,(%esp)
 804c9eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804c9ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804c9f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804c9f7:	b9 ed ec 00 00       	mov    $0xeced,%ecx
 804c9fc:	e8 ff 2a 00 00       	call   804f500 <__afl_maybe_log>
 804ca01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ca05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ca09:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ca0d:	8b 3c 24             	mov    (%esp),%edi
 804ca10:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ca14:	39 f8                	cmp    %edi,%eax
 804ca16:	0f 84 74 02 00 00    	je     804cc90 <lava_get+0x730>
 804ca1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ca20:	89 3c 24             	mov    %edi,(%esp)
 804ca23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ca27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ca2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ca2f:	b9 64 30 00 00       	mov    $0x3064,%ecx
 804ca34:	e8 c7 2a 00 00       	call   804f500 <__afl_maybe_log>
 804ca39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ca3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ca41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ca45:	8b 3c 24             	mov    (%esp),%edi
 804ca48:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 17);
}
// MCC Label 18
if(!(1818326625 - bug_num == lava_val[bug_num]) && !((((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) ) {
 804ca4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ca50:	89 3c 24             	mov    %edi,(%esp)
 804ca53:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ca57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ca5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ca5f:	b9 8a 27 00 00       	mov    $0x278a,%ecx
 804ca64:	e8 97 2a 00 00       	call   804f500 <__afl_maybe_log>
 804ca69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ca6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ca71:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ca75:	8b 3c 24             	mov    (%esp),%edi
 804ca78:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ca7c:	39 f8                	cmp    %edi,%eax
 804ca7e:	74 79                	je     804caf9 <lava_get+0x599>
 804ca80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ca84:	89 3c 24             	mov    %edi,(%esp)
 804ca87:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ca8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ca8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ca93:	b9 25 d4 00 00       	mov    $0xd425,%ecx
 804ca98:	e8 63 2a 00 00       	call   804f500 <__afl_maybe_log>
 804ca9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804caa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804caa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804caa9:	8b 3c 24             	mov    (%esp),%edi
 804caac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cab0:	84 d2                	test   %dl,%dl
 804cab2:	74 45                	je     804caf9 <lava_get+0x599>
 804cab4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cab8:	89 3c 24             	mov    %edi,(%esp)
 804cabb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cabf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cac3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cac7:	b9 d7 76 00 00       	mov    $0x76d7,%ecx
 804cacc:	e8 2f 2a 00 00       	call   804f500 <__afl_maybe_log>
 804cad1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cad5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cad9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cadd:	8b 3c 24             	mov    (%esp),%edi
 804cae0:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 18);
 804cae4:	6a 12                	push   $0x12
 804cae6:	68 64 30 06 08       	push   $0x8063064
 804caeb:	e8 c0 de ff ff       	call   804a9b0 <report_label_coverage>
 804caf0:	5a                   	pop    %edx
 804caf1:	59                   	pop    %ecx
 804caf2:	8b 04 b5 00 73 06 08 	mov    0x8067300(,%esi,4),%eax
 804caf9:	8d 76 00             	lea    0x0(%esi),%esi
}
if (0x6c617661 - bug_num == lava_val[bug_num] ||
 804cafc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cb00:	89 3c 24             	mov    %edi,(%esp)
 804cb03:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cb07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cb0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cb0f:	b9 23 63 00 00       	mov    $0x6323,%ecx
 804cb14:	e8 e7 29 00 00       	call   804f500 <__afl_maybe_log>
 804cb19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cb1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cb21:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cb25:	8b 3c 24             	mov    (%esp),%edi
 804cb28:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cb2c:	39 c3                	cmp    %eax,%ebx
 804cb2e:	0f 84 34 01 00 00    	je     804cc68 <lava_get+0x708>
 804cb34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cb38:	89 3c 24             	mov    %edi,(%esp)
 804cb3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cb3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cb43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cb47:	b9 b9 6d 00 00       	mov    $0x6db9,%ecx
 804cb4c:	e8 af 29 00 00       	call   804f500 <__afl_maybe_log>
 804cb51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cb55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cb59:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cb5d:	8b 3c 24             	mov    (%esp),%edi
 804cb60:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cb64:	39 f8                	cmp    %edi,%eax
 804cb66:	0f 84 fc 00 00 00    	je     804cc68 <lava_get+0x708>
 804cb6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cb70:	89 3c 24             	mov    %edi,(%esp)
 804cb73:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cb77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cb7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cb7f:	b9 93 b7 00 00       	mov    $0xb793,%ecx
 804cb84:	e8 77 29 00 00       	call   804f500 <__afl_maybe_log>
 804cb89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cb8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cb91:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cb95:	8b 3c 24             	mov    (%esp),%edi
 804cb98:	8d 64 24 10          	lea    0x10(%esp),%esp
if(lava_val[bug_num] < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 21);
}
return lava_val[bug_num];
}
 804cb9c:	5b                   	pop    %ebx
 804cb9d:	5e                   	pop    %esi
 804cb9e:	5f                   	pop    %edi
 804cb9f:	c3                   	ret    
asm volatile (""::: "memory");
	report_label_coverage("AOR", 11);
}

// COR Label 12
if((1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num] || (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num]))  {
 804cba0:	39 fb                	cmp    %edi,%ebx
 804cba2:	0f 84 e4 fb ff ff    	je     804c78c <lava_get+0x22c>
 804cba8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cbac:	89 3c 24             	mov    %edi,(%esp)
 804cbaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cbb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cbb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cbbb:	b9 fe 16 00 00       	mov    $0x16fe,%ecx
 804cbc0:	e8 3b 29 00 00       	call   804f500 <__afl_maybe_log>
 804cbc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cbc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cbcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cbd1:	8b 3c 24             	mov    (%esp),%edi
 804cbd4:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("COR", 12);
 804cbd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cbdc:	89 3c 24             	mov    %edi,(%esp)
 804cbdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cbe3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cbe7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cbeb:	b9 79 fd 00 00       	mov    $0xfd79,%ecx
 804cbf0:	e8 0b 29 00 00       	call   804f500 <__afl_maybe_log>
 804cbf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cbf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cbfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cc01:	8b 3c 24             	mov    (%esp),%edi
 804cc04:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cc08:	6a 0c                	push   $0xc
 804cc0a:	68 60 30 06 08       	push   $0x8063060
 804cc0f:	e8 9c dd ff ff       	call   804a9b0 <report_label_coverage>
 804cc14:	8b 04 b5 00 73 06 08 	mov    0x8067300(,%esi,4),%eax
}

// ROR Label 13
if((1818326625 - bug_num != lava_val[bug_num]) != (1818326625 - bug_num == lava_val[bug_num]))  {
 804cc1b:	5a                   	pop    %edx
 804cc1c:	59                   	pop    %ecx
 804cc1d:	39 c3                	cmp    %eax,%ebx
 804cc1f:	0f 95 c1             	setne  %cl
 804cc22:	0f 94 c2             	sete   %dl
 804cc25:	38 d1                	cmp    %dl,%cl
 804cc27:	0f 84 a4 fb ff ff    	je     804c7d1 <lava_get+0x271>
 804cc2d:	8d 76 00             	lea    0x0(%esi),%esi
 804cc30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cc34:	89 3c 24             	mov    %edi,(%esp)
 804cc37:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cc3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cc3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cc43:	b9 de 2a 00 00       	mov    $0x2ade,%ecx
 804cc48:	e8 b3 28 00 00       	call   804f500 <__afl_maybe_log>
 804cc4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cc51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cc55:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cc59:	8b 3c 24             	mov    (%esp),%edi
 804cc5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cc60:	e9 27 fb ff ff       	jmp    804c78c <lava_get+0x22c>
 804cc65:	8d 76 00             	lea    0x0(%esi),%esi
// ABS Label 19
if(bug_num < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 19);
}
dprintf(1, "Successfully triggered bug %d, crashing now!\n", bug_num);
 804cc68:	83 ec 04             	sub    $0x4,%esp
 804cc6b:	56                   	push   %esi
 804cc6c:	68 a8 31 06 08       	push   $0x80631a8
 804cc71:	6a 01                	push   $0x1
 804cc73:	e8 58 c5 ff ff       	call   80491d0 <dprintf@plt>
 804cc78:	83 c4 10             	add    $0x10,%esp
 804cc7b:	8b 04 b5 00 73 06 08 	mov    0x8067300(,%esi,4),%eax
if(lava_val[bug_num] < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 21);
}
return lava_val[bug_num];
}
 804cc82:	5b                   	pop    %ebx
 804cc83:	5e                   	pop    %esi
 804cc84:	5f                   	pop    %edi
 804cc85:	c3                   	ret    
 804cc86:	8d 76 00             	lea    0x0(%esi),%esi
 804cc89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
	report_label_coverage("MCC", 16);
}
// MCC Label 17
if(!(1818326625 - bug_num == lava_val[bug_num]) && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 17);
 804cc90:	6a 11                	push   $0x11
 804cc92:	68 64 30 06 08       	push   $0x8063064
 804cc97:	e8 14 dd ff ff       	call   804a9b0 <report_label_coverage>
 804cc9c:	8b 04 b5 00 73 06 08 	mov    0x8067300(,%esi,4),%eax
 804cca3:	5a                   	pop    %edx
 804cca4:	59                   	pop    %ecx
 804cca5:	39 c3                	cmp    %eax,%ebx
 804cca7:	0f 95 c2             	setne  %dl
 804ccaa:	e9 9d fd ff ff       	jmp    804ca4c <lava_get+0x4ec>
 804ccaf:	90                   	nop
}

// MCC Label 15
if(1818326625 - bug_num == lava_val[bug_num] && (((1818326625 - bug_num) >> 24) | (((1818326625 - bug_num) & 16711680) >> 8) | (((1818326625 - bug_num) & 65280) << 8) | ((1818326625 - bug_num) << 24)) == lava_val[bug_num] ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 15);
 804ccb0:	6a 0f                	push   $0xf
 804ccb2:	68 64 30 06 08       	push   $0x8063064
 804ccb7:	e8 f4 dc ff ff       	call   804a9b0 <report_label_coverage>
 804ccbc:	8b 04 b5 00 73 06 08 	mov    0x8067300(,%esi,4),%eax
 804ccc3:	5a                   	pop    %edx
 804ccc4:	59                   	pop    %ecx
 804ccc5:	39 c3                	cmp    %eax,%ebx
 804ccc7:	0f 94 c1             	sete   %cl
 804ccca:	e9 2d fc ff ff       	jmp    804c8fc <lava_get+0x39c>
 804cccf:	90                   	nop

0804ccd0 <do_decode>:
;
}

static void
do_decode (FILE *in, FILE *out, bool ignore_garbage)
{
 804ccd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ccd4:	89 3c 24             	mov    %edi,(%esp)
 804ccd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ccdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ccdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cce3:	b9 3f 85 00 00       	mov    $0x853f,%ecx
 804cce8:	e8 13 28 00 00       	call   804f500 <__afl_maybe_log>
 804cced:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ccf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ccf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ccf9:	8b 3c 24             	mov    (%esp),%edi
 804ccfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cd00:	55                   	push   %ebp
 804cd01:	57                   	push   %edi
 804cd02:	56                   	push   %esi
 804cd03:	53                   	push   %ebx
 804cd04:	81 ec 48 1c 00 00    	sub    $0x1c48,%esp
 804cd0a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
  char inbuf[DEC_B64BLOCKSIZE];
  char outbuf[DEC_BLOCKSIZE];
  size_t sum;
  struct base64_decode_context ctx;

  base64_decode_ctx_init (&ctx);
 804cd0e:	8d 44 24 34          	lea    0x34(%esp),%eax
;
}

static void
do_decode (FILE *in, FILE *out, bool ignore_garbage)
{
 804cd12:	89 54 24 28          	mov    %edx,0x28(%esp)
 804cd16:	88 4c 24 27          	mov    %cl,0x27(%esp)
  char inbuf[DEC_B64BLOCKSIZE];
  char outbuf[DEC_BLOCKSIZE];
  size_t sum;
  struct base64_decode_context ctx;

  base64_decode_ctx_init (&ctx);
 804cd1a:	50                   	push   %eax
 804cd1b:	e8 f0 3e 00 00       	call   8050c10 <base64_decode_ctx_init>
 804cd20:	83 c4 10             	add    $0x10,%esp
 804cd23:	90                   	nop
  do {
    {
        _Bool ok;
        size_t n;
        unsigned int k;
        sum = 0;
 804cd24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cd28:	89 3c 24             	mov    %edi,(%esp)
 804cd2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cd2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cd33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cd37:	b9 e5 88 00 00       	mov    $0x88e5,%ecx
 804cd3c:	e8 bf 27 00 00       	call   804f500 <__afl_maybe_log>
 804cd41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cd45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cd49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cd4d:	8b 3c 24             	mov    (%esp),%edi
 804cd50:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cd54:	31 ed                	xor    %ebp,%ebp
 804cd56:	8d 76 00             	lea    0x0(%esi),%esi
 804cd59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
        do {
            {
                n = fread_unlocked(inbuf + sum, 1, (((((1024 * 3)) + 2) / 3) * 4) - sum, in);
 804cd60:	8d 94 24 30 0c 00 00 	lea    0xc30(%esp),%edx
 804cd67:	b9 00 10 00 00       	mov    $0x1000,%ecx
 804cd6c:	29 e9                	sub    %ebp,%ecx
 804cd6e:	01 ea                	add    %ebp,%edx
 804cd70:	89 54 24 14          	mov    %edx,0x14(%esp)
 804cd74:	ff 74 24 10          	pushl  0x10(%esp)
 804cd78:	51                   	push   %ecx
 804cd79:	6a 01                	push   $0x1
 804cd7b:	52                   	push   %edx
 804cd7c:	e8 1f c5 ff ff       	call   80492a0 <fread_unlocked@plt>
 804cd81:	89 44 24 34          	mov    %eax,0x34(%esp)
// ABS Label 236
if(ignore_garbage < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 236);
}
if (ignore_garbage) {
 804cd85:	83 c4 10             	add    $0x10,%esp
 804cd88:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%esp)
 804cd8d:	0f 84 b5 0e 00 00    	je     804dc48 <do_decode+0xf78>
 804cd93:	90                   	nop
 804cd94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cd98:	89 3c 24             	mov    %edi,(%esp)
 804cd9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cd9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cda3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cda7:	b9 9c c6 00 00       	mov    $0xc69c,%ecx
 804cdac:	e8 4f 27 00 00       	call   804f500 <__afl_maybe_log>
 804cdb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cdb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cdb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cdbd:	8b 3c 24             	mov    (%esp),%edi
 804cdc0:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("COR", 239);
}

// ROR Label 240
if((n <= 0) != (n > 0))  {
 804cdc4:	85 c0                	test   %eax,%eax
 804cdc6:	0f 94 c3             	sete   %bl
 804cdc9:	0f 95 c2             	setne  %dl
 804cdcc:	38 d3                	cmp    %dl,%bl
 804cdce:	74 49                	je     804ce19 <do_decode+0x149>
 804cdd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cdd4:	89 3c 24             	mov    %edi,(%esp)
 804cdd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cddb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cddf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cde3:	b9 96 77 00 00       	mov    $0x7796,%ecx
 804cde8:	e8 13 27 00 00       	call   804f500 <__afl_maybe_log>
 804cded:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cdf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cdf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cdf9:	8b 3c 24             	mov    (%esp),%edi
 804cdfc:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 240);
 804ce00:	83 ec 08             	sub    $0x8,%esp
 804ce03:	68 f0 00 00 00       	push   $0xf0
 804ce08:	68 48 30 06 08       	push   $0x8063048
 804ce0d:	e8 9e db ff ff       	call   804a9b0 <report_label_coverage>
 804ce12:	8b 44 24 34          	mov    0x34(%esp),%eax
 804ce16:	83 c4 10             	add    $0x10,%esp
 804ce19:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 241
if((n < 0) != (n > 0))  {
 804ce1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ce20:	89 3c 24             	mov    %edi,(%esp)
 804ce23:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ce27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ce2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ce2f:	b9 5a b1 00 00       	mov    $0xb15a,%ecx
 804ce34:	e8 c7 26 00 00       	call   804f500 <__afl_maybe_log>
 804ce39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ce3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ce41:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ce45:	8b 3c 24             	mov    (%esp),%edi
 804ce48:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ce4c:	85 c0                	test   %eax,%eax
 804ce4e:	0f 85 cc 18 00 00    	jne    804e720 <do_decode+0x1a50>
 804ce54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ce58:	89 3c 24             	mov    %edi,(%esp)
 804ce5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ce5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ce63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ce67:	b9 31 d4 00 00       	mov    $0xd431,%ecx
 804ce6c:	e8 8f 26 00 00       	call   804f500 <__afl_maybe_log>
 804ce71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ce75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ce79:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ce7d:	8b 3c 24             	mov    (%esp),%edi
 804ce80:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 241);
}
// ROR Label 242
if((n >= 0) != (n > 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 242);
 804ce84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ce88:	89 3c 24             	mov    %edi,(%esp)
 804ce8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ce8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ce93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ce97:	b9 13 66 00 00       	mov    $0x6613,%ecx
 804ce9c:	e8 5f 26 00 00       	call   804f500 <__afl_maybe_log>
 804cea1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cea5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cea9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cead:	8b 3c 24             	mov    (%esp),%edi
 804ceb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ceb4:	83 ec 08             	sub    $0x8,%esp
 804ceb7:	68 f2 00 00 00       	push   $0xf2
 804cebc:	68 48 30 06 08       	push   $0x8063048
 804cec1:	e8 ea da ff ff       	call   804a9b0 <report_label_coverage>
}
// ROR Label 243
if((i <= n) != (i < n))  {
 804cec6:	83 c4 10             	add    $0x10,%esp
 804cec9:	8b 44 24 24          	mov    0x24(%esp),%eax
 804cecd:	85 c0                	test   %eax,%eax
 804cecf:	0f 84 d3 16 00 00    	je     804e5a8 <do_decode+0x18d8>
 804ced5:	8d 76 00             	lea    0x0(%esi),%esi
 804ced8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cedc:	89 3c 24             	mov    %edi,(%esp)
 804cedf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cee3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cee7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ceeb:	b9 6a e7 00 00       	mov    $0xe76a,%ecx
 804cef0:	e8 0b 26 00 00       	call   804f500 <__afl_maybe_log>
 804cef5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cef9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cefd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cf01:	8b 3c 24             	mov    (%esp),%edi
 804cf04:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 243);
}
// ROR Label 244
if((i > n) != (i < n))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 244);
 804cf08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cf0c:	89 3c 24             	mov    %edi,(%esp)
 804cf0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cf13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cf17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cf1b:	b9 d0 23 00 00       	mov    $0x23d0,%ecx
 804cf20:	e8 db 25 00 00       	call   804f500 <__afl_maybe_log>
 804cf25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cf29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cf2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cf31:	8b 3c 24             	mov    (%esp),%edi
 804cf34:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cf38:	83 ec 08             	sub    $0x8,%esp
 804cf3b:	68 f4 00 00 00       	push   $0xf4
 804cf40:	68 48 30 06 08       	push   $0x8063048
 804cf45:	e8 66 da ff ff       	call   804a9b0 <report_label_coverage>
}
// ROR Label 245
if((i >= n) != (i < n))  {
 804cf4a:	8b 54 24 34          	mov    0x34(%esp),%edx
 804cf4e:	83 c4 10             	add    $0x10,%esp
 804cf51:	85 d2                	test   %edx,%edx
 804cf53:	0f 94 c1             	sete   %cl
 804cf56:	0f 95 c3             	setne  %bl
 804cf59:	38 d9                	cmp    %bl,%cl
 804cf5b:	0f 85 9b 16 00 00    	jne    804e5fc <do_decode+0x192c>
 804cf61:	8d 76 00             	lea    0x0(%esi),%esi
 804cf64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cf68:	89 3c 24             	mov    %edi,(%esp)
 804cf6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cf6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cf73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cf77:	b9 0a 5e 00 00       	mov    $0x5e0a,%ecx
 804cf7c:	e8 7f 25 00 00       	call   804f500 <__afl_maybe_log>
 804cf81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cf85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cf89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cf8d:	8b 3c 24             	mov    (%esp),%edi
 804cf90:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 245);
}

// MCC Label 246
if(n > 0 && i < n ) {
 804cf94:	85 d2                	test   %edx,%edx
 804cf96:	0f 85 e4 16 00 00    	jne    804e680 <do_decode+0x19b0>
 804cf9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cfa0:	89 3c 24             	mov    %edi,(%esp)
 804cfa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cfa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cfab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cfaf:	b9 62 7c 00 00       	mov    $0x7c62,%ecx
 804cfb4:	e8 47 25 00 00       	call   804f500 <__afl_maybe_log>
 804cfb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cfbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cfc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cfc5:	8b 3c 24             	mov    (%esp),%edi
 804cfc8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 248);
}
// MCC Label 249
if(!(n > 0) && !(i < n) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 249);
 804cfcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804cfd0:	89 3c 24             	mov    %edi,(%esp)
 804cfd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804cfd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804cfdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804cfdf:	b9 62 f2 00 00       	mov    $0xf262,%ecx
 804cfe4:	e8 17 25 00 00       	call   804f500 <__afl_maybe_log>
 804cfe9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804cfed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804cff1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804cff5:	8b 3c 24             	mov    (%esp),%edi
 804cff8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804cffc:	83 ec 08             	sub    $0x8,%esp
 804cfff:	68 f9 00 00 00       	push   $0xf9
 804d004:	68 64 30 06 08       	push   $0x8063064
 804d009:	e8 a2 d9 ff ff       	call   804a9b0 <report_label_coverage>
 804d00e:	8b 74 24 34          	mov    0x34(%esp),%esi
 804d012:	83 c4 10             	add    $0x10,%esp
 804d015:	8d 76 00             	lea    0x0(%esi),%esi
 804d018:	0f be bc 2c 30 0c 00 	movsbl 0xc30(%esp,%ebp,1),%edi
 804d01f:	00 
 804d020:	89 f8                	mov    %edi,%eax
 804d022:	3c 3d                	cmp    $0x3d,%al
 804d024:	88 44 24 0c          	mov    %al,0xc(%esp)
 804d028:	0f 94 c3             	sete   %bl
 804d02b:	90                   	nop
}
for (; n > 0 && i < n;)
 804d02c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d030:	89 3c 24             	mov    %edi,(%esp)
 804d033:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d037:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d03b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d03f:	b9 c2 76 00 00       	mov    $0x76c2,%ecx
 804d044:	e8 b7 24 00 00       	call   804f500 <__afl_maybe_log>
 804d049:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d04d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d051:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d055:	8b 3c 24             	mov    (%esp),%edi
 804d058:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d05c:	85 f6                	test   %esi,%esi
 804d05e:	0f 84 98 01 00 00    	je     804d1fc <do_decode+0x52c>
 804d064:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d068:	89 3c 24             	mov    %edi,(%esp)
 804d06b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d06f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d073:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d077:	b9 b9 b1 00 00       	mov    $0xb1b9,%ecx
 804d07c:	e8 7f 24 00 00       	call   804f500 <__afl_maybe_log>
 804d081:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d085:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d089:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d08d:	8b 3c 24             	mov    (%esp),%edi
 804d090:	8d 64 24 10          	lea    0x10(%esp),%esp
                        
// COR Label 263
if((isbase64(inbuf[sum + i]) && inbuf[sum + i] == '=') != (isbase64(inbuf[sum + i]) || inbuf[sum + i] == '='))  {
 804d094:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d098:	89 3c 24             	mov    %edi,(%esp)
 804d09b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d09f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d0a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d0a7:	b9 2e 80 00 00       	mov    $0x802e,%ecx
 804d0ac:	e8 4f 24 00 00       	call   804f500 <__afl_maybe_log>
 804d0b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d0b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d0b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d0bd:	8b 3c 24             	mov    (%esp),%edi
 804d0c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d0c4:	83 ec 0c             	sub    $0xc,%esp
 804d0c7:	57                   	push   %edi
 804d0c8:	e8 f3 3a 00 00       	call   8050bc0 <isbase64>
 804d0cd:	83 c4 10             	add    $0x10,%esp
 804d0d0:	84 c0                	test   %al,%al
 804d0d2:	0f 84 b8 00 00 00    	je     804d190 <do_decode+0x4c0>
 804d0d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d0dc:	89 3c 24             	mov    %edi,(%esp)
 804d0df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d0e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d0e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d0eb:	b9 6b 99 00 00       	mov    $0x996b,%ecx
 804d0f0:	e8 0b 24 00 00       	call   804f500 <__afl_maybe_log>
 804d0f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d0f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d0fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d101:	8b 3c 24             	mov    (%esp),%edi
 804d104:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d108:	84 db                	test   %bl,%bl
 804d10a:	0f 85 1b ff ff ff    	jne    804d02b <do_decode+0x35b>
 804d110:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d114:	89 3c 24             	mov    %edi,(%esp)
 804d117:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d11b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d11f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d123:	b9 3a 92 00 00       	mov    $0x923a,%ecx
 804d128:	e8 d3 23 00 00       	call   804f500 <__afl_maybe_log>
 804d12d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d131:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d135:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d139:	8b 3c 24             	mov    (%esp),%edi
 804d13c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("COR", 263);
 804d140:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d144:	89 3c 24             	mov    %edi,(%esp)
 804d147:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d14b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d14f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d153:	b9 b0 cf 00 00       	mov    $0xcfb0,%ecx
 804d158:	e8 a3 23 00 00       	call   804f500 <__afl_maybe_log>
 804d15d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d161:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d165:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d169:	8b 3c 24             	mov    (%esp),%edi
 804d16c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d170:	83 ec 08             	sub    $0x8,%esp
 804d173:	68 07 01 00 00       	push   $0x107
 804d178:	68 60 30 06 08       	push   $0x8063060
 804d17d:	e8 2e d8 ff ff       	call   804a9b0 <report_label_coverage>
 804d182:	8b 74 24 34          	mov    0x34(%esp),%esi
 804d186:	83 c4 10             	add    $0x10,%esp
 804d189:	e9 8a fe ff ff       	jmp    804d018 <do_decode+0x348>
 804d18e:	66 90                	xchg   %ax,%ax
	report_label_coverage("MCC", 249);
}
for (; n > 0 && i < n;)
                        
// COR Label 263
if((isbase64(inbuf[sum + i]) && inbuf[sum + i] == '=') != (isbase64(inbuf[sum + i]) || inbuf[sum + i] == '='))  {
 804d190:	84 db                	test   %bl,%bl
 804d192:	75 ac                	jne    804d140 <do_decode+0x470>
 804d194:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d198:	89 3c 24             	mov    %edi,(%esp)
 804d19b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d19f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d1a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d1a7:	b9 b0 c6 00 00       	mov    $0xc6b0,%ecx
 804d1ac:	e8 4f 23 00 00       	call   804f500 <__afl_maybe_log>
 804d1b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d1b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d1b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d1bd:	8b 3c 24             	mov    (%esp),%edi
 804d1c0:	8d 64 24 10          	lea    0x10(%esp),%esp
// MCC Label 249
if(!(n > 0) && !(i < n) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 249);
}
for (; n > 0 && i < n;)
 804d1c4:	85 f6                	test   %esi,%esi
 804d1c6:	0f 85 c8 fe ff ff    	jne    804d094 <do_decode+0x3c4>
 804d1cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d1d0:	89 3c 24             	mov    %edi,(%esp)
 804d1d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d1d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d1db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d1df:	b9 2e a4 00 00       	mov    $0xa42e,%ecx
 804d1e4:	e8 17 23 00 00       	call   804f500 <__afl_maybe_log>
 804d1e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d1ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d1f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d1f5:	8b 3c 24             	mov    (%esp),%edi
 804d1f8:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("COR", 263);
}

// ROR Label 264
if((inbuf[sum + i] != '=') != (inbuf[sum + i] == '='))  {
 804d1fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d200:	89 3c 24             	mov    %edi,(%esp)
 804d203:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d207:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d20b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d20f:	b9 42 11 00 00       	mov    $0x1142,%ecx
 804d214:	e8 e7 22 00 00       	call   804f500 <__afl_maybe_log>
 804d219:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d21d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d221:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d225:	8b 3c 24             	mov    (%esp),%edi
 804d228:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d22c:	80 7c 24 0c 3d       	cmpb   $0x3d,0xc(%esp)
 804d231:	0f 95 c1             	setne  %cl
 804d234:	38 d9                	cmp    %bl,%cl
 804d236:	74 57                	je     804d28f <do_decode+0x5bf>
 804d238:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d23c:	89 3c 24             	mov    %edi,(%esp)
 804d23f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d243:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d247:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d24b:	b9 ea e5 00 00       	mov    $0xe5ea,%ecx
 804d250:	e8 ab 22 00 00       	call   804f500 <__afl_maybe_log>
 804d255:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d259:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d25d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d261:	8b 3c 24             	mov    (%esp),%edi
 804d264:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 264);
 804d268:	83 ec 08             	sub    $0x8,%esp
 804d26b:	68 08 01 00 00       	push   $0x108
 804d270:	68 48 30 06 08       	push   $0x8063048
 804d275:	e8 36 d7 ff ff       	call   804a9b0 <report_label_coverage>
 804d27a:	0f b6 9c 2c 40 0c 00 	movzbl 0xc40(%esp,%ebp,1),%ebx
 804d281:	00 
 804d282:	88 5c 24 1c          	mov    %bl,0x1c(%esp)
 804d286:	83 c4 10             	add    $0x10,%esp
 804d289:	80 fb 3d             	cmp    $0x3d,%bl
 804d28c:	0f 94 c3             	sete   %bl
 804d28f:	90                   	nop
}

// MCC Label 265
if(isbase64(inbuf[sum + i]) && inbuf[sum + i] == '=' ) {
 804d290:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d294:	89 3c 24             	mov    %edi,(%esp)
 804d297:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d29b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d29f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d2a3:	b9 78 d3 00 00       	mov    $0xd378,%ecx
 804d2a8:	e8 53 22 00 00       	call   804f500 <__afl_maybe_log>
 804d2ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d2b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d2b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d2b9:	8b 3c 24             	mov    (%esp),%edi
 804d2bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d2c0:	83 ec 0c             	sub    $0xc,%esp
 804d2c3:	0f be 74 24 18       	movsbl 0x18(%esp),%esi
 804d2c8:	56                   	push   %esi
 804d2c9:	e8 f2 38 00 00       	call   8050bc0 <isbase64>
 804d2ce:	83 c4 10             	add    $0x10,%esp
 804d2d1:	84 c0                	test   %al,%al
 804d2d3:	74 6b                	je     804d340 <do_decode+0x670>
 804d2d5:	8d 76 00             	lea    0x0(%esi),%esi
 804d2d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d2dc:	89 3c 24             	mov    %edi,(%esp)
 804d2df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d2e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d2e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d2eb:	b9 d1 4d 00 00       	mov    $0x4dd1,%ecx
 804d2f0:	e8 0b 22 00 00       	call   804f500 <__afl_maybe_log>
 804d2f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d2f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d2fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d301:	8b 3c 24             	mov    (%esp),%edi
 804d304:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d308:	84 db                	test   %bl,%bl
 804d30a:	0f 85 66 18 00 00    	jne    804eb76 <do_decode+0x1ea6>
 804d310:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d314:	89 3c 24             	mov    %edi,(%esp)
 804d317:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d31b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d31f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d323:	b9 1f e5 00 00       	mov    $0xe51f,%ecx
 804d328:	e8 d3 21 00 00       	call   804f500 <__afl_maybe_log>
 804d32d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d331:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d335:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d339:	8b 3c 24             	mov    (%esp),%edi
 804d33c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 265);
}
// MCC Label 266
if(isbase64(inbuf[sum + i]) && !(inbuf[sum + i] == '=') ) {
 804d340:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d344:	89 3c 24             	mov    %edi,(%esp)
 804d347:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d34b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d34f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d353:	b9 84 25 00 00       	mov    $0x2584,%ecx
 804d358:	e8 a3 21 00 00       	call   804f500 <__afl_maybe_log>
 804d35d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d361:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d365:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d369:	8b 3c 24             	mov    (%esp),%edi
 804d36c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d370:	80 7c 24 0c 3d       	cmpb   $0x3d,0xc(%esp)
 804d375:	0f 84 8e 00 00 00    	je     804d409 <do_decode+0x739>
 804d37b:	90                   	nop
 804d37c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d380:	89 3c 24             	mov    %edi,(%esp)
 804d383:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d387:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d38b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d38f:	b9 3e 6d 00 00       	mov    $0x6d3e,%ecx
 804d394:	e8 67 21 00 00       	call   804f500 <__afl_maybe_log>
 804d399:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d39d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d3a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d3a5:	8b 3c 24             	mov    (%esp),%edi
 804d3a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d3ac:	84 c0                	test   %al,%al
 804d3ae:	74 59                	je     804d409 <do_decode+0x739>
 804d3b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d3b4:	89 3c 24             	mov    %edi,(%esp)
 804d3b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d3bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d3bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d3c3:	b9 43 4e 00 00       	mov    $0x4e43,%ecx
 804d3c8:	e8 33 21 00 00       	call   804f500 <__afl_maybe_log>
 804d3cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d3d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d3d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d3d9:	8b 3c 24             	mov    (%esp),%edi
 804d3dc:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 266);
 804d3e0:	83 ec 08             	sub    $0x8,%esp
 804d3e3:	68 0a 01 00 00       	push   $0x10a
 804d3e8:	68 64 30 06 08       	push   $0x8063064
 804d3ed:	e8 be d5 ff ff       	call   804a9b0 <report_label_coverage>
 804d3f2:	0f be 84 2c 40 0c 00 	movsbl 0xc40(%esp,%ebp,1),%eax
 804d3f9:	00 
 804d3fa:	88 44 24 1c          	mov    %al,0x1c(%esp)
 804d3fe:	89 04 24             	mov    %eax,(%esp)
 804d401:	e8 ba 37 00 00       	call   8050bc0 <isbase64>
 804d406:	83 c4 10             	add    $0x10,%esp
 804d409:	8d 76 00             	lea    0x0(%esi),%esi
}
// MCC Label 267
if(!(isbase64(inbuf[sum + i])) && inbuf[sum + i] == '=' ) {
 804d40c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d410:	89 3c 24             	mov    %edi,(%esp)
 804d413:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d417:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d41b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d41f:	b9 b8 c8 00 00       	mov    $0xc8b8,%ecx
 804d424:	e8 d7 20 00 00       	call   804f500 <__afl_maybe_log>
 804d429:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d42d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d431:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d435:	8b 3c 24             	mov    (%esp),%edi
 804d438:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d43c:	80 7c 24 0c 3d       	cmpb   $0x3d,0xc(%esp)
 804d441:	0f 94 c1             	sete   %cl
 804d444:	38 c8                	cmp    %cl,%al
 804d446:	0f 82 cb 16 00 00    	jb     804eb17 <do_decode+0x1e47>
 804d44c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d450:	89 3c 24             	mov    %edi,(%esp)
 804d453:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d457:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d45b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d45f:	b9 56 bb 00 00       	mov    $0xbb56,%ecx
 804d464:	e8 97 20 00 00       	call   804f500 <__afl_maybe_log>
 804d469:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d46d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d471:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d475:	8b 3c 24             	mov    (%esp),%edi
 804d478:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 267);
}
// MCC Label 268
if(!(isbase64(inbuf[sum + i])) && !(inbuf[sum + i] == '=') ) {
 804d47c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d480:	89 3c 24             	mov    %edi,(%esp)
 804d483:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d487:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d48b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d48f:	b9 25 8e 00 00       	mov    $0x8e25,%ecx
 804d494:	e8 67 20 00 00       	call   804f500 <__afl_maybe_log>
 804d499:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d49d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d4a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d4a5:	8b 3c 24             	mov    (%esp),%edi
 804d4a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d4ac:	80 7c 24 0c 3d       	cmpb   $0x3d,0xc(%esp)
 804d4b1:	0f 95 c2             	setne  %dl
 804d4b4:	38 c2                	cmp    %al,%dl
 804d4b6:	76 59                	jbe    804d511 <do_decode+0x841>
 804d4b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d4bc:	89 3c 24             	mov    %edi,(%esp)
 804d4bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d4c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d4c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d4cb:	b9 ea 91 00 00       	mov    $0x91ea,%ecx
 804d4d0:	e8 2b 20 00 00       	call   804f500 <__afl_maybe_log>
 804d4d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d4d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d4dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d4e1:	8b 3c 24             	mov    (%esp),%edi
 804d4e4:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 268);
 804d4e8:	83 ec 08             	sub    $0x8,%esp
 804d4eb:	68 0c 01 00 00       	push   $0x10c
 804d4f0:	68 64 30 06 08       	push   $0x8063064
 804d4f5:	e8 b6 d4 ff ff       	call   804a9b0 <report_label_coverage>
 804d4fa:	0f be 84 2c 40 0c 00 	movsbl 0xc40(%esp,%ebp,1),%eax
 804d501:	00 
 804d502:	88 44 24 1c          	mov    %al,0x1c(%esp)
 804d506:	89 04 24             	mov    %eax,(%esp)
 804d509:	e8 b2 36 00 00       	call   8050bc0 <isbase64>
 804d50e:	83 c4 10             	add    $0x10,%esp
 804d511:	8d 76 00             	lea    0x0(%esi),%esi
}
if (isbase64(inbuf[sum + i]) || inbuf[sum + i] == '=')
 804d514:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d518:	89 3c 24             	mov    %edi,(%esp)
 804d51b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d51f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d523:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d527:	b9 19 94 00 00       	mov    $0x9419,%ecx
 804d52c:	e8 cf 1f 00 00       	call   804f500 <__afl_maybe_log>
 804d531:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d535:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d539:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d53d:	8b 3c 24             	mov    (%esp),%edi
 804d540:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d544:	80 7c 24 0c 3d       	cmpb   $0x3d,0xc(%esp)
 804d549:	0f 84 c1 11 00 00    	je     804e710 <do_decode+0x1a40>
 804d54f:	90                   	nop
 804d550:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d554:	89 3c 24             	mov    %edi,(%esp)
 804d557:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d55b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d55f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d563:	b9 ab 20 00 00       	mov    $0x20ab,%ecx
 804d568:	e8 93 1f 00 00       	call   804f500 <__afl_maybe_log>
 804d56d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d571:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d575:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d579:	8b 3c 24             	mov    (%esp),%edi
 804d57c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d580:	84 c0                	test   %al,%al
 804d582:	0f 85 88 11 00 00    	jne    804e710 <do_decode+0x1a40>
 804d588:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d58c:	89 3c 24             	mov    %edi,(%esp)
 804d58f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d593:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d597:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d59b:	b9 17 f8 00 00       	mov    $0xf817,%ecx
 804d5a0:	e8 5b 1f 00 00       	call   804f500 <__afl_maybe_log>
 804d5a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d5a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d5ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d5b1:	8b 3c 24             	mov    (%esp),%edi
 804d5b4:	8d 64 24 10          	lea    0x10(%esp),%esp
                            i++;
                        else
                            memmove(inbuf + sum + i, inbuf + sum + i + 1, --n - i);
 804d5b8:	8b 7c 24 24          	mov    0x24(%esp),%edi
 804d5bc:	83 ec 04             	sub    $0x4,%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 236);
}
if (ignore_garbage) {
                    size_t i;
                    i = 0;
 804d5bf:	31 db                	xor    %ebx,%ebx
	report_label_coverage("MCC", 268);
}
if (isbase64(inbuf[sum + i]) || inbuf[sum + i] == '=')
                            i++;
                        else
                            memmove(inbuf + sum + i, inbuf + sum + i + 1, --n - i);
 804d5c1:	8d 77 ff             	lea    -0x1(%edi),%esi
 804d5c4:	89 74 24 28          	mov    %esi,0x28(%esp)
 804d5c8:	56                   	push   %esi
 804d5c9:	8d 8c 2c 39 0c 00 00 	lea    0xc39(%esp,%ebp,1),%ecx
 804d5d0:	51                   	push   %ecx
 804d5d1:	ff 74 24 20          	pushl  0x20(%esp)
 804d5d5:	e8 76 bb ff ff       	call   8049150 <memmove@plt>
 804d5da:	83 c4 10             	add    $0x10,%esp
 804d5dd:	8d 76 00             	lea    0x0(%esi),%esi
asm volatile (""::: "memory");
	report_label_coverage("ABS", 251);
}

// COR Label 252
if((n > 0 || i < n) != (n > 0 && i < n))  {
 804d5e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d5e4:	89 3c 24             	mov    %edi,(%esp)
 804d5e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d5eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d5ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d5f3:	b9 ac f5 00 00       	mov    $0xf5ac,%ecx
 804d5f8:	e8 03 1f 00 00       	call   804f500 <__afl_maybe_log>
 804d5fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d601:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d605:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d609:	8b 3c 24             	mov    (%esp),%edi
 804d60c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d610:	85 f6                	test   %esi,%esi
 804d612:	0f 95 c2             	setne  %dl
 804d615:	39 f3                	cmp    %esi,%ebx
 804d617:	0f 92 c0             	setb   %al
 804d61a:	89 c1                	mov    %eax,%ecx
 804d61c:	21 d0                	and    %edx,%eax
 804d61e:	09 d1                	or     %edx,%ecx
 804d620:	38 c1                	cmp    %al,%cl
 804d622:	74 4e                	je     804d672 <do_decode+0x9a2>
 804d624:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d628:	89 3c 24             	mov    %edi,(%esp)
 804d62b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d62f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d633:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d637:	b9 1b cf 00 00       	mov    $0xcf1b,%ecx
 804d63c:	e8 bf 1e 00 00       	call   804f500 <__afl_maybe_log>
 804d641:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d645:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d649:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d64d:	8b 3c 24             	mov    (%esp),%edi
 804d650:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("COR", 252);
 804d654:	83 ec 08             	sub    $0x8,%esp
 804d657:	68 fc 00 00 00       	push   $0xfc
 804d65c:	68 60 30 06 08       	push   $0x8063060
 804d661:	e8 4a d3 ff ff       	call   804a9b0 <report_label_coverage>
 804d666:	8b 74 24 34          	mov    0x34(%esp),%esi
 804d66a:	83 c4 10             	add    $0x10,%esp
 804d66d:	85 f6                	test   %esi,%esi
 804d66f:	0f 95 c2             	setne  %dl
 804d672:	66 90                	xchg   %ax,%ax
}

// ROR Label 253
if((n <= 0) != (n > 0))  {
 804d674:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d678:	89 3c 24             	mov    %edi,(%esp)
 804d67b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d67f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d683:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d687:	b9 07 02 00 00       	mov    $0x207,%ecx
 804d68c:	e8 6f 1e 00 00       	call   804f500 <__afl_maybe_log>
 804d691:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d695:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d699:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d69d:	8b 3c 24             	mov    (%esp),%edi
 804d6a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d6a4:	85 f6                	test   %esi,%esi
 804d6a6:	0f 94 c0             	sete   %al
 804d6a9:	38 d0                	cmp    %dl,%al
 804d6ab:	74 4c                	je     804d6f9 <do_decode+0xa29>
 804d6ad:	8d 76 00             	lea    0x0(%esi),%esi
 804d6b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d6b4:	89 3c 24             	mov    %edi,(%esp)
 804d6b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d6bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d6bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d6c3:	b9 51 e5 00 00       	mov    $0xe551,%ecx
 804d6c8:	e8 33 1e 00 00       	call   804f500 <__afl_maybe_log>
 804d6cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d6d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d6d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d6d9:	8b 3c 24             	mov    (%esp),%edi
 804d6dc:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 253);
 804d6e0:	83 ec 08             	sub    $0x8,%esp
 804d6e3:	68 fd 00 00 00       	push   $0xfd
 804d6e8:	68 48 30 06 08       	push   $0x8063048
 804d6ed:	e8 be d2 ff ff       	call   804a9b0 <report_label_coverage>
 804d6f2:	8b 74 24 34          	mov    0x34(%esp),%esi
 804d6f6:	83 c4 10             	add    $0x10,%esp
 804d6f9:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 254
if((n < 0) != (n > 0))  {
 804d6fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d700:	89 3c 24             	mov    %edi,(%esp)
 804d703:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d707:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d70b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d70f:	b9 16 d4 00 00       	mov    $0xd416,%ecx
 804d714:	e8 e7 1d 00 00       	call   804f500 <__afl_maybe_log>
 804d719:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d71d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d721:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d725:	8b 3c 24             	mov    (%esp),%edi
 804d728:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d72c:	85 f6                	test   %esi,%esi
 804d72e:	0f 85 4c 10 00 00    	jne    804e780 <do_decode+0x1ab0>
 804d734:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d738:	89 3c 24             	mov    %edi,(%esp)
 804d73b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d73f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d743:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d747:	b9 0b 1a 00 00       	mov    $0x1a0b,%ecx
 804d74c:	e8 af 1d 00 00       	call   804f500 <__afl_maybe_log>
 804d751:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d755:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d759:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d75d:	8b 3c 24             	mov    (%esp),%edi
 804d760:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 254);
}
// ROR Label 255
if((n >= 0) != (n > 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 255);
 804d764:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d768:	89 3c 24             	mov    %edi,(%esp)
 804d76b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d76f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d773:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d777:	b9 f1 a1 00 00       	mov    $0xa1f1,%ecx
 804d77c:	e8 7f 1d 00 00       	call   804f500 <__afl_maybe_log>
 804d781:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d785:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d789:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d78d:	8b 3c 24             	mov    (%esp),%edi
 804d790:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d794:	83 ec 08             	sub    $0x8,%esp
 804d797:	68 ff 00 00 00       	push   $0xff
 804d79c:	68 48 30 06 08       	push   $0x8063048
 804d7a1:	e8 0a d2 ff ff       	call   804a9b0 <report_label_coverage>
 804d7a6:	8b 44 24 34          	mov    0x34(%esp),%eax
 804d7aa:	83 c4 10             	add    $0x10,%esp
 804d7ad:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 256
if((i <= n) != (i < n))  {
 804d7b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d7b4:	89 3c 24             	mov    %edi,(%esp)
 804d7b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d7bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d7bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d7c3:	b9 9a 10 00 00       	mov    $0x109a,%ecx
 804d7c8:	e8 33 1d 00 00       	call   804f500 <__afl_maybe_log>
 804d7cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d7d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d7d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d7d9:	8b 3c 24             	mov    (%esp),%edi
 804d7dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d7e0:	39 c3                	cmp    %eax,%ebx
 804d7e2:	0f 92 c2             	setb   %dl
 804d7e5:	0f 96 c1             	setbe  %cl
 804d7e8:	38 d1                	cmp    %dl,%cl
 804d7ea:	74 4e                	je     804d83a <do_decode+0xb6a>
 804d7ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d7f0:	89 3c 24             	mov    %edi,(%esp)
 804d7f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d7f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d7fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d7ff:	b9 70 c2 00 00       	mov    $0xc270,%ecx
 804d804:	e8 f7 1c 00 00       	call   804f500 <__afl_maybe_log>
 804d809:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d80d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d811:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d815:	8b 3c 24             	mov    (%esp),%edi
 804d818:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 256);
 804d81c:	83 ec 08             	sub    $0x8,%esp
 804d81f:	68 00 01 00 00       	push   $0x100
 804d824:	68 48 30 06 08       	push   $0x8063048
 804d829:	e8 82 d1 ff ff       	call   804a9b0 <report_label_coverage>
 804d82e:	8b 44 24 34          	mov    0x34(%esp),%eax
 804d832:	83 c4 10             	add    $0x10,%esp
 804d835:	39 c3                	cmp    %eax,%ebx
 804d837:	0f 92 c2             	setb   %dl
 804d83a:	66 90                	xchg   %ax,%ax
}
// ROR Label 257
if((i > n) != (i < n))  {
 804d83c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d840:	89 3c 24             	mov    %edi,(%esp)
 804d843:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d847:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d84b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d84f:	b9 ee e4 00 00       	mov    $0xe4ee,%ecx
 804d854:	e8 a7 1c 00 00       	call   804f500 <__afl_maybe_log>
 804d859:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d85d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d861:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d865:	8b 3c 24             	mov    (%esp),%edi
 804d868:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d86c:	39 c3                	cmp    %eax,%ebx
 804d86e:	0f 97 c1             	seta   %cl
 804d871:	38 d1                	cmp    %dl,%cl
 804d873:	74 51                	je     804d8c6 <do_decode+0xbf6>
 804d875:	8d 76 00             	lea    0x0(%esi),%esi
 804d878:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d87c:	89 3c 24             	mov    %edi,(%esp)
 804d87f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d883:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d887:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d88b:	b9 03 d9 00 00       	mov    $0xd903,%ecx
 804d890:	e8 6b 1c 00 00       	call   804f500 <__afl_maybe_log>
 804d895:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d899:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d89d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d8a1:	8b 3c 24             	mov    (%esp),%edi
 804d8a4:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 257);
 804d8a8:	83 ec 08             	sub    $0x8,%esp
 804d8ab:	68 01 01 00 00       	push   $0x101
 804d8b0:	68 48 30 06 08       	push   $0x8063048
 804d8b5:	e8 f6 d0 ff ff       	call   804a9b0 <report_label_coverage>
 804d8ba:	8b 44 24 34          	mov    0x34(%esp),%eax
 804d8be:	83 c4 10             	add    $0x10,%esp
 804d8c1:	39 c3                	cmp    %eax,%ebx
 804d8c3:	0f 92 c2             	setb   %dl
 804d8c6:	66 90                	xchg   %ax,%ax
}
// ROR Label 258
if((i >= n) != (i < n))  {
 804d8c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d8cc:	89 3c 24             	mov    %edi,(%esp)
 804d8cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d8d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d8d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d8db:	b9 30 42 00 00       	mov    $0x4230,%ecx
 804d8e0:	e8 1b 1c 00 00       	call   804f500 <__afl_maybe_log>
 804d8e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d8e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d8ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d8f1:	8b 3c 24             	mov    (%esp),%edi
 804d8f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d8f8:	39 c3                	cmp    %eax,%ebx
 804d8fa:	0f 93 c1             	setae  %cl
 804d8fd:	38 d1                	cmp    %dl,%cl
 804d8ff:	74 51                	je     804d952 <do_decode+0xc82>
 804d901:	8d 76 00             	lea    0x0(%esi),%esi
 804d904:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d908:	89 3c 24             	mov    %edi,(%esp)
 804d90b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d90f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d913:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d917:	b9 b1 8e 00 00       	mov    $0x8eb1,%ecx
 804d91c:	e8 df 1b 00 00       	call   804f500 <__afl_maybe_log>
 804d921:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d925:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d929:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d92d:	8b 3c 24             	mov    (%esp),%edi
 804d930:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 258);
 804d934:	83 ec 08             	sub    $0x8,%esp
 804d937:	68 02 01 00 00       	push   $0x102
 804d93c:	68 48 30 06 08       	push   $0x8063048
 804d941:	e8 6a d0 ff ff       	call   804a9b0 <report_label_coverage>
 804d946:	8b 44 24 34          	mov    0x34(%esp),%eax
 804d94a:	83 c4 10             	add    $0x10,%esp
 804d94d:	39 c3                	cmp    %eax,%ebx
 804d94f:	0f 92 c2             	setb   %dl
 804d952:	66 90                	xchg   %ax,%ax
}

// MCC Label 259
if(n > 0 && i < n ) {
 804d954:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d958:	89 3c 24             	mov    %edi,(%esp)
 804d95b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d95f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d963:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d967:	b9 41 d7 00 00       	mov    $0xd741,%ecx
 804d96c:	e8 8f 1b 00 00       	call   804f500 <__afl_maybe_log>
 804d971:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d975:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d979:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d97d:	8b 3c 24             	mov    (%esp),%edi
 804d980:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d984:	85 c0                	test   %eax,%eax
 804d986:	0f 95 c1             	setne  %cl
 804d989:	0f 84 83 00 00 00    	je     804da12 <do_decode+0xd42>
 804d98f:	90                   	nop
 804d990:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d994:	89 3c 24             	mov    %edi,(%esp)
 804d997:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d99b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d99f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d9a3:	b9 13 31 00 00       	mov    $0x3113,%ecx
 804d9a8:	e8 53 1b 00 00       	call   804f500 <__afl_maybe_log>
 804d9ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d9b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d9b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d9b9:	8b 3c 24             	mov    (%esp),%edi
 804d9bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804d9c0:	84 d2                	test   %dl,%dl
 804d9c2:	74 4e                	je     804da12 <do_decode+0xd42>
 804d9c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804d9c8:	89 3c 24             	mov    %edi,(%esp)
 804d9cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804d9cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804d9d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804d9d7:	b9 36 74 00 00       	mov    $0x7436,%ecx
 804d9dc:	e8 1f 1b 00 00       	call   804f500 <__afl_maybe_log>
 804d9e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804d9e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804d9e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804d9ed:	8b 3c 24             	mov    (%esp),%edi
 804d9f0:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 259);
 804d9f4:	83 ec 08             	sub    $0x8,%esp
 804d9f7:	68 03 01 00 00       	push   $0x103
 804d9fc:	68 64 30 06 08       	push   $0x8063064
 804da01:	e8 aa cf ff ff       	call   804a9b0 <report_label_coverage>
 804da06:	8b 44 24 34          	mov    0x34(%esp),%eax
 804da0a:	83 c4 10             	add    $0x10,%esp
 804da0d:	85 c0                	test   %eax,%eax
 804da0f:	0f 95 c1             	setne  %cl
 804da12:	66 90                	xchg   %ax,%ax
}
// MCC Label 260
if(n > 0 && !(i < n) ) {
 804da14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804da18:	89 3c 24             	mov    %edi,(%esp)
 804da1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804da1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804da23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804da27:	b9 b3 d8 00 00       	mov    $0xd8b3,%ecx
 804da2c:	e8 cf 1a 00 00       	call   804f500 <__afl_maybe_log>
 804da31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804da35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804da39:	8b 54 24 04          	mov    0x4(%esp),%edx
 804da3d:	8b 3c 24             	mov    (%esp),%edi
 804da40:	8d 64 24 10          	lea    0x10(%esp),%esp
 804da44:	39 c3                	cmp    %eax,%ebx
 804da46:	72 7d                	jb     804dac5 <do_decode+0xdf5>
 804da48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804da4c:	89 3c 24             	mov    %edi,(%esp)
 804da4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804da53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804da57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804da5b:	b9 56 02 00 00       	mov    $0x256,%ecx
 804da60:	e8 9b 1a 00 00       	call   804f500 <__afl_maybe_log>
 804da65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804da69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804da6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804da71:	8b 3c 24             	mov    (%esp),%edi
 804da74:	8d 64 24 10          	lea    0x10(%esp),%esp
 804da78:	84 c9                	test   %cl,%cl
 804da7a:	74 49                	je     804dac5 <do_decode+0xdf5>
 804da7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804da80:	89 3c 24             	mov    %edi,(%esp)
 804da83:	89 54 24 04          	mov    %edx,0x4(%esp)
 804da87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804da8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804da8f:	b9 e5 e5 00 00       	mov    $0xe5e5,%ecx
 804da94:	e8 67 1a 00 00       	call   804f500 <__afl_maybe_log>
 804da99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804da9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804daa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804daa5:	8b 3c 24             	mov    (%esp),%edi
 804daa8:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 260);
 804daac:	83 ec 08             	sub    $0x8,%esp
 804daaf:	68 04 01 00 00       	push   $0x104
 804dab4:	68 64 30 06 08       	push   $0x8063064
 804dab9:	e8 f2 ce ff ff       	call   804a9b0 <report_label_coverage>
 804dabe:	8b 44 24 34          	mov    0x34(%esp),%eax
 804dac2:	83 c4 10             	add    $0x10,%esp
 804dac5:	8d 76 00             	lea    0x0(%esi),%esi
}
// MCC Label 261
if(!(n > 0) && i < n ) {
 804dac8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dacc:	89 3c 24             	mov    %edi,(%esp)
 804dacf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dad3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dad7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dadb:	b9 92 2a 00 00       	mov    $0x2a92,%ecx
 804dae0:	e8 1b 1a 00 00       	call   804f500 <__afl_maybe_log>
 804dae5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dae9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804daed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804daf1:	8b 3c 24             	mov    (%esp),%edi
 804daf4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804daf8:	85 c0                	test   %eax,%eax
 804dafa:	0f 94 c2             	sete   %dl
 804dafd:	39 c3                	cmp    %eax,%ebx
 804daff:	0f 83 85 00 00 00    	jae    804db8a <do_decode+0xeba>
 804db05:	8d 76 00             	lea    0x0(%esi),%esi
 804db08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804db0c:	89 3c 24             	mov    %edi,(%esp)
 804db0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804db13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804db17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804db1b:	b9 18 b2 00 00       	mov    $0xb218,%ecx
 804db20:	e8 db 19 00 00       	call   804f500 <__afl_maybe_log>
 804db25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804db29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804db2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804db31:	8b 3c 24             	mov    (%esp),%edi
 804db34:	8d 64 24 10          	lea    0x10(%esp),%esp
 804db38:	84 d2                	test   %dl,%dl
 804db3a:	74 4e                	je     804db8a <do_decode+0xeba>
 804db3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804db40:	89 3c 24             	mov    %edi,(%esp)
 804db43:	89 54 24 04          	mov    %edx,0x4(%esp)
 804db47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804db4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804db4f:	b9 95 b3 00 00       	mov    $0xb395,%ecx
 804db54:	e8 a7 19 00 00       	call   804f500 <__afl_maybe_log>
 804db59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804db5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804db61:	8b 54 24 04          	mov    0x4(%esp),%edx
 804db65:	8b 3c 24             	mov    (%esp),%edi
 804db68:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 261);
 804db6c:	83 ec 08             	sub    $0x8,%esp
 804db6f:	68 05 01 00 00       	push   $0x105
 804db74:	68 64 30 06 08       	push   $0x8063064
 804db79:	e8 32 ce ff ff       	call   804a9b0 <report_label_coverage>
 804db7e:	8b 44 24 34          	mov    0x34(%esp),%eax
 804db82:	83 c4 10             	add    $0x10,%esp
 804db85:	85 c0                	test   %eax,%eax
 804db87:	0f 94 c2             	sete   %dl
 804db8a:	66 90                	xchg   %ax,%ax
}
// MCC Label 262
if(!(n > 0) && !(i < n) ) {
 804db8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804db90:	89 3c 24             	mov    %edi,(%esp)
 804db93:	89 54 24 04          	mov    %edx,0x4(%esp)
 804db97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804db9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804db9f:	b9 e6 cb 00 00       	mov    $0xcbe6,%ecx
 804dba4:	e8 57 19 00 00       	call   804f500 <__afl_maybe_log>
 804dba9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dbad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dbb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dbb5:	8b 3c 24             	mov    (%esp),%edi
 804dbb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dbbc:	39 c3                	cmp    %eax,%ebx
 804dbbe:	0f 82 84 00 00 00    	jb     804dc48 <do_decode+0xf78>
 804dbc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dbc8:	89 3c 24             	mov    %edi,(%esp)
 804dbcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dbcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dbd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dbd7:	b9 3e 44 00 00       	mov    $0x443e,%ecx
 804dbdc:	e8 1f 19 00 00       	call   804f500 <__afl_maybe_log>
 804dbe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dbe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dbe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dbed:	8b 3c 24             	mov    (%esp),%edi
 804dbf0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dbf4:	84 d2                	test   %dl,%dl
 804dbf6:	74 50                	je     804dc48 <do_decode+0xf78>
 804dbf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dbfc:	89 3c 24             	mov    %edi,(%esp)
 804dbff:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dc07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dc0b:	b9 82 9d 00 00       	mov    $0x9d82,%ecx
 804dc10:	e8 eb 18 00 00       	call   804f500 <__afl_maybe_log>
 804dc15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dc19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dc1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dc21:	8b 3c 24             	mov    (%esp),%edi
 804dc24:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 262);
 804dc28:	83 ec 08             	sub    $0x8,%esp
 804dc2b:	68 06 01 00 00       	push   $0x106
 804dc30:	68 64 30 06 08       	push   $0x8063064
 804dc35:	e8 76 cd ff ff       	call   804a9b0 <report_label_coverage>
 804dc3a:	8b 44 24 34          	mov    0x34(%esp),%eax
 804dc3e:	83 c4 10             	add    $0x10,%esp
 804dc41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 804dc48:	8b 7c 24 10          	mov    0x10(%esp),%edi
}
;
                }
                sum += n;
 804dc4c:	01 c5                	add    %eax,%ebp
 804dc4e:	8b 07                	mov    (%edi),%eax
// ABS Label 269
if(temp_3 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 269);
}
if (temp_3)
 804dc50:	a8 20                	test   $0x20,%al
 804dc52:	0f 85 18 09 00 00    	jne    804e570 <do_decode+0x18a0>
 804dc58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dc5c:	89 3c 24             	mov    %edi,(%esp)
 804dc5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dc67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dc6b:	b9 85 76 00 00       	mov    $0x7685,%ecx
 804dc70:	e8 8b 18 00 00       	call   804f500 <__afl_maybe_log>
 804dc75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dc79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dc7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dc81:	8b 3c 24             	mov    (%esp),%edi
 804dc84:	8d 64 24 10          	lea    0x10(%esp),%esp
                        error(1, (*__errno_location()), gettext("read error"));
                }
            }
            {
                int temp_2 = !(sum < (((((1024 * 3)) + 2) / 3) * 4) && !feof_unlocked(in));
 804dc88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dc8c:	89 3c 24             	mov    %edi,(%esp)
 804dc8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dc93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dc97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dc9b:	b9 4d 4e 00 00       	mov    $0x4e4d,%ecx
 804dca0:	e8 5b 18 00 00       	call   804f500 <__afl_maybe_log>
 804dca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dca9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dcad:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dcb1:	8b 3c 24             	mov    (%esp),%edi
 804dcb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dcb8:	81 fd ff 0f 00 00    	cmp    $0xfff,%ebp
 804dcbe:	77 68                	ja     804dd28 <do_decode+0x1058>
 804dcc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dcc4:	89 3c 24             	mov    %edi,(%esp)
 804dcc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dccb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dccf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dcd3:	b9 f2 2a 00 00       	mov    $0x2af2,%ecx
 804dcd8:	e8 23 18 00 00       	call   804f500 <__afl_maybe_log>
 804dcdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dce1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dce5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dce9:	8b 3c 24             	mov    (%esp),%edi
 804dcec:	8d 64 24 10          	lea    0x10(%esp),%esp
// ABS Label 270
if(temp_2 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 270);
}
if (temp_2)
 804dcf0:	a8 10                	test   $0x10,%al
 804dcf2:	0f 84 68 f0 ff ff    	je     804cd60 <do_decode+0x90>
 804dcf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dcfc:	89 3c 24             	mov    %edi,(%esp)
 804dcff:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dd03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dd07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dd0b:	b9 b4 b8 00 00       	mov    $0xb8b4,%ecx
 804dd10:	e8 eb 17 00 00       	call   804f500 <__afl_maybe_log>
 804dd15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dd19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dd1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dd21:	8b 3c 24             	mov    (%esp),%edi
 804dd24:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 236);
}
if (ignore_garbage) {
                    size_t i;
                    i = 0;
 804dd28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dd2c:	89 3c 24             	mov    %edi,(%esp)
 804dd2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dd33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dd37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dd3b:	b9 aa 55 00 00       	mov    $0x55aa,%ecx
 804dd40:	e8 bb 17 00 00       	call   804f500 <__afl_maybe_log>
 804dd45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dd49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dd4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dd51:	8b 3c 24             	mov    (%esp),%edi
 804dd54:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dd58:	31 c9                	xor    %ecx,%ecx
 804dd5a:	89 6c 24 14          	mov    %ebp,0x14(%esp)
 804dd5e:	31 f6                	xor    %esi,%esi
 804dd60:	89 cd                	mov    %ecx,%ebp
 804dd62:	e9 15 03 00 00       	jmp    804e07c <do_decode+0x13ac>
 804dd67:	89 f6                	mov    %esi,%esi
 804dd69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
	report_label_coverage("MCC", 280);
}
if (k == 1 && ctx.i == 0)
                            break;
                        n = (1024 * 3);
                        ok = base64_decode_ctx(&ctx + (lava_get(253)) * (1818326372 == (lava_get(253)) || 1685414252 == (lava_get(253))), inbuf + (lava_get(255)) * (1818326370 == (lava_get(255)) || 1651859820 == (lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
 804dd70:	83 ec 0c             	sub    $0xc,%esp
 804dd73:	68 fd 00 00 00       	push   $0xfd
 804dd78:	e8 e3 e7 ff ff       	call   804c560 <lava_get>
 804dd7d:	5a                   	pop    %edx
 804dd7e:	8d 54 24 30          	lea    0x30(%esp),%edx
 804dd82:	52                   	push   %edx
 804dd83:	8d 4c 24 40          	lea    0x40(%esp),%ecx
 804dd87:	51                   	push   %ecx
 804dd88:	57                   	push   %edi
 804dd89:	53                   	push   %ebx
 804dd8a:	8b 7c 24 28          	mov    0x28(%esp),%edi
 804dd8e:	8d 54 24 44          	lea    0x44(%esp),%edx
 804dd92:	c1 e7 03             	shl    $0x3,%edi
 804dd95:	3d 6c 61 75 64       	cmp    $0x6475616c,%eax
 804dd9a:	0f 94 c3             	sete   %bl
 804dd9d:	0f b6 c3             	movzbl %bl,%eax
 804dda0:	0f af f8             	imul   %eax,%edi
 804dda3:	01 d7                	add    %edx,%edi
 804dda5:	57                   	push   %edi
 804dda6:	e8 a5 2e 00 00       	call   8050c50 <base64_decode_ctx>
                        {
                            size_t temp_5 = fwrite_unlocked(outbuf, 1, n, out);
 804ddab:	8b 54 24 44          	mov    0x44(%esp),%edx
	report_label_coverage("MCC", 280);
}
if (k == 1 && ctx.i == 0)
                            break;
                        n = (1024 * 3);
                        ok = base64_decode_ctx(&ctx + (lava_get(253)) * (1818326372 == (lava_get(253)) || 1685414252 == (lava_get(253))), inbuf + (lava_get(255)) * (1818326370 == (lava_get(255)) || 1651859820 == (lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
 804ddaf:	89 c3                	mov    %eax,%ebx
 804ddb1:	83 c4 20             	add    $0x20,%esp
                        {
                            size_t temp_5 = fwrite_unlocked(outbuf, 1, n, out);
 804ddb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ddb8:	89 3c 24             	mov    %edi,(%esp)
 804ddbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ddbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ddc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ddc7:	b9 69 7c 00 00       	mov    $0x7c69,%ecx
 804ddcc:	e8 2f 17 00 00       	call   804f500 <__afl_maybe_log>
 804ddd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ddd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ddd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dddd:	8b 3c 24             	mov    (%esp),%edi
 804dde0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dde4:	ff 74 24 1c          	pushl  0x1c(%esp)
 804dde8:	52                   	push   %edx
 804dde9:	6a 01                	push   $0x1
 804ddeb:	8d 4c 24 3c          	lea    0x3c(%esp),%ecx
 804ddef:	51                   	push   %ecx
 804ddf0:	e8 0b b6 ff ff       	call   8049400 <fwrite_unlocked@plt>
asm volatile (""::: "memory");
	report_label_coverage("ABS", 282);
}

// ROR Label 283
if((temp_5 <= n) != (temp_5 < n))  {
 804ddf5:	8b 54 24 34          	mov    0x34(%esp),%edx
 804ddf9:	83 c4 10             	add    $0x10,%esp
if (k == 1 && ctx.i == 0)
                            break;
                        n = (1024 * 3);
                        ok = base64_decode_ctx(&ctx + (lava_get(253)) * (1818326372 == (lava_get(253)) || 1685414252 == (lava_get(253))), inbuf + (lava_get(255)) * (1818326370 == (lava_get(255)) || 1651859820 == (lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
                        {
                            size_t temp_5 = fwrite_unlocked(outbuf, 1, n, out);
 804ddfc:	89 c7                	mov    %eax,%edi
asm volatile (""::: "memory");
	report_label_coverage("ABS", 282);
}

// ROR Label 283
if((temp_5 <= n) != (temp_5 < n))  {
 804ddfe:	39 d0                	cmp    %edx,%eax
 804de00:	0f 92 c1             	setb   %cl
 804de03:	0f 96 c0             	setbe  %al
 804de06:	38 c8                	cmp    %cl,%al
 804de08:	74 50                	je     804de5a <do_decode+0x118a>
 804de0a:	66 90                	xchg   %ax,%ax
 804de0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804de10:	89 3c 24             	mov    %edi,(%esp)
 804de13:	89 54 24 04          	mov    %edx,0x4(%esp)
 804de17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804de1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804de1f:	b9 d7 91 00 00       	mov    $0x91d7,%ecx
 804de24:	e8 d7 16 00 00       	call   804f500 <__afl_maybe_log>
 804de29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804de2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804de31:	8b 54 24 04          	mov    0x4(%esp),%edx
 804de35:	8b 3c 24             	mov    (%esp),%edi
 804de38:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 283);
 804de3c:	83 ec 08             	sub    $0x8,%esp
 804de3f:	68 1b 01 00 00       	push   $0x11b
 804de44:	68 48 30 06 08       	push   $0x8063048
 804de49:	e8 62 cb ff ff       	call   804a9b0 <report_label_coverage>
 804de4e:	8b 54 24 34          	mov    0x34(%esp),%edx
 804de52:	83 c4 10             	add    $0x10,%esp
 804de55:	39 d7                	cmp    %edx,%edi
 804de57:	0f 92 c1             	setb   %cl
 804de5a:	66 90                	xchg   %ax,%ax
}
// ROR Label 284
if((temp_5 > n) != (temp_5 < n))  {
 804de5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804de60:	89 3c 24             	mov    %edi,(%esp)
 804de63:	89 54 24 04          	mov    %edx,0x4(%esp)
 804de67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804de6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804de6f:	b9 7a 3b 00 00       	mov    $0x3b7a,%ecx
 804de74:	e8 87 16 00 00       	call   804f500 <__afl_maybe_log>
 804de79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804de7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804de81:	8b 54 24 04          	mov    0x4(%esp),%edx
 804de85:	8b 3c 24             	mov    (%esp),%edi
 804de88:	8d 64 24 10          	lea    0x10(%esp),%esp
 804de8c:	39 fa                	cmp    %edi,%edx
 804de8e:	0f 92 c0             	setb   %al
 804de91:	38 c1                	cmp    %al,%cl
 804de93:	74 51                	je     804dee6 <do_decode+0x1216>
 804de95:	8d 76 00             	lea    0x0(%esi),%esi
 804de98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804de9c:	89 3c 24             	mov    %edi,(%esp)
 804de9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dea3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dea7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804deab:	b9 67 66 00 00       	mov    $0x6667,%ecx
 804deb0:	e8 4b 16 00 00       	call   804f500 <__afl_maybe_log>
 804deb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804deb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804debd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dec1:	8b 3c 24             	mov    (%esp),%edi
 804dec4:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 284);
 804dec8:	83 ec 08             	sub    $0x8,%esp
 804decb:	68 1c 01 00 00       	push   $0x11c
 804ded0:	68 48 30 06 08       	push   $0x8063048
 804ded5:	e8 d6 ca ff ff       	call   804a9b0 <report_label_coverage>
 804deda:	8b 54 24 34          	mov    0x34(%esp),%edx
 804dede:	83 c4 10             	add    $0x10,%esp
 804dee1:	39 d7                	cmp    %edx,%edi
 804dee3:	0f 92 c0             	setb   %al
 804dee6:	66 90                	xchg   %ax,%ax
}
// ROR Label 285
if((temp_5 >= n) != (temp_5 < n))  {
 804dee8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804deec:	89 3c 24             	mov    %edi,(%esp)
 804deef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804def3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804def7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804defb:	b9 b7 31 00 00       	mov    $0x31b7,%ecx
 804df00:	e8 fb 15 00 00       	call   804f500 <__afl_maybe_log>
 804df05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804df09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804df0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804df11:	8b 3c 24             	mov    (%esp),%edi
 804df14:	8d 64 24 10          	lea    0x10(%esp),%esp
 804df18:	39 d7                	cmp    %edx,%edi
 804df1a:	0f 93 c1             	setae  %cl
 804df1d:	38 c1                	cmp    %al,%cl
 804df1f:	74 4c                	je     804df6d <do_decode+0x129d>
 804df21:	8d 76 00             	lea    0x0(%esi),%esi
 804df24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804df28:	89 3c 24             	mov    %edi,(%esp)
 804df2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804df2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804df33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804df37:	b9 a9 aa 00 00       	mov    $0xaaa9,%ecx
 804df3c:	e8 bf 15 00 00       	call   804f500 <__afl_maybe_log>
 804df41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804df45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804df49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804df4d:	8b 3c 24             	mov    (%esp),%edi
 804df50:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 285);
 804df54:	83 ec 08             	sub    $0x8,%esp
 804df57:	68 1d 01 00 00       	push   $0x11d
 804df5c:	68 48 30 06 08       	push   $0x8063048
 804df61:	e8 4a ca ff ff       	call   804a9b0 <report_label_coverage>
 804df66:	8b 54 24 34          	mov    0x34(%esp),%edx
 804df6a:	83 c4 10             	add    $0x10,%esp
 804df6d:	8d 76 00             	lea    0x0(%esi),%esi
}
if (temp_5 < n)
 804df70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804df74:	89 3c 24             	mov    %edi,(%esp)
 804df77:	89 54 24 04          	mov    %edx,0x4(%esp)
 804df7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804df7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804df83:	b9 88 6c 00 00       	mov    $0x6c88,%ecx
 804df88:	e8 73 15 00 00       	call   804f500 <__afl_maybe_log>
 804df8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804df91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804df95:	8b 54 24 04          	mov    0x4(%esp),%edx
 804df99:	8b 3c 24             	mov    (%esp),%edi
 804df9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804dfa0:	39 fa                	cmp    %edi,%edx
 804dfa2:	0f 87 88 08 00 00    	ja     804e830 <do_decode+0x1b60>
 804dfa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dfac:	89 3c 24             	mov    %edi,(%esp)
 804dfaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dfb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dfb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dfbb:	b9 7c a9 00 00       	mov    $0xa97c,%ecx
 804dfc0:	e8 3b 15 00 00       	call   804f500 <__afl_maybe_log>
 804dfc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dfc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dfcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804dfd1:	8b 3c 24             	mov    (%esp),%edi
 804dfd4:	8d 64 24 10          	lea    0x10(%esp),%esp
                                error(1, (*__errno_location()), gettext("write error"));
                        }
                        if (!ok)
 804dfd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804dfdc:	89 3c 24             	mov    %edi,(%esp)
 804dfdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804dfe3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804dfe7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804dfeb:	b9 e5 04 00 00       	mov    $0x4e5,%ecx
 804dff0:	e8 0b 15 00 00       	call   804f500 <__afl_maybe_log>
 804dff5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804dff9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804dffd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e001:	8b 3c 24             	mov    (%esp),%edi
 804e004:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e008:	84 db                	test   %bl,%bl
 804e00a:	0f 84 f0 07 00 00    	je     804e800 <do_decode+0x1b30>
 804e010:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e014:	89 3c 24             	mov    %edi,(%esp)
 804e017:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e01b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e01f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e023:	b9 f3 d9 00 00       	mov    $0xd9f3,%ecx
 804e028:	e8 d3 14 00 00       	call   804f500 <__afl_maybe_log>
 804e02d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e031:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e035:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e039:	8b 3c 24             	mov    (%esp),%edi
 804e03c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e044:	89 3c 24             	mov    %edi,(%esp)
 804e047:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e04b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e04f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e053:	b9 83 bd 00 00       	mov    $0xbd83,%ecx
 804e058:	e8 a3 14 00 00       	call   804f500 <__afl_maybe_log>
 804e05d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e065:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e069:	8b 3c 24             	mov    (%esp),%edi
 804e06c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e070:	8b 5c 24 10          	mov    0x10(%esp),%ebx
                            error(1, 0, gettext("invalid input"));
                    }
                    k++;
 804e074:	83 c6 01             	add    $0x1,%esi
 804e077:	83 f5 01             	xor    $0x1,%ebp
 804e07a:	8b 03                	mov    (%ebx),%eax
# ifdef __USE_MISC
/* Faster versions when locking is not required.  */
__STDIO_INLINE int
__NTH (feof_unlocked (FILE *__stream))
{
  return _IO_feof_unlocked (__stream);
 804e07c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e080:	89 3c 24             	mov    %edi,(%esp)
 804e083:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e087:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e08b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e08f:	b9 4f 5f 00 00       	mov    $0x5f4f,%ecx
 804e094:	e8 67 14 00 00       	call   804f500 <__afl_maybe_log>
 804e099:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e09d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e0a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e0a5:	8b 3c 24             	mov    (%esp),%edi
 804e0a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e0ac:	83 e0 10             	and    $0x10,%eax
        {
            k = 0;
            while (1)
                {
                    {
                        int temp_4 = !(k < 1 + !!feof_unlocked(in));
 804e0af:	83 f8 01             	cmp    $0x1,%eax
 804e0b2:	19 d2                	sbb    %edx,%edx
 804e0b4:	83 c2 02             	add    $0x2,%edx
// ABS Label 271
if(temp_4 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 271);
}
if (temp_4)
 804e0b7:	39 d6                	cmp    %edx,%esi
 804e0b9:	0f 83 e2 09 00 00    	jae    804eaa1 <do_decode+0x1dd1>
 804e0bf:	90                   	nop
 804e0c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e0c4:	89 3c 24             	mov    %edi,(%esp)
 804e0c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e0cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e0cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e0d3:	b9 25 a1 00 00       	mov    $0xa125,%ecx
 804e0d8:	e8 23 14 00 00       	call   804f500 <__afl_maybe_log>
 804e0dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e0e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e0e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e0e9:	8b 3c 24             	mov    (%esp),%edi
 804e0ec:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 273);
}

// COR Label 274
if((k == 1 || ctx.i == 0) != (k == 1 && ctx.i == 0))  {
 804e0f0:	83 fe 01             	cmp    $0x1,%esi
 804e0f3:	0f 84 37 08 00 00    	je     804e930 <do_decode+0x1c60>
 804e0f9:	8d 76 00             	lea    0x0(%esi),%esi
 804e0fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e100:	89 3c 24             	mov    %edi,(%esp)
 804e103:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e107:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e10b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e10f:	b9 a9 57 00 00       	mov    $0x57a9,%ecx
 804e114:	e8 e7 13 00 00       	call   804f500 <__afl_maybe_log>
 804e119:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e11d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e121:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e125:	8b 3c 24             	mov    (%esp),%edi
 804e128:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e12c:	8b 7c 24 28          	mov    0x28(%esp),%edi
 804e130:	85 ff                	test   %edi,%edi
 804e132:	0f 84 a8 06 00 00    	je     804e7e0 <do_decode+0x1b10>
 804e138:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e13c:	89 3c 24             	mov    %edi,(%esp)
 804e13f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e143:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e147:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e14b:	b9 90 d9 00 00       	mov    $0xd990,%ecx
 804e150:	e8 ab 13 00 00       	call   804f500 <__afl_maybe_log>
 804e155:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e159:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e15d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e161:	8b 3c 24             	mov    (%esp),%edi
 804e164:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e168:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e16c:	89 3c 24             	mov    %edi,(%esp)
 804e16f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e173:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e177:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e17b:	b9 fa c9 00 00       	mov    $0xc9fa,%ecx
 804e180:	e8 7b 13 00 00       	call   804f500 <__afl_maybe_log>
 804e185:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e189:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e18d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e191:	8b 3c 24             	mov    (%esp),%edi
 804e194:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e198:	89 f0                	mov    %esi,%eax
asm volatile (""::: "memory");
	report_label_coverage("COR", 274);
}

// ROR Label 275
if((k != 1) != (k == 1))  {
 804e19a:	89 e9                	mov    %ebp,%ecx
 804e19c:	83 f0 01             	xor    $0x1,%eax
 804e19f:	83 e0 01             	and    $0x1,%eax
 804e1a2:	38 c8                	cmp    %cl,%al
 804e1a4:	74 77                	je     804e21d <do_decode+0x154d>
 804e1a6:	66 90                	xchg   %ax,%ax
 804e1a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e1ac:	89 3c 24             	mov    %edi,(%esp)
 804e1af:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e1b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e1b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e1bb:	b9 76 40 00 00       	mov    $0x4076,%ecx
 804e1c0:	e8 3b 13 00 00       	call   804f500 <__afl_maybe_log>
 804e1c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e1c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e1cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e1d1:	8b 3c 24             	mov    (%esp),%edi
 804e1d4:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 275);
 804e1d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e1dc:	89 3c 24             	mov    %edi,(%esp)
 804e1df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e1e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e1e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e1eb:	b9 b9 d4 00 00       	mov    $0xd4b9,%ecx
 804e1f0:	e8 0b 13 00 00       	call   804f500 <__afl_maybe_log>
 804e1f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e1f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e1fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e201:	8b 3c 24             	mov    (%esp),%edi
 804e204:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e208:	83 ec 08             	sub    $0x8,%esp
 804e20b:	68 13 01 00 00       	push   $0x113
 804e210:	68 48 30 06 08       	push   $0x8063048
 804e215:	e8 96 c7 ff ff       	call   804a9b0 <report_label_coverage>
 804e21a:	83 c4 10             	add    $0x10,%esp
 804e21d:	8d 76 00             	lea    0x0(%esi),%esi
}
// ROR Label 276
if((ctx.i != 0) != (ctx.i == 0))  {
 804e220:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e224:	89 3c 24             	mov    %edi,(%esp)
 804e227:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e22b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e22f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e233:	b9 8d d3 00 00       	mov    $0xd38d,%ecx
 804e238:	e8 c3 12 00 00       	call   804f500 <__afl_maybe_log>
 804e23d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e241:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e245:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e249:	8b 3c 24             	mov    (%esp),%edi
 804e24c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e250:	8b 7c 24 28          	mov    0x28(%esp),%edi
 804e254:	85 ff                	test   %edi,%edi
 804e256:	0f 95 c3             	setne  %bl
 804e259:	0f 94 c1             	sete   %cl
 804e25c:	38 cb                	cmp    %cl,%bl
 804e25e:	74 79                	je     804e2d9 <do_decode+0x1609>
 804e260:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e264:	89 3c 24             	mov    %edi,(%esp)
 804e267:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e26b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e26f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e273:	b9 fc e1 00 00       	mov    $0xe1fc,%ecx
 804e278:	e8 83 12 00 00       	call   804f500 <__afl_maybe_log>
 804e27d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e281:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e285:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e289:	8b 3c 24             	mov    (%esp),%edi
 804e28c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 276);
 804e290:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e294:	89 3c 24             	mov    %edi,(%esp)
 804e297:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e29b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e29f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e2a3:	b9 9f 53 00 00       	mov    $0x539f,%ecx
 804e2a8:	e8 53 12 00 00       	call   804f500 <__afl_maybe_log>
 804e2ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e2b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e2b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e2b9:	8b 3c 24             	mov    (%esp),%edi
 804e2bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e2c0:	83 ec 08             	sub    $0x8,%esp
 804e2c3:	68 14 01 00 00       	push   $0x114
 804e2c8:	68 48 30 06 08       	push   $0x8063048
 804e2cd:	e8 de c6 ff ff       	call   804a9b0 <report_label_coverage>
 804e2d2:	8b 7c 24 38          	mov    0x38(%esp),%edi
 804e2d6:	83 c4 10             	add    $0x10,%esp
 804e2d9:	8d 76 00             	lea    0x0(%esi),%esi
}

// MCC Label 277
if(k == 1 && ctx.i == 0 ) {
 804e2dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e2e0:	89 3c 24             	mov    %edi,(%esp)
 804e2e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e2e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e2eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e2ef:	b9 90 ea 00 00       	mov    $0xea90,%ecx
 804e2f4:	e8 07 12 00 00       	call   804f500 <__afl_maybe_log>
 804e2f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e2fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e301:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e305:	8b 3c 24             	mov    (%esp),%edi
 804e308:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e30c:	83 fe 01             	cmp    $0x1,%esi
 804e30f:	0f 84 4b 05 00 00    	je     804e860 <do_decode+0x1b90>
 804e315:	8d 76 00             	lea    0x0(%esi),%esi
 804e318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e31c:	89 3c 24             	mov    %edi,(%esp)
 804e31f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e32b:	b9 34 03 00 00       	mov    $0x334,%ecx
 804e330:	e8 cb 11 00 00       	call   804f500 <__afl_maybe_log>
 804e335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e33d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e341:	8b 3c 24             	mov    (%esp),%edi
 804e344:	8d 64 24 10          	lea    0x10(%esp),%esp
if(k == 1 && !(ctx.i == 0) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 278);
}
// MCC Label 279
if(!(k == 1) && ctx.i == 0 ) {
 804e348:	85 ff                	test   %edi,%edi
 804e34a:	0f 84 60 06 00 00    	je     804e9b0 <do_decode+0x1ce0>
 804e350:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e354:	89 3c 24             	mov    %edi,(%esp)
 804e357:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e35b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e35f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e363:	b9 ee 70 00 00       	mov    $0x70ee,%ecx
 804e368:	e8 93 11 00 00       	call   804f500 <__afl_maybe_log>
 804e36d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e371:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e375:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e379:	8b 3c 24             	mov    (%esp),%edi
 804e37c:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 279);
}
// MCC Label 280
if(!(k == 1) && !(ctx.i == 0) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 280);
 804e380:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e384:	89 3c 24             	mov    %edi,(%esp)
 804e387:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e38b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e38f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e393:	b9 0a db 00 00       	mov    $0xdb0a,%ecx
 804e398:	e8 63 11 00 00       	call   804f500 <__afl_maybe_log>
 804e39d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e3a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e3a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e3a9:	8b 3c 24             	mov    (%esp),%edi
 804e3ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e3b0:	83 ec 08             	sub    $0x8,%esp
 804e3b3:	68 18 01 00 00       	push   $0x118
 804e3b8:	68 64 30 06 08       	push   $0x8063064
 804e3bd:	e8 ee c5 ff ff       	call   804a9b0 <report_label_coverage>
 804e3c2:	83 c4 10             	add    $0x10,%esp
 804e3c5:	8d 76 00             	lea    0x0(%esi),%esi
}
if (k == 1 && ctx.i == 0)
                            break;
                        n = (1024 * 3);
 804e3c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e3cc:	89 3c 24             	mov    %edi,(%esp)
 804e3cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e3d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e3d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e3db:	b9 1c 19 00 00       	mov    $0x191c,%ecx
 804e3e0:	e8 1b 11 00 00       	call   804f500 <__afl_maybe_log>
 804e3e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e3e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e3ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e3f1:	8b 3c 24             	mov    (%esp),%edi
 804e3f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e3f8:	8b 7c 24 14          	mov    0x14(%esp),%edi
 804e3fc:	c7 44 24 24 00 0c 00 	movl   $0xc00,0x24(%esp)
 804e403:	00 
                        ok = base64_decode_ctx(&ctx + (lava_get(253)) * (1818326372 == (lava_get(253)) || 1685414252 == (lava_get(253))), inbuf + (lava_get(255)) * (1818326370 == (lava_get(255)) || 1651859820 == (lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
 804e404:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e408:	89 3c 24             	mov    %edi,(%esp)
 804e40b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e40f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e413:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e417:	b9 14 c1 00 00       	mov    $0xc114,%ecx
 804e41c:	e8 df 10 00 00       	call   804f500 <__afl_maybe_log>
 804e421:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e425:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e429:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e42d:	8b 3c 24             	mov    (%esp),%edi
 804e430:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e434:	83 ec 0c             	sub    $0xc,%esp
 804e437:	68 ff 00 00 00       	push   $0xff
 804e43c:	e8 1f e1 ff ff       	call   804c560 <lava_get>
 804e441:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
 804e448:	89 c3                	mov    %eax,%ebx
 804e44a:	e8 11 e1 ff ff       	call   804c560 <lava_get>
 804e44f:	83 c4 10             	add    $0x10,%esp
 804e452:	3d 62 75 61 6c       	cmp    $0x6c617562,%eax
 804e457:	b9 01 00 00 00       	mov    $0x1,%ecx
 804e45c:	74 4c                	je     804e4aa <do_decode+0x17da>
 804e45e:	66 90                	xchg   %ax,%ax
 804e460:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e464:	89 3c 24             	mov    %edi,(%esp)
 804e467:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e46b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e46f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e473:	b9 83 37 00 00       	mov    $0x3783,%ecx
 804e478:	e8 83 10 00 00       	call   804f500 <__afl_maybe_log>
 804e47d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e481:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e485:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e489:	8b 3c 24             	mov    (%esp),%edi
 804e48c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e490:	83 ec 0c             	sub    $0xc,%esp
 804e493:	68 ff 00 00 00       	push   $0xff
 804e498:	e8 c3 e0 ff ff       	call   804c560 <lava_get>
 804e49d:	31 c9                	xor    %ecx,%ecx
 804e49f:	83 c4 10             	add    $0x10,%esp
 804e4a2:	3d 6c 61 75 62       	cmp    $0x6275616c,%eax
 804e4a7:	0f 94 c1             	sete   %cl
 804e4aa:	66 90                	xchg   %ax,%ax
 804e4ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e4b0:	89 3c 24             	mov    %edi,(%esp)
 804e4b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e4b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e4bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e4bf:	b9 52 fc 00 00       	mov    $0xfc52,%ecx
 804e4c4:	e8 37 10 00 00       	call   804f500 <__afl_maybe_log>
 804e4c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e4cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e4d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e4d5:	8b 3c 24             	mov    (%esp),%edi
 804e4d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e4dc:	0f af d9             	imul   %ecx,%ebx
 804e4df:	8d 84 24 30 0c 00 00 	lea    0xc30(%esp),%eax
 804e4e6:	83 ec 0c             	sub    $0xc,%esp
 804e4e9:	68 fd 00 00 00       	push   $0xfd
 804e4ee:	01 c3                	add    %eax,%ebx
 804e4f0:	e8 6b e0 ff ff       	call   804c560 <lava_get>
 804e4f5:	c7 04 24 fd 00 00 00 	movl   $0xfd,(%esp)
 804e4fc:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 804e500:	e8 5b e0 ff ff       	call   804c560 <lava_get>
 804e505:	83 c4 10             	add    $0x10,%esp
 804e508:	3d 64 75 61 6c       	cmp    $0x6c617564,%eax
 804e50d:	0f 85 5d f8 ff ff    	jne    804dd70 <do_decode+0x10a0>
 804e513:	90                   	nop
 804e514:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e518:	89 3c 24             	mov    %edi,(%esp)
 804e51b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e51f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e523:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e527:	b9 ae dd 00 00       	mov    $0xddae,%ecx
 804e52c:	e8 cf 0f 00 00       	call   804f500 <__afl_maybe_log>
 804e531:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e535:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e539:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e53d:	8b 3c 24             	mov    (%esp),%edi
 804e540:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e544:	83 ec 0c             	sub    $0xc,%esp
 804e547:	8d 4c 24 30          	lea    0x30(%esp),%ecx
 804e54b:	51                   	push   %ecx
 804e54c:	8d 44 24 40          	lea    0x40(%esp),%eax
 804e550:	50                   	push   %eax
 804e551:	57                   	push   %edi
 804e552:	53                   	push   %ebx
 804e553:	8b 7c 24 28          	mov    0x28(%esp),%edi
 804e557:	8d 5c fc 44          	lea    0x44(%esp,%edi,8),%ebx
 804e55b:	53                   	push   %ebx
 804e55c:	e8 ef 26 00 00       	call   8050c50 <base64_decode_ctx>
                        {
                            size_t temp_5 = fwrite_unlocked(outbuf, 1, n, out);
 804e561:	8b 54 24 44          	mov    0x44(%esp),%edx
	report_label_coverage("MCC", 280);
}
if (k == 1 && ctx.i == 0)
                            break;
                        n = (1024 * 3);
                        ok = base64_decode_ctx(&ctx + (lava_get(253)) * (1818326372 == (lava_get(253)) || 1685414252 == (lava_get(253))), inbuf + (lava_get(255)) * (1818326370 == (lava_get(255)) || 1651859820 == (lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
 804e565:	89 c3                	mov    %eax,%ebx
                        {
                            size_t temp_5 = fwrite_unlocked(outbuf, 1, n, out);
 804e567:	83 c4 20             	add    $0x20,%esp
 804e56a:	e9 45 f8 ff ff       	jmp    804ddb4 <do_decode+0x10e4>
 804e56f:	90                   	nop
if(temp_3 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 269);
}
if (temp_3)
                        error(1, (*__errno_location()), gettext("read error"));
 804e570:	83 ec 04             	sub    $0x4,%esp
 804e573:	6a 05                	push   $0x5
 804e575:	68 68 30 06 08       	push   $0x8063068
 804e57a:	6a 00                	push   $0x0
 804e57c:	e8 5f ac ff ff       	call   80491e0 <dcgettext@plt>
 804e581:	89 c3                	mov    %eax,%ebx
 804e583:	e8 48 ae ff ff       	call   80493d0 <__errno_location@plt>
 804e588:	83 c4 0c             	add    $0xc,%esp
 804e58b:	53                   	push   %ebx
 804e58c:	ff 30                	pushl  (%eax)
 804e58e:	6a 01                	push   $0x1
 804e590:	e8 fb ac ff ff       	call   8049290 <error@plt>
 804e595:	8b 44 24 20          	mov    0x20(%esp),%eax
 804e599:	83 c4 10             	add    $0x10,%esp
 804e59c:	8b 00                	mov    (%eax),%eax
 804e59e:	e9 e5 f6 ff ff       	jmp    804dc88 <do_decode+0xfb8>
 804e5a3:	90                   	nop
 804e5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	report_label_coverage("ROR", 242);
}
// ROR Label 243
if((i <= n) != (i < n))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 243);
 804e5a8:	83 ec 08             	sub    $0x8,%esp
 804e5ab:	68 f3 00 00 00       	push   $0xf3
 804e5b0:	68 48 30 06 08       	push   $0x8063048
 804e5b5:	e8 f6 c3 ff ff       	call   804a9b0 <report_label_coverage>
}
// ROR Label 244
if((i > n) != (i < n))  {
 804e5ba:	83 c4 10             	add    $0x10,%esp
 804e5bd:	8b 74 24 24          	mov    0x24(%esp),%esi
 804e5c1:	85 f6                	test   %esi,%esi
 804e5c3:	0f 85 3f e9 ff ff    	jne    804cf08 <do_decode+0x238>
 804e5c9:	8d 76 00             	lea    0x0(%esi),%esi
 804e5cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e5d0:	89 3c 24             	mov    %edi,(%esp)
 804e5d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e5d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e5db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e5df:	b9 db 2b 00 00       	mov    $0x2bdb,%ecx
 804e5e4:	e8 17 0f 00 00       	call   804f500 <__afl_maybe_log>
 804e5e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e5ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e5f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e5f5:	8b 3c 24             	mov    (%esp),%edi
 804e5f8:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("ROR", 244);
}
// ROR Label 245
if((i >= n) != (i < n))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 245);
 804e5fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e600:	89 3c 24             	mov    %edi,(%esp)
 804e603:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e607:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e60b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e60f:	b9 79 03 00 00       	mov    $0x379,%ecx
 804e614:	e8 e7 0e 00 00       	call   804f500 <__afl_maybe_log>
 804e619:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e61d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e621:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e625:	8b 3c 24             	mov    (%esp),%edi
 804e628:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e62c:	83 ec 08             	sub    $0x8,%esp
 804e62f:	68 f5 00 00 00       	push   $0xf5
 804e634:	68 48 30 06 08       	push   $0x8063048
 804e639:	e8 72 c3 ff ff       	call   804a9b0 <report_label_coverage>
 804e63e:	8b 54 24 34          	mov    0x34(%esp),%edx
 804e642:	83 c4 10             	add    $0x10,%esp
}

// MCC Label 246
if(n > 0 && i < n ) {
 804e645:	85 d2                	test   %edx,%edx
 804e647:	0f 84 7f e9 ff ff    	je     804cfcc <do_decode+0x2fc>
 804e64d:	8d 76 00             	lea    0x0(%esi),%esi
 804e650:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e654:	89 3c 24             	mov    %edi,(%esp)
 804e657:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e65b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e65f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e663:	b9 4a 2b 00 00       	mov    $0x2b4a,%ecx
 804e668:	e8 93 0e 00 00       	call   804f500 <__afl_maybe_log>
 804e66d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e671:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e675:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e679:	8b 3c 24             	mov    (%esp),%edi
 804e67c:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("MCC", 246);
 804e680:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e684:	89 3c 24             	mov    %edi,(%esp)
 804e687:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e68b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e68f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e693:	b9 b4 3b 00 00       	mov    $0x3bb4,%ecx
 804e698:	e8 63 0e 00 00       	call   804f500 <__afl_maybe_log>
 804e69d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e6a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e6a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e6a9:	8b 3c 24             	mov    (%esp),%edi
 804e6ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e6b0:	83 ec 08             	sub    $0x8,%esp
 804e6b3:	68 f6 00 00 00       	push   $0xf6
 804e6b8:	68 64 30 06 08       	push   $0x8063064
 804e6bd:	e8 ee c2 ff ff       	call   804a9b0 <report_label_coverage>
 804e6c2:	8b 74 24 34          	mov    0x34(%esp),%esi
if(!(n > 0) && i < n ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 248);
}
// MCC Label 249
if(!(n > 0) && !(i < n) ) {
 804e6c6:	83 c4 10             	add    $0x10,%esp
 804e6c9:	85 f6                	test   %esi,%esi
 804e6cb:	0f 85 47 e9 ff ff    	jne    804d018 <do_decode+0x348>
 804e6d1:	8d 76 00             	lea    0x0(%esi),%esi
 804e6d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e6d8:	89 3c 24             	mov    %edi,(%esp)
 804e6db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e6df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e6e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e6e7:	b9 4a dc 00 00       	mov    $0xdc4a,%ecx
 804e6ec:	e8 0f 0e 00 00       	call   804f500 <__afl_maybe_log>
 804e6f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e6f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e6f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e6fd:	8b 3c 24             	mov    (%esp),%edi
 804e700:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e704:	e9 c3 e8 ff ff       	jmp    804cfcc <do_decode+0x2fc>
 804e709:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 804e710:	8b 74 24 24          	mov    0x24(%esp),%esi
if(!(isbase64(inbuf[sum + i])) && !(inbuf[sum + i] == '=') ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 268);
}
if (isbase64(inbuf[sum + i]) || inbuf[sum + i] == '=')
                            i++;
 804e714:	bb 01 00 00 00       	mov    $0x1,%ebx
 804e719:	e9 bf ee ff ff       	jmp    804d5dd <do_decode+0x90d>
 804e71e:	66 90                	xchg   %ax,%ax
	report_label_coverage("ROR", 240);
}
// ROR Label 241
if((n < 0) != (n > 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 241);
 804e720:	83 ec 08             	sub    $0x8,%esp
 804e723:	68 f1 00 00 00       	push   $0xf1
 804e728:	68 48 30 06 08       	push   $0x8063048
 804e72d:	e8 7e c2 ff ff       	call   804a9b0 <report_label_coverage>
}
// ROR Label 242
if((n >= 0) != (n > 0))  {
 804e732:	83 c4 10             	add    $0x10,%esp
 804e735:	8b 7c 24 24          	mov    0x24(%esp),%edi
 804e739:	85 ff                	test   %edi,%edi
 804e73b:	0f 85 c7 e7 ff ff    	jne    804cf08 <do_decode+0x238>
 804e741:	8d 76 00             	lea    0x0(%esi),%esi
 804e744:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e748:	89 3c 24             	mov    %edi,(%esp)
 804e74b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e74f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e753:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e757:	b9 7b 4f 00 00       	mov    $0x4f7b,%ecx
 804e75c:	e8 9f 0d 00 00       	call   804f500 <__afl_maybe_log>
 804e761:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e765:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e769:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e76d:	8b 3c 24             	mov    (%esp),%edi
 804e770:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e774:	e9 0b e7 ff ff       	jmp    804ce84 <do_decode+0x1b4>
 804e779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	report_label_coverage("ROR", 253);
}
// ROR Label 254
if((n < 0) != (n > 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 254);
 804e780:	83 ec 08             	sub    $0x8,%esp
 804e783:	68 fe 00 00 00       	push   $0xfe
 804e788:	68 48 30 06 08       	push   $0x8063048
 804e78d:	e8 1e c2 ff ff       	call   804a9b0 <report_label_coverage>
}
// ROR Label 255
if((n >= 0) != (n > 0))  {
 804e792:	8b 44 24 34          	mov    0x34(%esp),%eax
 804e796:	83 c4 10             	add    $0x10,%esp
 804e799:	85 c0                	test   %eax,%eax
 804e79b:	0f 85 0c f0 ff ff    	jne    804d7ad <do_decode+0xadd>
 804e7a1:	8d 76 00             	lea    0x0(%esi),%esi
 804e7a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e7a8:	89 3c 24             	mov    %edi,(%esp)
 804e7ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e7af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e7b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e7b7:	b9 69 c0 00 00       	mov    $0xc069,%ecx
 804e7bc:	e8 3f 0d 00 00       	call   804f500 <__afl_maybe_log>
 804e7c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e7c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e7c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e7cd:	8b 3c 24             	mov    (%esp),%edi
 804e7d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e7d4:	e9 8b ef ff ff       	jmp    804d764 <do_decode+0xa94>
 804e7d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
}

// COR Label 274
if((k == 1 || ctx.i == 0) != (k == 1 && ctx.i == 0))  {
asm volatile (""::: "memory");
	report_label_coverage("COR", 274);
 804e7e0:	83 ec 08             	sub    $0x8,%esp
 804e7e3:	68 12 01 00 00       	push   $0x112
 804e7e8:	68 60 30 06 08       	push   $0x8063060
 804e7ed:	e8 be c1 ff ff       	call   804a9b0 <report_label_coverage>
 804e7f2:	83 c4 10             	add    $0x10,%esp
 804e7f5:	e9 6e f9 ff ff       	jmp    804e168 <do_decode+0x1498>
 804e7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
}
if (temp_5 < n)
                                error(1, (*__errno_location()), gettext("write error"));
                        }
                        if (!ok)
                            error(1, 0, gettext("invalid input"));
 804e800:	83 ec 04             	sub    $0x4,%esp
 804e803:	6a 05                	push   $0x5
 804e805:	68 73 30 06 08       	push   $0x8063073
 804e80a:	6a 00                	push   $0x0
 804e80c:	e8 cf a9 ff ff       	call   80491e0 <dcgettext@plt>
 804e811:	83 c4 0c             	add    $0xc,%esp
 804e814:	50                   	push   %eax
 804e815:	6a 00                	push   $0x0
 804e817:	6a 01                	push   $0x1
 804e819:	e8 72 aa ff ff       	call   8049290 <error@plt>
 804e81e:	83 c4 10             	add    $0x10,%esp
 804e821:	e9 1a f8 ff ff       	jmp    804e040 <do_decode+0x1370>
 804e826:	8d 76 00             	lea    0x0(%esi),%esi
 804e829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
if((temp_5 >= n) != (temp_5 < n))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 285);
}
if (temp_5 < n)
                                error(1, (*__errno_location()), gettext("write error"));
 804e830:	83 ec 04             	sub    $0x4,%esp
 804e833:	6a 05                	push   $0x5
 804e835:	68 4c 30 06 08       	push   $0x806304c
 804e83a:	6a 00                	push   $0x0
 804e83c:	e8 9f a9 ff ff       	call   80491e0 <dcgettext@plt>
 804e841:	89 c7                	mov    %eax,%edi
 804e843:	e8 88 ab ff ff       	call   80493d0 <__errno_location@plt>
 804e848:	83 c4 0c             	add    $0xc,%esp
 804e84b:	57                   	push   %edi
 804e84c:	ff 30                	pushl  (%eax)
 804e84e:	6a 01                	push   $0x1
 804e850:	e8 3b aa ff ff       	call   8049290 <error@plt>
 804e855:	83 c4 10             	add    $0x10,%esp
 804e858:	e9 7b f7 ff ff       	jmp    804dfd8 <do_decode+0x1308>
 804e85d:	8d 76 00             	lea    0x0(%esi),%esi
asm volatile (""::: "memory");
	report_label_coverage("ROR", 276);
}

// MCC Label 277
if(k == 1 && ctx.i == 0 ) {
 804e860:	85 ff                	test   %edi,%edi
 804e862:	0f 84 a8 01 00 00    	je     804ea10 <do_decode+0x1d40>
 804e868:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e86c:	89 3c 24             	mov    %edi,(%esp)
 804e86f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e873:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e877:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e87b:	b9 5e cc 00 00       	mov    $0xcc5e,%ecx
 804e880:	e8 7b 0c 00 00       	call   804f500 <__afl_maybe_log>
 804e885:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e889:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e88d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e891:	8b 3c 24             	mov    (%esp),%edi
 804e894:	8d 64 24 10          	lea    0x10(%esp),%esp
	report_label_coverage("MCC", 277);
}
// MCC Label 278
if(k == 1 && !(ctx.i == 0) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 278);
 804e898:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e89c:	89 3c 24             	mov    %edi,(%esp)
 804e89f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e8a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e8a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e8ab:	b9 02 06 00 00       	mov    $0x602,%ecx
 804e8b0:	e8 4b 0c 00 00       	call   804f500 <__afl_maybe_log>
 804e8b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e8b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e8bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e8c1:	8b 3c 24             	mov    (%esp),%edi
 804e8c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e8c8:	83 ec 08             	sub    $0x8,%esp
 804e8cb:	68 16 01 00 00       	push   $0x116
 804e8d0:	68 64 30 06 08       	push   $0x8063064
 804e8d5:	e8 d6 c0 ff ff       	call   804a9b0 <report_label_coverage>
// MCC Label 280
if(!(k == 1) && !(ctx.i == 0) ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 280);
}
if (k == 1 && ctx.i == 0)
 804e8da:	83 c4 10             	add    $0x10,%esp
 804e8dd:	8b 5c 24 28          	mov    0x28(%esp),%ebx
 804e8e1:	85 db                	test   %ebx,%ebx
 804e8e3:	0f 84 7b 01 00 00    	je     804ea64 <do_decode+0x1d94>
 804e8e9:	8d 76 00             	lea    0x0(%esi),%esi
 804e8ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e8f0:	89 3c 24             	mov    %edi,(%esp)
 804e8f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e8f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e8fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e8ff:	b9 15 33 00 00       	mov    $0x3315,%ecx
 804e904:	e8 f7 0b 00 00       	call   804f500 <__afl_maybe_log>
 804e909:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e90d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e911:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e915:	8b 3c 24             	mov    (%esp),%edi
 804e918:	8d 64 24 10          	lea    0x10(%esp),%esp
                            break;
                        n = (1024 * 3);
 804e91c:	c7 44 24 24 00 0c 00 	movl   $0xc00,0x24(%esp)
 804e923:	00 
                        ok = base64_decode_ctx(&ctx + (lava_get(253)) * (1818326372 == (lava_get(253)) || 1685414252 == (lava_get(253))), inbuf + (lava_get(255)) * (1818326370 == (lava_get(255)) || 1651859820 == (lava_get(255))), (k == 0 ? sum : 0), outbuf, &n);
 804e924:	31 ff                	xor    %edi,%edi
 804e926:	e9 d9 fa ff ff       	jmp    804e404 <do_decode+0x1734>
 804e92b:	90                   	nop
 804e92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
asm volatile (""::: "memory");
	report_label_coverage("ABS", 273);
}

// COR Label 274
if((k == 1 || ctx.i == 0) != (k == 1 && ctx.i == 0))  {
 804e930:	8b 5c 24 28          	mov    0x28(%esp),%ebx
 804e934:	85 db                	test   %ebx,%ebx
 804e936:	0f 85 a4 fe ff ff    	jne    804e7e0 <do_decode+0x1b10>
 804e93c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e940:	89 3c 24             	mov    %edi,(%esp)
 804e943:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e947:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e94b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e94f:	b9 f7 08 00 00       	mov    $0x8f7,%ecx
 804e954:	e8 a7 0b 00 00       	call   804f500 <__afl_maybe_log>
 804e959:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e95d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e961:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e965:	8b 3c 24             	mov    (%esp),%edi
 804e968:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("COR", 274);
}

// ROR Label 275
if((k != 1) != (k == 1))  {
 804e96c:	89 ea                	mov    %ebp,%edx
 804e96e:	84 d2                	test   %dl,%dl
 804e970:	0f 85 62 f8 ff ff    	jne    804e1d8 <do_decode+0x1508>
 804e976:	66 90                	xchg   %ax,%ax
 804e978:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e97c:	89 3c 24             	mov    %edi,(%esp)
 804e97f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e983:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e987:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e98b:	b9 ef b3 00 00       	mov    $0xb3ef,%ecx
 804e990:	e8 6b 0b 00 00       	call   804f500 <__afl_maybe_log>
 804e995:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e999:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e99d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e9a1:	8b 3c 24             	mov    (%esp),%edi
 804e9a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804e9a8:	e9 e3 f8 ff ff       	jmp    804e290 <do_decode+0x15c0>
 804e9ad:	8d 76 00             	lea    0x0(%esi),%esi
	report_label_coverage("MCC", 278);
}
// MCC Label 279
if(!(k == 1) && ctx.i == 0 ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 279);
 804e9b0:	83 ec 08             	sub    $0x8,%esp
 804e9b3:	68 17 01 00 00       	push   $0x117
 804e9b8:	68 64 30 06 08       	push   $0x8063064
 804e9bd:	e8 ee bf ff ff       	call   804a9b0 <report_label_coverage>
}
// MCC Label 280
if(!(k == 1) && !(ctx.i == 0) ) {
 804e9c2:	83 c4 10             	add    $0x10,%esp
 804e9c5:	8b 44 24 28          	mov    0x28(%esp),%eax
 804e9c9:	85 c0                	test   %eax,%eax
 804e9cb:	0f 84 f4 f9 ff ff    	je     804e3c5 <do_decode+0x16f5>
 804e9d1:	8d 76 00             	lea    0x0(%esi),%esi
 804e9d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804e9d8:	89 3c 24             	mov    %edi,(%esp)
 804e9db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804e9df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804e9e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804e9e7:	b9 69 b7 00 00       	mov    $0xb769,%ecx
 804e9ec:	e8 0f 0b 00 00       	call   804f500 <__afl_maybe_log>
 804e9f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804e9f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804e9f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804e9fd:	8b 3c 24             	mov    (%esp),%edi
 804ea00:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ea04:	e9 77 f9 ff ff       	jmp    804e380 <do_decode+0x16b0>
 804ea09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
}

// MCC Label 277
if(k == 1 && ctx.i == 0 ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 277);
 804ea10:	83 ec 08             	sub    $0x8,%esp
 804ea13:	68 15 01 00 00       	push   $0x115
 804ea18:	68 64 30 06 08       	push   $0x8063064
 804ea1d:	e8 8e bf ff ff       	call   804a9b0 <report_label_coverage>
}
// MCC Label 278
if(k == 1 && !(ctx.i == 0) ) {
 804ea22:	83 c4 10             	add    $0x10,%esp
 804ea25:	8b 54 24 28          	mov    0x28(%esp),%edx
 804ea29:	85 d2                	test   %edx,%edx
 804ea2b:	0f 85 67 fe ff ff    	jne    804e898 <do_decode+0x1bc8>
 804ea31:	8d 76 00             	lea    0x0(%esi),%esi
 804ea34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ea38:	89 3c 24             	mov    %edi,(%esp)
 804ea3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ea43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ea47:	b9 6f 8e 00 00       	mov    $0x8e6f,%ecx
 804ea4c:	e8 af 0a 00 00       	call   804f500 <__afl_maybe_log>
 804ea51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ea55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ea59:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ea5d:	8b 3c 24             	mov    (%esp),%edi
 804ea60:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ea64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ea68:	89 3c 24             	mov    %edi,(%esp)
 804ea6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ea6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ea73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ea77:	b9 fc eb 00 00       	mov    $0xebfc,%ecx
 804ea7c:	e8 7f 0a 00 00       	call   804f500 <__afl_maybe_log>
 804ea81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ea85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ea89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ea8d:	8b 3c 24             	mov    (%esp),%edi
 804ea90:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ea94:	8b 74 24 10          	mov    0x10(%esp),%esi
 804ea98:	8b 06                	mov    (%esi),%eax
 804ea9a:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ea9e:	83 e0 10             	and    $0x10,%eax
 804eaa1:	8d 76 00             	lea    0x0(%esi),%esi
// ABS Label 286
if(temp_1 < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 286);
}
if (temp_1)
 804eaa4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eaa8:	89 3c 24             	mov    %edi,(%esp)
 804eaab:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eaaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eab3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eab7:	b9 6f 00 00 00       	mov    $0x6f,%ecx
 804eabc:	e8 3f 0a 00 00       	call   804f500 <__afl_maybe_log>
 804eac1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eac5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eac9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eacd:	8b 3c 24             	mov    (%esp),%edi
 804ead0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ead4:	85 c0                	test   %eax,%eax
 804ead6:	0f 84 47 e2 ff ff    	je     804cd23 <do_decode+0x53>
 804eadc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eae0:	89 3c 24             	mov    %edi,(%esp)
 804eae3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eae7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eaeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eaef:	b9 95 31 00 00       	mov    $0x3195,%ecx
 804eaf4:	e8 07 0a 00 00       	call   804f500 <__afl_maybe_log>
 804eaf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eafd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eb01:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eb05:	8b 3c 24             	mov    (%esp),%edi
 804eb08:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
    }
} while (1);;
;
}
 804eb0c:	81 c4 3c 1c 00 00    	add    $0x1c3c,%esp
 804eb12:	5b                   	pop    %ebx
 804eb13:	5e                   	pop    %esi
 804eb14:	5f                   	pop    %edi
 804eb15:	5d                   	pop    %ebp
 804eb16:	c3                   	ret    
 804eb17:	90                   	nop
	report_label_coverage("MCC", 266);
}
// MCC Label 267
if(!(isbase64(inbuf[sum + i])) && inbuf[sum + i] == '=' ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 267);
 804eb18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eb1c:	89 3c 24             	mov    %edi,(%esp)
 804eb1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eb23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eb27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eb2b:	b9 08 23 00 00       	mov    $0x2308,%ecx
 804eb30:	e8 cb 09 00 00       	call   804f500 <__afl_maybe_log>
 804eb35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eb39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eb3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eb41:	8b 3c 24             	mov    (%esp),%edi
 804eb44:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eb48:	83 ec 08             	sub    $0x8,%esp
 804eb4b:	68 0b 01 00 00       	push   $0x10b
 804eb50:	68 64 30 06 08       	push   $0x8063064
 804eb55:	e8 56 be ff ff       	call   804a9b0 <report_label_coverage>
 804eb5a:	0f be 9c 2c 40 0c 00 	movsbl 0xc40(%esp,%ebp,1),%ebx
 804eb61:	00 
 804eb62:	88 5c 24 1c          	mov    %bl,0x1c(%esp)
 804eb66:	89 1c 24             	mov    %ebx,(%esp)
 804eb69:	e8 52 20 00 00       	call   8050bc0 <isbase64>
 804eb6e:	83 c4 10             	add    $0x10,%esp
 804eb71:	e9 06 e9 ff ff       	jmp    804d47c <do_decode+0x7ac>
 804eb76:	66 90                	xchg   %ax,%ax
}

// MCC Label 265
if(isbase64(inbuf[sum + i]) && inbuf[sum + i] == '=' ) {
asm volatile (""::: "memory");
	report_label_coverage("MCC", 265);
 804eb78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eb7c:	89 3c 24             	mov    %edi,(%esp)
 804eb7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eb83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eb87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eb8b:	b9 53 10 00 00       	mov    $0x1053,%ecx
 804eb90:	e8 6b 09 00 00       	call   804f500 <__afl_maybe_log>
 804eb95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eb99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eb9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eba1:	8b 3c 24             	mov    (%esp),%edi
 804eba4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eba8:	83 ec 08             	sub    $0x8,%esp
 804ebab:	68 09 01 00 00       	push   $0x109
 804ebb0:	68 64 30 06 08       	push   $0x8063064
 804ebb5:	e8 f6 bd ff ff       	call   804a9b0 <report_label_coverage>
 804ebba:	0f be 94 2c 40 0c 00 	movsbl 0xc40(%esp,%ebp,1),%edx
 804ebc1:	00 
 804ebc2:	88 54 24 1c          	mov    %dl,0x1c(%esp)
 804ebc6:	89 14 24             	mov    %edx,(%esp)
 804ebc9:	e8 f2 1f 00 00       	call   8050bc0 <isbase64>
 804ebce:	83 c4 10             	add    $0x10,%esp
 804ebd1:	e9 6a e7 ff ff       	jmp    804d340 <do_decode+0x670>
 804ebd6:	8d 76 00             	lea    0x0(%esi),%esi
 804ebd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0804ebe0 <usage>:
  {NULL, 0, NULL, 0}
};

void
usage (int status)
{
 804ebe0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ebe4:	89 3c 24             	mov    %edi,(%esp)
 804ebe7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ebeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ebef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ebf3:	b9 43 c8 00 00       	mov    $0xc843,%ecx
 804ebf8:	e8 03 09 00 00       	call   804f500 <__afl_maybe_log>
 804ebfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ec01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ec05:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ec09:	8b 3c 24             	mov    (%esp),%edi
 804ec0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ec10:	55                   	push   %ebp
 804ec11:	57                   	push   %edi
 804ec12:	56                   	push   %esi
 804ec13:	53                   	push   %ebx
 804ec14:	83 ec 4c             	sub    $0x4c,%esp
 804ec17:	8b 6c 24 60          	mov    0x60(%esp),%ebp
  
// ABS Label 174
if(status < 0)  {
 804ec1b:	85 ed                	test   %ebp,%ebp
 804ec1d:	0f 88 8c 08 00 00    	js     804f4af <usage+0x8cf>
 804ec23:	90                   	nop
 804ec24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ec28:	89 3c 24             	mov    %edi,(%esp)
 804ec2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ec2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ec33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ec37:	b9 9d 1b 00 00       	mov    $0x1b9d,%ecx
 804ec3c:	e8 bf 08 00 00       	call   804f500 <__afl_maybe_log>
 804ec41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ec45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ec49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ec4d:	8b 3c 24             	mov    (%esp),%edi
 804ec50:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 174);
}

// ROR Label 175
if((status == 0) != (status != 0))  {
 804ec54:	0f 95 c3             	setne  %bl
 804ec57:	0f 94 c0             	sete   %al
 804ec5a:	38 d8                	cmp    %bl,%al
 804ec5c:	0f 84 db 05 00 00    	je     804f23d <usage+0x65d>
 804ec62:	66 90                	xchg   %ax,%ax
 804ec64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ec68:	89 3c 24             	mov    %edi,(%esp)
 804ec6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ec6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ec73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ec77:	b9 ee 90 00 00       	mov    $0x90ee,%ecx
 804ec7c:	e8 7f 08 00 00       	call   804f500 <__afl_maybe_log>
 804ec81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ec85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ec89:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ec8d:	8b 3c 24             	mov    (%esp),%edi
 804ec90:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ROR", 175);
 804ec94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ec98:	89 3c 24             	mov    %edi,(%esp)
 804ec9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ec9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eca3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eca7:	b9 5d bd 00 00       	mov    $0xbd5d,%ecx
 804ecac:	e8 4f 08 00 00       	call   804f500 <__afl_maybe_log>
 804ecb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ecb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ecb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ecbd:	8b 3c 24             	mov    (%esp),%edi
 804ecc0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ecc4:	50                   	push   %eax
 804ecc5:	50                   	push   %eax
 804ecc6:	68 af 00 00 00       	push   $0xaf
 804eccb:	68 48 30 06 08       	push   $0x8063048
 804ecd0:	e8 db bc ff ff       	call   804a9b0 <report_label_coverage>
}
if (status != EXIT_SUCCESS)
 804ecd5:	83 c4 10             	add    $0x10,%esp
 804ecd8:	84 db                	test   %bl,%bl
 804ecda:	0f 85 b1 04 00 00    	jne    804f191 <usage+0x5b1>
 804ece0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ece4:	89 3c 24             	mov    %edi,(%esp)
 804ece7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eceb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ecef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ecf3:	b9 94 16 00 00       	mov    $0x1694,%ecx
 804ecf8:	e8 03 08 00 00       	call   804f500 <__afl_maybe_log>
 804ecfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ed01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ed05:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ed09:	8b 3c 24             	mov    (%esp),%edi
 804ed0c:	8d 64 24 10          	lea    0x10(%esp),%esp
// ABS Label 176
if(program_name < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 176);
}
printf (_("\
 804ed10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ed14:	89 3c 24             	mov    %edi,(%esp)
 804ed17:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ed1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ed1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ed23:	b9 1f 2c 00 00       	mov    $0x2c1f,%ecx
 804ed28:	e8 d3 07 00 00       	call   804f500 <__afl_maybe_log>
 804ed2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ed31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ed35:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ed39:	8b 3c 24             	mov    (%esp),%edi
 804ed3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ed40:	51                   	push   %ecx
 804ed41:	6a 05                	push   $0x5
 804ed43:	68 00 32 06 08       	push   $0x8063200
 804ed48:	6a 00                	push   $0x0
 804ed4a:	8b 1d 08 7c 43 08    	mov    0x8437c08,%ebx
 804ed50:	e8 8b a4 ff ff       	call   80491e0 <dcgettext@plt>
 804ed55:	5e                   	pop    %esi
 804ed56:	5f                   	pop    %edi
 804ed57:	53                   	push   %ebx
 804ed58:	50                   	push   %eax
 804ed59:	e8 c2 a3 ff ff       	call   8049120 <printf@plt>
  )

static inline void
emit_stdin_note (void)
{
  fputs (_("\n\
 804ed5e:	83 c4 0c             	add    $0xc,%esp
 804ed61:	8b 3d d8 72 06 08    	mov    0x80672d8,%edi
 804ed67:	6a 05                	push   $0x5
 804ed69:	68 64 32 06 08       	push   $0x8063264
 804ed6e:	6a 00                	push   $0x0
 804ed70:	e8 6b a4 ff ff       	call   80491e0 <dcgettext@plt>
 804ed75:	5a                   	pop    %edx
 804ed76:	59                   	pop    %ecx
 804ed77:	57                   	push   %edi
 804ed78:	50                   	push   %eax
 804ed79:	e8 a2 a5 ff ff       	call   8049320 <fputs_unlocked@plt>
"), stdout);
}
static inline void
emit_mandatory_arg_note (void)
{
  fputs (_("\n\
 804ed7e:	83 c4 0c             	add    $0xc,%esp
 804ed81:	8b 1d d8 72 06 08    	mov    0x80672d8,%ebx
 804ed87:	6a 05                	push   $0x5
 804ed89:	68 9c 32 06 08       	push   $0x806329c
 804ed8e:	6a 00                	push   $0x0
 804ed90:	e8 4b a4 ff ff       	call   80491e0 <dcgettext@plt>
 804ed95:	5e                   	pop    %esi
 804ed96:	5f                   	pop    %edi
 804ed97:	53                   	push   %ebx
 804ed98:	50                   	push   %eax
 804ed99:	e8 82 a5 ff ff       	call   8049320 <fputs_unlocked@plt>
"), program_name);

      emit_stdin_note ();
      emit_mandatory_arg_note ();

      fputs (_("\
 804ed9e:	83 c4 0c             	add    $0xc,%esp
 804eda1:	8b 35 d8 72 06 08    	mov    0x80672d8,%esi
 804eda7:	6a 05                	push   $0x5
 804eda9:	68 e8 32 06 08       	push   $0x80632e8
 804edae:	6a 00                	push   $0x0
 804edb0:	e8 2b a4 ff ff       	call   80491e0 <dcgettext@plt>
 804edb5:	5a                   	pop    %edx
 804edb6:	59                   	pop    %ecx
 804edb7:	56                   	push   %esi
 804edb8:	50                   	push   %eax
 804edb9:	e8 62 a5 ff ff       	call   8049320 <fputs_unlocked@plt>
  -i, --ignore-garbage  when decoding, ignore non-alphabet characters\n\
  -w, --wrap=COLS       wrap encoded lines after COLS character (default 76).\n\
                          Use 0 to disable line wrapping\n\
\n\
"), stdout);
      fputs (HELP_OPTION_DESCRIPTION, stdout);
 804edbe:	83 c4 0c             	add    $0xc,%esp
 804edc1:	8b 1d d8 72 06 08    	mov    0x80672d8,%ebx
 804edc7:	6a 05                	push   $0x5
 804edc9:	68 dc 33 06 08       	push   $0x80633dc
 804edce:	6a 00                	push   $0x0
 804edd0:	e8 0b a4 ff ff       	call   80491e0 <dcgettext@plt>
 804edd5:	5e                   	pop    %esi
 804edd6:	5f                   	pop    %edi
 804edd7:	53                   	push   %ebx
 804edd8:	50                   	push   %eax
 804edd9:	e8 42 a5 ff ff       	call   8049320 <fputs_unlocked@plt>
      fputs (VERSION_OPTION_DESCRIPTION, stdout);
 804edde:	83 c4 0c             	add    $0xc,%esp
 804ede1:	8b 3d d8 72 06 08    	mov    0x80672d8,%edi
 804ede7:	6a 05                	push   $0x5
 804ede9:	68 0c 34 06 08       	push   $0x806340c
 804edee:	6a 00                	push   $0x0
 804edf0:	e8 eb a3 ff ff       	call   80491e0 <dcgettext@plt>
 804edf5:	5a                   	pop    %edx
 804edf6:	59                   	pop    %ecx
 804edf7:	57                   	push   %edi
 804edf8:	50                   	push   %eax
 804edf9:	e8 22 a5 ff ff       	call   8049320 <fputs_unlocked@plt>
      fputs (_("\
 804edfe:	83 c4 0c             	add    $0xc,%esp
 804ee01:	8b 1d d8 72 06 08    	mov    0x80672d8,%ebx
 804ee07:	6a 05                	push   $0x5
 804ee09:	68 44 34 06 08       	push   $0x8063444
 804ee0e:	6a 00                	push   $0x0
 804ee10:	e8 cb a3 ff ff       	call   80491e0 <dcgettext@plt>
 804ee15:	5e                   	pop    %esi
 804ee16:	5f                   	pop    %edi
 804ee17:	53                   	push   %ebx
 804ee18:	50                   	push   %eax
}

static inline void
emit_ancillary_info (char const *program)
{
  struct infomap { char const *program; char const *node; } const infomap[] = {
 804ee19:	bf 81 30 06 08       	mov    $0x8063081,%edi
 804ee1e:	e8 fd a4 ff ff       	call   8049320 <fputs_unlocked@plt>
 804ee23:	c7 44 24 18 81 30 06 	movl   $0x8063081,0x18(%esp)
 804ee2a:	08 
 804ee2b:	c7 44 24 1c 8a 30 06 	movl   $0x806308a,0x1c(%esp)
 804ee32:	08 
  };

  char const *node = program;
  struct infomap const *map_prog = infomap;

  while (map_prog->program && ! STREQ (program, map_prog->program))
 804ee33:	b8 07 00 00 00       	mov    $0x7,%eax
}

static inline void
emit_ancillary_info (char const *program)
{
  struct infomap { char const *program; char const *node; } const infomap[] = {
 804ee38:	c7 44 24 20 02 31 06 	movl   $0x8063102,0x20(%esp)
 804ee3f:	08 
 804ee40:	c7 44 24 24 9a 30 06 	movl   $0x806309a,0x24(%esp)
 804ee47:	08 
 804ee48:	c7 44 24 28 b0 30 06 	movl   $0x80630b0,0x28(%esp)
 804ee4f:	08 
 804ee50:	c7 44 24 2c ba 30 06 	movl   $0x80630ba,0x2c(%esp)
 804ee57:	08 
 804ee58:	c7 44 24 30 c9 30 06 	movl   $0x80630c9,0x30(%esp)
 804ee5f:	08 
 804ee60:	c7 44 24 34 ba 30 06 	movl   $0x80630ba,0x34(%esp)
 804ee67:	08 
 804ee68:	c7 44 24 38 d3 30 06 	movl   $0x80630d3,0x38(%esp)
 804ee6f:	08 
 804ee70:	c7 44 24 3c ba 30 06 	movl   $0x80630ba,0x3c(%esp)
 804ee77:	08 
 804ee78:	c7 44 24 40 dd 30 06 	movl   $0x80630dd,0x40(%esp)
 804ee7f:	08 
 804ee80:	c7 44 24 44 ba 30 06 	movl   $0x80630ba,0x44(%esp)
 804ee87:	08 
 804ee88:	c7 44 24 48 00 00 00 	movl   $0x0,0x48(%esp)
 804ee8f:	00 
 804ee90:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%esp)
 804ee97:	00 
 804ee98:	83 c4 10             	add    $0x10,%esp
 804ee9b:	8d 54 24 08          	lea    0x8(%esp),%edx
 804ee9f:	e9 44 00 00 00       	jmp    804eee8 <usage+0x308>
 804eea4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

  char const *node = program;
  struct infomap const *map_prog = infomap;

  while (map_prog->program && ! STREQ (program, map_prog->program))
    map_prog++;
 804eea8:	83 c2 08             	add    $0x8,%edx
  };

  char const *node = program;
  struct infomap const *map_prog = infomap;

  while (map_prog->program && ! STREQ (program, map_prog->program))
 804eeab:	8b 3a                	mov    (%edx),%edi
 804eead:	85 ff                	test   %edi,%edi
 804eeaf:	0f 84 9f 00 00 00    	je     804ef54 <usage+0x374>
 804eeb5:	8d 76 00             	lea    0x0(%esi),%esi
 804eeb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eebc:	89 3c 24             	mov    %edi,(%esp)
 804eebf:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eec3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eec7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eecb:	b9 31 30 00 00       	mov    $0x3031,%ecx
 804eed0:	e8 2b 06 00 00       	call   804f500 <__afl_maybe_log>
 804eed5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804eed9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804eedd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804eee1:	8b 3c 24             	mov    (%esp),%edi
 804eee4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804eee8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eeec:	89 3c 24             	mov    %edi,(%esp)
 804eeef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804eef3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804eef7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804eefb:	b9 3b 2e 00 00       	mov    $0x2e3b,%ecx
 804ef00:	e8 fb 05 00 00       	call   804f500 <__afl_maybe_log>
 804ef05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ef09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ef0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ef11:	8b 3c 24             	mov    (%esp),%edi
 804ef14:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ef18:	be 83 30 06 08       	mov    $0x8063083,%esi
 804ef1d:	89 c1                	mov    %eax,%ecx
 804ef1f:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 804ef21:	75 85                	jne    804eea8 <usage+0x2c8>
 804ef23:	90                   	nop
 804ef24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ef28:	89 3c 24             	mov    %edi,(%esp)
 804ef2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ef2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ef33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ef37:	b9 33 8e 00 00       	mov    $0x8e33,%ecx
 804ef3c:	e8 bf 05 00 00       	call   804f500 <__afl_maybe_log>
 804ef41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ef45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ef49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ef4d:	8b 3c 24             	mov    (%esp),%edi
 804ef50:	8d 64 24 10          	lea    0x10(%esp),%esp
    map_prog++;

  if (map_prog->node)
 804ef54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ef58:	89 3c 24             	mov    %edi,(%esp)
 804ef5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ef5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ef63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804ef67:	b9 52 c2 00 00       	mov    $0xc252,%ecx
 804ef6c:	e8 8f 05 00 00       	call   804f500 <__afl_maybe_log>
 804ef71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804ef75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804ef79:	8b 54 24 04          	mov    0x4(%esp),%edx
 804ef7d:	8b 3c 24             	mov    (%esp),%edi
 804ef80:	8d 64 24 10          	lea    0x10(%esp),%esp
 804ef84:	8b 5a 04             	mov    0x4(%edx),%ebx
 804ef87:	85 db                	test   %ebx,%ebx
 804ef89:	0f 84 46 03 00 00    	je     804f2d5 <usage+0x6f5>
 804ef8f:	90                   	nop
 804ef90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804ef94:	89 3c 24             	mov    %edi,(%esp)
 804ef97:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ef9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804ef9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804efa3:	b9 be d4 00 00       	mov    $0xd4be,%ecx
 804efa8:	e8 53 05 00 00       	call   804f500 <__afl_maybe_log>
 804efad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804efb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804efb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804efb9:	8b 3c 24             	mov    (%esp),%edi
 804efbc:	8d 64 24 10          	lea    0x10(%esp),%esp
    node = map_prog->node;

  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
 804efc0:	57                   	push   %edi
 804efc1:	6a 05                	push   $0x5
 804efc3:	68 e7 30 06 08       	push   $0x80630e7
 804efc8:	6a 00                	push   $0x0
 804efca:	e8 11 a2 ff ff       	call   80491e0 <dcgettext@plt>
 804efcf:	83 c4 0c             	add    $0xc,%esp
 804efd2:	68 58 35 06 08       	push   $0x8063558
 804efd7:	68 fe 30 06 08       	push   $0x80630fe
 804efdc:	50                   	push   %eax
 804efdd:	e8 3e a1 ff ff       	call   8049120 <printf@plt>

  /* Don't output this redundant message for English locales.
     Note we still output for 'C' so that it gets included in the man page.  */
  const char *lc_messages = setlocale (LC_MESSAGES, NULL);
 804efe2:	58                   	pop    %eax
 804efe3:	5a                   	pop    %edx
 804efe4:	6a 00                	push   $0x0
 804efe6:	6a 05                	push   $0x5
 804efe8:	e8 63 a4 ff ff       	call   8049450 <setlocale@plt>
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
 804efed:	83 c4 10             	add    $0x10,%esp
 804eff0:	85 c0                	test   %eax,%eax
 804eff2:	74 7c                	je     804f070 <usage+0x490>
 804eff4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804eff8:	89 3c 24             	mov    %edi,(%esp)
 804effb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804efff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f003:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f007:	b9 5d 87 00 00       	mov    $0x875d,%ecx
 804f00c:	e8 ef 04 00 00       	call   804f500 <__afl_maybe_log>
 804f011:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f015:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f019:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f01d:	8b 3c 24             	mov    (%esp),%edi
 804f020:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f024:	56                   	push   %esi
 804f025:	6a 03                	push   $0x3
 804f027:	68 0c 31 06 08       	push   $0x806310c
 804f02c:	50                   	push   %eax
 804f02d:	e8 9e a4 ff ff       	call   80494d0 <strncmp@plt>
 804f032:	83 c4 10             	add    $0x10,%esp
 804f035:	85 c0                	test   %eax,%eax
 804f037:	0f 85 84 03 00 00    	jne    804f3c1 <usage+0x7e1>
 804f03d:	8d 76 00             	lea    0x0(%esi),%esi
 804f040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f044:	89 3c 24             	mov    %edi,(%esp)
 804f047:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f04b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f04f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f053:	b9 36 34 00 00       	mov    $0x3436,%ecx
 804f058:	e8 a3 04 00 00       	call   804f500 <__afl_maybe_log>
 804f05d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f065:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f069:	8b 3c 24             	mov    (%esp),%edi
 804f06c:	8d 64 24 10          	lea    0x10(%esp),%esp
         the URLs at http://translationproject.org/team/.  Otherwise, replace
         the entire URL with your translation team's email address.  */
      printf (_("Report %s translation bugs to "
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
 804f070:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f074:	89 3c 24             	mov    %edi,(%esp)
 804f077:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f07b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f07f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f083:	b9 17 25 00 00       	mov    $0x2517,%ecx
 804f088:	e8 73 04 00 00       	call   804f500 <__afl_maybe_log>
 804f08d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f091:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f095:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f099:	8b 3c 24             	mov    (%esp),%edi
 804f09c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f0a0:	50                   	push   %eax
 804f0a1:	6a 05                	push   $0x5
          PACKAGE_URL, program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
 804f0a3:	be fd 3b 06 08       	mov    $0x8063bfd,%esi
         the URLs at http://translationproject.org/team/.  Otherwise, replace
         the entire URL with your translation team's email address.  */
      printf (_("Report %s translation bugs to "
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
 804f0a8:	68 c8 35 06 08       	push   $0x80635c8
 804f0ad:	6a 00                	push   $0x0
 804f0af:	e8 2c a1 ff ff       	call   80491e0 <dcgettext@plt>
 804f0b4:	83 c4 0c             	add    $0xc,%esp
 804f0b7:	68 83 30 06 08       	push   $0x8063083
 804f0bc:	68 58 35 06 08       	push   $0x8063558
 804f0c1:	50                   	push   %eax
 804f0c2:	e8 59 a0 ff ff       	call   8049120 <printf@plt>
          PACKAGE_URL, program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
 804f0c7:	83 c4 10             	add    $0x10,%esp
 804f0ca:	81 fb 83 30 06 08    	cmp    $0x8063083,%ebx
 804f0d0:	0f 84 97 03 00 00    	je     804f46d <usage+0x88d>
 804f0d6:	66 90                	xchg   %ax,%ax
 804f0d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f0dc:	89 3c 24             	mov    %edi,(%esp)
 804f0df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f0e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f0e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f0eb:	b9 6e 45 00 00       	mov    $0x456e,%ecx
 804f0f0:	e8 0b 04 00 00       	call   804f500 <__afl_maybe_log>
 804f0f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f0f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f0fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f101:	8b 3c 24             	mov    (%esp),%edi
 804f104:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f108:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f10c:	89 3c 24             	mov    %edi,(%esp)
 804f10f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f113:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f117:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f11b:	b9 82 1f 00 00       	mov    $0x1f82,%ecx
 804f120:	e8 db 03 00 00       	call   804f500 <__afl_maybe_log>
 804f125:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f129:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f12d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f131:	8b 3c 24             	mov    (%esp),%edi
 804f134:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f138:	50                   	push   %eax
 804f139:	6a 05                	push   $0x5
 804f13b:	68 e8 35 06 08       	push   $0x80635e8
 804f140:	6a 00                	push   $0x0
 804f142:	e8 99 a0 ff ff       	call   80491e0 <dcgettext@plt>
 804f147:	83 c4 0c             	add    $0xc,%esp
 804f14a:	56                   	push   %esi
 804f14b:	53                   	push   %ebx
 804f14c:	50                   	push   %eax
 804f14d:	e8 ce 9f ff ff       	call   8049120 <printf@plt>
 804f152:	83 c4 10             	add    $0x10,%esp
 804f155:	8d 76 00             	lea    0x0(%esi),%esi
// ABS Label 173
if(status < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 173);
}
exit (status);
 804f158:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f15c:	89 3c 24             	mov    %edi,(%esp)
 804f15f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f163:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f167:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f16b:	b9 07 51 00 00       	mov    $0x5107,%ecx
 804f170:	e8 8b 03 00 00       	call   804f500 <__afl_maybe_log>
 804f175:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f179:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f17d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f181:	8b 3c 24             	mov    (%esp),%edi
 804f184:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f188:	83 ec 0c             	sub    $0xc,%esp
 804f18b:	55                   	push   %ebp
 804f18c:	e8 6f a1 ff ff       	call   8049300 <exit@plt>
 804f191:	8d 76 00             	lea    0x0(%esi),%esi
}

static inline void
emit_try_help (void)
{
  fprintf (stderr, _("Try '%s --help' for more information.\n"), program_name);
 804f194:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f198:	89 3c 24             	mov    %edi,(%esp)
 804f19b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f19f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f1a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f1a7:	b9 cb 98 00 00       	mov    $0x98cb,%ecx
 804f1ac:	e8 4f 03 00 00       	call   804f500 <__afl_maybe_log>
 804f1b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f1b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f1b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f1bd:	8b 3c 24             	mov    (%esp),%edi
 804f1c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f1c4:	8b 3d 08 7c 43 08    	mov    0x8437c08,%edi
 804f1ca:	50                   	push   %eax
 804f1cb:	6a 05                	push   $0x5
 804f1cd:	68 d8 31 06 08       	push   $0x80631d8
 804f1d2:	6a 00                	push   $0x0
 804f1d4:	e8 07 a0 ff ff       	call   80491e0 <dcgettext@plt>
 804f1d9:	83 c4 0c             	add    $0xc,%esp
 804f1dc:	57                   	push   %edi
 804f1dd:	50                   	push   %eax
 804f1de:	ff 35 c4 72 06 08    	pushl  0x80672c4
 804f1e4:	e8 97 a1 ff ff       	call   8049380 <fprintf@plt>
      emit_ancillary_info (PROGRAM_NAME);
    }

  
// ABS Label 173
if(status < 0)  {
 804f1e9:	83 c4 10             	add    $0x10,%esp
 804f1ec:	85 ed                	test   %ebp,%ebp
 804f1ee:	0f 89 61 ff ff ff    	jns    804f155 <usage+0x575>
 804f1f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f1f8:	89 3c 24             	mov    %edi,(%esp)
 804f1fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f1ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f203:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f207:	b9 79 63 00 00       	mov    $0x6379,%ecx
 804f20c:	e8 ef 02 00 00       	call   804f500 <__afl_maybe_log>
 804f211:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f215:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f219:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f21d:	8b 3c 24             	mov    (%esp),%edi
 804f220:	8d 64 24 10          	lea    0x10(%esp),%esp
asm volatile (""::: "memory");
	report_label_coverage("ABS", 173);
 804f224:	50                   	push   %eax
 804f225:	50                   	push   %eax
 804f226:	68 ad 00 00 00       	push   $0xad
 804f22b:	68 5c 30 06 08       	push   $0x806305c
 804f230:	e8 7b b7 ff ff       	call   804a9b0 <report_label_coverage>
 804f235:	83 c4 10             	add    $0x10,%esp
 804f238:	e9 18 ff ff ff       	jmp    804f155 <usage+0x575>
 804f23d:	8d 76 00             	lea    0x0(%esi),%esi
// ROR Label 175
if((status == 0) != (status != 0))  {
asm volatile (""::: "memory");
	report_label_coverage("ROR", 175);
}
if (status != EXIT_SUCCESS)
 804f240:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f244:	89 3c 24             	mov    %edi,(%esp)
 804f247:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f24b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f24f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f253:	b9 96 4f 00 00       	mov    $0x4f96,%ecx
 804f258:	e8 a3 02 00 00       	call   804f500 <__afl_maybe_log>
 804f25d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f261:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f265:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f269:	8b 3c 24             	mov    (%esp),%edi
 804f26c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f270:	84 c0                	test   %al,%al
 804f272:	0f 84 98 fa ff ff    	je     804ed10 <usage+0x130>
 804f278:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f27c:	89 3c 24             	mov    %edi,(%esp)
 804f27f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f283:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f287:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f28b:	b9 db 5b 00 00       	mov    $0x5bdb,%ecx
 804f290:	e8 6b 02 00 00       	call   804f500 <__afl_maybe_log>
 804f295:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f299:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f29d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f2a1:	8b 3c 24             	mov    (%esp),%edi
 804f2a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f2a8:	8b 35 08 7c 43 08    	mov    0x8437c08,%esi
 804f2ae:	50                   	push   %eax
 804f2af:	6a 05                	push   $0x5
 804f2b1:	68 d8 31 06 08       	push   $0x80631d8
 804f2b6:	6a 00                	push   $0x0
 804f2b8:	e8 23 9f ff ff       	call   80491e0 <dcgettext@plt>
 804f2bd:	83 c4 0c             	add    $0xc,%esp
 804f2c0:	56                   	push   %esi
 804f2c1:	50                   	push   %eax
 804f2c2:	ff 35 c4 72 06 08    	pushl  0x80672c4
 804f2c8:	e8 b3 a0 ff ff       	call   8049380 <fprintf@plt>
 804f2cd:	83 c4 10             	add    $0x10,%esp
 804f2d0:	e9 80 fe ff ff       	jmp    804f155 <usage+0x575>
 804f2d5:	8d 76 00             	lea    0x0(%esi),%esi
    map_prog++;

  if (map_prog->node)
    node = map_prog->node;

  printf (_("\n%s online help: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
 804f2d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f2dc:	89 3c 24             	mov    %edi,(%esp)
 804f2df:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f2e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f2e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f2eb:	b9 54 4d 00 00       	mov    $0x4d54,%ecx
 804f2f0:	e8 0b 02 00 00       	call   804f500 <__afl_maybe_log>
 804f2f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f2f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f2fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f301:	8b 3c 24             	mov    (%esp),%edi
 804f304:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f308:	51                   	push   %ecx
 804f309:	6a 05                	push   $0x5
 804f30b:	68 e7 30 06 08       	push   $0x80630e7
 804f310:	6a 00                	push   $0x0
 804f312:	e8 c9 9e ff ff       	call   80491e0 <dcgettext@plt>
 804f317:	83 c4 0c             	add    $0xc,%esp
 804f31a:	68 58 35 06 08       	push   $0x8063558
 804f31f:	68 fe 30 06 08       	push   $0x80630fe
 804f324:	50                   	push   %eax
 804f325:	e8 f6 9d ff ff       	call   8049120 <printf@plt>

  /* Don't output this redundant message for English locales.
     Note we still output for 'C' so that it gets included in the man page.  */
  const char *lc_messages = setlocale (LC_MESSAGES, NULL);
 804f32a:	5b                   	pop    %ebx
 804f32b:	5e                   	pop    %esi
 804f32c:	6a 00                	push   $0x0
 804f32e:	6a 05                	push   $0x5
 804f330:	e8 1b a1 ff ff       	call   8049450 <setlocale@plt>
  if (lc_messages && STRNCMP_LIT (lc_messages, "en_"))
 804f335:	83 c4 10             	add    $0x10,%esp
 804f338:	85 c0                	test   %eax,%eax
 804f33a:	0f 84 d8 00 00 00    	je     804f418 <usage+0x838>
 804f340:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f344:	89 3c 24             	mov    %edi,(%esp)
 804f347:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f34b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f34f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f353:	b9 3c 49 00 00       	mov    $0x493c,%ecx
 804f358:	e8 a3 01 00 00       	call   804f500 <__afl_maybe_log>
 804f35d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f361:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f365:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f369:	8b 3c 24             	mov    (%esp),%edi
 804f36c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f370:	52                   	push   %edx
 804f371:	6a 03                	push   $0x3
 804f373:	68 0c 31 06 08       	push   $0x806310c
 804f378:	50                   	push   %eax
 804f379:	e8 52 a1 ff ff       	call   80494d0 <strncmp@plt>
 804f37e:	83 c4 10             	add    $0x10,%esp
 804f381:	85 c0                	test   %eax,%eax
 804f383:	0f 84 8f 00 00 00    	je     804f418 <usage+0x838>
 804f389:	8d 76 00             	lea    0x0(%esi),%esi
 804f38c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f390:	89 3c 24             	mov    %edi,(%esp)
 804f393:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f397:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f39b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f39f:	b9 a9 6f 00 00       	mov    $0x6fa9,%ecx
 804f3a4:	e8 57 01 00 00       	call   804f500 <__afl_maybe_log>
 804f3a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f3ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f3b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f3b5:	8b 3c 24             	mov    (%esp),%edi
 804f3b8:	8d 64 24 10          	lea    0x10(%esp),%esp
    { "sha384sum", "sha2 utilities" },
    { "sha512sum", "sha2 utilities" },
    { NULL, NULL }
  };

  char const *node = program;
 804f3bc:	bb 83 30 06 08       	mov    $0x8063083,%ebx
 804f3c1:	8d 76 00             	lea    0x0(%esi),%esi
    {
      /* TRANSLATORS: Replace LANG_CODE in this URL with your language code
         <http://translationproject.org/team/LANG_CODE.html> to form one of
         the URLs at http://translationproject.org/team/.  Otherwise, replace
         the entire URL with your translation team's email address.  */
      printf (_("Report %s translation bugs to "
 804f3c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f3c8:	89 3c 24             	mov    %edi,(%esp)
 804f3cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f3cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f3d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f3d7:	b9 32 df 00 00       	mov    $0xdf32,%ecx
 804f3dc:	e8 1f 01 00 00       	call   804f500 <__afl_maybe_log>
 804f3e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f3e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f3e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f3ed:	8b 3c 24             	mov    (%esp),%edi
 804f3f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f3f4:	50                   	push   %eax
 804f3f5:	6a 05                	push   $0x5
 804f3f7:	68 80 35 06 08       	push   $0x8063580
 804f3fc:	6a 00                	push   $0x0
 804f3fe:	e8 dd 9d ff ff       	call   80491e0 <dcgettext@plt>
 804f403:	5a                   	pop    %edx
 804f404:	59                   	pop    %ecx
 804f405:	68 83 30 06 08       	push   $0x8063083
 804f40a:	50                   	push   %eax
 804f40b:	e8 10 9d ff ff       	call   8049120 <printf@plt>
 804f410:	83 c4 10             	add    $0x10,%esp
 804f413:	e9 58 fc ff ff       	jmp    804f070 <usage+0x490>
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
 804f418:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f41c:	89 3c 24             	mov    %edi,(%esp)
 804f41f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f423:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f427:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f42b:	b9 12 f4 00 00       	mov    $0xf412,%ecx
 804f430:	e8 cb 00 00 00       	call   804f500 <__afl_maybe_log>
 804f435:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f439:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f43d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f441:	8b 3c 24             	mov    (%esp),%edi
 804f444:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f448:	57                   	push   %edi
 804f449:	6a 05                	push   $0x5
 804f44b:	68 c8 35 06 08       	push   $0x80635c8
 804f450:	6a 00                	push   $0x0
 804f452:	e8 89 9d ff ff       	call   80491e0 <dcgettext@plt>
 804f457:	83 c4 0c             	add    $0xc,%esp
 804f45a:	68 83 30 06 08       	push   $0x8063083
 804f45f:	68 58 35 06 08       	push   $0x8063558
 804f464:	50                   	push   %eax
 804f465:	e8 b6 9c ff ff       	call   8049120 <printf@plt>
 804f46a:	83 c4 10             	add    $0x10,%esp
 804f46d:	8d 76 00             	lea    0x0(%esi),%esi
    { "sha384sum", "sha2 utilities" },
    { "sha512sum", "sha2 utilities" },
    { NULL, NULL }
  };

  char const *node = program;
 804f470:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f474:	89 3c 24             	mov    %edi,(%esp)
 804f477:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f47b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f47f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f483:	b9 4a e0 00 00       	mov    $0xe04a,%ecx
 804f488:	e8 73 00 00 00       	call   804f500 <__afl_maybe_log>
 804f48d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f491:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f495:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f499:	8b 3c 24             	mov    (%esp),%edi
 804f49c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f4a0:	bb 83 30 06 08       	mov    $0x8063083,%ebx
      printf (_("Report %s translation bugs to "
                "<http://translationproject.org/team/>\n"), program);
    }
  printf (_("Full documentation at: <%s%s>\n"),
          PACKAGE_URL, program);
  printf (_("or available locally via: info '(coreutils) %s%s'\n"),
 804f4a5:	be a4 30 06 08       	mov    $0x80630a4,%esi
 804f4aa:	e9 59 fc ff ff       	jmp    804f108 <usage+0x528>
 804f4af:	90                   	nop
{
  
// ABS Label 174
if(status < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 174);
 804f4b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f4b4:	89 3c 24             	mov    %edi,(%esp)
 804f4b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f4bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f4bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f4c3:	b9 1d 89 00 00       	mov    $0x891d,%ecx
 804f4c8:	e8 33 00 00 00       	call   804f500 <__afl_maybe_log>
 804f4cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f4d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f4d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f4d9:	8b 3c 24             	mov    (%esp),%edi
 804f4dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f4e0:	68 ae 00 00 00       	push   $0xae
 804f4e5:	68 5c 30 06 08       	push   $0x806305c
}

// ROR Label 175
if((status == 0) != (status != 0))  {
 804f4ea:	bb 01 00 00 00       	mov    $0x1,%ebx
{
  
// ABS Label 174
if(status < 0)  {
asm volatile (""::: "memory");
	report_label_coverage("ABS", 174);
 804f4ef:	e8 bc b4 ff ff       	call   804a9b0 <report_label_coverage>
 804f4f4:	58                   	pop    %eax
 804f4f5:	5a                   	pop    %edx
 804f4f6:	e9 99 f7 ff ff       	jmp    804ec94 <usage+0xb4>
 804f4fb:	90                   	nop
 804f4fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0804f500 <__afl_maybe_log>:
 804f500:	9f                   	lahf   
 804f501:	0f 90 c0             	seto   %al
 804f504:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 804f50a:	85 d2                	test   %edx,%edx
 804f50c:	74 22                	je     804f530 <__afl_setup>

0804f50e <__afl_store>:
 804f50e:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 804f514:	31 cf                	xor    %ecx,%edi
 804f516:	d1 e9                	shr    %ecx
 804f518:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 804f51e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 804f522:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0804f526 <__afl_return>:
 804f526:	04 7f                	add    $0x7f,%al
 804f528:	9e                   	sahf   
 804f529:	c3                   	ret    
 804f52a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0804f530 <__afl_setup>:
 804f530:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 804f537:	75 ed                	jne    804f526 <__afl_return>
 804f539:	50                   	push   %eax
 804f53a:	51                   	push   %ecx
 804f53b:	68 38 f6 04 08       	push   $0x804f638
 804f540:	e8 6b 9d ff ff       	call   80492b0 <getenv@plt>
 804f545:	83 c4 04             	add    $0x4,%esp
 804f548:	85 c0                	test   %eax,%eax
 804f54a:	0f 84 db 00 00 00    	je     804f62b <__afl_setup_abort>
 804f550:	50                   	push   %eax
 804f551:	e8 2a 9f ff ff       	call   8049480 <atoi@plt>
 804f556:	83 c4 04             	add    $0x4,%esp
 804f559:	6a 00                	push   $0x0
 804f55b:	6a 00                	push   $0x0
 804f55d:	50                   	push   %eax
 804f55e:	e8 8d 9c ff ff       	call   80491f0 <shmat@plt>
 804f563:	83 c4 0c             	add    $0xc,%esp
 804f566:	83 f8 ff             	cmp    $0xffffffff,%eax
 804f569:	0f 84 bc 00 00 00    	je     804f62b <__afl_setup_abort>
 804f56f:	c6 00 01             	movb   $0x1,(%eax)
 804f572:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 804f577:	89 c2                	mov    %eax,%edx
 804f579:	59                   	pop    %ecx
 804f57a:	58                   	pop    %eax

0804f57b <__afl_forkserver>:
 804f57b:	50                   	push   %eax
 804f57c:	51                   	push   %ecx
 804f57d:	52                   	push   %edx
 804f57e:	6a 04                	push   $0x4
 804f580:	68 a0 7d 43 08       	push   $0x8437da0
 804f585:	68 c7 00 00 00       	push   $0xc7
 804f58a:	e8 01 9e ff ff       	call   8049390 <write@plt>
 804f58f:	83 c4 0c             	add    $0xc,%esp
 804f592:	83 f8 04             	cmp    $0x4,%eax
 804f595:	75 6e                	jne    804f605 <__afl_fork_resume>

0804f597 <__afl_fork_wait_loop>:
 804f597:	6a 04                	push   $0x4
 804f599:	68 a0 7d 43 08       	push   $0x8437da0
 804f59e:	68 c6 00 00 00       	push   $0xc6
 804f5a3:	e8 68 9b ff ff       	call   8049110 <read@plt>
 804f5a8:	83 c4 0c             	add    $0xc,%esp
 804f5ab:	83 f8 04             	cmp    $0x4,%eax
 804f5ae:	75 74                	jne    804f624 <__afl_die>
 804f5b0:	e8 6b 9e ff ff       	call   8049420 <fork@plt>
 804f5b5:	83 f8 00             	cmp    $0x0,%eax
 804f5b8:	7c 6a                	jl     804f624 <__afl_die>
 804f5ba:	74 49                	je     804f605 <__afl_fork_resume>
 804f5bc:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 804f5c1:	6a 04                	push   $0x4
 804f5c3:	68 00 7e 43 08       	push   $0x8437e00
 804f5c8:	68 c7 00 00 00       	push   $0xc7
 804f5cd:	e8 be 9d ff ff       	call   8049390 <write@plt>
 804f5d2:	83 c4 0c             	add    $0xc,%esp
 804f5d5:	6a 00                	push   $0x0
 804f5d7:	68 a0 7d 43 08       	push   $0x8437da0
 804f5dc:	ff 35 00 7e 43 08    	pushl  0x8437e00
 804f5e2:	e8 59 9c ff ff       	call   8049240 <waitpid@plt>
 804f5e7:	83 c4 0c             	add    $0xc,%esp
 804f5ea:	83 f8 00             	cmp    $0x0,%eax
 804f5ed:	7e 35                	jle    804f624 <__afl_die>
 804f5ef:	6a 04                	push   $0x4
 804f5f1:	68 a0 7d 43 08       	push   $0x8437da0
 804f5f6:	68 c7 00 00 00       	push   $0xc7
 804f5fb:	e8 90 9d ff ff       	call   8049390 <write@plt>
 804f600:	83 c4 0c             	add    $0xc,%esp
 804f603:	eb 92                	jmp    804f597 <__afl_fork_wait_loop>

0804f605 <__afl_fork_resume>:
 804f605:	68 c6 00 00 00       	push   $0xc6
 804f60a:	e8 e1 9e ff ff       	call   80494f0 <close@plt>
 804f60f:	68 c7 00 00 00       	push   $0xc7
 804f614:	e8 d7 9e ff ff       	call   80494f0 <close@plt>
 804f619:	83 c4 08             	add    $0x8,%esp
 804f61c:	5a                   	pop    %edx
 804f61d:	59                   	pop    %ecx
 804f61e:	58                   	pop    %eax
 804f61f:	e9 ea fe ff ff       	jmp    804f50e <__afl_store>

0804f624 <__afl_die>:
 804f624:	31 c0                	xor    %eax,%eax
 804f626:	e8 15 9b ff ff       	call   8049140 <_exit@plt>

0804f62b <__afl_setup_abort>:
 804f62b:	fe 05 20 7e 43 08    	incb   0x8437e20
 804f631:	59                   	pop    %ecx
 804f632:	58                   	pop    %eax
 804f633:	e9 ee fe ff ff       	jmp    804f526 <__afl_return>

0804f638 <.AFL_SHM_ENV>:
 804f638:	5f                   	pop    %edi
 804f639:	5f                   	pop    %edi
 804f63a:	41                   	inc    %ecx
 804f63b:	46                   	inc    %esi
 804f63c:	4c                   	dec    %esp
 804f63d:	5f                   	pop    %edi
 804f63e:	53                   	push   %ebx
 804f63f:	48                   	dec    %eax
 804f640:	4d                   	dec    %ebp
 804f641:	5f                   	pop    %edi
 804f642:	49                   	dec    %ecx
 804f643:	44                   	inc    %esp
 804f644:	00 66 90             	add    %ah,-0x70(%esi)
 804f647:	90                   	nop
 804f648:	66 90                	xchg   %ax,%ax
 804f64a:	66 90                	xchg   %ax,%ax
 804f64c:	66 90                	xchg   %ax,%ax
 804f64e:	66 90                	xchg   %ax,%ax

0804f650 <decode_4>:
   *OUT to point to the byte after the last one written, and decrement
   *OUTLEN to reflect the number of bytes remaining in *OUT.  */
static bool
decode_4 (char const *restrict in, size_t inlen,
          char *restrict *outp, size_t *outleft)
{
 804f650:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f654:	89 3c 24             	mov    %edi,(%esp)
 804f657:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f65b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f65f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f663:	b9 21 da 00 00       	mov    $0xda21,%ecx
 804f668:	e8 0b 3c 00 00       	call   8053278 <__afl_maybe_log>
 804f66d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f671:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f675:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f679:	8b 3c 24             	mov    (%esp),%edi
 804f67c:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f680:	55                   	push   %ebp
 804f681:	57                   	push   %edi
 804f682:	56                   	push   %esi
 804f683:	53                   	push   %ebx
 804f684:	83 ec 1c             	sub    $0x1c,%esp
  char *out = *outp;
  if (inlen < 2)
 804f687:	83 fa 01             	cmp    $0x1,%edx
   *OUTLEN to reflect the number of bytes remaining in *OUT.  */
static bool
decode_4 (char const *restrict in, size_t inlen,
          char *restrict *outp, size_t *outleft)
{
  char *out = *outp;
 804f68a:	8b 39                	mov    (%ecx),%edi
  if (inlen < 2)
 804f68c:	0f 86 f4 09 00 00    	jbe    8050086 <decode_4+0xa36>
 804f692:	66 90                	xchg   %ax,%ax
 804f694:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f698:	89 3c 24             	mov    %edi,(%esp)
 804f69b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f69f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f6a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f6a7:	b9 91 14 00 00       	mov    $0x1491,%ecx
 804f6ac:	e8 c7 3b 00 00       	call   8053278 <__afl_maybe_log>
 804f6b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f6b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f6b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f6bd:	8b 3c 24             	mov    (%esp),%edi
 804f6c0:	8d 64 24 10          	lea    0x10(%esp),%esp
    return false;

  if (!({if (((in)) && ((in)))  {int lava_776 = 0;
 804f6c4:	85 c0                	test   %eax,%eax
 804f6c6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f6ca:	89 d6                	mov    %edx,%esi
 804f6cc:	89 c3                	mov    %eax,%ebx
 804f6ce:	0f 84 bb 00 00 00    	je     804f78f <decode_4+0x13f>
 804f6d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f6d8:	89 3c 24             	mov    %edi,(%esp)
 804f6db:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f6df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f6e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f6e7:	b9 4e 04 00 00       	mov    $0x44e,%ecx
 804f6ec:	e8 87 3b 00 00       	call   8053278 <__afl_maybe_log>
 804f6f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f6f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f6f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f6fd:	8b 3c 24             	mov    (%esp),%edi
 804f700:	8d 64 24 10          	lea    0x10(%esp),%esp
  lava_776 |= ((unsigned char *) (in))[0] << (0*8);lava_776 |= ((unsigned char *) (in))[1] << (1*8);lava_776 |= ((unsigned char *) (in))[2] << (2*8);lava_776 |= ((unsigned char *) (in))[3] << (3*8);lava_set(776,lava_776);
 804f704:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
 804f708:	0f b6 40 02          	movzbl 0x2(%eax),%eax
 804f70c:	83 ec 08             	sub    $0x8,%esp
 804f70f:	0f b6 2b             	movzbl (%ebx),%ebp
 804f712:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804f716:	c1 e1 08             	shl    $0x8,%ecx
 804f719:	c1 e0 10             	shl    $0x10,%eax
 804f71c:	09 c8                	or     %ecx,%eax
 804f71e:	c1 e2 18             	shl    $0x18,%edx
 804f721:	09 c5                	or     %eax,%ebp
 804f723:	89 e8                	mov    %ebp,%eax
 804f725:	09 d0                	or     %edx,%eax
 804f727:	50                   	push   %eax
 804f728:	68 08 03 00 00       	push   $0x308
 804f72d:	e8 ee cd ff ff       	call   804c520 <lava_set>
  int lava_554 = 0;
  lava_554 |= ((unsigned char *) (in))[0] << (0*8);lava_554 |= ((unsigned char *) (in))[1] << (1*8);lava_554 |= ((unsigned char *) (in))[2] << (2*8);lava_554 |= ((unsigned char *) (in))[3] << (3*8);lava_set(554,lava_554);
 804f732:	0f b6 6b 01          	movzbl 0x1(%ebx),%ebp
 804f736:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 804f73a:	0f b6 0b             	movzbl (%ebx),%ecx
 804f73d:	c1 e5 08             	shl    $0x8,%ebp
 804f740:	c1 e2 10             	shl    $0x10,%edx
 804f743:	09 ea                	or     %ebp,%edx
 804f745:	5d                   	pop    %ebp
 804f746:	58                   	pop    %eax
 804f747:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
 804f74b:	09 d1                	or     %edx,%ecx
 804f74d:	89 ca                	mov    %ecx,%edx
 804f74f:	c1 e0 18             	shl    $0x18,%eax
 804f752:	09 c2                	or     %eax,%edx
 804f754:	52                   	push   %edx
 804f755:	68 2a 02 00 00       	push   $0x22a
 804f75a:	e8 c1 cd ff ff       	call   804c520 <lava_set>
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
 804f75f:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804f763:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804f767:	0f b6 2b             	movzbl (%ebx),%ebp
 804f76a:	c1 e1 08             	shl    $0x8,%ecx
 804f76d:	c1 e0 10             	shl    $0x10,%eax
 804f770:	09 c8                	or     %ecx,%eax
 804f772:	09 c5                	or     %eax,%ebp
 804f774:	58                   	pop    %eax
 804f775:	5a                   	pop    %edx
 804f776:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804f77a:	89 e8                	mov    %ebp,%eax
 804f77c:	c1 e2 18             	shl    $0x18,%edx
 804f77f:	09 d0                	or     %edx,%eax
 804f781:	50                   	push   %eax
 804f782:	68 2d 03 00 00       	push   $0x32d
 804f787:	e8 94 cd ff ff       	call   804c520 <lava_set>
 804f78c:	83 c4 10             	add    $0x10,%esp
 804f78f:	90                   	nop
  }_Bool kbcieiubweuhc1540383426 = isbase64 (in[0]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
 804f790:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f794:	89 3c 24             	mov    %edi,(%esp)
 804f797:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f79b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f79f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f7a3:	b9 21 a7 00 00       	mov    $0xa721,%ecx
 804f7a8:	e8 cb 3a 00 00       	call   8053278 <__afl_maybe_log>
 804f7ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f7b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f7b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f7b9:	8b 3c 24             	mov    (%esp),%edi
 804f7bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 804f7c0:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 804f7c4:	0f b6 0b             	movzbl (%ebx),%ecx
  int lava_554 = 0;
  lava_554 |= ((unsigned char *) (in))[0] << (0*8);lava_554 |= ((unsigned char *) (in))[1] << (1*8);lava_554 |= ((unsigned char *) (in))[2] << (2*8);lava_554 |= ((unsigned char *) (in))[3] << (3*8);lava_set(554,lava_554);
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
  }_Bool kbcieiubweuhc1540383426 = isbase64 (in[0]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
 804f7c7:	83 ec 08             	sub    $0x8,%esp
 804f7ca:	c1 e2 08             	shl    $0x8,%edx
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 804f7cd:	0f b6 a9 c0 36 06 08 	movzbl 0x80636c0(%ecx),%ebp
  int lava_554 = 0;
  lava_554 |= ((unsigned char *) (in))[0] << (0*8);lava_554 |= ((unsigned char *) (in))[1] << (1*8);lava_554 |= ((unsigned char *) (in))[2] << (2*8);lava_554 |= ((unsigned char *) (in))[3] << (3*8);lava_set(554,lava_554);
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
  }_Bool kbcieiubweuhc1540383426 = isbase64 (in[0]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
 804f7d4:	09 ca                	or     %ecx,%edx
 804f7d6:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
 804f7da:	c1 e1 10             	shl    $0x10,%ecx
 804f7dd:	09 d1                	or     %edx,%ecx
 804f7df:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804f7e3:	c1 e2 18             	shl    $0x18,%edx
 804f7e6:	09 ca                	or     %ecx,%edx
 804f7e8:	52                   	push   %edx
 804f7e9:	68 de 00 00 00       	push   $0xde
 804f7ee:	e8 2d cd ff ff       	call   804c520 <lava_set>
{
  char *out = *outp;
  if (inlen < 2)
    return false;

  if (!({if (((in)) && ((in)))  {int lava_776 = 0;
 804f7f3:	89 e8                	mov    %ebp,%eax
 804f7f5:	83 c4 10             	add    $0x10,%esp
 804f7f8:	84 c0                	test   %al,%al
 804f7fa:	0f 88 86 08 00 00    	js     8050086 <decode_4+0xa36>
 804f800:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f804:	89 3c 24             	mov    %edi,(%esp)
 804f807:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f80b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f80f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f813:	b9 17 3d 00 00       	mov    $0x3d17,%ecx
 804f818:	e8 5b 3a 00 00       	call   8053278 <__afl_maybe_log>
 804f81d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f821:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f825:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f829:	8b 3c 24             	mov    (%esp),%edi
 804f82c:	8d 64 24 10          	lea    0x10(%esp),%esp
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
  }_Bool kbcieiubweuhc1540383426 = isbase64 (in[0]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
}kbcieiubweuhc1540383426;}) || !({if (((in)) && ((in)))  {int lava_776 = 0;
  lava_776 |= ((unsigned char *) (in))[0] << (0*8);lava_776 |= ((unsigned char *) (in))[1] << (1*8);lava_776 |= ((unsigned char *) (in))[2] << (2*8);lava_776 |= ((unsigned char *) (in))[3] << (3*8);lava_set(776,lava_776);
 804f830:	0f b6 6b 01          	movzbl 0x1(%ebx),%ebp
 804f834:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 804f838:	83 ec 08             	sub    $0x8,%esp
 804f83b:	0f b6 0b             	movzbl (%ebx),%ecx
 804f83e:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
 804f842:	c1 e5 08             	shl    $0x8,%ebp
 804f845:	c1 e2 10             	shl    $0x10,%edx
 804f848:	09 ea                	or     %ebp,%edx
 804f84a:	c1 e0 18             	shl    $0x18,%eax
 804f84d:	09 d1                	or     %edx,%ecx
 804f84f:	89 ca                	mov    %ecx,%edx
 804f851:	09 c2                	or     %eax,%edx
 804f853:	52                   	push   %edx
 804f854:	68 08 03 00 00       	push   $0x308
 804f859:	e8 c2 cc ff ff       	call   804c520 <lava_set>
  int lava_554 = 0;
  lava_554 |= ((unsigned char *) (in))[0] << (0*8);lava_554 |= ((unsigned char *) (in))[1] << (1*8);lava_554 |= ((unsigned char *) (in))[2] << (2*8);lava_554 |= ((unsigned char *) (in))[3] << (3*8);lava_set(554,lava_554);
 804f85e:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804f862:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804f866:	5d                   	pop    %ebp
 804f867:	0f b6 6b 03          	movzbl 0x3(%ebx),%ebp
 804f86b:	c1 e1 08             	shl    $0x8,%ecx
 804f86e:	c1 e0 10             	shl    $0x10,%eax
 804f871:	09 c8                	or     %ecx,%eax
 804f873:	0f b6 0b             	movzbl (%ebx),%ecx
 804f876:	c1 e5 18             	shl    $0x18,%ebp
 804f879:	09 c1                	or     %eax,%ecx
 804f87b:	58                   	pop    %eax
 804f87c:	89 c8                	mov    %ecx,%eax
 804f87e:	09 e8                	or     %ebp,%eax
 804f880:	50                   	push   %eax
 804f881:	68 2a 02 00 00       	push   $0x22a
 804f886:	e8 95 cc ff ff       	call   804c520 <lava_set>
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
 804f88b:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804f88f:	0f b6 6b 02          	movzbl 0x2(%ebx),%ebp
 804f893:	58                   	pop    %eax
 804f894:	5a                   	pop    %edx
 804f895:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804f899:	c1 e1 08             	shl    $0x8,%ecx
 804f89c:	c1 e5 10             	shl    $0x10,%ebp
 804f89f:	09 cd                	or     %ecx,%ebp
 804f8a1:	0f b6 0b             	movzbl (%ebx),%ecx
 804f8a4:	c1 e2 18             	shl    $0x18,%edx
 804f8a7:	09 e9                	or     %ebp,%ecx
 804f8a9:	89 c8                	mov    %ecx,%eax
 804f8ab:	09 d0                	or     %edx,%eax
 804f8ad:	50                   	push   %eax
 804f8ae:	68 2d 03 00 00       	push   $0x32d
 804f8b3:	e8 68 cc ff ff       	call   804c520 <lava_set>
  }_Bool kbcieiubweuhc304089172 = isbase64 (in[1]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
 804f8b8:	59                   	pop    %ecx
 804f8b9:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 804f8bd:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  int lava_554 = 0;
  lava_554 |= ((unsigned char *) (in))[0] << (0*8);lava_554 |= ((unsigned char *) (in))[1] << (1*8);lava_554 |= ((unsigned char *) (in))[2] << (2*8);lava_554 |= ((unsigned char *) (in))[3] << (3*8);lava_set(554,lava_554);
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
  }_Bool kbcieiubweuhc304089172 = isbase64 (in[1]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
 804f8c1:	5a                   	pop    %edx
 804f8c2:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804f8c6:	c1 e1 10             	shl    $0x10,%ecx
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 804f8c9:	0f b6 a8 c0 36 06 08 	movzbl 0x80636c0(%eax),%ebp
  int lava_554 = 0;
  lava_554 |= ((unsigned char *) (in))[0] << (0*8);lava_554 |= ((unsigned char *) (in))[1] << (1*8);lava_554 |= ((unsigned char *) (in))[2] << (2*8);lava_554 |= ((unsigned char *) (in))[3] << (3*8);lava_set(554,lava_554);
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
  }_Bool kbcieiubweuhc304089172 = isbase64 (in[1]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
 804f8d0:	c1 e0 08             	shl    $0x8,%eax
 804f8d3:	c1 e2 18             	shl    $0x18,%edx
 804f8d6:	09 ca                	or     %ecx,%edx
 804f8d8:	0f b6 0b             	movzbl (%ebx),%ecx
 804f8db:	09 ca                	or     %ecx,%edx
 804f8dd:	09 c2                	or     %eax,%edx
 804f8df:	52                   	push   %edx
 804f8e0:	68 de 00 00 00       	push   $0xde
 804f8e5:	e8 36 cc ff ff       	call   804c520 <lava_set>
  lava_554 |= ((unsigned char *) (in))[0] << (0*8);lava_554 |= ((unsigned char *) (in))[1] << (1*8);lava_554 |= ((unsigned char *) (in))[2] << (2*8);lava_554 |= ((unsigned char *) (in))[3] << (3*8);lava_set(554,lava_554);
  int lava_813 = 0;
  lava_813 |= ((unsigned char *) (in))[0] << (0*8);lava_813 |= ((unsigned char *) (in))[1] << (1*8);lava_813 |= ((unsigned char *) (in))[2] << (2*8);lava_813 |= ((unsigned char *) (in))[3] << (3*8);lava_set(813,lava_813);
  }_Bool kbcieiubweuhc1540383426 = isbase64 (in[0]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
}kbcieiubweuhc1540383426;}) || !({if (((in)) && ((in)))  {int lava_776 = 0;
 804f8ea:	89 e8                	mov    %ebp,%eax
 804f8ec:	83 c4 10             	add    $0x10,%esp
 804f8ef:	84 c0                	test   %al,%al
 804f8f1:	0f 88 8f 07 00 00    	js     8050086 <decode_4+0xa36>
 804f8f7:	90                   	nop
 804f8f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f8fc:	89 3c 24             	mov    %edi,(%esp)
 804f8ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f903:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f907:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f90b:	b9 f2 78 00 00       	mov    $0x78f2,%ecx
 804f910:	e8 63 39 00 00       	call   8053278 <__afl_maybe_log>
 804f915:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f919:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f91d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f921:	8b 3c 24             	mov    (%esp),%edi
 804f924:	8d 64 24 10          	lea    0x10(%esp),%esp
  }_Bool kbcieiubweuhc304089172 = isbase64 (in[1]);if (((in)) && ((in)))  {int lava_222 = 0;
lava_222 |= ((unsigned char *) (in))[0] << (0*8);lava_222 |= ((unsigned char *) (in))[1] << (1*8);lava_222 |= ((unsigned char *) (in))[2] << (2*8);lava_222 |= ((unsigned char *) (in))[3] << (3*8);lava_set(222,lava_222);
}kbcieiubweuhc304089172;}))
    return false;

  if (*outleft)
 804f928:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 804f92c:	8b 55 00             	mov    0x0(%ebp),%edx
 804f92f:	85 d2                	test   %edx,%edx
 804f931:	0f 84 73 01 00 00    	je     804faaa <decode_4+0x45a>
 804f937:	90                   	nop
 804f938:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804f93c:	89 3c 24             	mov    %edi,(%esp)
 804f93f:	89 54 24 04          	mov    %edx,0x4(%esp)
 804f943:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804f947:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804f94b:	b9 4d c7 00 00       	mov    $0xc74d,%ecx
 804f950:	e8 23 39 00 00       	call   8053278 <__afl_maybe_log>
 804f955:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804f959:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804f95d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804f961:	8b 3c 24             	mov    (%esp),%edi
 804f964:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *out++ = ((b64[({if (((in)) && ((in)))  {int lava_778 = 0;
      lava_778 |= ((unsigned char *) (in))[0] << (0*8);lava_778 |= ((unsigned char *) (in))[1] << (1*8);lava_778 |= ((unsigned char *) (in))[2] << (2*8);lava_778 |= ((unsigned char *) (in))[3] << (3*8);lava_set(778,lava_778);
 804f968:	0f b6 6b 01          	movzbl 0x1(%ebx),%ebp
 804f96c:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
}kbcieiubweuhc304089172;}))
    return false;

  if (*outleft)
    {
      *out++ = ((b64[({if (((in)) && ((in)))  {int lava_778 = 0;
 804f970:	8d 4f 01             	lea    0x1(%edi),%ecx
      lava_778 |= ((unsigned char *) (in))[0] << (0*8);lava_778 |= ((unsigned char *) (in))[1] << (1*8);lava_778 |= ((unsigned char *) (in))[2] << (2*8);lava_778 |= ((unsigned char *) (in))[3] << (3*8);lava_set(778,lava_778);
 804f973:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804f977:	83 ec 08             	sub    $0x8,%esp
}kbcieiubweuhc304089172;}))
    return false;

  if (*outleft)
    {
      *out++ = ((b64[({if (((in)) && ((in)))  {int lava_778 = 0;
 804f97a:	89 4c 24 14          	mov    %ecx,0x14(%esp)
      lava_778 |= ((unsigned char *) (in))[0] << (0*8);lava_778 |= ((unsigned char *) (in))[1] << (1*8);lava_778 |= ((unsigned char *) (in))[2] << (2*8);lava_778 |= ((unsigned char *) (in))[3] << (3*8);lava_set(778,lava_778);
 804f97e:	0f b6 0b             	movzbl (%ebx),%ecx
 804f981:	c1 e5 08             	shl    $0x8,%ebp
 804f984:	c1 e0 10             	shl    $0x10,%eax
 804f987:	09 e8                	or     %ebp,%eax
 804f989:	c1 e2 18             	shl    $0x18,%edx
 804f98c:	09 c1                	or     %eax,%ecx
 804f98e:	89 c8                	mov    %ecx,%eax
 804f990:	09 d0                	or     %edx,%eax
 804f992:	50                   	push   %eax
 804f993:	68 0a 03 00 00       	push   $0x30a
 804f998:	e8 83 cb ff ff       	call   804c520 <lava_set>
      int lava_556 = 0;
      lava_556 |= ((unsigned char *) (in))[0] << (0*8);lava_556 |= ((unsigned char *) (in))[1] << (1*8);lava_556 |= ((unsigned char *) (in))[2] << (2*8);lava_556 |= ((unsigned char *) (in))[3] << (3*8);lava_set(556,lava_556);
 804f99d:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804f9a1:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 804f9a5:	0f b6 2b             	movzbl (%ebx),%ebp
 804f9a8:	58                   	pop    %eax
 804f9a9:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
 804f9ad:	c1 e1 08             	shl    $0x8,%ecx
 804f9b0:	c1 e2 10             	shl    $0x10,%edx
 804f9b3:	09 ca                	or     %ecx,%edx
 804f9b5:	09 d5                	or     %edx,%ebp
 804f9b7:	c1 e0 18             	shl    $0x18,%eax
 804f9ba:	5a                   	pop    %edx
 804f9bb:	89 ea                	mov    %ebp,%edx
 804f9bd:	09 c2                	or     %eax,%edx
 804f9bf:	52                   	push   %edx
 804f9c0:	68 2c 02 00 00       	push   $0x22c
 804f9c5:	e8 56 cb ff ff       	call   804c520 <lava_set>
      int lava_815 = 0;
      lava_815 |= ((unsigned char *) (in))[0] << (0*8);lava_815 |= ((unsigned char *) (in))[1] << (1*8);lava_815 |= ((unsigned char *) (in))[2] << (2*8);lava_815 |= ((unsigned char *) (in))[3] << (3*8);lava_set(815,lava_815);
 804f9ca:	0f b6 6b 01          	movzbl 0x1(%ebx),%ebp
 804f9ce:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804f9d2:	0f b6 0b             	movzbl (%ebx),%ecx
 804f9d5:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804f9d9:	c1 e5 08             	shl    $0x8,%ebp
 804f9dc:	c1 e0 10             	shl    $0x10,%eax
 804f9df:	09 e8                	or     %ebp,%eax
 804f9e1:	c1 e2 18             	shl    $0x18,%edx
 804f9e4:	09 c1                	or     %eax,%ecx
 804f9e6:	5d                   	pop    %ebp
 804f9e7:	58                   	pop    %eax
 804f9e8:	89 c8                	mov    %ecx,%eax
 804f9ea:	09 d0                	or     %edx,%eax
 804f9ec:	50                   	push   %eax
 804f9ed:	68 2f 03 00 00       	push   $0x32f
 804f9f2:	e8 29 cb ff ff       	call   804c520 <lava_set>
      }unsigned char kbcieiubweuhc1303455736 = to_uchar (in[0]);kbcieiubweuhc1303455736;})] << 2)
                | (b64[({if (((in)) && ((in)))  {int lava_780 = 0;
                lava_780 |= ((unsigned char *) (in))[0] << (0*8);lava_780 |= ((unsigned char *) (in))[1] << (1*8);lava_780 |= ((unsigned char *) (in))[2] << (2*8);lava_780 |= ((unsigned char *) (in))[3] << (3*8);lava_set(780,lava_780);
 804f9f7:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
}kbcieiubweuhc304089172;}))
    return false;

  if (*outleft)
    {
      *out++ = ((b64[({if (((in)) && ((in)))  {int lava_778 = 0;
 804f9fb:	0f b6 03             	movzbl (%ebx),%eax
      lava_556 |= ((unsigned char *) (in))[0] << (0*8);lava_556 |= ((unsigned char *) (in))[1] << (1*8);lava_556 |= ((unsigned char *) (in))[2] << (2*8);lava_556 |= ((unsigned char *) (in))[3] << (3*8);lava_set(556,lava_556);
      int lava_815 = 0;
      lava_815 |= ((unsigned char *) (in))[0] << (0*8);lava_815 |= ((unsigned char *) (in))[1] << (1*8);lava_815 |= ((unsigned char *) (in))[2] << (2*8);lava_815 |= ((unsigned char *) (in))[3] << (3*8);lava_set(815,lava_815);
      }unsigned char kbcieiubweuhc1303455736 = to_uchar (in[0]);kbcieiubweuhc1303455736;})] << 2)
                | (b64[({if (((in)) && ((in)))  {int lava_780 = 0;
                lava_780 |= ((unsigned char *) (in))[0] << (0*8);lava_780 |= ((unsigned char *) (in))[1] << (1*8);lava_780 |= ((unsigned char *) (in))[2] << (2*8);lava_780 |= ((unsigned char *) (in))[3] << (3*8);lava_set(780,lava_780);
 804f9fe:	c1 e1 08             	shl    $0x8,%ecx
      lava_778 |= ((unsigned char *) (in))[0] << (0*8);lava_778 |= ((unsigned char *) (in))[1] << (1*8);lava_778 |= ((unsigned char *) (in))[2] << (2*8);lava_778 |= ((unsigned char *) (in))[3] << (3*8);lava_set(778,lava_778);
      int lava_556 = 0;
      lava_556 |= ((unsigned char *) (in))[0] << (0*8);lava_556 |= ((unsigned char *) (in))[1] << (1*8);lava_556 |= ((unsigned char *) (in))[2] << (2*8);lava_556 |= ((unsigned char *) (in))[3] << (3*8);lava_set(556,lava_556);
      int lava_815 = 0;
      lava_815 |= ((unsigned char *) (in))[0] << (0*8);lava_815 |= ((unsigned char *) (in))[1] << (1*8);lava_815 |= ((unsigned char *) (in))[2] << (2*8);lava_815 |= ((unsigned char *) (in))[3] << (3*8);lava_set(815,lava_815);
      }unsigned char kbcieiubweuhc1303455736 = to_uchar (in[0]);kbcieiubweuhc1303455736;})] << 2)
 804fa01:	0f be a8 c0 36 06 08 	movsbl 0x80636c0(%eax),%ebp
                | (b64[({if (((in)) && ((in)))  {int lava_780 = 0;
                lava_780 |= ((unsigned char *) (in))[0] << (0*8);lava_780 |= ((unsigned char *) (in))[1] << (1*8);lava_780 |= ((unsigned char *) (in))[2] << (2*8);lava_780 |= ((unsigned char *) (in))[3] << (3*8);lava_set(780,lava_780);
 804fa08:	89 ca                	mov    %ecx,%edx
 804fa0a:	09 c2                	or     %eax,%edx
 804fa0c:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
      lava_778 |= ((unsigned char *) (in))[0] << (0*8);lava_778 |= ((unsigned char *) (in))[1] << (1*8);lava_778 |= ((unsigned char *) (in))[2] << (2*8);lava_778 |= ((unsigned char *) (in))[3] << (3*8);lava_set(778,lava_778);
      int lava_556 = 0;
      lava_556 |= ((unsigned char *) (in))[0] << (0*8);lava_556 |= ((unsigned char *) (in))[1] << (1*8);lava_556 |= ((unsigned char *) (in))[2] << (2*8);lava_556 |= ((unsigned char *) (in))[3] << (3*8);lava_set(556,lava_556);
      int lava_815 = 0;
      lava_815 |= ((unsigned char *) (in))[0] << (0*8);lava_815 |= ((unsigned char *) (in))[1] << (1*8);lava_815 |= ((unsigned char *) (in))[2] << (2*8);lava_815 |= ((unsigned char *) (in))[3] << (3*8);lava_set(815,lava_815);
      }unsigned char kbcieiubweuhc1303455736 = to_uchar (in[0]);kbcieiubweuhc1303455736;})] << 2)
 804fa10:	c1 e5 02             	shl    $0x2,%ebp
                | (b64[({if (((in)) && ((in)))  {int lava_780 = 0;
                lava_780 |= ((unsigned char *) (in))[0] << (0*8);lava_780 |= ((unsigned char *) (in))[1] << (1*8);lava_780 |= ((unsigned char *) (in))[2] << (2*8);lava_780 |= ((unsigned char *) (in))[3] << (3*8);lava_set(780,lava_780);
 804fa13:	c1 e0 10             	shl    $0x10,%eax
 804fa16:	09 c2                	or     %eax,%edx
 804fa18:	89 d1                	mov    %edx,%ecx
 804fa1a:	58                   	pop    %eax
 804fa1b:	5a                   	pop    %edx
 804fa1c:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804fa20:	89 c8                	mov    %ecx,%eax
 804fa22:	c1 e2 18             	shl    $0x18,%edx
 804fa25:	09 d0                	or     %edx,%eax
 804fa27:	50                   	push   %eax
 804fa28:	68 0c 03 00 00       	push   $0x30c
 804fa2d:	e8 ee ca ff ff       	call   804c520 <lava_set>
                int lava_558 = 0;
                lava_558 |= ((unsigned char *) (in))[0] << (0*8);lava_558 |= ((unsigned char *) (in))[1] << (1*8);lava_558 |= ((unsigned char *) (in))[2] << (2*8);lava_558 |= ((unsigned char *) (in))[3] << (3*8);lava_set(558,lava_558);
 804fa32:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804fa36:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 804fa3a:	58                   	pop    %eax
 804fa3b:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
 804fa3f:	c1 e1 08             	shl    $0x8,%ecx
 804fa42:	c1 e2 10             	shl    $0x10,%edx
 804fa45:	09 ca                	or     %ecx,%edx
 804fa47:	0f b6 0b             	movzbl (%ebx),%ecx
 804fa4a:	09 d1                	or     %edx,%ecx
 804fa4c:	c1 e0 18             	shl    $0x18,%eax
 804fa4f:	5a                   	pop    %edx
 804fa50:	09 c1                	or     %eax,%ecx
 804fa52:	51                   	push   %ecx
 804fa53:	68 2e 02 00 00       	push   $0x22e
 804fa58:	e8 c3 ca ff ff       	call   804c520 <lava_set>
                int lava_817 = 0;
                lava_817 |= ((unsigned char *) (in))[0] << (0*8);lava_817 |= ((unsigned char *) (in))[1] << (1*8);lava_817 |= ((unsigned char *) (in))[2] << (2*8);lava_817 |= ((unsigned char *) (in))[3] << (3*8);lava_set(817,lava_817);
 804fa5d:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 804fa61:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804fa65:	0f b6 0b             	movzbl (%ebx),%ecx
 804fa68:	c1 e2 08             	shl    $0x8,%edx
 804fa6b:	c1 e0 10             	shl    $0x10,%eax
 804fa6e:	09 d0                	or     %edx,%eax
 804fa70:	09 c1                	or     %eax,%ecx
 804fa72:	58                   	pop    %eax
 804fa73:	5a                   	pop    %edx
 804fa74:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804fa78:	89 c8                	mov    %ecx,%eax
 804fa7a:	c1 e2 18             	shl    $0x18,%edx
 804fa7d:	09 d0                	or     %edx,%eax
 804fa7f:	50                   	push   %eax
 804fa80:	68 31 03 00 00       	push   $0x331
 804fa85:	e8 96 ca ff ff       	call   804c520 <lava_set>
      int lava_556 = 0;
      lava_556 |= ((unsigned char *) (in))[0] << (0*8);lava_556 |= ((unsigned char *) (in))[1] << (1*8);lava_556 |= ((unsigned char *) (in))[2] << (2*8);lava_556 |= ((unsigned char *) (in))[3] << (3*8);lava_set(556,lava_556);
      int lava_815 = 0;
      lava_815 |= ((unsigned char *) (in))[0] << (0*8);lava_815 |= ((unsigned char *) (in))[1] << (1*8);lava_815 |= ((unsigned char *) (in))[2] << (2*8);lava_815 |= ((unsigned char *) (in))[3] << (3*8);lava_set(815,lava_815);
      }unsigned char kbcieiubweuhc1303455736 = to_uchar (in[0]);kbcieiubweuhc1303455736;})] << 2)
                | (b64[({if (((in)) && ((in)))  {int lava_780 = 0;
 804fa8a:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
}kbcieiubweuhc304089172;}))
    return false;

  if (*outleft)
    {
      *out++ = ((b64[({if (((in)) && ((in)))  {int lava_778 = 0;
 804fa8e:	0f b6 91 c0 36 06 08 	movzbl 0x80636c0(%ecx),%edx
 804fa95:	c0 fa 04             	sar    $0x4,%dl
 804fa98:	09 ea                	or     %ebp,%edx
 804fa9a:	88 17                	mov    %dl,(%edi)
                int lava_558 = 0;
                lava_558 |= ((unsigned char *) (in))[0] << (0*8);lava_558 |= ((unsigned char *) (in))[1] << (1*8);lava_558 |= ((unsigned char *) (in))[2] << (2*8);lava_558 |= ((unsigned char *) (in))[3] << (3*8);lava_set(558,lava_558);
                int lava_817 = 0;
                lava_817 |= ((unsigned char *) (in))[0] << (0*8);lava_817 |= ((unsigned char *) (in))[1] << (1*8);lava_817 |= ((unsigned char *) (in))[2] << (2*8);lava_817 |= ((unsigned char *) (in))[3] << (3*8);lava_set(817,lava_817);
                }unsigned char kbcieiubweuhc35005211 = to_uchar (in[1]);kbcieiubweuhc35005211;})] >> 4));
      --*outleft;
 804fa9c:	8b 7c 24 40          	mov    0x40(%esp),%edi
 804faa0:	83 c4 10             	add    $0x10,%esp
 804faa3:	83 2f 01             	subl   $0x1,(%edi)
}kbcieiubweuhc304089172;}))
    return false;

  if (*outleft)
    {
      *out++ = ((b64[({if (((in)) && ((in)))  {int lava_778 = 0;
 804faa6:	8b 7c 24 0c          	mov    0xc(%esp),%edi
 804faaa:	66 90                	xchg   %ax,%ax
                lava_817 |= ((unsigned char *) (in))[0] << (0*8);lava_817 |= ((unsigned char *) (in))[1] << (1*8);lava_817 |= ((unsigned char *) (in))[2] << (2*8);lava_817 |= ((unsigned char *) (in))[3] << (3*8);lava_set(817,lava_817);
                }unsigned char kbcieiubweuhc35005211 = to_uchar (in[1]);kbcieiubweuhc35005211;})] >> 4));
      --*outleft;
    }

  if (inlen == 2)
 804faac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fab0:	89 3c 24             	mov    %edi,(%esp)
 804fab3:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fab7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fabb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fabf:	b9 b3 1e 00 00       	mov    $0x1eb3,%ecx
 804fac4:	e8 af 37 00 00       	call   8053278 <__afl_maybe_log>
 804fac9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804facd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fad1:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fad5:	8b 3c 24             	mov    (%esp),%edi
 804fad8:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fadc:	83 fe 02             	cmp    $0x2,%esi
 804fadf:	0f 84 9b 05 00 00    	je     8050080 <decode_4+0xa30>
 804fae5:	8d 76 00             	lea    0x0(%esi),%esi
 804fae8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804faec:	89 3c 24             	mov    %edi,(%esp)
 804faef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804faf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804faf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fafb:	b9 83 b3 00 00       	mov    $0xb383,%ecx
 804fb00:	e8 73 37 00 00       	call   8053278 <__afl_maybe_log>
 804fb05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fb09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fb0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fb11:	8b 3c 24             	mov    (%esp),%edi
 804fb14:	8d 64 24 10          	lea    0x10(%esp),%esp
    return_false;

  if (in[2] == '=')
 804fb18:	80 7b 02 3d          	cmpb   $0x3d,0x2(%ebx)
 804fb1c:	0f 84 a6 05 00 00    	je     80500c8 <decode_4+0xa78>
 804fb22:	66 90                	xchg   %ax,%ax
 804fb24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fb28:	89 3c 24             	mov    %edi,(%esp)
 804fb2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fb2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fb33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fb37:	b9 5f 68 00 00       	mov    $0x685f,%ecx
 804fb3c:	e8 37 37 00 00       	call   8053278 <__afl_maybe_log>
 804fb41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fb45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fb49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fb4d:	8b 3c 24             	mov    (%esp),%edi
 804fb50:	8d 64 24 10          	lea    0x10(%esp),%esp
        return_false;
    }
  else
    {
      if (!({if (((in)) && ((in)))  {int lava_782 = 0;
      lava_782 |= ((unsigned char *) (in))[0] << (0*8);lava_782 |= ((unsigned char *) (in))[1] << (1*8);lava_782 |= ((unsigned char *) (in))[2] << (2*8);lava_782 |= ((unsigned char *) (in))[3] << (3*8);lava_set(782,lava_782);
 804fb54:	0f b6 6b 01          	movzbl 0x1(%ebx),%ebp
 804fb58:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804fb5c:	83 ec 08             	sub    $0x8,%esp
 804fb5f:	0f b6 0b             	movzbl (%ebx),%ecx
 804fb62:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804fb66:	c1 e5 08             	shl    $0x8,%ebp
 804fb69:	c1 e0 10             	shl    $0x10,%eax
 804fb6c:	09 e8                	or     %ebp,%eax
 804fb6e:	c1 e2 18             	shl    $0x18,%edx
 804fb71:	09 c1                	or     %eax,%ecx
 804fb73:	89 c8                	mov    %ecx,%eax
 804fb75:	09 d0                	or     %edx,%eax
 804fb77:	50                   	push   %eax
 804fb78:	68 0e 03 00 00       	push   $0x30e
 804fb7d:	e8 9e c9 ff ff       	call   804c520 <lava_set>
      int lava_560 = 0;
      lava_560 |= ((unsigned char *) (in))[0] << (0*8);lava_560 |= ((unsigned char *) (in))[1] << (1*8);lava_560 |= ((unsigned char *) (in))[2] << (2*8);lava_560 |= ((unsigned char *) (in))[3] << (3*8);lava_set(560,lava_560);
 804fb82:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804fb86:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 804fb8a:	5d                   	pop    %ebp
 804fb8b:	0f b6 6b 03          	movzbl 0x3(%ebx),%ebp
 804fb8f:	58                   	pop    %eax
 804fb90:	c1 e1 08             	shl    $0x8,%ecx
 804fb93:	c1 e2 10             	shl    $0x10,%edx
 804fb96:	09 ca                	or     %ecx,%edx
 804fb98:	0f b6 0b             	movzbl (%ebx),%ecx
 804fb9b:	c1 e5 18             	shl    $0x18,%ebp
 804fb9e:	09 d1                	or     %edx,%ecx
 804fba0:	89 c8                	mov    %ecx,%eax
 804fba2:	09 e8                	or     %ebp,%eax
 804fba4:	50                   	push   %eax
 804fba5:	68 30 02 00 00       	push   $0x230
 804fbaa:	e8 71 c9 ff ff       	call   804c520 <lava_set>
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 804fbaf:	0f b6 6b 02          	movzbl 0x2(%ebx),%ebp
      if (in[3] != '=')
        return_false;
    }
  else
    {
      if (!({if (((in)) && ((in)))  {int lava_782 = 0;
 804fbb3:	83 c4 10             	add    $0x10,%esp
 804fbb6:	80 bd c0 36 06 08 00 	cmpb   $0x0,0x80636c0(%ebp)
 804fbbd:	0f 88 bd 04 00 00    	js     8050080 <decode_4+0xa30>
 804fbc3:	90                   	nop
 804fbc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fbc8:	89 3c 24             	mov    %edi,(%esp)
 804fbcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fbcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fbd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fbd7:	b9 32 4c 00 00       	mov    $0x4c32,%ecx
 804fbdc:	e8 97 36 00 00       	call   8053278 <__afl_maybe_log>
 804fbe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fbe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fbe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fbed:	8b 3c 24             	mov    (%esp),%edi
 804fbf0:	8d 64 24 10          	lea    0x10(%esp),%esp
      int lava_560 = 0;
      lava_560 |= ((unsigned char *) (in))[0] << (0*8);lava_560 |= ((unsigned char *) (in))[1] << (1*8);lava_560 |= ((unsigned char *) (in))[2] << (2*8);lava_560 |= ((unsigned char *) (in))[3] << (3*8);lava_set(560,lava_560);
      }_Bool kbcieiubweuhc521595368 = isbase64 (in[2]);kbcieiubweuhc521595368;}))
        return_false;

      if (*outleft)
 804fbf4:	8b 4c 24 30          	mov    0x30(%esp),%ecx
 804fbf8:	8b 11                	mov    (%ecx),%edx
 804fbfa:	85 d2                	test   %edx,%edx
 804fbfc:	0f 84 e3 00 00 00    	je     804fce5 <decode_4+0x695>
 804fc02:	66 90                	xchg   %ax,%ax
 804fc04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fc08:	89 3c 24             	mov    %edi,(%esp)
 804fc0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fc0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fc13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fc17:	b9 7d 37 00 00       	mov    $0x377d,%ecx
 804fc1c:	e8 57 36 00 00       	call   8053278 <__afl_maybe_log>
 804fc21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fc25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fc29:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fc2d:	8b 3c 24             	mov    (%esp),%edi
 804fc30:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
          lava_784 |= ((unsigned char *) (in))[0] << (0*8);lava_784 |= ((unsigned char *) (in))[1] << (1*8);lava_784 |= ((unsigned char *) (in))[2] << (2*8);lava_784 |= ((unsigned char *) (in))[3] << (3*8);lava_set(784,lava_784);
 804fc34:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804fc38:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
      }_Bool kbcieiubweuhc521595368 = isbase64 (in[2]);kbcieiubweuhc521595368;}))
        return_false;

      if (*outleft)
        {
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
 804fc3c:	8d 47 01             	lea    0x1(%edi),%eax
          lava_784 |= ((unsigned char *) (in))[0] << (0*8);lava_784 |= ((unsigned char *) (in))[1] << (1*8);lava_784 |= ((unsigned char *) (in))[2] << (2*8);lava_784 |= ((unsigned char *) (in))[3] << (3*8);lava_set(784,lava_784);
 804fc3f:	c1 e5 10             	shl    $0x10,%ebp
 804fc42:	83 ec 08             	sub    $0x8,%esp
      }_Bool kbcieiubweuhc521595368 = isbase64 (in[2]);kbcieiubweuhc521595368;}))
        return_false;

      if (*outleft)
        {
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
 804fc45:	89 44 24 14          	mov    %eax,0x14(%esp)
          lava_784 |= ((unsigned char *) (in))[0] << (0*8);lava_784 |= ((unsigned char *) (in))[1] << (1*8);lava_784 |= ((unsigned char *) (in))[2] << (2*8);lava_784 |= ((unsigned char *) (in))[3] << (3*8);lava_set(784,lava_784);
 804fc49:	c1 e1 08             	shl    $0x8,%ecx
 804fc4c:	c1 e2 18             	shl    $0x18,%edx
 804fc4f:	09 ca                	or     %ecx,%edx
 804fc51:	0f b6 0b             	movzbl (%ebx),%ecx
 804fc54:	09 ca                	or     %ecx,%edx
 804fc56:	09 ea                	or     %ebp,%edx
 804fc58:	52                   	push   %edx
 804fc59:	68 10 03 00 00       	push   $0x310
 804fc5e:	e8 bd c8 ff ff       	call   804c520 <lava_set>
          int lava_562 = 0;
          lava_562 |= ((unsigned char *) (in))[0] << (0*8);lava_562 |= ((unsigned char *) (in))[1] << (1*8);lava_562 |= ((unsigned char *) (in))[2] << (2*8);lava_562 |= ((unsigned char *) (in))[3] << (3*8);lava_set(562,lava_562);
 804fc63:	0f b6 6b 01          	movzbl 0x1(%ebx),%ebp
 804fc67:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804fc6b:	0f b6 0b             	movzbl (%ebx),%ecx
 804fc6e:	c1 e5 08             	shl    $0x8,%ebp
 804fc71:	c1 e0 10             	shl    $0x10,%eax
 804fc74:	09 e8                	or     %ebp,%eax
 804fc76:	09 c1                	or     %eax,%ecx
 804fc78:	58                   	pop    %eax
 804fc79:	5a                   	pop    %edx
 804fc7a:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804fc7e:	89 c8                	mov    %ecx,%eax
 804fc80:	c1 e2 18             	shl    $0x18,%edx
 804fc83:	09 d0                	or     %edx,%eax
 804fc85:	50                   	push   %eax
 804fc86:	68 32 02 00 00       	push   $0x232
 804fc8b:	e8 90 c8 ff ff       	call   804c520 <lava_set>
          }unsigned char kbcieiubweuhc294702567 = to_uchar (in[1]);kbcieiubweuhc294702567;})] << 4) & 0xf0)
                    | (b64[({if (((in)) && ((in)))  {int lava_786 = 0;
                    lava_786 |= ((unsigned char *) (in))[0] << (0*8);lava_786 |= ((unsigned char *) (in))[1] << (1*8);lava_786 |= ((unsigned char *) (in))[2] << (2*8);lava_786 |= ((unsigned char *) (in))[3] << (3*8);lava_set(786,lava_786);
 804fc90:	59                   	pop    %ecx
 804fc91:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
      }_Bool kbcieiubweuhc521595368 = isbase64 (in[2]);kbcieiubweuhc521595368;}))
        return_false;

      if (*outleft)
        {
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
 804fc95:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
          lava_784 |= ((unsigned char *) (in))[0] << (0*8);lava_784 |= ((unsigned char *) (in))[1] << (1*8);lava_784 |= ((unsigned char *) (in))[2] << (2*8);lava_784 |= ((unsigned char *) (in))[3] << (3*8);lava_set(784,lava_784);
          int lava_562 = 0;
          lava_562 |= ((unsigned char *) (in))[0] << (0*8);lava_562 |= ((unsigned char *) (in))[1] << (1*8);lava_562 |= ((unsigned char *) (in))[2] << (2*8);lava_562 |= ((unsigned char *) (in))[3] << (3*8);lava_set(562,lava_562);
          }unsigned char kbcieiubweuhc294702567 = to_uchar (in[1]);kbcieiubweuhc294702567;})] << 4) & 0xf0)
                    | (b64[({if (((in)) && ((in)))  {int lava_786 = 0;
                    lava_786 |= ((unsigned char *) (in))[0] << (0*8);lava_786 |= ((unsigned char *) (in))[1] << (1*8);lava_786 |= ((unsigned char *) (in))[2] << (2*8);lava_786 |= ((unsigned char *) (in))[3] << (3*8);lava_set(786,lava_786);
 804fc99:	5a                   	pop    %edx
 804fc9a:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804fc9e:	c1 e1 10             	shl    $0x10,%ecx
        {
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
          lava_784 |= ((unsigned char *) (in))[0] << (0*8);lava_784 |= ((unsigned char *) (in))[1] << (1*8);lava_784 |= ((unsigned char *) (in))[2] << (2*8);lava_784 |= ((unsigned char *) (in))[3] << (3*8);lava_set(784,lava_784);
          int lava_562 = 0;
          lava_562 |= ((unsigned char *) (in))[0] << (0*8);lava_562 |= ((unsigned char *) (in))[1] << (1*8);lava_562 |= ((unsigned char *) (in))[2] << (2*8);lava_562 |= ((unsigned char *) (in))[3] << (3*8);lava_set(562,lava_562);
          }unsigned char kbcieiubweuhc294702567 = to_uchar (in[1]);kbcieiubweuhc294702567;})] << 4) & 0xf0)
 804fca1:	0f be a8 c0 36 06 08 	movsbl 0x80636c0(%eax),%ebp
                    | (b64[({if (((in)) && ((in)))  {int lava_786 = 0;
                    lava_786 |= ((unsigned char *) (in))[0] << (0*8);lava_786 |= ((unsigned char *) (in))[1] << (1*8);lava_786 |= ((unsigned char *) (in))[2] << (2*8);lava_786 |= ((unsigned char *) (in))[3] << (3*8);lava_set(786,lava_786);
 804fca8:	c1 e0 08             	shl    $0x8,%eax
 804fcab:	c1 e2 18             	shl    $0x18,%edx
 804fcae:	09 ca                	or     %ecx,%edx
 804fcb0:	0f b6 0b             	movzbl (%ebx),%ecx
        {
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
          lava_784 |= ((unsigned char *) (in))[0] << (0*8);lava_784 |= ((unsigned char *) (in))[1] << (1*8);lava_784 |= ((unsigned char *) (in))[2] << (2*8);lava_784 |= ((unsigned char *) (in))[3] << (3*8);lava_set(784,lava_784);
          int lava_562 = 0;
          lava_562 |= ((unsigned char *) (in))[0] << (0*8);lava_562 |= ((unsigned char *) (in))[1] << (1*8);lava_562 |= ((unsigned char *) (in))[2] << (2*8);lava_562 |= ((unsigned char *) (in))[3] << (3*8);lava_set(562,lava_562);
          }unsigned char kbcieiubweuhc294702567 = to_uchar (in[1]);kbcieiubweuhc294702567;})] << 4) & 0xf0)
 804fcb3:	c1 e5 04             	shl    $0x4,%ebp
 804fcb6:	09 ca                	or     %ecx,%edx
                    | (b64[({if (((in)) && ((in)))  {int lava_786 = 0;
                    lava_786 |= ((unsigned char *) (in))[0] << (0*8);lava_786 |= ((unsigned char *) (in))[1] << (1*8);lava_786 |= ((unsigned char *) (in))[2] << (2*8);lava_786 |= ((unsigned char *) (in))[3] << (3*8);lava_set(786,lava_786);
 804fcb8:	09 c2                	or     %eax,%edx
 804fcba:	52                   	push   %edx
 804fcbb:	68 12 03 00 00       	push   $0x312
 804fcc0:	e8 5b c8 ff ff       	call   804c520 <lava_set>
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
          lava_784 |= ((unsigned char *) (in))[0] << (0*8);lava_784 |= ((unsigned char *) (in))[1] << (1*8);lava_784 |= ((unsigned char *) (in))[2] << (2*8);lava_784 |= ((unsigned char *) (in))[3] << (3*8);lava_set(784,lava_784);
          int lava_562 = 0;
          lava_562 |= ((unsigned char *) (in))[0] << (0*8);lava_562 |= ((unsigned char *) (in))[1] << (1*8);lava_562 |= ((unsigned char *) (in))[2] << (2*8);lava_562 |= ((unsigned char *) (in))[3] << (3*8);lava_set(562,lava_562);
          }unsigned char kbcieiubweuhc294702567 = to_uchar (in[1]);kbcieiubweuhc294702567;})] << 4) & 0xf0)
                    | (b64[({if (((in)) && ((in)))  {int lava_786 = 0;
 804fcc5:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
      }_Bool kbcieiubweuhc521595368 = isbase64 (in[2]);kbcieiubweuhc521595368;}))
        return_false;

      if (*outleft)
        {
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
 804fcc9:	0f b6 90 c0 36 06 08 	movzbl 0x80636c0(%eax),%edx
 804fcd0:	c0 fa 02             	sar    $0x2,%dl
 804fcd3:	09 ea                	or     %ebp,%edx
 804fcd5:	88 17                	mov    %dl,(%edi)
          lava_562 |= ((unsigned char *) (in))[0] << (0*8);lava_562 |= ((unsigned char *) (in))[1] << (1*8);lava_562 |= ((unsigned char *) (in))[2] << (2*8);lava_562 |= ((unsigned char *) (in))[3] << (3*8);lava_set(562,lava_562);
          }unsigned char kbcieiubweuhc294702567 = to_uchar (in[1]);kbcieiubweuhc294702567;})] << 4) & 0xf0)
                    | (b64[({if (((in)) && ((in)))  {int lava_786 = 0;
                    lava_786 |= ((unsigned char *) (in))[0] << (0*8);lava_786 |= ((unsigned char *) (in))[1] << (1*8);lava_786 |= ((unsigned char *) (in))[2] << (2*8);lava_786 |= ((unsigned char *) (in))[3] << (3*8);lava_set(786,lava_786);
                    }unsigned char kbcieiubweuhc1726956429 = to_uchar (in[2]);kbcieiubweuhc1726956429;})] >> 2));
          --*outleft;
 804fcd7:	8b 7c 24 40          	mov    0x40(%esp),%edi
 804fcdb:	83 c4 10             	add    $0x10,%esp
 804fcde:	83 2f 01             	subl   $0x1,(%edi)
      }_Bool kbcieiubweuhc521595368 = isbase64 (in[2]);kbcieiubweuhc521595368;}))
        return_false;

      if (*outleft)
        {
          *out++ = (((b64[({if (((in)) && ((in)))  {int lava_784 = 0;
 804fce1:	8b 7c 24 0c          	mov    0xc(%esp),%edi
 804fce5:	8d 76 00             	lea    0x0(%esi),%esi
                    lava_786 |= ((unsigned char *) (in))[0] << (0*8);lava_786 |= ((unsigned char *) (in))[1] << (1*8);lava_786 |= ((unsigned char *) (in))[2] << (2*8);lava_786 |= ((unsigned char *) (in))[3] << (3*8);lava_set(786,lava_786);
                    }unsigned char kbcieiubweuhc1726956429 = to_uchar (in[2]);kbcieiubweuhc1726956429;})] >> 2));
          --*outleft;
        }

      if (inlen == 3)
 804fce8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fcec:	89 3c 24             	mov    %edi,(%esp)
 804fcef:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fcf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fcf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fcfb:	b9 98 7a 00 00       	mov    $0x7a98,%ecx
 804fd00:	e8 73 35 00 00       	call   8053278 <__afl_maybe_log>
 804fd05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fd09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fd0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fd11:	8b 3c 24             	mov    (%esp),%edi
 804fd14:	8d 64 24 10          	lea    0x10(%esp),%esp
 804fd18:	83 fe 03             	cmp    $0x3,%esi
 804fd1b:	0f 84 5f 03 00 00    	je     8050080 <decode_4+0xa30>
 804fd21:	8d 76 00             	lea    0x0(%esi),%esi
 804fd24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fd28:	89 3c 24             	mov    %edi,(%esp)
 804fd2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fd2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fd33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fd37:	b9 d1 de 00 00       	mov    $0xded1,%ecx
 804fd3c:	e8 37 35 00 00       	call   8053278 <__afl_maybe_log>
 804fd41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fd45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fd49:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fd4d:	8b 3c 24             	mov    (%esp),%edi
 804fd50:	8d 64 24 10          	lea    0x10(%esp),%esp
        return_false;

      if (in[3] == '=')
 804fd54:	80 7b 03 3d          	cmpb   $0x3d,0x3(%ebx)
 804fd58:	0f 84 e2 02 00 00    	je     8050040 <decode_4+0x9f0>
 804fd5e:	66 90                	xchg   %ax,%ax
 804fd60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fd64:	89 3c 24             	mov    %edi,(%esp)
 804fd67:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fd6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fd6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fd73:	b9 f6 ef 00 00       	mov    $0xeff6,%ecx
 804fd78:	e8 fb 34 00 00       	call   8053278 <__afl_maybe_log>
 804fd7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fd81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fd85:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fd89:	8b 3c 24             	mov    (%esp),%edi
 804fd8c:	8d 64 24 10          	lea    0x10(%esp),%esp
            return_false;
        }
      else
        {
          if (!({if (((in)) && ((in)))  {int lava_253 = 0;
          lava_253 |= ((unsigned char *) (in))[0] << (0*8);lava_253 |= ((unsigned char *) (in))[1] << (1*8);lava_253 |= ((unsigned char *) (in))[2] << (2*8);lava_253 |= ((unsigned char *) (in))[3] << (3*8);lava_set(253,lava_253);
 804fd90:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
 804fd94:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
 804fd98:	83 ec 08             	sub    $0x8,%esp
 804fd9b:	0f b6 03             	movzbl (%ebx),%eax
 804fd9e:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804fda2:	c1 e6 08             	shl    $0x8,%esi
 804fda5:	c1 e1 10             	shl    $0x10,%ecx
 804fda8:	09 f1                	or     %esi,%ecx
 804fdaa:	c1 e2 18             	shl    $0x18,%edx
 804fdad:	09 c1                	or     %eax,%ecx
 804fdaf:	09 d1                	or     %edx,%ecx
 804fdb1:	51                   	push   %ecx
 804fdb2:	68 fd 00 00 00       	push   $0xfd
 804fdb7:	e8 64 c7 ff ff       	call   804c520 <lava_set>
          int lava_274 = 0;
          lava_274 |= ((unsigned char *) (in))[0] << (0*8);lava_274 |= ((unsigned char *) (in))[1] << (1*8);lava_274 |= ((unsigned char *) (in))[2] << (2*8);lava_274 |= ((unsigned char *) (in))[3] << (3*8);lava_set(274,lava_274);
 804fdbc:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
 804fdc0:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
 804fdc4:	0f b6 03             	movzbl (%ebx),%eax
 804fdc7:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804fdcb:	c1 e6 08             	shl    $0x8,%esi
 804fdce:	c1 e1 10             	shl    $0x10,%ecx
 804fdd1:	09 f1                	or     %esi,%ecx
 804fdd3:	c1 e2 18             	shl    $0x18,%edx
 804fdd6:	5e                   	pop    %esi
 804fdd7:	09 c1                	or     %eax,%ecx
 804fdd9:	5d                   	pop    %ebp
 804fdda:	09 d1                	or     %edx,%ecx
 804fddc:	51                   	push   %ecx
 804fddd:	68 12 01 00 00       	push   $0x112
 804fde2:	e8 39 c7 ff ff       	call   804c520 <lava_set>
          int lava_788 = 0;
          lava_788 |= ((unsigned char *) (in))[0] << (0*8);lava_788 |= ((unsigned char *) (in))[1] << (1*8);lava_788 |= ((unsigned char *) (in))[2] << (2*8);lava_788 |= ((unsigned char *) (in))[3] << (3*8);lava_set(788,lava_788);
 804fde7:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
 804fdeb:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804fdef:	5a                   	pop    %edx
 804fdf0:	0f b6 0b             	movzbl (%ebx),%ecx
 804fdf3:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804fdf7:	c1 e6 08             	shl    $0x8,%esi
 804fdfa:	c1 e0 10             	shl    $0x10,%eax
 804fdfd:	09 f0                	or     %esi,%eax
 804fdff:	c1 e2 18             	shl    $0x18,%edx
 804fe02:	09 c8                	or     %ecx,%eax
 804fe04:	59                   	pop    %ecx
 804fe05:	09 d0                	or     %edx,%eax
 804fe07:	50                   	push   %eax
 804fe08:	68 14 03 00 00       	push   $0x314
 804fe0d:	e8 0e c7 ff ff       	call   804c520 <lava_set>
          int lava_566 = 0;
          lava_566 |= ((unsigned char *) (in))[0] << (0*8);lava_566 |= ((unsigned char *) (in))[1] << (1*8);lava_566 |= ((unsigned char *) (in))[2] << (2*8);lava_566 |= ((unsigned char *) (in))[3] << (3*8);lava_set(566,lava_566);
 804fe12:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
 804fe16:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804fe1a:	0f b6 0b             	movzbl (%ebx),%ecx
 804fe1d:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804fe21:	c1 e6 08             	shl    $0x8,%esi
 804fe24:	c1 e0 10             	shl    $0x10,%eax
 804fe27:	09 f0                	or     %esi,%eax
 804fe29:	c1 e2 18             	shl    $0x18,%edx
 804fe2c:	5e                   	pop    %esi
 804fe2d:	09 c8                	or     %ecx,%eax
 804fe2f:	5d                   	pop    %ebp
 804fe30:	09 d0                	or     %edx,%eax
 804fe32:	50                   	push   %eax
 804fe33:	68 36 02 00 00       	push   $0x236
 804fe38:	e8 e3 c6 ff ff       	call   804c520 <lava_set>
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 804fe3d:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
          if (inlen != 4)
            return_false;
        }
      else
        {
          if (!({if (((in)) && ((in)))  {int lava_253 = 0;
 804fe41:	83 c4 10             	add    $0x10,%esp
 804fe44:	80 b8 c0 36 06 08 00 	cmpb   $0x0,0x80636c0(%eax)
 804fe4b:	0f 88 2f 02 00 00    	js     8050080 <decode_4+0xa30>
 804fe51:	8d 76 00             	lea    0x0(%esi),%esi
 804fe54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fe58:	89 3c 24             	mov    %edi,(%esp)
 804fe5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fe5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fe63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fe67:	b9 e8 7e 00 00       	mov    $0x7ee8,%ecx
 804fe6c:	e8 07 34 00 00       	call   8053278 <__afl_maybe_log>
 804fe71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804fe75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804fe79:	8b 54 24 04          	mov    0x4(%esp),%edx
 804fe7d:	8b 3c 24             	mov    (%esp),%edi
 804fe80:	8d 64 24 10          	lea    0x10(%esp),%esp
          int lava_566 = 0;
          lava_566 |= ((unsigned char *) (in))[0] << (0*8);lava_566 |= ((unsigned char *) (in))[1] << (1*8);lava_566 |= ((unsigned char *) (in))[2] << (2*8);lava_566 |= ((unsigned char *) (in))[3] << (3*8);lava_set(566,lava_566);
          }_Bool kbcieiubweuhc336465782 = isbase64 (in[3]);kbcieiubweuhc336465782;}))
            return_false;

          if (*outleft)
 804fe84:	8b 74 24 30          	mov    0x30(%esp),%esi
 804fe88:	8b 2e                	mov    (%esi),%ebp
 804fe8a:	85 ed                	test   %ebp,%ebp
 804fe8c:	0f 84 60 01 00 00    	je     804fff2 <decode_4+0x9a2>
 804fe92:	66 90                	xchg   %ax,%ax
 804fe94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fe98:	89 3c 24             	mov    %edi,(%esp)
 804fe9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 804fe9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 804fea3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804fea7:	b9 a4 87 00 00       	mov    $0x87a4,%ecx
 804feac:	e8 c7 33 00 00       	call   8053278 <__afl_maybe_log>
 804feb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 804feb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 804feb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 804febd:	8b 3c 24             	mov    (%esp),%edi
 804fec0:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              *out++ = (((b64[({if (((in)) && ((in)))  {int lava_255 = 0;
              lava_255 |= ((unsigned char *) (in))[0] << (0*8);lava_255 |= ((unsigned char *) (in))[1] << (1*8);lava_255 |= ((unsigned char *) (in))[2] << (2*8);lava_255 |= ((unsigned char *) (in))[3] << (3*8);lava_set(255,lava_255);
 804fec4:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804fec8:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 804fecc:	c1 e0 18             	shl    $0x18,%eax
 804fecf:	83 ec 08             	sub    $0x8,%esp
          }_Bool kbcieiubweuhc336465782 = isbase64 (in[3]);kbcieiubweuhc336465782;}))
            return_false;

          if (*outleft)
            {
              *out++ = (((b64[({if (((in)) && ((in)))  {int lava_255 = 0;
 804fed2:	8d 6f 01             	lea    0x1(%edi),%ebp
              lava_255 |= ((unsigned char *) (in))[0] << (0*8);lava_255 |= ((unsigned char *) (in))[1] << (1*8);lava_255 |= ((unsigned char *) (in))[2] << (2*8);lava_255 |= ((unsigned char *) (in))[3] << (3*8);lava_set(255,lava_255);
 804fed5:	c1 e1 08             	shl    $0x8,%ecx
 804fed8:	c1 e2 10             	shl    $0x10,%edx
 804fedb:	09 ca                	or     %ecx,%edx
 804fedd:	0f b6 0b             	movzbl (%ebx),%ecx
 804fee0:	09 ca                	or     %ecx,%edx
 804fee2:	09 c2                	or     %eax,%edx
 804fee4:	52                   	push   %edx
 804fee5:	68 ff 00 00 00       	push   $0xff
 804feea:	e8 31 c6 ff ff       	call   804c520 <lava_set>
              int lava_235 = 0;
              lava_235 |= ((unsigned char *) (in))[0] << (0*8);lava_235 |= ((unsigned char *) (in))[1] << (1*8);lava_235 |= ((unsigned char *) (in))[2] << (2*8);lava_235 |= ((unsigned char *) (in))[3] << (3*8);lava_set(235,lava_235);
 804feef:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
 804fef3:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804fef7:	0f b6 0b             	movzbl (%ebx),%ecx
 804fefa:	c1 e6 08             	shl    $0x8,%esi
 804fefd:	c1 e0 10             	shl    $0x10,%eax
 804ff00:	09 f0                	or     %esi,%eax
 804ff02:	09 c1                	or     %eax,%ecx
 804ff04:	58                   	pop    %eax
 804ff05:	5a                   	pop    %edx
 804ff06:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804ff0a:	89 c8                	mov    %ecx,%eax
 804ff0c:	c1 e2 18             	shl    $0x18,%edx
 804ff0f:	09 d0                	or     %edx,%eax
 804ff11:	50                   	push   %eax
 804ff12:	68 eb 00 00 00       	push   $0xeb
 804ff17:	e8 04 c6 ff ff       	call   804c520 <lava_set>
              int lava_276 = 0;
              lava_276 |= ((unsigned char *) (in))[0] << (0*8);lava_276 |= ((unsigned char *) (in))[1] << (1*8);lava_276 |= ((unsigned char *) (in))[2] << (2*8);lava_276 |= ((unsigned char *) (in))[3] << (3*8);lava_set(276,lava_276);
 804ff1c:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804ff20:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 804ff24:	5e                   	pop    %esi
 804ff25:	0f b6 73 03          	movzbl 0x3(%ebx),%esi
 804ff29:	58                   	pop    %eax
 804ff2a:	c1 e1 08             	shl    $0x8,%ecx
 804ff2d:	c1 e2 10             	shl    $0x10,%edx
 804ff30:	09 ca                	or     %ecx,%edx
 804ff32:	0f b6 0b             	movzbl (%ebx),%ecx
 804ff35:	c1 e6 18             	shl    $0x18,%esi
 804ff38:	09 d1                	or     %edx,%ecx
 804ff3a:	89 c8                	mov    %ecx,%eax
 804ff3c:	09 f0                	or     %esi,%eax
 804ff3e:	50                   	push   %eax
 804ff3f:	68 14 01 00 00       	push   $0x114
 804ff44:	e8 d7 c5 ff ff       	call   804c520 <lava_set>
              int lava_790 = 0;
              lava_790 |= ((unsigned char *) (in))[0] << (0*8);lava_790 |= ((unsigned char *) (in))[1] << (1*8);lava_790 |= ((unsigned char *) (in))[2] << (2*8);lava_790 |= ((unsigned char *) (in))[3] << (3*8);lava_set(790,lava_790);
 804ff49:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 804ff4d:	0f b6 73 02          	movzbl 0x2(%ebx),%esi
 804ff51:	58                   	pop    %eax
 804ff52:	5a                   	pop    %edx
 804ff53:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804ff57:	c1 e1 08             	shl    $0x8,%ecx
 804ff5a:	c1 e6 10             	shl    $0x10,%esi
 804ff5d:	09 ce                	or     %ecx,%esi
 804ff5f:	0f b6 0b             	movzbl (%ebx),%ecx
 804ff62:	c1 e2 18             	shl    $0x18,%edx
 804ff65:	09 f1                	or     %esi,%ecx
 804ff67:	89 c8                	mov    %ecx,%eax
 804ff69:	09 d0                	or     %edx,%eax
 804ff6b:	50                   	push   %eax
 804ff6c:	68 16 03 00 00       	push   $0x316
 804ff71:	e8 aa c5 ff ff       	call   804c520 <lava_set>
              }unsigned char kbcieiubweuhc861021530 = to_uchar (in[2]);kbcieiubweuhc861021530;})] << 6) & 0xc0)
                        | b64[({if (((in)) && ((in)))  {int lava_278 = 0;
                        lava_278 |= ((unsigned char *) (in))[0] << (0*8);lava_278 |= ((unsigned char *) (in))[1] << (1*8);lava_278 |= ((unsigned char *) (in))[2] << (2*8);lava_278 |= ((unsigned char *) (in))[3] << (3*8);lava_set(278,lava_278);
 804ff76:	59                   	pop    %ecx
 804ff77:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
          }_Bool kbcieiubweuhc336465782 = isbase64 (in[3]);kbcieiubweuhc336465782;}))
            return_false;

          if (*outleft)
            {
              *out++ = (((b64[({if (((in)) && ((in)))  {int lava_255 = 0;
 804ff7b:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
              lava_276 |= ((unsigned char *) (in))[0] << (0*8);lava_276 |= ((unsigned char *) (in))[1] << (1*8);lava_276 |= ((unsigned char *) (in))[2] << (2*8);lava_276 |= ((unsigned char *) (in))[3] << (3*8);lava_set(276,lava_276);
              int lava_790 = 0;
              lava_790 |= ((unsigned char *) (in))[0] << (0*8);lava_790 |= ((unsigned char *) (in))[1] << (1*8);lava_790 |= ((unsigned char *) (in))[2] << (2*8);lava_790 |= ((unsigned char *) (in))[3] << (3*8);lava_set(790,lava_790);
              }unsigned char kbcieiubweuhc861021530 = to_uchar (in[2]);kbcieiubweuhc861021530;})] << 6) & 0xc0)
                        | b64[({if (((in)) && ((in)))  {int lava_278 = 0;
                        lava_278 |= ((unsigned char *) (in))[0] << (0*8);lava_278 |= ((unsigned char *) (in))[1] << (1*8);lava_278 |= ((unsigned char *) (in))[2] << (2*8);lava_278 |= ((unsigned char *) (in))[3] << (3*8);lava_set(278,lava_278);
 804ff7f:	5a                   	pop    %edx
 804ff80:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804ff84:	c1 e1 08             	shl    $0x8,%ecx
              lava_235 |= ((unsigned char *) (in))[0] << (0*8);lava_235 |= ((unsigned char *) (in))[1] << (1*8);lava_235 |= ((unsigned char *) (in))[2] << (2*8);lava_235 |= ((unsigned char *) (in))[3] << (3*8);lava_set(235,lava_235);
              int lava_276 = 0;
              lava_276 |= ((unsigned char *) (in))[0] << (0*8);lava_276 |= ((unsigned char *) (in))[1] << (1*8);lava_276 |= ((unsigned char *) (in))[2] << (2*8);lava_276 |= ((unsigned char *) (in))[3] << (3*8);lava_set(276,lava_276);
              int lava_790 = 0;
              lava_790 |= ((unsigned char *) (in))[0] << (0*8);lava_790 |= ((unsigned char *) (in))[1] << (1*8);lava_790 |= ((unsigned char *) (in))[2] << (2*8);lava_790 |= ((unsigned char *) (in))[3] << (3*8);lava_set(790,lava_790);
              }unsigned char kbcieiubweuhc861021530 = to_uchar (in[2]);kbcieiubweuhc861021530;})] << 6) & 0xc0)
 804ff87:	0f be b0 c0 36 06 08 	movsbl 0x80636c0(%eax),%esi
                        | b64[({if (((in)) && ((in)))  {int lava_278 = 0;
                        lava_278 |= ((unsigned char *) (in))[0] << (0*8);lava_278 |= ((unsigned char *) (in))[1] << (1*8);lava_278 |= ((unsigned char *) (in))[2] << (2*8);lava_278 |= ((unsigned char *) (in))[3] << (3*8);lava_set(278,lava_278);
 804ff8e:	c1 e2 18             	shl    $0x18,%edx
 804ff91:	09 ca                	or     %ecx,%edx
 804ff93:	0f b6 0b             	movzbl (%ebx),%ecx
              lava_235 |= ((unsigned char *) (in))[0] << (0*8);lava_235 |= ((unsigned char *) (in))[1] << (1*8);lava_235 |= ((unsigned char *) (in))[2] << (2*8);lava_235 |= ((unsigned char *) (in))[3] << (3*8);lava_set(235,lava_235);
              int lava_276 = 0;
              lava_276 |= ((unsigned char *) (in))[0] << (0*8);lava_276 |= ((unsigned char *) (in))[1] << (1*8);lava_276 |= ((unsigned char *) (in))[2] << (2*8);lava_276 |= ((unsigned char *) (in))[3] << (3*8);lava_set(276,lava_276);
              int lava_790 = 0;
              lava_790 |= ((unsigned char *) (in))[0] << (0*8);lava_790 |= ((unsigned char *) (in))[1] << (1*8);lava_790 |= ((unsigned char *) (in))[2] << (2*8);lava_790 |= ((unsigned char *) (in))[3] << (3*8);lava_set(790,lava_790);
              }unsigned char kbcieiubweuhc861021530 = to_uchar (in[2]);kbcieiubweuhc861021530;})] << 6) & 0xc0)
 804ff96:	c1 e6 06             	shl    $0x6,%esi
 804ff99:	09 ca                	or     %ecx,%edx
                        | b64[({if (((in)) && ((in)))  {int lava_278 = 0;
                        lava_278 |= ((unsigned char *) (in))[0] << (0*8);lava_278 |= ((unsigned char *) (in))[1] << (1*8);lava_278 |= ((unsigned char *) (in))[2] << (2*8);lava_278 |= ((unsigned char *) (in))[3] << (3*8);lava_set(278,lava_278);
 804ff9b:	c1 e0 10             	shl    $0x10,%eax
 804ff9e:	09 c2                	or     %eax,%edx
 804ffa0:	52                   	push   %edx
 804ffa1:	68 16 01 00 00       	push   $0x116
 804ffa6:	e8 75 c5 ff ff       	call   804c520 <lava_set>
                        int lava_792 = 0;
                        lava_792 |= ((unsigned char *) (in))[0] << (0*8);lava_792 |= ((unsigned char *) (in))[1] << (1*8);lava_792 |= ((unsigned char *) (in))[2] << (2*8);lava_792 |= ((unsigned char *) (in))[3] << (3*8);lava_set(792,lava_792);
 804ffab:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 804ffaf:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 804ffb3:	0f b6 0b             	movzbl (%ebx),%ecx
 804ffb6:	c1 e2 08             	shl    $0x8,%edx
 804ffb9:	c1 e0 10             	shl    $0x10,%eax
 804ffbc:	09 d0                	or     %edx,%eax
 804ffbe:	09 c1                	or     %eax,%ecx
 804ffc0:	58                   	pop    %eax
 804ffc1:	5a                   	pop    %edx
 804ffc2:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 804ffc6:	89 c8                	mov    %ecx,%eax
 804ffc8:	c1 e2 18             	shl    $0x18,%edx
 804ffcb:	09 d0                	or     %edx,%eax
 804ffcd:	50                   	push   %eax
 804ffce:	68 18 03 00 00       	push   $0x318
 804ffd3:	e8 48 c5 ff ff       	call   804c520 <lava_set>
          }_Bool kbcieiubweuhc336465782 = isbase64 (in[3]);kbcieiubweuhc336465782;}))
            return_false;

          if (*outleft)
            {
              *out++ = (((b64[({if (((in)) && ((in)))  {int lava_255 = 0;
 804ffd8:	0f b6 4b 03          	movzbl 0x3(%ebx),%ecx
 804ffdc:	89 f3                	mov    %esi,%ebx
 804ffde:	0a 99 c0 36 06 08    	or     0x80636c0(%ecx),%bl
 804ffe4:	88 1f                	mov    %bl,(%edi)
                        | b64[({if (((in)) && ((in)))  {int lava_278 = 0;
                        lava_278 |= ((unsigned char *) (in))[0] << (0*8);lava_278 |= ((unsigned char *) (in))[1] << (1*8);lava_278 |= ((unsigned char *) (in))[2] << (2*8);lava_278 |= ((unsigned char *) (in))[3] << (3*8);lava_set(278,lava_278);
                        int lava_792 = 0;
                        lava_792 |= ((unsigned char *) (in))[0] << (0*8);lava_792 |= ((unsigned char *) (in))[1] << (1*8);lava_792 |= ((unsigned char *) (in))[2] << (2*8);lava_792 |= ((unsigned char *) (in))[3] << (3*8);lava_set(792,lava_792);
                        }unsigned char kbcieiubweuhc278722862 = to_uchar (in[3]);kbcieiubweuhc278722862;})]);
              --*outleft;
 804ffe6:	8b 7c 24 40          	mov    0x40(%esp),%edi
 804ffea:	83 c4 10             	add    $0x10,%esp
 804ffed:	83 2f 01             	subl   $0x1,(%edi)
          }_Bool kbcieiubweuhc336465782 = isbase64 (in[3]);kbcieiubweuhc336465782;}))
            return_false;

          if (*outleft)
            {
              *out++ = (((b64[({if (((in)) && ((in)))  {int lava_255 = 0;
 804fff0:	89 ef                	mov    %ebp,%edi
 804fff2:	66 90                	xchg   %ax,%ax
              --*outleft;
            }
        }
    }

  *outp = out;
 804fff4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 804fff8:	89 3c 24             	mov    %edi,(%esp)
 804fffb:	89 54 24 04          	mov    %edx,0x4(%esp)
 804ffff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050003:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050007:	b9 28 05 00 00       	mov    $0x528,%ecx
 805000c:	e8 67 32 00 00       	call   8053278 <__afl_maybe_log>
 8050011:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050015:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050019:	8b 54 24 04          	mov    0x4(%esp),%edx
 805001d:	8b 3c 24             	mov    (%esp),%edi
 8050020:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050024:	8b 6c 24 08          	mov    0x8(%esp),%ebp
  return true;
 8050028:	b8 01 00 00 00       	mov    $0x1,%eax
              --*outleft;
            }
        }
    }

  *outp = out;
 805002d:	89 7d 00             	mov    %edi,0x0(%ebp)
  return true;
}
 8050030:	83 c4 1c             	add    $0x1c,%esp
 8050033:	5b                   	pop    %ebx
 8050034:	5e                   	pop    %esi
 8050035:	5f                   	pop    %edi
 8050036:	5d                   	pop    %ebp
 8050037:	c3                   	ret    
 8050038:	90                   	nop
 8050039:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      if (inlen == 3)
        return_false;

      if (in[3] == '=')
        {
          if (inlen != 4)
 8050040:	83 fe 04             	cmp    $0x4,%esi
 8050043:	74 ad                	je     804fff2 <decode_4+0x9a2>
 8050045:	8d 76 00             	lea    0x0(%esi),%esi
 8050048:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805004c:	89 3c 24             	mov    %edi,(%esp)
 805004f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050053:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050057:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805005b:	b9 49 ac 00 00       	mov    $0xac49,%ecx
 8050060:	e8 13 32 00 00       	call   8053278 <__afl_maybe_log>
 8050065:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050069:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805006d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050071:	8b 3c 24             	mov    (%esp),%edi
 8050074:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050078:	90                   	nop
 8050079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
          int lava_788 = 0;
          lava_788 |= ((unsigned char *) (in))[0] << (0*8);lava_788 |= ((unsigned char *) (in))[1] << (1*8);lava_788 |= ((unsigned char *) (in))[2] << (2*8);lava_788 |= ((unsigned char *) (in))[3] << (3*8);lava_set(788,lava_788);
          int lava_566 = 0;
          lava_566 |= ((unsigned char *) (in))[0] << (0*8);lava_566 |= ((unsigned char *) (in))[1] << (1*8);lava_566 |= ((unsigned char *) (in))[2] << (2*8);lava_566 |= ((unsigned char *) (in))[3] << (3*8);lava_set(566,lava_566);
          }_Bool kbcieiubweuhc336465782 = isbase64 (in[3]);kbcieiubweuhc336465782;}))
            return_false;
 8050080:	8b 74 24 08          	mov    0x8(%esp),%esi
 8050084:	89 3e                	mov    %edi,(%esi)
 8050086:	66 90                	xchg   %ax,%ax
        }
    }

  *outp = out;
  return true;
}
 8050088:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805008c:	89 3c 24             	mov    %edi,(%esp)
 805008f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050093:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050097:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805009b:	b9 cb 86 00 00       	mov    $0x86cb,%ecx
 80500a0:	e8 d3 31 00 00       	call   8053278 <__afl_maybe_log>
 80500a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80500a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80500ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80500b1:	8b 3c 24             	mov    (%esp),%edi
 80500b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80500b8:	83 c4 1c             	add    $0x1c,%esp
          int lava_788 = 0;
          lava_788 |= ((unsigned char *) (in))[0] << (0*8);lava_788 |= ((unsigned char *) (in))[1] << (1*8);lava_788 |= ((unsigned char *) (in))[2] << (2*8);lava_788 |= ((unsigned char *) (in))[3] << (3*8);lava_set(788,lava_788);
          int lava_566 = 0;
          lava_566 |= ((unsigned char *) (in))[0] << (0*8);lava_566 |= ((unsigned char *) (in))[1] << (1*8);lava_566 |= ((unsigned char *) (in))[2] << (2*8);lava_566 |= ((unsigned char *) (in))[3] << (3*8);lava_set(566,lava_566);
          }_Bool kbcieiubweuhc336465782 = isbase64 (in[3]);kbcieiubweuhc336465782;}))
            return_false;
 80500bb:	31 c0                	xor    %eax,%eax
        }
    }

  *outp = out;
  return true;
}
 80500bd:	5b                   	pop    %ebx
 80500be:	5e                   	pop    %esi
 80500bf:	5f                   	pop    %edi
 80500c0:	5d                   	pop    %ebp
 80500c1:	c3                   	ret    
 80500c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  if (inlen == 2)
    return_false;

  if (in[2] == '=')
    {
      if (inlen != 4)
 80500c8:	83 fe 04             	cmp    $0x4,%esi
 80500cb:	75 b3                	jne    8050080 <decode_4+0xa30>
 80500cd:	8d 76 00             	lea    0x0(%esi),%esi
 80500d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80500d4:	89 3c 24             	mov    %edi,(%esp)
 80500d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80500db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80500df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80500e3:	b9 18 4e 00 00       	mov    $0x4e18,%ecx
 80500e8:	e8 8b 31 00 00       	call   8053278 <__afl_maybe_log>
 80500ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80500f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80500f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80500f9:	8b 3c 24             	mov    (%esp),%edi
 80500fc:	8d 64 24 10          	lea    0x10(%esp),%esp
        return_false;

      if (in[3] != '=')
 8050100:	80 7b 03 3d          	cmpb   $0x3d,0x3(%ebx)
 8050104:	0f 85 76 ff ff ff    	jne    8050080 <decode_4+0xa30>
 805010a:	66 90                	xchg   %ax,%ax
 805010c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050110:	89 3c 24             	mov    %edi,(%esp)
 8050113:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050117:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805011b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805011f:	b9 ba 91 00 00       	mov    $0x91ba,%ecx
 8050124:	e8 4f 31 00 00       	call   8053278 <__afl_maybe_log>
 8050129:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805012d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050131:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050135:	8b 3c 24             	mov    (%esp),%edi
 8050138:	8d 64 24 10          	lea    0x10(%esp),%esp
 805013c:	e9 b1 fe ff ff       	jmp    804fff2 <decode_4+0x9a2>
 8050141:	eb 0d                	jmp    8050150 <base64_encode>
 8050143:	90                   	nop
 8050144:	90                   	nop
 8050145:	90                   	nop
 8050146:	90                   	nop
 8050147:	90                   	nop
 8050148:	90                   	nop
 8050149:	90                   	nop
 805014a:	90                   	nop
 805014b:	90                   	nop
 805014c:	90                   	nop
 805014d:	90                   	nop
 805014e:	90                   	nop
 805014f:	90                   	nop

08050150 <base64_encode>:
   possible.  If OUTLEN is larger than BASE64_LENGTH(INLEN), also zero
   terminate the output buffer. */
void
base64_encode (const char *restrict in, size_t inlen,
               char *restrict out, size_t outlen)
{
 8050150:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050154:	89 3c 24             	mov    %edi,(%esp)
 8050157:	89 54 24 04          	mov    %edx,0x4(%esp)
 805015b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805015f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050163:	b9 ce 74 00 00       	mov    $0x74ce,%ecx
 8050168:	e8 0b 31 00 00       	call   8053278 <__afl_maybe_log>
 805016d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050171:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050175:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050179:	8b 3c 24             	mov    (%esp),%edi
 805017c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050180:	55                   	push   %ebp
 8050181:	57                   	push   %edi
 8050182:	56                   	push   %esi
 8050183:	53                   	push   %ebx
 8050184:	83 ec 08             	sub    $0x8,%esp
 8050187:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 805018b:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
 805018f:	8b 74 24 20          	mov    0x20(%esp),%esi
     the encoded inlen bytes.  The inlen constraints (of corresponding
     to outlen, and being a multiple of 3) can change at runtime
     at the end of input.  However the common case when reading
     large inputs is to have both constraints satisfied, so we depend
     on both in base_encode_fast().  */
  if (outlen % 4 == 0 && inlen == outlen / 4 * 3)
 8050193:	f6 c1 03             	test   $0x3,%cl
 8050196:	75 70                	jne    8050208 <base64_encode+0xb8>
 8050198:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805019c:	89 3c 24             	mov    %edi,(%esp)
 805019f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80501a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80501a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80501ab:	b9 c7 fe 00 00       	mov    $0xfec7,%ecx
 80501b0:	e8 c3 30 00 00       	call   8053278 <__afl_maybe_log>
 80501b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80501b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80501bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80501c1:	8b 3c 24             	mov    (%esp),%edi
 80501c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80501c8:	89 c8                	mov    %ecx,%eax
 80501ca:	c1 e8 02             	shr    $0x2,%eax
 80501cd:	8d 14 40             	lea    (%eax,%eax,2),%edx
 80501d0:	39 f2                	cmp    %esi,%edx
 80501d2:	0f 84 4d 05 00 00    	je     8050725 <base64_encode+0x5d5>
 80501d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80501dc:	89 3c 24             	mov    %edi,(%esp)
 80501df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80501e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80501e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80501eb:	b9 de 87 00 00       	mov    $0x87de,%ecx
 80501f0:	e8 83 30 00 00       	call   8053278 <__afl_maybe_log>
 80501f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80501f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80501fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050201:	8b 3c 24             	mov    (%esp),%edi
 8050204:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050208:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805020c:	89 3c 24             	mov    %edi,(%esp)
 805020f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050213:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050217:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805021b:	b9 57 46 00 00       	mov    $0x4657,%ecx
 8050220:	e8 53 30 00 00       	call   8053278 <__afl_maybe_log>
 8050225:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050229:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805022d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050231:	8b 3c 24             	mov    (%esp),%edi
 8050234:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050238:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805023c:	8d 69 fc             	lea    -0x4(%ecx),%ebp
    {
      base64_encode_fast (in, inlen, out);
      return;
    }

  while (inlen && outlen)
 805023f:	85 c9                	test   %ecx,%ecx
 8050241:	89 2c 24             	mov    %ebp,(%esp)
 8050244:	8d 53 04             	lea    0x4(%ebx),%edx
 8050247:	8d 42 fc             	lea    -0x4(%edx),%eax
 805024a:	0f 84 e4 03 00 00    	je     8050634 <base64_encode+0x4e4>
 8050250:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050254:	89 3c 24             	mov    %edi,(%esp)
 8050257:	89 54 24 04          	mov    %edx,0x4(%esp)
 805025b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805025f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050263:	b9 23 22 00 00       	mov    $0x2223,%ecx
 8050268:	e8 0b 30 00 00       	call   8053278 <__afl_maybe_log>
 805026d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050271:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050275:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050279:	8b 3c 24             	mov    (%esp),%edi
 805027c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050280:	85 f6                	test   %esi,%esi
 8050282:	0f 84 ac 03 00 00    	je     8050634 <base64_encode+0x4e4>
 8050288:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805028c:	89 3c 24             	mov    %edi,(%esp)
 805028f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050293:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050297:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805029b:	b9 f4 00 00 00       	mov    $0xf4,%ecx
 80502a0:	e8 d3 2f 00 00       	call   8053278 <__afl_maybe_log>
 80502a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80502a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80502ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80502b1:	8b 3c 24             	mov    (%esp),%edi
 80502b4:	8d 64 24 10          	lea    0x10(%esp),%esp

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 80502b8:	0f b6 07             	movzbl (%edi),%eax
      return;
    }

  while (inlen && outlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 80502bb:	89 c3                	mov    %eax,%ebx
 80502bd:	c0 eb 02             	shr    $0x2,%bl
      if (!--outlen)
 80502c0:	83 f9 01             	cmp    $0x1,%ecx
      return;
    }

  while (inlen && outlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 80502c3:	0f b6 eb             	movzbl %bl,%ebp
 80502c6:	0f b6 9d c0 37 06 08 	movzbl 0x80637c0(%ebp),%ebx
 80502cd:	88 5a fc             	mov    %bl,-0x4(%edx)
      if (!--outlen)
 80502d0:	0f 84 c5 03 00 00    	je     805069b <base64_encode+0x54b>
 80502d6:	66 90                	xchg   %ax,%ax
 80502d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80502dc:	89 3c 24             	mov    %edi,(%esp)
 80502df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80502e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80502e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80502eb:	b9 7f 94 00 00       	mov    $0x947f,%ecx
 80502f0:	e8 83 2f 00 00       	call   8053278 <__afl_maybe_log>
 80502f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80502f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80502fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050301:	8b 3c 24             	mov    (%esp),%edi
 8050304:	8d 64 24 10          	lea    0x10(%esp),%esp
        break;
      *out++ = b64c[((to_uchar (in[0]) << 4)
 8050308:	c1 e0 04             	shl    $0x4,%eax
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
 805030b:	83 fe 01             	cmp    $0x1,%esi
  while (inlen && outlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      if (!--outlen)
        break;
      *out++ = b64c[((to_uchar (in[0]) << 4)
 805030e:	89 c5                	mov    %eax,%ebp
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
 8050310:	0f 84 aa 01 00 00    	je     80504c0 <base64_encode+0x370>
 8050316:	66 90                	xchg   %ax,%ax
 8050318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805031c:	89 3c 24             	mov    %edi,(%esp)
 805031f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805032b:	b9 a3 81 00 00       	mov    $0x81a3,%ecx
 8050330:	e8 43 2f 00 00       	call   8053278 <__afl_maybe_log>
 8050335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805033d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050341:	8b 3c 24             	mov    (%esp),%edi
 8050344:	8d 64 24 10          	lea    0x10(%esp),%esp

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 8050348:	0f b6 5f 01          	movzbl 0x1(%edi),%ebx
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      if (!--outlen)
        break;
      *out++ = b64c[((to_uchar (in[0]) << 4)
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
 805034c:	89 d8                	mov    %ebx,%eax
 805034e:	c0 e8 04             	shr    $0x4,%al
 8050351:	01 e8                	add    %ebp,%eax
                      & 0x3f];
 8050353:	83 e0 3f             	and    $0x3f,%eax
      if (!--outlen)
 8050356:	83 f9 02             	cmp    $0x2,%ecx
  while (inlen && outlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      if (!--outlen)
        break;
      *out++ = b64c[((to_uchar (in[0]) << 4)
 8050359:	0f b6 80 c0 37 06 08 	movzbl 0x80637c0(%eax),%eax
 8050360:	88 42 fd             	mov    %al,-0x3(%edx)
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
                      & 0x3f];
      if (!--outlen)
 8050363:	0f 84 32 03 00 00    	je     805069b <base64_encode+0x54b>
 8050369:	8d 76 00             	lea    0x0(%esi),%esi
 805036c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050370:	89 3c 24             	mov    %edi,(%esp)
 8050373:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050377:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805037b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805037f:	b9 39 9b 00 00       	mov    $0x9b39,%ecx
 8050384:	e8 ef 2e 00 00       	call   8053278 <__afl_maybe_log>
 8050389:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805038d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050391:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050395:	8b 3c 24             	mov    (%esp),%edi
 8050398:	8d 64 24 10          	lea    0x10(%esp),%esp
        break;
      *out++ =
        (inlen
         ? b64c[((to_uchar (in[1]) << 2)
 805039c:	0f b6 eb             	movzbl %bl,%ebp
 805039f:	c1 e5 02             	shl    $0x2,%ebp
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
 80503a2:	83 fe 02             	cmp    $0x2,%esi
 80503a5:	0f 84 2d 03 00 00    	je     80506d8 <base64_encode+0x588>
 80503ab:	90                   	nop
 80503ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80503b0:	89 3c 24             	mov    %edi,(%esp)
 80503b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80503b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80503bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80503bf:	b9 be 63 00 00       	mov    $0x63be,%ecx
 80503c4:	e8 af 2e 00 00       	call   8053278 <__afl_maybe_log>
 80503c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80503cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80503d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80503d5:	8b 3c 24             	mov    (%esp),%edi
 80503d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80503dc:	0f b6 5f 02          	movzbl 0x2(%edi),%ebx
 80503e0:	89 d8                	mov    %ebx,%eax
 80503e2:	c0 e8 06             	shr    $0x6,%al
 80503e5:	01 e8                	add    %ebp,%eax
                  & 0x3f]
 80503e7:	83 e0 3f             	and    $0x3f,%eax
         : '=');
      if (!--outlen)
 80503ea:	83 f9 03             	cmp    $0x3,%ecx
      *out++ = b64c[((to_uchar (in[0]) << 4)
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
                      & 0x3f];
      if (!--outlen)
        break;
      *out++ =
 80503ed:	0f b6 80 c0 37 06 08 	movzbl 0x80637c0(%eax),%eax
 80503f4:	88 42 fe             	mov    %al,-0x2(%edx)
        (inlen
         ? b64c[((to_uchar (in[1]) << 2)
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
                  & 0x3f]
         : '=');
      if (!--outlen)
 80503f7:	0f 84 9e 02 00 00    	je     805069b <base64_encode+0x54b>
 80503fd:	8d 76 00             	lea    0x0(%esi),%esi
 8050400:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050404:	89 3c 24             	mov    %edi,(%esp)
 8050407:	89 54 24 04          	mov    %edx,0x4(%esp)
 805040b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805040f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050413:	b9 8f b0 00 00       	mov    $0xb08f,%ecx
 8050418:	e8 5b 2e 00 00       	call   8053278 <__afl_maybe_log>
 805041d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050421:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050425:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050429:	8b 3c 24             	mov    (%esp),%edi
 805042c:	8d 64 24 10          	lea    0x10(%esp),%esp
        break;
      *out++ = inlen ? b64c[to_uchar (in[2]) & 0x3f] : '=';
 8050430:	89 dd                	mov    %ebx,%ebp
 8050432:	83 e5 3f             	and    $0x3f,%ebp
      if (!--outlen)
 8050435:	83 3c 24 00          	cmpl   $0x0,(%esp)
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
                  & 0x3f]
         : '=');
      if (!--outlen)
        break;
      *out++ = inlen ? b64c[to_uchar (in[2]) & 0x3f] : '=';
 8050439:	0f b6 9d c0 37 06 08 	movzbl 0x80637c0(%ebp),%ebx
 8050440:	88 5a ff             	mov    %bl,-0x1(%edx)
      if (!--outlen)
 8050443:	0f 84 52 02 00 00    	je     805069b <base64_encode+0x54b>
 8050449:	8d 76 00             	lea    0x0(%esi),%esi
 805044c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050450:	89 3c 24             	mov    %edi,(%esp)
 8050453:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050457:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805045b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805045f:	b9 76 95 00 00       	mov    $0x9576,%ecx
 8050464:	e8 0f 2e 00 00       	call   8053278 <__afl_maybe_log>
 8050469:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805046d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050471:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050475:	8b 3c 24             	mov    (%esp),%edi
 8050478:	8d 64 24 10          	lea    0x10(%esp),%esp
        break;
      if (inlen)
        inlen--;
      if (inlen)
 805047c:	83 ee 03             	sub    $0x3,%esi
 805047f:	0f 84 35 01 00 00    	je     80505ba <base64_encode+0x46a>
 8050485:	8d 76 00             	lea    0x0(%esi),%esi
 8050488:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805048c:	89 3c 24             	mov    %edi,(%esp)
 805048f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050493:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050497:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805049b:	b9 d3 96 00 00       	mov    $0x96d3,%ecx
 80504a0:	e8 d3 2d 00 00       	call   8053278 <__afl_maybe_log>
 80504a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80504a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80504ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80504b1:	8b 3c 24             	mov    (%esp),%edi
 80504b4:	8d 64 24 10          	lea    0x10(%esp),%esp
        in += 3;
 80504b8:	83 c7 03             	add    $0x3,%edi
 80504bb:	e9 fa 00 00 00       	jmp    80505ba <base64_encode+0x46a>
      *out++ = b64c[to_uchar (in[0]) >> 2];
      if (!--outlen)
        break;
      *out++ = b64c[((to_uchar (in[0]) << 4)
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
                      & 0x3f];
 80504c0:	89 c6                	mov    %eax,%esi
 80504c2:	83 e6 3f             	and    $0x3f,%esi
      if (!--outlen)
 80504c5:	83 f9 02             	cmp    $0x2,%ecx
  while (inlen && outlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      if (!--outlen)
        break;
      *out++ = b64c[((to_uchar (in[0]) << 4)
 80504c8:	0f b6 86 c0 37 06 08 	movzbl 0x80637c0(%esi),%eax
 80504cf:	88 42 fd             	mov    %al,-0x3(%edx)
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
                      & 0x3f];
      if (!--outlen)
 80504d2:	0f 84 c3 01 00 00    	je     805069b <base64_encode+0x54b>
 80504d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80504dc:	89 3c 24             	mov    %edi,(%esp)
 80504df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80504e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80504e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80504eb:	b9 ec e4 00 00       	mov    $0xe4ec,%ecx
 80504f0:	e8 83 2d 00 00       	call   8053278 <__afl_maybe_log>
 80504f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80504f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80504fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050501:	8b 3c 24             	mov    (%esp),%edi
 8050504:	8d 64 24 10          	lea    0x10(%esp),%esp
        (inlen
         ? b64c[((to_uchar (in[1]) << 2)
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
                  & 0x3f]
         : '=');
      if (!--outlen)
 8050508:	83 f9 03             	cmp    $0x3,%ecx
      *out++ = b64c[((to_uchar (in[0]) << 4)
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
                      & 0x3f];
      if (!--outlen)
        break;
      *out++ =
 805050b:	c6 42 fe 3d          	movb   $0x3d,-0x2(%edx)
        (inlen
         ? b64c[((to_uchar (in[1]) << 2)
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
                  & 0x3f]
         : '=');
      if (!--outlen)
 805050f:	0f 84 86 01 00 00    	je     805069b <base64_encode+0x54b>
 8050515:	8d 76 00             	lea    0x0(%esi),%esi
 8050518:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805051c:	89 3c 24             	mov    %edi,(%esp)
 805051f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050523:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050527:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805052b:	b9 da 8d 00 00       	mov    $0x8dda,%ecx
 8050530:	e8 43 2d 00 00       	call   8053278 <__afl_maybe_log>
 8050535:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050539:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805053d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050541:	8b 3c 24             	mov    (%esp),%edi
 8050544:	8d 64 24 10          	lea    0x10(%esp),%esp
        break;
      *out++ = inlen ? b64c[to_uchar (in[2]) & 0x3f] : '=';
      if (!--outlen)
 8050548:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805054c:	89 3c 24             	mov    %edi,(%esp)
 805054f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050553:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050557:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805055b:	b9 08 d9 00 00       	mov    $0xd908,%ecx
 8050560:	e8 13 2d 00 00       	call   8053278 <__afl_maybe_log>
 8050565:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050569:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805056d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050571:	8b 3c 24             	mov    (%esp),%edi
 8050574:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050578:	8b 04 24             	mov    (%esp),%eax
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
                  & 0x3f]
         : '=');
      if (!--outlen)
        break;
      *out++ = inlen ? b64c[to_uchar (in[2]) & 0x3f] : '=';
 805057b:	c6 42 ff 3d          	movb   $0x3d,-0x1(%edx)
      if (!--outlen)
 805057f:	85 c0                	test   %eax,%eax
 8050581:	0f 84 14 01 00 00    	je     805069b <base64_encode+0x54b>
 8050587:	90                   	nop
 8050588:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805058c:	89 3c 24             	mov    %edi,(%esp)
 805058f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050593:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050597:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805059b:	b9 e8 36 00 00       	mov    $0x36e8,%ecx
 80505a0:	e8 d3 2c 00 00       	call   8053278 <__afl_maybe_log>
 80505a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80505a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80505ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80505b1:	8b 3c 24             	mov    (%esp),%edi
 80505b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80505b8:	31 f6                	xor    %esi,%esi
 80505ba:	66 90                	xchg   %ax,%ax
 80505bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80505c0:	89 3c 24             	mov    %edi,(%esp)
 80505c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80505c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80505cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80505cf:	b9 9b d7 00 00       	mov    $0xd79b,%ecx
 80505d4:	e8 9f 2c 00 00       	call   8053278 <__afl_maybe_log>
 80505d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80505dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80505e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80505e5:	8b 3c 24             	mov    (%esp),%edi
 80505e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80505ec:	83 e9 04             	sub    $0x4,%ecx
 80505ef:	83 c2 04             	add    $0x4,%edx
 80505f2:	83 2c 24 04          	subl   $0x4,(%esp)
    {
      base64_encode_fast (in, inlen, out);
      return;
    }

  while (inlen && outlen)
 80505f6:	85 c9                	test   %ecx,%ecx
 80505f8:	8d 42 fc             	lea    -0x4(%edx),%eax
 80505fb:	0f 85 7f fc ff ff    	jne    8050280 <base64_encode+0x130>
 8050601:	8d 76 00             	lea    0x0(%esi),%esi
 8050604:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050608:	89 3c 24             	mov    %edi,(%esp)
 805060b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805060f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050613:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050617:	b9 42 20 00 00       	mov    $0x2042,%ecx
 805061c:	e8 57 2c 00 00       	call   8053278 <__afl_maybe_log>
 8050621:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050625:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050629:	8b 54 24 04          	mov    0x4(%esp),%edx
 805062d:	8b 3c 24             	mov    (%esp),%edi
 8050630:	8d 64 24 10          	lea    0x10(%esp),%esp
        inlen--;
      if (inlen)
        in += 3;
    }

  if (outlen)
 8050634:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050638:	89 3c 24             	mov    %edi,(%esp)
 805063b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805063f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050643:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050647:	b9 30 3e 00 00       	mov    $0x3e30,%ecx
 805064c:	e8 27 2c 00 00       	call   8053278 <__afl_maybe_log>
 8050651:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050655:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050659:	8b 54 24 04          	mov    0x4(%esp),%edx
 805065d:	8b 3c 24             	mov    (%esp),%edi
 8050660:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050664:	85 c9                	test   %ecx,%ecx
 8050666:	74 33                	je     805069b <base64_encode+0x54b>
 8050668:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805066c:	89 3c 24             	mov    %edi,(%esp)
 805066f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050673:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050677:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805067b:	b9 b3 fa 00 00       	mov    $0xfab3,%ecx
 8050680:	e8 f3 2b 00 00       	call   8053278 <__afl_maybe_log>
 8050685:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050689:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805068d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050691:	8b 3c 24             	mov    (%esp),%edi
 8050694:	8d 64 24 10          	lea    0x10(%esp),%esp
    *out = '\0';
 8050698:	c6 00 00             	movb   $0x0,(%eax)
 805069b:	90                   	nop
}
 805069c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80506a0:	89 3c 24             	mov    %edi,(%esp)
 80506a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80506a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80506ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80506af:	b9 49 59 00 00       	mov    $0x5949,%ecx
 80506b4:	e8 bf 2b 00 00       	call   8053278 <__afl_maybe_log>
 80506b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80506bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80506c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80506c5:	8b 3c 24             	mov    (%esp),%edi
 80506c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80506cc:	83 c4 08             	add    $0x8,%esp
 80506cf:	5b                   	pop    %ebx
 80506d0:	5e                   	pop    %esi
 80506d1:	5f                   	pop    %edi
 80506d2:	5d                   	pop    %ebp
 80506d3:	c3                   	ret    
 80506d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        break;
      *out++ =
        (inlen
         ? b64c[((to_uchar (in[1]) << 2)
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
                  & 0x3f]
 80506d8:	89 ee                	mov    %ebp,%esi
 80506da:	83 e6 3f             	and    $0x3f,%esi
         : '=');
      if (!--outlen)
 80506dd:	83 f9 03             	cmp    $0x3,%ecx
      *out++ = b64c[((to_uchar (in[0]) << 4)
                       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
                      & 0x3f];
      if (!--outlen)
        break;
      *out++ =
 80506e0:	0f b6 9e c0 37 06 08 	movzbl 0x80637c0(%esi),%ebx
 80506e7:	88 5a fe             	mov    %bl,-0x2(%edx)
        (inlen
         ? b64c[((to_uchar (in[1]) << 2)
                   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
                  & 0x3f]
         : '=');
      if (!--outlen)
 80506ea:	0f 85 58 fe ff ff    	jne    8050548 <base64_encode+0x3f8>
 80506f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80506f4:	89 3c 24             	mov    %edi,(%esp)
 80506f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80506fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80506ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050703:	b9 e0 b7 00 00       	mov    $0xb7e0,%ecx
 8050708:	e8 6b 2b 00 00       	call   8053278 <__afl_maybe_log>
 805070d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050711:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050715:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050719:	8b 3c 24             	mov    (%esp),%edi
 805071c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050720:	e9 76 ff ff ff       	jmp    805069b <base64_encode+0x54b>
 8050725:	8d 76 00             	lea    0x0(%esi),%esi
   to be of length >= BASE64_LENGTH(INLEN), and INLEN needs to be
   a multiple of 3.  */
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
 8050728:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805072c:	89 3c 24             	mov    %edi,(%esp)
 805072f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050733:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050737:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805073b:	b9 ac d7 00 00       	mov    $0xd7ac,%ecx
 8050740:	e8 33 2b 00 00       	call   8053278 <__afl_maybe_log>
 8050745:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050749:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805074d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050751:	8b 3c 24             	mov    (%esp),%edi
 8050754:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050758:	85 d2                	test   %edx,%edx
 805075a:	8d 2c 17             	lea    (%edi,%edx,1),%ebp
 805075d:	0f 84 38 ff ff ff    	je     805069b <base64_encode+0x54b>
 8050763:	90                   	nop
 8050764:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050768:	89 3c 24             	mov    %edi,(%esp)
 805076b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805076f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050773:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050777:	b9 ad d0 00 00       	mov    $0xd0ad,%ecx
 805077c:	e8 f7 2a 00 00       	call   8053278 <__afl_maybe_log>
 8050781:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050785:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050789:	8b 54 24 04          	mov    0x4(%esp),%edx
 805078d:	8b 3c 24             	mov    (%esp),%edi
 8050790:	8d 64 24 10          	lea    0x10(%esp),%esp

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 8050794:	0f b6 07             	movzbl (%edi),%eax
 8050797:	89 e9                	mov    %ebp,%ecx
 8050799:	29 f9                	sub    %edi,%ecx
 805079b:	83 e9 03             	sub    $0x3,%ecx
 805079e:	83 e1 01             	and    $0x1,%ecx
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 80507a1:	89 c2                	mov    %eax,%edx
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 80507a3:	c1 e0 04             	shl    $0x4,%eax
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 80507a6:	c0 ea 02             	shr    $0x2,%dl
 80507a9:	0f b6 f2             	movzbl %dl,%esi

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 80507ac:	0f b6 57 01          	movzbl 0x1(%edi),%edx
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 80507b0:	0f b6 9e c0 37 06 08 	movzbl 0x80637c0(%esi),%ebx
 80507b7:	8b 74 24 24          	mov    0x24(%esp),%esi
 80507bb:	88 1e                	mov    %bl,(%esi)
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 80507bd:	89 d3                	mov    %edx,%ebx
 80507bf:	c0 eb 04             	shr    $0x4,%bl
 80507c2:	01 d8                	add    %ebx,%eax

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 80507c4:	0f b6 5f 02          	movzbl 0x2(%edi),%ebx
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 80507c8:	83 e0 3f             	and    $0x3f,%eax
 80507cb:	0f b6 80 c0 37 06 08 	movzbl 0x80637c0(%eax),%eax
 80507d2:	88 46 01             	mov    %al,0x1(%esi)
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80507d5:	89 d8                	mov    %ebx,%eax
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 80507d7:	83 e3 3f             	and    $0x3f,%ebx
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80507da:	c0 e8 06             	shr    $0x6,%al
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 80507dd:	0f b6 9b c0 37 06 08 	movzbl 0x80637c0(%ebx),%ebx
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80507e4:	8d 14 90             	lea    (%eax,%edx,4),%edx
 80507e7:	83 e2 3f             	and    $0x3f,%edx
 80507ea:	0f b6 82 c0 37 06 08 	movzbl 0x80637c0(%edx),%eax
 80507f1:	8d 56 04             	lea    0x4(%esi),%edx
 80507f4:	88 46 02             	mov    %al,0x2(%esi)
      *out++ = b64c[to_uchar (in[2]) & 0x3f];

      inlen -= 3;
      in += 3;
 80507f7:	8d 47 03             	lea    0x3(%edi),%eax
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 80507fa:	88 5a ff             	mov    %bl,-0x1(%edx)
   to be of length >= BASE64_LENGTH(INLEN), and INLEN needs to be
   a multiple of 3.  */
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
 80507fd:	39 e8                	cmp    %ebp,%eax
 80507ff:	0f 84 96 fe ff ff    	je     805069b <base64_encode+0x54b>
 8050805:	8d 76 00             	lea    0x0(%esi),%esi
 8050808:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805080c:	89 3c 24             	mov    %edi,(%esp)
 805080f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050813:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050817:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805081b:	b9 a6 2b 00 00       	mov    $0x2ba6,%ecx
 8050820:	e8 53 2a 00 00       	call   8053278 <__afl_maybe_log>
 8050825:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050829:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805082d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050831:	8b 3c 24             	mov    (%esp),%edi
 8050834:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050838:	85 c9                	test   %ecx,%ecx
 805083a:	0f 84 d0 00 00 00    	je     8050910 <base64_encode+0x7c0>
 8050840:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050844:	89 3c 24             	mov    %edi,(%esp)
 8050847:	89 54 24 04          	mov    %edx,0x4(%esp)
 805084b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805084f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050853:	b9 53 11 00 00       	mov    $0x1153,%ecx
 8050858:	e8 1b 2a 00 00       	call   8053278 <__afl_maybe_log>
 805085d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050861:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050865:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050869:	8b 3c 24             	mov    (%esp),%edi
 805086c:	8d 64 24 10          	lea    0x10(%esp),%esp

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 8050870:	0f b6 08             	movzbl (%eax),%ecx
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 8050873:	89 cb                	mov    %ecx,%ebx
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 8050875:	c1 e1 04             	shl    $0x4,%ecx
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 8050878:	c0 eb 02             	shr    $0x2,%bl
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 805087b:	89 0c 24             	mov    %ecx,(%esp)
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 805087e:	0f b6 f3             	movzbl %bl,%esi
 8050881:	0f b6 9e c0 37 06 08 	movzbl 0x80637c0(%esi),%ebx
 8050888:	88 1a                	mov    %bl,(%edx)

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 805088a:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 805088e:	89 d9                	mov    %ebx,%ecx
 8050890:	c0 e9 04             	shr    $0x4,%cl
 8050893:	89 ce                	mov    %ecx,%esi
 8050895:	8b 0c 24             	mov    (%esp),%ecx
 8050898:	01 f1                	add    %esi,%ecx
 805089a:	83 e1 3f             	and    $0x3f,%ecx
 805089d:	0f b6 89 c0 37 06 08 	movzbl 0x80637c0(%ecx),%ecx
 80508a4:	88 4a 01             	mov    %cl,0x1(%edx)

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 80508a7:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80508ab:	89 c8                	mov    %ecx,%eax
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 80508ad:	83 e1 3f             	and    $0x3f,%ecx
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80508b0:	c0 e8 06             	shr    $0x6,%al
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 80508b3:	0f b6 89 c0 37 06 08 	movzbl 0x80637c0(%ecx),%ecx
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80508ba:	8d 1c 98             	lea    (%eax,%ebx,4),%ebx
 80508bd:	83 e3 3f             	and    $0x3f,%ebx
 80508c0:	0f b6 83 c0 37 06 08 	movzbl 0x80637c0(%ebx),%eax
 80508c7:	88 42 02             	mov    %al,0x2(%edx)
 80508ca:	8b 54 24 24          	mov    0x24(%esp),%edx
      *out++ = b64c[to_uchar (in[2]) & 0x3f];

      inlen -= 3;
      in += 3;
 80508ce:	8d 47 06             	lea    0x6(%edi),%eax
   to be of length >= BASE64_LENGTH(INLEN), and INLEN needs to be
   a multiple of 3.  */
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
 80508d1:	39 e8                	cmp    %ebp,%eax
 80508d3:	8d 52 08             	lea    0x8(%edx),%edx
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 80508d6:	88 4a ff             	mov    %cl,-0x1(%edx)
   to be of length >= BASE64_LENGTH(INLEN), and INLEN needs to be
   a multiple of 3.  */
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
 80508d9:	0f 84 bc fd ff ff    	je     805069b <base64_encode+0x54b>
 80508df:	90                   	nop
 80508e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80508e4:	89 3c 24             	mov    %edi,(%esp)
 80508e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80508eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80508ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80508f3:	b9 d6 e2 00 00       	mov    $0xe2d6,%ecx
 80508f8:	e8 7b 29 00 00       	call   8053278 <__afl_maybe_log>
 80508fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050901:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050905:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050909:	8b 3c 24             	mov    (%esp),%edi
 805090c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050910:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050914:	89 3c 24             	mov    %edi,(%esp)
 8050917:	89 54 24 04          	mov    %edx,0x4(%esp)
 805091b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805091f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050923:	b9 66 a7 00 00       	mov    $0xa766,%ecx
 8050928:	e8 4b 29 00 00       	call   8053278 <__afl_maybe_log>
 805092d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050931:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050935:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050939:	8b 3c 24             	mov    (%esp),%edi
 805093c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050940:	89 6c 24 04          	mov    %ebp,0x4(%esp)

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 8050944:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050948:	89 3c 24             	mov    %edi,(%esp)
 805094b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805094f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050953:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050957:	b9 4c 9b 00 00       	mov    $0x9b4c,%ecx
 805095c:	e8 17 29 00 00       	call   8053278 <__afl_maybe_log>
 8050961:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050965:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050969:	8b 54 24 04          	mov    0x4(%esp),%edx
 805096d:	8b 3c 24             	mov    (%esp),%edi
 8050970:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050974:	0f b6 08             	movzbl (%eax),%ecx
 8050977:	83 c2 08             	add    $0x8,%edx
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
      *out++ = b64c[to_uchar (in[2]) & 0x3f];

      inlen -= 3;
      in += 3;
 805097a:	83 c0 06             	add    $0x6,%eax
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 805097d:	89 cb                	mov    %ecx,%ebx
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 805097f:	89 cd                	mov    %ecx,%ebp
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 8050981:	c0 eb 02             	shr    $0x2,%bl
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 8050984:	c1 e5 04             	shl    $0x4,%ebp
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 8050987:	0f b6 fb             	movzbl %bl,%edi
 805098a:	0f b6 9f c0 37 06 08 	movzbl 0x80637c0(%edi),%ebx
 8050991:	88 5a f8             	mov    %bl,-0x8(%edx)

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 8050994:	0f b6 58 fb          	movzbl -0x5(%eax),%ebx
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 8050998:	89 d9                	mov    %ebx,%ecx
 805099a:	c0 e9 04             	shr    $0x4,%cl
 805099d:	89 ce                	mov    %ecx,%esi
 805099f:	8d 7c 35 00          	lea    0x0(%ebp,%esi,1),%edi

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 80509a3:	0f b6 68 fc          	movzbl -0x4(%eax),%ebp
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 80509a7:	83 e7 3f             	and    $0x3f,%edi
 80509aa:	0f b6 8f c0 37 06 08 	movzbl 0x80637c0(%edi),%ecx
 80509b1:	0f b6 78 fd          	movzbl -0x3(%eax),%edi
 80509b5:	88 4a f9             	mov    %cl,-0x7(%edx)
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80509b8:	89 e9                	mov    %ebp,%ecx
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 80509ba:	83 e5 3f             	and    $0x3f,%ebp
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80509bd:	c0 e9 06             	shr    $0x6,%cl
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 80509c0:	c1 e7 04             	shl    $0x4,%edi
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80509c3:	8d 1c 99             	lea    (%ecx,%ebx,4),%ebx
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 80509c6:	89 3c 24             	mov    %edi,(%esp)

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 80509c9:	0f b6 78 ff          	movzbl -0x1(%eax),%edi
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80509cd:	83 e3 3f             	and    $0x3f,%ebx
 80509d0:	0f b6 8b c0 37 06 08 	movzbl 0x80637c0(%ebx),%ecx
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 80509d7:	0f b6 9d c0 37 06 08 	movzbl 0x80637c0(%ebp),%ebx
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 80509de:	88 4a fa             	mov    %cl,-0x6(%edx)
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 80509e1:	0f b6 48 fd          	movzbl -0x3(%eax),%ecx
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 80509e5:	88 5a fb             	mov    %bl,-0x5(%edx)
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 80509e8:	c0 e9 02             	shr    $0x2,%cl
 80509eb:	0f b6 f1             	movzbl %cl,%esi
 80509ee:	0f b6 9e c0 37 06 08 	movzbl 0x80637c0(%esi),%ebx

/* C89 compliant way to cast 'char' to 'unsigned char'. */
static unsigned char
to_uchar (char ch)
{
  return ch;
 80509f5:	0f b6 70 fe          	movzbl -0x2(%eax),%esi
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
 80509f9:	88 5a fc             	mov    %bl,-0x4(%edx)
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 80509fc:	89 f1                	mov    %esi,%ecx
 80509fe:	8b 1c 24             	mov    (%esp),%ebx
 8050a01:	c0 e9 04             	shr    $0x4,%cl
 8050a04:	89 cd                	mov    %ecx,%ebp
 8050a06:	01 eb                	add    %ebp,%ebx
 8050a08:	83 e3 3f             	and    $0x3f,%ebx
 8050a0b:	0f b6 8b c0 37 06 08 	movzbl 0x80637c0(%ebx),%ecx
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 8050a12:	89 fb                	mov    %edi,%ebx
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 8050a14:	83 e7 3f             	and    $0x3f,%edi
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 8050a17:	c0 eb 06             	shr    $0x6,%bl
 8050a1a:	8d 34 b3             	lea    (%ebx,%esi,4),%esi
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 8050a1d:	0f b6 9f c0 37 06 08 	movzbl 0x80637c0(%edi),%ebx
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 8050a24:	83 e6 3f             	and    $0x3f,%esi
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
 8050a27:	88 4a fd             	mov    %cl,-0x3(%edx)
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
 8050a2a:	0f b6 8e c0 37 06 08 	movzbl 0x80637c0(%esi),%ecx
 8050a31:	88 4a fe             	mov    %cl,-0x2(%edx)
   to be of length >= BASE64_LENGTH(INLEN), and INLEN needs to be
   a multiple of 3.  */
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
 8050a34:	3b 44 24 04          	cmp    0x4(%esp),%eax
    {
      *out++ = b64c[to_uchar (in[0]) >> 2];
      *out++ = b64c[((to_uchar (in[0]) << 4) + (to_uchar (in[1]) >> 4)) & 0x3f];
      *out++ = b64c[((to_uchar (in[1]) << 2) + (to_uchar (in[2]) >> 6)) & 0x3f];
      *out++ = b64c[to_uchar (in[2]) & 0x3f];
 8050a38:	88 5a ff             	mov    %bl,-0x1(%edx)
   to be of length >= BASE64_LENGTH(INLEN), and INLEN needs to be
   a multiple of 3.  */
static void
base64_encode_fast (const char *restrict in, size_t inlen, char *restrict out)
{
  while (inlen)
 8050a3b:	0f 85 03 ff ff ff    	jne    8050944 <base64_encode+0x7f4>
 8050a41:	8d 76 00             	lea    0x0(%esi),%esi
 8050a44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050a48:	89 3c 24             	mov    %edi,(%esp)
 8050a4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050a4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050a53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050a57:	b9 fa 8c 00 00       	mov    $0x8cfa,%ecx
 8050a5c:	e8 17 28 00 00       	call   8053278 <__afl_maybe_log>
 8050a61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050a65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050a69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050a6d:	8b 3c 24             	mov    (%esp),%edi
 8050a70:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050a74:	e9 22 fc ff ff       	jmp    805069b <base64_encode+0x54b>
 8050a79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08050a80 <base64_encode_alloc>:
   memory allocation failed, OUT is set to NULL, and the return value
   indicates length of the requested memory block, i.e.,
   BASE64_LENGTH(inlen) + 1. */
size_t
base64_encode_alloc (const char *in, size_t inlen, char **out)
{
 8050a80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050a84:	89 3c 24             	mov    %edi,(%esp)
 8050a87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050a8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050a8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050a93:	b9 ee 27 00 00       	mov    $0x27ee,%ecx
 8050a98:	e8 db 27 00 00       	call   8053278 <__afl_maybe_log>
 8050a9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050aa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050aa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050aa9:	8b 3c 24             	mov    (%esp),%edi
 8050aac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050ab0:	57                   	push   %edi
 8050ab1:	56                   	push   %esi
  size_t outlen = 1 + BASE64_LENGTH (inlen);
 8050ab2:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
   memory allocation failed, OUT is set to NULL, and the return value
   indicates length of the requested memory block, i.e.,
   BASE64_LENGTH(inlen) + 1. */
size_t
base64_encode_alloc (const char *in, size_t inlen, char **out)
{
 8050ab7:	53                   	push   %ebx
 8050ab8:	8b 74 24 14          	mov    0x14(%esp),%esi
  size_t outlen = 1 + BASE64_LENGTH (inlen);
 8050abc:	8d 5e 02             	lea    0x2(%esi),%ebx
 8050abf:	89 d8                	mov    %ebx,%eax
 8050ac1:	f7 e2                	mul    %edx
 8050ac3:	d1 ea                	shr    %edx
 8050ac5:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
 8050acc:	8d 7b 01             	lea    0x1(%ebx),%edi
   * If the multiplication overflows, we lose at least half of the
   * correct value, so the result is < ((inlen + 2) / 3) * 2, which is
   * less than (inlen + 2) * 0.66667, which is less than inlen as soon as
   * (inlen > 4).
   */
  if (inlen > outlen)
 8050acf:	39 fe                	cmp    %edi,%esi
 8050ad1:	76 7d                	jbe    8050b50 <base64_encode_alloc+0xd0>
 8050ad3:	90                   	nop
 8050ad4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050ad8:	89 3c 24             	mov    %edi,(%esp)
 8050adb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050adf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050ae3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050ae7:	b9 e1 ed 00 00       	mov    $0xede1,%ecx
 8050aec:	e8 87 27 00 00       	call   8053278 <__afl_maybe_log>
 8050af1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050af5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050af9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050afd:	8b 3c 24             	mov    (%esp),%edi
 8050b00:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *out = NULL;
 8050b04:	8b 74 24 18          	mov    0x18(%esp),%esi
      return 0;
 8050b08:	31 db                	xor    %ebx,%ebx
   * less than (inlen + 2) * 0.66667, which is less than inlen as soon as
   * (inlen > 4).
   */
  if (inlen > outlen)
    {
      *out = NULL;
 8050b0a:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
    return outlen;

  base64_encode (in, inlen, *out, outlen);

  return outlen - 1;
}
 8050b10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050b14:	89 3c 24             	mov    %edi,(%esp)
 8050b17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050b1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050b1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050b23:	b9 49 b5 00 00       	mov    $0xb549,%ecx
 8050b28:	e8 4b 27 00 00       	call   8053278 <__afl_maybe_log>
 8050b2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050b31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050b35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050b39:	8b 3c 24             	mov    (%esp),%edi
 8050b3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050b40:	89 d8                	mov    %ebx,%eax
 8050b42:	5b                   	pop    %ebx
 8050b43:	5e                   	pop    %esi
 8050b44:	5f                   	pop    %edi
 8050b45:	c3                   	ret    
 8050b46:	8d 76 00             	lea    0x0(%esi),%esi
 8050b49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
    {
      *out = NULL;
      return 0;
    }

  *out = malloc (outlen);
 8050b50:	83 ec 0c             	sub    $0xc,%esp
 8050b53:	57                   	push   %edi
 8050b54:	e8 77 87 ff ff       	call   80492d0 <malloc@plt>
 8050b59:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  if (!*out)
 8050b5d:	83 c4 10             	add    $0x10,%esp
 8050b60:	85 c0                	test   %eax,%eax
    {
      *out = NULL;
      return 0;
    }

  *out = malloc (outlen);
 8050b62:	89 01                	mov    %eax,(%ecx)
  if (!*out)
 8050b64:	74 4a                	je     8050bb0 <base64_encode_alloc+0x130>
 8050b66:	66 90                	xchg   %ax,%ax
 8050b68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050b6c:	89 3c 24             	mov    %edi,(%esp)
 8050b6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050b73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050b77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050b7b:	b9 79 f3 00 00       	mov    $0xf379,%ecx
 8050b80:	e8 f3 26 00 00       	call   8053278 <__afl_maybe_log>
 8050b85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050b89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050b8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050b91:	8b 3c 24             	mov    (%esp),%edi
 8050b94:	8d 64 24 10          	lea    0x10(%esp),%esp
    return outlen;

  base64_encode (in, inlen, *out, outlen);
 8050b98:	57                   	push   %edi
 8050b99:	50                   	push   %eax
 8050b9a:	56                   	push   %esi
 8050b9b:	ff 74 24 1c          	pushl  0x1c(%esp)
 8050b9f:	e8 ac f5 ff ff       	call   8050150 <base64_encode>

  return outlen - 1;
 8050ba4:	83 c4 10             	add    $0x10,%esp
}
 8050ba7:	89 d8                	mov    %ebx,%eax
 8050ba9:	5b                   	pop    %ebx
 8050baa:	5e                   	pop    %esi
 8050bab:	5f                   	pop    %edi
 8050bac:	c3                   	ret    
 8050bad:	8d 76 00             	lea    0x0(%esi),%esi
 8050bb0:	89 fb                	mov    %edi,%ebx
 8050bb2:	e9 59 ff ff ff       	jmp    8050b10 <base64_encode_alloc+0x90>
 8050bb7:	89 f6                	mov    %esi,%esi
 8050bb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08050bc0 <isbase64>:
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8050bc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050bc4:	89 3c 24             	mov    %edi,(%esp)
 8050bc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050bcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050bcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050bd3:	b9 fa f3 00 00       	mov    $0xf3fa,%ecx
 8050bd8:	e8 9b 26 00 00       	call   8053278 <__afl_maybe_log>
 8050bdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050be1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050be5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050be9:	8b 3c 24             	mov    (%esp),%edi
 8050bec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050bf0:	0f b6 44 24 04       	movzbl 0x4(%esp),%eax
 8050bf5:	0f b6 80 c0 36 06 08 	movzbl 0x80636c0(%eax),%eax
 8050bfc:	f7 d0                	not    %eax
 8050bfe:	c0 e8 07             	shr    $0x7,%al
}
 8050c01:	c3                   	ret    
 8050c02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8050c09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08050c10 <base64_decode_ctx_init>:

/* Initialize decode-context buffer, CTX.  */
void
base64_decode_ctx_init (struct base64_decode_context *ctx)
{
  ctx->i = 0;
 8050c10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050c14:	89 3c 24             	mov    %edi,(%esp)
 8050c17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050c1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050c1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050c23:	b9 64 34 00 00       	mov    $0x3464,%ecx
 8050c28:	e8 4b 26 00 00       	call   8053278 <__afl_maybe_log>
 8050c2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050c31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050c35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050c39:	8b 3c 24             	mov    (%esp),%edi
 8050c3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050c40:	8b 44 24 04          	mov    0x4(%esp),%eax
 8050c44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 8050c4a:	c3                   	ret    
 8050c4b:	90                   	nop
 8050c4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08050c50 <base64_decode_ctx>:

bool
base64_decode_ctx (struct base64_decode_context *ctx,
                   const char *restrict in, size_t inlen,
                   char *restrict out, size_t *outlen)
{
 8050c50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050c54:	89 3c 24             	mov    %edi,(%esp)
 8050c57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050c5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050c5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050c63:	b9 37 2c 00 00       	mov    $0x2c37,%ecx
 8050c68:	e8 0b 26 00 00       	call   8053278 <__afl_maybe_log>
 8050c6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050c71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050c75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050c79:	8b 3c 24             	mov    (%esp),%edi
 8050c7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050c80:	55                   	push   %ebp
 8050c81:	57                   	push   %edi
 8050c82:	56                   	push   %esi
 8050c83:	53                   	push   %ebx
 8050c84:	83 ec 2c             	sub    $0x2c,%esp
  size_t outleft = *outlen;
 8050c87:	8b 44 24 50          	mov    0x50(%esp),%eax
  bool ignore_newlines = ctx != NULL;
 8050c8b:	8b 74 24 40          	mov    0x40(%esp),%esi
bool
base64_decode_ctx (struct base64_decode_context *ctx,
                   const char *restrict in, size_t inlen,
                   char *restrict out, size_t *outlen)
{
  size_t outleft = *outlen;
 8050c8f:	8b 28                	mov    (%eax),%ebp
  bool ignore_newlines = ctx != NULL;
 8050c91:	85 f6                	test   %esi,%esi
  bool flush_ctx = false;
  unsigned int ctx_i = 0;

  if (ignore_newlines)
 8050c93:	0f 95 44 24 0e       	setne  0xe(%esp)
bool
base64_decode_ctx (struct base64_decode_context *ctx,
                   const char *restrict in, size_t inlen,
                   char *restrict out, size_t *outlen)
{
  size_t outleft = *outlen;
 8050c98:	89 6c 24 1c          	mov    %ebp,0x1c(%esp)
  bool ignore_newlines = ctx != NULL;
  bool flush_ctx = false;
  unsigned int ctx_i = 0;

  if (ignore_newlines)
 8050c9c:	0f 84 53 23 00 00    	je     8052ff5 <base64_decode_ctx+0x23a5>
 8050ca2:	66 90                	xchg   %ax,%ax
 8050ca4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050ca8:	89 3c 24             	mov    %edi,(%esp)
 8050cab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050caf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050cb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050cb7:	b9 f2 f6 00 00       	mov    $0xf6f2,%ecx
 8050cbc:	e8 b7 25 00 00       	call   8053278 <__afl_maybe_log>
 8050cc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050cc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050cc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050ccd:	8b 3c 24             	mov    (%esp),%edi
 8050cd0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050cd4:	8b 54 24 40          	mov    0x40(%esp),%edx
    {
      ctx_i = ctx->i;
      flush_ctx = inlen == 0;
 8050cd8:	8b 4c 24 48          	mov    0x48(%esp),%ecx
 8050cdc:	8b 1a                	mov    (%edx),%ebx
 8050cde:	85 c9                	test   %ecx,%ecx
 8050ce0:	0f 94 44 24 0d       	sete   0xd(%esp)
 8050ce5:	85 db                	test   %ebx,%ebx
 8050ce7:	0f 94 44 24 0f       	sete   0xf(%esp)
 8050cec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050cf0:	89 3c 24             	mov    %edi,(%esp)
 8050cf3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050cf7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050cfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050cff:	b9 c5 ab 00 00       	mov    $0xabc5,%ecx
 8050d04:	e8 6f 25 00 00       	call   8053278 <__afl_maybe_log>
 8050d09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050d0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050d11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050d15:	8b 3c 24             	mov    (%esp),%edi
 8050d18:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050d1c:	89 ef                	mov    %ebp,%edi
 8050d1e:	8b 6c 24 48          	mov    0x48(%esp),%ebp
 8050d22:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi


  while (true)
    {
      size_t outleft_save = outleft;
      if (ctx_i == 0 && !flush_ctx)
 8050d28:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
 8050d2d:	89 fa                	mov    %edi,%edx
 8050d2f:	38 4c 24 0d          	cmp    %cl,0xd(%esp)
 8050d33:	0f 83 ea 03 00 00    	jae    8051123 <base64_decode_ctx+0x4d3>
 8050d39:	8d 76 00             	lea    0x0(%esi),%esi
 8050d3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050d40:	89 3c 24             	mov    %edi,(%esp)
 8050d43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050d47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050d4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050d4f:	b9 72 7c 00 00       	mov    $0x7c72,%ecx
 8050d54:	e8 1f 25 00 00       	call   8053278 <__afl_maybe_log>
 8050d59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050d5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050d61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050d65:	8b 3c 24             	mov    (%esp),%edi
 8050d68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050d6c:	8b 5c 24 44          	mov    0x44(%esp),%ebx
 8050d70:	89 3c 24             	mov    %edi,(%esp)
 8050d73:	eb 11                	jmp    8050d86 <base64_decode_ctx+0x136>
 8050d75:	8d 76 00             	lea    0x0(%esi),%esi
 8050d78:	8b 74 24 1c          	mov    0x1c(%esp),%esi
int lava_832 = 0;
lava_832 |= ((unsigned char *) (in))[0] << (0*8);lava_832 |= ((unsigned char *) (in))[1] << (1*8);lava_832 |= ((unsigned char *) (in))[2] << (2*8);lava_832 |= ((unsigned char *) (in))[3] << (3*8);lava_set(832,lava_832);
}kbcieiubweuhc233665123;}))
                break;

              in += 4;
 8050d7c:	89 5c 24 44          	mov    %ebx,0x44(%esp)
              inlen -= 4;
 8050d80:	83 ed 04             	sub    $0x4,%ebp
 8050d83:	89 34 24             	mov    %esi,(%esp)
 8050d86:	66 90                	xchg   %ax,%ax
          while (true)
            {
              /* Save a copy of outleft, in case we need to re-parse this
                 block of four bytes.  */
              outleft_save = outleft;
              if (!({if (((in)) && ((in)))  {int lava_1 = 0;
 8050d88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050d8c:	89 3c 24             	mov    %edi,(%esp)
 8050d8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050d93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050d97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050d9b:	b9 96 e2 00 00       	mov    $0xe296,%ecx
 8050da0:	e8 d3 24 00 00       	call   8053278 <__afl_maybe_log>
 8050da5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050da9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050dad:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050db1:	8b 3c 24             	mov    (%esp),%edi
 8050db4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050db8:	85 db                	test   %ebx,%ebx
 8050dba:	0f 84 b6 00 00 00    	je     8050e76 <base64_decode_ctx+0x226>
 8050dc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050dc4:	89 3c 24             	mov    %edi,(%esp)
 8050dc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050dcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050dcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050dd3:	b9 d6 ed 00 00       	mov    $0xedd6,%ecx
 8050dd8:	e8 9b 24 00 00       	call   8053278 <__afl_maybe_log>
 8050ddd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050de1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050de5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050de9:	8b 3c 24             	mov    (%esp),%edi
 8050dec:	8d 64 24 10          	lea    0x10(%esp),%esp
              lava_1 |= ((unsigned char *) (in))[0] << (0*8);lava_1 |= ((unsigned char *) (in))[1] << (1*8);lava_1 |= ((unsigned char *) (in))[2] << (2*8);lava_1 |= ((unsigned char *) (in))[3] << (3*8);lava_set(1,lava_1);
 8050df0:	0f b6 7b 01          	movzbl 0x1(%ebx),%edi
 8050df4:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8050df8:	83 ec 08             	sub    $0x8,%esp
 8050dfb:	0f b6 13             	movzbl (%ebx),%edx
 8050dfe:	0f b6 4b 03          	movzbl 0x3(%ebx),%ecx
 8050e02:	c1 e7 08             	shl    $0x8,%edi
 8050e05:	c1 e0 10             	shl    $0x10,%eax
 8050e08:	09 f8                	or     %edi,%eax
 8050e0a:	c1 e1 18             	shl    $0x18,%ecx
 8050e0d:	09 d0                	or     %edx,%eax
 8050e0f:	09 c8                	or     %ecx,%eax
 8050e11:	50                   	push   %eax
 8050e12:	6a 01                	push   $0x1
 8050e14:	e8 07 b7 ff ff       	call   804c520 <lava_set>
              int lava_572 = 0;
              lava_572 |= ((unsigned char *) (in))[0] << (0*8);lava_572 |= ((unsigned char *) (in))[1] << (1*8);lava_572 |= ((unsigned char *) (in))[2] << (2*8);lava_572 |= ((unsigned char *) (in))[3] << (3*8);lava_set(572,lava_572);
 8050e19:	8b 7c 24 54          	mov    0x54(%esp),%edi
 8050e1d:	0f b6 77 01          	movzbl 0x1(%edi),%esi
 8050e21:	0f b6 47 02          	movzbl 0x2(%edi),%eax
 8050e25:	0f b6 0f             	movzbl (%edi),%ecx
 8050e28:	0f b6 7f 03          	movzbl 0x3(%edi),%edi
 8050e2c:	c1 e6 08             	shl    $0x8,%esi
 8050e2f:	c1 e0 10             	shl    $0x10,%eax
 8050e32:	09 f0                	or     %esi,%eax
 8050e34:	c1 e7 18             	shl    $0x18,%edi
 8050e37:	09 c8                	or     %ecx,%eax
 8050e39:	59                   	pop    %ecx
 8050e3a:	5e                   	pop    %esi
 8050e3b:	09 f8                	or     %edi,%eax
 8050e3d:	50                   	push   %eax
 8050e3e:	68 3c 02 00 00       	push   $0x23c
 8050e43:	e8 d8 b6 ff ff       	call   804c520 <lava_set>
              int lava_831 = 0;
              lava_831 |= ((unsigned char *) (in))[0] << (0*8);lava_831 |= ((unsigned char *) (in))[1] << (1*8);lava_831 |= ((unsigned char *) (in))[2] << (2*8);lava_831 |= ((unsigned char *) (in))[3] << (3*8);lava_set(831,lava_831);
 8050e48:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
 8050e4c:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8050e50:	5f                   	pop    %edi
 8050e51:	0f b6 0b             	movzbl (%ebx),%ecx
 8050e54:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
 8050e58:	5a                   	pop    %edx
 8050e59:	c1 e6 08             	shl    $0x8,%esi
 8050e5c:	c1 e0 10             	shl    $0x10,%eax
 8050e5f:	09 f0                	or     %esi,%eax
 8050e61:	09 c8                	or     %ecx,%eax
 8050e63:	c1 e7 18             	shl    $0x18,%edi
 8050e66:	09 f8                	or     %edi,%eax
 8050e68:	50                   	push   %eax
 8050e69:	68 3f 03 00 00       	push   $0x33f
 8050e6e:	e8 ad b6 ff ff       	call   804c520 <lava_set>
 8050e73:	83 c4 10             	add    $0x10,%esp
 8050e76:	66 90                	xchg   %ax,%ax
              }_Bool kbcieiubweuhc233665123 = decode_4 (in+(lava_get(1))*(0x6c617660==(lava_get(1))||0x6076616c==(lava_get(1))), inlen+(lava_get(521))*(0x6c617458==(lava_get(521))||0x5874616c==(lava_get(521))), &out, &outleft);if (((in)) && ((in)))  {int lava_573 = 0;
 8050e78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050e7c:	89 3c 24             	mov    %edi,(%esp)
 8050e7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050e83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050e87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050e8b:	b9 9f 75 00 00       	mov    $0x759f,%ecx
 8050e90:	e8 e3 23 00 00       	call   8053278 <__afl_maybe_log>
 8050e95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050e99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050e9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050ea1:	8b 3c 24             	mov    (%esp),%edi
 8050ea4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050ea8:	83 ec 0c             	sub    $0xc,%esp
 8050eab:	68 09 02 00 00       	push   $0x209
 8050eb0:	e8 ab b6 ff ff       	call   804c560 <lava_get>
 8050eb5:	c7 04 24 09 02 00 00 	movl   $0x209,(%esp)
 8050ebc:	89 c6                	mov    %eax,%esi
 8050ebe:	e8 9d b6 ff ff       	call   804c560 <lava_get>
 8050ec3:	83 c4 10             	add    $0x10,%esp
 8050ec6:	3d 58 74 61 6c       	cmp    $0x6c617458,%eax
 8050ecb:	ba 01 00 00 00       	mov    $0x1,%edx
 8050ed0:	74 4c                	je     8050f1e <base64_decode_ctx+0x2ce>
 8050ed2:	66 90                	xchg   %ax,%ax
 8050ed4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050ed8:	89 3c 24             	mov    %edi,(%esp)
 8050edb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050edf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050ee3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050ee7:	b9 5f 79 00 00       	mov    $0x795f,%ecx
 8050eec:	e8 87 23 00 00       	call   8053278 <__afl_maybe_log>
 8050ef1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050ef5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050ef9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050efd:	8b 3c 24             	mov    (%esp),%edi
 8050f00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050f04:	83 ec 0c             	sub    $0xc,%esp
 8050f07:	68 09 02 00 00       	push   $0x209
 8050f0c:	e8 4f b6 ff ff       	call   804c560 <lava_get>
 8050f11:	31 d2                	xor    %edx,%edx
 8050f13:	83 c4 10             	add    $0x10,%esp
 8050f16:	3d 6c 61 74 58       	cmp    $0x5874616c,%eax
 8050f1b:	0f 94 c2             	sete   %dl
 8050f1e:	66 90                	xchg   %ax,%ax
 8050f20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050f24:	89 3c 24             	mov    %edi,(%esp)
 8050f27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050f2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050f2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050f33:	b9 5c 96 00 00       	mov    $0x965c,%ecx
 8050f38:	e8 3b 23 00 00       	call   8053278 <__afl_maybe_log>
 8050f3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050f41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050f45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050f49:	8b 3c 24             	mov    (%esp),%edi
 8050f4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050f50:	89 d7                	mov    %edx,%edi
 8050f52:	83 ec 0c             	sub    $0xc,%esp
 8050f55:	0f af fe             	imul   %esi,%edi
 8050f58:	6a 01                	push   $0x1
 8050f5a:	e8 01 b6 ff ff       	call   804c560 <lava_get>
 8050f5f:	01 ef                	add    %ebp,%edi
 8050f61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8050f68:	89 c6                	mov    %eax,%esi
 8050f6a:	e8 f1 b5 ff ff       	call   804c560 <lava_get>
 8050f6f:	83 c4 10             	add    $0x10,%esp
 8050f72:	3d 60 76 61 6c       	cmp    $0x6c617660,%eax
 8050f77:	b9 01 00 00 00       	mov    $0x1,%ecx
 8050f7c:	74 49                	je     8050fc7 <base64_decode_ctx+0x377>
 8050f7e:	66 90                	xchg   %ax,%ax
 8050f80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050f84:	89 3c 24             	mov    %edi,(%esp)
 8050f87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050f8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050f8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050f93:	b9 d9 38 00 00       	mov    $0x38d9,%ecx
 8050f98:	e8 db 22 00 00       	call   8053278 <__afl_maybe_log>
 8050f9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050fa1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050fa5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050fa9:	8b 3c 24             	mov    (%esp),%edi
 8050fac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050fb0:	83 ec 0c             	sub    $0xc,%esp
 8050fb3:	6a 01                	push   $0x1
 8050fb5:	e8 a6 b5 ff ff       	call   804c560 <lava_get>
 8050fba:	31 c9                	xor    %ecx,%ecx
 8050fbc:	83 c4 10             	add    $0x10,%esp
 8050fbf:	3d 6c 61 76 60       	cmp    $0x6076616c,%eax
 8050fc4:	0f 94 c1             	sete   %cl
 8050fc7:	90                   	nop
 8050fc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8050fcc:	89 3c 24             	mov    %edi,(%esp)
 8050fcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8050fd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8050fd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8050fdb:	b9 3a f4 00 00       	mov    $0xf43a,%ecx
 8050fe0:	e8 93 22 00 00       	call   8053278 <__afl_maybe_log>
 8050fe5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8050fe9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8050fed:	8b 54 24 04          	mov    0x4(%esp),%edx
 8050ff1:	8b 3c 24             	mov    (%esp),%edi
 8050ff4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8050ff8:	83 ec 0c             	sub    $0xc,%esp
 8050ffb:	89 c8                	mov    %ecx,%eax
 8050ffd:	8d 54 24 28          	lea    0x28(%esp),%edx
 8051001:	0f af c6             	imul   %esi,%eax
 8051004:	52                   	push   %edx
 8051005:	89 fa                	mov    %edi,%edx
 8051007:	8d 4c 24 5c          	lea    0x5c(%esp),%ecx
 805100b:	01 d8                	add    %ebx,%eax
 805100d:	e8 3e e6 ff ff       	call   804f650 <decode_4>
 8051012:	83 c4 10             	add    $0x10,%esp
 8051015:	85 db                	test   %ebx,%ebx
 8051017:	89 c6                	mov    %eax,%esi
 8051019:	0f 84 8b 00 00 00    	je     80510aa <base64_decode_ctx+0x45a>
 805101f:	90                   	nop
 8051020:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051024:	89 3c 24             	mov    %edi,(%esp)
 8051027:	89 54 24 04          	mov    %edx,0x4(%esp)
 805102b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805102f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051033:	b9 ae 83 00 00       	mov    $0x83ae,%ecx
 8051038:	e8 3b 22 00 00       	call   8053278 <__afl_maybe_log>
 805103d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051041:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051045:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051049:	8b 3c 24             	mov    (%esp),%edi
 805104c:	8d 64 24 10          	lea    0x10(%esp),%esp
lava_573 |= ((unsigned char *) (in))[0] << (0*8);lava_573 |= ((unsigned char *) (in))[1] << (1*8);lava_573 |= ((unsigned char *) (in))[2] << (2*8);lava_573 |= ((unsigned char *) (in))[3] << (3*8);lava_set(573,lava_573);
 8051050:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 8051054:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
 8051058:	83 ec 08             	sub    $0x8,%esp
 805105b:	0f b6 13             	movzbl (%ebx),%edx
 805105e:	c1 e0 08             	shl    $0x8,%eax
 8051061:	c1 e1 10             	shl    $0x10,%ecx
 8051064:	09 c1                	or     %eax,%ecx
 8051066:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
 805106a:	09 d1                	or     %edx,%ecx
 805106c:	c1 e0 18             	shl    $0x18,%eax
 805106f:	09 c1                	or     %eax,%ecx
 8051071:	51                   	push   %ecx
 8051072:	68 3d 02 00 00       	push   $0x23d
 8051077:	e8 a4 b4 ff ff       	call   804c520 <lava_set>
int lava_832 = 0;
lava_832 |= ((unsigned char *) (in))[0] << (0*8);lava_832 |= ((unsigned char *) (in))[1] << (1*8);lava_832 |= ((unsigned char *) (in))[2] << (2*8);lava_832 |= ((unsigned char *) (in))[3] << (3*8);lava_set(832,lava_832);
 805107c:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 8051080:	0f b6 7b 02          	movzbl 0x2(%ebx),%edi
 8051084:	0f b6 0b             	movzbl (%ebx),%ecx
 8051087:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
 805108b:	c1 e7 10             	shl    $0x10,%edi
 805108e:	c1 e2 08             	shl    $0x8,%edx
 8051091:	09 fa                	or     %edi,%edx
 8051093:	c1 e0 18             	shl    $0x18,%eax
 8051096:	09 ca                	or     %ecx,%edx
 8051098:	59                   	pop    %ecx
 8051099:	5f                   	pop    %edi
 805109a:	09 c2                	or     %eax,%edx
 805109c:	52                   	push   %edx
 805109d:	68 40 03 00 00       	push   $0x340
 80510a2:	e8 79 b4 ff ff       	call   804c520 <lava_set>
 80510a7:	83 c4 10             	add    $0x10,%esp
 80510aa:	66 90                	xchg   %ax,%ax
          while (true)
            {
              /* Save a copy of outleft, in case we need to re-parse this
                 block of four bytes.  */
              outleft_save = outleft;
              if (!({if (((in)) && ((in)))  {int lava_1 = 0;
 80510ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80510b0:	89 3c 24             	mov    %edi,(%esp)
 80510b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80510b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80510bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80510bf:	b9 aa 31 00 00       	mov    $0x31aa,%ecx
 80510c4:	e8 af 21 00 00       	call   8053278 <__afl_maybe_log>
 80510c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80510cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80510d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80510d5:	8b 3c 24             	mov    (%esp),%edi
 80510d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80510dc:	89 f2                	mov    %esi,%edx
 80510de:	83 c3 04             	add    $0x4,%ebx
 80510e1:	84 d2                	test   %dl,%dl
 80510e3:	0f 85 8f fc ff ff    	jne    8050d78 <base64_decode_ctx+0x128>
 80510e9:	8d 76 00             	lea    0x0(%esi),%esi
 80510ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80510f0:	89 3c 24             	mov    %edi,(%esp)
 80510f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80510f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80510fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80510ff:	b9 4b d5 00 00       	mov    $0xd54b,%ecx
 8051104:	e8 6f 21 00 00       	call   8053278 <__afl_maybe_log>
 8051109:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805110d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051111:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051115:	8b 3c 24             	mov    (%esp),%edi
 8051118:	8d 64 24 10          	lea    0x10(%esp),%esp
 805111c:	8b 3c 24             	mov    (%esp),%edi
 805111f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8051123:	90                   	nop
              in += 4;
              inlen -= 4;
            }
        }

      if (inlen == 0 && !flush_ctx)
 8051124:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051128:	89 3c 24             	mov    %edi,(%esp)
 805112b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805112f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051133:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051137:	b9 8b ab 00 00       	mov    $0xab8b,%ecx
 805113c:	e8 37 21 00 00       	call   8053278 <__afl_maybe_log>
 8051141:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051145:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051149:	8b 54 24 04          	mov    0x4(%esp),%edx
 805114d:	8b 3c 24             	mov    (%esp),%edi
 8051150:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051154:	85 ed                	test   %ebp,%ebp
 8051156:	0f 94 c3             	sete   %bl
 8051159:	38 5c 24 0d          	cmp    %bl,0xd(%esp)
 805115d:	0f 82 b7 1b 00 00    	jb     8052d1a <base64_decode_ctx+0x20ca>
 8051163:	90                   	nop
 8051164:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051168:	89 3c 24             	mov    %edi,(%esp)
 805116b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805116f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051173:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051177:	b9 e7 27 00 00       	mov    $0x27e7,%ecx
 805117c:	e8 f7 20 00 00       	call   8053278 <__afl_maybe_log>
 8051181:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051185:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051189:	8b 54 24 04          	mov    0x4(%esp),%edx
 805118d:	8b 3c 24             	mov    (%esp),%edi
 8051190:	8d 64 24 10          	lea    0x10(%esp),%esp
        break;

      /* Handle the common case of 72-byte wrapped lines.
         This also handles any other multiple-of-4-byte wrapping.  */
      if (inlen && *in == '\n' && ignore_newlines)
 8051194:	85 ed                	test   %ebp,%ebp
 8051196:	0f 84 c4 1a 00 00    	je     8052c60 <base64_decode_ctx+0x2010>
 805119c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80511a0:	89 3c 24             	mov    %edi,(%esp)
 80511a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80511a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80511ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80511af:	b9 99 e5 00 00       	mov    $0xe599,%ecx
 80511b4:	e8 bf 20 00 00       	call   8053278 <__afl_maybe_log>
 80511b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80511bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80511c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80511c5:	8b 3c 24             	mov    (%esp),%edi
 80511c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80511cc:	8b 5c 24 44          	mov    0x44(%esp),%ebx
 80511d0:	80 3b 0a             	cmpb   $0xa,(%ebx)
 80511d3:	0f 84 b7 1d 00 00    	je     8052f90 <base64_decode_ctx+0x2340>
 80511d9:	8d 76 00             	lea    0x0(%esi),%esi
 80511dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80511e0:	89 3c 24             	mov    %edi,(%esp)
 80511e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80511e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80511eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80511ef:	b9 1c 71 00 00       	mov    $0x711c,%ecx
 80511f4:	e8 7f 20 00 00       	call   8053278 <__afl_maybe_log>
 80511f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80511fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051201:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051205:	8b 3c 24             	mov    (%esp),%edi
 8051208:	8d 64 24 10          	lea    0x10(%esp),%esp
          --inlen;
          continue;
        }

      /* Restore OUT and OUTLEFT.  */
      out -= outleft_save - outleft;
 805120c:	29 fa                	sub    %edi,%edx
 805120e:	01 54 24 4c          	add    %edx,0x4c(%esp)

      {
        char const *in_end = in + inlen;
        char const *non_nl;

        if (ignore_newlines)
 8051212:	80 7c 24 0e 00       	cmpb   $0x0,0xe(%esp)
      /* Restore OUT and OUTLEFT.  */
      out -= outleft_save - outleft;
      outleft = outleft_save;

      {
        char const *in_end = in + inlen;
 8051217:	8d 0c 2b             	lea    (%ebx,%ebp,1),%ecx
          continue;
        }

      /* Restore OUT and OUTLEFT.  */
      out -= outleft_save - outleft;
      outleft = outleft_save;
 805121a:	89 7c 24 1c          	mov    %edi,0x1c(%esp)

      {
        char const *in_end = in + inlen;
 805121e:	89 0c 24             	mov    %ecx,(%esp)
        char const *non_nl;

        if (ignore_newlines)
 8051221:	0f 84 8d 14 00 00    	je     80526b4 <base64_decode_ctx+0x1a64>
 8051227:	90                   	nop
 8051228:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805122c:	89 3c 24             	mov    %edi,(%esp)
 805122f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051233:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051237:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805123b:	b9 1f 50 00 00       	mov    $0x501f,%ecx
 8051240:	e8 33 20 00 00       	call   8053278 <__afl_maybe_log>
 8051245:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051249:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805124d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051251:	8b 3c 24             	mov    (%esp),%edi
 8051254:	8d 64 24 10          	lea    0x10(%esp),%esp
          non_nl = ({if (((in)) && ((in)))  {int lava_798 = 0;
          lava_798 |= ((unsigned char *) (in))[0] << (0*8);lava_798 |= ((unsigned char *) (in))[1] << (1*8);lava_798 |= ((unsigned char *) (in))[2] << (2*8);lava_798 |= ((unsigned char *) (in))[3] << (3*8);lava_set(798,lava_798);
 8051258:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805125c:	89 3c 24             	mov    %edi,(%esp)
 805125f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051263:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051267:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805126b:	b9 aa 10 00 00       	mov    $0x10aa,%ecx
 8051270:	e8 03 20 00 00       	call   8053278 <__afl_maybe_log>
 8051275:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051279:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805127d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051281:	8b 3c 24             	mov    (%esp),%edi
 8051284:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051288:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 805128c:	0f b6 7b 02          	movzbl 0x2(%ebx),%edi
 8051290:	83 ec 08             	sub    $0x8,%esp
 8051293:	0f b6 2b             	movzbl (%ebx),%ebp
 8051296:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 805129a:	c1 e0 08             	shl    $0x8,%eax
 805129d:	c1 e7 10             	shl    $0x10,%edi
 80512a0:	09 c7                	or     %eax,%edi
 80512a2:	c1 e2 18             	shl    $0x18,%edx
 80512a5:	09 ef                	or     %ebp,%edi
 80512a7:	09 d7                	or     %edx,%edi
 80512a9:	57                   	push   %edi
 80512aa:	68 1e 03 00 00       	push   $0x31e
 80512af:	e8 6c b2 ff ff       	call   804c520 <lava_set>
          int lava_576 = 0;
          lava_576 |= ((unsigned char *) (in))[0] << (0*8);lava_576 |= ((unsigned char *) (in))[1] << (1*8);lava_576 |= ((unsigned char *) (in))[2] << (2*8);lava_576 |= ((unsigned char *) (in))[3] << (3*8);lava_set(576,lava_576);
 80512b4:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
 80512b8:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 80512bc:	0f b6 3b             	movzbl (%ebx),%edi
 80512bf:	0f b6 6b 03          	movzbl 0x3(%ebx),%ebp
 80512c3:	5e                   	pop    %esi
 80512c4:	c1 e1 08             	shl    $0x8,%ecx
 80512c7:	c1 e0 10             	shl    $0x10,%eax
 80512ca:	09 c8                	or     %ecx,%eax
 80512cc:	c1 e5 18             	shl    $0x18,%ebp
 80512cf:	09 f8                	or     %edi,%eax
 80512d1:	5f                   	pop    %edi
 80512d2:	09 e8                	or     %ebp,%eax
 80512d4:	50                   	push   %eax
 80512d5:	68 40 02 00 00       	push   $0x240
 80512da:	e8 41 b2 ff ff       	call   804c520 <lava_set>
          int lava_835 = 0;
          lava_835 |= ((unsigned char *) (in))[0] << (0*8);lava_835 |= ((unsigned char *) (in))[1] << (1*8);lava_835 |= ((unsigned char *) (in))[2] << (2*8);lava_835 |= ((unsigned char *) (in))[3] << (3*8);lava_set(835,lava_835);
 80512df:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 80512e3:	0f b6 73 02          	movzbl 0x2(%ebx),%esi
 80512e7:	0f b6 03             	movzbl (%ebx),%eax
 80512ea:	0f b6 5b 03          	movzbl 0x3(%ebx),%ebx
 80512ee:	5d                   	pop    %ebp
 80512ef:	c1 e2 08             	shl    $0x8,%edx
 80512f2:	c1 e6 10             	shl    $0x10,%esi
 80512f5:	09 d6                	or     %edx,%esi
 80512f7:	c1 e3 18             	shl    $0x18,%ebx
 80512fa:	5a                   	pop    %edx
 80512fb:	09 c6                	or     %eax,%esi
 80512fd:	09 de                	or     %ebx,%esi
 80512ff:	56                   	push   %esi
 8051300:	68 43 03 00 00       	push   $0x343
 8051305:	e8 16 b2 ff ff       	call   804c520 <lava_set>
 805130a:	83 c4 10             	add    $0x10,%esp
          }if (((in_end)) && ((in_end)))  {int lava_526 = 0;
 805130d:	8b 3c 24             	mov    (%esp),%edi
 8051310:	85 ff                	test   %edi,%edi
 8051312:	0f 84 8a 00 00 00    	je     80513a2 <base64_decode_ctx+0x752>
 8051318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805131c:	89 3c 24             	mov    %edi,(%esp)
 805131f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805132b:	b9 22 30 00 00       	mov    $0x3022,%ecx
 8051330:	e8 43 1f 00 00       	call   8053278 <__afl_maybe_log>
 8051335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805133d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051341:	8b 3c 24             	mov    (%esp),%edi
 8051344:	8d 64 24 10          	lea    0x10(%esp),%esp
          lava_526 |= ((unsigned char *) (in_end))[0] << (0*8);lava_526 |= ((unsigned char *) (in_end))[1] << (1*8);lava_526 |= ((unsigned char *) (in_end))[2] << (2*8);lava_526 |= ((unsigned char *) (in_end))[3] << (3*8);lava_set(526,lava_526);
 8051348:	0f b6 57 01          	movzbl 0x1(%edi),%edx
 805134c:	0f b6 47 02          	movzbl 0x2(%edi),%eax
 8051350:	83 ec 08             	sub    $0x8,%esp
 8051353:	0f b6 1f             	movzbl (%edi),%ebx
 8051356:	0f b6 6f 03          	movzbl 0x3(%edi),%ebp
 805135a:	c1 e2 08             	shl    $0x8,%edx
 805135d:	c1 e0 10             	shl    $0x10,%eax
 8051360:	09 d0                	or     %edx,%eax
 8051362:	c1 e5 18             	shl    $0x18,%ebp
 8051365:	09 d8                	or     %ebx,%eax
 8051367:	09 e8                	or     %ebp,%eax
 8051369:	50                   	push   %eax
 805136a:	68 0e 02 00 00       	push   $0x20e
 805136f:	e8 ac b1 ff ff       	call   804c520 <lava_set>
          int lava_527 = 0;
          lava_527 |= ((unsigned char *) (in_end))[0] << (0*8);lava_527 |= ((unsigned char *) (in_end))[1] << (1*8);lava_527 |= ((unsigned char *) (in_end))[2] << (2*8);lava_527 |= ((unsigned char *) (in_end))[3] << (3*8);lava_set(527,lava_527);
 8051374:	0f b6 57 01          	movzbl 0x1(%edi),%edx
 8051378:	0f b6 77 02          	movzbl 0x2(%edi),%esi
 805137c:	0f b6 07             	movzbl (%edi),%eax
 805137f:	0f b6 7f 03          	movzbl 0x3(%edi),%edi
 8051383:	c1 e2 08             	shl    $0x8,%edx
 8051386:	c1 e6 10             	shl    $0x10,%esi
 8051389:	09 d6                	or     %edx,%esi
 805138b:	c1 e7 18             	shl    $0x18,%edi
 805138e:	5a                   	pop    %edx
 805138f:	09 c6                	or     %eax,%esi
 8051391:	59                   	pop    %ecx
 8051392:	09 fe                	or     %edi,%esi
 8051394:	56                   	push   %esi
 8051395:	68 0f 02 00 00       	push   $0x20f
 805139a:	e8 81 b1 ff ff       	call   804c520 <lava_set>
 805139f:	83 c4 10             	add    $0x10,%esp
 80513a2:	66 90                	xchg   %ax,%ax
          }char * kbcieiubweuhc2145174067 = get_4 (ctx+(lava_get(222))*(0x6c617583==(lava_get(222))||0x8375616c==(lava_get(222))), &in+(lava_get(235))*(0x6c617576==(lava_get(235))||0x7675616c==(lava_get(235))), in_end+(lava_get(526))*(0x6c617453==(lava_get(526))||0x5374616c==(lava_get(526))), &inlen);if (((in)) && ((in)))  {int lava_284 = 0;
 80513a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80513a8:	89 3c 24             	mov    %edi,(%esp)
 80513ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80513af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80513b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80513b7:	b9 21 f8 00 00       	mov    $0xf821,%ecx
 80513bc:	e8 b7 1e 00 00       	call   8053278 <__afl_maybe_log>
 80513c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80513c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80513c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80513cd:	8b 3c 24             	mov    (%esp),%edi
 80513d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80513d4:	83 ec 0c             	sub    $0xc,%esp
 80513d7:	68 0e 02 00 00       	push   $0x20e
 80513dc:	e8 7f b1 ff ff       	call   804c560 <lava_get>
 80513e1:	c7 04 24 0e 02 00 00 	movl   $0x20e,(%esp)
 80513e8:	89 c3                	mov    %eax,%ebx
 80513ea:	e8 71 b1 ff ff       	call   804c560 <lava_get>
 80513ef:	83 c4 10             	add    $0x10,%esp
 80513f2:	3d 53 74 61 6c       	cmp    $0x6c617453,%eax
 80513f7:	ba 01 00 00 00       	mov    $0x1,%edx
 80513fc:	74 4c                	je     805144a <base64_decode_ctx+0x7fa>
 80513fe:	66 90                	xchg   %ax,%ax
 8051400:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051404:	89 3c 24             	mov    %edi,(%esp)
 8051407:	89 54 24 04          	mov    %edx,0x4(%esp)
 805140b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805140f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051413:	b9 bc 93 00 00       	mov    $0x93bc,%ecx
 8051418:	e8 5b 1e 00 00       	call   8053278 <__afl_maybe_log>
 805141d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051421:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051425:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051429:	8b 3c 24             	mov    (%esp),%edi
 805142c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051430:	83 ec 0c             	sub    $0xc,%esp
 8051433:	68 0e 02 00 00       	push   $0x20e
 8051438:	e8 23 b1 ff ff       	call   804c560 <lava_get>
 805143d:	31 d2                	xor    %edx,%edx
 805143f:	83 c4 10             	add    $0x10,%esp
 8051442:	3d 6c 61 74 53       	cmp    $0x5374616c,%eax
 8051447:	0f 94 c2             	sete   %dl
 805144a:	66 90                	xchg   %ax,%ax
 805144c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051450:	89 3c 24             	mov    %edi,(%esp)
 8051453:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051457:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805145b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805145f:	b9 ad b6 00 00       	mov    $0xb6ad,%ecx
 8051464:	e8 0f 1e 00 00       	call   8053278 <__afl_maybe_log>
 8051469:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805146d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051471:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051475:	8b 3c 24             	mov    (%esp),%edi
 8051478:	8d 64 24 10          	lea    0x10(%esp),%esp
 805147c:	89 d7                	mov    %edx,%edi
 805147e:	83 ec 0c             	sub    $0xc,%esp
 8051481:	0f af fb             	imul   %ebx,%edi
 8051484:	03 7c 24 0c          	add    0xc(%esp),%edi
 8051488:	68 eb 00 00 00       	push   $0xeb
 805148d:	e8 ce b0 ff ff       	call   804c560 <lava_get>
 8051492:	c7 04 24 eb 00 00 00 	movl   $0xeb,(%esp)
 8051499:	89 c5                	mov    %eax,%ebp
 805149b:	e8 c0 b0 ff ff       	call   804c560 <lava_get>
 80514a0:	83 c4 10             	add    $0x10,%esp
 80514a3:	3d 76 75 61 6c       	cmp    $0x6c617576,%eax
 80514a8:	b9 01 00 00 00       	mov    $0x1,%ecx
 80514ad:	74 4b                	je     80514fa <base64_decode_ctx+0x8aa>
 80514af:	90                   	nop
 80514b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80514b4:	89 3c 24             	mov    %edi,(%esp)
 80514b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80514bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80514bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80514c3:	b9 da 77 00 00       	mov    $0x77da,%ecx
 80514c8:	e8 ab 1d 00 00       	call   8053278 <__afl_maybe_log>
 80514cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80514d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80514d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80514d9:	8b 3c 24             	mov    (%esp),%edi
 80514dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80514e0:	83 ec 0c             	sub    $0xc,%esp
 80514e3:	68 eb 00 00 00       	push   $0xeb
 80514e8:	e8 73 b0 ff ff       	call   804c560 <lava_get>
 80514ed:	31 c9                	xor    %ecx,%ecx
 80514ef:	83 c4 10             	add    $0x10,%esp
 80514f2:	3d 6c 61 75 76       	cmp    $0x7675616c,%eax
 80514f7:	0f 94 c1             	sete   %cl
 80514fa:	66 90                	xchg   %ax,%ax
 80514fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051500:	89 3c 24             	mov    %edi,(%esp)
 8051503:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051507:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805150b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805150f:	b9 7e f8 00 00       	mov    $0xf87e,%ecx
 8051514:	e8 5f 1d 00 00       	call   8053278 <__afl_maybe_log>
 8051519:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805151d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051521:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051525:	8b 3c 24             	mov    (%esp),%edi
 8051528:	8d 64 24 10          	lea    0x10(%esp),%esp
 805152c:	c1 e5 02             	shl    $0x2,%ebp
 805152f:	0f af cd             	imul   %ebp,%ecx
 8051532:	8d 74 0c 44          	lea    0x44(%esp,%ecx,1),%esi
 8051536:	83 ec 0c             	sub    $0xc,%esp
 8051539:	89 74 24 10          	mov    %esi,0x10(%esp)
 805153d:	68 de 00 00 00       	push   $0xde
 8051542:	e8 19 b0 ff ff       	call   804c560 <lava_get>
 8051547:	c7 04 24 de 00 00 00 	movl   $0xde,(%esp)
 805154e:	89 c3                	mov    %eax,%ebx
 8051550:	e8 0b b0 ff ff       	call   804c560 <lava_get>
 8051555:	83 c4 10             	add    $0x10,%esp
 8051558:	3d 83 75 61 6c       	cmp    $0x6c617583,%eax
 805155d:	ba 01 00 00 00       	mov    $0x1,%edx
 8051562:	74 4a                	je     80515ae <base64_decode_ctx+0x95e>
 8051564:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051568:	89 3c 24             	mov    %edi,(%esp)
 805156b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805156f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051573:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051577:	b9 e9 27 00 00       	mov    $0x27e9,%ecx
 805157c:	e8 f7 1c 00 00       	call   8053278 <__afl_maybe_log>
 8051581:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051585:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051589:	8b 54 24 04          	mov    0x4(%esp),%edx
 805158d:	8b 3c 24             	mov    (%esp),%edi
 8051590:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051594:	83 ec 0c             	sub    $0xc,%esp
 8051597:	68 de 00 00 00       	push   $0xde
 805159c:	e8 bf af ff ff       	call   804c560 <lava_get>
 80515a1:	31 d2                	xor    %edx,%edx
 80515a3:	83 c4 10             	add    $0x10,%esp
 80515a6:	3d 6c 61 75 83       	cmp    $0x8375616c,%eax
 80515ab:	0f 94 c2             	sete   %dl
 80515ae:	66 90                	xchg   %ax,%ax
 80515b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80515b4:	89 3c 24             	mov    %edi,(%esp)
 80515b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80515bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80515bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80515c3:	b9 72 6e 00 00       	mov    $0x6e72,%ecx
 80515c8:	e8 ab 1c 00 00       	call   8053278 <__afl_maybe_log>
 80515cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80515d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80515d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80515d9:	8b 3c 24             	mov    (%esp),%edi
 80515dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80515e0:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
 80515e7:	0f af f2             	imul   %edx,%esi
 80515ea:	03 74 24 40          	add    0x40(%esp),%esi
static char *
get_4 (struct base64_decode_context *ctx,
       char const *restrict *in, char const *restrict in_end,
       size_t *n_non_newline)
{
  if (ctx->i == 4)
 80515ee:	8b 2e                	mov    (%esi),%ebp
 80515f0:	83 fd 04             	cmp    $0x4,%ebp
 80515f3:	0f 84 67 17 00 00    	je     8052d60 <base64_decode_ctx+0x2110>
 80515f9:	8d 76 00             	lea    0x0(%esi),%esi
 80515fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051600:	89 3c 24             	mov    %edi,(%esp)
 8051603:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051607:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805160b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805160f:	b9 54 f3 00 00       	mov    $0xf354,%ecx
 8051614:	e8 5f 1c 00 00       	call   8053278 <__afl_maybe_log>
 8051619:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805161d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051621:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051625:	8b 3c 24             	mov    (%esp),%edi
 8051628:	8d 64 24 10          	lea    0x10(%esp),%esp
    ctx->i = 0;

  if (ctx->i == 0)
 805162c:	85 ed                	test   %ebp,%ebp
 805162e:	0f 84 32 17 00 00    	je     8052d66 <base64_decode_ctx+0x2116>
 8051634:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051638:	89 3c 24             	mov    %edi,(%esp)
 805163b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805163f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051643:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051647:	b9 37 7f 00 00       	mov    $0x7f37,%ecx
 805164c:	e8 27 1c 00 00       	call   8053278 <__afl_maybe_log>
 8051651:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051655:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051659:	8b 54 24 04          	mov    0x4(%esp),%edx
 805165d:	8b 3c 24             	mov    (%esp),%edi
 8051660:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051664:	8b 44 24 04          	mov    0x4(%esp),%eax
 8051668:	8b 18                	mov    (%eax),%ebx
    }

  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
 805166a:	39 df                	cmp    %ebx,%edi
 805166c:	0f 86 e2 18 00 00    	jbe    8052f54 <base64_decode_ctx+0x2304>
 8051672:	66 90                	xchg   %ax,%ax
 8051674:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051678:	89 3c 24             	mov    %edi,(%esp)
 805167b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805167f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051683:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051687:	b9 3f 45 00 00       	mov    $0x453f,%ecx
 805168c:	e8 e7 1b 00 00       	call   8053278 <__afl_maybe_log>
 8051691:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051695:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051699:	8b 54 24 04          	mov    0x4(%esp),%edx
 805169d:	8b 3c 24             	mov    (%esp),%edi
 80516a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80516a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80516a8:	89 3c 24             	mov    %edi,(%esp)
 80516ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80516af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80516b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80516b7:	b9 5e 41 00 00       	mov    $0x415e,%ecx
 80516bc:	e8 b7 1b 00 00       	call   8053278 <__afl_maybe_log>
 80516c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80516c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80516c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80516cd:	8b 3c 24             	mov    (%esp),%edi
 80516d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80516d4:	89 d8                	mov    %ebx,%eax
      {
        char c = *p++;
 80516d6:	83 c3 01             	add    $0x1,%ebx
 80516d9:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
 80516dd:	f7 d0                	not    %eax
 80516df:	01 f8                	add    %edi,%eax
 80516e1:	83 e0 07             	and    $0x7,%eax
        if (c != '\n')
 80516e4:	80 f9 0a             	cmp    $0xa,%cl
 80516e7:	74 79                	je     8051762 <base64_decode_ctx+0xb12>
 80516e9:	8d 76 00             	lea    0x0(%esi),%esi
 80516ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80516f0:	89 3c 24             	mov    %edi,(%esp)
 80516f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80516f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80516fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80516ff:	b9 cb 7a 00 00       	mov    $0x7acb,%ecx
 8051704:	e8 6f 1b 00 00       	call   8053278 <__afl_maybe_log>
 8051709:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805170d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051711:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051715:	8b 3c 24             	mov    (%esp),%edi
 8051718:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 805171c:	8d 55 01             	lea    0x1(%ebp),%edx
            if (ctx->i == 4)
 805171f:	83 fa 04             	cmp    $0x4,%edx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8051722:	89 16                	mov    %edx,(%esi)
 8051724:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8051728:	0f 84 42 0d 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 805172e:	66 90                	xchg   %ax,%ax
 8051730:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051734:	89 3c 24             	mov    %edi,(%esp)
 8051737:	89 54 24 04          	mov    %edx,0x4(%esp)
 805173b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805173f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051743:	b9 26 10 00 00       	mov    $0x1026,%ecx
 8051748:	e8 2b 1b 00 00       	call   8053278 <__afl_maybe_log>
 805174d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051751:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051755:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051759:	8b 3c 24             	mov    (%esp),%edi
 805175c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051760:	89 d5                	mov    %edx,%ebp
 8051762:	66 90                	xchg   %ax,%ax
    }

  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
 8051764:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051768:	89 3c 24             	mov    %edi,(%esp)
 805176b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805176f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051773:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051777:	b9 70 7a 00 00       	mov    $0x7a70,%ecx
 805177c:	e8 f7 1a 00 00       	call   8053278 <__afl_maybe_log>
 8051781:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051785:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051789:	8b 54 24 04          	mov    0x4(%esp),%edx
 805178d:	8b 3c 24             	mov    (%esp),%edi
 8051790:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051794:	39 fb                	cmp    %edi,%ebx
 8051796:	0f 84 db 0c 00 00    	je     8052477 <base64_decode_ctx+0x1827>
 805179c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80517a0:	89 3c 24             	mov    %edi,(%esp)
 80517a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80517a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80517ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80517af:	b9 9f fd 00 00       	mov    $0xfd9f,%ecx
 80517b4:	e8 bf 1a 00 00       	call   8053278 <__afl_maybe_log>
 80517b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80517bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80517c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80517c5:	8b 3c 24             	mov    (%esp),%edi
 80517c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80517cc:	85 c0                	test   %eax,%eax
 80517ce:	0f 84 f0 06 00 00    	je     8051ec4 <base64_decode_ctx+0x1274>
 80517d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80517d8:	89 3c 24             	mov    %edi,(%esp)
 80517db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80517df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80517e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80517e7:	b9 51 1f 00 00       	mov    $0x1f51,%ecx
 80517ec:	e8 87 1a 00 00       	call   8053278 <__afl_maybe_log>
 80517f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80517f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80517f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80517fd:	8b 3c 24             	mov    (%esp),%edi
 8051800:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051804:	83 f8 01             	cmp    $0x1,%eax
 8051807:	0f 84 65 05 00 00    	je     8051d72 <base64_decode_ctx+0x1122>
 805180d:	8d 76 00             	lea    0x0(%esi),%esi
 8051810:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051814:	89 3c 24             	mov    %edi,(%esp)
 8051817:	89 54 24 04          	mov    %edx,0x4(%esp)
 805181b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805181f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051823:	b9 54 50 00 00       	mov    $0x5054,%ecx
 8051828:	e8 4b 1a 00 00       	call   8053278 <__afl_maybe_log>
 805182d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051831:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051835:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051839:	8b 3c 24             	mov    (%esp),%edi
 805183c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051840:	83 f8 02             	cmp    $0x2,%eax
 8051843:	0f 84 75 04 00 00    	je     8051cbe <base64_decode_ctx+0x106e>
 8051849:	8d 76 00             	lea    0x0(%esi),%esi
 805184c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051850:	89 3c 24             	mov    %edi,(%esp)
 8051853:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051857:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805185b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805185f:	b9 41 67 00 00       	mov    $0x6741,%ecx
 8051864:	e8 0f 1a 00 00       	call   8053278 <__afl_maybe_log>
 8051869:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805186d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051871:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051875:	8b 3c 24             	mov    (%esp),%edi
 8051878:	8d 64 24 10          	lea    0x10(%esp),%esp
 805187c:	83 f8 03             	cmp    $0x3,%eax
 805187f:	0f 84 85 03 00 00    	je     8051c0a <base64_decode_ctx+0xfba>
 8051885:	8d 76 00             	lea    0x0(%esi),%esi
 8051888:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805188c:	89 3c 24             	mov    %edi,(%esp)
 805188f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051893:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051897:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805189b:	b9 27 dd 00 00       	mov    $0xdd27,%ecx
 80518a0:	e8 d3 19 00 00       	call   8053278 <__afl_maybe_log>
 80518a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80518a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80518ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80518b1:	8b 3c 24             	mov    (%esp),%edi
 80518b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80518b8:	83 f8 04             	cmp    $0x4,%eax
 80518bb:	0f 84 95 02 00 00    	je     8051b56 <base64_decode_ctx+0xf06>
 80518c1:	8d 76 00             	lea    0x0(%esi),%esi
 80518c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80518c8:	89 3c 24             	mov    %edi,(%esp)
 80518cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80518cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80518d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80518d7:	b9 88 f6 00 00       	mov    $0xf688,%ecx
 80518dc:	e8 97 19 00 00       	call   8053278 <__afl_maybe_log>
 80518e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80518e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80518e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80518ed:	8b 3c 24             	mov    (%esp),%edi
 80518f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80518f4:	83 f8 05             	cmp    $0x5,%eax
 80518f7:	0f 84 a5 01 00 00    	je     8051aa2 <base64_decode_ctx+0xe52>
 80518fd:	8d 76 00             	lea    0x0(%esi),%esi
 8051900:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051904:	89 3c 24             	mov    %edi,(%esp)
 8051907:	89 54 24 04          	mov    %edx,0x4(%esp)
 805190b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805190f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051913:	b9 30 4b 00 00       	mov    $0x4b30,%ecx
 8051918:	e8 5b 19 00 00       	call   8053278 <__afl_maybe_log>
 805191d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051921:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051925:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051929:	8b 3c 24             	mov    (%esp),%edi
 805192c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051930:	83 f8 06             	cmp    $0x6,%eax
 8051933:	0f 84 b5 00 00 00    	je     80519ee <base64_decode_ctx+0xd9e>
 8051939:	8d 76 00             	lea    0x0(%esi),%esi
 805193c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051940:	89 3c 24             	mov    %edi,(%esp)
 8051943:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051947:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805194b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805194f:	b9 d2 51 00 00       	mov    $0x51d2,%ecx
 8051954:	e8 1f 19 00 00       	call   8053278 <__afl_maybe_log>
 8051959:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805195d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051961:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051965:	8b 3c 24             	mov    (%esp),%edi
 8051968:	8d 64 24 10          	lea    0x10(%esp),%esp
      {
        char c = *p++;
 805196c:	83 c3 01             	add    $0x1,%ebx
 805196f:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 8051973:	80 f9 0a             	cmp    $0xa,%cl
 8051976:	74 76                	je     80519ee <base64_decode_ctx+0xd9e>
 8051978:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805197c:	89 3c 24             	mov    %edi,(%esp)
 805197f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051983:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051987:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805198b:	b9 04 78 00 00       	mov    $0x7804,%ecx
 8051990:	e8 e3 18 00 00       	call   8053278 <__afl_maybe_log>
 8051995:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051999:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805199d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80519a1:	8b 3c 24             	mov    (%esp),%edi
 80519a4:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 80519a8:	8d 45 01             	lea    0x1(%ebp),%eax
            if (ctx->i == 4)
 80519ab:	83 f8 04             	cmp    $0x4,%eax
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 80519ae:	89 06                	mov    %eax,(%esi)
 80519b0:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 80519b4:	0f 84 b6 0a 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 80519ba:	66 90                	xchg   %ax,%ax
 80519bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80519c0:	89 3c 24             	mov    %edi,(%esp)
 80519c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80519c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80519cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80519cf:	b9 5f fd 00 00       	mov    $0xfd5f,%ecx
 80519d4:	e8 9f 18 00 00       	call   8053278 <__afl_maybe_log>
 80519d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80519dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80519e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80519e5:	8b 3c 24             	mov    (%esp),%edi
 80519e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80519ec:	89 c5                	mov    %eax,%ebp
 80519ee:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 80519f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80519f4:	89 3c 24             	mov    %edi,(%esp)
 80519f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80519fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80519ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051a03:	b9 07 e4 00 00       	mov    $0xe407,%ecx
 8051a08:	e8 6b 18 00 00       	call   8053278 <__afl_maybe_log>
 8051a0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051a11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051a15:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051a19:	8b 3c 24             	mov    (%esp),%edi
 8051a1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051a20:	83 c3 01             	add    $0x1,%ebx
 8051a23:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
        if (c != '\n')
 8051a27:	80 fa 0a             	cmp    $0xa,%dl
 8051a2a:	74 76                	je     8051aa2 <base64_decode_ctx+0xe52>
 8051a2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051a30:	89 3c 24             	mov    %edi,(%esp)
 8051a33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051a37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051a3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051a3f:	b9 5a 9e 00 00       	mov    $0x9e5a,%ecx
 8051a44:	e8 2f 18 00 00       	call   8053278 <__afl_maybe_log>
 8051a49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051a4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051a51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051a55:	8b 3c 24             	mov    (%esp),%edi
 8051a58:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8051a5c:	8d 4d 01             	lea    0x1(%ebp),%ecx
            if (ctx->i == 4)
 8051a5f:	83 f9 04             	cmp    $0x4,%ecx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8051a62:	89 0e                	mov    %ecx,(%esi)
 8051a64:	88 54 2e 04          	mov    %dl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8051a68:	0f 84 02 0a 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8051a6e:	66 90                	xchg   %ax,%ax
 8051a70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051a74:	89 3c 24             	mov    %edi,(%esp)
 8051a77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051a7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051a7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051a83:	b9 76 6d 00 00       	mov    $0x6d76,%ecx
 8051a88:	e8 eb 17 00 00       	call   8053278 <__afl_maybe_log>
 8051a8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051a91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051a95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051a99:	8b 3c 24             	mov    (%esp),%edi
 8051a9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051aa0:	89 cd                	mov    %ecx,%ebp
 8051aa2:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 8051aa4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051aa8:	89 3c 24             	mov    %edi,(%esp)
 8051aab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051aaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ab3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051ab7:	b9 df d7 00 00       	mov    $0xd7df,%ecx
 8051abc:	e8 b7 17 00 00       	call   8053278 <__afl_maybe_log>
 8051ac1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ac5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051ac9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051acd:	8b 3c 24             	mov    (%esp),%edi
 8051ad0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051ad4:	83 c3 01             	add    $0x1,%ebx
 8051ad7:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
        if (c != '\n')
 8051adb:	80 fa 0a             	cmp    $0xa,%dl
 8051ade:	74 76                	je     8051b56 <base64_decode_ctx+0xf06>
 8051ae0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051ae4:	89 3c 24             	mov    %edi,(%esp)
 8051ae7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051aeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051aef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051af3:	b9 10 e4 00 00       	mov    $0xe410,%ecx
 8051af8:	e8 7b 17 00 00       	call   8053278 <__afl_maybe_log>
 8051afd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051b01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051b05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051b09:	8b 3c 24             	mov    (%esp),%edi
 8051b0c:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8051b10:	8d 45 01             	lea    0x1(%ebp),%eax
            if (ctx->i == 4)
 8051b13:	83 f8 04             	cmp    $0x4,%eax
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8051b16:	89 06                	mov    %eax,(%esi)
 8051b18:	88 54 2e 04          	mov    %dl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8051b1c:	0f 84 4e 09 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8051b22:	66 90                	xchg   %ax,%ax
 8051b24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051b28:	89 3c 24             	mov    %edi,(%esp)
 8051b2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051b2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051b33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051b37:	b9 6d 9e 00 00       	mov    $0x9e6d,%ecx
 8051b3c:	e8 37 17 00 00       	call   8053278 <__afl_maybe_log>
 8051b41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051b45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051b49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051b4d:	8b 3c 24             	mov    (%esp),%edi
 8051b50:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051b54:	89 c5                	mov    %eax,%ebp
 8051b56:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 8051b58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051b5c:	89 3c 24             	mov    %edi,(%esp)
 8051b5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051b63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051b67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051b6b:	b9 e3 fc 00 00       	mov    $0xfce3,%ecx
 8051b70:	e8 03 17 00 00       	call   8053278 <__afl_maybe_log>
 8051b75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051b79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051b7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051b81:	8b 3c 24             	mov    (%esp),%edi
 8051b84:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051b88:	83 c3 01             	add    $0x1,%ebx
 8051b8b:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 8051b8f:	80 f9 0a             	cmp    $0xa,%cl
 8051b92:	74 76                	je     8051c0a <base64_decode_ctx+0xfba>
 8051b94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051b98:	89 3c 24             	mov    %edi,(%esp)
 8051b9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051b9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ba3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051ba7:	b9 71 d7 00 00       	mov    $0xd771,%ecx
 8051bac:	e8 c7 16 00 00       	call   8053278 <__afl_maybe_log>
 8051bb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051bb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051bb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051bbd:	8b 3c 24             	mov    (%esp),%edi
 8051bc0:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8051bc4:	8d 55 01             	lea    0x1(%ebp),%edx
            if (ctx->i == 4)
 8051bc7:	83 fa 04             	cmp    $0x4,%edx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8051bca:	89 16                	mov    %edx,(%esi)
 8051bcc:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8051bd0:	0f 84 9a 08 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8051bd6:	66 90                	xchg   %ax,%ax
 8051bd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051bdc:	89 3c 24             	mov    %edi,(%esp)
 8051bdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051be3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051be7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051beb:	b9 cd 70 00 00       	mov    $0x70cd,%ecx
 8051bf0:	e8 83 16 00 00       	call   8053278 <__afl_maybe_log>
 8051bf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051bf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051bfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051c01:	8b 3c 24             	mov    (%esp),%edi
 8051c04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051c08:	89 d5                	mov    %edx,%ebp
 8051c0a:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 8051c0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051c10:	89 3c 24             	mov    %edi,(%esp)
 8051c13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051c17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051c1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051c1f:	b9 39 54 00 00       	mov    $0x5439,%ecx
 8051c24:	e8 4f 16 00 00       	call   8053278 <__afl_maybe_log>
 8051c29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051c2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051c31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051c35:	8b 3c 24             	mov    (%esp),%edi
 8051c38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051c3c:	83 c3 01             	add    $0x1,%ebx
 8051c3f:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 8051c43:	80 f9 0a             	cmp    $0xa,%cl
 8051c46:	74 76                	je     8051cbe <base64_decode_ctx+0x106e>
 8051c48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051c4c:	89 3c 24             	mov    %edi,(%esp)
 8051c4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051c53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051c57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051c5b:	b9 ce 1d 00 00       	mov    $0x1dce,%ecx
 8051c60:	e8 13 16 00 00       	call   8053278 <__afl_maybe_log>
 8051c65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051c69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051c6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051c71:	8b 3c 24             	mov    (%esp),%edi
 8051c74:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8051c78:	8d 45 01             	lea    0x1(%ebp),%eax
            if (ctx->i == 4)
 8051c7b:	83 f8 04             	cmp    $0x4,%eax
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8051c7e:	89 06                	mov    %eax,(%esi)
 8051c80:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8051c84:	0f 84 e6 07 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8051c8a:	66 90                	xchg   %ax,%ax
 8051c8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051c90:	89 3c 24             	mov    %edi,(%esp)
 8051c93:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051c97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051c9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051c9f:	b9 99 23 00 00       	mov    $0x2399,%ecx
 8051ca4:	e8 cf 15 00 00       	call   8053278 <__afl_maybe_log>
 8051ca9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051cad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051cb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051cb5:	8b 3c 24             	mov    (%esp),%edi
 8051cb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051cbc:	89 c5                	mov    %eax,%ebp
 8051cbe:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 8051cc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051cc4:	89 3c 24             	mov    %edi,(%esp)
 8051cc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051ccb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ccf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051cd3:	b9 32 69 00 00       	mov    $0x6932,%ecx
 8051cd8:	e8 9b 15 00 00       	call   8053278 <__afl_maybe_log>
 8051cdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ce1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051ce5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051ce9:	8b 3c 24             	mov    (%esp),%edi
 8051cec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051cf0:	83 c3 01             	add    $0x1,%ebx
 8051cf3:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
        if (c != '\n')
 8051cf7:	80 fa 0a             	cmp    $0xa,%dl
 8051cfa:	74 76                	je     8051d72 <base64_decode_ctx+0x1122>
 8051cfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051d00:	89 3c 24             	mov    %edi,(%esp)
 8051d03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051d07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051d0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051d0f:	b9 a0 22 00 00       	mov    $0x22a0,%ecx
 8051d14:	e8 5f 15 00 00       	call   8053278 <__afl_maybe_log>
 8051d19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051d1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051d21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051d25:	8b 3c 24             	mov    (%esp),%edi
 8051d28:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8051d2c:	8d 4d 01             	lea    0x1(%ebp),%ecx
            if (ctx->i == 4)
 8051d2f:	83 f9 04             	cmp    $0x4,%ecx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8051d32:	89 0e                	mov    %ecx,(%esi)
 8051d34:	88 54 2e 04          	mov    %dl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8051d38:	0f 84 32 07 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8051d3e:	66 90                	xchg   %ax,%ax
 8051d40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051d44:	89 3c 24             	mov    %edi,(%esp)
 8051d47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051d4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051d4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051d53:	b9 93 ba 00 00       	mov    $0xba93,%ecx
 8051d58:	e8 1b 15 00 00       	call   8053278 <__afl_maybe_log>
 8051d5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051d61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051d65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051d69:	8b 3c 24             	mov    (%esp),%edi
 8051d6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051d70:	89 cd                	mov    %ecx,%ebp
 8051d72:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 8051d74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051d78:	89 3c 24             	mov    %edi,(%esp)
 8051d7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051d7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051d83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051d87:	b9 71 d8 00 00       	mov    $0xd871,%ecx
 8051d8c:	e8 e7 14 00 00       	call   8053278 <__afl_maybe_log>
 8051d91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051d95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051d99:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051d9d:	8b 3c 24             	mov    (%esp),%edi
 8051da0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051da4:	83 c3 01             	add    $0x1,%ebx
 8051da7:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 8051dab:	80 f9 0a             	cmp    $0xa,%cl
 8051dae:	0f 84 a6 00 00 00    	je     8051e5a <base64_decode_ctx+0x120a>
 8051db4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051db8:	89 3c 24             	mov    %edi,(%esp)
 8051dbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051dbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051dc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051dc7:	b9 9d 62 00 00       	mov    $0x629d,%ecx
 8051dcc:	e8 a7 14 00 00       	call   8053278 <__afl_maybe_log>
 8051dd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051dd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051dd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051ddd:	8b 3c 24             	mov    (%esp),%edi
 8051de0:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8051de4:	8d 45 01             	lea    0x1(%ebp),%eax
            if (ctx->i == 4)
 8051de7:	83 f8 04             	cmp    $0x4,%eax
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8051dea:	89 06                	mov    %eax,(%esi)
 8051dec:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8051df0:	0f 84 7a 06 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8051df6:	66 90                	xchg   %ax,%ax
 8051df8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051dfc:	89 3c 24             	mov    %edi,(%esp)
 8051dff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051e03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051e07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051e0b:	b9 ff c3 00 00       	mov    $0xc3ff,%ecx
 8051e10:	e8 63 14 00 00       	call   8053278 <__afl_maybe_log>
 8051e15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051e19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051e1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051e21:	8b 3c 24             	mov    (%esp),%edi
 8051e24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051e28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051e2c:	89 3c 24             	mov    %edi,(%esp)
 8051e2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051e33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051e37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051e3b:	b9 f2 8f 00 00       	mov    $0x8ff2,%ecx
 8051e40:	e8 33 14 00 00       	call   8053278 <__afl_maybe_log>
 8051e45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051e49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051e4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051e51:	8b 3c 24             	mov    (%esp),%edi
 8051e54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051e58:	89 c5                	mov    %eax,%ebp
 8051e5a:	66 90                	xchg   %ax,%ax
    }

  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
 8051e5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051e60:	89 3c 24             	mov    %edi,(%esp)
 8051e63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051e67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051e6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051e6f:	b9 af 4d 00 00       	mov    $0x4daf,%ecx
 8051e74:	e8 ff 13 00 00       	call   8053278 <__afl_maybe_log>
 8051e79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051e7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051e81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051e85:	8b 3c 24             	mov    (%esp),%edi
 8051e88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051e8c:	39 fb                	cmp    %edi,%ebx
 8051e8e:	0f 84 e3 05 00 00    	je     8052477 <base64_decode_ctx+0x1827>
 8051e94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051e98:	89 3c 24             	mov    %edi,(%esp)
 8051e9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051e9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ea3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051ea7:	b9 2e ee 00 00       	mov    $0xee2e,%ecx
 8051eac:	e8 c7 13 00 00       	call   8053278 <__afl_maybe_log>
 8051eb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051eb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051eb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051ebd:	8b 3c 24             	mov    (%esp),%edi
 8051ec0:	8d 64 24 10          	lea    0x10(%esp),%esp
      {
        char c = *p++;
 8051ec4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051ec8:	89 3c 24             	mov    %edi,(%esp)
 8051ecb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051ecf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051ed3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051ed7:	b9 b2 55 00 00       	mov    $0x55b2,%ecx
 8051edc:	e8 97 13 00 00       	call   8053278 <__afl_maybe_log>
 8051ee1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051ee5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051ee9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051eed:	8b 3c 24             	mov    (%esp),%edi
 8051ef0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051ef4:	8d 43 01             	lea    0x1(%ebx),%eax
 8051ef7:	0f b6 48 ff          	movzbl -0x1(%eax),%ecx
 8051efb:	89 c3                	mov    %eax,%ebx
        if (c != '\n')
 8051efd:	80 f9 0a             	cmp    $0xa,%cl
 8051f00:	74 78                	je     8051f7a <base64_decode_ctx+0x132a>
 8051f02:	66 90                	xchg   %ax,%ax
 8051f04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051f08:	89 3c 24             	mov    %edi,(%esp)
 8051f0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051f0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051f13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051f17:	b9 dc a9 00 00       	mov    $0xa9dc,%ecx
 8051f1c:	e8 57 13 00 00       	call   8053278 <__afl_maybe_log>
 8051f21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051f25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051f29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051f2d:	8b 3c 24             	mov    (%esp),%edi
 8051f30:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8051f34:	8d 55 01             	lea    0x1(%ebp),%edx
            if (ctx->i == 4)
 8051f37:	83 fa 04             	cmp    $0x4,%edx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8051f3a:	89 16                	mov    %edx,(%esi)
 8051f3c:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8051f40:	0f 84 2a 05 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8051f46:	66 90                	xchg   %ax,%ax
 8051f48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051f4c:	89 3c 24             	mov    %edi,(%esp)
 8051f4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051f53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051f57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051f5b:	b9 49 38 00 00       	mov    $0x3849,%ecx
 8051f60:	e8 13 13 00 00       	call   8053278 <__afl_maybe_log>
 8051f65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051f69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051f6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051f71:	8b 3c 24             	mov    (%esp),%edi
 8051f74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051f78:	89 d5                	mov    %edx,%ebp
 8051f7a:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 8051f7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051f80:	89 3c 24             	mov    %edi,(%esp)
 8051f83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051f87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051f8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051f8f:	b9 d6 6b 00 00       	mov    $0x6bd6,%ecx
 8051f94:	e8 df 12 00 00       	call   8053278 <__afl_maybe_log>
 8051f99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051f9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051fa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051fa5:	8b 3c 24             	mov    (%esp),%edi
 8051fa8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8051fac:	8d 58 01             	lea    0x1(%eax),%ebx
 8051faf:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 8051fb3:	80 f9 0a             	cmp    $0xa,%cl
 8051fb6:	74 76                	je     805202e <base64_decode_ctx+0x13de>
 8051fb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8051fbc:	89 3c 24             	mov    %edi,(%esp)
 8051fbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8051fc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8051fc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8051fcb:	b9 9d 68 00 00       	mov    $0x689d,%ecx
 8051fd0:	e8 a3 12 00 00       	call   8053278 <__afl_maybe_log>
 8051fd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8051fd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8051fdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8051fe1:	8b 3c 24             	mov    (%esp),%edi
 8051fe4:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8051fe8:	8d 55 01             	lea    0x1(%ebp),%edx
            if (ctx->i == 4)
 8051feb:	83 fa 04             	cmp    $0x4,%edx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8051fee:	89 16                	mov    %edx,(%esi)
 8051ff0:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8051ff4:	0f 84 76 04 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8051ffa:	66 90                	xchg   %ax,%ax
 8051ffc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052000:	89 3c 24             	mov    %edi,(%esp)
 8052003:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052007:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805200b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805200f:	b9 43 d7 00 00       	mov    $0xd743,%ecx
 8052014:	e8 5f 12 00 00       	call   8053278 <__afl_maybe_log>
 8052019:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805201d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052021:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052025:	8b 3c 24             	mov    (%esp),%edi
 8052028:	8d 64 24 10          	lea    0x10(%esp),%esp
 805202c:	89 d5                	mov    %edx,%ebp
 805202e:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 8052030:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052034:	89 3c 24             	mov    %edi,(%esp)
 8052037:	89 54 24 04          	mov    %edx,0x4(%esp)
 805203b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805203f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052043:	b9 a2 f2 00 00       	mov    $0xf2a2,%ecx
 8052048:	e8 2b 12 00 00       	call   8053278 <__afl_maybe_log>
 805204d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052051:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052055:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052059:	8b 3c 24             	mov    (%esp),%edi
 805205c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052060:	8d 58 02             	lea    0x2(%eax),%ebx
 8052063:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 8052067:	80 f9 0a             	cmp    $0xa,%cl
 805206a:	74 76                	je     80520e2 <base64_decode_ctx+0x1492>
 805206c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052070:	89 3c 24             	mov    %edi,(%esp)
 8052073:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052077:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805207b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805207f:	b9 a2 01 00 00       	mov    $0x1a2,%ecx
 8052084:	e8 ef 11 00 00       	call   8053278 <__afl_maybe_log>
 8052089:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805208d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052091:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052095:	8b 3c 24             	mov    (%esp),%edi
 8052098:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 805209c:	8d 55 01             	lea    0x1(%ebp),%edx
            if (ctx->i == 4)
 805209f:	83 fa 04             	cmp    $0x4,%edx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 80520a2:	89 16                	mov    %edx,(%esi)
 80520a4:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 80520a8:	0f 84 c2 03 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 80520ae:	66 90                	xchg   %ax,%ax
 80520b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80520b4:	89 3c 24             	mov    %edi,(%esp)
 80520b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80520bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80520bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80520c3:	b9 ab 21 00 00       	mov    $0x21ab,%ecx
 80520c8:	e8 ab 11 00 00       	call   8053278 <__afl_maybe_log>
 80520cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80520d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80520d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80520d9:	8b 3c 24             	mov    (%esp),%edi
 80520dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80520e0:	89 d5                	mov    %edx,%ebp
 80520e2:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 80520e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80520e8:	89 3c 24             	mov    %edi,(%esp)
 80520eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80520ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80520f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80520f7:	b9 41 35 00 00       	mov    $0x3541,%ecx
 80520fc:	e8 77 11 00 00       	call   8053278 <__afl_maybe_log>
 8052101:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052105:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052109:	8b 54 24 04          	mov    0x4(%esp),%edx
 805210d:	8b 3c 24             	mov    (%esp),%edi
 8052110:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052114:	8d 58 03             	lea    0x3(%eax),%ebx
 8052117:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 805211b:	80 f9 0a             	cmp    $0xa,%cl
 805211e:	74 76                	je     8052196 <base64_decode_ctx+0x1546>
 8052120:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052124:	89 3c 24             	mov    %edi,(%esp)
 8052127:	89 54 24 04          	mov    %edx,0x4(%esp)
 805212b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805212f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052133:	b9 cf 5a 00 00       	mov    $0x5acf,%ecx
 8052138:	e8 3b 11 00 00       	call   8053278 <__afl_maybe_log>
 805213d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052141:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052145:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052149:	8b 3c 24             	mov    (%esp),%edi
 805214c:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8052150:	8d 55 01             	lea    0x1(%ebp),%edx
            if (ctx->i == 4)
 8052153:	83 fa 04             	cmp    $0x4,%edx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8052156:	89 16                	mov    %edx,(%esi)
 8052158:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 805215c:	0f 84 0e 03 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8052162:	66 90                	xchg   %ax,%ax
 8052164:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052168:	89 3c 24             	mov    %edi,(%esp)
 805216b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805216f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052173:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052177:	b9 e8 70 00 00       	mov    $0x70e8,%ecx
 805217c:	e8 f7 10 00 00       	call   8053278 <__afl_maybe_log>
 8052181:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052185:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052189:	8b 54 24 04          	mov    0x4(%esp),%edx
 805218d:	8b 3c 24             	mov    (%esp),%edi
 8052190:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052194:	89 d5                	mov    %edx,%ebp
 8052196:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 8052198:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805219c:	89 3c 24             	mov    %edi,(%esp)
 805219f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80521a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80521a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80521ab:	b9 f1 67 00 00       	mov    $0x67f1,%ecx
 80521b0:	e8 c3 10 00 00       	call   8053278 <__afl_maybe_log>
 80521b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80521b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80521bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80521c1:	8b 3c 24             	mov    (%esp),%edi
 80521c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80521c8:	8d 58 04             	lea    0x4(%eax),%ebx
 80521cb:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 80521cf:	80 f9 0a             	cmp    $0xa,%cl
 80521d2:	74 76                	je     805224a <base64_decode_ctx+0x15fa>
 80521d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80521d8:	89 3c 24             	mov    %edi,(%esp)
 80521db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80521df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80521e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80521e7:	b9 ad ba 00 00       	mov    $0xbaad,%ecx
 80521ec:	e8 87 10 00 00       	call   8053278 <__afl_maybe_log>
 80521f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80521f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80521f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80521fd:	8b 3c 24             	mov    (%esp),%edi
 8052200:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8052204:	8d 55 01             	lea    0x1(%ebp),%edx
            if (ctx->i == 4)
 8052207:	83 fa 04             	cmp    $0x4,%edx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 805220a:	89 16                	mov    %edx,(%esi)
 805220c:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8052210:	0f 84 5a 02 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 8052216:	66 90                	xchg   %ax,%ax
 8052218:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805221c:	89 3c 24             	mov    %edi,(%esp)
 805221f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052223:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052227:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805222b:	b9 dd 74 00 00       	mov    $0x74dd,%ecx
 8052230:	e8 43 10 00 00       	call   8053278 <__afl_maybe_log>
 8052235:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052239:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805223d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052241:	8b 3c 24             	mov    (%esp),%edi
 8052244:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052248:	89 d5                	mov    %edx,%ebp
 805224a:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 805224c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052250:	89 3c 24             	mov    %edi,(%esp)
 8052253:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052257:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805225b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805225f:	b9 bd a1 00 00       	mov    $0xa1bd,%ecx
 8052264:	e8 0f 10 00 00       	call   8053278 <__afl_maybe_log>
 8052269:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805226d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052271:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052275:	8b 3c 24             	mov    (%esp),%edi
 8052278:	8d 64 24 10          	lea    0x10(%esp),%esp
 805227c:	8d 58 05             	lea    0x5(%eax),%ebx
 805227f:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 8052283:	80 f9 0a             	cmp    $0xa,%cl
 8052286:	74 76                	je     80522fe <base64_decode_ctx+0x16ae>
 8052288:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805228c:	89 3c 24             	mov    %edi,(%esp)
 805228f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052293:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052297:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805229b:	b9 ed 93 00 00       	mov    $0x93ed,%ecx
 80522a0:	e8 d3 0f 00 00       	call   8053278 <__afl_maybe_log>
 80522a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80522a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80522ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80522b1:	8b 3c 24             	mov    (%esp),%edi
 80522b4:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 80522b8:	8d 55 01             	lea    0x1(%ebp),%edx
            if (ctx->i == 4)
 80522bb:	83 fa 04             	cmp    $0x4,%edx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 80522be:	89 16                	mov    %edx,(%esi)
 80522c0:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 80522c4:	0f 84 a6 01 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 80522ca:	66 90                	xchg   %ax,%ax
 80522cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80522d0:	89 3c 24             	mov    %edi,(%esp)
 80522d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80522d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80522db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80522df:	b9 b3 f7 00 00       	mov    $0xf7b3,%ecx
 80522e4:	e8 8f 0f 00 00       	call   8053278 <__afl_maybe_log>
 80522e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80522ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80522f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80522f5:	8b 3c 24             	mov    (%esp),%edi
 80522f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80522fc:	89 d5                	mov    %edx,%ebp
 80522fe:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 8052300:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052304:	89 3c 24             	mov    %edi,(%esp)
 8052307:	89 54 24 04          	mov    %edx,0x4(%esp)
 805230b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805230f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052313:	b9 42 66 00 00       	mov    $0x6642,%ecx
 8052318:	e8 5b 0f 00 00       	call   8053278 <__afl_maybe_log>
 805231d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052321:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052325:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052329:	8b 3c 24             	mov    (%esp),%edi
 805232c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052330:	8d 58 06             	lea    0x6(%eax),%ebx
 8052333:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 8052337:	80 f9 0a             	cmp    $0xa,%cl
 805233a:	74 76                	je     80523b2 <base64_decode_ctx+0x1762>
 805233c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052340:	89 3c 24             	mov    %edi,(%esp)
 8052343:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052347:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805234b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805234f:	b9 b8 58 00 00       	mov    $0x58b8,%ecx
 8052354:	e8 1f 0f 00 00       	call   8053278 <__afl_maybe_log>
 8052359:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805235d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052361:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052365:	8b 3c 24             	mov    (%esp),%edi
 8052368:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 805236c:	8d 55 01             	lea    0x1(%ebp),%edx
            if (ctx->i == 4)
 805236f:	83 fa 04             	cmp    $0x4,%edx
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8052372:	89 16                	mov    %edx,(%esi)
 8052374:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8052378:	0f 84 f2 00 00 00    	je     8052470 <base64_decode_ctx+0x1820>
 805237e:	66 90                	xchg   %ax,%ax
 8052380:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052384:	89 3c 24             	mov    %edi,(%esp)
 8052387:	89 54 24 04          	mov    %edx,0x4(%esp)
 805238b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805238f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052393:	b9 2d ed 00 00       	mov    $0xed2d,%ecx
 8052398:	e8 db 0e 00 00       	call   8053278 <__afl_maybe_log>
 805239d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80523a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80523a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80523a9:	8b 3c 24             	mov    (%esp),%edi
 80523ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80523b0:	89 d5                	mov    %edx,%ebp
 80523b2:	66 90                	xchg   %ax,%ax
  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
      {
        char c = *p++;
 80523b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80523b8:	89 3c 24             	mov    %edi,(%esp)
 80523bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80523bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80523c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80523c7:	b9 16 5b 00 00       	mov    $0x5b16,%ecx
 80523cc:	e8 a7 0e 00 00       	call   8053278 <__afl_maybe_log>
 80523d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80523d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80523d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80523dd:	8b 3c 24             	mov    (%esp),%edi
 80523e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80523e4:	8d 58 07             	lea    0x7(%eax),%ebx
 80523e7:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
        if (c != '\n')
 80523eb:	80 f9 0a             	cmp    $0xa,%cl
 80523ee:	0f 84 66 fa ff ff    	je     8051e5a <base64_decode_ctx+0x120a>
 80523f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80523f8:	89 3c 24             	mov    %edi,(%esp)
 80523fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80523ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052403:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052407:	b9 70 70 00 00       	mov    $0x7070,%ecx
 805240c:	e8 67 0e 00 00       	call   8053278 <__afl_maybe_log>
 8052411:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052415:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052419:	8b 54 24 04          	mov    0x4(%esp),%edx
 805241d:	8b 3c 24             	mov    (%esp),%edi
 8052420:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            ctx->buf[ctx->i++] = c;
 8052424:	8d 45 01             	lea    0x1(%ebp),%eax
            if (ctx->i == 4)
 8052427:	83 f8 04             	cmp    $0x4,%eax
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 805242a:	89 06                	mov    %eax,(%esi)
 805242c:	88 4c 2e 04          	mov    %cl,0x4(%esi,%ebp,1)
            if (ctx->i == 4)
 8052430:	0f 85 f2 f9 ff ff    	jne    8051e28 <base64_decode_ctx+0x11d8>
 8052436:	66 90                	xchg   %ax,%ax
 8052438:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805243c:	89 3c 24             	mov    %edi,(%esp)
 805243f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052443:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052447:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805244b:	b9 11 f5 00 00       	mov    $0xf511,%ecx
 8052450:	e8 23 0e 00 00       	call   8053278 <__afl_maybe_log>
 8052455:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052459:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805245d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052461:	8b 3c 24             	mov    (%esp),%edi
 8052464:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052468:	90                   	nop
 8052469:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8052470:	89 df                	mov    %ebx,%edi
    while (p < in_end)
      {
        char c = *p++;
        if (c != '\n')
          {
            ctx->buf[ctx->i++] = c;
 8052472:	bd 04 00 00 00       	mov    $0x4,%ebp
 8052477:	90                   	nop
            if (ctx->i == 4)
              break;
          }
      }

    *in = p;
 8052478:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805247c:	89 3c 24             	mov    %edi,(%esp)
 805247f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052483:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052487:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805248b:	b9 52 2a 00 00       	mov    $0x2a52,%ecx
 8052490:	e8 e3 0d 00 00       	call   8053278 <__afl_maybe_log>
 8052495:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052499:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805249d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80524a1:	8b 3c 24             	mov    (%esp),%edi
 80524a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80524a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    *n_non_newline = ctx->i;
    return ctx->buf;
 80524ac:	8d 5e 04             	lea    0x4(%esi),%ebx
            if (ctx->i == 4)
              break;
          }
      }

    *in = p;
 80524af:	89 38                	mov    %edi,(%eax)
 80524b1:	8d 76 00             	lea    0x0(%esi),%esi
          lava_835 |= ((unsigned char *) (in))[0] << (0*8);lava_835 |= ((unsigned char *) (in))[1] << (1*8);lava_835 |= ((unsigned char *) (in))[2] << (2*8);lava_835 |= ((unsigned char *) (in))[3] << (3*8);lava_set(835,lava_835);
          }if (((in_end)) && ((in_end)))  {int lava_526 = 0;
          lava_526 |= ((unsigned char *) (in_end))[0] << (0*8);lava_526 |= ((unsigned char *) (in_end))[1] << (1*8);lava_526 |= ((unsigned char *) (in_end))[2] << (2*8);lava_526 |= ((unsigned char *) (in_end))[3] << (3*8);lava_set(526,lava_526);
          int lava_527 = 0;
          lava_527 |= ((unsigned char *) (in_end))[0] << (0*8);lava_527 |= ((unsigned char *) (in_end))[1] << (1*8);lava_527 |= ((unsigned char *) (in_end))[2] << (2*8);lava_527 |= ((unsigned char *) (in_end))[3] << (3*8);lava_set(527,lava_527);
          }char * kbcieiubweuhc2145174067 = get_4 (ctx+(lava_get(222))*(0x6c617583==(lava_get(222))||0x8375616c==(lava_get(222))), &in+(lava_get(235))*(0x6c617576==(lava_get(235))||0x7675616c==(lava_get(235))), in_end+(lava_get(526))*(0x6c617453==(lava_get(526))||0x5374616c==(lava_get(526))), &inlen);if (((in)) && ((in)))  {int lava_284 = 0;
 80524b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80524b8:	89 3c 24             	mov    %edi,(%esp)
 80524bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80524bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80524c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80524c7:	b9 bd 73 00 00       	mov    $0x73bd,%ecx
 80524cc:	e8 a7 0d 00 00       	call   8053278 <__afl_maybe_log>
 80524d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80524d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80524d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80524dd:	8b 3c 24             	mov    (%esp),%edi
 80524e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80524e4:	8b 74 24 44          	mov    0x44(%esp),%esi
 80524e8:	85 f6                	test   %esi,%esi
 80524ea:	74 5f                	je     805254b <base64_decode_ctx+0x18fb>
 80524ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80524f0:	89 3c 24             	mov    %edi,(%esp)
 80524f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80524f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80524fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80524ff:	b9 20 fd 00 00       	mov    $0xfd20,%ecx
 8052504:	e8 6f 0d 00 00       	call   8053278 <__afl_maybe_log>
 8052509:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805250d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052511:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052515:	8b 3c 24             	mov    (%esp),%edi
 8052518:	8d 64 24 10          	lea    0x10(%esp),%esp
lava_284 |= ((unsigned char *) (in))[0] << (0*8);lava_284 |= ((unsigned char *) (in))[1] << (1*8);lava_284 |= ((unsigned char *) (in))[2] << (2*8);lava_284 |= ((unsigned char *) (in))[3] << (3*8);lava_set(284,lava_284);
 805251c:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
 8052520:	0f b6 56 02          	movzbl 0x2(%esi),%edx
 8052524:	83 ec 08             	sub    $0x8,%esp
 8052527:	0f b6 06             	movzbl (%esi),%eax
 805252a:	0f b6 7e 03          	movzbl 0x3(%esi),%edi
 805252e:	c1 e2 10             	shl    $0x10,%edx
 8052531:	c1 e1 08             	shl    $0x8,%ecx
 8052534:	09 d1                	or     %edx,%ecx
 8052536:	c1 e7 18             	shl    $0x18,%edi
 8052539:	09 c1                	or     %eax,%ecx
 805253b:	09 f9                	or     %edi,%ecx
 805253d:	51                   	push   %ecx
 805253e:	68 1c 01 00 00       	push   $0x11c
 8052543:	e8 d8 9f ff ff       	call   804c520 <lava_set>
 8052548:	83 c4 10             	add    $0x10,%esp
 805254b:	90                   	nop
}if ((kbcieiubweuhc2145174067) && (kbcieiubweuhc2145174067))  {int lava_804 = 0;
lava_804 |= ((unsigned char *) kbcieiubweuhc2145174067)[0] << (0*8);lava_804 |= ((unsigned char *) kbcieiubweuhc2145174067)[1] << (1*8);lava_804 |= ((unsigned char *) kbcieiubweuhc2145174067)[2] << (2*8);lava_804 |= ((unsigned char *) kbcieiubweuhc2145174067)[3] << (3*8);lava_set(804,lava_804);
 805254c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052550:	89 3c 24             	mov    %edi,(%esp)
 8052553:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052557:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805255b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805255f:	b9 21 2a 00 00       	mov    $0x2a21,%ecx
 8052564:	e8 0f 0d 00 00       	call   8053278 <__afl_maybe_log>
 8052569:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805256d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052571:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052575:	8b 3c 24             	mov    (%esp),%edi
 8052578:	8d 64 24 10          	lea    0x10(%esp),%esp
 805257c:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 8052580:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8052584:	83 ec 08             	sub    $0x8,%esp
 8052587:	0f b6 33             	movzbl (%ebx),%esi
 805258a:	0f b6 4b 03          	movzbl 0x3(%ebx),%ecx
 805258e:	c1 e2 08             	shl    $0x8,%edx
 8052591:	c1 e0 10             	shl    $0x10,%eax
 8052594:	09 d0                	or     %edx,%eax
 8052596:	c1 e1 18             	shl    $0x18,%ecx
 8052599:	09 f0                	or     %esi,%eax
 805259b:	09 c8                	or     %ecx,%eax
 805259d:	50                   	push   %eax
 805259e:	68 24 03 00 00       	push   $0x324
 80525a3:	e8 78 9f ff ff       	call   804c520 <lava_set>
int lava_582 = 0;
lava_582 |= ((unsigned char *) kbcieiubweuhc2145174067)[0] << (0*8);lava_582 |= ((unsigned char *) kbcieiubweuhc2145174067)[1] << (1*8);lava_582 |= ((unsigned char *) kbcieiubweuhc2145174067)[2] << (2*8);lava_582 |= ((unsigned char *) kbcieiubweuhc2145174067)[3] << (3*8);lava_set(582,lava_582);
 80525a8:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 80525ac:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 80525b0:	0f b6 33             	movzbl (%ebx),%esi
 80525b3:	0f b6 4b 03          	movzbl 0x3(%ebx),%ecx
 80525b7:	c1 e2 08             	shl    $0x8,%edx
 80525ba:	c1 e0 10             	shl    $0x10,%eax
 80525bd:	09 d0                	or     %edx,%eax
 80525bf:	c1 e1 18             	shl    $0x18,%ecx
 80525c2:	09 f0                	or     %esi,%eax
 80525c4:	5e                   	pop    %esi
 80525c5:	5f                   	pop    %edi
 80525c6:	09 c8                	or     %ecx,%eax
 80525c8:	50                   	push   %eax
 80525c9:	68 46 02 00 00       	push   $0x246
 80525ce:	e8 4d 9f ff ff       	call   804c520 <lava_set>
int lava_841 = 0;
lava_841 |= ((unsigned char *) kbcieiubweuhc2145174067)[0] << (0*8);lava_841 |= ((unsigned char *) kbcieiubweuhc2145174067)[1] << (1*8);lava_841 |= ((unsigned char *) kbcieiubweuhc2145174067)[2] << (2*8);lava_841 |= ((unsigned char *) kbcieiubweuhc2145174067)[3] << (3*8);lava_set(841,lava_841);
 80525d3:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 80525d7:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 80525db:	0f b6 33             	movzbl (%ebx),%esi
 80525de:	c1 e2 08             	shl    $0x8,%edx
 80525e1:	c1 e0 10             	shl    $0x10,%eax
 80525e4:	09 d0                	or     %edx,%eax
 80525e6:	5a                   	pop    %edx
 80525e7:	59                   	pop    %ecx
 80525e8:	0f b6 4b 03          	movzbl 0x3(%ebx),%ecx
 80525ec:	09 f0                	or     %esi,%eax
 80525ee:	c1 e1 18             	shl    $0x18,%ecx
 80525f1:	09 c8                	or     %ecx,%eax
 80525f3:	50                   	push   %eax
 80525f4:	68 49 03 00 00       	push   $0x349
 80525f9:	e8 22 9f ff ff       	call   804c520 <lava_set>
          non_nl = in;  /* Might have nl in this case. */

        /* If the input is empty or consists solely of newlines (0 non-newlines),
           then we're done.  Likewise if there are fewer than 4 bytes when not
           flushing context and not treating newlines as garbage.  */
        if (inlen == 0 || (inlen < 4 && !flush_ctx && ignore_newlines))
 80525fe:	83 c4 10             	add    $0x10,%esp
 8052601:	85 ed                	test   %ebp,%ebp
 8052603:	0f 84 2e 0a 00 00    	je     8053037 <base64_decode_ctx+0x23e7>
 8052609:	8d 76 00             	lea    0x0(%esi),%esi
 805260c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052610:	89 3c 24             	mov    %edi,(%esp)
 8052613:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052617:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805261b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805261f:	b9 39 4d 00 00       	mov    $0x4d39,%ecx
 8052624:	e8 4f 0c 00 00       	call   8053278 <__afl_maybe_log>
 8052629:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805262d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052631:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052635:	8b 3c 24             	mov    (%esp),%edi
 8052638:	8d 64 24 10          	lea    0x10(%esp),%esp
 805263c:	83 fd 03             	cmp    $0x3,%ebp
 805263f:	77 73                	ja     80526b4 <base64_decode_ctx+0x1a64>
 8052641:	8d 76 00             	lea    0x0(%esi),%esi
 8052644:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052648:	89 3c 24             	mov    %edi,(%esp)
 805264b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805264f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052653:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052657:	b9 d7 72 00 00       	mov    $0x72d7,%ecx
 805265c:	e8 17 0c 00 00       	call   8053278 <__afl_maybe_log>
 8052661:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052665:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052669:	8b 54 24 04          	mov    0x4(%esp),%edx
 805266d:	8b 3c 24             	mov    (%esp),%edi
 8052670:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052674:	0f b6 54 24 0e       	movzbl 0xe(%esp),%edx
 8052679:	38 54 24 0d          	cmp    %dl,0xd(%esp)
 805267d:	0f 82 b4 09 00 00    	jb     8053037 <base64_decode_ctx+0x23e7>
 8052683:	90                   	nop
 8052684:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052688:	89 3c 24             	mov    %edi,(%esp)
 805268b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805268f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052693:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052697:	b9 7f 81 00 00       	mov    $0x817f,%ecx
 805269c:	e8 d7 0b 00 00       	call   8053278 <__afl_maybe_log>
 80526a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80526a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80526a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80526ad:	8b 3c 24             	mov    (%esp),%edi
 80526b0:	8d 64 24 10          	lea    0x10(%esp),%esp
          {
            inlen = 0;
            break;
          }
        if (!({if (((non_nl)) && ((non_nl)))  {int lava_805 = 0;
        lava_805 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_805 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_805 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_805 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(805,lava_805);
 80526b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80526b8:	89 3c 24             	mov    %edi,(%esp)
 80526bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80526bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80526c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80526c7:	b9 01 8a 00 00       	mov    $0x8a01,%ecx
 80526cc:	e8 a7 0b 00 00       	call   8053278 <__afl_maybe_log>
 80526d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80526d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80526d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80526dd:	8b 3c 24             	mov    (%esp),%edi
 80526e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80526e4:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 80526e8:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
 80526ec:	83 ec 08             	sub    $0x8,%esp
 80526ef:	0f b6 13             	movzbl (%ebx),%edx
 80526f2:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
 80526f6:	c1 e0 08             	shl    $0x8,%eax
 80526f9:	c1 e1 10             	shl    $0x10,%ecx
 80526fc:	09 c1                	or     %eax,%ecx
 80526fe:	c1 e7 18             	shl    $0x18,%edi
 8052701:	09 d1                	or     %edx,%ecx
 8052703:	09 f9                	or     %edi,%ecx
 8052705:	51                   	push   %ecx
 8052706:	68 25 03 00 00       	push   $0x325
 805270b:	e8 10 9e ff ff       	call   804c520 <lava_set>
        int lava_583 = 0;
        lava_583 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_583 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_583 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_583 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(583,lava_583);
 8052710:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 8052714:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
 8052718:	5e                   	pop    %esi
 8052719:	0f b6 13             	movzbl (%ebx),%edx
 805271c:	5f                   	pop    %edi
 805271d:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
 8052721:	c1 e0 08             	shl    $0x8,%eax
 8052724:	c1 e1 10             	shl    $0x10,%ecx
 8052727:	09 c1                	or     %eax,%ecx
 8052729:	09 d1                	or     %edx,%ecx
 805272b:	c1 e7 18             	shl    $0x18,%edi
 805272e:	09 f9                	or     %edi,%ecx
 8052730:	51                   	push   %ecx
 8052731:	68 47 02 00 00       	push   $0x247
 8052736:	e8 e5 9d ff ff       	call   804c520 <lava_set>
        int lava_842 = 0;
        lava_842 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_842 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_842 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_842 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(842,lava_842);
 805273b:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
 805273f:	0f b6 7b 02          	movzbl 0x2(%ebx),%edi
 8052743:	5a                   	pop    %edx
 8052744:	0f b6 0b             	movzbl (%ebx),%ecx
 8052747:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 805274b:	c1 e0 08             	shl    $0x8,%eax
 805274e:	c1 e7 10             	shl    $0x10,%edi
 8052751:	09 c7                	or     %eax,%edi
 8052753:	c1 e2 18             	shl    $0x18,%edx
 8052756:	09 cf                	or     %ecx,%edi
 8052758:	59                   	pop    %ecx
 8052759:	09 d7                	or     %edx,%edi
 805275b:	57                   	push   %edi
 805275c:	68 4a 03 00 00       	push   $0x34a
 8052761:	e8 ba 9d ff ff       	call   804c520 <lava_set>
        }_Bool kbcieiubweuhc468703135 = decode_4 (non_nl+(lava_get(386))*(0x6c6174df==(lava_get(386))||0xdf74616c==(lava_get(386)))+(lava_get(284))*(0x6c617545==(lava_get(284))||0x4575616c==(lava_get(284))), inlen+(lava_get(274))*(0x6c61754f==(lava_get(274))||0x4f75616c==(lava_get(274)))+(lava_get(527))*(0x6c617452==(lava_get(527))||0x5274616c==(lava_get(527))), &out+(lava_get(276))*(0x6c61754d==(lava_get(276))||0x4d75616c==(lava_get(276))), &outleft+(lava_get(278))*(0x6c61754b==(lava_get(278))||0x4b75616c==(lava_get(278))));if (((non_nl)) && ((non_nl)))  {int lava_521 = 0;
 8052766:	c7 04 24 16 01 00 00 	movl   $0x116,(%esp)
 805276d:	e8 ee 9d ff ff       	call   804c560 <lava_get>
 8052772:	c7 04 24 16 01 00 00 	movl   $0x116,(%esp)
 8052779:	89 c6                	mov    %eax,%esi
 805277b:	e8 e0 9d ff ff       	call   804c560 <lava_get>
 8052780:	83 c4 10             	add    $0x10,%esp
 8052783:	3d 4b 75 61 6c       	cmp    $0x6c61754b,%eax
 8052788:	b9 01 00 00 00       	mov    $0x1,%ecx
 805278d:	74 4b                	je     80527da <base64_decode_ctx+0x1b8a>
 805278f:	90                   	nop
 8052790:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052794:	89 3c 24             	mov    %edi,(%esp)
 8052797:	89 54 24 04          	mov    %edx,0x4(%esp)
 805279b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805279f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80527a3:	b9 1a 35 00 00       	mov    $0x351a,%ecx
 80527a8:	e8 cb 0a 00 00       	call   8053278 <__afl_maybe_log>
 80527ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80527b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80527b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80527b9:	8b 3c 24             	mov    (%esp),%edi
 80527bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80527c0:	83 ec 0c             	sub    $0xc,%esp
 80527c3:	68 16 01 00 00       	push   $0x116
 80527c8:	e8 93 9d ff ff       	call   804c560 <lava_get>
 80527cd:	31 c9                	xor    %ecx,%ecx
 80527cf:	83 c4 10             	add    $0x10,%esp
 80527d2:	3d 6c 61 75 4b       	cmp    $0x4b75616c,%eax
 80527d7:	0f 94 c1             	sete   %cl
 80527da:	66 90                	xchg   %ax,%ax
 80527dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80527e0:	89 3c 24             	mov    %edi,(%esp)
 80527e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80527e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80527eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80527ef:	b9 5b 33 00 00       	mov    $0x335b,%ecx
 80527f4:	e8 7f 0a 00 00       	call   8053278 <__afl_maybe_log>
 80527f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80527fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052801:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052805:	8b 3c 24             	mov    (%esp),%edi
 8052808:	8d 64 24 10          	lea    0x10(%esp),%esp
 805280c:	c1 e6 02             	shl    $0x2,%esi
 805280f:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8052813:	83 ec 0c             	sub    $0xc,%esp
 8052816:	0f af ce             	imul   %esi,%ecx
 8052819:	01 c8                	add    %ecx,%eax
 805281b:	89 44 24 10          	mov    %eax,0x10(%esp)
 805281f:	68 14 01 00 00       	push   $0x114
 8052824:	e8 37 9d ff ff       	call   804c560 <lava_get>
 8052829:	c7 04 24 14 01 00 00 	movl   $0x114,(%esp)
 8052830:	89 c7                	mov    %eax,%edi
 8052832:	e8 29 9d ff ff       	call   804c560 <lava_get>
 8052837:	83 c4 10             	add    $0x10,%esp
 805283a:	3d 4d 75 61 6c       	cmp    $0x6c61754d,%eax
 805283f:	ba 01 00 00 00       	mov    $0x1,%edx
 8052844:	74 4c                	je     8052892 <base64_decode_ctx+0x1c42>
 8052846:	66 90                	xchg   %ax,%ax
 8052848:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805284c:	89 3c 24             	mov    %edi,(%esp)
 805284f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052853:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052857:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805285b:	b9 ef ae 00 00       	mov    $0xaeef,%ecx
 8052860:	e8 13 0a 00 00       	call   8053278 <__afl_maybe_log>
 8052865:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052869:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805286d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052871:	8b 3c 24             	mov    (%esp),%edi
 8052874:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052878:	83 ec 0c             	sub    $0xc,%esp
 805287b:	68 14 01 00 00       	push   $0x114
 8052880:	e8 db 9c ff ff       	call   804c560 <lava_get>
 8052885:	31 d2                	xor    %edx,%edx
 8052887:	83 c4 10             	add    $0x10,%esp
 805288a:	3d 6c 61 75 4d       	cmp    $0x4d75616c,%eax
 805288f:	0f 94 c2             	sete   %dl
 8052892:	66 90                	xchg   %ax,%ax
 8052894:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052898:	89 3c 24             	mov    %edi,(%esp)
 805289b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805289f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80528a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80528a7:	b9 d0 85 00 00       	mov    $0x85d0,%ecx
 80528ac:	e8 c7 09 00 00       	call   8053278 <__afl_maybe_log>
 80528b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80528b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80528b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80528bd:	8b 3c 24             	mov    (%esp),%edi
 80528c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80528c4:	c1 e7 02             	shl    $0x2,%edi
 80528c7:	8d 74 24 4c          	lea    0x4c(%esp),%esi
 80528cb:	83 ec 0c             	sub    $0xc,%esp
 80528ce:	0f af d7             	imul   %edi,%edx
 80528d1:	01 d6                	add    %edx,%esi
 80528d3:	89 74 24 14          	mov    %esi,0x14(%esp)
 80528d7:	68 12 01 00 00       	push   $0x112
 80528dc:	e8 7f 9c ff ff       	call   804c560 <lava_get>
 80528e1:	c7 04 24 12 01 00 00 	movl   $0x112,(%esp)
 80528e8:	89 c6                	mov    %eax,%esi
 80528ea:	e8 71 9c ff ff       	call   804c560 <lava_get>
 80528ef:	83 c4 10             	add    $0x10,%esp
 80528f2:	3d 4f 75 61 6c       	cmp    $0x6c61754f,%eax
 80528f7:	b9 01 00 00 00       	mov    $0x1,%ecx
 80528fc:	74 4c                	je     805294a <base64_decode_ctx+0x1cfa>
 80528fe:	66 90                	xchg   %ax,%ax
 8052900:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052904:	89 3c 24             	mov    %edi,(%esp)
 8052907:	89 54 24 04          	mov    %edx,0x4(%esp)
 805290b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805290f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052913:	b9 50 5d 00 00       	mov    $0x5d50,%ecx
 8052918:	e8 5b 09 00 00       	call   8053278 <__afl_maybe_log>
 805291d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052921:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052925:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052929:	8b 3c 24             	mov    (%esp),%edi
 805292c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052930:	83 ec 0c             	sub    $0xc,%esp
 8052933:	68 12 01 00 00       	push   $0x112
 8052938:	e8 23 9c ff ff       	call   804c560 <lava_get>
 805293d:	31 c9                	xor    %ecx,%ecx
 805293f:	83 c4 10             	add    $0x10,%esp
 8052942:	3d 6c 61 75 4f       	cmp    $0x4f75616c,%eax
 8052947:	0f 94 c1             	sete   %cl
 805294a:	66 90                	xchg   %ax,%ax
 805294c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052950:	89 3c 24             	mov    %edi,(%esp)
 8052953:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052957:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805295b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805295f:	b9 5a 4f 00 00       	mov    $0x4f5a,%ecx
 8052964:	e8 0f 09 00 00       	call   8053278 <__afl_maybe_log>
 8052969:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805296d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052971:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052975:	8b 3c 24             	mov    (%esp),%edi
 8052978:	8d 64 24 10          	lea    0x10(%esp),%esp
 805297c:	83 ec 0c             	sub    $0xc,%esp
 805297f:	68 0f 02 00 00       	push   $0x20f
 8052984:	0f af f1             	imul   %ecx,%esi
 8052987:	e8 d4 9b ff ff       	call   804c560 <lava_get>
 805298c:	c7 04 24 0f 02 00 00 	movl   $0x20f,(%esp)
 8052993:	89 c7                	mov    %eax,%edi
 8052995:	e8 c6 9b ff ff       	call   804c560 <lava_get>
 805299a:	83 c4 10             	add    $0x10,%esp
 805299d:	3d 52 74 61 6c       	cmp    $0x6c617452,%eax
 80529a2:	ba 01 00 00 00       	mov    $0x1,%edx
 80529a7:	74 4d                	je     80529f6 <base64_decode_ctx+0x1da6>
 80529a9:	8d 76 00             	lea    0x0(%esi),%esi
 80529ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80529b0:	89 3c 24             	mov    %edi,(%esp)
 80529b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80529b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80529bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80529bf:	b9 b0 5a 00 00       	mov    $0x5ab0,%ecx
 80529c4:	e8 af 08 00 00       	call   8053278 <__afl_maybe_log>
 80529c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80529cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80529d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80529d5:	8b 3c 24             	mov    (%esp),%edi
 80529d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80529dc:	83 ec 0c             	sub    $0xc,%esp
 80529df:	68 0f 02 00 00       	push   $0x20f
 80529e4:	e8 77 9b ff ff       	call   804c560 <lava_get>
 80529e9:	31 d2                	xor    %edx,%edx
 80529eb:	83 c4 10             	add    $0x10,%esp
 80529ee:	3d 6c 61 74 52       	cmp    $0x5274616c,%eax
 80529f3:	0f 94 c2             	sete   %dl
 80529f6:	66 90                	xchg   %ax,%ax
 80529f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80529fc:	89 3c 24             	mov    %edi,(%esp)
 80529ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052a03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052a07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052a0b:	b9 f7 d2 00 00       	mov    $0xd2f7,%ecx
 8052a10:	e8 63 08 00 00       	call   8053278 <__afl_maybe_log>
 8052a15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052a19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052a1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052a21:	8b 3c 24             	mov    (%esp),%edi
 8052a24:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052a28:	83 ec 0c             	sub    $0xc,%esp
 8052a2b:	01 ee                	add    %ebp,%esi
 8052a2d:	0f af fa             	imul   %edx,%edi
 8052a30:	68 82 01 00 00       	push   $0x182
 8052a35:	e8 26 9b ff ff       	call   804c560 <lava_get>
 8052a3a:	8d 2c 3e             	lea    (%esi,%edi,1),%ebp
 8052a3d:	c7 04 24 82 01 00 00 	movl   $0x182,(%esp)
 8052a44:	89 c6                	mov    %eax,%esi
 8052a46:	e8 15 9b ff ff       	call   804c560 <lava_get>
 8052a4b:	83 c4 10             	add    $0x10,%esp
 8052a4e:	3d df 74 61 6c       	cmp    $0x6c6174df,%eax
 8052a53:	b9 01 00 00 00       	mov    $0x1,%ecx
 8052a58:	74 4c                	je     8052aa6 <base64_decode_ctx+0x1e56>
 8052a5a:	66 90                	xchg   %ax,%ax
 8052a5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052a60:	89 3c 24             	mov    %edi,(%esp)
 8052a63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052a67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052a6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052a6f:	b9 ad 6d 00 00       	mov    $0x6dad,%ecx
 8052a74:	e8 ff 07 00 00       	call   8053278 <__afl_maybe_log>
 8052a79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052a7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052a81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052a85:	8b 3c 24             	mov    (%esp),%edi
 8052a88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052a8c:	83 ec 0c             	sub    $0xc,%esp
 8052a8f:	68 82 01 00 00       	push   $0x182
 8052a94:	e8 c7 9a ff ff       	call   804c560 <lava_get>
 8052a99:	31 c9                	xor    %ecx,%ecx
 8052a9b:	83 c4 10             	add    $0x10,%esp
 8052a9e:	3d 6c 61 74 df       	cmp    $0xdf74616c,%eax
 8052aa3:	0f 94 c1             	sete   %cl
 8052aa6:	66 90                	xchg   %ax,%ax
 8052aa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052aac:	89 3c 24             	mov    %edi,(%esp)
 8052aaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052ab3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052ab7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052abb:	b9 32 47 00 00       	mov    $0x4732,%ecx
 8052ac0:	e8 b3 07 00 00       	call   8053278 <__afl_maybe_log>
 8052ac5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052ac9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052acd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052ad1:	8b 3c 24             	mov    (%esp),%edi
 8052ad4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052ad8:	83 ec 0c             	sub    $0xc,%esp
 8052adb:	68 1c 01 00 00       	push   $0x11c
 8052ae0:	0f af f1             	imul   %ecx,%esi
 8052ae3:	e8 78 9a ff ff       	call   804c560 <lava_get>
 8052ae8:	c7 04 24 1c 01 00 00 	movl   $0x11c,(%esp)
 8052aef:	89 c7                	mov    %eax,%edi
 8052af1:	e8 6a 9a ff ff       	call   804c560 <lava_get>
 8052af6:	83 c4 10             	add    $0x10,%esp
 8052af9:	3d 45 75 61 6c       	cmp    $0x6c617545,%eax
 8052afe:	0f 85 ec 01 00 00    	jne    8052cf0 <base64_decode_ctx+0x20a0>
 8052b04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052b08:	89 3c 24             	mov    %edi,(%esp)
 8052b0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052b0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052b13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052b17:	b9 40 d9 00 00       	mov    $0xd940,%ecx
 8052b1c:	e8 57 07 00 00       	call   8053278 <__afl_maybe_log>
 8052b21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052b25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052b29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052b2d:	8b 3c 24             	mov    (%esp),%edi
 8052b30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052b34:	8d 04 37             	lea    (%edi,%esi,1),%eax
 8052b37:	83 ec 0c             	sub    $0xc,%esp
 8052b3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8052b40:	ff 74 24 10          	pushl  0x10(%esp)
 8052b44:	8b 4c 24 18          	mov    0x18(%esp),%ecx
 8052b48:	01 d8                	add    %ebx,%eax
 8052b4a:	89 ea                	mov    %ebp,%edx
 8052b4c:	e8 ff ca ff ff       	call   804f650 <decode_4>
lava_521 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_521 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_521 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_521 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(521,lava_521);
 8052b51:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 8052b55:	0f b6 6b 02          	movzbl 0x2(%ebx),%ebp
        lava_805 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_805 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_805 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_805 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(805,lava_805);
        int lava_583 = 0;
        lava_583 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_583 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_583 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_583 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(583,lava_583);
        int lava_842 = 0;
        lava_842 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_842 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_842 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_842 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(842,lava_842);
        }_Bool kbcieiubweuhc468703135 = decode_4 (non_nl+(lava_get(386))*(0x6c6174df==(lava_get(386))||0xdf74616c==(lava_get(386)))+(lava_get(284))*(0x6c617545==(lava_get(284))||0x4575616c==(lava_get(284))), inlen+(lava_get(274))*(0x6c61754f==(lava_get(274))||0x4f75616c==(lava_get(274)))+(lava_get(527))*(0x6c617452==(lava_get(527))||0x5274616c==(lava_get(527))), &out+(lava_get(276))*(0x6c61754d==(lava_get(276))||0x4d75616c==(lava_get(276))), &outleft+(lava_get(278))*(0x6c61754b==(lava_get(278))||0x4b75616c==(lava_get(278))));if (((non_nl)) && ((non_nl)))  {int lava_521 = 0;
 8052b59:	89 c6                	mov    %eax,%esi
lava_521 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_521 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_521 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_521 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(521,lava_521);
 8052b5b:	0f b6 0b             	movzbl (%ebx),%ecx
 8052b5e:	0f b6 7b 03          	movzbl 0x3(%ebx),%edi
 8052b62:	83 c4 10             	add    $0x10,%esp
 8052b65:	83 ec 08             	sub    $0x8,%esp
 8052b68:	c1 e2 08             	shl    $0x8,%edx
 8052b6b:	c1 e5 10             	shl    $0x10,%ebp
 8052b6e:	09 d5                	or     %edx,%ebp
 8052b70:	c1 e7 18             	shl    $0x18,%edi
 8052b73:	09 e9                	or     %ebp,%ecx
 8052b75:	89 c8                	mov    %ecx,%eax
 8052b77:	09 f8                	or     %edi,%eax
 8052b79:	50                   	push   %eax
 8052b7a:	68 09 02 00 00       	push   $0x209
 8052b7f:	e8 9c 99 ff ff       	call   804c520 <lava_set>
int lava_806 = 0;
lava_806 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_806 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_806 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_806 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(806,lava_806);
 8052b84:	0f b6 6b 01          	movzbl 0x1(%ebx),%ebp
 8052b88:	0f b6 7b 02          	movzbl 0x2(%ebx),%edi
 8052b8c:	0f b6 0b             	movzbl (%ebx),%ecx
 8052b8f:	58                   	pop    %eax
 8052b90:	5a                   	pop    %edx
 8052b91:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
 8052b95:	c1 e5 08             	shl    $0x8,%ebp
 8052b98:	c1 e7 10             	shl    $0x10,%edi
 8052b9b:	09 ef                	or     %ebp,%edi
 8052b9d:	09 f9                	or     %edi,%ecx
 8052b9f:	89 c8                	mov    %ecx,%eax
 8052ba1:	c1 e2 18             	shl    $0x18,%edx
 8052ba4:	09 d0                	or     %edx,%eax
 8052ba6:	50                   	push   %eax
 8052ba7:	68 26 03 00 00       	push   $0x326
 8052bac:	e8 6f 99 ff ff       	call   804c520 <lava_set>
int lava_584 = 0;
lava_584 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_584 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_584 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_584 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(584,lava_584);
 8052bb1:	0f b6 7b 01          	movzbl 0x1(%ebx),%edi
 8052bb5:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
 8052bb9:	0f b6 0b             	movzbl (%ebx),%ecx
 8052bbc:	c1 e7 08             	shl    $0x8,%edi
 8052bbf:	c1 e2 10             	shl    $0x10,%edx
 8052bc2:	09 fa                	or     %edi,%edx
 8052bc4:	5f                   	pop    %edi
 8052bc5:	5d                   	pop    %ebp
 8052bc6:	0f b6 6b 03          	movzbl 0x3(%ebx),%ebp
 8052bca:	09 d1                	or     %edx,%ecx
 8052bcc:	89 c8                	mov    %ecx,%eax
 8052bce:	c1 e5 18             	shl    $0x18,%ebp
 8052bd1:	09 e8                	or     %ebp,%eax
 8052bd3:	50                   	push   %eax
 8052bd4:	68 48 02 00 00       	push   $0x248
 8052bd9:	e8 42 99 ff ff       	call   804c520 <lava_set>
int lava_843 = 0;
lava_843 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_843 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_843 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_843 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(843,lava_843);
 8052bde:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 8052be2:	0f b6 6b 02          	movzbl 0x2(%ebx),%ebp
 8052be6:	0f b6 0b             	movzbl (%ebx),%ecx
 8052be9:	0f b6 5b 03          	movzbl 0x3(%ebx),%ebx
 8052bed:	58                   	pop    %eax
 8052bee:	c1 e2 08             	shl    $0x8,%edx
 8052bf1:	c1 e5 10             	shl    $0x10,%ebp
 8052bf4:	09 d5                	or     %edx,%ebp
 8052bf6:	c1 e3 18             	shl    $0x18,%ebx
 8052bf9:	09 e9                	or     %ebp,%ecx
 8052bfb:	5a                   	pop    %edx
 8052bfc:	89 c8                	mov    %ecx,%eax
 8052bfe:	09 d8                	or     %ebx,%eax
 8052c00:	50                   	push   %eax
 8052c01:	68 4b 03 00 00       	push   $0x34b
 8052c06:	e8 15 99 ff ff       	call   804c520 <lava_set>
        if (inlen == 0 || (inlen < 4 && !flush_ctx && ignore_newlines))
          {
            inlen = 0;
            break;
          }
        if (!({if (((non_nl)) && ((non_nl)))  {int lava_805 = 0;
 8052c0b:	89 f0                	mov    %esi,%eax
 8052c0d:	83 c4 10             	add    $0x10,%esp
 8052c10:	84 c0                	test   %al,%al
 8052c12:	0f 84 67 04 00 00    	je     805307f <base64_decode_ctx+0x242f>
 8052c18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052c1c:	89 3c 24             	mov    %edi,(%esp)
 8052c1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052c23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052c27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052c2b:	b9 79 26 00 00       	mov    $0x2679,%ecx
 8052c30:	e8 43 06 00 00       	call   8053278 <__afl_maybe_log>
 8052c35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052c39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052c3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052c41:	8b 3c 24             	mov    (%esp),%edi
 8052c44:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052c48:	8b 54 24 1c          	mov    0x1c(%esp),%edx
int lava_843 = 0;
lava_843 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_843 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_843 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_843 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(843,lava_843);
}kbcieiubweuhc468703135;}))
          break;

        inlen = in_end - in;
 8052c4c:	8b 2c 24             	mov    (%esp),%ebp
 8052c4f:	2b 6c 24 44          	sub    0x44(%esp),%ebp
 8052c53:	89 d7                	mov    %edx,%edi
 8052c55:	e9 ce e0 ff ff       	jmp    8050d28 <base64_decode_ctx+0xd8>
 8052c5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
          --inlen;
          continue;
        }

      /* Restore OUT and OUTLEFT.  */
      out -= outleft_save - outleft;
 8052c60:	29 fa                	sub    %edi,%edx
 8052c62:	01 54 24 4c          	add    %edx,0x4c(%esp)

      {
        char const *in_end = in + inlen;
        char const *non_nl;

        if (ignore_newlines)
 8052c66:	80 7c 24 0e 00       	cmpb   $0x0,0xe(%esp)
          continue;
        }

      /* Restore OUT and OUTLEFT.  */
      out -= outleft_save - outleft;
      outleft = outleft_save;
 8052c6b:	89 7c 24 1c          	mov    %edi,0x1c(%esp)

      {
        char const *in_end = in + inlen;
 8052c6f:	8b 5c 24 44          	mov    0x44(%esp),%ebx
        char const *non_nl;

        if (ignore_newlines)
 8052c73:	0f 84 9f 00 00 00    	je     8052d18 <base64_decode_ctx+0x20c8>
 8052c79:	8d 76 00             	lea    0x0(%esi),%esi
 8052c7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052c80:	89 3c 24             	mov    %edi,(%esp)
 8052c83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052c87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052c8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052c8f:	b9 8e 1c 00 00       	mov    $0x1c8e,%ecx
 8052c94:	e8 df 05 00 00       	call   8053278 <__afl_maybe_log>
 8052c99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052c9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052ca1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052ca5:	8b 3c 24             	mov    (%esp),%edi
 8052ca8:	8d 64 24 10          	lea    0x10(%esp),%esp
          non_nl = ({if (((in)) && ((in)))  {int lava_798 = 0;
 8052cac:	85 db                	test   %ebx,%ebx
      /* Restore OUT and OUTLEFT.  */
      out -= outleft_save - outleft;
      outleft = outleft_save;

      {
        char const *in_end = in + inlen;
 8052cae:	89 1c 24             	mov    %ebx,(%esp)
        char const *non_nl;

        if (ignore_newlines)
          non_nl = ({if (((in)) && ((in)))  {int lava_798 = 0;
 8052cb1:	0f 84 eb e6 ff ff    	je     80513a2 <base64_decode_ctx+0x752>
 8052cb7:	90                   	nop
 8052cb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052cbc:	89 3c 24             	mov    %edi,(%esp)
 8052cbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052cc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052cc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ccb:	b9 06 19 00 00       	mov    $0x1906,%ecx
 8052cd0:	e8 a3 05 00 00       	call   8053278 <__afl_maybe_log>
 8052cd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052cd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052cdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052ce1:	8b 3c 24             	mov    (%esp),%edi
 8052ce4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052ce8:	e9 6b e5 ff ff       	jmp    8051258 <base64_decode_ctx+0x608>
 8052ced:	8d 76 00             	lea    0x0(%esi),%esi
        lava_805 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_805 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_805 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_805 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(805,lava_805);
        int lava_583 = 0;
        lava_583 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_583 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_583 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_583 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(583,lava_583);
        int lava_842 = 0;
        lava_842 |= ((unsigned char *) (non_nl))[0] << (0*8);lava_842 |= ((unsigned char *) (non_nl))[1] << (1*8);lava_842 |= ((unsigned char *) (non_nl))[2] << (2*8);lava_842 |= ((unsigned char *) (non_nl))[3] << (3*8);lava_set(842,lava_842);
        }_Bool kbcieiubweuhc468703135 = decode_4 (non_nl+(lava_get(386))*(0x6c6174df==(lava_get(386))||0xdf74616c==(lava_get(386)))+(lava_get(284))*(0x6c617545==(lava_get(284))||0x4575616c==(lava_get(284))), inlen+(lava_get(274))*(0x6c61754f==(lava_get(274))||0x4f75616c==(lava_get(274)))+(lava_get(527))*(0x6c617452==(lava_get(527))||0x5274616c==(lava_get(527))), &out+(lava_get(276))*(0x6c61754d==(lava_get(276))||0x4d75616c==(lava_get(276))), &outleft+(lava_get(278))*(0x6c61754b==(lava_get(278))||0x4b75616c==(lava_get(278))));if (((non_nl)) && ((non_nl)))  {int lava_521 = 0;
 8052cf0:	83 ec 0c             	sub    $0xc,%esp
 8052cf3:	68 1c 01 00 00       	push   $0x11c
 8052cf8:	e8 63 98 ff ff       	call   804c560 <lava_get>
 8052cfd:	3d 6c 61 75 45       	cmp    $0x4575616c,%eax
 8052d02:	0f 94 c0             	sete   %al
 8052d05:	0f b6 c0             	movzbl %al,%eax
 8052d08:	0f af c7             	imul   %edi,%eax
 8052d0b:	59                   	pop    %ecx
 8052d0c:	01 f0                	add    %esi,%eax
 8052d0e:	e9 2d fe ff ff       	jmp    8052b40 <base64_decode_ctx+0x1ef0>
 8052d13:	90                   	nop
 8052d14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

      {
        char const *in_end = in + inlen;
        char const *non_nl;

        if (ignore_newlines)
 8052d18:	89 fa                	mov    %edi,%edx
 8052d1a:	66 90                	xchg   %ax,%ax

        inlen = in_end - in;
      }
    }

  *outlen -= outleft;
 8052d1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052d20:	89 3c 24             	mov    %edi,(%esp)
 8052d23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052d27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052d2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052d2f:	b9 c7 fc 00 00       	mov    $0xfcc7,%ecx
 8052d34:	e8 3f 05 00 00       	call   8053278 <__afl_maybe_log>
 8052d39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052d3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052d41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052d45:	8b 3c 24             	mov    (%esp),%edi
 8052d48:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052d4c:	8b 74 24 50          	mov    0x50(%esp),%esi

      {
        char const *in_end = in + inlen;
        char const *non_nl;

        if (ignore_newlines)
 8052d50:	b8 01 00 00 00       	mov    $0x1,%eax

        inlen = in_end - in;
      }
    }

  *outlen -= outleft;
 8052d55:	29 16                	sub    %edx,(%esi)

  return inlen == 0;
}
 8052d57:	83 c4 2c             	add    $0x2c,%esp
 8052d5a:	5b                   	pop    %ebx
 8052d5b:	5e                   	pop    %esi
 8052d5c:	5f                   	pop    %edi
 8052d5d:	5d                   	pop    %ebp
 8052d5e:	c3                   	ret    
 8052d5f:	90                   	nop
get_4 (struct base64_decode_context *ctx,
       char const *restrict *in, char const *restrict in_end,
       size_t *n_non_newline)
{
  if (ctx->i == 4)
    ctx->i = 0;
 8052d60:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
 8052d66:	66 90                	xchg   %ax,%ax

  if (ctx->i == 0)
    {
      char const *t = *in;
 8052d68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052d6c:	89 3c 24             	mov    %edi,(%esp)
 8052d6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052d73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052d77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052d7b:	b9 b6 ab 00 00       	mov    $0xabb6,%ecx
 8052d80:	e8 f3 04 00 00       	call   8053278 <__afl_maybe_log>
 8052d85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052d89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052d8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052d91:	8b 3c 24             	mov    (%esp),%edi
 8052d94:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052d98:	8b 6c 24 04          	mov    0x4(%esp),%ebp
      if (4 <= in_end - *in && ({if (((t)) && ((t)))  {int lava_774 = 0;
 8052d9c:	89 f9                	mov    %edi,%ecx
  if (ctx->i == 4)
    ctx->i = 0;

  if (ctx->i == 0)
    {
      char const *t = *in;
 8052d9e:	8b 5d 00             	mov    0x0(%ebp),%ebx
      if (4 <= in_end - *in && ({if (((t)) && ((t)))  {int lava_774 = 0;
 8052da1:	29 d9                	sub    %ebx,%ecx
 8052da3:	83 f9 03             	cmp    $0x3,%ecx
 8052da6:	0f 8e 3c 01 00 00    	jle    8052ee8 <base64_decode_ctx+0x2298>
 8052dac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052db0:	89 3c 24             	mov    %edi,(%esp)
 8052db3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052db7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052dbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052dbf:	b9 93 6c 00 00       	mov    $0x6c93,%ecx
 8052dc4:	e8 af 04 00 00       	call   8053278 <__afl_maybe_log>
 8052dc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052dcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052dd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052dd5:	8b 3c 24             	mov    (%esp),%edi
 8052dd8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052ddc:	85 db                	test   %ebx,%ebx
 8052dde:	0f 84 8a 00 00 00    	je     8052e6e <base64_decode_ctx+0x221e>
 8052de4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052de8:	89 3c 24             	mov    %edi,(%esp)
 8052deb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052def:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052df3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052df7:	b9 92 32 00 00       	mov    $0x3292,%ecx
 8052dfc:	e8 77 04 00 00       	call   8053278 <__afl_maybe_log>
 8052e01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052e05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052e09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052e0d:	8b 3c 24             	mov    (%esp),%edi
 8052e10:	8d 64 24 10          	lea    0x10(%esp),%esp
      lava_774 |= ((unsigned char *) (t))[0] << (0*8);lava_774 |= ((unsigned char *) (t))[1] << (1*8);lava_774 |= ((unsigned char *) (t))[2] << (2*8);lava_774 |= ((unsigned char *) (t))[3] << (3*8);lava_set(774,lava_774);
 8052e14:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 8052e18:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8052e1c:	83 ec 08             	sub    $0x8,%esp
 8052e1f:	0f b6 2b             	movzbl (%ebx),%ebp
 8052e22:	0f b6 4b 03          	movzbl 0x3(%ebx),%ecx
 8052e26:	c1 e2 08             	shl    $0x8,%edx
 8052e29:	c1 e0 10             	shl    $0x10,%eax
 8052e2c:	09 d0                	or     %edx,%eax
 8052e2e:	c1 e1 18             	shl    $0x18,%ecx
 8052e31:	09 c5                	or     %eax,%ebp
 8052e33:	09 e9                	or     %ebp,%ecx
 8052e35:	51                   	push   %ecx
 8052e36:	68 06 03 00 00       	push   $0x306
 8052e3b:	e8 e0 96 ff ff       	call   804c520 <lava_set>
      int lava_386 = 0;
      lava_386 |= ((unsigned char *) (t))[0] << (0*8);lava_386 |= ((unsigned char *) (t))[1] << (1*8);lava_386 |= ((unsigned char *) (t))[2] << (2*8);lava_386 |= ((unsigned char *) (t))[3] << (3*8);lava_set(386,lava_386);
 8052e40:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
 8052e44:	0f b6 43 02          	movzbl 0x2(%ebx),%eax
 8052e48:	5d                   	pop    %ebp
 8052e49:	0f b6 0b             	movzbl (%ebx),%ecx
 8052e4c:	0f b6 6b 03          	movzbl 0x3(%ebx),%ebp
 8052e50:	c1 e2 08             	shl    $0x8,%edx
 8052e53:	c1 e0 10             	shl    $0x10,%eax
 8052e56:	09 d0                	or     %edx,%eax
 8052e58:	09 c1                	or     %eax,%ecx
 8052e5a:	c1 e5 18             	shl    $0x18,%ebp
 8052e5d:	58                   	pop    %eax
 8052e5e:	09 cd                	or     %ecx,%ebp
 8052e60:	55                   	push   %ebp
 8052e61:	68 82 01 00 00       	push   $0x182
 8052e66:	e8 b5 96 ff ff       	call   804c520 <lava_set>
 8052e6b:	83 c4 10             	add    $0x10,%esp
 8052e6e:	66 90                	xchg   %ax,%ax
      }void * kbcieiubweuhc1365180540 = memchr (t, '\n', 4);kbcieiubweuhc1365180540;}) == NULL)
 8052e70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052e74:	89 3c 24             	mov    %edi,(%esp)
 8052e77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052e7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052e7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052e83:	b9 fb d9 00 00       	mov    $0xd9fb,%ecx
 8052e88:	e8 eb 03 00 00       	call   8053278 <__afl_maybe_log>
 8052e8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052e91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052e95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052e99:	8b 3c 24             	mov    (%esp),%edi
 8052e9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052ea0:	83 ec 04             	sub    $0x4,%esp
 8052ea3:	6a 04                	push   $0x4
 8052ea5:	6a 0a                	push   $0xa
 8052ea7:	53                   	push   %ebx
 8052ea8:	e8 33 65 ff ff       	call   80493e0 <memchr@plt>
 8052ead:	83 c4 10             	add    $0x10,%esp
    ctx->i = 0;

  if (ctx->i == 0)
    {
      char const *t = *in;
      if (4 <= in_end - *in && ({if (((t)) && ((t)))  {int lava_774 = 0;
 8052eb0:	85 c0                	test   %eax,%eax
 8052eb2:	0f 84 0a 02 00 00    	je     80530c2 <base64_decode_ctx+0x2472>
 8052eb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052ebc:	89 3c 24             	mov    %edi,(%esp)
 8052ebf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052ec3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052ec7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052ecb:	b9 e2 2c 00 00       	mov    $0x2ce2,%ecx
 8052ed0:	e8 a3 03 00 00       	call   8053278 <__afl_maybe_log>
 8052ed5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052ed9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052edd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052ee1:	8b 3c 24             	mov    (%esp),%edi
 8052ee4:	8d 64 24 10          	lea    0x10(%esp),%esp
    }

  {
    /* Copy non-newline bytes into BUF.  */
    char const *p = *in;
    while (p < in_end)
 8052ee8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052eec:	89 3c 24             	mov    %edi,(%esp)
 8052eef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052ef3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052ef7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052efb:	b9 92 bf 00 00       	mov    $0xbf92,%ecx
 8052f00:	e8 73 03 00 00       	call   8053278 <__afl_maybe_log>
 8052f05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052f09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052f0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052f11:	8b 3c 24             	mov    (%esp),%edi
 8052f14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052f18:	39 df                	cmp    %ebx,%edi
 8052f1a:	8b 2e                	mov    (%esi),%ebp
 8052f1c:	0f 87 82 e7 ff ff    	ja     80516a4 <base64_decode_ctx+0xa54>
 8052f22:	66 90                	xchg   %ax,%ax
 8052f24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052f28:	89 3c 24             	mov    %edi,(%esp)
 8052f2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052f2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052f33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052f37:	b9 1e 29 00 00       	mov    $0x291e,%ecx
 8052f3c:	e8 37 03 00 00       	call   8053278 <__afl_maybe_log>
 8052f41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052f45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052f49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052f4d:	8b 3c 24             	mov    (%esp),%edi
 8052f50:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052f54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052f58:	89 3c 24             	mov    %edi,(%esp)
 8052f5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052f5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052f63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052f67:	b9 16 f9 00 00       	mov    $0xf916,%ecx
 8052f6c:	e8 07 03 00 00       	call   8053278 <__afl_maybe_log>
 8052f71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052f75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052f79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052f7d:	8b 3c 24             	mov    (%esp),%edi
 8052f80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8052f84:	89 df                	mov    %ebx,%edi
 8052f86:	e9 ec f4 ff ff       	jmp    8052477 <base64_decode_ctx+0x1827>
 8052f8b:	90                   	nop
 8052f8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      if (inlen == 0 && !flush_ctx)
        break;

      /* Handle the common case of 72-byte wrapped lines.
         This also handles any other multiple-of-4-byte wrapping.  */
      if (inlen && *in == '\n' && ignore_newlines)
 8052f90:	80 7c 24 0e 00       	cmpb   $0x0,0xe(%esp)
 8052f95:	74 49                	je     8052fe0 <base64_decode_ctx+0x2390>
 8052f97:	90                   	nop
 8052f98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052f9c:	89 3c 24             	mov    %edi,(%esp)
 8052f9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8052fa3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8052fa7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8052fab:	b9 69 6a 00 00       	mov    $0x6a69,%ecx
 8052fb0:	e8 c3 02 00 00       	call   8053278 <__afl_maybe_log>
 8052fb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8052fb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8052fbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8052fc1:	8b 3c 24             	mov    (%esp),%edi
 8052fc4:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          ++in;
 8052fc8:	83 c3 01             	add    $0x1,%ebx
          --inlen;
 8052fcb:	83 ed 01             	sub    $0x1,%ebp
 8052fce:	89 d7                	mov    %edx,%edi

      /* Handle the common case of 72-byte wrapped lines.
         This also handles any other multiple-of-4-byte wrapping.  */
      if (inlen && *in == '\n' && ignore_newlines)
        {
          ++in;
 8052fd0:	89 5c 24 44          	mov    %ebx,0x44(%esp)
 8052fd4:	e9 4f dd ff ff       	jmp    8050d28 <base64_decode_ctx+0xd8>
 8052fd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
          --inlen;
          continue;
        }

      /* Restore OUT and OUTLEFT.  */
      out -= outleft_save - outleft;
 8052fe0:	29 fa                	sub    %edi,%edx
      outleft = outleft_save;
 8052fe2:	89 7c 24 1c          	mov    %edi,0x1c(%esp)

      {
        char const *in_end = in + inlen;
 8052fe6:	8d 3c 2b             	lea    (%ebx,%ebp,1),%edi
          --inlen;
          continue;
        }

      /* Restore OUT and OUTLEFT.  */
      out -= outleft_save - outleft;
 8052fe9:	01 54 24 4c          	add    %edx,0x4c(%esp)
      outleft = outleft_save;

      {
        char const *in_end = in + inlen;
 8052fed:	89 3c 24             	mov    %edi,(%esp)
 8052ff0:	e9 bf f6 ff ff       	jmp    80526b4 <base64_decode_ctx+0x1a64>
 8052ff5:	8d 76 00             	lea    0x0(%esi),%esi
 8052ff8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8052ffc:	89 3c 24             	mov    %edi,(%esp)
 8052fff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053003:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053007:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805300b:	b9 7d bb 00 00       	mov    $0xbb7d,%ecx
 8053010:	e8 63 02 00 00       	call   8053278 <__afl_maybe_log>
 8053015:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053019:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805301d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053021:	8b 3c 24             	mov    (%esp),%edi
 8053024:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053028:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
                   const char *restrict in, size_t inlen,
                   char *restrict out, size_t *outlen)
{
  size_t outleft = *outlen;
  bool ignore_newlines = ctx != NULL;
  bool flush_ctx = false;
 805302d:	c6 44 24 0d 00       	movb   $0x0,0xd(%esp)
 8053032:	e9 b5 dc ff ff       	jmp    8050cec <base64_decode_ctx+0x9c>
 8053037:	90                   	nop

        inlen = in_end - in;
      }
    }

  *outlen -= outleft;
 8053038:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805303c:	89 3c 24             	mov    %edi,(%esp)
 805303f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053043:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053047:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805304b:	b9 8e 22 00 00       	mov    $0x228e,%ecx
 8053050:	e8 23 02 00 00       	call   8053278 <__afl_maybe_log>
 8053055:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053059:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805305d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053061:	8b 3c 24             	mov    (%esp),%edi
 8053064:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053068:	8b 74 24 50          	mov    0x50(%esp),%esi
 805306c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
        if (inlen == 0 || (inlen < 4 && !flush_ctx && ignore_newlines))
          {
            inlen = 0;
            break;
          }
        if (!({if (((non_nl)) && ((non_nl)))  {int lava_805 = 0;
 8053070:	b8 01 00 00 00       	mov    $0x1,%eax

        inlen = in_end - in;
      }
    }

  *outlen -= outleft;
 8053075:	29 16                	sub    %edx,(%esi)

  return inlen == 0;
}
 8053077:	83 c4 2c             	add    $0x2c,%esp
 805307a:	5b                   	pop    %ebx
 805307b:	5e                   	pop    %esi
 805307c:	5f                   	pop    %edi
 805307d:	5d                   	pop    %ebp
 805307e:	c3                   	ret    
 805307f:	90                   	nop

        inlen = in_end - in;
      }
    }

  *outlen -= outleft;
 8053080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053084:	89 3c 24             	mov    %edi,(%esp)
 8053087:	89 54 24 04          	mov    %edx,0x4(%esp)
 805308b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805308f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053093:	b9 57 f1 00 00       	mov    $0xf157,%ecx
 8053098:	e8 db 01 00 00       	call   8053278 <__afl_maybe_log>
 805309d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80530a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80530a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80530a9:	8b 3c 24             	mov    (%esp),%edi
 80530ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80530b0:	8b 74 24 50          	mov    0x50(%esp),%esi
 80530b4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 80530b8:	29 16                	sub    %edx,(%esi)

  return inlen == 0;
}
 80530ba:	83 c4 2c             	add    $0x2c,%esp
 80530bd:	5b                   	pop    %ebx
 80530be:	5e                   	pop    %esi
 80530bf:	5f                   	pop    %edi
 80530c0:	5d                   	pop    %ebp
 80530c1:	c3                   	ret    
 80530c2:	66 90                	xchg   %ax,%ax
      int lava_386 = 0;
      lava_386 |= ((unsigned char *) (t))[0] << (0*8);lava_386 |= ((unsigned char *) (t))[1] << (1*8);lava_386 |= ((unsigned char *) (t))[2] << (2*8);lava_386 |= ((unsigned char *) (t))[3] << (3*8);lava_set(386,lava_386);
      }void * kbcieiubweuhc1365180540 = memchr (t, '\n', 4);kbcieiubweuhc1365180540;}) == NULL)
        {
          /* This is the common case: no newline.  */
          *in += 4;
 80530c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80530c8:	89 3c 24             	mov    %edi,(%esp)
 80530cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80530cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80530d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80530d7:	b9 bd 2d 00 00       	mov    $0x2dbd,%ecx
 80530dc:	e8 97 01 00 00       	call   8053278 <__afl_maybe_log>
 80530e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80530e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80530e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80530ed:	8b 3c 24             	mov    (%esp),%edi
 80530f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80530f4:	8b 7c 24 04          	mov    0x4(%esp),%edi
 80530f8:	8d 6b 04             	lea    0x4(%ebx),%ebp
 80530fb:	89 2f                	mov    %ebp,(%edi)
          *n_non_newline = 4;
 80530fd:	bd 04 00 00 00       	mov    $0x4,%ebp
 8053102:	e9 aa f3 ff ff       	jmp    80524b1 <base64_decode_ctx+0x1861>
 8053107:	89 f6                	mov    %esi,%esi
 8053109:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08053110 <base64_decode_alloc_ctx>:
   undefined. */
bool
base64_decode_alloc_ctx (struct base64_decode_context *ctx,
                         const char *in, size_t inlen, char **out,
                         size_t *outlen)
{
 8053110:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053114:	89 3c 24             	mov    %edi,(%esp)
 8053117:	89 54 24 04          	mov    %edx,0x4(%esp)
 805311b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805311f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053123:	b9 77 3f 00 00       	mov    $0x3f77,%ecx
 8053128:	e8 4b 01 00 00       	call   8053278 <__afl_maybe_log>
 805312d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053131:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053135:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053139:	8b 3c 24             	mov    (%esp),%edi
 805313c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053140:	57                   	push   %edi
 8053141:	56                   	push   %esi
 8053142:	53                   	push   %ebx
 8053143:	83 ec 2c             	sub    $0x2c,%esp
 8053146:	8b 5c 24 44          	mov    0x44(%esp),%ebx
 805314a:	8b 74 24 48          	mov    0x48(%esp),%esi
 805314e:	8b 7c 24 4c          	mov    0x4c(%esp),%edi
  /* This may allocate a few bytes too many, depending on input,
     but it's not worth the extra CPU time to compute the exact size.
     The exact size is 3 * (inlen + (ctx ? ctx->i : 0)) / 4, minus 1 if the
     input ends with "=" and minus another 1 if the input ends with "==".
     Dividing before multiplying avoids the possibility of overflow.  */
  size_t needlen = 3 * (inlen / 4) + 3;
 8053152:	89 d8                	mov    %ebx,%eax
 8053154:	c1 e8 02             	shr    $0x2,%eax
 8053157:	8d 54 40 03          	lea    0x3(%eax,%eax,2),%edx
 805315b:	89 54 24 28          	mov    %edx,0x28(%esp)

  *out = malloc (needlen);
 805315f:	52                   	push   %edx
 8053160:	e8 6b 61 ff ff       	call   80492d0 <malloc@plt>
  if (!*out)
 8053165:	83 c4 10             	add    $0x10,%esp
 8053168:	85 c0                	test   %eax,%eax
     The exact size is 3 * (inlen + (ctx ? ctx->i : 0)) / 4, minus 1 if the
     input ends with "=" and minus another 1 if the input ends with "==".
     Dividing before multiplying avoids the possibility of overflow.  */
  size_t needlen = 3 * (inlen / 4) + 3;

  *out = malloc (needlen);
 805316a:	89 06                	mov    %eax,(%esi)
  if (!*out)
 805316c:	0f 84 ce 00 00 00    	je     8053240 <base64_decode_alloc_ctx+0x130>
 8053172:	66 90                	xchg   %ax,%ax
 8053174:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053178:	89 3c 24             	mov    %edi,(%esp)
 805317b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805317f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053183:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053187:	b9 c4 00 00 00       	mov    $0xc4,%ecx
 805318c:	e8 e7 00 00 00       	call   8053278 <__afl_maybe_log>
 8053191:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053195:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053199:	8b 54 24 04          	mov    0x4(%esp),%edx
 805319d:	8b 3c 24             	mov    (%esp),%edi
 80531a0:	8d 64 24 10          	lea    0x10(%esp),%esp
    return true;

  if (!base64_decode_ctx (ctx, in, inlen, *out, &needlen))
 80531a4:	83 ec 0c             	sub    $0xc,%esp
 80531a7:	8d 4c 24 28          	lea    0x28(%esp),%ecx
 80531ab:	51                   	push   %ecx
 80531ac:	50                   	push   %eax
 80531ad:	53                   	push   %ebx
 80531ae:	ff 74 24 4c          	pushl  0x4c(%esp)
 80531b2:	ff 74 24 4c          	pushl  0x4c(%esp)
 80531b6:	e8 95 da ff ff       	call   8050c50 <base64_decode_ctx>
 80531bb:	83 c4 20             	add    $0x20,%esp
 80531be:	84 c0                	test   %al,%al
 80531c0:	0f 84 8a 00 00 00    	je     8053250 <base64_decode_alloc_ctx+0x140>
 80531c6:	66 90                	xchg   %ax,%ax
 80531c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80531cc:	89 3c 24             	mov    %edi,(%esp)
 80531cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80531d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80531d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80531db:	b9 9b 71 00 00       	mov    $0x719b,%ecx
 80531e0:	e8 93 00 00 00       	call   8053278 <__afl_maybe_log>
 80531e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80531e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80531ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80531f1:	8b 3c 24             	mov    (%esp),%edi
 80531f4:	8d 64 24 10          	lea    0x10(%esp),%esp
      free (*out);
      *out = NULL;
      return false;
    }

  if (outlen)
 80531f8:	85 ff                	test   %edi,%edi
 80531fa:	74 44                	je     8053240 <base64_decode_alloc_ctx+0x130>
 80531fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053200:	89 3c 24             	mov    %edi,(%esp)
 8053203:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053207:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805320b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805320f:	b9 cd 92 00 00       	mov    $0x92cd,%ecx
 8053214:	e8 5f 00 00 00       	call   8053278 <__afl_maybe_log>
 8053219:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805321d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053221:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053225:	8b 3c 24             	mov    (%esp),%edi
 8053228:	8d 64 24 10          	lea    0x10(%esp),%esp
    *outlen = needlen;
 805322c:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 8053230:	89 1f                	mov    %ebx,(%edi)

  return true;
}
 8053232:	83 c4 20             	add    $0x20,%esp
 8053235:	5b                   	pop    %ebx
 8053236:	5e                   	pop    %esi
 8053237:	5f                   	pop    %edi
 8053238:	c3                   	ret    
 8053239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8053240:	83 c4 20             	add    $0x20,%esp
     Dividing before multiplying avoids the possibility of overflow.  */
  size_t needlen = 3 * (inlen / 4) + 3;

  *out = malloc (needlen);
  if (!*out)
    return true;
 8053243:	b8 01 00 00 00       	mov    $0x1,%eax

  if (outlen)
    *outlen = needlen;

  return true;
}
 8053248:	5b                   	pop    %ebx
 8053249:	5e                   	pop    %esi
 805324a:	5f                   	pop    %edi
 805324b:	c3                   	ret    
 805324c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8053250:	88 44 24 0f          	mov    %al,0xf(%esp)
  if (!*out)
    return true;

  if (!base64_decode_ctx (ctx, in, inlen, *out, &needlen))
    {
      free (*out);
 8053254:	83 ec 0c             	sub    $0xc,%esp
 8053257:	ff 36                	pushl  (%esi)
 8053259:	e8 02 5f ff ff       	call   8049160 <free@plt>
      *out = NULL;
      return false;
 805325e:	83 c4 10             	add    $0x10,%esp
    return true;

  if (!base64_decode_ctx (ctx, in, inlen, *out, &needlen))
    {
      free (*out);
      *out = NULL;
 8053261:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
      return false;
 8053267:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax

  if (outlen)
    *outlen = needlen;

  return true;
}
 805326c:	83 c4 20             	add    $0x20,%esp
 805326f:	5b                   	pop    %ebx
 8053270:	5e                   	pop    %esi
 8053271:	5f                   	pop    %edi
 8053272:	c3                   	ret    
 8053273:	90                   	nop
 8053274:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08053278 <__afl_maybe_log>:
 8053278:	9f                   	lahf   
 8053279:	0f 90 c0             	seto   %al
 805327c:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 8053282:	85 d2                	test   %edx,%edx
 8053284:	74 22                	je     80532a8 <__afl_setup>

08053286 <__afl_store>:
 8053286:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 805328c:	31 cf                	xor    %ecx,%edi
 805328e:	d1 e9                	shr    %ecx
 8053290:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 8053296:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805329a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805329e <__afl_return>:
 805329e:	04 7f                	add    $0x7f,%al
 80532a0:	9e                   	sahf   
 80532a1:	c3                   	ret    
 80532a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080532a8 <__afl_setup>:
 80532a8:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 80532af:	75 ed                	jne    805329e <__afl_return>
 80532b1:	50                   	push   %eax
 80532b2:	51                   	push   %ecx
 80532b3:	68 b0 33 05 08       	push   $0x80533b0
 80532b8:	e8 f3 5f ff ff       	call   80492b0 <getenv@plt>
 80532bd:	83 c4 04             	add    $0x4,%esp
 80532c0:	85 c0                	test   %eax,%eax
 80532c2:	0f 84 db 00 00 00    	je     80533a3 <__afl_setup_abort>
 80532c8:	50                   	push   %eax
 80532c9:	e8 b2 61 ff ff       	call   8049480 <atoi@plt>
 80532ce:	83 c4 04             	add    $0x4,%esp
 80532d1:	6a 00                	push   $0x0
 80532d3:	6a 00                	push   $0x0
 80532d5:	50                   	push   %eax
 80532d6:	e8 15 5f ff ff       	call   80491f0 <shmat@plt>
 80532db:	83 c4 0c             	add    $0xc,%esp
 80532de:	83 f8 ff             	cmp    $0xffffffff,%eax
 80532e1:	0f 84 bc 00 00 00    	je     80533a3 <__afl_setup_abort>
 80532e7:	c6 00 01             	movb   $0x1,(%eax)
 80532ea:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 80532ef:	89 c2                	mov    %eax,%edx
 80532f1:	59                   	pop    %ecx
 80532f2:	58                   	pop    %eax

080532f3 <__afl_forkserver>:
 80532f3:	50                   	push   %eax
 80532f4:	51                   	push   %ecx
 80532f5:	52                   	push   %edx
 80532f6:	6a 04                	push   $0x4
 80532f8:	68 a0 7d 43 08       	push   $0x8437da0
 80532fd:	68 c7 00 00 00       	push   $0xc7
 8053302:	e8 89 60 ff ff       	call   8049390 <write@plt>
 8053307:	83 c4 0c             	add    $0xc,%esp
 805330a:	83 f8 04             	cmp    $0x4,%eax
 805330d:	75 6e                	jne    805337d <__afl_fork_resume>

0805330f <__afl_fork_wait_loop>:
 805330f:	6a 04                	push   $0x4
 8053311:	68 a0 7d 43 08       	push   $0x8437da0
 8053316:	68 c6 00 00 00       	push   $0xc6
 805331b:	e8 f0 5d ff ff       	call   8049110 <read@plt>
 8053320:	83 c4 0c             	add    $0xc,%esp
 8053323:	83 f8 04             	cmp    $0x4,%eax
 8053326:	75 74                	jne    805339c <__afl_die>
 8053328:	e8 f3 60 ff ff       	call   8049420 <fork@plt>
 805332d:	83 f8 00             	cmp    $0x0,%eax
 8053330:	7c 6a                	jl     805339c <__afl_die>
 8053332:	74 49                	je     805337d <__afl_fork_resume>
 8053334:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 8053339:	6a 04                	push   $0x4
 805333b:	68 00 7e 43 08       	push   $0x8437e00
 8053340:	68 c7 00 00 00       	push   $0xc7
 8053345:	e8 46 60 ff ff       	call   8049390 <write@plt>
 805334a:	83 c4 0c             	add    $0xc,%esp
 805334d:	6a 00                	push   $0x0
 805334f:	68 a0 7d 43 08       	push   $0x8437da0
 8053354:	ff 35 00 7e 43 08    	pushl  0x8437e00
 805335a:	e8 e1 5e ff ff       	call   8049240 <waitpid@plt>
 805335f:	83 c4 0c             	add    $0xc,%esp
 8053362:	83 f8 00             	cmp    $0x0,%eax
 8053365:	7e 35                	jle    805339c <__afl_die>
 8053367:	6a 04                	push   $0x4
 8053369:	68 a0 7d 43 08       	push   $0x8437da0
 805336e:	68 c7 00 00 00       	push   $0xc7
 8053373:	e8 18 60 ff ff       	call   8049390 <write@plt>
 8053378:	83 c4 0c             	add    $0xc,%esp
 805337b:	eb 92                	jmp    805330f <__afl_fork_wait_loop>

0805337d <__afl_fork_resume>:
 805337d:	68 c6 00 00 00       	push   $0xc6
 8053382:	e8 69 61 ff ff       	call   80494f0 <close@plt>
 8053387:	68 c7 00 00 00       	push   $0xc7
 805338c:	e8 5f 61 ff ff       	call   80494f0 <close@plt>
 8053391:	83 c4 08             	add    $0x8,%esp
 8053394:	5a                   	pop    %edx
 8053395:	59                   	pop    %ecx
 8053396:	58                   	pop    %eax
 8053397:	e9 ea fe ff ff       	jmp    8053286 <__afl_store>

0805339c <__afl_die>:
 805339c:	31 c0                	xor    %eax,%eax
 805339e:	e8 9d 5d ff ff       	call   8049140 <_exit@plt>

080533a3 <__afl_setup_abort>:
 80533a3:	fe 05 20 7e 43 08    	incb   0x8437e20
 80533a9:	59                   	pop    %ecx
 80533aa:	58                   	pop    %eax
 80533ab:	e9 ee fe ff ff       	jmp    805329e <__afl_return>

080533b0 <.AFL_SHM_ENV>:
 80533b0:	5f                   	pop    %edi
 80533b1:	5f                   	pop    %edi
 80533b2:	41                   	inc    %ecx
 80533b3:	46                   	inc    %esi
 80533b4:	4c                   	dec    %esp
 80533b5:	5f                   	pop    %edi
 80533b6:	53                   	push   %ebx
 80533b7:	48                   	dec    %eax
 80533b8:	4d                   	dec    %ebp
 80533b9:	5f                   	pop    %edi
 80533ba:	49                   	dec    %ecx
 80533bb:	44                   	inc    %esp
 80533bc:	00 66 90             	add    %ah,-0x70(%esi)
 80533bf:	90                   	nop

080533c0 <close_stdout_set_file_name>:
/* Set the file name to be reported in the event an error is detected
   by close_stdout.  */
void
close_stdout_set_file_name (const char *file)
{
  file_name = file;
 80533c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80533c4:	89 3c 24             	mov    %edi,(%esp)
 80533c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80533cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80533cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80533d3:	b9 eb 2a 00 00       	mov    $0x2aeb,%ecx
 80533d8:	e8 1b 03 00 00       	call   80536f8 <__afl_maybe_log>
 80533dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80533e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80533e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80533e9:	8b 3c 24             	mov    (%esp),%edi
 80533ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80533f0:	8b 44 24 04          	mov    0x4(%esp),%eax
 80533f4:	a3 04 7c 43 08       	mov    %eax,0x8437c04
 80533f9:	c3                   	ret    
 80533fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08053400 <close_stdout_set_ignore_EPIPE>:
   and should not lead to a diagnostic message.  */

void
close_stdout_set_ignore_EPIPE (bool ignore)
{
  ignore_EPIPE = ignore;
 8053400:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053404:	89 3c 24             	mov    %edi,(%esp)
 8053407:	89 54 24 04          	mov    %edx,0x4(%esp)
 805340b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805340f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053413:	b9 9f 25 00 00       	mov    $0x259f,%ecx
 8053418:	e8 db 02 00 00       	call   80536f8 <__afl_maybe_log>
 805341d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053421:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053425:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053429:	8b 3c 24             	mov    (%esp),%edi
 805342c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053430:	8b 44 24 04          	mov    0x4(%esp),%eax
 8053434:	a2 00 7c 43 08       	mov    %al,0x8437c00
 8053439:	c3                   	ret    
 805343a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08053440 <close_stdout>:
   tools (most notably 'make' and other build-management systems) depend
   on being able to detect failure in other tools via their exit status.  */

void
close_stdout (void)
{
 8053440:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053444:	89 3c 24             	mov    %edi,(%esp)
 8053447:	89 54 24 04          	mov    %edx,0x4(%esp)
 805344b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805344f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053453:	b9 99 65 00 00       	mov    $0x6599,%ecx
 8053458:	e8 9b 02 00 00       	call   80536f8 <__afl_maybe_log>
 805345d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053461:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053465:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053469:	8b 3c 24             	mov    (%esp),%edi
 805346c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053470:	56                   	push   %esi
 8053471:	53                   	push   %ebx
 8053472:	83 ec 10             	sub    $0x10,%esp
  if (close_stream (stdout) != 0
 8053475:	ff 35 d8 72 06 08    	pushl  0x80672d8
 805347b:	e8 60 dd 00 00       	call   80611e0 <close_stream>
 8053480:	83 c4 10             	add    $0x10,%esp
 8053483:	85 c0                	test   %eax,%eax
 8053485:	0f 84 b1 00 00 00    	je     805353c <close_stdout+0xfc>
 805348b:	90                   	nop
 805348c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053490:	89 3c 24             	mov    %edi,(%esp)
 8053493:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053497:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805349b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805349f:	b9 75 55 00 00       	mov    $0x5575,%ecx
 80534a4:	e8 4f 02 00 00       	call   80536f8 <__afl_maybe_log>
 80534a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80534ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80534b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80534b5:	8b 3c 24             	mov    (%esp),%edi
 80534b8:	8d 64 24 10          	lea    0x10(%esp),%esp
      && !(ignore_EPIPE && errno == EPIPE))
 80534bc:	80 3d 00 7c 43 08 00 	cmpb   $0x0,0x8437c00
 80534c3:	0f 84 f5 00 00 00    	je     80535be <close_stdout+0x17e>
 80534c9:	8d 76 00             	lea    0x0(%esi),%esi
 80534cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80534d0:	89 3c 24             	mov    %edi,(%esp)
 80534d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80534d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80534db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80534df:	b9 2a 29 00 00       	mov    $0x292a,%ecx
 80534e4:	e8 0f 02 00 00       	call   80536f8 <__afl_maybe_log>
 80534e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80534ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80534f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80534f5:	8b 3c 24             	mov    (%esp),%edi
 80534f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80534fc:	e8 cf 5e ff ff       	call   80493d0 <__errno_location@plt>
 8053501:	83 38 20             	cmpl   $0x20,(%eax)
 8053504:	0f 85 b4 00 00 00    	jne    80535be <close_stdout+0x17e>
 805350a:	66 90                	xchg   %ax,%ax
 805350c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053510:	89 3c 24             	mov    %edi,(%esp)
 8053513:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053517:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805351b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805351f:	b9 e1 46 00 00       	mov    $0x46e1,%ecx
 8053524:	e8 cf 01 00 00       	call   80536f8 <__afl_maybe_log>
 8053529:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805352d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053531:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053535:	8b 3c 24             	mov    (%esp),%edi
 8053538:	8d 64 24 10          	lea    0x10(%esp),%esp
        error (0, errno, "%s", write_error);

      _exit (exit_failure);
    }

   if (close_stream (stderr) != 0)
 805353c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053540:	89 3c 24             	mov    %edi,(%esp)
 8053543:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053547:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805354b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805354f:	b9 e9 e5 00 00       	mov    $0xe5e9,%ecx
 8053554:	e8 9f 01 00 00       	call   80536f8 <__afl_maybe_log>
 8053559:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805355d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053561:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053565:	8b 3c 24             	mov    (%esp),%edi
 8053568:	8d 64 24 10          	lea    0x10(%esp),%esp
 805356c:	83 ec 0c             	sub    $0xc,%esp
 805356f:	ff 35 c4 72 06 08    	pushl  0x80672c4
 8053575:	e8 66 dc 00 00       	call   80611e0 <close_stream>
 805357a:	83 c4 10             	add    $0x10,%esp
 805357d:	85 c0                	test   %eax,%eax
 805357f:	0f 85 e4 00 00 00    	jne    8053669 <close_stdout+0x229>
 8053585:	8d 76 00             	lea    0x0(%esi),%esi
 8053588:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805358c:	89 3c 24             	mov    %edi,(%esp)
 805358f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053593:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053597:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805359b:	b9 d4 37 00 00       	mov    $0x37d4,%ecx
 80535a0:	e8 53 01 00 00       	call   80536f8 <__afl_maybe_log>
 80535a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80535a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80535ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80535b1:	8b 3c 24             	mov    (%esp),%edi
 80535b4:	8d 64 24 10          	lea    0x10(%esp),%esp
     _exit (exit_failure);
}
 80535b8:	83 c4 04             	add    $0x4,%esp
 80535bb:	5b                   	pop    %ebx
 80535bc:	5e                   	pop    %esi
 80535bd:	c3                   	ret    
 80535be:	66 90                	xchg   %ax,%ax
close_stdout (void)
{
  if (close_stream (stdout) != 0
      && !(ignore_EPIPE && errno == EPIPE))
    {
      char const *write_error = _("write error");
 80535c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80535c4:	89 3c 24             	mov    %edi,(%esp)
 80535c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80535cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80535cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80535d3:	b9 f5 6d 00 00       	mov    $0x6df5,%ecx
 80535d8:	e8 1b 01 00 00       	call   80536f8 <__afl_maybe_log>
 80535dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80535e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80535e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80535e9:	8b 3c 24             	mov    (%esp),%edi
 80535ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80535f0:	50                   	push   %eax
 80535f1:	6a 05                	push   $0x5
 80535f3:	68 4c 30 06 08       	push   $0x806304c
 80535f8:	6a 00                	push   $0x0
 80535fa:	e8 e1 5b ff ff       	call   80491e0 <dcgettext@plt>
 80535ff:	89 c3                	mov    %eax,%ebx
      if (file_name)
 8053601:	a1 04 7c 43 08       	mov    0x8437c04,%eax
 8053606:	83 c4 10             	add    $0x10,%esp
 8053609:	85 c0                	test   %eax,%eax
 805360b:	0f 84 9a 00 00 00    	je     80536ab <close_stdout+0x26b>
 8053611:	8d 76 00             	lea    0x0(%esi),%esi
 8053614:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053618:	89 3c 24             	mov    %edi,(%esp)
 805361b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805361f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053623:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053627:	b9 39 a0 00 00       	mov    $0xa039,%ecx
 805362c:	e8 c7 00 00 00       	call   80536f8 <__afl_maybe_log>
 8053631:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053635:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053639:	8b 54 24 04          	mov    0x4(%esp),%edx
 805363d:	8b 3c 24             	mov    (%esp),%edi
 8053640:	8d 64 24 10          	lea    0x10(%esp),%esp
        error (0, errno, "%s: %s", quotearg_colon (file_name),
 8053644:	83 ec 0c             	sub    $0xc,%esp
 8053647:	50                   	push   %eax
 8053648:	e8 73 69 00 00       	call   8059fc0 <quotearg_colon>
 805364d:	89 c6                	mov    %eax,%esi
 805364f:	e8 7c 5d ff ff       	call   80493d0 <__errno_location@plt>
 8053654:	89 1c 24             	mov    %ebx,(%esp)
 8053657:	56                   	push   %esi
 8053658:	68 00 38 06 08       	push   $0x8063800
 805365d:	ff 30                	pushl  (%eax)
 805365f:	6a 00                	push   $0x0
 8053661:	e8 2a 5c ff ff       	call   8049290 <error@plt>
 8053666:	83 c4 20             	add    $0x20,%esp
 8053669:	8d 76 00             	lea    0x0(%esi),%esi

      _exit (exit_failure);
    }

   if (close_stream (stderr) != 0)
     _exit (exit_failure);
 805366c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053670:	89 3c 24             	mov    %edi,(%esp)
 8053673:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053677:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805367b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805367f:	b9 43 35 00 00       	mov    $0x3543,%ecx
 8053684:	e8 6f 00 00 00       	call   80536f8 <__afl_maybe_log>
 8053689:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805368d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053691:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053695:	8b 3c 24             	mov    (%esp),%edi
 8053698:	8d 64 24 10          	lea    0x10(%esp),%esp
 805369c:	8b 15 4c 72 06 08    	mov    0x806724c,%edx
 80536a2:	83 ec 0c             	sub    $0xc,%esp
 80536a5:	52                   	push   %edx
 80536a6:	e8 95 5a ff ff       	call   8049140 <_exit@plt>
 80536ab:	90                   	nop
      char const *write_error = _("write error");
      if (file_name)
        error (0, errno, "%s: %s", quotearg_colon (file_name),
               write_error);
      else
        error (0, errno, "%s", write_error);
 80536ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80536b0:	89 3c 24             	mov    %edi,(%esp)
 80536b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80536b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80536bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80536bf:	b9 e3 7e 00 00       	mov    $0x7ee3,%ecx
 80536c4:	e8 2f 00 00 00       	call   80536f8 <__afl_maybe_log>
 80536c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80536cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80536d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80536d5:	8b 3c 24             	mov    (%esp),%edi
 80536d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80536dc:	e8 ef 5c ff ff       	call   80493d0 <__errno_location@plt>
 80536e1:	53                   	push   %ebx
 80536e2:	68 40 31 06 08       	push   $0x8063140
 80536e7:	ff 30                	pushl  (%eax)
 80536e9:	6a 00                	push   $0x0
 80536eb:	e8 a0 5b ff ff       	call   8049290 <error@plt>
 80536f0:	83 c4 10             	add    $0x10,%esp
 80536f3:	e9 71 ff ff ff       	jmp    8053669 <close_stdout+0x229>

080536f8 <__afl_maybe_log>:
 80536f8:	9f                   	lahf   
 80536f9:	0f 90 c0             	seto   %al
 80536fc:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 8053702:	85 d2                	test   %edx,%edx
 8053704:	74 22                	je     8053728 <__afl_setup>

08053706 <__afl_store>:
 8053706:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 805370c:	31 cf                	xor    %ecx,%edi
 805370e:	d1 e9                	shr    %ecx
 8053710:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 8053716:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805371a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805371e <__afl_return>:
 805371e:	04 7f                	add    $0x7f,%al
 8053720:	9e                   	sahf   
 8053721:	c3                   	ret    
 8053722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08053728 <__afl_setup>:
 8053728:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 805372f:	75 ed                	jne    805371e <__afl_return>
 8053731:	50                   	push   %eax
 8053732:	51                   	push   %ecx
 8053733:	68 30 38 05 08       	push   $0x8053830
 8053738:	e8 73 5b ff ff       	call   80492b0 <getenv@plt>
 805373d:	83 c4 04             	add    $0x4,%esp
 8053740:	85 c0                	test   %eax,%eax
 8053742:	0f 84 db 00 00 00    	je     8053823 <__afl_setup_abort>
 8053748:	50                   	push   %eax
 8053749:	e8 32 5d ff ff       	call   8049480 <atoi@plt>
 805374e:	83 c4 04             	add    $0x4,%esp
 8053751:	6a 00                	push   $0x0
 8053753:	6a 00                	push   $0x0
 8053755:	50                   	push   %eax
 8053756:	e8 95 5a ff ff       	call   80491f0 <shmat@plt>
 805375b:	83 c4 0c             	add    $0xc,%esp
 805375e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8053761:	0f 84 bc 00 00 00    	je     8053823 <__afl_setup_abort>
 8053767:	c6 00 01             	movb   $0x1,(%eax)
 805376a:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 805376f:	89 c2                	mov    %eax,%edx
 8053771:	59                   	pop    %ecx
 8053772:	58                   	pop    %eax

08053773 <__afl_forkserver>:
 8053773:	50                   	push   %eax
 8053774:	51                   	push   %ecx
 8053775:	52                   	push   %edx
 8053776:	6a 04                	push   $0x4
 8053778:	68 a0 7d 43 08       	push   $0x8437da0
 805377d:	68 c7 00 00 00       	push   $0xc7
 8053782:	e8 09 5c ff ff       	call   8049390 <write@plt>
 8053787:	83 c4 0c             	add    $0xc,%esp
 805378a:	83 f8 04             	cmp    $0x4,%eax
 805378d:	75 6e                	jne    80537fd <__afl_fork_resume>

0805378f <__afl_fork_wait_loop>:
 805378f:	6a 04                	push   $0x4
 8053791:	68 a0 7d 43 08       	push   $0x8437da0
 8053796:	68 c6 00 00 00       	push   $0xc6
 805379b:	e8 70 59 ff ff       	call   8049110 <read@plt>
 80537a0:	83 c4 0c             	add    $0xc,%esp
 80537a3:	83 f8 04             	cmp    $0x4,%eax
 80537a6:	75 74                	jne    805381c <__afl_die>
 80537a8:	e8 73 5c ff ff       	call   8049420 <fork@plt>
 80537ad:	83 f8 00             	cmp    $0x0,%eax
 80537b0:	7c 6a                	jl     805381c <__afl_die>
 80537b2:	74 49                	je     80537fd <__afl_fork_resume>
 80537b4:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 80537b9:	6a 04                	push   $0x4
 80537bb:	68 00 7e 43 08       	push   $0x8437e00
 80537c0:	68 c7 00 00 00       	push   $0xc7
 80537c5:	e8 c6 5b ff ff       	call   8049390 <write@plt>
 80537ca:	83 c4 0c             	add    $0xc,%esp
 80537cd:	6a 00                	push   $0x0
 80537cf:	68 a0 7d 43 08       	push   $0x8437da0
 80537d4:	ff 35 00 7e 43 08    	pushl  0x8437e00
 80537da:	e8 61 5a ff ff       	call   8049240 <waitpid@plt>
 80537df:	83 c4 0c             	add    $0xc,%esp
 80537e2:	83 f8 00             	cmp    $0x0,%eax
 80537e5:	7e 35                	jle    805381c <__afl_die>
 80537e7:	6a 04                	push   $0x4
 80537e9:	68 a0 7d 43 08       	push   $0x8437da0
 80537ee:	68 c7 00 00 00       	push   $0xc7
 80537f3:	e8 98 5b ff ff       	call   8049390 <write@plt>
 80537f8:	83 c4 0c             	add    $0xc,%esp
 80537fb:	eb 92                	jmp    805378f <__afl_fork_wait_loop>

080537fd <__afl_fork_resume>:
 80537fd:	68 c6 00 00 00       	push   $0xc6
 8053802:	e8 e9 5c ff ff       	call   80494f0 <close@plt>
 8053807:	68 c7 00 00 00       	push   $0xc7
 805380c:	e8 df 5c ff ff       	call   80494f0 <close@plt>
 8053811:	83 c4 08             	add    $0x8,%esp
 8053814:	5a                   	pop    %edx
 8053815:	59                   	pop    %ecx
 8053816:	58                   	pop    %eax
 8053817:	e9 ea fe ff ff       	jmp    8053706 <__afl_store>

0805381c <__afl_die>:
 805381c:	31 c0                	xor    %eax,%eax
 805381e:	e8 1d 59 ff ff       	call   8049140 <_exit@plt>

08053823 <__afl_setup_abort>:
 8053823:	fe 05 20 7e 43 08    	incb   0x8437e20
 8053829:	59                   	pop    %ecx
 805382a:	58                   	pop    %eax
 805382b:	e9 ee fe ff ff       	jmp    805371e <__afl_return>

08053830 <.AFL_SHM_ENV>:
 8053830:	5f                   	pop    %edi
 8053831:	5f                   	pop    %edi
 8053832:	41                   	inc    %ecx
 8053833:	46                   	inc    %esi
 8053834:	4c                   	dec    %esp
 8053835:	5f                   	pop    %edi
 8053836:	53                   	push   %ebx
 8053837:	48                   	dec    %eax
 8053838:	4d                   	dec    %ebp
 8053839:	5f                   	pop    %edi
 805383a:	49                   	dec    %ecx
 805383b:	44                   	inc    %esp
 805383c:	00 66 90             	add    %ah,-0x70(%esi)
 805383f:	90                   	nop

08053840 <fdadvise>:

void
fdadvise (int fd, off_t offset, off_t len, fadvice_t advice)
{
#if HAVE_POSIX_FADVISE
  ignore_value (posix_fadvise (fd, offset, len, advice));
 8053840:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053844:	89 3c 24             	mov    %edi,(%esp)
 8053847:	89 54 24 04          	mov    %edx,0x4(%esp)
 805384b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805384f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053853:	b9 a0 56 00 00       	mov    $0x56a0,%ecx
 8053858:	e8 e3 00 00 00       	call   8053940 <__afl_maybe_log>
 805385d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053861:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053865:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053869:	8b 3c 24             	mov    (%esp),%edi
 805386c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053870:	e9 4b 5c ff ff       	jmp    80494c0 <posix_fadvise64@plt>
 8053875:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8053879:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08053880 <fadvise>:
#endif
}

void
fadvise (FILE *fp, fadvice_t advice)
{
 8053880:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053884:	89 3c 24             	mov    %edi,(%esp)
 8053887:	89 54 24 04          	mov    %edx,0x4(%esp)
 805388b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805388f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053893:	b9 b4 90 00 00       	mov    $0x90b4,%ecx
 8053898:	e8 a3 00 00 00       	call   8053940 <__afl_maybe_log>
 805389d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80538a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80538a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80538a9:	8b 3c 24             	mov    (%esp),%edi
 80538ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80538b0:	83 ec 0c             	sub    $0xc,%esp
 80538b3:	8b 44 24 10          	mov    0x10(%esp),%eax
  if (fp)
 80538b7:	85 c0                	test   %eax,%eax
 80538b9:	74 51                	je     805390c <fadvise+0x8c>
 80538bb:	90                   	nop
 80538bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80538c0:	89 3c 24             	mov    %edi,(%esp)
 80538c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80538c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80538cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80538cf:	b9 0a 68 00 00       	mov    $0x680a,%ecx
 80538d4:	e8 67 00 00 00       	call   8053940 <__afl_maybe_log>
 80538d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80538dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80538e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80538e5:	8b 3c 24             	mov    (%esp),%edi
 80538e8:	8d 64 24 10          	lea    0x10(%esp),%esp
    fdadvise (fileno (fp), 0, 0, advice);
 80538ec:	83 ec 0c             	sub    $0xc,%esp
 80538ef:	50                   	push   %eax
 80538f0:	e8 fb 5a ff ff       	call   80493f0 <fileno@plt>

void
fdadvise (int fd, off_t offset, off_t len, fadvice_t advice)
{
#if HAVE_POSIX_FADVISE
  ignore_value (posix_fadvise (fd, offset, len, advice));
 80538f5:	5a                   	pop    %edx
 80538f6:	59                   	pop    %ecx
 80538f7:	ff 74 24 1c          	pushl  0x1c(%esp)
 80538fb:	6a 00                	push   $0x0
 80538fd:	6a 00                	push   $0x0
 80538ff:	6a 00                	push   $0x0
 8053901:	6a 00                	push   $0x0
 8053903:	50                   	push   %eax
 8053904:	e8 b7 5b ff ff       	call   80494c0 <posix_fadvise64@plt>
 8053909:	83 c4 20             	add    $0x20,%esp
void
fadvise (FILE *fp, fadvice_t advice)
{
  if (fp)
    fdadvise (fileno (fp), 0, 0, advice);
}
 805390c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053910:	89 3c 24             	mov    %edi,(%esp)
 8053913:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805391b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805391f:	b9 81 88 00 00       	mov    $0x8881,%ecx
 8053924:	e8 17 00 00 00       	call   8053940 <__afl_maybe_log>
 8053929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805392d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053931:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053935:	8b 3c 24             	mov    (%esp),%edi
 8053938:	8d 64 24 10          	lea    0x10(%esp),%esp
 805393c:	83 c4 0c             	add    $0xc,%esp
 805393f:	c3                   	ret    

08053940 <__afl_maybe_log>:
 8053940:	9f                   	lahf   
 8053941:	0f 90 c0             	seto   %al
 8053944:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 805394a:	85 d2                	test   %edx,%edx
 805394c:	74 22                	je     8053970 <__afl_setup>

0805394e <__afl_store>:
 805394e:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 8053954:	31 cf                	xor    %ecx,%edi
 8053956:	d1 e9                	shr    %ecx
 8053958:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 805395e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8053962:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08053966 <__afl_return>:
 8053966:	04 7f                	add    $0x7f,%al
 8053968:	9e                   	sahf   
 8053969:	c3                   	ret    
 805396a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08053970 <__afl_setup>:
 8053970:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 8053977:	75 ed                	jne    8053966 <__afl_return>
 8053979:	50                   	push   %eax
 805397a:	51                   	push   %ecx
 805397b:	68 78 3a 05 08       	push   $0x8053a78
 8053980:	e8 2b 59 ff ff       	call   80492b0 <getenv@plt>
 8053985:	83 c4 04             	add    $0x4,%esp
 8053988:	85 c0                	test   %eax,%eax
 805398a:	0f 84 db 00 00 00    	je     8053a6b <__afl_setup_abort>
 8053990:	50                   	push   %eax
 8053991:	e8 ea 5a ff ff       	call   8049480 <atoi@plt>
 8053996:	83 c4 04             	add    $0x4,%esp
 8053999:	6a 00                	push   $0x0
 805399b:	6a 00                	push   $0x0
 805399d:	50                   	push   %eax
 805399e:	e8 4d 58 ff ff       	call   80491f0 <shmat@plt>
 80539a3:	83 c4 0c             	add    $0xc,%esp
 80539a6:	83 f8 ff             	cmp    $0xffffffff,%eax
 80539a9:	0f 84 bc 00 00 00    	je     8053a6b <__afl_setup_abort>
 80539af:	c6 00 01             	movb   $0x1,(%eax)
 80539b2:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 80539b7:	89 c2                	mov    %eax,%edx
 80539b9:	59                   	pop    %ecx
 80539ba:	58                   	pop    %eax

080539bb <__afl_forkserver>:
 80539bb:	50                   	push   %eax
 80539bc:	51                   	push   %ecx
 80539bd:	52                   	push   %edx
 80539be:	6a 04                	push   $0x4
 80539c0:	68 a0 7d 43 08       	push   $0x8437da0
 80539c5:	68 c7 00 00 00       	push   $0xc7
 80539ca:	e8 c1 59 ff ff       	call   8049390 <write@plt>
 80539cf:	83 c4 0c             	add    $0xc,%esp
 80539d2:	83 f8 04             	cmp    $0x4,%eax
 80539d5:	75 6e                	jne    8053a45 <__afl_fork_resume>

080539d7 <__afl_fork_wait_loop>:
 80539d7:	6a 04                	push   $0x4
 80539d9:	68 a0 7d 43 08       	push   $0x8437da0
 80539de:	68 c6 00 00 00       	push   $0xc6
 80539e3:	e8 28 57 ff ff       	call   8049110 <read@plt>
 80539e8:	83 c4 0c             	add    $0xc,%esp
 80539eb:	83 f8 04             	cmp    $0x4,%eax
 80539ee:	75 74                	jne    8053a64 <__afl_die>
 80539f0:	e8 2b 5a ff ff       	call   8049420 <fork@plt>
 80539f5:	83 f8 00             	cmp    $0x0,%eax
 80539f8:	7c 6a                	jl     8053a64 <__afl_die>
 80539fa:	74 49                	je     8053a45 <__afl_fork_resume>
 80539fc:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 8053a01:	6a 04                	push   $0x4
 8053a03:	68 00 7e 43 08       	push   $0x8437e00
 8053a08:	68 c7 00 00 00       	push   $0xc7
 8053a0d:	e8 7e 59 ff ff       	call   8049390 <write@plt>
 8053a12:	83 c4 0c             	add    $0xc,%esp
 8053a15:	6a 00                	push   $0x0
 8053a17:	68 a0 7d 43 08       	push   $0x8437da0
 8053a1c:	ff 35 00 7e 43 08    	pushl  0x8437e00
 8053a22:	e8 19 58 ff ff       	call   8049240 <waitpid@plt>
 8053a27:	83 c4 0c             	add    $0xc,%esp
 8053a2a:	83 f8 00             	cmp    $0x0,%eax
 8053a2d:	7e 35                	jle    8053a64 <__afl_die>
 8053a2f:	6a 04                	push   $0x4
 8053a31:	68 a0 7d 43 08       	push   $0x8437da0
 8053a36:	68 c7 00 00 00       	push   $0xc7
 8053a3b:	e8 50 59 ff ff       	call   8049390 <write@plt>
 8053a40:	83 c4 0c             	add    $0xc,%esp
 8053a43:	eb 92                	jmp    80539d7 <__afl_fork_wait_loop>

08053a45 <__afl_fork_resume>:
 8053a45:	68 c6 00 00 00       	push   $0xc6
 8053a4a:	e8 a1 5a ff ff       	call   80494f0 <close@plt>
 8053a4f:	68 c7 00 00 00       	push   $0xc7
 8053a54:	e8 97 5a ff ff       	call   80494f0 <close@plt>
 8053a59:	83 c4 08             	add    $0x8,%esp
 8053a5c:	5a                   	pop    %edx
 8053a5d:	59                   	pop    %ecx
 8053a5e:	58                   	pop    %eax
 8053a5f:	e9 ea fe ff ff       	jmp    805394e <__afl_store>

08053a64 <__afl_die>:
 8053a64:	31 c0                	xor    %eax,%eax
 8053a66:	e8 d5 56 ff ff       	call   8049140 <_exit@plt>

08053a6b <__afl_setup_abort>:
 8053a6b:	fe 05 20 7e 43 08    	incb   0x8437e20
 8053a71:	59                   	pop    %ecx
 8053a72:	58                   	pop    %eax
 8053a73:	e9 ee fe ff ff       	jmp    8053966 <__afl_return>

08053a78 <.AFL_SHM_ENV>:
 8053a78:	5f                   	pop    %edi
 8053a79:	5f                   	pop    %edi
 8053a7a:	41                   	inc    %ecx
 8053a7b:	46                   	inc    %esi
 8053a7c:	4c                   	dec    %esp
 8053a7d:	5f                   	pop    %edi
 8053a7e:	53                   	push   %ebx
 8053a7f:	48                   	dec    %eax
 8053a80:	4d                   	dec    %ebp
 8053a81:	5f                   	pop    %edi
 8053a82:	49                   	dec    %ecx
 8053a83:	44                   	inc    %esp
 8053a84:	00 66 90             	add    %ah,-0x70(%esi)
 8053a87:	66 90                	xchg   %ax,%ax
 8053a89:	66 90                	xchg   %ax,%ax
 8053a8b:	66 90                	xchg   %ax,%ax
 8053a8d:	66 90                	xchg   %ax,%ax
 8053a8f:	90                   	nop

08053a90 <set_program_name>:
/* Set program_name, based on argv[0].
   argv0 must be a string allocated with indefinite extent, and must not be
   modified after this call.  */
void
set_program_name (const char *argv0)
{
 8053a90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053a94:	89 3c 24             	mov    %edi,(%esp)
 8053a97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053a9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053a9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053aa3:	b9 04 09 00 00       	mov    $0x904,%ecx
 8053aa8:	e8 1b 02 00 00       	call   8053cc8 <__afl_maybe_log>
 8053aad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ab1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ab5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ab9:	8b 3c 24             	mov    (%esp),%edi
 8053abc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053ac0:	55                   	push   %ebp
 8053ac1:	57                   	push   %edi
 8053ac2:	56                   	push   %esi
 8053ac3:	53                   	push   %ebx
 8053ac4:	83 ec 0c             	sub    $0xc,%esp
 8053ac7:	8b 5c 24 20          	mov    0x20(%esp),%ebx
  const char *slash;
  const char *base;

  /* Sanity check.  POSIX requires the invoking process to pass a non-NULL
     argv[0].  */
  if (argv0 == NULL)
 8053acb:	85 db                	test   %ebx,%ebx
 8053acd:	0f 84 a5 01 00 00    	je     8053c78 <set_program_name+0x1e8>
 8053ad3:	90                   	nop
 8053ad4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053ad8:	89 3c 24             	mov    %edi,(%esp)
 8053adb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053adf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053ae3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053ae7:	b9 ac 8c 00 00       	mov    $0x8cac,%ecx
 8053aec:	e8 d7 01 00 00       	call   8053cc8 <__afl_maybe_log>
 8053af1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053af5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053af9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053afd:	8b 3c 24             	mov    (%esp),%edi
 8053b00:	8d 64 24 10          	lea    0x10(%esp),%esp
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
             stderr);
      abort ();
    }

  slash = strrchr (argv0, '/');
 8053b04:	83 ec 08             	sub    $0x8,%esp
 8053b07:	6a 2f                	push   $0x2f
 8053b09:	53                   	push   %ebx
 8053b0a:	e8 51 59 ff ff       	call   8049460 <strrchr@plt>
 8053b0f:	83 c4 10             	add    $0x10,%esp
  base = (slash != NULL ? slash + 1 : argv0);
 8053b12:	85 c0                	test   %eax,%eax
 8053b14:	0f 84 17 01 00 00    	je     8053c31 <set_program_name+0x1a1>
 8053b1a:	66 90                	xchg   %ax,%ax
 8053b1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053b20:	89 3c 24             	mov    %edi,(%esp)
 8053b23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053b27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053b2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053b2f:	b9 0e 62 00 00       	mov    $0x620e,%ecx
 8053b34:	e8 8f 01 00 00       	call   8053cc8 <__afl_maybe_log>
 8053b39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053b3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053b41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053b45:	8b 3c 24             	mov    (%esp),%edi
 8053b48:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053b4c:	8d 68 01             	lea    0x1(%eax),%ebp
 8053b4f:	89 e9                	mov    %ebp,%ecx
 8053b51:	29 d9                	sub    %ebx,%ecx
  if (base - argv0 >= 7 && strncmp (base - 7, "/.libs/", 7) == 0)
 8053b53:	83 f9 06             	cmp    $0x6,%ecx
 8053b56:	0f 8e d5 00 00 00    	jle    8053c31 <set_program_name+0x1a1>
 8053b5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053b60:	89 3c 24             	mov    %edi,(%esp)
 8053b63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053b67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053b6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053b6f:	b9 0c 8c 00 00       	mov    $0x8c0c,%ecx
 8053b74:	e8 4f 01 00 00       	call   8053cc8 <__afl_maybe_log>
 8053b79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053b7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053b81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053b85:	8b 3c 24             	mov    (%esp),%edi
 8053b88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053b8c:	8d 70 fa             	lea    -0x6(%eax),%esi
 8053b8f:	b9 07 00 00 00       	mov    $0x7,%ecx
 8053b94:	bf 40 38 06 08       	mov    $0x8063840,%edi
 8053b99:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 8053b9b:	0f 97 c2             	seta   %dl
 8053b9e:	0f 92 c1             	setb   %cl
 8053ba1:	38 ca                	cmp    %cl,%dl
 8053ba3:	0f 85 88 00 00 00    	jne    8053c31 <set_program_name+0x1a1>
 8053ba9:	8d 76 00             	lea    0x0(%esi),%esi
 8053bac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053bb0:	89 3c 24             	mov    %edi,(%esp)
 8053bb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053bb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053bbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053bbf:	b9 03 94 00 00       	mov    $0x9403,%ecx
 8053bc4:	e8 ff 00 00 00       	call   8053cc8 <__afl_maybe_log>
 8053bc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053bcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053bd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053bd5:	8b 3c 24             	mov    (%esp),%edi
 8053bd8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      argv0 = base;
      if (strncmp (base, "lt-", 3) == 0)
 8053bdc:	b9 03 00 00 00       	mov    $0x3,%ecx
 8053be1:	bf 48 38 06 08       	mov    $0x8063848,%edi
 8053be6:	89 ee                	mov    %ebp,%esi
 8053be8:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 8053bea:	89 eb                	mov    %ebp,%ebx
 8053bec:	0f 97 c2             	seta   %dl
 8053bef:	0f 92 c1             	setb   %cl
 8053bf2:	38 ca                	cmp    %cl,%dl
 8053bf4:	75 3b                	jne    8053c31 <set_program_name+0x1a1>
 8053bf6:	66 90                	xchg   %ax,%ax
 8053bf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053bfc:	89 3c 24             	mov    %edi,(%esp)
 8053bff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053c03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053c07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053c0b:	b9 3f a6 00 00       	mov    $0xa63f,%ecx
 8053c10:	e8 b3 00 00 00       	call   8053cc8 <__afl_maybe_log>
 8053c15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053c19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053c1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053c21:	8b 3c 24             	mov    (%esp),%edi
 8053c24:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          argv0 = base + 3;
 8053c28:	8d 58 04             	lea    0x4(%eax),%ebx
          /* On glibc systems, remove the "lt-" prefix from the variable
             program_invocation_short_name.  */
#if HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME
          program_invocation_short_name = (char *) argv0;
 8053c2b:	89 1d c0 72 06 08    	mov    %ebx,0x80672c0
 8053c31:	8d 76 00             	lea    0x0(%esi),%esi
         /some/hidden/place/bin/cp: `foo' and `foo' are the same file
     not
         cp: `foo' and `foo' are the same file
   */

  program_name = argv0;
 8053c34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053c38:	89 3c 24             	mov    %edi,(%esp)
 8053c3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053c3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053c43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053c47:	b9 b5 f1 00 00       	mov    $0xf1b5,%ecx
 8053c4c:	e8 77 00 00 00       	call   8053cc8 <__afl_maybe_log>
 8053c51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053c55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053c59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053c5d:	8b 3c 24             	mov    (%esp),%edi
 8053c60:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053c64:	89 1d 08 7c 43 08    	mov    %ebx,0x8437c08

  /* On glibc systems, the error() function comes from libc and uses the
     variable program_invocation_name, not program_name.  So set this variable
     as well.  */
#if HAVE_DECL_PROGRAM_INVOCATION_NAME
  program_invocation_name = (char *) argv0;
 8053c6a:	89 1d c8 72 06 08    	mov    %ebx,0x80672c8
#endif
}
 8053c70:	83 c4 0c             	add    $0xc,%esp
 8053c73:	5b                   	pop    %ebx
 8053c74:	5e                   	pop    %esi
 8053c75:	5f                   	pop    %edi
 8053c76:	5d                   	pop    %ebp
 8053c77:	c3                   	ret    
  /* Sanity check.  POSIX requires the invoking process to pass a non-NULL
     argv[0].  */
  if (argv0 == NULL)
    {
      /* It's a bug in the invoking program.  Help diagnosing it.  */
      fputs ("A NULL argv[0] was passed through an exec system call.\n",
 8053c78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053c7c:	89 3c 24             	mov    %edi,(%esp)
 8053c7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053c83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053c87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053c8b:	b9 5b 34 00 00       	mov    $0x345b,%ecx
 8053c90:	e8 33 00 00 00       	call   8053cc8 <__afl_maybe_log>
 8053c95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053c99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053c9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ca1:	8b 3c 24             	mov    (%esp),%edi
 8053ca4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053ca8:	ff 35 c4 72 06 08    	pushl  0x80672c4
 8053cae:	6a 37                	push   $0x37
 8053cb0:	6a 01                	push   $0x1
 8053cb2:	68 08 38 06 08       	push   $0x8063808
 8053cb7:	e8 64 55 ff ff       	call   8049220 <fwrite@plt>
             stderr);
      abort ();
 8053cbc:	e8 1f 58 ff ff       	call   80494e0 <abort@plt>
 8053cc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08053cc8 <__afl_maybe_log>:
 8053cc8:	9f                   	lahf   
 8053cc9:	0f 90 c0             	seto   %al
 8053ccc:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 8053cd2:	85 d2                	test   %edx,%edx
 8053cd4:	74 22                	je     8053cf8 <__afl_setup>

08053cd6 <__afl_store>:
 8053cd6:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 8053cdc:	31 cf                	xor    %ecx,%edi
 8053cde:	d1 e9                	shr    %ecx
 8053ce0:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 8053ce6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8053cea:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08053cee <__afl_return>:
 8053cee:	04 7f                	add    $0x7f,%al
 8053cf0:	9e                   	sahf   
 8053cf1:	c3                   	ret    
 8053cf2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08053cf8 <__afl_setup>:
 8053cf8:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 8053cff:	75 ed                	jne    8053cee <__afl_return>
 8053d01:	50                   	push   %eax
 8053d02:	51                   	push   %ecx
 8053d03:	68 00 3e 05 08       	push   $0x8053e00
 8053d08:	e8 a3 55 ff ff       	call   80492b0 <getenv@plt>
 8053d0d:	83 c4 04             	add    $0x4,%esp
 8053d10:	85 c0                	test   %eax,%eax
 8053d12:	0f 84 db 00 00 00    	je     8053df3 <__afl_setup_abort>
 8053d18:	50                   	push   %eax
 8053d19:	e8 62 57 ff ff       	call   8049480 <atoi@plt>
 8053d1e:	83 c4 04             	add    $0x4,%esp
 8053d21:	6a 00                	push   $0x0
 8053d23:	6a 00                	push   $0x0
 8053d25:	50                   	push   %eax
 8053d26:	e8 c5 54 ff ff       	call   80491f0 <shmat@plt>
 8053d2b:	83 c4 0c             	add    $0xc,%esp
 8053d2e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8053d31:	0f 84 bc 00 00 00    	je     8053df3 <__afl_setup_abort>
 8053d37:	c6 00 01             	movb   $0x1,(%eax)
 8053d3a:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 8053d3f:	89 c2                	mov    %eax,%edx
 8053d41:	59                   	pop    %ecx
 8053d42:	58                   	pop    %eax

08053d43 <__afl_forkserver>:
 8053d43:	50                   	push   %eax
 8053d44:	51                   	push   %ecx
 8053d45:	52                   	push   %edx
 8053d46:	6a 04                	push   $0x4
 8053d48:	68 a0 7d 43 08       	push   $0x8437da0
 8053d4d:	68 c7 00 00 00       	push   $0xc7
 8053d52:	e8 39 56 ff ff       	call   8049390 <write@plt>
 8053d57:	83 c4 0c             	add    $0xc,%esp
 8053d5a:	83 f8 04             	cmp    $0x4,%eax
 8053d5d:	75 6e                	jne    8053dcd <__afl_fork_resume>

08053d5f <__afl_fork_wait_loop>:
 8053d5f:	6a 04                	push   $0x4
 8053d61:	68 a0 7d 43 08       	push   $0x8437da0
 8053d66:	68 c6 00 00 00       	push   $0xc6
 8053d6b:	e8 a0 53 ff ff       	call   8049110 <read@plt>
 8053d70:	83 c4 0c             	add    $0xc,%esp
 8053d73:	83 f8 04             	cmp    $0x4,%eax
 8053d76:	75 74                	jne    8053dec <__afl_die>
 8053d78:	e8 a3 56 ff ff       	call   8049420 <fork@plt>
 8053d7d:	83 f8 00             	cmp    $0x0,%eax
 8053d80:	7c 6a                	jl     8053dec <__afl_die>
 8053d82:	74 49                	je     8053dcd <__afl_fork_resume>
 8053d84:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 8053d89:	6a 04                	push   $0x4
 8053d8b:	68 00 7e 43 08       	push   $0x8437e00
 8053d90:	68 c7 00 00 00       	push   $0xc7
 8053d95:	e8 f6 55 ff ff       	call   8049390 <write@plt>
 8053d9a:	83 c4 0c             	add    $0xc,%esp
 8053d9d:	6a 00                	push   $0x0
 8053d9f:	68 a0 7d 43 08       	push   $0x8437da0
 8053da4:	ff 35 00 7e 43 08    	pushl  0x8437e00
 8053daa:	e8 91 54 ff ff       	call   8049240 <waitpid@plt>
 8053daf:	83 c4 0c             	add    $0xc,%esp
 8053db2:	83 f8 00             	cmp    $0x0,%eax
 8053db5:	7e 35                	jle    8053dec <__afl_die>
 8053db7:	6a 04                	push   $0x4
 8053db9:	68 a0 7d 43 08       	push   $0x8437da0
 8053dbe:	68 c7 00 00 00       	push   $0xc7
 8053dc3:	e8 c8 55 ff ff       	call   8049390 <write@plt>
 8053dc8:	83 c4 0c             	add    $0xc,%esp
 8053dcb:	eb 92                	jmp    8053d5f <__afl_fork_wait_loop>

08053dcd <__afl_fork_resume>:
 8053dcd:	68 c6 00 00 00       	push   $0xc6
 8053dd2:	e8 19 57 ff ff       	call   80494f0 <close@plt>
 8053dd7:	68 c7 00 00 00       	push   $0xc7
 8053ddc:	e8 0f 57 ff ff       	call   80494f0 <close@plt>
 8053de1:	83 c4 08             	add    $0x8,%esp
 8053de4:	5a                   	pop    %edx
 8053de5:	59                   	pop    %ecx
 8053de6:	58                   	pop    %eax
 8053de7:	e9 ea fe ff ff       	jmp    8053cd6 <__afl_store>

08053dec <__afl_die>:
 8053dec:	31 c0                	xor    %eax,%eax
 8053dee:	e8 4d 53 ff ff       	call   8049140 <_exit@plt>

08053df3 <__afl_setup_abort>:
 8053df3:	fe 05 20 7e 43 08    	incb   0x8437e20
 8053df9:	59                   	pop    %ecx
 8053dfa:	58                   	pop    %eax
 8053dfb:	e9 ee fe ff ff       	jmp    8053cee <__afl_return>

08053e00 <.AFL_SHM_ENV>:
 8053e00:	5f                   	pop    %edi
 8053e01:	5f                   	pop    %edi
 8053e02:	41                   	inc    %ecx
 8053e03:	46                   	inc    %esi
 8053e04:	4c                   	dec    %esp
 8053e05:	5f                   	pop    %edi
 8053e06:	53                   	push   %ebx
 8053e07:	48                   	dec    %eax
 8053e08:	4d                   	dec    %ebp
 8053e09:	5f                   	pop    %edi
 8053e0a:	49                   	dec    %ecx
 8053e0b:	44                   	inc    %esp
 8053e0c:	00 66 90             	add    %ah,-0x70(%esi)
 8053e0f:	90                   	nop

08053e10 <quoting_options_from_style>:
}

/* Return quoting options for STYLE, with no extra quoting.  */
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
 8053e10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053e14:	89 3c 24             	mov    %edi,(%esp)
 8053e17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053e1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053e1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053e23:	b9 56 3e 00 00       	mov    $0x3e56,%ecx
 8053e28:	e8 3b 65 00 00       	call   805a368 <__afl_maybe_log>
 8053e2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053e31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053e35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053e39:	8b 3c 24             	mov    (%esp),%edi
 8053e3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053e40:	57                   	push   %edi
 8053e41:	53                   	push   %ebx
 8053e42:	89 c3                	mov    %eax,%ebx
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
 8053e44:	b9 0c 00 00 00       	mov    $0xc,%ecx
 8053e49:	31 c0                	xor    %eax,%eax
 8053e4b:	89 df                	mov    %ebx,%edi
}

/* Return quoting options for STYLE, with no extra quoting.  */
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
 8053e4d:	83 ec 04             	sub    $0x4,%esp
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
  if (style == custom_quoting_style)
 8053e50:	83 fa 08             	cmp    $0x8,%edx

/* Return quoting options for STYLE, with no extra quoting.  */
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
 8053e53:	f3 ab                	rep stos %eax,%es:(%edi)
  if (style == custom_quoting_style)
 8053e55:	74 3b                	je     8053e92 <quoting_options_from_style+0x82>
 8053e57:	90                   	nop
 8053e58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053e5c:	89 3c 24             	mov    %edi,(%esp)
 8053e5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053e63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053e67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053e6b:	b9 3d 0f 00 00       	mov    $0xf3d,%ecx
 8053e70:	e8 f3 64 00 00       	call   805a368 <__afl_maybe_log>
 8053e75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053e79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053e7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053e81:	8b 3c 24             	mov    (%esp),%edi
 8053e84:	8d 64 24 10          	lea    0x10(%esp),%esp
    abort ();
  o.style = style;
  return o;
 8053e88:	89 13                	mov    %edx,(%ebx)
}
 8053e8a:	83 c4 04             	add    $0x4,%esp
 8053e8d:	89 d8                	mov    %ebx,%eax
 8053e8f:	5b                   	pop    %ebx
 8053e90:	5f                   	pop    %edi
 8053e91:	c3                   	ret    
 8053e92:	66 90                	xchg   %ax,%ax
static struct quoting_options /* NOT PURE!! */
quoting_options_from_style (enum quoting_style style)
{
  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };
  if (style == custom_quoting_style)
    abort ();
 8053e94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053e98:	89 3c 24             	mov    %edi,(%esp)
 8053e9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053e9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053ea3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053ea7:	b9 83 b6 00 00       	mov    $0xb683,%ecx
 8053eac:	e8 b7 64 00 00       	call   805a368 <__afl_maybe_log>
 8053eb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053eb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053eb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ebd:	8b 3c 24             	mov    (%esp),%edi
 8053ec0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053ec4:	e8 17 56 ff ff       	call   80494e0 <abort@plt>
 8053ec9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08053ed0 <strcaseeq6>:
    return 0;
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
 8053ed0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053ed4:	89 3c 24             	mov    %edi,(%esp)
 8053ed7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053edb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053edf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053ee3:	b9 e8 f7 00 00       	mov    $0xf7e8,%ecx
 8053ee8:	e8 7b 64 00 00       	call   805a368 <__afl_maybe_log>
 8053eed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ef1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ef5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ef9:	8b 3c 24             	mov    (%esp),%edi
 8053efc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053f00:	55                   	push   %ebp
 8053f01:	57                   	push   %edi
 8053f02:	56                   	push   %esi
 8053f03:	53                   	push   %ebx
  if (CASEEQ (s1[6], s26))
 8053f04:	0f be d9             	movsbl %cl,%ebx
 8053f07:	83 eb 41             	sub    $0x41,%ebx
    return 0;
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
 8053f0a:	89 c6                	mov    %eax,%esi
 8053f0c:	83 ec 0c             	sub    $0xc,%esp
  if (CASEEQ (s1[6], s26))
 8053f0f:	83 fb 19             	cmp    $0x19,%ebx
    return 0;
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
 8053f12:	8b 7c 24 20          	mov    0x20(%esp),%edi
 8053f16:	8b 6c 24 24          	mov    0x24(%esp),%ebp
  if (CASEEQ (s1[6], s26))
 8053f1a:	0f 87 00 03 00 00    	ja     8054220 <strcaseeq6+0x350>
 8053f20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053f24:	89 3c 24             	mov    %edi,(%esp)
 8053f27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053f2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053f2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053f33:	b9 40 3c 00 00       	mov    $0x3c40,%ecx
 8053f38:	e8 2b 64 00 00       	call   805a368 <__afl_maybe_log>
 8053f3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053f41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053f45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053f49:	8b 3c 24             	mov    (%esp),%edi
 8053f4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053f50:	0f b6 40 06          	movzbl 0x6(%eax),%eax
 8053f54:	83 e0 df             	and    $0xffffffdf,%eax
 8053f57:	38 c8                	cmp    %cl,%al
 8053f59:	0f 94 c3             	sete   %bl
        return 1;
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
 8053f5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053f60:	89 3c 24             	mov    %edi,(%esp)
 8053f63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053f67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053f6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053f6f:	b9 21 7c 00 00       	mov    $0x7c21,%ecx
 8053f74:	e8 ef 63 00 00       	call   805a368 <__afl_maybe_log>
 8053f79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053f7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053f81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053f85:	8b 3c 24             	mov    (%esp),%edi
 8053f88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8053f8c:	31 c0                	xor    %eax,%eax
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
 8053f8e:	84 db                	test   %bl,%bl
 8053f90:	0f 84 7a 02 00 00    	je     8054210 <strcaseeq6+0x340>
 8053f96:	66 90                	xchg   %ax,%ax
 8053f98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053f9c:	89 3c 24             	mov    %edi,(%esp)
 8053f9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053fa3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053fa7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053fab:	b9 e2 c3 00 00       	mov    $0xc3e2,%ecx
 8053fb0:	e8 b3 63 00 00       	call   805a368 <__afl_maybe_log>
 8053fb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053fb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053fbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053fc1:	8b 3c 24             	mov    (%esp),%edi
 8053fc4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s26 == 0)
 8053fc8:	84 c9                	test   %cl,%cl
        return 1;
 8053fca:	b0 01                	mov    $0x1,%al
static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
    {
      if (s26 == 0)
 8053fcc:	0f 84 3e 02 00 00    	je     8054210 <strcaseeq6+0x340>
 8053fd2:	66 90                	xchg   %ax,%ax
 8053fd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8053fd8:	89 3c 24             	mov    %edi,(%esp)
 8053fdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8053fdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8053fe3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8053fe7:	b9 45 5f 00 00       	mov    $0x5f45,%ecx
 8053fec:	e8 77 63 00 00       	call   805a368 <__afl_maybe_log>
 8053ff1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8053ff5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8053ff9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8053ffd:	8b 3c 24             	mov    (%esp),%edi
 8054000:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
 8054004:	89 f9                	mov    %edi,%ecx
 8054006:	0f be d9             	movsbl %cl,%ebx
 8054009:	83 eb 41             	sub    $0x41,%ebx
 805400c:	83 fb 19             	cmp    $0x19,%ebx
 805400f:	0f 86 1b 02 00 00    	jbe    8054230 <strcaseeq6+0x360>
 8054015:	8d 76 00             	lea    0x0(%esi),%esi
 8054018:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805401c:	89 3c 24             	mov    %edi,(%esp)
 805401f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054023:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054027:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805402b:	b9 16 1d 00 00       	mov    $0x1d16,%ecx
 8054030:	e8 33 63 00 00       	call   805a368 <__afl_maybe_log>
 8054035:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054039:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805403d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054041:	8b 3c 24             	mov    (%esp),%edi
 8054044:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054048:	3a 4e 07             	cmp    0x7(%esi),%cl
 805404b:	0f 94 c1             	sete   %cl
 805404e:	66 90                	xchg   %ax,%ax
        return 1;
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
 8054050:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054054:	89 3c 24             	mov    %edi,(%esp)
 8054057:	89 54 24 04          	mov    %edx,0x4(%esp)
 805405b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805405f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054063:	b9 57 c2 00 00       	mov    $0xc257,%ecx
 8054068:	e8 fb 62 00 00       	call   805a368 <__afl_maybe_log>
 805406d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054071:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054075:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054079:	8b 3c 24             	mov    (%esp),%edi
 805407c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054080:	31 c0                	xor    %eax,%eax
}

static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
 8054082:	84 c9                	test   %cl,%cl
 8054084:	0f 84 86 01 00 00    	je     8054210 <strcaseeq6+0x340>
 805408a:	66 90                	xchg   %ax,%ax
 805408c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054090:	89 3c 24             	mov    %edi,(%esp)
 8054093:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054097:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805409b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805409f:	b9 7f 49 00 00       	mov    $0x497f,%ecx
 80540a4:	e8 bf 62 00 00       	call   805a368 <__afl_maybe_log>
 80540a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80540ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80540b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80540b5:	8b 3c 24             	mov    (%esp),%edi
 80540b8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s27 == 0)
 80540bc:	89 f9                	mov    %edi,%ecx
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
    {
      if (s26 == 0)
        return 1;
 80540be:	b0 01                	mov    $0x1,%al
static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
    {
      if (s27 == 0)
 80540c0:	84 c9                	test   %cl,%cl
 80540c2:	0f 84 48 01 00 00    	je     8054210 <strcaseeq6+0x340>
 80540c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80540cc:	89 3c 24             	mov    %edi,(%esp)
 80540cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80540d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80540d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80540db:	b9 aa d6 00 00       	mov    $0xd6aa,%ecx
 80540e0:	e8 83 62 00 00       	call   805a368 <__afl_maybe_log>
 80540e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80540e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80540ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80540f1:	8b 3c 24             	mov    (%esp),%edi
 80540f4:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
 80540f8:	89 e8                	mov    %ebp,%eax
 80540fa:	0f be f8             	movsbl %al,%edi
 80540fd:	83 ef 41             	sub    $0x41,%edi
 8054100:	83 ff 19             	cmp    $0x19,%edi
 8054103:	0f 87 3f 01 00 00    	ja     8054248 <strcaseeq6+0x378>
 8054109:	8d 76 00             	lea    0x0(%esi),%esi
 805410c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054110:	89 3c 24             	mov    %edi,(%esp)
 8054113:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054117:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805411b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805411f:	b9 4d ba 00 00       	mov    $0xba4d,%ecx
 8054124:	e8 3f 62 00 00       	call   805a368 <__afl_maybe_log>
 8054129:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805412d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054131:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054135:	8b 3c 24             	mov    (%esp),%edi
 8054138:	8d 64 24 10          	lea    0x10(%esp),%esp
 805413c:	0f b6 46 08          	movzbl 0x8(%esi),%eax
 8054140:	89 eb                	mov    %ebp,%ebx
 8054142:	83 e0 df             	and    $0xffffffdf,%eax
 8054145:	38 c3                	cmp    %al,%bl
 8054147:	0f 94 c1             	sete   %cl
 805414a:	66 90                	xchg   %ax,%ax
        return 1;
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
 805414c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054150:	89 3c 24             	mov    %edi,(%esp)
 8054153:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805415b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805415f:	b9 55 33 00 00       	mov    $0x3355,%ecx
 8054164:	e8 ff 61 00 00       	call   805a368 <__afl_maybe_log>
 8054169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805416d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054171:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054175:	8b 3c 24             	mov    (%esp),%edi
 8054178:	8d 64 24 10          	lea    0x10(%esp),%esp
 805417c:	31 c0                	xor    %eax,%eax
}

static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
 805417e:	84 c9                	test   %cl,%cl
 8054180:	0f 84 8a 00 00 00    	je     8054210 <strcaseeq6+0x340>
 8054186:	66 90                	xchg   %ax,%ax
 8054188:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805418c:	89 3c 24             	mov    %edi,(%esp)
 805418f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054193:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054197:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805419b:	b9 02 ef 00 00       	mov    $0xef02,%ecx
 80541a0:	e8 c3 61 00 00       	call   805a368 <__afl_maybe_log>
 80541a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80541a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80541ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80541b1:	8b 3c 24             	mov    (%esp),%edi
 80541b4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s28 == 0)
 80541b8:	89 e9                	mov    %ebp,%ecx
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
    {
      if (s26 == 0)
        return 1;
 80541ba:	b0 01                	mov    $0x1,%al
static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
    {
      if (s28 == 0)
 80541bc:	84 c9                	test   %cl,%cl
 80541be:	74 50                	je     8054210 <strcaseeq6+0x340>
 80541c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80541c4:	89 3c 24             	mov    %edi,(%esp)
 80541c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80541cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80541cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80541d3:	b9 b9 87 00 00       	mov    $0x87b9,%ecx
 80541d8:	e8 8b 61 00 00       	call   805a368 <__afl_maybe_log>
 80541dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80541e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80541e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80541e9:	8b 3c 24             	mov    (%esp),%edi
 80541ec:	8d 64 24 10          	lea    0x10(%esp),%esp
# endif

static inline int
strcaseeq9 (const char *s1, const char *s2)
{
  return c_strcasecmp (s1 + 9, s2 + 9) == 0;
 80541f0:	83 ec 08             	sub    $0x8,%esp
 80541f3:	83 c2 09             	add    $0x9,%edx
 80541f6:	83 c6 09             	add    $0x9,%esi
 80541f9:	52                   	push   %edx
 80541fa:	56                   	push   %esi
 80541fb:	e8 e0 cc 00 00       	call   8060ee0 <c_strcasecmp>
 8054200:	83 c4 10             	add    $0x10,%esp
 8054203:	85 c0                	test   %eax,%eax
 8054205:	0f 94 c2             	sete   %dl
 8054208:	0f b6 c2             	movzbl %dl,%eax
 805420b:	90                   	nop
 805420c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      else
        return strcaseeq7 (s1, s2, s27, s28);
    }
  else
    return 0;
}
 8054210:	83 c4 0c             	add    $0xc,%esp
 8054213:	5b                   	pop    %ebx
 8054214:	5e                   	pop    %esi
 8054215:	5f                   	pop    %edi
 8054216:	5d                   	pop    %ebp
 8054217:	c3                   	ret    
 8054218:	90                   	nop
 8054219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
}

static inline int
strcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)
{
  if (CASEEQ (s1[6], s26))
 8054220:	38 48 06             	cmp    %cl,0x6(%eax)
 8054223:	0f 94 c3             	sete   %bl
 8054226:	e9 31 fd ff ff       	jmp    8053f5c <strcaseeq6+0x8c>
 805422b:	90                   	nop
 805422c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
}

static inline int
strcaseeq7 (const char *s1, const char *s2, char s27, char s28)
{
  if (CASEEQ (s1[7], s27))
 8054230:	0f b6 46 07          	movzbl 0x7(%esi),%eax
 8054234:	83 e0 df             	and    $0xffffffdf,%eax
 8054237:	38 c1                	cmp    %al,%cl
 8054239:	0f 94 c1             	sete   %cl
 805423c:	e9 0d fe ff ff       	jmp    805404e <strcaseeq6+0x17e>
 8054241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
}

static inline int
strcaseeq8 (const char *s1, const char *s2, char s28)
{
  if (CASEEQ (s1[8], s28))
 8054248:	3a 46 08             	cmp    0x8(%esi),%al
 805424b:	0f 94 c1             	sete   %cl
 805424e:	e9 f7 fe ff ff       	jmp    805414a <strcaseeq6+0x27a>
 8054253:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8054259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08054260 <gettext_quote>:
   has one; otherwise, return either it or "\"", depending on S.

   S is either clocale_quoting_style or locale_quoting_style.  */
static char const *
gettext_quote (char const *msgid, enum quoting_style s)
{
 8054260:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054264:	89 3c 24             	mov    %edi,(%esp)
 8054267:	89 54 24 04          	mov    %edx,0x4(%esp)
 805426b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805426f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054273:	b9 c1 8f 00 00       	mov    $0x8fc1,%ecx
 8054278:	e8 eb 60 00 00       	call   805a368 <__afl_maybe_log>
 805427d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054281:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054285:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054289:	8b 3c 24             	mov    (%esp),%edi
 805428c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054290:	57                   	push   %edi
 8054291:	56                   	push   %esi
 8054292:	89 d7                	mov    %edx,%edi
 8054294:	53                   	push   %ebx
 8054295:	89 c6                	mov    %eax,%esi
  char const *translation = _(msgid);
 8054297:	83 ec 04             	sub    $0x4,%esp
 805429a:	6a 05                	push   $0x5
 805429c:	50                   	push   %eax
 805429d:	6a 00                	push   $0x0
 805429f:	e8 3c 4f ff ff       	call   80491e0 <dcgettext@plt>
 80542a4:	89 c3                	mov    %eax,%ebx
  char const *locale_code;

  if (translation != msgid)
 80542a6:	83 c4 10             	add    $0x10,%esp
 80542a9:	39 f3                	cmp    %esi,%ebx
 80542ab:	74 6b                	je     8054318 <gettext_quote+0xb8>
 80542ad:	8d 76 00             	lea    0x0(%esi),%esi
 80542b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80542b4:	89 3c 24             	mov    %edi,(%esp)
 80542b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80542bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80542bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80542c3:	b9 39 e9 00 00       	mov    $0xe939,%ecx
 80542c8:	e8 9b 60 00 00       	call   805a368 <__afl_maybe_log>
 80542cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80542d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80542d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80542d9:	8b 3c 24             	mov    (%esp),%edi
 80542dc:	8d 64 24 10          	lea    0x10(%esp),%esp
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";

  return (s == clocale_quoting_style ? "\"" : "'");
}
 80542e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80542e4:	89 3c 24             	mov    %edi,(%esp)
 80542e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80542eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80542ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80542f3:	b9 eb 80 00 00       	mov    $0x80eb,%ecx
 80542f8:	e8 6b 60 00 00       	call   805a368 <__afl_maybe_log>
 80542fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054301:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054305:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054309:	8b 3c 24             	mov    (%esp),%edi
 805430c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054310:	5b                   	pop    %ebx
 8054311:	5e                   	pop    %esi
 8054312:	5f                   	pop    %edi
 8054313:	c3                   	ret    
 8054314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        BIG5-HKSCS   0xA1 0xA5            EUC-CN       0xA1 0xAE
        GBK          0xA1 0xAE            Georgian-PS  0x91
        PT154        0x91

     None of these is still in wide use; using iconv is overkill.  */
  locale_code = locale_charset ();
 8054318:	e8 53 db 00 00       	call   8061e70 <locale_charset>
}

static inline int
strcaseeq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[0], s20))
 805431d:	0f b6 10             	movzbl (%eax),%edx
 8054320:	83 e2 df             	and    $0xffffffdf,%edx
 8054323:	80 fa 55             	cmp    $0x55,%dl
 8054326:	0f 85 94 01 00 00    	jne    80544c0 <gettext_quote+0x260>
 805432c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054330:	89 3c 24             	mov    %edi,(%esp)
 8054333:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054337:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805433b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805433f:	b9 09 67 00 00       	mov    $0x6709,%ecx
 8054344:	e8 1f 60 00 00       	call   805a368 <__afl_maybe_log>
 8054349:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805434d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054351:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054355:	8b 3c 24             	mov    (%esp),%edi
 8054358:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq1 (const char *s1, const char *s2, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[1], s21))
 805435c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
 8054360:	83 e2 df             	and    $0xffffffdf,%edx
 8054363:	80 fa 54             	cmp    $0x54,%dl
 8054366:	0f 85 3c 01 00 00    	jne    80544a8 <gettext_quote+0x248>
 805436c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054370:	89 3c 24             	mov    %edi,(%esp)
 8054373:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054377:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805437b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805437f:	b9 27 84 00 00       	mov    $0x8427,%ecx
 8054384:	e8 df 5f 00 00       	call   805a368 <__afl_maybe_log>
 8054389:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805438d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054391:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054395:	8b 3c 24             	mov    (%esp),%edi
 8054398:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq2 (const char *s1, const char *s2, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[2], s22))
 805439c:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
 80543a0:	83 e1 df             	and    $0xffffffdf,%ecx
 80543a3:	80 f9 46             	cmp    $0x46,%cl
 80543a6:	0f 85 fc 00 00 00    	jne    80544a8 <gettext_quote+0x248>
 80543ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80543b0:	89 3c 24             	mov    %edi,(%esp)
 80543b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80543b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80543bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80543bf:	b9 ae 56 00 00       	mov    $0x56ae,%ecx
 80543c4:	e8 9f 5f 00 00       	call   805a368 <__afl_maybe_log>
 80543c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80543cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80543d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80543d5:	8b 3c 24             	mov    (%esp),%edi
 80543d8:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq3 (const char *s1, const char *s2, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[3], s23))
 80543dc:	80 78 03 2d          	cmpb   $0x2d,0x3(%eax)
 80543e0:	0f 85 c2 00 00 00    	jne    80544a8 <gettext_quote+0x248>
 80543e6:	66 90                	xchg   %ax,%ax
 80543e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80543ec:	89 3c 24             	mov    %edi,(%esp)
 80543ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80543f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80543f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80543fb:	b9 ef 0c 00 00       	mov    $0xcef,%ecx
 8054400:	e8 63 5f 00 00       	call   805a368 <__afl_maybe_log>
 8054405:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054409:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805440d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054411:	8b 3c 24             	mov    (%esp),%edi
 8054414:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq4 (const char *s1, const char *s2, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[4], s24))
 8054418:	80 78 04 38          	cmpb   $0x38,0x4(%eax)
 805441c:	0f 85 86 00 00 00    	jne    80544a8 <gettext_quote+0x248>
 8054422:	66 90                	xchg   %ax,%ax
 8054424:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054428:	89 3c 24             	mov    %edi,(%esp)
 805442b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805442f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054433:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054437:	b9 08 51 00 00       	mov    $0x5108,%ecx
 805443c:	e8 27 5f 00 00       	call   805a368 <__afl_maybe_log>
 8054441:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054445:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054449:	8b 54 24 04          	mov    0x4(%esp),%edx
 805444d:	8b 3c 24             	mov    (%esp),%edi
 8054450:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq5 (const char *s1, const char *s2, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[5], s25))
 8054454:	80 78 05 00          	cmpb   $0x0,0x5(%eax)
 8054458:	75 4e                	jne    80544a8 <gettext_quote+0x248>
 805445a:	66 90                	xchg   %ax,%ax
 805445c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054460:	89 3c 24             	mov    %edi,(%esp)
 8054463:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054467:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805446b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805446f:	b9 13 16 00 00       	mov    $0x1613,%ecx
 8054474:	e8 ef 5e 00 00       	call   805a368 <__afl_maybe_log>
 8054479:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805447d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054481:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054485:	8b 3c 24             	mov    (%esp),%edi
 8054488:	8d 64 24 10          	lea    0x10(%esp),%esp
  if (STRCASEEQ (locale_code, "UTF-8", 'U','T','F','-','8',0,0,0,0))
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
 805448c:	80 3b 60             	cmpb   $0x60,(%ebx)
 805448f:	bf 4f 38 06 08       	mov    $0x806384f,%edi
 8054494:	b8 5b 38 06 08       	mov    $0x806385b,%eax
 8054499:	0f 45 c7             	cmovne %edi,%eax
 805449c:	e9 3f fe ff ff       	jmp    80542e0 <gettext_quote+0x80>
 80544a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";

  return (s == clocale_quoting_style ? "\"" : "'");
 80544a8:	83 ff 07             	cmp    $0x7,%edi
 80544ab:	bb 53 38 06 08       	mov    $0x8063853,%ebx
 80544b0:	b8 55 38 06 08       	mov    $0x8063855,%eax
 80544b5:	0f 45 c3             	cmovne %ebx,%eax
 80544b8:	e9 23 fe ff ff       	jmp    80542e0 <gettext_quote+0x80>
 80544bd:	8d 76 00             	lea    0x0(%esi),%esi
}

static inline int
strcaseeq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[0], s20))
 80544c0:	80 fa 47             	cmp    $0x47,%dl
 80544c3:	75 e3                	jne    80544a8 <gettext_quote+0x248>
 80544c5:	8d 76 00             	lea    0x0(%esi),%esi
 80544c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80544cc:	89 3c 24             	mov    %edi,(%esp)
 80544cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80544d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80544d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80544db:	b9 18 73 00 00       	mov    $0x7318,%ecx
 80544e0:	e8 83 5e 00 00       	call   805a368 <__afl_maybe_log>
 80544e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80544e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80544ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80544f1:	8b 3c 24             	mov    (%esp),%edi
 80544f4:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq1 (const char *s1, const char *s2, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[1], s21))
 80544f8:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
 80544fc:	83 e1 df             	and    $0xffffffdf,%ecx
 80544ff:	80 f9 42             	cmp    $0x42,%cl
 8054502:	75 a4                	jne    80544a8 <gettext_quote+0x248>
 8054504:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054508:	89 3c 24             	mov    %edi,(%esp)
 805450b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805450f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054513:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054517:	b9 82 39 00 00       	mov    $0x3982,%ecx
 805451c:	e8 47 5e 00 00       	call   805a368 <__afl_maybe_log>
 8054521:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054525:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054529:	8b 54 24 04          	mov    0x4(%esp),%edx
 805452d:	8b 3c 24             	mov    (%esp),%edi
 8054530:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq2 (const char *s1, const char *s2, char s22, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[2], s22))
 8054534:	80 78 02 31          	cmpb   $0x31,0x2(%eax)
 8054538:	0f 85 6a ff ff ff    	jne    80544a8 <gettext_quote+0x248>
 805453e:	66 90                	xchg   %ax,%ax
 8054540:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054544:	89 3c 24             	mov    %edi,(%esp)
 8054547:	89 54 24 04          	mov    %edx,0x4(%esp)
 805454b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805454f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054553:	b9 54 32 00 00       	mov    $0x3254,%ecx
 8054558:	e8 0b 5e 00 00       	call   805a368 <__afl_maybe_log>
 805455d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054561:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054565:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054569:	8b 3c 24             	mov    (%esp),%edi
 805456c:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq3 (const char *s1, const char *s2, char s23, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[3], s23))
 8054570:	80 78 03 38          	cmpb   $0x38,0x3(%eax)
 8054574:	0f 85 2e ff ff ff    	jne    80544a8 <gettext_quote+0x248>
 805457a:	66 90                	xchg   %ax,%ax
 805457c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054580:	89 3c 24             	mov    %edi,(%esp)
 8054583:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054587:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805458b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805458f:	b9 2e 44 00 00       	mov    $0x442e,%ecx
 8054594:	e8 cf 5d 00 00       	call   805a368 <__afl_maybe_log>
 8054599:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805459d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80545a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80545a5:	8b 3c 24             	mov    (%esp),%edi
 80545a8:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq4 (const char *s1, const char *s2, char s24, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[4], s24))
 80545ac:	80 78 04 30          	cmpb   $0x30,0x4(%eax)
 80545b0:	0f 85 f2 fe ff ff    	jne    80544a8 <gettext_quote+0x248>
 80545b6:	66 90                	xchg   %ax,%ax
 80545b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80545bc:	89 3c 24             	mov    %edi,(%esp)
 80545bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80545c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80545c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80545cb:	b9 63 4f 00 00       	mov    $0x4f63,%ecx
 80545d0:	e8 93 5d 00 00       	call   805a368 <__afl_maybe_log>
 80545d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80545d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80545dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80545e1:	8b 3c 24             	mov    (%esp),%edi
 80545e4:	8d 64 24 10          	lea    0x10(%esp),%esp
}

static inline int
strcaseeq5 (const char *s1, const char *s2, char s25, char s26, char s27, char s28)
{
  if (CASEEQ (s1[5], s25))
 80545e8:	80 78 05 33          	cmpb   $0x33,0x5(%eax)
 80545ec:	0f 85 b6 fe ff ff    	jne    80544a8 <gettext_quote+0x248>
 80545f2:	66 90                	xchg   %ax,%ax
 80545f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80545f8:	89 3c 24             	mov    %edi,(%esp)
 80545fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80545ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054603:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054607:	b9 ef 37 00 00       	mov    $0x37ef,%ecx
 805460c:	e8 57 5d 00 00       	call   805a368 <__afl_maybe_log>
 8054611:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054615:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054619:	8b 54 24 04          	mov    0x4(%esp),%edx
 805461d:	8b 3c 24             	mov    (%esp),%edi
 8054620:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      if (s25 == 0)
        return 1;
      else
        return strcaseeq6 (s1, s2, s26, s27, s28);
 8054624:	52                   	push   %edx
 8054625:	52                   	push   %edx
 8054626:	b9 30 00 00 00       	mov    $0x30,%ecx
 805462b:	6a 00                	push   $0x0
 805462d:	6a 00                	push   $0x0
 805462f:	ba 5f 38 06 08       	mov    $0x806385f,%edx
 8054634:	e8 97 f8 ff ff       	call   8053ed0 <strcaseeq6>
 8054639:	83 c4 10             	add    $0x10,%esp

     None of these is still in wide use; using iconv is overkill.  */
  locale_code = locale_charset ();
  if (STRCASEEQ (locale_code, "UTF-8", 'U','T','F','-','8',0,0,0,0))
    return msgid[0] == '`' ? "\xe2\x80\x98": "\xe2\x80\x99";
  if (STRCASEEQ (locale_code, "GB18030", 'G','B','1','8','0','3','0',0,0))
 805463c:	85 c0                	test   %eax,%eax
 805463e:	0f 84 64 fe ff ff    	je     80544a8 <gettext_quote+0x248>
 8054644:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054648:	89 3c 24             	mov    %edi,(%esp)
 805464b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805464f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054653:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054657:	b9 b7 1e 00 00       	mov    $0x1eb7,%ecx
 805465c:	e8 07 5d 00 00       	call   805a368 <__afl_maybe_log>
 8054661:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054665:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054669:	8b 54 24 04          	mov    0x4(%esp),%edx
 805466d:	8b 3c 24             	mov    (%esp),%edi
 8054670:	8d 64 24 10          	lea    0x10(%esp),%esp
    return msgid[0] == '`' ? "\xa1\ae": "\xa1\xaf";
 8054674:	80 3b 60             	cmpb   $0x60,(%ebx)
 8054677:	be 4c 38 06 08       	mov    $0x806384c,%esi
 805467c:	b8 57 38 06 08       	mov    $0x8063857,%eax
 8054681:	0f 45 c6             	cmovne %esi,%eax
 8054684:	e9 57 fc ff ff       	jmp    80542e0 <gettext_quote+0x80>
 8054689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08054690 <quotearg_buffer_restyled>:
                          char const *arg, size_t argsize,
                          enum quoting_style quoting_style, int flags,
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
 8054690:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054694:	89 3c 24             	mov    %edi,(%esp)
 8054697:	89 54 24 04          	mov    %edx,0x4(%esp)
 805469b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805469f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80546a3:	b9 d7 d8 00 00       	mov    $0xd8d7,%ecx
 80546a8:	e8 bb 5c 00 00       	call   805a368 <__afl_maybe_log>
 80546ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80546b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80546b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80546b9:	8b 3c 24             	mov    (%esp),%edi
 80546bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80546c0:	55                   	push   %ebp
 80546c1:	57                   	push   %edi
 80546c2:	56                   	push   %esi
 80546c3:	53                   	push   %ebx
 80546c4:	83 ec 5c             	sub    $0x5c,%esp
 80546c7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 80546cb:	89 54 24 10          	mov    %edx,0x10(%esp)
 80546cf:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 80546d3:	8b 7c 24 70          	mov    0x70(%esp),%edi
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
  bool unibyte_locale = MB_CUR_MAX == 1;
 80546d7:	e8 54 4b ff ff       	call   8049230 <__ctype_get_mb_cur_max@plt>
 80546dc:	89 44 24 34          	mov    %eax,0x34(%esp)
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
 80546e0:	8b 44 24 78          	mov    0x78(%esp),%eax
 80546e4:	d1 e8                	shr    %eax
 80546e6:	83 e0 01             	and    $0x1,%eax
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 80546e9:	83 7c 24 74 08       	cmpl   $0x8,0x74(%esp)
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
  bool unibyte_locale = MB_CUR_MAX == 1;
  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;
 80546ee:	88 44 24 39          	mov    %al,0x39(%esp)
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 80546f2:	0f 87 d8 39 00 00    	ja     80580d0 <quotearg_buffer_restyled+0x3a40>
 80546f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80546fc:	89 3c 24             	mov    %edi,(%esp)
 80546ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054703:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054707:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805470b:	b9 d7 5b 00 00       	mov    $0x5bd7,%ecx
 8054710:	e8 53 5c 00 00       	call   805a368 <__afl_maybe_log>
 8054715:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054719:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805471d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054721:	8b 3c 24             	mov    (%esp),%edi
 8054724:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054728:	8b 54 24 74          	mov    0x74(%esp),%edx
 805472c:	ff 24 95 a0 38 06 08 	jmp    *0x80638a0(,%edx,4)
 8054733:	90                   	nop
 8054734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      quote_string_len = 1;
      break;

    case escape_quoting_style:
      backslash_escapes = true;
      elide_outer_quotes = false;
 8054738:	c6 44 24 39 00       	movb   $0x0,0x39(%esp)
      quote_string = "\"";
      quote_string_len = 1;
      break;

    case escape_quoting_style:
      backslash_escapes = true;
 805473d:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 8054742:	31 ed                	xor    %ebp,%ebp
  char const *quote_string = 0;
  size_t quote_string_len = 0;
 8054744:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 805474b:	00 
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
 805474c:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
 8054753:	00 
 8054754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 8054758:	0f b6 5c 24 39       	movzbl 0x39(%esp),%ebx

    default:
      abort ();
    }

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
 805475d:	31 f6                	xor    %esi,%esi
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 805475f:	83 f3 01             	xor    $0x1,%ebx
 8054762:	88 5c 24 3a          	mov    %bl,0x3a(%esp)
 8054766:	66 90                	xchg   %ax,%ax

    default:
      abort ();
    }

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
 8054768:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805476c:	89 3c 24             	mov    %edi,(%esp)
 805476f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054773:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054777:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805477b:	b9 08 7a 00 00       	mov    $0x7a08,%ecx
 8054780:	e8 e3 5b 00 00       	call   805a368 <__afl_maybe_log>
 8054785:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054789:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805478d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054791:	8b 3c 24             	mov    (%esp),%edi
 8054794:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054798:	39 fe                	cmp    %edi,%esi
 805479a:	0f 95 c1             	setne  %cl
 805479d:	83 ff ff             	cmp    $0xffffffff,%edi
 80547a0:	0f 84 2e 0a 00 00    	je     80551d4 <quotearg_buffer_restyled+0xb44>
 80547a6:	66 90                	xchg   %ax,%ax
 80547a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80547ac:	89 3c 24             	mov    %edi,(%esp)
 80547af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80547b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80547b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80547bb:	b9 87 b3 00 00       	mov    $0xb387,%ecx
 80547c0:	e8 a3 5b 00 00       	call   805a368 <__afl_maybe_log>
 80547c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80547c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80547cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80547d1:	8b 3c 24             	mov    (%esp),%edi
 80547d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80547d8:	90                   	nop
 80547d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80547e0:	84 c9                	test   %cl,%cl
 80547e2:	0f 84 60 0a 00 00    	je     8055248 <quotearg_buffer_restyled+0xbb8>
 80547e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80547ec:	89 3c 24             	mov    %edi,(%esp)
 80547ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80547f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80547f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80547fb:	b9 8c cc 00 00       	mov    $0xcc8c,%ecx
 8054800:	e8 63 5b 00 00       	call   805a368 <__afl_maybe_log>
 8054805:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054809:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805480d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054811:	8b 3c 24             	mov    (%esp),%edi
 8054814:	8d 64 24 10          	lea    0x10(%esp),%esp
      unsigned char c;
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
 8054818:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805481c:	89 3c 24             	mov    %edi,(%esp)
 805481f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054823:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054827:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805482b:	b9 ae a5 00 00       	mov    $0xa5ae,%ecx
 8054830:	e8 33 5b 00 00       	call   805a368 <__afl_maybe_log>
 8054835:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054839:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805483d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054841:	8b 3c 24             	mov    (%esp),%edi
 8054844:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054848:	8b 44 24 18          	mov    0x18(%esp),%eax
 805484c:	85 c0                	test   %eax,%eax
    {
      unsigned char c;
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
 805484e:	0f 95 44 24 20       	setne  0x20(%esp)
 8054853:	0f 84 27 2a 00 00    	je     8057280 <quotearg_buffer_restyled+0x2bf0>
 8054859:	8d 76 00             	lea    0x0(%esi),%esi
 805485c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054860:	89 3c 24             	mov    %edi,(%esp)
 8054863:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054867:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805486b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805486f:	b9 ff 93 00 00       	mov    $0x93ff,%ecx
 8054874:	e8 ef 5a 00 00       	call   805a368 <__afl_maybe_log>
 8054879:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805487d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054881:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054885:	8b 3c 24             	mov    (%esp),%edi
 8054888:	8d 64 24 10          	lea    0x10(%esp),%esp
 805488c:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 8054891:	0f 84 e9 29 00 00    	je     8057280 <quotearg_buffer_restyled+0x2bf0>
 8054897:	90                   	nop
 8054898:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805489c:	89 3c 24             	mov    %edi,(%esp)
 805489f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80548a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80548a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80548ab:	b9 00 b3 00 00       	mov    $0xb300,%ecx
 80548b0:	e8 b3 5a 00 00       	call   805a368 <__afl_maybe_log>
 80548b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80548b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80548bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80548c1:	8b 3c 24             	mov    (%esp),%edi
 80548c4:	8d 64 24 10          	lea    0x10(%esp),%esp
          && quote_string_len
          && (i + quote_string_len
 80548c8:	8b 4c 24 18          	mov    0x18(%esp),%ecx
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
 80548cc:	83 ff ff             	cmp    $0xffffffff,%edi
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
          && (i + quote_string_len
 80548cf:	8d 1c 0e             	lea    (%esi,%ecx,1),%ebx
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
 80548d2:	75 79                	jne    805494d <quotearg_buffer_restyled+0x2bd>
 80548d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80548d8:	89 3c 24             	mov    %edi,(%esp)
 80548db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80548df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80548e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80548e7:	b9 f7 67 00 00       	mov    $0x67f7,%ecx
 80548ec:	e8 77 5a 00 00       	call   805a368 <__afl_maybe_log>
 80548f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80548f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80548f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80548fd:	8b 3c 24             	mov    (%esp),%edi
 8054900:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054904:	83 f9 01             	cmp    $0x1,%ecx
 8054907:	76 44                	jbe    805494d <quotearg_buffer_restyled+0x2bd>
 8054909:	8d 76 00             	lea    0x0(%esi),%esi
 805490c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054910:	89 3c 24             	mov    %edi,(%esp)
 8054913:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805491b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805491f:	b9 32 69 00 00       	mov    $0x6932,%ecx
 8054924:	e8 3f 5a 00 00       	call   805a368 <__afl_maybe_log>
 8054929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805492d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054931:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054935:	8b 3c 24             	mov    (%esp),%edi
 8054938:	8d 64 24 10          	lea    0x10(%esp),%esp
 805493c:	83 ec 0c             	sub    $0xc,%esp
 805493f:	ff 74 24 20          	pushl  0x20(%esp)
 8054943:	e8 18 4a ff ff       	call   8049360 <strlen@plt>
 8054948:	83 c4 10             	add    $0x10,%esp
 805494b:	89 c7                	mov    %eax,%edi
 805494d:	8d 76 00             	lea    0x0(%esi),%esi
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
 8054950:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054954:	89 3c 24             	mov    %edi,(%esp)
 8054957:	89 54 24 04          	mov    %edx,0x4(%esp)
 805495b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805495f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054963:	b9 bd ad 00 00       	mov    $0xadbd,%ecx
 8054968:	e8 fb 59 00 00       	call   805a368 <__afl_maybe_log>
 805496d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054971:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054975:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054979:	8b 3c 24             	mov    (%esp),%edi
 805497c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054980:	8b 54 24 14          	mov    0x14(%esp),%edx
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
          && (i + quote_string_len
 8054984:	39 df                	cmp    %ebx,%edi
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
 8054986:	8d 1c 32             	lea    (%edx,%esi,1),%ebx
      unsigned char esc;
      bool is_right_quote = false;

      if (backslash_escapes
          && quote_string_len
          && (i + quote_string_len
 8054989:	0f 82 09 29 00 00    	jb     8057298 <quotearg_buffer_restyled+0x2c08>
 805498f:	90                   	nop
 8054990:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054994:	89 3c 24             	mov    %edi,(%esp)
 8054997:	89 54 24 04          	mov    %edx,0x4(%esp)
 805499b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805499f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80549a3:	b9 7a 42 00 00       	mov    $0x427a,%ecx
 80549a8:	e8 bb 59 00 00       	call   805a368 <__afl_maybe_log>
 80549ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80549b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80549b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80549b9:	8b 3c 24             	mov    (%esp),%edi
 80549bc:	8d 64 24 10          	lea    0x10(%esp),%esp
              <= (argsize == SIZE_MAX && 1 < quote_string_len
                  /* Use strlen only if we must: when argsize is SIZE_MAX,
                     and when the quote string is more than 1 byte long.
                     If we do call strlen, save the result.  */
                  ? (argsize = strlen (arg)) : argsize))
          && memcmp (arg + i, quote_string, quote_string_len) == 0)
 80549c0:	83 ec 04             	sub    $0x4,%esp
 80549c3:	ff 74 24 1c          	pushl  0x1c(%esp)
 80549c7:	ff 74 24 30          	pushl  0x30(%esp)
 80549cb:	53                   	push   %ebx
 80549cc:	e8 ef 47 ff ff       	call   80491c0 <memcmp@plt>
 80549d1:	83 c4 10             	add    $0x10,%esp
 80549d4:	85 c0                	test   %eax,%eax
 80549d6:	0f 85 bc 28 00 00    	jne    8057298 <quotearg_buffer_restyled+0x2c08>
 80549dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80549e0:	89 3c 24             	mov    %edi,(%esp)
 80549e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80549e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80549eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80549ef:	b9 df e2 00 00       	mov    $0xe2df,%ecx
 80549f4:	e8 6f 59 00 00       	call   805a368 <__afl_maybe_log>
 80549f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80549fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054a01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054a05:	8b 3c 24             	mov    (%esp),%edi
 8054a08:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          if (elide_outer_quotes)
 8054a0c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8054a11:	0f 85 a9 0c 00 00    	jne    80556c0 <quotearg_buffer_restyled+0x1030>
 8054a17:	90                   	nop
 8054a18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054a1c:	89 3c 24             	mov    %edi,(%esp)
 8054a1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054a23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054a27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054a2b:	b9 2e 91 00 00       	mov    $0x912e,%ecx
 8054a30:	e8 33 59 00 00       	call   805a368 <__afl_maybe_log>
 8054a35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054a39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054a3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054a41:	8b 3c 24             	mov    (%esp),%edi
 8054a44:	8d 64 24 10          	lea    0x10(%esp),%esp
            goto force_outer_quoting_style;
          is_right_quote = true;
 8054a48:	c6 44 24 38 01       	movb   $0x1,0x38(%esp)
 8054a4d:	8d 76 00             	lea    0x0(%esi),%esi
        }

      c = arg[i];
 8054a50:	0f b6 13             	movzbl (%ebx),%edx
      switch (c)
 8054a53:	80 fa 7e             	cmp    $0x7e,%dl
 8054a56:	0f 87 64 13 00 00    	ja     8055dc0 <quotearg_buffer_restyled+0x1730>
 8054a5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054a60:	89 3c 24             	mov    %edi,(%esp)
 8054a63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054a67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054a6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054a6f:	b9 28 a6 00 00       	mov    $0xa628,%ecx
 8054a74:	e8 ef 58 00 00       	call   805a368 <__afl_maybe_log>
 8054a79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054a7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054a81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054a85:	8b 3c 24             	mov    (%esp),%edi
 8054a88:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054a8c:	0f b6 ca             	movzbl %dl,%ecx
 8054a8f:	ff 24 8d c4 38 06 08 	jmp    *0x80638c4(,%ecx,4)
 8054a96:	8d 76 00             	lea    0x0(%esi),%esi
 8054a99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
          else if (flags & QA_ELIDE_NULL_BYTES)
            continue;
          break;

        case '?':
          switch (quoting_style)
 8054aa0:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 8054aa5:	0f 84 a1 0b 00 00    	je     805564c <quotearg_buffer_restyled+0xfbc>
 8054aab:	90                   	nop
 8054aac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ab0:	89 3c 24             	mov    %edi,(%esp)
 8054ab3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054ab7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054abb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054abf:	b9 2a 22 00 00       	mov    $0x222a,%ecx
 8054ac4:	e8 9f 58 00 00       	call   805a368 <__afl_maybe_log>
 8054ac9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054acd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054ad1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054ad5:	8b 3c 24             	mov    (%esp),%edi
 8054ad8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054adc:	83 7c 24 74 03       	cmpl   $0x3,0x74(%esp)
 8054ae1:	0f 85 99 03 00 00    	jne    8054e80 <quotearg_buffer_restyled+0x7f0>
 8054ae7:	90                   	nop
 8054ae8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054aec:	89 3c 24             	mov    %edi,(%esp)
 8054aef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054af3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054af7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054afb:	b9 29 c3 00 00       	mov    $0xc329,%ecx
 8054b00:	e8 63 58 00 00       	call   805a368 <__afl_maybe_log>
 8054b05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054b09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054b0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054b11:	8b 3c 24             	mov    (%esp),%edi
 8054b14:	8d 64 24 10          	lea    0x10(%esp),%esp
              if (elide_outer_quotes)
                goto force_outer_quoting_style;
              break;

            case c_quoting_style:
              if ((flags & QA_SPLIT_TRIGRAPHS)
 8054b18:	f6 44 24 78 04       	testb  $0x4,0x78(%esp)
 8054b1d:	0f 84 5d 03 00 00    	je     8054e80 <quotearg_buffer_restyled+0x7f0>
 8054b23:	90                   	nop
 8054b24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054b28:	89 3c 24             	mov    %edi,(%esp)
 8054b2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054b2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054b33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054b37:	b9 cd 6d 00 00       	mov    $0x6dcd,%ecx
 8054b3c:	e8 27 58 00 00       	call   805a368 <__afl_maybe_log>
 8054b41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054b45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054b49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054b4d:	8b 3c 24             	mov    (%esp),%edi
 8054b50:	8d 64 24 10          	lea    0x10(%esp),%esp
                  && i + 2 < argsize && arg[i + 1] == '?')
 8054b54:	8d 5e 02             	lea    0x2(%esi),%ebx
 8054b57:	39 df                	cmp    %ebx,%edi
 8054b59:	0f 86 21 03 00 00    	jbe    8054e80 <quotearg_buffer_restyled+0x7f0>
 8054b5f:	90                   	nop
 8054b60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054b64:	89 3c 24             	mov    %edi,(%esp)
 8054b67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054b6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054b6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054b73:	b9 bb b3 00 00       	mov    $0xb3bb,%ecx
 8054b78:	e8 eb 57 00 00       	call   805a368 <__afl_maybe_log>
 8054b7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054b81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054b85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054b89:	8b 3c 24             	mov    (%esp),%edi
 8054b8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054b90:	8b 44 24 14          	mov    0x14(%esp),%eax
 8054b94:	80 7c 30 01 3f       	cmpb   $0x3f,0x1(%eax,%esi,1)
 8054b99:	0f 85 e1 02 00 00    	jne    8054e80 <quotearg_buffer_restyled+0x7f0>
 8054b9f:	90                   	nop
 8054ba0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ba4:	89 3c 24             	mov    %edi,(%esp)
 8054ba7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054bab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054baf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054bb3:	b9 bc 4a 00 00       	mov    $0x4abc,%ecx
 8054bb8:	e8 ab 57 00 00       	call   805a368 <__afl_maybe_log>
 8054bbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054bc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054bc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054bc9:	8b 3c 24             	mov    (%esp),%edi
 8054bcc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054bd0:	0f b6 0c 18          	movzbl (%eax,%ebx,1),%ecx
 8054bd4:	88 4c 24 20          	mov    %cl,0x20(%esp)
 8054bd8:	8d 49 df             	lea    -0x21(%ecx),%ecx
 8054bdb:	80 f9 1d             	cmp    $0x1d,%cl
 8054bde:	0f 87 9c 02 00 00    	ja     8054e80 <quotearg_buffer_restyled+0x7f0>
 8054be4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054be8:	89 3c 24             	mov    %edi,(%esp)
 8054beb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054bef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054bf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054bf7:	b9 f9 1c 00 00       	mov    $0x1cf9,%ecx
 8054bfc:	e8 67 57 00 00       	call   805a368 <__afl_maybe_log>
 8054c01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054c05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054c09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054c0d:	8b 3c 24             	mov    (%esp),%edi
 8054c10:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054c14:	b8 01 00 00 00       	mov    $0x1,%eax
 8054c19:	d3 e0                	shl    %cl,%eax
 8054c1b:	a9 c1 51 00 38       	test   $0x380051c1,%eax
 8054c20:	0f 84 5a 02 00 00    	je     8054e80 <quotearg_buffer_restyled+0x7f0>
 8054c26:	66 90                	xchg   %ax,%ax
 8054c28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054c2c:	89 3c 24             	mov    %edi,(%esp)
 8054c2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054c33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054c37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054c3b:	b9 91 c6 00 00       	mov    $0xc691,%ecx
 8054c40:	e8 23 57 00 00       	call   805a368 <__afl_maybe_log>
 8054c45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054c49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054c4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054c51:	8b 3c 24             	mov    (%esp),%edi
 8054c54:	8d 64 24 10          	lea    0x10(%esp),%esp
                  case '!': case '\'':
                  case '(': case ')': case '-': case '/':
                  case '<': case '=': case '>':
                    /* Escape the second '?' in what would otherwise be
                       a trigraph.  */
                    if (elide_outer_quotes)
 8054c58:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8054c5d:	0f 85 5d 0a 00 00    	jne    80556c0 <quotearg_buffer_restyled+0x1030>
 8054c63:	90                   	nop
 8054c64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054c68:	89 3c 24             	mov    %edi,(%esp)
 8054c6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054c6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054c73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054c77:	b9 d4 e5 00 00       	mov    $0xe5d4,%ecx
 8054c7c:	e8 e7 56 00 00       	call   805a368 <__afl_maybe_log>
 8054c81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054c85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054c89:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054c8d:	8b 3c 24             	mov    (%esp),%edi
 8054c90:	8d 64 24 10          	lea    0x10(%esp),%esp
                      goto force_outer_quoting_style;
                    c = arg[i + 2];
                    i += 2;
                    STORE ('?');
 8054c94:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8054c98:	73 3a                	jae    8054cd4 <quotearg_buffer_restyled+0x644>
 8054c9a:	66 90                	xchg   %ax,%ax
 8054c9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ca0:	89 3c 24             	mov    %edi,(%esp)
 8054ca3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054ca7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054cab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054caf:	b9 7b bc 00 00       	mov    $0xbc7b,%ecx
 8054cb4:	e8 af 56 00 00       	call   805a368 <__afl_maybe_log>
 8054cb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054cbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054cc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054cc5:	8b 3c 24             	mov    (%esp),%edi
 8054cc8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054ccc:	8b 74 24 1c          	mov    0x1c(%esp),%esi
 8054cd0:	c6 04 2e 3f          	movb   $0x3f,(%esi,%ebp,1)
 8054cd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054cd8:	89 3c 24             	mov    %edi,(%esp)
 8054cdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054cdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054ce3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054ce7:	b9 d4 c8 00 00       	mov    $0xc8d4,%ecx
 8054cec:	e8 77 56 00 00       	call   805a368 <__afl_maybe_log>
 8054cf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054cf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054cf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054cfd:	8b 3c 24             	mov    (%esp),%edi
 8054d00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054d04:	8d 55 01             	lea    0x1(%ebp),%edx
                    STORE ('"');
 8054d07:	39 54 24 10          	cmp    %edx,0x10(%esp)
 8054d0b:	76 3c                	jbe    8054d49 <quotearg_buffer_restyled+0x6b9>
 8054d0d:	8d 76 00             	lea    0x0(%esi),%esi
 8054d10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054d14:	89 3c 24             	mov    %edi,(%esp)
 8054d17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054d1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054d1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054d23:	b9 67 fc 00 00       	mov    $0xfc67,%ecx
 8054d28:	e8 3b 56 00 00       	call   805a368 <__afl_maybe_log>
 8054d2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054d31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054d35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054d39:	8b 3c 24             	mov    (%esp),%edi
 8054d3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054d40:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8054d44:	c6 44 29 01 22       	movb   $0x22,0x1(%ecx,%ebp,1)
 8054d49:	8d 76 00             	lea    0x0(%esi),%esi
 8054d4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054d50:	89 3c 24             	mov    %edi,(%esp)
 8054d53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054d57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054d5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054d5f:	b9 59 67 00 00       	mov    $0x6759,%ecx
 8054d64:	e8 ff 55 00 00       	call   805a368 <__afl_maybe_log>
 8054d69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054d6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054d71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054d75:	8b 3c 24             	mov    (%esp),%edi
 8054d78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054d7c:	8d 45 02             	lea    0x2(%ebp),%eax
                    STORE ('"');
 8054d7f:	39 44 24 10          	cmp    %eax,0x10(%esp)
 8054d83:	76 3c                	jbe    8054dc1 <quotearg_buffer_restyled+0x731>
 8054d85:	8d 76 00             	lea    0x0(%esi),%esi
 8054d88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054d8c:	89 3c 24             	mov    %edi,(%esp)
 8054d8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054d93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054d97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054d9b:	b9 b8 85 00 00       	mov    $0x85b8,%ecx
 8054da0:	e8 c3 55 00 00       	call   805a368 <__afl_maybe_log>
 8054da5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054da9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054dad:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054db1:	8b 3c 24             	mov    (%esp),%edi
 8054db4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054db8:	8b 74 24 1c          	mov    0x1c(%esp),%esi
 8054dbc:	c6 44 2e 02 22       	movb   $0x22,0x2(%esi,%ebp,1)
 8054dc1:	8d 76 00             	lea    0x0(%esi),%esi
 8054dc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054dc8:	89 3c 24             	mov    %edi,(%esp)
 8054dcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054dcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054dd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054dd7:	b9 dc e0 00 00       	mov    $0xe0dc,%ecx
 8054ddc:	e8 87 55 00 00       	call   805a368 <__afl_maybe_log>
 8054de1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054de5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054de9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054ded:	8b 3c 24             	mov    (%esp),%edi
 8054df0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054df4:	8d 55 03             	lea    0x3(%ebp),%edx
                    STORE ('?');
 8054df7:	39 54 24 10          	cmp    %edx,0x10(%esp)
 8054dfb:	76 3c                	jbe    8054e39 <quotearg_buffer_restyled+0x7a9>
 8054dfd:	8d 76 00             	lea    0x0(%esi),%esi
 8054e00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054e04:	89 3c 24             	mov    %edi,(%esp)
 8054e07:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054e0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054e0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054e13:	b9 af 9e 00 00       	mov    $0x9eaf,%ecx
 8054e18:	e8 4b 55 00 00       	call   805a368 <__afl_maybe_log>
 8054e1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054e21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054e25:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054e29:	8b 3c 24             	mov    (%esp),%edi
 8054e2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054e30:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8054e34:	c6 44 29 03 3f       	movb   $0x3f,0x3(%ecx,%ebp,1)
 8054e39:	8d 76 00             	lea    0x0(%esi),%esi
                    break;
 8054e3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054e40:	89 3c 24             	mov    %edi,(%esp)
 8054e43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054e47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054e4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054e4f:	b9 1a 22 00 00       	mov    $0x221a,%ecx
 8054e54:	e8 0f 55 00 00       	call   805a368 <__afl_maybe_log>
 8054e59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054e5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054e61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054e65:	8b 3c 24             	mov    (%esp),%edi
 8054e68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054e6c:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
                    c = arg[i + 2];
                    i += 2;
                    STORE ('?');
                    STORE ('"');
                    STORE ('"');
                    STORE ('?');
 8054e71:	83 c5 04             	add    $0x4,%ebp
                    break;
 8054e74:	89 de                	mov    %ebx,%esi
 8054e76:	8d 76 00             	lea    0x0(%esi),%esi
 8054e79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 8054e80:	0f b6 44 24 3a       	movzbl 0x3a(%esp),%eax
 8054e85:	38 44 24 0f          	cmp    %al,0xf(%esp)
 8054e89:	0f 82 e1 00 00 00    	jb     8054f70 <quotearg_buffer_restyled+0x8e0>
 8054e8f:	90                   	nop
 8054e90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054e94:	89 3c 24             	mov    %edi,(%esp)
 8054e97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054e9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054e9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054ea3:	b9 44 e5 00 00       	mov    $0xe544,%ecx
 8054ea8:	e8 bb 54 00 00       	call   805a368 <__afl_maybe_log>
 8054ead:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054eb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054eb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054eb9:	8b 3c 24             	mov    (%esp),%edi
 8054ebc:	8d 64 24 10          	lea    0x10(%esp),%esp
             && quote_these_too
 8054ec0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054ec4:	89 3c 24             	mov    %edi,(%esp)
 8054ec7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054ecb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054ecf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054ed3:	b9 5e 66 00 00       	mov    $0x665e,%ecx
 8054ed8:	e8 8b 54 00 00       	call   805a368 <__afl_maybe_log>
 8054edd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054ee1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054ee5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054ee9:	8b 3c 24             	mov    (%esp),%edi
 8054eec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054ef0:	8b 4c 24 7c          	mov    0x7c(%esp),%ecx
 8054ef4:	85 c9                	test   %ecx,%ecx
 8054ef6:	74 78                	je     8054f70 <quotearg_buffer_restyled+0x8e0>
 8054ef8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054efc:	89 3c 24             	mov    %edi,(%esp)
 8054eff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054f03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054f07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054f0b:	b9 11 d9 00 00       	mov    $0xd911,%ecx
 8054f10:	e8 53 54 00 00       	call   805a368 <__afl_maybe_log>
 8054f15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054f19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054f1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054f21:	8b 3c 24             	mov    (%esp),%edi
 8054f24:	8d 64 24 10          	lea    0x10(%esp),%esp
             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)
 8054f28:	89 d3                	mov    %edx,%ebx
 8054f2a:	8b 4c 24 7c          	mov    0x7c(%esp),%ecx
 8054f2e:	c0 eb 05             	shr    $0x5,%bl
 8054f31:	0f b6 c3             	movzbl %bl,%eax
 8054f34:	8b 1c 81             	mov    (%ecx,%eax,4),%ebx
                goto store_c;
              }
          }
        }

      if (! ((backslash_escapes || elide_outer_quotes)
 8054f37:	0f a3 d3             	bt     %edx,%ebx
 8054f3a:	0f 82 9c 00 00 00    	jb     8054fdc <quotearg_buffer_restyled+0x94c>
 8054f40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054f44:	89 3c 24             	mov    %edi,(%esp)
 8054f47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054f4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054f4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054f53:	b9 6f 0e 00 00       	mov    $0xe6f,%ecx
 8054f58:	e8 0b 54 00 00       	call   805a368 <__afl_maybe_log>
 8054f5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054f61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054f65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054f69:	8b 3c 24             	mov    (%esp),%edi
 8054f6c:	8d 64 24 10          	lea    0x10(%esp),%esp
             && quote_these_too
             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)
          && !is_right_quote)
 8054f70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054f74:	89 3c 24             	mov    %edi,(%esp)
 8054f77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054f7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054f7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054f83:	b9 b0 bd 00 00       	mov    $0xbdb0,%ecx
 8054f88:	e8 db 53 00 00       	call   805a368 <__afl_maybe_log>
 8054f8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054f91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054f95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054f99:	8b 3c 24             	mov    (%esp),%edi
 8054f9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8054fa0:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 8054fa5:	0f 84 10 01 00 00    	je     80550bb <quotearg_buffer_restyled+0xa2b>
 8054fab:	90                   	nop
 8054fac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054fb0:	89 3c 24             	mov    %edi,(%esp)
 8054fb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054fb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054fbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054fbf:	b9 0c f9 00 00       	mov    $0xf90c,%ecx
 8054fc4:	e8 9f 53 00 00       	call   805a368 <__afl_maybe_log>
 8054fc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054fcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8054fd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8054fd5:	8b 3c 24             	mov    (%esp),%edi
 8054fd8:	8d 64 24 10          	lea    0x10(%esp),%esp
        goto store_c;

    store_escape:
      if (elide_outer_quotes)
 8054fdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8054fe0:	89 3c 24             	mov    %edi,(%esp)
 8054fe3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8054fe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8054feb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8054fef:	b9 ff d2 00 00       	mov    $0xd2ff,%ecx
 8054ff4:	e8 6f 53 00 00       	call   805a368 <__afl_maybe_log>
 8054ff9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8054ffd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055001:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055005:	8b 3c 24             	mov    (%esp),%edi
 8055008:	8d 64 24 10          	lea    0x10(%esp),%esp
 805500c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8055011:	0f 85 a9 06 00 00    	jne    80556c0 <quotearg_buffer_restyled+0x1030>
 8055017:	90                   	nop
 8055018:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805501c:	89 3c 24             	mov    %edi,(%esp)
 805501f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055023:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055027:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805502b:	b9 24 4a 00 00       	mov    $0x4a24,%ecx
 8055030:	e8 33 53 00 00       	call   805a368 <__afl_maybe_log>
 8055035:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055039:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805503d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055041:	8b 3c 24             	mov    (%esp),%edi
 8055044:	8d 64 24 10          	lea    0x10(%esp),%esp
        goto force_outer_quoting_style;
      STORE ('\\');
 8055048:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805504c:	73 3a                	jae    8055088 <quotearg_buffer_restyled+0x9f8>
 805504e:	66 90                	xchg   %ax,%ax
 8055050:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055054:	89 3c 24             	mov    %edi,(%esp)
 8055057:	89 54 24 04          	mov    %edx,0x4(%esp)
 805505b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805505f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055063:	b9 69 f0 00 00       	mov    $0xf069,%ecx
 8055068:	e8 fb 52 00 00       	call   805a368 <__afl_maybe_log>
 805506d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055071:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055075:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055079:	8b 3c 24             	mov    (%esp),%edi
 805507c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055080:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8055084:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 8055088:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805508c:	89 3c 24             	mov    %edi,(%esp)
 805508f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055093:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055097:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805509b:	b9 6d 1e 00 00       	mov    $0x1e6d,%ecx
 80550a0:	e8 c3 52 00 00       	call   805a368 <__afl_maybe_log>
 80550a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80550a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80550ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80550b1:	8b 3c 24             	mov    (%esp),%edi
 80550b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80550b8:	83 c5 01             	add    $0x1,%ebp
 80550bb:	90                   	nop
 80550bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80550c0:	89 3c 24             	mov    %edi,(%esp)
 80550c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80550c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80550cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80550cf:	b9 b6 1b 00 00       	mov    $0x1bb6,%ecx
 80550d4:	e8 8f 52 00 00       	call   805a368 <__afl_maybe_log>
 80550d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80550dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80550e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80550e5:	8b 3c 24             	mov    (%esp),%edi
 80550e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80550ec:	83 c6 01             	add    $0x1,%esi
 80550ef:	90                   	nop

    store_c:
      STORE (c);
 80550f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80550f4:	89 3c 24             	mov    %edi,(%esp)
 80550f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80550fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80550ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055103:	b9 70 81 00 00       	mov    $0x8170,%ecx
 8055108:	e8 5b 52 00 00       	call   805a368 <__afl_maybe_log>
 805510d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055111:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055115:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055119:	8b 3c 24             	mov    (%esp),%edi
 805511c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055120:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8055124:	73 39                	jae    805515f <quotearg_buffer_restyled+0xacf>
 8055126:	66 90                	xchg   %ax,%ax
 8055128:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805512c:	89 3c 24             	mov    %edi,(%esp)
 805512f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055133:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055137:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805513b:	b9 8f de 00 00       	mov    $0xde8f,%ecx
 8055140:	e8 23 52 00 00       	call   805a368 <__afl_maybe_log>
 8055145:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055149:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805514d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055151:	8b 3c 24             	mov    (%esp),%edi
 8055154:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055158:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805515c:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 805515f:	90                   	nop
 8055160:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055164:	89 3c 24             	mov    %edi,(%esp)
 8055167:	89 54 24 04          	mov    %edx,0x4(%esp)
 805516b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805516f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055173:	b9 ed b2 00 00       	mov    $0xb2ed,%ecx
 8055178:	e8 eb 51 00 00       	call   805a368 <__afl_maybe_log>
 805517d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055181:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055185:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055189:	8b 3c 24             	mov    (%esp),%edi
 805518c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055190:	83 c5 01             	add    $0x1,%ebp

    default:
      abort ();
    }

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
 8055193:	39 fe                	cmp    %edi,%esi
 8055195:	0f 95 c1             	setne  %cl
 8055198:	83 ff ff             	cmp    $0xffffffff,%edi
 805519b:	0f 85 3f f6 ff ff    	jne    80547e0 <quotearg_buffer_restyled+0x150>
 80551a1:	8d 76 00             	lea    0x0(%esi),%esi
 80551a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80551a8:	89 3c 24             	mov    %edi,(%esp)
 80551ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80551af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80551b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80551b7:	b9 83 7c 00 00       	mov    $0x7c83,%ecx
 80551bc:	e8 a7 51 00 00       	call   805a368 <__afl_maybe_log>
 80551c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80551c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80551c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80551cd:	8b 3c 24             	mov    (%esp),%edi
 80551d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80551d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80551d8:	89 3c 24             	mov    %edi,(%esp)
 80551db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80551df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80551e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80551e7:	b9 6a 15 00 00       	mov    $0x156a,%ecx
 80551ec:	e8 77 51 00 00       	call   805a368 <__afl_maybe_log>
 80551f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80551f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80551f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80551fd:	8b 3c 24             	mov    (%esp),%edi
 8055200:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055204:	8b 54 24 14          	mov    0x14(%esp),%edx
 8055208:	80 3c 32 00          	cmpb   $0x0,(%edx,%esi,1)
 805520c:	0f 95 c1             	setne  %cl
 805520f:	84 c9                	test   %cl,%cl
 8055211:	0f 85 01 f6 ff ff    	jne    8054818 <quotearg_buffer_restyled+0x188>
 8055217:	90                   	nop
 8055218:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805521c:	89 3c 24             	mov    %edi,(%esp)
 805521f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055223:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055227:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805522b:	b9 1c 99 00 00       	mov    $0x991c,%ecx
 8055230:	e8 33 51 00 00       	call   805a368 <__afl_maybe_log>
 8055235:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055239:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805523d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055241:	8b 3c 24             	mov    (%esp),%edi
 8055244:	8d 64 24 10          	lea    0x10(%esp),%esp

    store_c:
      STORE (c);
    }

  if (len == 0 && quoting_style == shell_always_quoting_style
 8055248:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805524c:	89 3c 24             	mov    %edi,(%esp)
 805524f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055253:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055257:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805525b:	b9 7a 25 00 00       	mov    $0x257a,%ecx
 8055260:	e8 03 51 00 00       	call   805a368 <__afl_maybe_log>
 8055265:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055269:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805526d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055271:	8b 3c 24             	mov    (%esp),%edi
 8055274:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055278:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 805527d:	89 e8                	mov    %ebp,%eax
 805527f:	0f 94 c3             	sete   %bl
      && elide_outer_quotes)
 8055282:	84 5c 24 39          	test   %bl,0x39(%esp)
 8055286:	74 68                	je     80552f0 <quotearg_buffer_restyled+0xc60>
 8055288:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805528c:	89 3c 24             	mov    %edi,(%esp)
 805528f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055293:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055297:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805529b:	b9 7f 1c 00 00       	mov    $0x1c7f,%ecx
 80552a0:	e8 c3 50 00 00       	call   805a368 <__afl_maybe_log>
 80552a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80552a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80552ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80552b1:	8b 3c 24             	mov    (%esp),%edi
 80552b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80552b8:	85 ed                	test   %ebp,%ebp
 80552ba:	0f 84 00 04 00 00    	je     80556c0 <quotearg_buffer_restyled+0x1030>
 80552c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80552c4:	89 3c 24             	mov    %edi,(%esp)
 80552c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80552cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80552cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80552d3:	b9 a8 a4 00 00       	mov    $0xa4a8,%ecx
 80552d8:	e8 8b 50 00 00       	call   805a368 <__afl_maybe_log>
 80552dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80552e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80552e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80552e9:	8b 3c 24             	mov    (%esp),%edi
 80552ec:	8d 64 24 10          	lea    0x10(%esp),%esp
    goto force_outer_quoting_style;

  if (quote_string && !elide_outer_quotes)
 80552f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80552f4:	89 3c 24             	mov    %edi,(%esp)
 80552f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80552fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80552ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055303:	b9 15 21 00 00       	mov    $0x2115,%ecx
 8055308:	e8 5b 50 00 00       	call   805a368 <__afl_maybe_log>
 805530d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055311:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055315:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055319:	8b 3c 24             	mov    (%esp),%edi
 805531c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055320:	8b 7c 24 28          	mov    0x28(%esp),%edi
 8055324:	85 ff                	test   %edi,%edi
 8055326:	0f 95 c2             	setne  %dl
 8055329:	38 54 24 39          	cmp    %dl,0x39(%esp)
 805532d:	0f 83 21 01 00 00    	jae    8055454 <quotearg_buffer_restyled+0xdc4>
 8055333:	90                   	nop
 8055334:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055338:	89 3c 24             	mov    %edi,(%esp)
 805533b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805533f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055343:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055347:	b9 d9 67 00 00       	mov    $0x67d9,%ecx
 805534c:	e8 17 50 00 00       	call   805a368 <__afl_maybe_log>
 8055351:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055355:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055359:	8b 54 24 04          	mov    0x4(%esp),%edx
 805535d:	8b 3c 24             	mov    (%esp),%edi
 8055360:	8d 64 24 10          	lea    0x10(%esp),%esp
    for (; *quote_string; quote_string++)
 8055364:	8b 74 24 28          	mov    0x28(%esp),%esi
 8055368:	0f b6 16             	movzbl (%esi),%edx
 805536b:	84 d2                	test   %dl,%dl
 805536d:	0f 84 e1 00 00 00    	je     8055454 <quotearg_buffer_restyled+0xdc4>
 8055373:	90                   	nop
 8055374:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055378:	89 3c 24             	mov    %edi,(%esp)
 805537b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805537f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055383:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055387:	b9 49 c5 00 00       	mov    $0xc549,%ecx
 805538c:	e8 d7 4f 00 00       	call   805a368 <__afl_maybe_log>
 8055391:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055395:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055399:	8b 54 24 04          	mov    0x4(%esp),%edx
 805539d:	8b 3c 24             	mov    (%esp),%edi
 80553a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80553a4:	89 f1                	mov    %esi,%ecx
 80553a6:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 80553aa:	29 e9                	sub    %ebp,%ecx
 80553ac:	8b 6c 24 1c          	mov    0x1c(%esp),%ebp
      STORE (*quote_string);
 80553b0:	39 c3                	cmp    %eax,%ebx
 80553b2:	76 34                	jbe    80553e8 <quotearg_buffer_restyled+0xd58>
 80553b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80553b8:	89 3c 24             	mov    %edi,(%esp)
 80553bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80553bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80553c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80553c7:	b9 b2 b5 00 00       	mov    $0xb5b2,%ecx
 80553cc:	e8 97 4f 00 00       	call   805a368 <__afl_maybe_log>
 80553d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80553d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80553d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80553dd:	8b 3c 24             	mov    (%esp),%edi
 80553e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80553e4:	88 54 05 00          	mov    %dl,0x0(%ebp,%eax,1)
 80553e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80553ec:	89 3c 24             	mov    %edi,(%esp)
 80553ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80553f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80553f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80553fb:	b9 88 34 00 00       	mov    $0x3488,%ecx
 8055400:	e8 63 4f 00 00       	call   805a368 <__afl_maybe_log>
 8055405:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055409:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805540d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055411:	8b 3c 24             	mov    (%esp),%edi
 8055414:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055418:	83 c0 01             	add    $0x1,%eax
  if (len == 0 && quoting_style == shell_always_quoting_style
      && elide_outer_quotes)
    goto force_outer_quoting_style;

  if (quote_string && !elide_outer_quotes)
    for (; *quote_string; quote_string++)
 805541b:	0f b6 14 01          	movzbl (%ecx,%eax,1),%edx
 805541f:	84 d2                	test   %dl,%dl
 8055421:	75 8d                	jne    80553b0 <quotearg_buffer_restyled+0xd20>
 8055423:	90                   	nop
 8055424:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055428:	89 3c 24             	mov    %edi,(%esp)
 805542b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805542f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055433:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055437:	b9 11 82 00 00       	mov    $0x8211,%ecx
 805543c:	e8 27 4f 00 00       	call   805a368 <__afl_maybe_log>
 8055441:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055445:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055449:	8b 54 24 04          	mov    0x4(%esp),%edx
 805544d:	8b 3c 24             	mov    (%esp),%edi
 8055450:	8d 64 24 10          	lea    0x10(%esp),%esp
      STORE (*quote_string);

  if (len < buffersize)
 8055454:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055458:	89 3c 24             	mov    %edi,(%esp)
 805545b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805545f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055463:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055467:	b9 da 32 00 00       	mov    $0x32da,%ecx
 805546c:	e8 f7 4e 00 00       	call   805a368 <__afl_maybe_log>
 8055471:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055475:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055479:	8b 54 24 04          	mov    0x4(%esp),%edx
 805547d:	8b 3c 24             	mov    (%esp),%edi
 8055480:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055484:	3b 44 24 10          	cmp    0x10(%esp),%eax
 8055488:	0f 83 6c 02 00 00    	jae    80556fa <quotearg_buffer_restyled+0x106a>
 805548e:	66 90                	xchg   %ax,%ax
 8055490:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055494:	89 3c 24             	mov    %edi,(%esp)
 8055497:	89 54 24 04          	mov    %edx,0x4(%esp)
 805549b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805549f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80554a3:	b9 ca 10 00 00       	mov    $0x10ca,%ecx
 80554a8:	e8 bb 4e 00 00       	call   805a368 <__afl_maybe_log>
 80554ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80554b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80554b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80554b9:	8b 3c 24             	mov    (%esp),%edi
 80554bc:	8d 64 24 10          	lea    0x10(%esp),%esp
    buffer[len] = '\0';
 80554c0:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
 80554c4:	c6 04 07 00          	movb   $0x0,(%edi,%eax,1)
     sufficiently quotes the specified characters.  */
  return quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                   quoting_style,
                                   flags & ~QA_ELIDE_OUTER_QUOTES, NULL,
                                   left_quote, right_quote);
}
 80554c8:	83 c4 5c             	add    $0x5c,%esp
 80554cb:	5b                   	pop    %ebx
 80554cc:	5e                   	pop    %esi
 80554cd:	5f                   	pop    %edi
 80554ce:	5d                   	pop    %ebp
 80554cf:	c3                   	ret    
              goto store_escape;
            }
          break;

        case '{': case '}': /* sometimes special if isolated */
          if (! (argsize == SIZE_MAX ? arg[1] == '\0' : argsize == 1))
 80554d0:	83 ff 01             	cmp    $0x1,%edi
 80554d3:	0f 95 c0             	setne  %al
 80554d6:	83 ff ff             	cmp    $0xffffffff,%edi
 80554d9:	0f 84 a1 26 00 00    	je     8057b80 <quotearg_buffer_restyled+0x34f0>
 80554df:	90                   	nop
 80554e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80554e4:	89 3c 24             	mov    %edi,(%esp)
 80554e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80554eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80554ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80554f3:	b9 a4 2d 00 00       	mov    $0x2da4,%ecx
 80554f8:	e8 6b 4e 00 00       	call   805a368 <__afl_maybe_log>
 80554fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055501:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055505:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055509:	8b 3c 24             	mov    (%esp),%edi
 805550c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055510:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055514:	89 3c 24             	mov    %edi,(%esp)
 8055517:	89 54 24 04          	mov    %edx,0x4(%esp)
 805551b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805551f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055523:	b9 02 bd 00 00       	mov    $0xbd02,%ecx
 8055528:	e8 3b 4e 00 00       	call   805a368 <__afl_maybe_log>
 805552d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055531:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055535:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055539:	8b 3c 24             	mov    (%esp),%edi
 805553c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055540:	84 c0                	test   %al,%al
 8055542:	0f 85 38 f9 ff ff    	jne    8054e80 <quotearg_buffer_restyled+0x7f0>
 8055548:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805554c:	89 3c 24             	mov    %edi,(%esp)
 805554f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055553:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055557:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805555b:	b9 8e 6b 00 00       	mov    $0x6b8e,%ecx
 8055560:	e8 03 4e 00 00       	call   805a368 <__afl_maybe_log>
 8055565:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055569:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805556d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055571:	8b 3c 24             	mov    (%esp),%edi
 8055574:	8d 64 24 10          	lea    0x10(%esp),%esp
            break;
          /* Fall through.  */
        case '#': case '~':
          if (i != 0)
 8055578:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805557c:	89 3c 24             	mov    %edi,(%esp)
 805557f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055583:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055587:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805558b:	b9 d6 be 00 00       	mov    $0xbed6,%ecx
 8055590:	e8 d3 4d 00 00       	call   805a368 <__afl_maybe_log>
 8055595:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055599:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805559d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80555a1:	8b 3c 24             	mov    (%esp),%edi
 80555a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80555a8:	85 f6                	test   %esi,%esi
 80555aa:	0f 85 d0 f8 ff ff    	jne    8054e80 <quotearg_buffer_restyled+0x7f0>
 80555b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80555b4:	89 3c 24             	mov    %edi,(%esp)
 80555b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80555bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80555bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80555c3:	b9 4c c8 00 00       	mov    $0xc84c,%ecx
 80555c8:	e8 9b 4d 00 00       	call   805a368 <__afl_maybe_log>
 80555cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80555d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80555d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80555d9:	8b 3c 24             	mov    (%esp),%edi
 80555dc:	8d 64 24 10          	lea    0x10(%esp),%esp
        case '`': case '|':
          /* A shell special character.  In theory, '$' and '`' could
             be the first bytes of multibyte characters, which means
             we should check them with mbrtowc, but in practice this
             doesn't happen so it's not worth worrying about.  */
          if (quoting_style == shell_always_quoting_style
 80555e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80555e4:	89 3c 24             	mov    %edi,(%esp)
 80555e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80555eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80555ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80555f3:	b9 f3 c4 00 00       	mov    $0xc4f3,%ecx
 80555f8:	e8 6b 4d 00 00       	call   805a368 <__afl_maybe_log>
 80555fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055601:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055605:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055609:	8b 3c 24             	mov    (%esp),%edi
 805560c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055610:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 8055615:	0f 85 65 f8 ff ff    	jne    8054e80 <quotearg_buffer_restyled+0x7f0>
 805561b:	90                   	nop
 805561c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055620:	89 3c 24             	mov    %edi,(%esp)
 8055623:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055627:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805562b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805562f:	b9 85 b5 00 00       	mov    $0xb585,%ecx
 8055634:	e8 2f 4d 00 00       	call   805a368 <__afl_maybe_log>
 8055639:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805563d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055641:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055645:	8b 3c 24             	mov    (%esp),%edi
 8055648:	8d 64 24 10          	lea    0x10(%esp),%esp
 805564c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055650:	89 3c 24             	mov    %edi,(%esp)
 8055653:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055657:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805565b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805565f:	b9 a8 0a 00 00       	mov    $0xaa8,%ecx
 8055664:	e8 ff 4c 00 00       	call   805a368 <__afl_maybe_log>
 8055669:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805566d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055671:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055675:	8b 3c 24             	mov    (%esp),%edi
 8055678:	8d 64 24 10          	lea    0x10(%esp),%esp
 805567c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8055681:	0f 84 f9 f7 ff ff    	je     8054e80 <quotearg_buffer_restyled+0x7f0>
 8055687:	90                   	nop
 8055688:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805568c:	89 3c 24             	mov    %edi,(%esp)
 805568f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055693:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055697:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805569b:	b9 1d da 00 00       	mov    $0xda1d,%ecx
 80556a0:	e8 c3 4c 00 00       	call   805a368 <__afl_maybe_log>
 80556a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80556a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80556ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80556b1:	8b 3c 24             	mov    (%esp),%edi
 80556b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80556b8:	90                   	nop
 80556b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  return len;

 force_outer_quoting_style:
  /* Don't reuse quote_these_too, since the addition of outer quotes
     sufficiently quotes the specified characters.  */
  return quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
 80556c0:	83 ec 08             	sub    $0x8,%esp
 80556c3:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
 80556ca:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
 80556d1:	6a 00                	push   $0x0
 80556d3:	8b ac 24 8c 00 00 00 	mov    0x8c(%esp),%ebp
 80556da:	83 e5 fd             	and    $0xfffffffd,%ebp
 80556dd:	55                   	push   %ebp
 80556de:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
 80556e5:	57                   	push   %edi
 80556e6:	8b 4c 24 34          	mov    0x34(%esp),%ecx
 80556ea:	8b 54 24 30          	mov    0x30(%esp),%edx
 80556ee:	8b 44 24 3c          	mov    0x3c(%esp),%eax
 80556f2:	e8 99 ef ff ff       	call   8054690 <quotearg_buffer_restyled>
 80556f7:	83 c4 20             	add    $0x20,%esp
 80556fa:	66 90                	xchg   %ax,%ax
                                   quoting_style,
                                   flags & ~QA_ELIDE_OUTER_QUOTES, NULL,
                                   left_quote, right_quote);
}
 80556fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055700:	89 3c 24             	mov    %edi,(%esp)
 8055703:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055707:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805570b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805570f:	b9 38 f0 00 00       	mov    $0xf038,%ecx
 8055714:	e8 4f 4c 00 00       	call   805a368 <__afl_maybe_log>
 8055719:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805571d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055721:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055725:	8b 3c 24             	mov    (%esp),%edi
 8055728:	8d 64 24 10          	lea    0x10(%esp),%esp
 805572c:	83 c4 5c             	add    $0x5c,%esp
 805572f:	5b                   	pop    %ebx
 8055730:	5e                   	pop    %esi
 8055731:	5f                   	pop    %edi
 8055732:	5d                   	pop    %ebp
 8055733:	c3                   	ret    
 8055734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
        case '\t': esc = 't'; goto c_and_shell_escape;
 8055738:	b9 74 00 00 00       	mov    $0x74,%ecx
 805573d:	8d 76 00             	lea    0x0(%esi),%esi
             outer quotes and nothing else is problematic.  */
          if (backslash_escapes && elide_outer_quotes && quote_string_len)
            goto store_c;

        c_and_shell_escape:
          if (quoting_style == shell_always_quoting_style
 8055740:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055744:	89 3c 24             	mov    %edi,(%esp)
 8055747:	89 54 24 04          	mov    %edx,0x4(%esp)
 805574b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805574f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055753:	b9 c0 24 00 00       	mov    $0x24c0,%ecx
 8055758:	e8 0b 4c 00 00       	call   805a368 <__afl_maybe_log>
 805575d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055761:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055765:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055769:	8b 3c 24             	mov    (%esp),%edi
 805576c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055770:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 8055775:	75 6d                	jne    80557e4 <quotearg_buffer_restyled+0x1154>
 8055777:	90                   	nop
 8055778:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805577c:	89 3c 24             	mov    %edi,(%esp)
 805577f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055783:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055787:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805578b:	b9 c9 b7 00 00       	mov    $0xb7c9,%ecx
 8055790:	e8 d3 4b 00 00       	call   805a368 <__afl_maybe_log>
 8055795:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055799:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805579d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80557a1:	8b 3c 24             	mov    (%esp),%edi
 80557a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80557a8:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 80557ad:	0f 85 0d ff ff ff    	jne    80556c0 <quotearg_buffer_restyled+0x1030>
 80557b3:	90                   	nop
 80557b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80557b8:	89 3c 24             	mov    %edi,(%esp)
 80557bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80557bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80557c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80557c7:	b9 e9 69 00 00       	mov    $0x69e9,%ecx
 80557cc:	e8 97 4b 00 00       	call   805a368 <__afl_maybe_log>
 80557d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80557d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80557d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80557dd:	8b 3c 24             	mov    (%esp),%edi
 80557e0:	8d 64 24 10          	lea    0x10(%esp),%esp
              && elide_outer_quotes)
            goto force_outer_quoting_style;
          /* Fall through.  */
        c_escape:
          if (backslash_escapes)
 80557e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80557e8:	89 3c 24             	mov    %edi,(%esp)
 80557eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80557ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80557f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80557f7:	b9 c6 67 00 00       	mov    $0x67c6,%ecx
 80557fc:	e8 67 4b 00 00       	call   805a368 <__afl_maybe_log>
 8055801:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055805:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055809:	8b 54 24 04          	mov    0x4(%esp),%edx
 805580d:	8b 3c 24             	mov    (%esp),%edi
 8055810:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055814:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 8055819:	0f 84 61 f6 ff ff    	je     8054e80 <quotearg_buffer_restyled+0x7f0>
 805581f:	90                   	nop
 8055820:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055824:	89 3c 24             	mov    %edi,(%esp)
 8055827:	89 54 24 04          	mov    %edx,0x4(%esp)
 805582b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805582f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055833:	b9 53 97 00 00       	mov    $0x9753,%ecx
 8055838:	e8 2b 4b 00 00       	call   805a368 <__afl_maybe_log>
 805583d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055841:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055845:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055849:	8b 3c 24             	mov    (%esp),%edi
 805584c:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              c = esc;
 8055850:	89 ca                	mov    %ecx,%edx
 8055852:	e9 85 f7 ff ff       	jmp    8054fdc <quotearg_buffer_restyled+0x94c>
 8055857:	89 f6                	mov    %esi,%esi
 8055859:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
            default:
              break;
            }
          break;

        case '\a': esc = 'a'; goto c_escape;
 8055860:	b9 61 00 00 00       	mov    $0x61,%ecx
 8055865:	e9 7a ff ff ff       	jmp    80557e4 <quotearg_buffer_restyled+0x1154>
 805586a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
 8055870:	b9 6e 00 00 00       	mov    $0x6e,%ecx
 8055875:	e9 c3 fe ff ff       	jmp    805573d <quotearg_buffer_restyled+0x10ad>
 805587a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
              break;
            }
          break;

        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
 8055880:	b9 62 00 00 00       	mov    $0x62,%ecx
 8055885:	e9 5a ff ff ff       	jmp    80557e4 <quotearg_buffer_restyled+0x1154>
 805588a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

      c = arg[i];
      switch (c)
        {
        case '\0':
          if (backslash_escapes)
 8055890:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%esp)
 8055895:	0f 84 7d 22 00 00    	je     8057b18 <quotearg_buffer_restyled+0x3488>
 805589b:	90                   	nop
 805589c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80558a0:	89 3c 24             	mov    %edi,(%esp)
 80558a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80558a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80558ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80558af:	b9 74 aa 00 00       	mov    $0xaa74,%ecx
 80558b4:	e8 af 4a 00 00       	call   805a368 <__afl_maybe_log>
 80558b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80558bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80558c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80558c5:	8b 3c 24             	mov    (%esp),%edi
 80558c8:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              if (elide_outer_quotes)
 80558cc:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 80558d1:	0f 85 e9 fd ff ff    	jne    80556c0 <quotearg_buffer_restyled+0x1030>
 80558d7:	90                   	nop
 80558d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80558dc:	89 3c 24             	mov    %edi,(%esp)
 80558df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80558e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80558e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80558eb:	b9 8b fd 00 00       	mov    $0xfd8b,%ecx
 80558f0:	e8 73 4a 00 00       	call   805a368 <__afl_maybe_log>
 80558f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80558f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80558fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055901:	8b 3c 24             	mov    (%esp),%edi
 8055904:	8d 64 24 10          	lea    0x10(%esp),%esp
                goto force_outer_quoting_style;
              STORE ('\\');
 8055908:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805590c:	73 3a                	jae    8055948 <quotearg_buffer_restyled+0x12b8>
 805590e:	66 90                	xchg   %ax,%ax
 8055910:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055914:	89 3c 24             	mov    %edi,(%esp)
 8055917:	89 54 24 04          	mov    %edx,0x4(%esp)
 805591b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805591f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055923:	b9 a3 72 00 00       	mov    $0x72a3,%ecx
 8055928:	e8 3b 4a 00 00       	call   805a368 <__afl_maybe_log>
 805592d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055931:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055935:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055939:	8b 3c 24             	mov    (%esp),%edi
 805593c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055940:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8055944:	c6 04 2a 5c          	movb   $0x5c,(%edx,%ebp,1)
              /* If quote_string were to begin with digits, we'd need to
                 test for the end of the arg as well.  However, it's
                 hard to imagine any locale that would use digits in
                 quotes, and set_custom_quoting is documented not to
                 accept them.  */
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
 8055948:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805594c:	89 3c 24             	mov    %edi,(%esp)
 805594f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055953:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055957:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805595b:	b9 b5 df 00 00       	mov    $0xdfb5,%ecx
 8055960:	e8 03 4a 00 00       	call   805a368 <__afl_maybe_log>
 8055965:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055969:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805596d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055971:	8b 3c 24             	mov    (%esp),%edi
 8055974:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055978:	8d 5e 01             	lea    0x1(%esi),%ebx
        case '\0':
          if (backslash_escapes)
            {
              if (elide_outer_quotes)
                goto force_outer_quoting_style;
              STORE ('\\');
 805597b:	8d 45 01             	lea    0x1(%ebp),%eax
              /* If quote_string were to begin with digits, we'd need to
                 test for the end of the arg as well.  However, it's
                 hard to imagine any locale that would use digits in
                 quotes, and set_custom_quoting is documented not to
                 accept them.  */
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
 805597e:	39 df                	cmp    %ebx,%edi
 8055980:	0f 86 6a 01 00 00    	jbe    8055af0 <quotearg_buffer_restyled+0x1460>
 8055986:	66 90                	xchg   %ax,%ax
 8055988:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805598c:	89 3c 24             	mov    %edi,(%esp)
 805598f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055993:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055997:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805599b:	b9 86 a8 00 00       	mov    $0xa886,%ecx
 80559a0:	e8 c3 49 00 00       	call   805a368 <__afl_maybe_log>
 80559a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80559a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80559ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80559b1:	8b 3c 24             	mov    (%esp),%edi
 80559b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80559b8:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 80559bc:	0f b6 54 31 01       	movzbl 0x1(%ecx,%esi,1),%edx
 80559c1:	8d 5a d0             	lea    -0x30(%edx),%ebx
 80559c4:	88 54 24 20          	mov    %dl,0x20(%esp)
 80559c8:	80 fb 09             	cmp    $0x9,%bl
 80559cb:	0f 87 1f 01 00 00    	ja     8055af0 <quotearg_buffer_restyled+0x1460>
 80559d1:	8d 76 00             	lea    0x0(%esi),%esi
 80559d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80559d8:	89 3c 24             	mov    %edi,(%esp)
 80559db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80559df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80559e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80559e7:	b9 88 45 00 00       	mov    $0x4588,%ecx
 80559ec:	e8 77 49 00 00       	call   805a368 <__afl_maybe_log>
 80559f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80559f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80559f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80559fd:	8b 3c 24             	mov    (%esp),%edi
 8055a00:	8d 64 24 10          	lea    0x10(%esp),%esp
                {
                  STORE ('0');
 8055a04:	39 44 24 10          	cmp    %eax,0x10(%esp)
 8055a08:	0f 87 ef 28 00 00    	ja     80582fd <quotearg_buffer_restyled+0x3c6d>
 8055a0e:	66 90                	xchg   %ax,%ax
 8055a10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055a14:	89 3c 24             	mov    %edi,(%esp)
 8055a17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055a1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055a1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055a23:	b9 4f ba 00 00       	mov    $0xba4f,%ecx
 8055a28:	e8 3b 49 00 00       	call   805a368 <__afl_maybe_log>
 8055a2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055a31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055a35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055a39:	8b 3c 24             	mov    (%esp),%edi
 8055a3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055a40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055a44:	89 3c 24             	mov    %edi,(%esp)
 8055a47:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055a4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055a4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055a53:	b9 dc 72 00 00       	mov    $0x72dc,%ecx
 8055a58:	e8 0b 49 00 00       	call   805a368 <__afl_maybe_log>
 8055a5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055a61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055a65:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055a69:	8b 3c 24             	mov    (%esp),%edi
 8055a6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055a70:	8d 45 02             	lea    0x2(%ebp),%eax
                  STORE ('0');
 8055a73:	39 44 24 10          	cmp    %eax,0x10(%esp)
 8055a77:	76 3c                	jbe    8055ab5 <quotearg_buffer_restyled+0x1425>
 8055a79:	8d 76 00             	lea    0x0(%esi),%esi
 8055a7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055a80:	89 3c 24             	mov    %edi,(%esp)
 8055a83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055a87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055a8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055a8f:	b9 9d 4a 00 00       	mov    $0x4a9d,%ecx
 8055a94:	e8 cf 48 00 00       	call   805a368 <__afl_maybe_log>
 8055a99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055a9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055aa1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055aa5:	8b 3c 24             	mov    (%esp),%edi
 8055aa8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055aac:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8055ab0:	c6 44 2a 02 30       	movb   $0x30,0x2(%edx,%ebp,1)
 8055ab5:	8d 76 00             	lea    0x0(%esi),%esi
 8055ab8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055abc:	89 3c 24             	mov    %edi,(%esp)
 8055abf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055ac3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ac7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055acb:	b9 02 77 00 00       	mov    $0x7702,%ecx
 8055ad0:	e8 93 48 00 00       	call   805a368 <__afl_maybe_log>
 8055ad5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055ad9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055add:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055ae1:	8b 3c 24             	mov    (%esp),%edi
 8055ae4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ae8:	8d 45 03             	lea    0x3(%ebp),%eax
 8055aeb:	90                   	nop
 8055aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
                    i += 2;
                    STORE ('?');
                    STORE ('"');
                    STORE ('"');
                    STORE ('?');
                    break;
 8055af0:	89 c5                	mov    %eax,%ebp
 8055af2:	ba 30 00 00 00       	mov    $0x30,%edx
 8055af7:	e9 c4 f3 ff ff       	jmp    8054ec0 <quotearg_buffer_restyled+0x830>
 8055afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
 8055b00:	b9 72 00 00 00       	mov    $0x72,%ecx
 8055b05:	e9 33 fc ff ff       	jmp    805573d <quotearg_buffer_restyled+0x10ad>
 8055b0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
            }
          break;

        case '\a': esc = 'a'; goto c_escape;
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
 8055b10:	b9 66 00 00 00       	mov    $0x66,%ecx
 8055b15:	e9 ca fc ff ff       	jmp    80557e4 <quotearg_buffer_restyled+0x1154>
 8055b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
        case '\t': esc = 't'; goto c_and_shell_escape;
        case '\v': esc = 'v'; goto c_escape;
 8055b20:	b9 76 00 00 00       	mov    $0x76,%ecx
 8055b25:	e9 ba fc ff ff       	jmp    80557e4 <quotearg_buffer_restyled+0x1154>
 8055b2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
        case '\\': esc = c;
          /* No need to escape the escape if we are trying to elide
             outer quotes and nothing else is problematic.  */
          if (backslash_escapes && elide_outer_quotes && quote_string_len)
 8055b30:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
 8055b35:	84 4c 24 39          	test   %cl,0x39(%esp)
 8055b39:	74 6d                	je     8055ba8 <quotearg_buffer_restyled+0x1518>
 8055b3b:	90                   	nop
 8055b3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055b40:	89 3c 24             	mov    %edi,(%esp)
 8055b43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055b47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055b4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055b4f:	b9 d0 e7 00 00       	mov    $0xe7d0,%ecx
 8055b54:	e8 0f 48 00 00       	call   805a368 <__afl_maybe_log>
 8055b59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055b5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055b61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055b65:	8b 3c 24             	mov    (%esp),%edi
 8055b68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055b6c:	80 7c 24 20 00       	cmpb   $0x0,0x20(%esp)
 8055b71:	0f 85 44 f5 ff ff    	jne    80550bb <quotearg_buffer_restyled+0xa2b>
 8055b77:	90                   	nop
 8055b78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055b7c:	89 3c 24             	mov    %edi,(%esp)
 8055b7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055b83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055b87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055b8b:	b9 0b d9 00 00       	mov    $0xd90b,%ecx
 8055b90:	e8 d3 47 00 00       	call   805a368 <__afl_maybe_log>
 8055b95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055b99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055b9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055ba1:	8b 3c 24             	mov    (%esp),%edi
 8055ba4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ba8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055bac:	89 3c 24             	mov    %edi,(%esp)
 8055baf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055bb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055bb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055bbb:	b9 40 c4 00 00       	mov    $0xc440,%ecx
 8055bc0:	e8 a3 47 00 00       	call   805a368 <__afl_maybe_log>
 8055bc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055bc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055bcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055bd1:	8b 3c 24             	mov    (%esp),%edi
 8055bd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055bd8:	89 d1                	mov    %edx,%ecx
 8055bda:	e9 5e fb ff ff       	jmp    805573d <quotearg_buffer_restyled+0x10ad>
 8055bdf:	90                   	nop
              && elide_outer_quotes)
            goto force_outer_quoting_style;
          break;

        case '\'':
          if (quoting_style == shell_always_quoting_style)
 8055be0:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 8055be5:	0f 85 95 f2 ff ff    	jne    8054e80 <quotearg_buffer_restyled+0x7f0>
 8055beb:	90                   	nop
 8055bec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055bf0:	89 3c 24             	mov    %edi,(%esp)
 8055bf3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055bf7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055bfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055bff:	b9 8e 5b 00 00       	mov    $0x5b8e,%ecx
 8055c04:	e8 5f 47 00 00       	call   805a368 <__afl_maybe_log>
 8055c09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055c0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055c11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055c15:	8b 3c 24             	mov    (%esp),%edi
 8055c18:	8d 64 24 10          	lea    0x10(%esp),%esp
            {
              if (elide_outer_quotes)
 8055c1c:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8055c21:	0f 85 99 fa ff ff    	jne    80556c0 <quotearg_buffer_restyled+0x1030>
 8055c27:	90                   	nop
 8055c28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055c2c:	89 3c 24             	mov    %edi,(%esp)
 8055c2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055c33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055c37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055c3b:	b9 5b 59 00 00       	mov    $0x595b,%ecx
 8055c40:	e8 23 47 00 00       	call   805a368 <__afl_maybe_log>
 8055c45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055c49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055c4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055c51:	8b 3c 24             	mov    (%esp),%edi
 8055c54:	8d 64 24 10          	lea    0x10(%esp),%esp
                goto force_outer_quoting_style;
              STORE ('\'');
 8055c58:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8055c5c:	73 3a                	jae    8055c98 <quotearg_buffer_restyled+0x1608>
 8055c5e:	66 90                	xchg   %ax,%ax
 8055c60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055c64:	89 3c 24             	mov    %edi,(%esp)
 8055c67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055c6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055c6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055c73:	b9 96 05 00 00       	mov    $0x596,%ecx
 8055c78:	e8 eb 46 00 00       	call   805a368 <__afl_maybe_log>
 8055c7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055c81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055c85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055c89:	8b 3c 24             	mov    (%esp),%edi
 8055c8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055c90:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 8055c94:	c6 04 2b 27          	movb   $0x27,(%ebx,%ebp,1)
 8055c98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055c9c:	89 3c 24             	mov    %edi,(%esp)
 8055c9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055ca3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ca7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055cab:	b9 5b f6 00 00       	mov    $0xf65b,%ecx
 8055cb0:	e8 b3 46 00 00       	call   805a368 <__afl_maybe_log>
 8055cb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055cb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055cbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055cc1:	8b 3c 24             	mov    (%esp),%edi
 8055cc4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055cc8:	8d 45 01             	lea    0x1(%ebp),%eax
              STORE ('\\');
 8055ccb:	39 44 24 10          	cmp    %eax,0x10(%esp)
 8055ccf:	76 3c                	jbe    8055d0d <quotearg_buffer_restyled+0x167d>
 8055cd1:	8d 76 00             	lea    0x0(%esi),%esi
 8055cd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055cd8:	89 3c 24             	mov    %edi,(%esp)
 8055cdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055cdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ce3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055ce7:	b9 6f 23 00 00       	mov    $0x236f,%ecx
 8055cec:	e8 77 46 00 00       	call   805a368 <__afl_maybe_log>
 8055cf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055cf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055cf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055cfd:	8b 3c 24             	mov    (%esp),%edi
 8055d00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055d04:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8055d08:	c6 44 29 01 5c       	movb   $0x5c,0x1(%ecx,%ebp,1)
 8055d0d:	8d 76 00             	lea    0x0(%esi),%esi
 8055d10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055d14:	89 3c 24             	mov    %edi,(%esp)
 8055d17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055d1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055d1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055d23:	b9 c0 30 00 00       	mov    $0x30c0,%ecx
 8055d28:	e8 3b 46 00 00       	call   805a368 <__afl_maybe_log>
 8055d2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055d31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055d35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055d39:	8b 3c 24             	mov    (%esp),%edi
 8055d3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055d40:	8d 5d 02             	lea    0x2(%ebp),%ebx
              STORE ('\'');
 8055d43:	39 5c 24 10          	cmp    %ebx,0x10(%esp)
 8055d47:	76 3c                	jbe    8055d85 <quotearg_buffer_restyled+0x16f5>
 8055d49:	8d 76 00             	lea    0x0(%esi),%esi
 8055d4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055d50:	89 3c 24             	mov    %edi,(%esp)
 8055d53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055d57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055d5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055d5f:	b9 c8 50 00 00       	mov    $0x50c8,%ecx
 8055d64:	e8 ff 45 00 00       	call   805a368 <__afl_maybe_log>
 8055d69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055d6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055d71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055d75:	8b 3c 24             	mov    (%esp),%edi
 8055d78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055d7c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8055d80:	c6 44 28 02 27       	movb   $0x27,0x2(%eax,%ebp,1)
 8055d85:	8d 76 00             	lea    0x0(%esi),%esi
 8055d88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055d8c:	89 3c 24             	mov    %edi,(%esp)
 8055d8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055d93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055d97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055d9b:	b9 b2 1d 00 00       	mov    $0x1db2,%ecx
 8055da0:	e8 c3 45 00 00       	call   805a368 <__afl_maybe_log>
 8055da5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055da9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055dad:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055db1:	8b 3c 24             	mov    (%esp),%edi
 8055db4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055db8:	83 c5 03             	add    $0x3,%ebp
 8055dbb:	e9 c0 f0 ff ff       	jmp    8054e80 <quotearg_buffer_restyled+0x7f0>
            /* Length of multibyte sequence found so far.  */
            size_t m;

            bool printable;

            if (unibyte_locale)
 8055dc0:	83 7c 24 34 01       	cmpl   $0x1,0x34(%esp)
 8055dc5:	0f 85 15 19 00 00    	jne    80576e0 <quotearg_buffer_restyled+0x3050>
 8055dcb:	90                   	nop
 8055dcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055dd0:	89 3c 24             	mov    %edi,(%esp)
 8055dd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055dd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ddb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055ddf:	b9 b4 94 00 00       	mov    $0x94b4,%ecx
 8055de4:	e8 7f 45 00 00       	call   805a368 <__afl_maybe_log>
 8055de9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055ded:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055df1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055df5:	8b 3c 24             	mov    (%esp),%edi
 8055df8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055dfc:	88 54 24 20          	mov    %dl,0x20(%esp)
              {
                m = 1;
                printable = isprint (c) != 0;
 8055e00:	e8 0b 37 ff ff       	call   8049510 <__ctype_b_loc@plt>
 8055e05:	0f b6 4c 24 20       	movzbl 0x20(%esp),%ecx
 8055e0a:	8b 18                	mov    (%eax),%ebx

            bool printable;

            if (unibyte_locale)
              {
                m = 1;
 8055e0c:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
 8055e13:	00 
                printable = isprint (c) != 0;
 8055e14:	89 ca                	mov    %ecx,%edx
 8055e16:	0f b7 0c 4b          	movzwl (%ebx,%ecx,2),%ecx
 8055e1a:	66 c1 e9 0e          	shr    $0xe,%cx
 8055e1e:	83 e1 01             	and    $0x1,%ecx
 8055e21:	88 4c 24 20          	mov    %cl,0x20(%esp)
 8055e25:	8d 76 00             	lea    0x0(%esi),%esi
                      }
                  }
                while (! mbsinit (&mbstate));
              }

            if (1 < m || (backslash_escapes && ! printable))
 8055e28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055e2c:	89 3c 24             	mov    %edi,(%esp)
 8055e2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055e33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055e37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055e3b:	b9 d2 29 00 00       	mov    $0x29d2,%ecx
 8055e40:	e8 23 45 00 00       	call   805a368 <__afl_maybe_log>
 8055e45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055e49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055e4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055e51:	8b 3c 24             	mov    (%esp),%edi
 8055e54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055e58:	0f b6 5c 24 20       	movzbl 0x20(%esp),%ebx
 8055e5d:	38 5c 24 0f          	cmp    %bl,0xf(%esp)
 8055e61:	0f 86 19 f0 ff ff    	jbe    8054e80 <quotearg_buffer_restyled+0x7f0>
 8055e67:	90                   	nop
 8055e68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055e6c:	89 3c 24             	mov    %edi,(%esp)
 8055e6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055e73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055e77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055e7b:	b9 48 ee 00 00       	mov    $0xee48,%ecx
 8055e80:	e8 e3 44 00 00       	call   805a368 <__afl_maybe_log>
 8055e85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055e89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055e8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055e91:	8b 3c 24             	mov    (%esp),%edi
 8055e94:	8d 64 24 10          	lea    0x10(%esp),%esp
              {
                /* Output a multibyte sequence, or an escaped
                   unprintable unibyte character.  */
                size_t ilim = i + m;
 8055e98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055e9c:	89 3c 24             	mov    %edi,(%esp)
 8055e9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055ea3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ea7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055eab:	b9 b6 4d 00 00       	mov    $0x4db6,%ecx
 8055eb0:	e8 b3 44 00 00       	call   805a368 <__afl_maybe_log>
 8055eb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055eb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055ebd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055ec1:	8b 3c 24             	mov    (%esp),%edi
 8055ec4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ec8:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 8055ecc:	89 f1                	mov    %esi,%ecx
 8055ece:	f7 d1                	not    %ecx
 8055ed0:	01 f3                	add    %esi,%ebx
 8055ed2:	01 d9                	add    %ebx,%ecx
 8055ed4:	83 e1 03             	and    $0x3,%ecx
 8055ed7:	89 4c 24 24          	mov    %ecx,0x24(%esp)
 8055edb:	0f 84 7f 1c 00 00    	je     8057b60 <quotearg_buffer_restyled+0x34d0>
 8055ee1:	8d 76 00             	lea    0x0(%esi),%esi
 8055ee4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055ee8:	89 3c 24             	mov    %edi,(%esp)
 8055eeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055eef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055ef3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055ef7:	b9 f9 6b 00 00       	mov    $0x6bf9,%ecx
 8055efc:	e8 67 44 00 00       	call   805a368 <__afl_maybe_log>
 8055f01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055f05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055f09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055f0d:	8b 3c 24             	mov    (%esp),%edi
 8055f10:	8d 64 24 10          	lea    0x10(%esp),%esp

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8055f14:	0f b6 44 24 20       	movzbl 0x20(%esp),%eax
 8055f19:	38 44 24 0f          	cmp    %al,0xf(%esp)
 8055f1d:	0f 87 6d 1c 00 00    	ja     8057b90 <quotearg_buffer_restyled+0x3500>
 8055f23:	90                   	nop
 8055f24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055f28:	89 3c 24             	mov    %edi,(%esp)
 8055f2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055f2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055f33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055f37:	b9 3f 12 00 00       	mov    $0x123f,%ecx
 8055f3c:	e8 27 44 00 00       	call   805a368 <__afl_maybe_log>
 8055f41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055f45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055f49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055f4d:	8b 3c 24             	mov    (%esp),%edi
 8055f50:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 8055f54:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 8055f59:	0f 84 a5 00 00 00    	je     8056004 <quotearg_buffer_restyled+0x1974>
 8055f5f:	90                   	nop
 8055f60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055f64:	89 3c 24             	mov    %edi,(%esp)
 8055f67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055f6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055f6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055f73:	b9 4e 6c 00 00       	mov    $0x6c4e,%ecx
 8055f78:	e8 eb 43 00 00       	call   805a368 <__afl_maybe_log>
 8055f7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055f81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055f85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055f89:	8b 3c 24             	mov    (%esp),%edi
 8055f8c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 8055f90:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8055f94:	0f 82 a3 22 00 00    	jb     805823d <quotearg_buffer_restyled+0x3bad>
 8055f9a:	66 90                	xchg   %ax,%ax
 8055f9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055fa0:	89 3c 24             	mov    %edi,(%esp)
 8055fa3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055fa7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055fab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055faf:	b9 c8 8b 00 00       	mov    $0x8bc8,%ecx
 8055fb4:	e8 af 43 00 00       	call   805a368 <__afl_maybe_log>
 8055fb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055fbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055fc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055fc5:	8b 3c 24             	mov    (%esp),%edi
 8055fc8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055fcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8055fd0:	89 3c 24             	mov    %edi,(%esp)
 8055fd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8055fd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8055fdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8055fdf:	b9 35 52 00 00       	mov    $0x5235,%ecx
 8055fe4:	e8 7f 43 00 00       	call   805a368 <__afl_maybe_log>
 8055fe9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8055fed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8055ff1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8055ff5:	8b 3c 24             	mov    (%esp),%edi
 8055ff8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8055ffc:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 8055fff:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
 8056004:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056008:	89 3c 24             	mov    %edi,(%esp)
 805600b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805600f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056013:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056017:	b9 fc b4 00 00       	mov    $0xb4fc,%ecx
 805601c:	e8 47 43 00 00       	call   805a368 <__afl_maybe_log>
 8056021:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056025:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056029:	8b 54 24 04          	mov    0x4(%esp),%edx
 805602d:	8b 3c 24             	mov    (%esp),%edi
 8056030:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056034:	83 c6 01             	add    $0x1,%esi
 8056037:	39 f3                	cmp    %esi,%ebx
 8056039:	0f 86 b0 f0 ff ff    	jbe    80550ef <quotearg_buffer_restyled+0xa5f>
 805603f:	90                   	nop
 8056040:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056044:	89 3c 24             	mov    %edi,(%esp)
 8056047:	89 54 24 04          	mov    %edx,0x4(%esp)
 805604b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805604f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056053:	b9 55 50 00 00       	mov    $0x5055,%ecx
 8056058:	e8 0b 43 00 00       	call   805a368 <__afl_maybe_log>
 805605d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056061:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056065:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056069:	8b 3c 24             	mov    (%esp),%edi
 805606c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      break;
                    STORE (c);
 8056070:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8056074:	73 39                	jae    80560af <quotearg_buffer_restyled+0x1a1f>
 8056076:	66 90                	xchg   %ax,%ax
 8056078:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805607c:	89 3c 24             	mov    %edi,(%esp)
 805607f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056083:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056087:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805608b:	b9 b5 ae 00 00       	mov    $0xaeb5,%ecx
 8056090:	e8 d3 42 00 00       	call   805a368 <__afl_maybe_log>
 8056095:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056099:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805609d:	8b 54 24 04          	mov    0x4(%esp),%edx
 80560a1:	8b 3c 24             	mov    (%esp),%edi
 80560a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80560a8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80560ac:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 80560af:	90                   	nop
 80560b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80560b4:	89 3c 24             	mov    %edi,(%esp)
 80560b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80560bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80560bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80560c3:	b9 d9 93 00 00       	mov    $0x93d9,%ecx
 80560c8:	e8 9b 42 00 00       	call   805a368 <__afl_maybe_log>
 80560cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80560d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80560d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80560d9:	8b 3c 24             	mov    (%esp),%edi
 80560dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80560e0:	8b 44 24 24          	mov    0x24(%esp),%eax
                    c = arg[++i];
 80560e4:	8b 4c 24 14          	mov    0x14(%esp),%ecx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 80560e8:	83 c5 01             	add    $0x1,%ebp
 80560eb:	83 f8 01             	cmp    $0x1,%eax
                    c = arg[++i];
 80560ee:	0f b6 14 31          	movzbl (%ecx,%esi,1),%edx
 80560f2:	0f 84 68 1a 00 00    	je     8057b60 <quotearg_buffer_restyled+0x34d0>
 80560f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80560fc:	89 3c 24             	mov    %edi,(%esp)
 80560ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056103:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056107:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805610b:	b9 00 dd 00 00       	mov    $0xdd00,%ecx
 8056110:	e8 53 42 00 00       	call   805a368 <__afl_maybe_log>
 8056115:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056119:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805611d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056121:	8b 3c 24             	mov    (%esp),%edi
 8056124:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056128:	83 f8 02             	cmp    $0x2,%eax
 805612b:	0f 84 d2 01 00 00    	je     8056303 <quotearg_buffer_restyled+0x1c73>
 8056131:	8d 76 00             	lea    0x0(%esi),%esi
 8056134:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056138:	89 3c 24             	mov    %edi,(%esp)
 805613b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805613f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056143:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056147:	b9 25 aa 00 00       	mov    $0xaa25,%ecx
 805614c:	e8 17 42 00 00       	call   805a368 <__afl_maybe_log>
 8056151:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056155:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056159:	8b 54 24 04          	mov    0x4(%esp),%edx
 805615d:	8b 3c 24             	mov    (%esp),%edi
 8056160:	8d 64 24 10          	lea    0x10(%esp),%esp
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056164:	0f b6 4c 24 20       	movzbl 0x20(%esp),%ecx
 8056169:	38 4c 24 0f          	cmp    %cl,0xf(%esp)
 805616d:	0f 87 dd 1b 00 00    	ja     8057d50 <quotearg_buffer_restyled+0x36c0>
 8056173:	90                   	nop
 8056174:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056178:	89 3c 24             	mov    %edi,(%esp)
 805617b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805617f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056183:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056187:	b9 b0 72 00 00       	mov    $0x72b0,%ecx
 805618c:	e8 d7 41 00 00       	call   805a368 <__afl_maybe_log>
 8056191:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056195:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056199:	8b 54 24 04          	mov    0x4(%esp),%edx
 805619d:	8b 3c 24             	mov    (%esp),%edi
 80561a0:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 80561a4:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 80561a9:	0f 84 a5 00 00 00    	je     8056254 <quotearg_buffer_restyled+0x1bc4>
 80561af:	90                   	nop
 80561b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80561b4:	89 3c 24             	mov    %edi,(%esp)
 80561b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80561bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80561bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80561c3:	b9 30 16 00 00       	mov    $0x1630,%ecx
 80561c8:	e8 9b 41 00 00       	call   805a368 <__afl_maybe_log>
 80561cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80561d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80561d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80561d9:	8b 3c 24             	mov    (%esp),%edi
 80561dc:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 80561e0:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 80561e4:	0f 82 93 20 00 00    	jb     805827d <quotearg_buffer_restyled+0x3bed>
 80561ea:	66 90                	xchg   %ax,%ax
 80561ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80561f0:	89 3c 24             	mov    %edi,(%esp)
 80561f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80561f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80561fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80561ff:	b9 78 b4 00 00       	mov    $0xb478,%ecx
 8056204:	e8 5f 41 00 00       	call   805a368 <__afl_maybe_log>
 8056209:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805620d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056211:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056215:	8b 3c 24             	mov    (%esp),%edi
 8056218:	8d 64 24 10          	lea    0x10(%esp),%esp
 805621c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056220:	89 3c 24             	mov    %edi,(%esp)
 8056223:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056227:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805622b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805622f:	b9 b4 1c 00 00       	mov    $0x1cb4,%ecx
 8056234:	e8 2f 41 00 00       	call   805a368 <__afl_maybe_log>
 8056239:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805623d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056241:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056245:	8b 3c 24             	mov    (%esp),%edi
 8056248:	8d 64 24 10          	lea    0x10(%esp),%esp
 805624c:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805624f:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
 8056254:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056258:	89 3c 24             	mov    %edi,(%esp)
 805625b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805625f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056263:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056267:	b9 92 da 00 00       	mov    $0xda92,%ecx
 805626c:	e8 f7 40 00 00       	call   805a368 <__afl_maybe_log>
 8056271:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056275:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056279:	8b 54 24 04          	mov    0x4(%esp),%edx
 805627d:	8b 3c 24             	mov    (%esp),%edi
 8056280:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056284:	83 c6 01             	add    $0x1,%esi
                      break;
                    STORE (c);
 8056287:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805628b:	73 3a                	jae    80562c7 <quotearg_buffer_restyled+0x1c37>
 805628d:	8d 76 00             	lea    0x0(%esi),%esi
 8056290:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056294:	89 3c 24             	mov    %edi,(%esp)
 8056297:	89 54 24 04          	mov    %edx,0x4(%esp)
 805629b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805629f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80562a3:	b9 f0 28 00 00       	mov    $0x28f0,%ecx
 80562a8:	e8 bb 40 00 00       	call   805a368 <__afl_maybe_log>
 80562ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80562b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80562b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80562b9:	8b 3c 24             	mov    (%esp),%edi
 80562bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80562c0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80562c4:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 80562c7:	90                   	nop
                    c = arg[++i];
 80562c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80562cc:	89 3c 24             	mov    %edi,(%esp)
 80562cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80562d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80562d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80562db:	b9 e7 b8 00 00       	mov    $0xb8e7,%ecx
 80562e0:	e8 83 40 00 00       	call   805a368 <__afl_maybe_log>
 80562e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80562e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80562ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80562f1:	8b 3c 24             	mov    (%esp),%edi
 80562f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80562f8:	8b 4c 24 14          	mov    0x14(%esp),%ecx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 80562fc:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 80562ff:	0f b6 14 31          	movzbl (%ecx,%esi,1),%edx
 8056303:	90                   	nop
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056304:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056308:	89 3c 24             	mov    %edi,(%esp)
 805630b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805630f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056313:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056317:	b9 aa e5 00 00       	mov    $0xe5aa,%ecx
 805631c:	e8 47 40 00 00       	call   805a368 <__afl_maybe_log>
 8056321:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056325:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056329:	8b 54 24 04          	mov    0x4(%esp),%edx
 805632d:	8b 3c 24             	mov    (%esp),%edi
 8056330:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056334:	0f b6 44 24 20       	movzbl 0x20(%esp),%eax
 8056339:	38 44 24 0f          	cmp    %al,0xf(%esp)
 805633d:	0f 87 cd 1b 00 00    	ja     8057f10 <quotearg_buffer_restyled+0x3880>
 8056343:	90                   	nop
 8056344:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056348:	89 3c 24             	mov    %edi,(%esp)
 805634b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805634f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056353:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056357:	b9 a5 44 00 00       	mov    $0x44a5,%ecx
 805635c:	e8 07 40 00 00       	call   805a368 <__afl_maybe_log>
 8056361:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056365:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056369:	8b 54 24 04          	mov    0x4(%esp),%edx
 805636d:	8b 3c 24             	mov    (%esp),%edi
 8056370:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 8056374:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 8056379:	0f 84 a5 00 00 00    	je     8056424 <quotearg_buffer_restyled+0x1d94>
 805637f:	90                   	nop
 8056380:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056384:	89 3c 24             	mov    %edi,(%esp)
 8056387:	89 54 24 04          	mov    %edx,0x4(%esp)
 805638b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805638f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056393:	b9 aa 9e 00 00       	mov    $0x9eaa,%ecx
 8056398:	e8 cb 3f 00 00       	call   805a368 <__afl_maybe_log>
 805639d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80563a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80563a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80563a9:	8b 3c 24             	mov    (%esp),%edi
 80563ac:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 80563b0:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 80563b4:	0f 82 03 1f 00 00    	jb     80582bd <quotearg_buffer_restyled+0x3c2d>
 80563ba:	66 90                	xchg   %ax,%ax
 80563bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80563c0:	89 3c 24             	mov    %edi,(%esp)
 80563c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80563c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80563cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80563cf:	b9 25 c3 00 00       	mov    $0xc325,%ecx
 80563d4:	e8 8f 3f 00 00       	call   805a368 <__afl_maybe_log>
 80563d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80563dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80563e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80563e5:	8b 3c 24             	mov    (%esp),%edi
 80563e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80563ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80563f0:	89 3c 24             	mov    %edi,(%esp)
 80563f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80563f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80563fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80563ff:	b9 bb 5c 00 00       	mov    $0x5cbb,%ecx
 8056404:	e8 5f 3f 00 00       	call   805a368 <__afl_maybe_log>
 8056409:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805640d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056411:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056415:	8b 3c 24             	mov    (%esp),%edi
 8056418:	8d 64 24 10          	lea    0x10(%esp),%esp
 805641c:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 805641f:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
 8056424:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056428:	89 3c 24             	mov    %edi,(%esp)
 805642b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805642f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056433:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056437:	b9 38 7b 00 00       	mov    $0x7b38,%ecx
 805643c:	e8 27 3f 00 00       	call   805a368 <__afl_maybe_log>
 8056441:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056445:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056449:	8b 54 24 04          	mov    0x4(%esp),%edx
 805644d:	8b 3c 24             	mov    (%esp),%edi
 8056450:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056454:	83 c6 01             	add    $0x1,%esi
                      break;
                    STORE (c);
 8056457:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 805645b:	73 3a                	jae    8056497 <quotearg_buffer_restyled+0x1e07>
 805645d:	8d 76 00             	lea    0x0(%esi),%esi
 8056460:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056464:	89 3c 24             	mov    %edi,(%esp)
 8056467:	89 54 24 04          	mov    %edx,0x4(%esp)
 805646b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805646f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056473:	b9 4e fe 00 00       	mov    $0xfe4e,%ecx
 8056478:	e8 eb 3e 00 00       	call   805a368 <__afl_maybe_log>
 805647d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056481:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056485:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056489:	8b 3c 24             	mov    (%esp),%edi
 805648c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056490:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8056494:	88 14 28             	mov    %dl,(%eax,%ebp,1)
 8056497:	90                   	nop
                    c = arg[++i];
 8056498:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805649c:	89 3c 24             	mov    %edi,(%esp)
 805649f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80564a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80564a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80564ab:	b9 0b 28 00 00       	mov    $0x280b,%ecx
 80564b0:	e8 b3 3e 00 00       	call   805a368 <__afl_maybe_log>
 80564b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80564b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80564bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80564c1:	8b 3c 24             	mov    (%esp),%edi
 80564c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80564c8:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 80564cc:	89 5c 24 30          	mov    %ebx,0x30(%esp)
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 80564d0:	83 c5 01             	add    $0x1,%ebp
 80564d3:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 80564d7:	89 7c 24 70          	mov    %edi,0x70(%esp)
 80564db:	8b 44 24 10          	mov    0x10(%esp),%eax
                    c = arg[++i];
 80564df:	0f b6 14 31          	movzbl (%ecx,%esi,1),%edx
 80564e3:	89 cf                	mov    %ecx,%edi
 80564e5:	89 5c 24 24          	mov    %ebx,0x24(%esp)
 80564e9:	e9 72 08 00 00       	jmp    8056d60 <quotearg_buffer_restyled+0x26d0>
 80564ee:	66 90                	xchg   %ax,%ax

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 80564f0:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 80564f5:	0f 85 da 1b 00 00    	jne    80580d5 <quotearg_buffer_restyled+0x3a45>
 80564fb:	90                   	nop
 80564fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056500:	89 3c 24             	mov    %edi,(%esp)
 8056503:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056507:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805650b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805650f:	b9 bb 9a 00 00       	mov    $0x9abb,%ecx
 8056514:	e8 4f 3e 00 00       	call   805a368 <__afl_maybe_log>
 8056519:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805651d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056521:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056525:	8b 3c 24             	mov    (%esp),%edi
 8056528:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805652c:	39 c5                	cmp    %eax,%ebp
 805652e:	73 38                	jae    8056568 <quotearg_buffer_restyled+0x1ed8>
 8056530:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056534:	89 3c 24             	mov    %edi,(%esp)
 8056537:	89 54 24 04          	mov    %edx,0x4(%esp)
 805653b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805653f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056543:	b9 cf e6 00 00       	mov    $0xe6cf,%ecx
 8056548:	e8 1b 3e 00 00       	call   805a368 <__afl_maybe_log>
 805654d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056551:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056555:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056559:	8b 3c 24             	mov    (%esp),%edi
 805655c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056560:	8b 4c 24 24          	mov    0x24(%esp),%ecx
 8056564:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 8056568:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805656c:	89 3c 24             	mov    %edi,(%esp)
 805656f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056573:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056577:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805657b:	b9 c5 9b 00 00       	mov    $0x9bc5,%ecx
 8056580:	e8 e3 3d 00 00       	call   805a368 <__afl_maybe_log>
 8056585:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056589:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805658d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056591:	8b 3c 24             	mov    (%esp),%edi
 8056594:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056598:	8d 5d 01             	lea    0x1(%ebp),%ebx
                        STORE ('0' + (c >> 6));
 805659b:	39 d8                	cmp    %ebx,%eax
 805659d:	76 41                	jbe    80565e0 <quotearg_buffer_restyled+0x1f50>
 805659f:	90                   	nop
 80565a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80565a4:	89 3c 24             	mov    %edi,(%esp)
 80565a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80565ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80565af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80565b3:	b9 f2 53 00 00       	mov    $0x53f2,%ecx
 80565b8:	e8 ab 3d 00 00       	call   805a368 <__afl_maybe_log>
 80565bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80565c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80565c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80565c9:	8b 3c 24             	mov    (%esp),%edi
 80565cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80565d0:	89 d1                	mov    %edx,%ecx
 80565d2:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 80565d6:	c0 e9 06             	shr    $0x6,%cl
 80565d9:	83 c1 30             	add    $0x30,%ecx
 80565dc:	88 4c 2b 01          	mov    %cl,0x1(%ebx,%ebp,1)
 80565e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80565e4:	89 3c 24             	mov    %edi,(%esp)
 80565e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80565eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80565ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80565f3:	b9 da c5 00 00       	mov    $0xc5da,%ecx
 80565f8:	e8 6b 3d 00 00       	call   805a368 <__afl_maybe_log>
 80565fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056601:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056605:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056609:	8b 3c 24             	mov    (%esp),%edi
 805660c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056610:	8d 4d 02             	lea    0x2(%ebp),%ecx
                        STORE ('0' + ((c >> 3) & 7));
 8056613:	39 c8                	cmp    %ecx,%eax
 8056615:	76 44                	jbe    805665b <quotearg_buffer_restyled+0x1fcb>
 8056617:	90                   	nop
 8056618:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805661c:	89 3c 24             	mov    %edi,(%esp)
 805661f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056623:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056627:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805662b:	b9 e5 c6 00 00       	mov    $0xc6e5,%ecx
 8056630:	e8 33 3d 00 00       	call   805a368 <__afl_maybe_log>
 8056635:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056639:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805663d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056641:	8b 3c 24             	mov    (%esp),%edi
 8056644:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056648:	89 d1                	mov    %edx,%ecx
 805664a:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 805664e:	c0 e9 03             	shr    $0x3,%cl
 8056651:	83 e1 07             	and    $0x7,%ecx
 8056654:	83 c1 30             	add    $0x30,%ecx
 8056657:	88 4c 2b 02          	mov    %cl,0x2(%ebx,%ebp,1)
 805665b:	90                   	nop
                        c = '0' + (c & 7);
 805665c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056660:	89 3c 24             	mov    %edi,(%esp)
 8056663:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056667:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805666b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805666f:	b9 87 95 00 00       	mov    $0x9587,%ecx
 8056674:	e8 ef 3c 00 00       	call   805a368 <__afl_maybe_log>
 8056679:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805667d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056681:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056685:	8b 3c 24             	mov    (%esp),%edi
 8056688:	8d 64 24 10          	lea    0x10(%esp),%esp
 805668c:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805668f:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 8056692:	83 c2 30             	add    $0x30,%edx
 8056695:	8d 76 00             	lea    0x0(%esi),%esi
                    else if (is_right_quote)
                      {
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
 8056698:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805669c:	89 3c 24             	mov    %edi,(%esp)
 805669f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80566a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80566a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80566ab:	b9 55 98 00 00       	mov    $0x9855,%ecx
 80566b0:	e8 b3 3c 00 00       	call   805a368 <__afl_maybe_log>
 80566b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80566b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80566bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80566c1:	8b 3c 24             	mov    (%esp),%edi
 80566c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80566c8:	8d 4e 01             	lea    0x1(%esi),%ecx
 80566cb:	39 4c 24 30          	cmp    %ecx,0x30(%esp)
 80566cf:	89 ce                	mov    %ecx,%esi
 80566d1:	0f 86 2c 1b 00 00    	jbe    8058203 <quotearg_buffer_restyled+0x3b73>
 80566d7:	90                   	nop
 80566d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80566dc:	89 3c 24             	mov    %edi,(%esp)
 80566df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80566e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80566e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80566eb:	b9 c9 a0 00 00       	mov    $0xa0c9,%ecx
 80566f0:	e8 73 3c 00 00       	call   805a368 <__afl_maybe_log>
 80566f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80566f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80566fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056701:	8b 3c 24             	mov    (%esp),%edi
 8056704:	8d 64 24 10          	lea    0x10(%esp),%esp
                      break;
                    STORE (c);
 8056708:	39 c5                	cmp    %eax,%ebp
 805670a:	73 37                	jae    8056743 <quotearg_buffer_restyled+0x20b3>
 805670c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056710:	89 3c 24             	mov    %edi,(%esp)
 8056713:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056717:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805671b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805671f:	b9 e2 78 00 00       	mov    $0x78e2,%ecx
 8056724:	e8 3f 3c 00 00       	call   805a368 <__afl_maybe_log>
 8056729:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805672d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056731:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056735:	8b 3c 24             	mov    (%esp),%edi
 8056738:	8d 64 24 10          	lea    0x10(%esp),%esp
 805673c:	8b 74 24 24          	mov    0x24(%esp),%esi
 8056740:	88 14 2e             	mov    %dl,(%esi,%ebp,1)
 8056743:	90                   	nop
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056744:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056748:	89 3c 24             	mov    %edi,(%esp)
 805674b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805674f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056753:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056757:	b9 5a 93 00 00       	mov    $0x935a,%ecx
 805675c:	e8 07 3c 00 00       	call   805a368 <__afl_maybe_log>
 8056761:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056765:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056769:	8b 54 24 04          	mov    0x4(%esp),%edx
 805676d:	8b 3c 24             	mov    (%esp),%edi
 8056770:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056774:	0f b6 5c 24 20       	movzbl 0x20(%esp),%ebx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 8056779:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 805677c:	0f b6 14 0f          	movzbl (%edi,%ecx,1),%edx
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056780:	38 5c 24 0f          	cmp    %bl,0xf(%esp)
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
                    c = arg[++i];
 8056784:	88 54 24 2c          	mov    %dl,0x2c(%esp)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056788:	0f 86 1a 0b 00 00    	jbe    80572a8 <quotearg_buffer_restyled+0x2c18>
 805678e:	66 90                	xchg   %ax,%ax
 8056790:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056794:	89 3c 24             	mov    %edi,(%esp)
 8056797:	89 54 24 04          	mov    %edx,0x4(%esp)
 805679b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805679f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80567a3:	b9 26 f7 00 00       	mov    $0xf726,%ecx
 80567a8:	e8 bb 3b 00 00       	call   805a368 <__afl_maybe_log>
 80567ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80567b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80567b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80567b9:	8b 3c 24             	mov    (%esp),%edi
 80567bc:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        if (elide_outer_quotes)
 80567c0:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 80567c5:	0f 85 0a 19 00 00    	jne    80580d5 <quotearg_buffer_restyled+0x3a45>
 80567cb:	90                   	nop
 80567cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80567d0:	89 3c 24             	mov    %edi,(%esp)
 80567d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80567d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80567db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80567df:	b9 1a e3 00 00       	mov    $0xe31a,%ecx
 80567e4:	e8 7f 3b 00 00       	call   805a368 <__afl_maybe_log>
 80567e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80567ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80567f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80567f5:	8b 3c 24             	mov    (%esp),%edi
 80567f8:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 80567fc:	39 c5                	cmp    %eax,%ebp
 80567fe:	73 38                	jae    8056838 <quotearg_buffer_restyled+0x21a8>
 8056800:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056804:	89 3c 24             	mov    %edi,(%esp)
 8056807:	89 54 24 04          	mov    %edx,0x4(%esp)
 805680b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805680f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056813:	b9 83 03 00 00       	mov    $0x383,%ecx
 8056818:	e8 4b 3b 00 00       	call   805a368 <__afl_maybe_log>
 805681d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056821:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056825:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056829:	8b 3c 24             	mov    (%esp),%edi
 805682c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056830:	8b 54 24 24          	mov    0x24(%esp),%edx
 8056834:	c6 04 2a 5c          	movb   $0x5c,(%edx,%ebp,1)
 8056838:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805683c:	89 3c 24             	mov    %edi,(%esp)
 805683f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056843:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056847:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805684b:	b9 c6 0f 00 00       	mov    $0xfc6,%ecx
 8056850:	e8 13 3b 00 00       	call   805a368 <__afl_maybe_log>
 8056855:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056859:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805685d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056861:	8b 3c 24             	mov    (%esp),%edi
 8056864:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056868:	8d 5d 01             	lea    0x1(%ebp),%ebx
                        STORE ('0' + (c >> 6));
 805686b:	39 d8                	cmp    %ebx,%eax
 805686d:	76 48                	jbe    80568b7 <quotearg_buffer_restyled+0x2227>
 805686f:	90                   	nop
 8056870:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056874:	89 3c 24             	mov    %edi,(%esp)
 8056877:	89 54 24 04          	mov    %edx,0x4(%esp)
 805687b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805687f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056883:	b9 f2 0b 00 00       	mov    $0xbf2,%ecx
 8056888:	e8 db 3a 00 00       	call   805a368 <__afl_maybe_log>
 805688d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056891:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056895:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056899:	8b 3c 24             	mov    (%esp),%edi
 805689c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80568a0:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
 80568a5:	c0 ea 06             	shr    $0x6,%dl
 80568a8:	89 d6                	mov    %edx,%esi
 80568aa:	8b 54 24 24          	mov    0x24(%esp),%edx
 80568ae:	83 c6 30             	add    $0x30,%esi
 80568b1:	89 f3                	mov    %esi,%ebx
 80568b3:	88 5c 2a 01          	mov    %bl,0x1(%edx,%ebp,1)
 80568b7:	90                   	nop
 80568b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80568bc:	89 3c 24             	mov    %edi,(%esp)
 80568bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80568c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80568c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80568cb:	b9 43 93 00 00       	mov    $0x9343,%ecx
 80568d0:	e8 93 3a 00 00       	call   805a368 <__afl_maybe_log>
 80568d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80568d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80568dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80568e1:	8b 3c 24             	mov    (%esp),%edi
 80568e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80568e8:	8d 75 02             	lea    0x2(%ebp),%esi
                        STORE ('0' + ((c >> 3) & 7));
 80568eb:	39 f0                	cmp    %esi,%eax
 80568ed:	76 49                	jbe    8056938 <quotearg_buffer_restyled+0x22a8>
 80568ef:	90                   	nop
 80568f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80568f4:	89 3c 24             	mov    %edi,(%esp)
 80568f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80568fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80568ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056903:	b9 c0 e1 00 00       	mov    $0xe1c0,%ecx
 8056908:	e8 5b 3a 00 00       	call   805a368 <__afl_maybe_log>
 805690d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056911:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056915:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056919:	8b 3c 24             	mov    (%esp),%edi
 805691c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056920:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 8056925:	8b 74 24 24          	mov    0x24(%esp),%esi
 8056929:	c0 eb 03             	shr    $0x3,%bl
 805692c:	89 da                	mov    %ebx,%edx
 805692e:	83 e2 07             	and    $0x7,%edx
 8056931:	83 c2 30             	add    $0x30,%edx
 8056934:	88 54 2e 02          	mov    %dl,0x2(%esi,%ebp,1)
                        c = '0' + (c & 7);
 8056938:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805693c:	89 3c 24             	mov    %edi,(%esp)
 805693f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056943:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056947:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805694b:	b9 09 de 00 00       	mov    $0xde09,%ecx
 8056950:	e8 13 3a 00 00       	call   805a368 <__afl_maybe_log>
 8056955:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056959:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805695d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056961:	8b 3c 24             	mov    (%esp),%edi
 8056964:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056968:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805696d:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 8056970:	83 e2 07             	and    $0x7,%edx
 8056973:	8d 5a 30             	lea    0x30(%edx),%ebx
 8056976:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
 805697a:	66 90                	xchg   %ax,%ax
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 805697c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056980:	89 3c 24             	mov    %edi,(%esp)
 8056983:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056987:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805698b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805698f:	b9 fd cc 00 00       	mov    $0xccfd,%ecx
 8056994:	e8 cf 39 00 00       	call   805a368 <__afl_maybe_log>
 8056999:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805699d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80569a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80569a5:	8b 3c 24             	mov    (%esp),%edi
 80569a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80569ac:	39 c5                	cmp    %eax,%ebp
 80569ae:	73 3c                	jae    80569ec <quotearg_buffer_restyled+0x235c>
 80569b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80569b4:	89 3c 24             	mov    %edi,(%esp)
 80569b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80569bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80569bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80569c3:	b9 52 12 00 00       	mov    $0x1252,%ecx
 80569c8:	e8 9b 39 00 00       	call   805a368 <__afl_maybe_log>
 80569cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80569d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80569d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80569d9:	8b 3c 24             	mov    (%esp),%edi
 80569dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80569e0:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
 80569e5:	8b 74 24 24          	mov    0x24(%esp),%esi
 80569e9:	88 14 2e             	mov    %dl,(%esi,%ebp,1)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 80569ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80569f0:	89 3c 24             	mov    %edi,(%esp)
 80569f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80569f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80569fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80569ff:	b9 8e 56 00 00       	mov    $0x568e,%ecx
 8056a04:	e8 5f 39 00 00       	call   805a368 <__afl_maybe_log>
 8056a09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056a0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056a11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056a15:	8b 3c 24             	mov    (%esp),%edi
 8056a18:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056a1c:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 8056a21:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 8056a24:	0f b6 5c 0f 01       	movzbl 0x1(%edi,%ecx,1),%ebx
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056a29:	38 54 24 0f          	cmp    %dl,0xf(%esp)
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
                    c = arg[++i];
 8056a2d:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056a31:	0f 87 29 09 00 00    	ja     8057360 <quotearg_buffer_restyled+0x2cd0>
 8056a37:	90                   	nop
 8056a38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056a3c:	89 3c 24             	mov    %edi,(%esp)
 8056a3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056a43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056a47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056a4b:	b9 06 f0 00 00       	mov    $0xf006,%ecx
 8056a50:	e8 13 39 00 00       	call   805a368 <__afl_maybe_log>
 8056a55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056a59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056a5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056a61:	8b 3c 24             	mov    (%esp),%edi
 8056a64:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 8056a68:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 8056a6d:	0f 84 a5 00 00 00    	je     8056b18 <quotearg_buffer_restyled+0x2488>
 8056a73:	90                   	nop
 8056a74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056a78:	89 3c 24             	mov    %edi,(%esp)
 8056a7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056a7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056a83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056a87:	b9 11 82 00 00       	mov    $0x8211,%ecx
 8056a8c:	e8 d7 38 00 00       	call   805a368 <__afl_maybe_log>
 8056a91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056a95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056a99:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056a9d:	8b 3c 24             	mov    (%esp),%edi
 8056aa0:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 8056aa4:	39 c5                	cmp    %eax,%ebp
 8056aa6:	73 38                	jae    8056ae0 <quotearg_buffer_restyled+0x2450>
 8056aa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056aac:	89 3c 24             	mov    %edi,(%esp)
 8056aaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056ab3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056ab7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056abb:	b9 18 bf 00 00       	mov    $0xbf18,%ecx
 8056ac0:	e8 a3 38 00 00       	call   805a368 <__afl_maybe_log>
 8056ac5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056ac9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056acd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056ad1:	8b 3c 24             	mov    (%esp),%edi
 8056ad4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056ad8:	8b 74 24 24          	mov    0x24(%esp),%esi
 8056adc:	c6 04 2e 5c          	movb   $0x5c,(%esi,%ebp,1)
 8056ae0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056ae4:	89 3c 24             	mov    %edi,(%esp)
 8056ae7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056aeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056aef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056af3:	b9 3b 2b 00 00       	mov    $0x2b3b,%ecx
 8056af8:	e8 6b 38 00 00       	call   805a368 <__afl_maybe_log>
 8056afd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056b01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056b05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056b09:	8b 3c 24             	mov    (%esp),%edi
 8056b0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056b10:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 8056b13:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 8056b18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056b1c:	89 3c 24             	mov    %edi,(%esp)
 8056b1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056b23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056b27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056b2b:	b9 d5 62 00 00       	mov    $0x62d5,%ecx
 8056b30:	e8 33 38 00 00       	call   805a368 <__afl_maybe_log>
 8056b35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056b39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056b3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056b41:	8b 3c 24             	mov    (%esp),%edi
 8056b44:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056b48:	39 c5                	cmp    %eax,%ebp
 8056b4a:	73 3c                	jae    8056b88 <quotearg_buffer_restyled+0x24f8>
 8056b4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056b50:	89 3c 24             	mov    %edi,(%esp)
 8056b53:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056b57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056b5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056b5f:	b9 a8 57 00 00       	mov    $0x57a8,%ecx
 8056b64:	e8 ff 37 00 00       	call   805a368 <__afl_maybe_log>
 8056b69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056b6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056b71:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056b75:	8b 3c 24             	mov    (%esp),%edi
 8056b78:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056b7c:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
 8056b81:	8b 74 24 24          	mov    0x24(%esp),%esi
 8056b85:	88 14 2e             	mov    %dl,(%esi,%ebp,1)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056b88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056b8c:	89 3c 24             	mov    %edi,(%esp)
 8056b8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056b93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056b97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056b9b:	b9 1d 0a 00 00       	mov    $0xa1d,%ecx
 8056ba0:	e8 c3 37 00 00       	call   805a368 <__afl_maybe_log>
 8056ba5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056ba9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056bad:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056bb1:	8b 3c 24             	mov    (%esp),%edi
 8056bb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056bb8:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 8056bbd:	83 c5 01             	add    $0x1,%ebp
                    c = arg[++i];
 8056bc0:	0f b6 5c 0f 02       	movzbl 0x2(%edi,%ecx,1),%ebx
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056bc5:	38 54 24 0f          	cmp    %dl,0xf(%esp)
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
                    c = arg[++i];
 8056bc9:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056bcd:	0f 87 4d 09 00 00    	ja     8057520 <quotearg_buffer_restyled+0x2e90>
 8056bd3:	90                   	nop
 8056bd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056bd8:	89 3c 24             	mov    %edi,(%esp)
 8056bdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056bdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056be3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056be7:	b9 43 81 00 00       	mov    $0x8143,%ecx
 8056bec:	e8 77 37 00 00       	call   805a368 <__afl_maybe_log>
 8056bf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056bf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056bf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056bfd:	8b 3c 24             	mov    (%esp),%edi
 8056c00:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 8056c04:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 8056c09:	0f 84 a5 00 00 00    	je     8056cb4 <quotearg_buffer_restyled+0x2624>
 8056c0f:	90                   	nop
 8056c10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056c14:	89 3c 24             	mov    %edi,(%esp)
 8056c17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056c1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056c1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056c23:	b9 21 07 00 00       	mov    $0x721,%ecx
 8056c28:	e8 3b 37 00 00       	call   805a368 <__afl_maybe_log>
 8056c2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056c31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056c35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056c39:	8b 3c 24             	mov    (%esp),%edi
 8056c3c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 8056c40:	39 c5                	cmp    %eax,%ebp
 8056c42:	73 38                	jae    8056c7c <quotearg_buffer_restyled+0x25ec>
 8056c44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056c48:	89 3c 24             	mov    %edi,(%esp)
 8056c4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056c4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056c53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056c57:	b9 64 c4 00 00       	mov    $0xc464,%ecx
 8056c5c:	e8 07 37 00 00       	call   805a368 <__afl_maybe_log>
 8056c61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056c65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056c69:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056c6d:	8b 3c 24             	mov    (%esp),%edi
 8056c70:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056c74:	8b 74 24 24          	mov    0x24(%esp),%esi
 8056c78:	c6 04 2e 5c          	movb   $0x5c,(%esi,%ebp,1)
 8056c7c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056c80:	89 3c 24             	mov    %edi,(%esp)
 8056c83:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056c87:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056c8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056c8f:	b9 f6 7f 00 00       	mov    $0x7ff6,%ecx
 8056c94:	e8 cf 36 00 00       	call   805a368 <__afl_maybe_log>
 8056c99:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056c9d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056ca1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056ca5:	8b 3c 24             	mov    (%esp),%edi
 8056ca8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056cac:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 8056caf:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 8056cb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056cb8:	89 3c 24             	mov    %edi,(%esp)
 8056cbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056cbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056cc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056cc7:	b9 6e c9 00 00       	mov    $0xc96e,%ecx
 8056ccc:	e8 97 36 00 00       	call   805a368 <__afl_maybe_log>
 8056cd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056cd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056cd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056cdd:	8b 3c 24             	mov    (%esp),%edi
 8056ce0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056ce4:	39 c5                	cmp    %eax,%ebp
                    else if (is_right_quote)
                      {
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
 8056ce6:	8d 71 03             	lea    0x3(%ecx),%esi
                      break;
                    STORE (c);
 8056ce9:	73 3d                	jae    8056d28 <quotearg_buffer_restyled+0x2698>
 8056ceb:	90                   	nop
 8056cec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056cf0:	89 3c 24             	mov    %edi,(%esp)
 8056cf3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056cf7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056cfb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056cff:	b9 d7 db 00 00       	mov    $0xdbd7,%ecx
 8056d04:	e8 5f 36 00 00       	call   805a368 <__afl_maybe_log>
 8056d09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056d0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056d11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056d15:	8b 3c 24             	mov    (%esp),%edi
 8056d18:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056d1c:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 8056d21:	8b 54 24 24          	mov    0x24(%esp),%edx
 8056d25:	88 1c 2a             	mov    %bl,(%edx,%ebp,1)
                    c = arg[++i];
 8056d28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056d2c:	89 3c 24             	mov    %edi,(%esp)
 8056d2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056d33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056d37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056d3b:	b9 e2 01 00 00       	mov    $0x1e2,%ecx
 8056d40:	e8 23 36 00 00       	call   805a368 <__afl_maybe_log>
 8056d45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056d49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056d4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056d51:	8b 3c 24             	mov    (%esp),%edi
 8056d54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056d58:	0f b6 54 0f 03       	movzbl 0x3(%edi,%ecx,1),%edx
                        STORE ('\\');
                        is_right_quote = false;
                      }
                    if (ilim <= i + 1)
                      break;
                    STORE (c);
 8056d5d:	83 c5 01             	add    $0x1,%ebp
                   unprintable unibyte character.  */
                size_t ilim = i + m;

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
 8056d60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056d64:	89 3c 24             	mov    %edi,(%esp)
 8056d67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056d6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056d6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056d73:	b9 4e 2a 00 00       	mov    $0x2a4e,%ecx
 8056d78:	e8 eb 35 00 00       	call   805a368 <__afl_maybe_log>
 8056d7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056d81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056d85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056d89:	8b 3c 24             	mov    (%esp),%edi
 8056d8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056d90:	0f b6 4c 24 20       	movzbl 0x20(%esp),%ecx
 8056d95:	38 4c 24 0f          	cmp    %cl,0xf(%esp)
 8056d99:	0f 87 51 f7 ff ff    	ja     80564f0 <quotearg_buffer_restyled+0x1e60>
 8056d9f:	90                   	nop
 8056da0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056da4:	89 3c 24             	mov    %edi,(%esp)
 8056da7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056dab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056daf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056db3:	b9 03 96 00 00       	mov    $0x9603,%ecx
 8056db8:	e8 ab 35 00 00       	call   805a368 <__afl_maybe_log>
 8056dbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056dc1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056dc5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056dc9:	8b 3c 24             	mov    (%esp),%edi
 8056dcc:	8d 64 24 10          	lea    0x10(%esp),%esp
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 8056dd0:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 8056dd5:	0f 84 ba f8 ff ff    	je     8056695 <quotearg_buffer_restyled+0x2005>
 8056ddb:	90                   	nop
 8056ddc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056de0:	89 3c 24             	mov    %edi,(%esp)
 8056de3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056de7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056deb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056def:	b9 54 47 00 00       	mov    $0x4754,%ecx
 8056df4:	e8 6f 35 00 00       	call   805a368 <__afl_maybe_log>
 8056df9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056dfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056e01:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056e05:	8b 3c 24             	mov    (%esp),%edi
 8056e08:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 8056e0c:	39 c5                	cmp    %eax,%ebp
 8056e0e:	73 38                	jae    8056e48 <quotearg_buffer_restyled+0x27b8>
 8056e10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056e14:	89 3c 24             	mov    %edi,(%esp)
 8056e17:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056e1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056e1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056e23:	b9 24 ab 00 00       	mov    $0xab24,%ecx
 8056e28:	e8 3b 35 00 00       	call   805a368 <__afl_maybe_log>
 8056e2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056e31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056e35:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056e39:	8b 3c 24             	mov    (%esp),%edi
 8056e3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056e40:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 8056e44:	c6 04 2b 5c          	movb   $0x5c,(%ebx,%ebp,1)
 8056e48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056e4c:	89 3c 24             	mov    %edi,(%esp)
 8056e4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056e53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056e57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056e5b:	b9 08 13 00 00       	mov    $0x1308,%ecx
 8056e60:	e8 03 35 00 00       	call   805a368 <__afl_maybe_log>
 8056e65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056e69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056e6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056e71:	8b 3c 24             	mov    (%esp),%edi
 8056e74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056e78:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 8056e7b:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 8056e80:	e9 10 f8 ff ff       	jmp    8056695 <quotearg_buffer_restyled+0x2005>
 8056e85:	8d 76 00             	lea    0x0(%esi),%esi

    case locale_quoting_style:
    case clocale_quoting_style:
    case custom_quoting_style:
      {
        if (quoting_style != custom_quoting_style)
 8056e88:	74 5c                	je     8056ee6 <quotearg_buffer_restyled+0x2856>
 8056e8a:	66 90                	xchg   %ax,%ax
 8056e8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056e90:	89 3c 24             	mov    %edi,(%esp)
 8056e93:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056e97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056e9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056e9f:	b9 de 75 00 00       	mov    $0x75de,%ecx
 8056ea4:	e8 bf 34 00 00       	call   805a368 <__afl_maybe_log>
 8056ea9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056ead:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056eb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056eb5:	8b 3c 24             	mov    (%esp),%edi
 8056eb8:	8d 64 24 10          	lea    0x10(%esp),%esp
               for your locale.

               If you don't know what to put here, please see
               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
 8056ebc:	8b 54 24 74          	mov    0x74(%esp),%edx
 8056ec0:	b8 67 38 06 08       	mov    $0x8063867,%eax
 8056ec5:	e8 96 d3 ff ff       	call   8054260 <gettext_quote>
            right_quote = gettext_quote (N_("'"), quoting_style);
 8056eca:	8b 54 24 74          	mov    0x74(%esp),%edx
               for your locale.

               If you don't know what to put here, please see
               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
 8056ece:	89 84 24 80 00 00 00 	mov    %eax,0x80(%esp)
            right_quote = gettext_quote (N_("'"), quoting_style);
 8056ed5:	b8 53 38 06 08       	mov    $0x8063853,%eax
 8056eda:	e8 81 d3 ff ff       	call   8054260 <gettext_quote>
 8056edf:	89 84 24 84 00 00 00 	mov    %eax,0x84(%esp)
 8056ee6:	66 90                	xchg   %ax,%ax
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 8056ee8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056eec:	89 3c 24             	mov    %edi,(%esp)
 8056eef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056ef3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056ef7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056efb:	b9 87 b0 00 00       	mov    $0xb087,%ecx
 8056f00:	e8 63 34 00 00       	call   805a368 <__afl_maybe_log>
 8056f05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056f09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056f0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056f11:	8b 3c 24             	mov    (%esp),%edi
 8056f14:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056f18:	31 ed                	xor    %ebp,%ebp
               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
            right_quote = gettext_quote (N_("'"), quoting_style);
          }
        if (!elide_outer_quotes)
 8056f1a:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8056f1f:	0f 85 2f 01 00 00    	jne    8057054 <quotearg_buffer_restyled+0x29c4>
 8056f25:	8d 76 00             	lea    0x0(%esi),%esi
 8056f28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056f2c:	89 3c 24             	mov    %edi,(%esp)
 8056f2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056f33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056f37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056f3b:	b9 df 02 00 00       	mov    $0x2df,%ecx
 8056f40:	e8 23 34 00 00       	call   805a368 <__afl_maybe_log>
 8056f45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056f49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056f4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056f51:	8b 3c 24             	mov    (%esp),%edi
 8056f54:	8d 64 24 10          	lea    0x10(%esp),%esp
          for (quote_string = left_quote; *quote_string; quote_string++)
 8056f58:	8b 84 24 80 00 00 00 	mov    0x80(%esp),%eax
 8056f5f:	0f b6 00             	movzbl (%eax),%eax
 8056f62:	84 c0                	test   %al,%al
 8056f64:	0f 84 ea 00 00 00    	je     8057054 <quotearg_buffer_restyled+0x29c4>
 8056f6a:	66 90                	xchg   %ax,%ax
 8056f6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056f70:	89 3c 24             	mov    %edi,(%esp)
 8056f73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056f77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056f7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056f7f:	b9 11 3d 00 00       	mov    $0x3d11,%ecx
 8056f84:	e8 df 33 00 00       	call   805a368 <__afl_maybe_log>
 8056f89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056f8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056f91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056f95:	8b 3c 24             	mov    (%esp),%edi
 8056f98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056f9c:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 8056fa0:	8b 54 24 10          	mov    0x10(%esp),%edx
 8056fa4:	8b 8c 24 80 00 00 00 	mov    0x80(%esp),%ecx
 8056fab:	90                   	nop
 8056fac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
            STORE (*quote_string);
 8056fb0:	39 ea                	cmp    %ebp,%edx
 8056fb2:	76 33                	jbe    8056fe7 <quotearg_buffer_restyled+0x2957>
 8056fb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056fb8:	89 3c 24             	mov    %edi,(%esp)
 8056fbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056fbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056fc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056fc7:	b9 47 ca 00 00       	mov    $0xca47,%ecx
 8056fcc:	e8 97 33 00 00       	call   805a368 <__afl_maybe_log>
 8056fd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8056fd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8056fd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8056fdd:	8b 3c 24             	mov    (%esp),%edi
 8056fe0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8056fe4:	88 04 2b             	mov    %al,(%ebx,%ebp,1)
 8056fe7:	90                   	nop
 8056fe8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8056fec:	89 3c 24             	mov    %edi,(%esp)
 8056fef:	89 54 24 04          	mov    %edx,0x4(%esp)
 8056ff3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8056ff7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8056ffb:	b9 39 ad 00 00       	mov    $0xad39,%ecx
 8057000:	e8 63 33 00 00       	call   805a368 <__afl_maybe_log>
 8057005:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057009:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805700d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057011:	8b 3c 24             	mov    (%esp),%edi
 8057014:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057018:	83 c5 01             	add    $0x1,%ebp
               and use glyphs suitable for your language.  */
            left_quote = gettext_quote (N_("`"), quoting_style);
            right_quote = gettext_quote (N_("'"), quoting_style);
          }
        if (!elide_outer_quotes)
          for (quote_string = left_quote; *quote_string; quote_string++)
 805701b:	0f b6 04 29          	movzbl (%ecx,%ebp,1),%eax
 805701f:	84 c0                	test   %al,%al
 8057021:	75 8d                	jne    8056fb0 <quotearg_buffer_restyled+0x2920>
 8057023:	90                   	nop
 8057024:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057028:	89 3c 24             	mov    %edi,(%esp)
 805702b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805702f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057033:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057037:	b9 4b 87 00 00       	mov    $0x874b,%ecx
 805703c:	e8 27 33 00 00       	call   805a368 <__afl_maybe_log>
 8057041:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057045:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057049:	8b 54 24 04          	mov    0x4(%esp),%edx
 805704d:	8b 3c 24             	mov    (%esp),%edi
 8057050:	8d 64 24 10          	lea    0x10(%esp),%esp
            STORE (*quote_string);
        backslash_escapes = true;
        quote_string = right_quote;
        quote_string_len = strlen (quote_string);
 8057054:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057058:	89 3c 24             	mov    %edi,(%esp)
 805705b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805705f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057063:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057067:	b9 3d a8 00 00       	mov    $0xa83d,%ecx
 805706c:	e8 f7 32 00 00       	call   805a368 <__afl_maybe_log>
 8057071:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057075:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057079:	8b 54 24 04          	mov    0x4(%esp),%edx
 805707d:	8b 3c 24             	mov    (%esp),%edi
 8057080:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057084:	83 ec 0c             	sub    $0xc,%esp
 8057087:	ff b4 24 90 00 00 00 	pushl  0x90(%esp)
 805708e:	e8 cd 22 ff ff       	call   8049360 <strlen@plt>
 8057093:	83 c4 10             	add    $0x10,%esp
      }
      break;
 8057096:	8b b4 24 84 00 00 00 	mov    0x84(%esp),%esi
        if (!elide_outer_quotes)
          for (quote_string = left_quote; *quote_string; quote_string++)
            STORE (*quote_string);
        backslash_escapes = true;
        quote_string = right_quote;
        quote_string_len = strlen (quote_string);
 805709d:	89 44 24 18          	mov    %eax,0x18(%esp)
            right_quote = gettext_quote (N_("'"), quoting_style);
          }
        if (!elide_outer_quotes)
          for (quote_string = left_quote; *quote_string; quote_string++)
            STORE (*quote_string);
        backslash_escapes = true;
 80570a1:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
        quote_string = right_quote;
        quote_string_len = strlen (quote_string);
      }
      break;
 80570a6:	89 74 24 28          	mov    %esi,0x28(%esp)
 80570aa:	e9 a9 d6 ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
 80570af:	90                   	nop
      quote_string = "'";
      quote_string_len = 1;
      break;

    case literal_quoting_style:
      elide_outer_quotes = false;
 80570b0:	c6 44 24 39 00       	movb   $0x0,0x39(%esp)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 80570b5:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 80570ba:	31 ed                	xor    %ebp,%ebp
  char const *quote_string = 0;
  size_t quote_string_len = 0;
 80570bc:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 80570c3:	00 
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
 80570c4:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
 80570cb:	00 
 80570cc:	e9 87 d6 ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
 80570d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 80570d8:	c6 44 24 39 01       	movb   $0x1,0x39(%esp)
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 80570dd:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 80570e2:	31 ed                	xor    %ebp,%ebp
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 80570e4:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 80570eb:	00 
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
 80570ec:	c7 44 24 28 53 38 06 	movl   $0x8063853,0x28(%esp)
 80570f3:	08 
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 80570f4:	c7 44 24 74 02 00 00 	movl   $0x2,0x74(%esp)
 80570fb:	00 
 80570fc:	e9 57 d6 ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
 8057101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    case shell_quoting_style:
      quoting_style = shell_always_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
 8057108:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805710d:	0f 85 45 1b 00 00    	jne    8058c58 <quotearg_buffer_restyled+0x45c8>
 8057113:	90                   	nop
 8057114:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057118:	89 3c 24             	mov    %edi,(%esp)
 805711b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805711f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057123:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057127:	b9 60 37 00 00       	mov    $0x3760,%ecx
 805712c:	e8 37 32 00 00       	call   805a368 <__afl_maybe_log>
 8057131:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057135:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057139:	8b 54 24 04          	mov    0x4(%esp),%edx
 805713d:	8b 3c 24             	mov    (%esp),%edi
 8057140:	8d 64 24 10          	lea    0x10(%esp),%esp
        STORE ('\'');
 8057144:	8b 74 24 10          	mov    0x10(%esp),%esi
 8057148:	85 f6                	test   %esi,%esi
 805714a:	0f 84 13 10 00 00    	je     8058163 <quotearg_buffer_restyled+0x3ad3>
 8057150:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057154:	89 3c 24             	mov    %edi,(%esp)
 8057157:	89 54 24 04          	mov    %edx,0x4(%esp)
 805715b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805715f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057163:	b9 4f e7 00 00       	mov    $0xe74f,%ecx
 8057168:	e8 fb 31 00 00       	call   805a368 <__afl_maybe_log>
 805716d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057171:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057175:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057179:	8b 3c 24             	mov    (%esp),%edi
 805717c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057180:	8b 6c 24 1c          	mov    0x1c(%esp),%ebp
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 8057184:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 8057189:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8057190:	00 
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
 8057191:	c7 44 24 28 53 38 06 	movl   $0x8063853,0x28(%esp)
 8057198:	08 
      quoting_style = shell_always_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
 8057199:	c6 45 00 27          	movb   $0x27,0x0(%ebp)
 805719d:	bd 01 00 00 00       	mov    $0x1,%ebp
 80571a2:	e9 b1 d5 ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
 80571a7:	89 f6                	mov    %esi,%esi
 80571a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
    case c_maybe_quoting_style:
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
 80571b0:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 80571b5:	0f 85 4f 1a 00 00    	jne    8058c0a <quotearg_buffer_restyled+0x457a>
 80571bb:	90                   	nop
 80571bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80571c0:	89 3c 24             	mov    %edi,(%esp)
 80571c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80571c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80571cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80571cf:	b9 64 ff 00 00       	mov    $0xff64,%ecx
 80571d4:	e8 8f 31 00 00       	call   805a368 <__afl_maybe_log>
 80571d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80571dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80571e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80571e5:	8b 3c 24             	mov    (%esp),%edi
 80571e8:	8d 64 24 10          	lea    0x10(%esp),%esp
        STORE ('"');
 80571ec:	8b 4c 24 10          	mov    0x10(%esp),%ecx
 80571f0:	85 c9                	test   %ecx,%ecx
 80571f2:	0f 84 bb 0f 00 00    	je     80581b3 <quotearg_buffer_restyled+0x3b23>
 80571f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80571fc:	89 3c 24             	mov    %edi,(%esp)
 80571ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057203:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057207:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805720b:	b9 50 50 00 00       	mov    $0x5050,%ecx
 8057210:	e8 53 31 00 00       	call   805a368 <__afl_maybe_log>
 8057215:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057219:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805721d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057221:	8b 3c 24             	mov    (%esp),%edi
 8057224:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057228:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
      backslash_escapes = true;
 805722c:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
 8057231:	bd 01 00 00 00       	mov    $0x1,%ebp
      backslash_escapes = true;
      quote_string = "\"";
      quote_string_len = 1;
 8057236:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 805723d:	00 
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
 805723e:	c7 44 24 28 55 38 06 	movl   $0x8063855,0x28(%esp)
 8057245:	08 
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
 8057246:	c6 03 22             	movb   $0x22,(%ebx)
 8057249:	e9 0a d5 ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
 805724e:	66 90                	xchg   %ax,%ax
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 8057250:	c6 44 24 39 01       	movb   $0x1,0x39(%esp)
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
 8057255:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 805725a:	31 ed                	xor    %ebp,%ebp
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
      quote_string_len = 1;
 805725c:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8057263:	00 
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
 8057264:	c7 44 24 28 55 38 06 	movl   $0x8063855,0x28(%esp)
 805726b:	08 
          buffer[len] = (c); \
        len++; \
      } \
    while (0)

  switch (quoting_style)
 805726c:	c7 44 24 74 03 00 00 	movl   $0x3,0x74(%esp)
 8057273:	00 
 8057274:	e9 df d4 ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
 8057279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8057280:	8b 44 24 14          	mov    0x14(%esp),%eax

  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\0' : i == argsize);  i++)
    {
      unsigned char c;
      unsigned char esc;
      bool is_right_quote = false;
 8057284:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 8057289:	8d 1c 30             	lea    (%eax,%esi,1),%ebx
 805728c:	e9 bf d7 ff ff       	jmp    8054a50 <quotearg_buffer_restyled+0x3c0>
 8057291:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8057298:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 805729d:	e9 ae d7 ff ff       	jmp    8054a50 <quotearg_buffer_restyled+0x3c0>
 80572a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
 80572a8:	80 7c 24 38 00       	cmpb   $0x0,0x38(%esp)
 80572ad:	0f 84 c7 f6 ff ff    	je     805697a <quotearg_buffer_restyled+0x22ea>
 80572b3:	90                   	nop
 80572b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80572b8:	89 3c 24             	mov    %edi,(%esp)
 80572bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80572bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80572c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80572c7:	b9 b7 59 00 00       	mov    $0x59b7,%ecx
 80572cc:	e8 97 30 00 00       	call   805a368 <__afl_maybe_log>
 80572d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80572d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80572d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80572dd:	8b 3c 24             	mov    (%esp),%edi
 80572e0:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        STORE ('\\');
 80572e4:	39 c5                	cmp    %eax,%ebp
 80572e6:	73 38                	jae    8057320 <quotearg_buffer_restyled+0x2c90>
 80572e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80572ec:	89 3c 24             	mov    %edi,(%esp)
 80572ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80572f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80572f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80572fb:	b9 da ce 00 00       	mov    $0xceda,%ecx
 8057300:	e8 63 30 00 00       	call   805a368 <__afl_maybe_log>
 8057305:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057309:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805730d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057311:	8b 3c 24             	mov    (%esp),%edi
 8057314:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057318:	8b 74 24 24          	mov    0x24(%esp),%esi
 805731c:	c6 04 2e 5c          	movb   $0x5c,(%esi,%ebp,1)
 8057320:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057324:	89 3c 24             	mov    %edi,(%esp)
 8057327:	89 54 24 04          	mov    %edx,0x4(%esp)
 805732b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805732f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057333:	b9 2a 81 00 00       	mov    $0x812a,%ecx
 8057338:	e8 2b 30 00 00       	call   805a368 <__afl_maybe_log>
 805733d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057341:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057345:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057349:	8b 3c 24             	mov    (%esp),%edi
 805734c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057350:	83 c5 01             	add    $0x1,%ebp
                        is_right_quote = false;
 8057353:	c6 44 24 38 00       	movb   $0x0,0x38(%esp)
 8057358:	e9 1d f6 ff ff       	jmp    805697a <quotearg_buffer_restyled+0x22ea>
 805735d:	8d 76 00             	lea    0x0(%esi),%esi

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 8057360:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8057365:	0f 85 6a 0d 00 00    	jne    80580d5 <quotearg_buffer_restyled+0x3a45>
 805736b:	90                   	nop
 805736c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057370:	89 3c 24             	mov    %edi,(%esp)
 8057373:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057377:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805737b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805737f:	b9 71 4b 00 00       	mov    $0x4b71,%ecx
 8057384:	e8 df 2f 00 00       	call   805a368 <__afl_maybe_log>
 8057389:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805738d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057391:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057395:	8b 3c 24             	mov    (%esp),%edi
 8057398:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805739c:	39 c5                	cmp    %eax,%ebp
 805739e:	73 38                	jae    80573d8 <quotearg_buffer_restyled+0x2d48>
 80573a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80573a4:	89 3c 24             	mov    %edi,(%esp)
 80573a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80573ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80573af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80573b3:	b9 77 25 00 00       	mov    $0x2577,%ecx
 80573b8:	e8 ab 2f 00 00       	call   805a368 <__afl_maybe_log>
 80573bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80573c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80573c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80573c9:	8b 3c 24             	mov    (%esp),%edi
 80573cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80573d0:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 80573d4:	c6 04 2b 5c          	movb   $0x5c,(%ebx,%ebp,1)
 80573d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80573dc:	89 3c 24             	mov    %edi,(%esp)
 80573df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80573e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80573e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80573eb:	b9 0e 54 00 00       	mov    $0x540e,%ecx
 80573f0:	e8 73 2f 00 00       	call   805a368 <__afl_maybe_log>
 80573f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80573f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80573fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057401:	8b 3c 24             	mov    (%esp),%edi
 8057404:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057408:	8d 55 01             	lea    0x1(%ebp),%edx
                        STORE ('0' + (c >> 6));
 805740b:	39 d0                	cmp    %edx,%eax
 805740d:	76 48                	jbe    8057457 <quotearg_buffer_restyled+0x2dc7>
 805740f:	90                   	nop
 8057410:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057414:	89 3c 24             	mov    %edi,(%esp)
 8057417:	89 54 24 04          	mov    %edx,0x4(%esp)
 805741b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805741f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057423:	b9 eb 3d 00 00       	mov    $0x3deb,%ecx
 8057428:	e8 3b 2f 00 00       	call   805a368 <__afl_maybe_log>
 805742d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057431:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057435:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057439:	8b 3c 24             	mov    (%esp),%edi
 805743c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057440:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 8057445:	8b 54 24 24          	mov    0x24(%esp),%edx
 8057449:	c0 eb 06             	shr    $0x6,%bl
 805744c:	89 de                	mov    %ebx,%esi
 805744e:	83 c6 30             	add    $0x30,%esi
 8057451:	89 f3                	mov    %esi,%ebx
 8057453:	88 5c 2a 01          	mov    %bl,0x1(%edx,%ebp,1)
 8057457:	90                   	nop
 8057458:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805745c:	89 3c 24             	mov    %edi,(%esp)
 805745f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057463:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057467:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805746b:	b9 30 a9 00 00       	mov    $0xa930,%ecx
 8057470:	e8 f3 2e 00 00       	call   805a368 <__afl_maybe_log>
 8057475:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057479:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805747d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057481:	8b 3c 24             	mov    (%esp),%edi
 8057484:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057488:	8d 75 02             	lea    0x2(%ebp),%esi
                        STORE ('0' + ((c >> 3) & 7));
 805748b:	39 f0                	cmp    %esi,%eax
 805748d:	76 49                	jbe    80574d8 <quotearg_buffer_restyled+0x2e48>
 805748f:	90                   	nop
 8057490:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057494:	89 3c 24             	mov    %edi,(%esp)
 8057497:	89 54 24 04          	mov    %edx,0x4(%esp)
 805749b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805749f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80574a3:	b9 7b 08 00 00       	mov    $0x87b,%ecx
 80574a8:	e8 bb 2e 00 00       	call   805a368 <__afl_maybe_log>
 80574ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80574b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80574b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80574b9:	8b 3c 24             	mov    (%esp),%edi
 80574bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80574c0:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 80574c5:	8b 74 24 24          	mov    0x24(%esp),%esi
 80574c9:	c0 eb 03             	shr    $0x3,%bl
 80574cc:	89 da                	mov    %ebx,%edx
 80574ce:	83 e2 07             	and    $0x7,%edx
 80574d1:	83 c2 30             	add    $0x30,%edx
 80574d4:	88 54 2e 02          	mov    %dl,0x2(%esi,%ebp,1)
                        c = '0' + (c & 7);
 80574d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80574dc:	89 3c 24             	mov    %edi,(%esp)
 80574df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80574e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80574e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80574eb:	b9 9b ea 00 00       	mov    $0xea9b,%ecx
 80574f0:	e8 73 2e 00 00       	call   805a368 <__afl_maybe_log>
 80574f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80574f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80574fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057501:	8b 3c 24             	mov    (%esp),%edi
 8057504:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057508:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 805750d:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 8057510:	83 e2 07             	and    $0x7,%edx
 8057513:	8d 5a 30             	lea    0x30(%edx),%ebx
 8057516:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
 805751a:	e9 f9 f5 ff ff       	jmp    8056b18 <quotearg_buffer_restyled+0x2488>
 805751f:	90                   	nop

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 8057520:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8057525:	0f 85 aa 0b 00 00    	jne    80580d5 <quotearg_buffer_restyled+0x3a45>
 805752b:	90                   	nop
 805752c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057530:	89 3c 24             	mov    %edi,(%esp)
 8057533:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057537:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805753b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805753f:	b9 7f 34 00 00       	mov    $0x347f,%ecx
 8057544:	e8 1f 2e 00 00       	call   805a368 <__afl_maybe_log>
 8057549:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805754d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057551:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057555:	8b 3c 24             	mov    (%esp),%edi
 8057558:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 805755c:	39 c5                	cmp    %eax,%ebp
 805755e:	73 38                	jae    8057598 <quotearg_buffer_restyled+0x2f08>
 8057560:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057564:	89 3c 24             	mov    %edi,(%esp)
 8057567:	89 54 24 04          	mov    %edx,0x4(%esp)
 805756b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805756f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057573:	b9 1f 2f 00 00       	mov    $0x2f1f,%ecx
 8057578:	e8 eb 2d 00 00       	call   805a368 <__afl_maybe_log>
 805757d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057581:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057585:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057589:	8b 3c 24             	mov    (%esp),%edi
 805758c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057590:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 8057594:	c6 04 2b 5c          	movb   $0x5c,(%ebx,%ebp,1)
 8057598:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805759c:	89 3c 24             	mov    %edi,(%esp)
 805759f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80575a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80575a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80575ab:	b9 9b 01 00 00       	mov    $0x19b,%ecx
 80575b0:	e8 b3 2d 00 00       	call   805a368 <__afl_maybe_log>
 80575b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80575b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80575bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80575c1:	8b 3c 24             	mov    (%esp),%edi
 80575c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80575c8:	8d 55 01             	lea    0x1(%ebp),%edx
                        STORE ('0' + (c >> 6));
 80575cb:	39 d0                	cmp    %edx,%eax
 80575cd:	76 48                	jbe    8057617 <quotearg_buffer_restyled+0x2f87>
 80575cf:	90                   	nop
 80575d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80575d4:	89 3c 24             	mov    %edi,(%esp)
 80575d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80575db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80575df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80575e3:	b9 ff 2d 00 00       	mov    $0x2dff,%ecx
 80575e8:	e8 7b 2d 00 00       	call   805a368 <__afl_maybe_log>
 80575ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80575f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80575f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80575f9:	8b 3c 24             	mov    (%esp),%edi
 80575fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057600:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 8057605:	8b 54 24 24          	mov    0x24(%esp),%edx
 8057609:	c0 eb 06             	shr    $0x6,%bl
 805760c:	89 de                	mov    %ebx,%esi
 805760e:	83 c6 30             	add    $0x30,%esi
 8057611:	89 f3                	mov    %esi,%ebx
 8057613:	88 5c 2a 01          	mov    %bl,0x1(%edx,%ebp,1)
 8057617:	90                   	nop
 8057618:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805761c:	89 3c 24             	mov    %edi,(%esp)
 805761f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057623:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057627:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805762b:	b9 54 ce 00 00       	mov    $0xce54,%ecx
 8057630:	e8 33 2d 00 00       	call   805a368 <__afl_maybe_log>
 8057635:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057639:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805763d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057641:	8b 3c 24             	mov    (%esp),%edi
 8057644:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057648:	8d 75 02             	lea    0x2(%ebp),%esi
                        STORE ('0' + ((c >> 3) & 7));
 805764b:	39 f0                	cmp    %esi,%eax
 805764d:	76 49                	jbe    8057698 <quotearg_buffer_restyled+0x3008>
 805764f:	90                   	nop
 8057650:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057654:	89 3c 24             	mov    %edi,(%esp)
 8057657:	89 54 24 04          	mov    %edx,0x4(%esp)
 805765b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805765f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057663:	b9 fe cd 00 00       	mov    $0xcdfe,%ecx
 8057668:	e8 fb 2c 00 00       	call   805a368 <__afl_maybe_log>
 805766d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057671:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057675:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057679:	8b 3c 24             	mov    (%esp),%edi
 805767c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057680:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 8057685:	8b 74 24 24          	mov    0x24(%esp),%esi
 8057689:	c0 eb 03             	shr    $0x3,%bl
 805768c:	89 da                	mov    %ebx,%edx
 805768e:	83 e2 07             	and    $0x7,%edx
 8057691:	83 c2 30             	add    $0x30,%edx
 8057694:	88 54 2e 02          	mov    %dl,0x2(%esi,%ebp,1)
                        c = '0' + (c & 7);
 8057698:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805769c:	89 3c 24             	mov    %edi,(%esp)
 805769f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80576a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80576a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80576ab:	b9 21 ed 00 00       	mov    $0xed21,%ecx
 80576b0:	e8 b3 2c 00 00       	call   805a368 <__afl_maybe_log>
 80576b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80576b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80576bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80576c1:	8b 3c 24             	mov    (%esp),%edi
 80576c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80576c8:	0f b6 54 24 2c       	movzbl 0x2c(%esp),%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 80576cd:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 80576d0:	83 e2 07             	and    $0x7,%edx
 80576d3:	8d 5a 30             	lea    0x30(%edx),%ebx
 80576d6:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
 80576da:	e9 d5 f5 ff ff       	jmp    8056cb4 <quotearg_buffer_restyled+0x2624>
 80576df:	90                   	nop
                mbstate_t mbstate;
                memset (&mbstate, 0, sizeof mbstate);

                m = 0;
                printable = true;
                if (argsize == SIZE_MAX)
 80576e0:	83 ff ff             	cmp    $0xffffffff,%edi
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 80576e3:	c7 44 24 48 00 00 00 	movl   $0x0,0x48(%esp)
 80576ea:	00 
 80576eb:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%esp)
 80576f2:	00 
 80576f3:	0f 84 18 0a 00 00    	je     8058111 <quotearg_buffer_restyled+0x3a81>
 80576f9:	8d 76 00             	lea    0x0(%esi),%esi
 80576fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057700:	89 3c 24             	mov    %edi,(%esp)
 8057703:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057707:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805770b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805770f:	b9 5f 65 00 00       	mov    $0x655f,%ecx
 8057714:	e8 4f 2c 00 00       	call   805a368 <__afl_maybe_log>
 8057719:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805771d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057721:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057725:	8b 3c 24             	mov    (%esp),%edi
 8057728:	8d 64 24 10          	lea    0x10(%esp),%esp
        case '\b': esc = 'b'; goto c_escape;
        case '\f': esc = 'f'; goto c_escape;
        case '\n': esc = 'n'; goto c_and_shell_escape;
        case '\r': esc = 'r'; goto c_and_shell_escape;
        case '\t': esc = 't'; goto c_and_shell_escape;
        case '\v': esc = 'v'; goto c_escape;
 805772c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057730:	89 3c 24             	mov    %edi,(%esp)
 8057733:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057737:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805773b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805773f:	b9 8e 55 00 00       	mov    $0x558e,%ecx
 8057744:	e8 1f 2c 00 00       	call   805a368 <__afl_maybe_log>
 8057749:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805774d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057751:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057755:	8b 3c 24             	mov    (%esp),%edi
 8057758:	8d 64 24 10          	lea    0x10(%esp),%esp
 805775c:	c6 44 24 20 01       	movb   $0x1,0x20(%esp)
 8057761:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
 8057768:	00 
                                  break;
                                }
                          }

                        if (! iswprint (w))
                          printable = false;
 8057769:	89 74 24 2c          	mov    %esi,0x2c(%esp)
 805776d:	89 6c 24 30          	mov    %ebp,0x30(%esp)
 8057771:	88 54 24 3b          	mov    %dl,0x3b(%esp)
 8057775:	89 5c 24 3c          	mov    %ebx,0x3c(%esp)
 8057779:	8d 76 00             	lea    0x0(%esi),%esi

                do
                  {
                    wchar_t w;
                    size_t bytes = mbrtowc (&w, &arg[i + m],
                                            argsize - (i + m), &mbstate);
 805777c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057780:	89 3c 24             	mov    %edi,(%esp)
 8057783:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057787:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805778b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805778f:	b9 47 30 00 00       	mov    $0x3047,%ecx
 8057794:	e8 cf 2b 00 00       	call   805a368 <__afl_maybe_log>
 8057799:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805779d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80577a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80577a5:	8b 3c 24             	mov    (%esp),%edi
 80577a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80577ac:	8b 5c 24 24          	mov    0x24(%esp),%ebx
 80577b0:	03 5c 24 2c          	add    0x2c(%esp),%ebx
                  argsize = strlen (arg);

                do
                  {
                    wchar_t w;
                    size_t bytes = mbrtowc (&w, &arg[i + m],
 80577b4:	8d 4c 24 48          	lea    0x48(%esp),%ecx
 80577b8:	8b 74 24 14          	mov    0x14(%esp),%esi
 80577bc:	89 fa                	mov    %edi,%edx
 80577be:	51                   	push   %ecx
 80577bf:	8d 34 1e             	lea    (%esi,%ebx,1),%esi
 80577c2:	29 da                	sub    %ebx,%edx
 80577c4:	52                   	push   %edx
 80577c5:	56                   	push   %esi
 80577c6:	8d 44 24 50          	lea    0x50(%esp),%eax
 80577ca:	50                   	push   %eax
 80577cb:	e8 a0 1a ff ff       	call   8049270 <mbrtowc@plt>
                                            argsize - (i + m), &mbstate);
                    if (bytes == 0)
 80577d0:	83 c4 10             	add    $0x10,%esp
 80577d3:	85 c0                	test   %eax,%eax
                  argsize = strlen (arg);

                do
                  {
                    wchar_t w;
                    size_t bytes = mbrtowc (&w, &arg[i + m],
 80577d5:	89 c5                	mov    %eax,%ebp
                                            argsize - (i + m), &mbstate);
                    if (bytes == 0)
 80577d7:	0f 84 87 02 00 00    	je     8057a64 <quotearg_buffer_restyled+0x33d4>
 80577dd:	8d 76 00             	lea    0x0(%esi),%esi
 80577e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80577e4:	89 3c 24             	mov    %edi,(%esp)
 80577e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80577eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80577ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80577f3:	b9 f4 26 00 00       	mov    $0x26f4,%ecx
 80577f8:	e8 6b 2b 00 00       	call   805a368 <__afl_maybe_log>
 80577fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057801:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057805:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057809:	8b 3c 24             	mov    (%esp),%edi
 805780c:	8d 64 24 10          	lea    0x10(%esp),%esp
                      break;
                    else if (bytes == (size_t) -1)
 8057810:	83 f8 ff             	cmp    $0xffffffff,%eax
 8057813:	0f 84 24 0b 00 00    	je     805833d <quotearg_buffer_restyled+0x3cad>
 8057819:	8d 76 00             	lea    0x0(%esi),%esi
 805781c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057820:	89 3c 24             	mov    %edi,(%esp)
 8057823:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057827:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805782b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805782f:	b9 cc 60 00 00       	mov    $0x60cc,%ecx
 8057834:	e8 2f 2b 00 00       	call   805a368 <__afl_maybe_log>
 8057839:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805783d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057841:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057845:	8b 3c 24             	mov    (%esp),%edi
 8057848:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        printable = false;
                        break;
                      }
                    else if (bytes == (size_t) -2)
 805784c:	83 f8 fe             	cmp    $0xfffffffe,%eax
 805784f:	0f 84 32 0b 00 00    	je     8058387 <quotearg_buffer_restyled+0x3cf7>
 8057855:	8d 76 00             	lea    0x0(%esi),%esi
 8057858:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805785c:	89 3c 24             	mov    %edi,(%esp)
 805785f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057863:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057867:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805786b:	b9 3e 56 00 00       	mov    $0x563e,%ecx
 8057870:	e8 f3 2a 00 00       	call   805a368 <__afl_maybe_log>
 8057875:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057879:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805787d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057881:	8b 3c 24             	mov    (%esp),%edi
 8057884:	8d 64 24 10          	lea    0x10(%esp),%esp
                      {
                        /* Work around a bug with older shells that "see" a '\'
                           that is really the 2nd byte of a multibyte character.
                           In practice the problem is limited to ASCII
                           chars >= '@' that are shell special chars.  */
                        if ('[' == 0x5b && elide_outer_quotes
 8057888:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 805788d:	0f 84 35 01 00 00    	je     80579c8 <quotearg_buffer_restyled+0x3338>
 8057893:	90                   	nop
 8057894:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057898:	89 3c 24             	mov    %edi,(%esp)
 805789b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805789f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80578a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80578a7:	b9 b5 b0 00 00       	mov    $0xb0b5,%ecx
 80578ac:	e8 b7 2a 00 00       	call   805a368 <__afl_maybe_log>
 80578b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80578b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80578b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80578bd:	8b 3c 24             	mov    (%esp),%edi
 80578c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80578c4:	83 7c 24 74 02       	cmpl   $0x2,0x74(%esp)
 80578c9:	0f 85 f9 00 00 00    	jne    80579c8 <quotearg_buffer_restyled+0x3338>
 80578cf:	90                   	nop
 80578d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80578d4:	89 3c 24             	mov    %edi,(%esp)
 80578d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80578db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80578df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80578e3:	b9 12 59 00 00       	mov    $0x5912,%ecx
 80578e8:	e8 7b 2a 00 00       	call   805a368 <__afl_maybe_log>
 80578ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80578f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80578f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80578f9:	8b 3c 24             	mov    (%esp),%edi
 80578fc:	8d 64 24 10          	lea    0x10(%esp),%esp
                            && quoting_style == shell_always_quoting_style)
                          {
                            size_t j;
                            for (j = 1; j < bytes; j++)
 8057900:	83 f8 01             	cmp    $0x1,%eax
 8057903:	0f 84 bf 00 00 00    	je     80579c8 <quotearg_buffer_restyled+0x3338>
 8057909:	8d 76 00             	lea    0x0(%esi),%esi
 805790c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057910:	89 3c 24             	mov    %edi,(%esp)
 8057913:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805791b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805791f:	b9 58 75 00 00       	mov    $0x7558,%ecx
 8057924:	e8 3f 2a 00 00       	call   805a368 <__afl_maybe_log>
 8057929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805792d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057931:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057935:	8b 3c 24             	mov    (%esp),%edi
 8057938:	8d 64 24 10          	lea    0x10(%esp),%esp
 805793c:	bb 01 00 00 00       	mov    $0x1,%ebx
 8057941:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
                              switch (arg[i + m + j])
 8057948:	0f b6 0c 1e          	movzbl (%esi,%ebx,1),%ecx
 805794c:	8d 51 a5             	lea    -0x5b(%ecx),%edx
 805794f:	80 fa 21             	cmp    $0x21,%dl
 8057952:	77 3c                	ja     8057990 <quotearg_buffer_restyled+0x3300>
 8057954:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057958:	89 3c 24             	mov    %edi,(%esp)
 805795b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805795f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057963:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057967:	b9 27 fa 00 00       	mov    $0xfa27,%ecx
 805796c:	e8 f7 29 00 00       	call   805a368 <__afl_maybe_log>
 8057971:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057975:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057979:	8b 54 24 04          	mov    0x4(%esp),%edx
 805797d:	8b 3c 24             	mov    (%esp),%edi
 8057980:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057984:	0f b6 c2             	movzbl %dl,%eax
 8057987:	ff 24 85 c0 3a 06 08 	jmp    *0x8063ac0(,%eax,4)
 805798e:	66 90                	xchg   %ax,%ax
                           chars >= '@' that are shell special chars.  */
                        if ('[' == 0x5b && elide_outer_quotes
                            && quoting_style == shell_always_quoting_style)
                          {
                            size_t j;
                            for (j = 1; j < bytes; j++)
 8057990:	83 c3 01             	add    $0x1,%ebx
 8057993:	39 eb                	cmp    %ebp,%ebx
 8057995:	75 b1                	jne    8057948 <quotearg_buffer_restyled+0x32b8>
 8057997:	90                   	nop
 8057998:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805799c:	89 3c 24             	mov    %edi,(%esp)
 805799f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80579a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80579a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80579ab:	b9 27 28 00 00       	mov    $0x2827,%ecx
 80579b0:	e8 b3 29 00 00       	call   805a368 <__afl_maybe_log>
 80579b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80579b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80579bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80579c1:	8b 3c 24             	mov    (%esp),%edi
 80579c4:	8d 64 24 10          	lea    0x10(%esp),%esp
                                default:
                                  break;
                                }
                          }

                        if (! iswprint (w))
 80579c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80579cc:	89 3c 24             	mov    %edi,(%esp)
 80579cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80579d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80579d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80579db:	b9 c8 e2 00 00       	mov    $0xe2c8,%ecx
 80579e0:	e8 83 29 00 00       	call   805a368 <__afl_maybe_log>
 80579e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80579e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80579ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80579f1:	8b 3c 24             	mov    (%esp),%edi
 80579f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80579f8:	83 ec 0c             	sub    $0xc,%esp
 80579fb:	ff 74 24 50          	pushl  0x50(%esp)
 80579ff:	e8 0c 18 ff ff       	call   8049210 <iswprint@plt>
 8057a04:	5b                   	pop    %ebx
                          printable = false;
 8057a05:	0f b6 5c 24 2c       	movzbl 0x2c(%esp),%ebx
 8057a0a:	85 c0                	test   %eax,%eax
 8057a0c:	b9 00 00 00 00       	mov    $0x0,%ecx
                        m += bytes;
                      }
                  }
                while (! mbsinit (&mbstate));
 8057a11:	8d 74 24 54          	lea    0x54(%esp),%esi
                                  break;
                                }
                          }

                        if (! iswprint (w))
                          printable = false;
 8057a15:	0f 44 d9             	cmove  %ecx,%ebx
                        m += bytes;
 8057a18:	01 6c 24 30          	add    %ebp,0x30(%esp)
                                  break;
                                }
                          }

                        if (! iswprint (w))
                          printable = false;
 8057a1c:	88 5c 24 2c          	mov    %bl,0x2c(%esp)
                        m += bytes;
                      }
                  }
                while (! mbsinit (&mbstate));
 8057a20:	56                   	push   %esi
 8057a21:	e8 5a 17 ff ff       	call   8049180 <mbsinit@plt>
 8057a26:	83 c4 10             	add    $0x10,%esp
 8057a29:	85 c0                	test   %eax,%eax
 8057a2b:	0f 84 48 fd ff ff    	je     8057779 <quotearg_buffer_restyled+0x30e9>
 8057a31:	8d 76 00             	lea    0x0(%esi),%esi
 8057a34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057a38:	89 3c 24             	mov    %edi,(%esp)
 8057a3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057a3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057a43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057a47:	b9 bf a1 00 00       	mov    $0xa1bf,%ecx
 8057a4c:	e8 17 29 00 00       	call   805a368 <__afl_maybe_log>
 8057a51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057a55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057a59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057a5d:	8b 3c 24             	mov    (%esp),%edi
 8057a60:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057a64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057a68:	89 3c 24             	mov    %edi,(%esp)
 8057a6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057a6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057a73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057a77:	b9 ff 9c 00 00       	mov    $0x9cff,%ecx
 8057a7c:	e8 e7 28 00 00       	call   805a368 <__afl_maybe_log>
 8057a81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057a85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057a89:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057a8d:	8b 3c 24             	mov    (%esp),%edi
 8057a90:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057a94:	0f b6 54 24 3b       	movzbl 0x3b(%esp),%edx
 8057a99:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 8057a9d:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8057aa1:	8d 76 00             	lea    0x0(%esi),%esi
              }

            if (1 < m || (backslash_escapes && ! printable))
 8057aa4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057aa8:	89 3c 24             	mov    %edi,(%esp)
 8057aab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057aaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057ab3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057ab7:	b9 c3 08 00 00       	mov    $0x8c3,%ecx
 8057abc:	e8 a7 28 00 00       	call   805a368 <__afl_maybe_log>
 8057ac1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ac5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057ac9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057acd:	8b 3c 24             	mov    (%esp),%edi
 8057ad0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057ad4:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
 8057ad9:	0f 87 b9 e3 ff ff    	ja     8055e98 <quotearg_buffer_restyled+0x1808>
 8057adf:	90                   	nop
 8057ae0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ae4:	89 3c 24             	mov    %edi,(%esp)
 8057ae7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057aeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057aef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057af3:	b9 80 8b 00 00       	mov    $0x8b80,%ecx
 8057af8:	e8 6b 28 00 00       	call   805a368 <__afl_maybe_log>
 8057afd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057b01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057b05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057b09:	8b 3c 24             	mov    (%esp),%edi
 8057b0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057b10:	e9 10 e3 ff ff       	jmp    8055e25 <quotearg_buffer_restyled+0x1795>
 8057b15:	8d 76 00             	lea    0x0(%esi),%esi
              /* We don't have to worry that this last '0' will be
                 backslash-escaped because, again, quote_string should
                 not start with it and because quote_these_too is
                 documented as not accepting it.  */
            }
          else if (flags & QA_ELIDE_NULL_BYTES)
 8057b18:	f6 44 24 78 01       	testb  $0x1,0x78(%esp)
 8057b1d:	0f 84 5d d3 ff ff    	je     8054e80 <quotearg_buffer_restyled+0x7f0>
 8057b23:	90                   	nop
 8057b24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057b28:	89 3c 24             	mov    %edi,(%esp)
 8057b2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057b2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057b33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057b37:	b9 c8 bb 00 00       	mov    $0xbbc8,%ecx
 8057b3c:	e8 27 28 00 00       	call   805a368 <__afl_maybe_log>
 8057b41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057b45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057b49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057b4d:	8b 3c 24             	mov    (%esp),%edi
 8057b50:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057b54:	83 c6 01             	add    $0x1,%esi
 8057b57:	e9 0a cc ff ff       	jmp    8054766 <quotearg_buffer_restyled+0xd6>
 8057b5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8057b60:	89 5c 24 30          	mov    %ebx,0x30(%esp)
 8057b64:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 8057b68:	89 7c 24 70          	mov    %edi,0x70(%esp)
 8057b6c:	8b 44 24 10          	mov    0x10(%esp),%eax
 8057b70:	8b 7c 24 14          	mov    0x14(%esp),%edi
 8057b74:	89 5c 24 24          	mov    %ebx,0x24(%esp)
 8057b78:	e9 e3 f1 ff ff       	jmp    8056d60 <quotearg_buffer_restyled+0x26d0>
 8057b7d:	8d 76 00             	lea    0x0(%esi),%esi
              goto store_escape;
            }
          break;

        case '{': case '}': /* sometimes special if isolated */
          if (! (argsize == SIZE_MAX ? arg[1] == '\0' : argsize == 1))
 8057b80:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 8057b84:	80 7b 01 00          	cmpb   $0x0,0x1(%ebx)
 8057b88:	0f 95 c0             	setne  %al
 8057b8b:	e9 80 d9 ff ff       	jmp    8055510 <quotearg_buffer_restyled+0xe80>

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 8057b90:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8057b95:	0f 85 25 db ff ff    	jne    80556c0 <quotearg_buffer_restyled+0x1030>
 8057b9b:	90                   	nop
 8057b9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ba0:	89 3c 24             	mov    %edi,(%esp)
 8057ba3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057ba7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057bab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057baf:	b9 4c 84 00 00       	mov    $0x844c,%ecx
 8057bb4:	e8 af 27 00 00       	call   805a368 <__afl_maybe_log>
 8057bb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057bbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057bc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057bc5:	8b 3c 24             	mov    (%esp),%edi
 8057bc8:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 8057bcc:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8057bd0:	73 3a                	jae    8057c0c <quotearg_buffer_restyled+0x357c>
 8057bd2:	66 90                	xchg   %ax,%ax
 8057bd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057bd8:	89 3c 24             	mov    %edi,(%esp)
 8057bdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057bdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057be3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057be7:	b9 02 d2 00 00       	mov    $0xd202,%ecx
 8057bec:	e8 77 27 00 00       	call   805a368 <__afl_maybe_log>
 8057bf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057bf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057bf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057bfd:	8b 3c 24             	mov    (%esp),%edi
 8057c00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057c04:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8057c08:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 8057c0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057c10:	89 3c 24             	mov    %edi,(%esp)
 8057c13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057c17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057c1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057c1f:	b9 12 c1 00 00       	mov    $0xc112,%ecx
 8057c24:	e8 3f 27 00 00       	call   805a368 <__afl_maybe_log>
 8057c29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057c2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057c31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057c35:	8b 3c 24             	mov    (%esp),%edi
 8057c38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057c3c:	8d 4d 01             	lea    0x1(%ebp),%ecx
                        STORE ('0' + (c >> 6));
 8057c3f:	39 4c 24 10          	cmp    %ecx,0x10(%esp)
 8057c43:	76 43                	jbe    8057c88 <quotearg_buffer_restyled+0x35f8>
 8057c45:	8d 76 00             	lea    0x0(%esi),%esi
 8057c48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057c4c:	89 3c 24             	mov    %edi,(%esp)
 8057c4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057c53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057c57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057c5b:	b9 fd 17 00 00       	mov    $0x17fd,%ecx
 8057c60:	e8 03 27 00 00       	call   805a368 <__afl_maybe_log>
 8057c65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057c69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057c6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057c71:	8b 3c 24             	mov    (%esp),%edi
 8057c74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057c78:	89 d0                	mov    %edx,%eax
 8057c7a:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8057c7e:	c0 e8 06             	shr    $0x6,%al
 8057c81:	83 c0 30             	add    $0x30,%eax
 8057c84:	88 44 29 01          	mov    %al,0x1(%ecx,%ebp,1)
 8057c88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057c8c:	89 3c 24             	mov    %edi,(%esp)
 8057c8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057c93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057c97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057c9b:	b9 56 73 00 00       	mov    $0x7356,%ecx
 8057ca0:	e8 c3 26 00 00       	call   805a368 <__afl_maybe_log>
 8057ca5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ca9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057cad:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057cb1:	8b 3c 24             	mov    (%esp),%edi
 8057cb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057cb8:	8d 45 02             	lea    0x2(%ebp),%eax
                        STORE ('0' + ((c >> 3) & 7));
 8057cbb:	39 44 24 10          	cmp    %eax,0x10(%esp)
 8057cbf:	76 46                	jbe    8057d07 <quotearg_buffer_restyled+0x3677>
 8057cc1:	8d 76 00             	lea    0x0(%esi),%esi
 8057cc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057cc8:	89 3c 24             	mov    %edi,(%esp)
 8057ccb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057ccf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057cd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057cd7:	b9 91 30 00 00       	mov    $0x3091,%ecx
 8057cdc:	e8 87 26 00 00       	call   805a368 <__afl_maybe_log>
 8057ce1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ce5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057ce9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057ced:	8b 3c 24             	mov    (%esp),%edi
 8057cf0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057cf4:	89 d0                	mov    %edx,%eax
 8057cf6:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8057cfa:	c0 e8 03             	shr    $0x3,%al
 8057cfd:	83 e0 07             	and    $0x7,%eax
 8057d00:	83 c0 30             	add    $0x30,%eax
 8057d03:	88 44 29 02          	mov    %al,0x2(%ecx,%ebp,1)
 8057d07:	90                   	nop
                        c = '0' + (c & 7);
 8057d08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057d0c:	89 3c 24             	mov    %edi,(%esp)
 8057d0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057d13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057d17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057d1b:	b9 8c 3e 00 00       	mov    $0x3e8c,%ecx
 8057d20:	e8 43 26 00 00       	call   805a368 <__afl_maybe_log>
 8057d25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057d29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057d2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057d31:	8b 3c 24             	mov    (%esp),%edi
 8057d34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057d38:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 8057d3b:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 8057d3e:	8d 52 30             	lea    0x30(%edx),%edx
 8057d41:	e9 be e2 ff ff       	jmp    8056004 <quotearg_buffer_restyled+0x1974>
 8057d46:	8d 76 00             	lea    0x0(%esi),%esi
 8057d49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 8057d50:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8057d55:	0f 85 65 d9 ff ff    	jne    80556c0 <quotearg_buffer_restyled+0x1030>
 8057d5b:	90                   	nop
 8057d5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057d60:	89 3c 24             	mov    %edi,(%esp)
 8057d63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057d67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057d6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057d6f:	b9 55 21 00 00       	mov    $0x2155,%ecx
 8057d74:	e8 ef 25 00 00       	call   805a368 <__afl_maybe_log>
 8057d79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057d7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057d81:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057d85:	8b 3c 24             	mov    (%esp),%edi
 8057d88:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 8057d8c:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8057d90:	73 3a                	jae    8057dcc <quotearg_buffer_restyled+0x373c>
 8057d92:	66 90                	xchg   %ax,%ax
 8057d94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057d98:	89 3c 24             	mov    %edi,(%esp)
 8057d9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057d9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057da3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057da7:	b9 b3 32 00 00       	mov    $0x32b3,%ecx
 8057dac:	e8 b7 25 00 00       	call   805a368 <__afl_maybe_log>
 8057db1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057db5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057db9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057dbd:	8b 3c 24             	mov    (%esp),%edi
 8057dc0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057dc4:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8057dc8:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 8057dcc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057dd0:	89 3c 24             	mov    %edi,(%esp)
 8057dd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057dd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057ddb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057ddf:	b9 95 a5 00 00       	mov    $0xa595,%ecx
 8057de4:	e8 7f 25 00 00       	call   805a368 <__afl_maybe_log>
 8057de9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ded:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057df1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057df5:	8b 3c 24             	mov    (%esp),%edi
 8057df8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057dfc:	8d 45 01             	lea    0x1(%ebp),%eax
                        STORE ('0' + (c >> 6));
 8057dff:	39 44 24 10          	cmp    %eax,0x10(%esp)
 8057e03:	76 43                	jbe    8057e48 <quotearg_buffer_restyled+0x37b8>
 8057e05:	8d 76 00             	lea    0x0(%esi),%esi
 8057e08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057e0c:	89 3c 24             	mov    %edi,(%esp)
 8057e0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057e13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057e17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057e1b:	b9 0f aa 00 00       	mov    $0xaa0f,%ecx
 8057e20:	e8 43 25 00 00       	call   805a368 <__afl_maybe_log>
 8057e25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057e29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057e2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057e31:	8b 3c 24             	mov    (%esp),%edi
 8057e34:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057e38:	89 d0                	mov    %edx,%eax
 8057e3a:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8057e3e:	c0 e8 06             	shr    $0x6,%al
 8057e41:	83 c0 30             	add    $0x30,%eax
 8057e44:	88 44 29 01          	mov    %al,0x1(%ecx,%ebp,1)
 8057e48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057e4c:	89 3c 24             	mov    %edi,(%esp)
 8057e4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057e53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057e57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057e5b:	b9 1b af 00 00       	mov    $0xaf1b,%ecx
 8057e60:	e8 03 25 00 00       	call   805a368 <__afl_maybe_log>
 8057e65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057e69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057e6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057e71:	8b 3c 24             	mov    (%esp),%edi
 8057e74:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057e78:	8d 45 02             	lea    0x2(%ebp),%eax
                        STORE ('0' + ((c >> 3) & 7));
 8057e7b:	39 44 24 10          	cmp    %eax,0x10(%esp)
 8057e7f:	76 46                	jbe    8057ec7 <quotearg_buffer_restyled+0x3837>
 8057e81:	8d 76 00             	lea    0x0(%esi),%esi
 8057e84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057e88:	89 3c 24             	mov    %edi,(%esp)
 8057e8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057e8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057e93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057e97:	b9 27 35 00 00       	mov    $0x3527,%ecx
 8057e9c:	e8 c7 24 00 00       	call   805a368 <__afl_maybe_log>
 8057ea1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ea5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057ea9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057ead:	8b 3c 24             	mov    (%esp),%edi
 8057eb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057eb4:	89 d0                	mov    %edx,%eax
 8057eb6:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8057eba:	c0 e8 03             	shr    $0x3,%al
 8057ebd:	83 e0 07             	and    $0x7,%eax
 8057ec0:	83 c0 30             	add    $0x30,%eax
 8057ec3:	88 44 29 02          	mov    %al,0x2(%ecx,%ebp,1)
 8057ec7:	90                   	nop
                        c = '0' + (c & 7);
 8057ec8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057ecc:	89 3c 24             	mov    %edi,(%esp)
 8057ecf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057ed3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057ed7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057edb:	b9 4f 10 00 00       	mov    $0x104f,%ecx
 8057ee0:	e8 83 24 00 00       	call   805a368 <__afl_maybe_log>
 8057ee5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057ee9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057eed:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057ef1:	8b 3c 24             	mov    (%esp),%edi
 8057ef4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057ef8:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 8057efb:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 8057efe:	8d 52 30             	lea    0x30(%edx),%edx
 8057f01:	e9 4e e3 ff ff       	jmp    8056254 <quotearg_buffer_restyled+0x1bc4>
 8057f06:	8d 76 00             	lea    0x0(%esi),%esi
 8057f09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

                for (;;)
                  {
                    if (backslash_escapes && ! printable)
                      {
                        if (elide_outer_quotes)
 8057f10:	80 7c 24 39 00       	cmpb   $0x0,0x39(%esp)
 8057f15:	0f 85 a5 d7 ff ff    	jne    80556c0 <quotearg_buffer_restyled+0x1030>
 8057f1b:	90                   	nop
 8057f1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057f20:	89 3c 24             	mov    %edi,(%esp)
 8057f23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057f27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057f2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057f2f:	b9 09 79 00 00       	mov    $0x7909,%ecx
 8057f34:	e8 2f 24 00 00       	call   805a368 <__afl_maybe_log>
 8057f39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057f3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057f41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057f45:	8b 3c 24             	mov    (%esp),%edi
 8057f48:	8d 64 24 10          	lea    0x10(%esp),%esp
                          goto force_outer_quoting_style;
                        STORE ('\\');
 8057f4c:	3b 6c 24 10          	cmp    0x10(%esp),%ebp
 8057f50:	73 3a                	jae    8057f8c <quotearg_buffer_restyled+0x38fc>
 8057f52:	66 90                	xchg   %ax,%ax
 8057f54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057f58:	89 3c 24             	mov    %edi,(%esp)
 8057f5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057f5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057f63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057f67:	b9 17 15 00 00       	mov    $0x1517,%ecx
 8057f6c:	e8 f7 23 00 00       	call   805a368 <__afl_maybe_log>
 8057f71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057f75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057f79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057f7d:	8b 3c 24             	mov    (%esp),%edi
 8057f80:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057f84:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8057f88:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 8057f8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057f90:	89 3c 24             	mov    %edi,(%esp)
 8057f93:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057f97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057f9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057f9f:	b9 9e a2 00 00       	mov    $0xa29e,%ecx
 8057fa4:	e8 bf 23 00 00       	call   805a368 <__afl_maybe_log>
 8057fa9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057fad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057fb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057fb5:	8b 3c 24             	mov    (%esp),%edi
 8057fb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057fbc:	8d 4d 01             	lea    0x1(%ebp),%ecx
                        STORE ('0' + (c >> 6));
 8057fbf:	39 4c 24 10          	cmp    %ecx,0x10(%esp)
 8057fc3:	76 43                	jbe    8058008 <quotearg_buffer_restyled+0x3978>
 8057fc5:	8d 76 00             	lea    0x0(%esi),%esi
 8057fc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8057fcc:	89 3c 24             	mov    %edi,(%esp)
 8057fcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8057fd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8057fd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8057fdb:	b9 21 76 00 00       	mov    $0x7621,%ecx
 8057fe0:	e8 83 23 00 00       	call   805a368 <__afl_maybe_log>
 8057fe5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8057fe9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8057fed:	8b 54 24 04          	mov    0x4(%esp),%edx
 8057ff1:	8b 3c 24             	mov    (%esp),%edi
 8057ff4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8057ff8:	89 d0                	mov    %edx,%eax
 8057ffa:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8057ffe:	c0 e8 06             	shr    $0x6,%al
 8058001:	83 c0 30             	add    $0x30,%eax
 8058004:	88 44 29 01          	mov    %al,0x1(%ecx,%ebp,1)
 8058008:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805800c:	89 3c 24             	mov    %edi,(%esp)
 805800f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058013:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058017:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805801b:	b9 93 0c 00 00       	mov    $0xc93,%ecx
 8058020:	e8 43 23 00 00       	call   805a368 <__afl_maybe_log>
 8058025:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058029:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805802d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058031:	8b 3c 24             	mov    (%esp),%edi
 8058034:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058038:	8d 45 02             	lea    0x2(%ebp),%eax
                        STORE ('0' + ((c >> 3) & 7));
 805803b:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805803f:	76 46                	jbe    8058087 <quotearg_buffer_restyled+0x39f7>
 8058041:	8d 76 00             	lea    0x0(%esi),%esi
 8058044:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058048:	89 3c 24             	mov    %edi,(%esp)
 805804b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805804f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058053:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058057:	b9 b4 e4 00 00       	mov    $0xe4b4,%ecx
 805805c:	e8 07 23 00 00       	call   805a368 <__afl_maybe_log>
 8058061:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058065:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058069:	8b 54 24 04          	mov    0x4(%esp),%edx
 805806d:	8b 3c 24             	mov    (%esp),%edi
 8058070:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058074:	89 d0                	mov    %edx,%eax
 8058076:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805807a:	c0 e8 03             	shr    $0x3,%al
 805807d:	83 e0 07             	and    $0x7,%eax
 8058080:	83 c0 30             	add    $0x30,%eax
 8058083:	88 44 29 02          	mov    %al,0x2(%ecx,%ebp,1)
 8058087:	90                   	nop
                        c = '0' + (c & 7);
 8058088:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805808c:	89 3c 24             	mov    %edi,(%esp)
 805808f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058093:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058097:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805809b:	b9 a9 a6 00 00       	mov    $0xa6a9,%ecx
 80580a0:	e8 c3 22 00 00       	call   805a368 <__afl_maybe_log>
 80580a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80580a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80580ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80580b1:	8b 3c 24             	mov    (%esp),%edi
 80580b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80580b8:	83 e2 07             	and    $0x7,%edx
                      {
                        if (elide_outer_quotes)
                          goto force_outer_quoting_style;
                        STORE ('\\');
                        STORE ('0' + (c >> 6));
                        STORE ('0' + ((c >> 3) & 7));
 80580bb:	83 c5 03             	add    $0x3,%ebp
                        c = '0' + (c & 7);
 80580be:	8d 52 30             	lea    0x30(%edx),%edx
 80580c1:	e9 5e e3 ff ff       	jmp    8056424 <quotearg_buffer_restyled+0x1d94>
 80580c6:	8d 76 00             	lea    0x0(%esi),%esi
 80580c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
    case literal_quoting_style:
      elide_outer_quotes = false;
      break;

    default:
      abort ();
 80580d0:	e8 0b 14 ff ff       	call   80494e0 <abort@plt>
 80580d5:	8d 76 00             	lea    0x0(%esi),%esi
 80580d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80580dc:	89 3c 24             	mov    %edi,(%esp)
 80580df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80580e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80580e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80580eb:	b9 9c 37 00 00       	mov    $0x379c,%ecx
 80580f0:	e8 73 22 00 00       	call   805a368 <__afl_maybe_log>
 80580f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80580f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80580fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058101:	8b 3c 24             	mov    (%esp),%edi
 8058104:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058108:	8b 7c 24 70          	mov    0x70(%esp),%edi
 805810c:	e9 af d5 ff ff       	jmp    80556c0 <quotearg_buffer_restyled+0x1030>
 8058111:	8d 76 00             	lea    0x0(%esi),%esi
 8058114:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058118:	89 3c 24             	mov    %edi,(%esp)
 805811b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805811f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058123:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058127:	b9 73 9e 00 00       	mov    $0x9e73,%ecx
 805812c:	e8 37 22 00 00       	call   805a368 <__afl_maybe_log>
 8058131:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058135:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058139:	8b 54 24 04          	mov    0x4(%esp),%edx
 805813d:	8b 3c 24             	mov    (%esp),%edi
 8058140:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058144:	88 54 24 20          	mov    %dl,0x20(%esp)
                memset (&mbstate, 0, sizeof mbstate);

                m = 0;
                printable = true;
                if (argsize == SIZE_MAX)
                  argsize = strlen (arg);
 8058148:	83 ec 0c             	sub    $0xc,%esp
 805814b:	ff 74 24 20          	pushl  0x20(%esp)
 805814f:	e8 0c 12 ff ff       	call   8049360 <strlen@plt>
 8058154:	83 c4 10             	add    $0x10,%esp
 8058157:	89 c7                	mov    %eax,%edi
 8058159:	0f b6 54 24 20       	movzbl 0x20(%esp),%edx
 805815e:	e9 c9 f5 ff ff       	jmp    805772c <quotearg_buffer_restyled+0x309c>
 8058163:	90                   	nop
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 8058164:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058168:	89 3c 24             	mov    %edi,(%esp)
 805816b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805816f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058173:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058177:	b9 e2 e5 00 00       	mov    $0xe5e2,%ecx
 805817c:	e8 e7 21 00 00       	call   805a368 <__afl_maybe_log>
 8058181:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058185:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058189:	8b 54 24 04          	mov    0x4(%esp),%edx
 805818d:	8b 3c 24             	mov    (%esp),%edi
 8058190:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058194:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 8058199:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 80581a0:	00 
      quoting_style = shell_always_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
 80581a1:	bd 01 00 00 00       	mov    $0x1,%ebp
      quote_string = "'";
 80581a6:	c7 44 24 28 53 38 06 	movl   $0x8063853,0x28(%esp)
 80581ad:	08 
 80581ae:	e9 a5 c5 ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
 80581b3:	90                   	nop
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
 80581b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80581b8:	89 3c 24             	mov    %edi,(%esp)
 80581bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80581bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80581c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80581c7:	b9 ea 8d 00 00       	mov    $0x8dea,%ecx
 80581cc:	e8 97 21 00 00       	call   805a368 <__afl_maybe_log>
 80581d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80581d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80581d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80581dd:	8b 3c 24             	mov    (%esp),%edi
 80581e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80581e4:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
      quote_string = "\"";
      quote_string_len = 1;
 80581e9:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 80581f0:	00 
      quoting_style = c_quoting_style;
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
 80581f1:	bd 01 00 00 00       	mov    $0x1,%ebp
      backslash_escapes = true;
      quote_string = "\"";
 80581f6:	c7 44 24 28 55 38 06 	movl   $0x8063855,0x28(%esp)
 80581fd:	08 
 80581fe:	e9 55 c5 ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
 8058203:	90                   	nop
 8058204:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058208:	89 3c 24             	mov    %edi,(%esp)
 805820b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805820f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058213:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058217:	b9 fc eb 00 00       	mov    $0xebfc,%ecx
 805821c:	e8 47 21 00 00       	call   805a368 <__afl_maybe_log>
 8058221:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058225:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058229:	8b 54 24 04          	mov    0x4(%esp),%edx
 805822d:	8b 3c 24             	mov    (%esp),%edi
 8058230:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058234:	8b 7c 24 70          	mov    0x70(%esp),%edi
 8058238:	e9 b2 ce ff ff       	jmp    80550ef <quotearg_buffer_restyled+0xa5f>
 805823d:	8d 76 00             	lea    0x0(%esi),%esi
                        STORE ('0' + ((c >> 3) & 7));
                        c = '0' + (c & 7);
                      }
                    else if (is_right_quote)
                      {
                        STORE ('\\');
 8058240:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058244:	89 3c 24             	mov    %edi,(%esp)
 8058247:	89 54 24 04          	mov    %edx,0x4(%esp)
 805824b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805824f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058253:	b9 52 98 00 00       	mov    $0x9852,%ecx
 8058258:	e8 0b 21 00 00       	call   805a368 <__afl_maybe_log>
 805825d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058261:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058265:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058269:	8b 3c 24             	mov    (%esp),%edi
 805826c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058270:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8058274:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 8058278:	e9 4f dd ff ff       	jmp    8055fcc <quotearg_buffer_restyled+0x193c>
 805827d:	8d 76 00             	lea    0x0(%esi),%esi
 8058280:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058284:	89 3c 24             	mov    %edi,(%esp)
 8058287:	89 54 24 04          	mov    %edx,0x4(%esp)
 805828b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805828f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058293:	b9 e8 a7 00 00       	mov    $0xa7e8,%ecx
 8058298:	e8 cb 20 00 00       	call   805a368 <__afl_maybe_log>
 805829d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80582a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80582a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80582a9:	8b 3c 24             	mov    (%esp),%edi
 80582ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80582b0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80582b4:	c6 04 28 5c          	movb   $0x5c,(%eax,%ebp,1)
 80582b8:	e9 5f df ff ff       	jmp    805621c <quotearg_buffer_restyled+0x1b8c>
 80582bd:	8d 76 00             	lea    0x0(%esi),%esi
 80582c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80582c4:	89 3c 24             	mov    %edi,(%esp)
 80582c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80582cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80582cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80582d3:	b9 73 0a 00 00       	mov    $0xa73,%ecx
 80582d8:	e8 8b 20 00 00       	call   805a368 <__afl_maybe_log>
 80582dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80582e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80582e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80582e9:	8b 3c 24             	mov    (%esp),%edi
 80582ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 80582f0:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 80582f4:	c6 04 29 5c          	movb   $0x5c,(%ecx,%ebp,1)
 80582f8:	e9 ef e0 ff ff       	jmp    80563ec <quotearg_buffer_restyled+0x1d5c>
 80582fd:	8d 76 00             	lea    0x0(%esi),%esi
                 hard to imagine any locale that would use digits in
                 quotes, and set_custom_quoting is documented not to
                 accept them.  */
              if (i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')
                {
                  STORE ('0');
 8058300:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058304:	89 3c 24             	mov    %edi,(%esp)
 8058307:	89 54 24 04          	mov    %edx,0x4(%esp)
 805830b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805830f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058313:	b9 ab 21 00 00       	mov    $0x21ab,%ecx
 8058318:	e8 4b 20 00 00       	call   805a368 <__afl_maybe_log>
 805831d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058321:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058325:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058329:	8b 3c 24             	mov    (%esp),%edi
 805832c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058330:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 8058334:	c6 04 01 30          	movb   $0x30,(%ecx,%eax,1)
 8058338:	e9 03 d7 ff ff       	jmp    8055a40 <quotearg_buffer_restyled+0x13b0>
 805833d:	8d 76 00             	lea    0x0(%esi),%esi
 8058340:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058344:	89 3c 24             	mov    %edi,(%esp)
 8058347:	89 54 24 04          	mov    %edx,0x4(%esp)
 805834b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805834f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058353:	b9 dd 51 00 00       	mov    $0x51dd,%ecx
 8058358:	e8 0b 20 00 00       	call   805a368 <__afl_maybe_log>
 805835d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058361:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058365:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058369:	8b 3c 24             	mov    (%esp),%edi
 805836c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058370:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 8058374:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8058378:	0f b6 54 24 3b       	movzbl 0x3b(%esp),%edx
                                            argsize - (i + m), &mbstate);
                    if (bytes == 0)
                      break;
                    else if (bytes == (size_t) -1)
                      {
                        printable = false;
 805837d:	c6 44 24 20 00       	movb   $0x0,0x20(%esp)
 8058382:	e9 1a f7 ff ff       	jmp    8057aa1 <quotearg_buffer_restyled+0x3411>
 8058387:	90                   	nop
 8058388:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805838c:	89 3c 24             	mov    %edi,(%esp)
 805838f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058393:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058397:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805839b:	b9 ad 1a 00 00       	mov    $0x1aad,%ecx
 80583a0:	e8 c3 1f 00 00       	call   805a368 <__afl_maybe_log>
 80583a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80583a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80583ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80583b1:	8b 3c 24             	mov    (%esp),%edi
 80583b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80583b8:	89 d8                	mov    %ebx,%eax
 80583ba:	89 f1                	mov    %esi,%ecx
 80583bc:	8b 6c 24 30          	mov    0x30(%esp),%ebp
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 80583c0:	39 f8                	cmp    %edi,%eax
 80583c2:	0f b6 54 24 3b       	movzbl 0x3b(%esp),%edx
 80583c7:	8b 74 24 2c          	mov    0x2c(%esp),%esi
 80583cb:	8b 5c 24 3c          	mov    0x3c(%esp),%ebx
 80583cf:	0f 83 fb 07 00 00    	jae    8058bd0 <quotearg_buffer_restyled+0x4540>
 80583d5:	8d 76 00             	lea    0x0(%esi),%esi
 80583d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80583dc:	89 3c 24             	mov    %edi,(%esp)
 80583df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80583e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80583e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80583eb:	b9 d8 e2 00 00       	mov    $0xe2d8,%ecx
 80583f0:	e8 73 1f 00 00       	call   805a368 <__afl_maybe_log>
 80583f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80583f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80583fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058401:	8b 3c 24             	mov    (%esp),%edi
 8058404:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058408:	80 39 00             	cmpb   $0x0,(%ecx)
 805840b:	0f 84 bf 07 00 00    	je     8058bd0 <quotearg_buffer_restyled+0x4540>
 8058411:	8d 76 00             	lea    0x0(%esi),%esi
 8058414:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058418:	89 3c 24             	mov    %edi,(%esp)
 805841b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805841f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058423:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058427:	b9 99 34 00 00       	mov    $0x3499,%ecx
 805842c:	e8 37 1f 00 00       	call   805a368 <__afl_maybe_log>
 8058431:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058435:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058439:	8b 54 24 04          	mov    0x4(%esp),%edx
 805843d:	8b 3c 24             	mov    (%esp),%edi
 8058440:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058444:	8b 4c 24 24          	mov    0x24(%esp),%ecx
 8058448:	f7 d1                	not    %ecx
 805844a:	29 f1                	sub    %esi,%ecx
 805844c:	01 f9                	add    %edi,%ecx
 805844e:	83 e1 07             	and    $0x7,%ecx
 8058451:	0f 84 a1 04 00 00    	je     80588f8 <quotearg_buffer_restyled+0x4268>
 8058457:	90                   	nop
 8058458:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805845c:	89 3c 24             	mov    %edi,(%esp)
 805845f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058463:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058467:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805846b:	b9 fd b9 00 00       	mov    $0xb9fd,%ecx
 8058470:	e8 f3 1e 00 00       	call   805a368 <__afl_maybe_log>
 8058475:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058479:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805847d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058481:	8b 3c 24             	mov    (%esp),%edi
 8058484:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8058488:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 805848d:	8b 44 24 24          	mov    0x24(%esp),%eax
 8058491:	01 f0                	add    %esi,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058493:	39 c7                	cmp    %eax,%edi
 8058495:	0f 86 35 07 00 00    	jbe    8058bd0 <quotearg_buffer_restyled+0x4540>
 805849b:	90                   	nop
 805849c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80584a0:	89 3c 24             	mov    %edi,(%esp)
 80584a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80584a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80584ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80584af:	b9 f8 72 00 00       	mov    $0x72f8,%ecx
 80584b4:	e8 af 1e 00 00       	call   805a368 <__afl_maybe_log>
 80584b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80584bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80584c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80584c5:	8b 3c 24             	mov    (%esp),%edi
 80584c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80584cc:	8b 44 24 24          	mov    0x24(%esp),%eax
 80584d0:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 80584d4:	0f 84 f6 06 00 00    	je     8058bd0 <quotearg_buffer_restyled+0x4540>
 80584da:	66 90                	xchg   %ax,%ax
 80584dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80584e0:	89 3c 24             	mov    %edi,(%esp)
 80584e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80584e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80584eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80584ef:	b9 9a 07 00 00       	mov    $0x79a,%ecx
 80584f4:	e8 6f 1e 00 00       	call   805a368 <__afl_maybe_log>
 80584f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80584fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058501:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058505:	8b 3c 24             	mov    (%esp),%edi
 8058508:	8d 64 24 10          	lea    0x10(%esp),%esp
 805850c:	83 f9 01             	cmp    $0x1,%ecx
 805850f:	0f 84 e3 03 00 00    	je     80588f8 <quotearg_buffer_restyled+0x4268>
 8058515:	8d 76 00             	lea    0x0(%esi),%esi
 8058518:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805851c:	89 3c 24             	mov    %edi,(%esp)
 805851f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058523:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058527:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805852b:	b9 d3 21 00 00       	mov    $0x21d3,%ecx
 8058530:	e8 33 1e 00 00       	call   805a368 <__afl_maybe_log>
 8058535:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058539:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805853d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058541:	8b 3c 24             	mov    (%esp),%edi
 8058544:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058548:	83 f9 02             	cmp    $0x2,%ecx
 805854b:	0f 84 33 03 00 00    	je     8058884 <quotearg_buffer_restyled+0x41f4>
 8058551:	8d 76 00             	lea    0x0(%esi),%esi
 8058554:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058558:	89 3c 24             	mov    %edi,(%esp)
 805855b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805855f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058563:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058567:	b9 e4 14 00 00       	mov    $0x14e4,%ecx
 805856c:	e8 f7 1d 00 00       	call   805a368 <__afl_maybe_log>
 8058571:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058575:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058579:	8b 54 24 04          	mov    0x4(%esp),%edx
 805857d:	8b 3c 24             	mov    (%esp),%edi
 8058580:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058584:	83 f9 03             	cmp    $0x3,%ecx
 8058587:	0f 84 83 02 00 00    	je     8058810 <quotearg_buffer_restyled+0x4180>
 805858d:	8d 76 00             	lea    0x0(%esi),%esi
 8058590:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058594:	89 3c 24             	mov    %edi,(%esp)
 8058597:	89 54 24 04          	mov    %edx,0x4(%esp)
 805859b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805859f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80585a3:	b9 17 ea 00 00       	mov    $0xea17,%ecx
 80585a8:	e8 bb 1d 00 00       	call   805a368 <__afl_maybe_log>
 80585ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80585b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80585b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80585b9:	8b 3c 24             	mov    (%esp),%edi
 80585bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80585c0:	83 f9 04             	cmp    $0x4,%ecx
 80585c3:	0f 84 d3 01 00 00    	je     805879c <quotearg_buffer_restyled+0x410c>
 80585c9:	8d 76 00             	lea    0x0(%esi),%esi
 80585cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80585d0:	89 3c 24             	mov    %edi,(%esp)
 80585d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80585d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80585db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80585df:	b9 a6 97 00 00       	mov    $0x97a6,%ecx
 80585e4:	e8 7f 1d 00 00       	call   805a368 <__afl_maybe_log>
 80585e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80585ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80585f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80585f5:	8b 3c 24             	mov    (%esp),%edi
 80585f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80585fc:	83 f9 05             	cmp    $0x5,%ecx
 80585ff:	0f 84 23 01 00 00    	je     8058728 <quotearg_buffer_restyled+0x4098>
 8058605:	8d 76 00             	lea    0x0(%esi),%esi
 8058608:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805860c:	89 3c 24             	mov    %edi,(%esp)
 805860f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058613:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058617:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805861b:	b9 d3 df 00 00       	mov    $0xdfd3,%ecx
 8058620:	e8 43 1d 00 00       	call   805a368 <__afl_maybe_log>
 8058625:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058629:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805862d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058631:	8b 3c 24             	mov    (%esp),%edi
 8058634:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058638:	83 f9 06             	cmp    $0x6,%ecx
 805863b:	74 77                	je     80586b4 <quotearg_buffer_restyled+0x4024>
 805863d:	8d 76 00             	lea    0x0(%esi),%esi
 8058640:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058644:	89 3c 24             	mov    %edi,(%esp)
 8058647:	89 54 24 04          	mov    %edx,0x4(%esp)
 805864b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805864f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058653:	b9 37 f7 00 00       	mov    $0xf737,%ecx
 8058658:	e8 0b 1d 00 00       	call   805a368 <__afl_maybe_log>
 805865d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058661:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058665:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058669:	8b 3c 24             	mov    (%esp),%edi
 805866c:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8058670:	83 c0 01             	add    $0x1,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058673:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
                          m++;
 8058677:	89 44 24 24          	mov    %eax,0x24(%esp)
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 805867b:	0f 84 4f 05 00 00    	je     8058bd0 <quotearg_buffer_restyled+0x4540>
 8058681:	8d 76 00             	lea    0x0(%esi),%esi
 8058684:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058688:	89 3c 24             	mov    %edi,(%esp)
 805868b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805868f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058693:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058697:	b9 9a d8 00 00       	mov    $0xd89a,%ecx
 805869c:	e8 c7 1c 00 00       	call   805a368 <__afl_maybe_log>
 80586a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80586a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80586a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80586ad:	8b 3c 24             	mov    (%esp),%edi
 80586b0:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 80586b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80586b8:	89 3c 24             	mov    %edi,(%esp)
 80586bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80586bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80586c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80586c7:	b9 81 c4 00 00       	mov    $0xc481,%ecx
 80586cc:	e8 97 1c 00 00       	call   805a368 <__afl_maybe_log>
 80586d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80586d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80586d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80586dd:	8b 3c 24             	mov    (%esp),%edi
 80586e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80586e4:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 80586e9:	8b 4c 24 24          	mov    0x24(%esp),%ecx
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 80586ed:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 80586f1:	0f 84 d9 04 00 00    	je     8058bd0 <quotearg_buffer_restyled+0x4540>
 80586f7:	90                   	nop
 80586f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80586fc:	89 3c 24             	mov    %edi,(%esp)
 80586ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058703:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058707:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805870b:	b9 ba 79 00 00       	mov    $0x79ba,%ecx
 8058710:	e8 53 1c 00 00       	call   805a368 <__afl_maybe_log>
 8058715:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058719:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805871d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058721:	8b 3c 24             	mov    (%esp),%edi
 8058724:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8058728:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805872c:	89 3c 24             	mov    %edi,(%esp)
 805872f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058733:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058737:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805873b:	b9 fc 66 00 00       	mov    $0x66fc,%ecx
 8058740:	e8 23 1c 00 00       	call   805a368 <__afl_maybe_log>
 8058745:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058749:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805874d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058751:	8b 3c 24             	mov    (%esp),%edi
 8058754:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058758:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 805875d:	8b 44 24 24          	mov    0x24(%esp),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058761:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 8058765:	0f 84 65 04 00 00    	je     8058bd0 <quotearg_buffer_restyled+0x4540>
 805876b:	90                   	nop
 805876c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058770:	89 3c 24             	mov    %edi,(%esp)
 8058773:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058777:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805877b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805877f:	b9 64 3e 00 00       	mov    $0x3e64,%ecx
 8058784:	e8 df 1b 00 00       	call   805a368 <__afl_maybe_log>
 8058789:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805878d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058791:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058795:	8b 3c 24             	mov    (%esp),%edi
 8058798:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 805879c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80587a0:	89 3c 24             	mov    %edi,(%esp)
 80587a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80587a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80587ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80587af:	b9 b1 69 00 00       	mov    $0x69b1,%ecx
 80587b4:	e8 af 1b 00 00       	call   805a368 <__afl_maybe_log>
 80587b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80587bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80587c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80587c5:	8b 3c 24             	mov    (%esp),%edi
 80587c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80587cc:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 80587d1:	8b 4c 24 24          	mov    0x24(%esp),%ecx
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 80587d5:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 80587d9:	0f 84 f1 03 00 00    	je     8058bd0 <quotearg_buffer_restyled+0x4540>
 80587df:	90                   	nop
 80587e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80587e4:	89 3c 24             	mov    %edi,(%esp)
 80587e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80587eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80587ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80587f3:	b9 23 16 00 00       	mov    $0x1623,%ecx
 80587f8:	e8 6b 1b 00 00       	call   805a368 <__afl_maybe_log>
 80587fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058801:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058805:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058809:	8b 3c 24             	mov    (%esp),%edi
 805880c:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8058810:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058814:	89 3c 24             	mov    %edi,(%esp)
 8058817:	89 54 24 04          	mov    %edx,0x4(%esp)
 805881b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805881f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058823:	b9 ba e4 00 00       	mov    $0xe4ba,%ecx
 8058828:	e8 3b 1b 00 00       	call   805a368 <__afl_maybe_log>
 805882d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058831:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058835:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058839:	8b 3c 24             	mov    (%esp),%edi
 805883c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058840:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 8058845:	8b 44 24 24          	mov    0x24(%esp),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058849:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 805884d:	0f 84 7d 03 00 00    	je     8058bd0 <quotearg_buffer_restyled+0x4540>
 8058853:	90                   	nop
 8058854:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058858:	89 3c 24             	mov    %edi,(%esp)
 805885b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805885f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058863:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058867:	b9 eb 00 00 00       	mov    $0xeb,%ecx
 805886c:	e8 f7 1a 00 00       	call   805a368 <__afl_maybe_log>
 8058871:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058875:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058879:	8b 54 24 04          	mov    0x4(%esp),%edx
 805887d:	8b 3c 24             	mov    (%esp),%edi
 8058880:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 8058884:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058888:	89 3c 24             	mov    %edi,(%esp)
 805888b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805888f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058893:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058897:	b9 b0 33 00 00       	mov    $0x33b0,%ecx
 805889c:	e8 c7 1a 00 00       	call   805a368 <__afl_maybe_log>
 80588a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80588a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80588a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80588ad:	8b 3c 24             	mov    (%esp),%edi
 80588b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80588b4:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
 80588b9:	8b 4c 24 24          	mov    0x24(%esp),%ecx
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 80588bd:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 80588c1:	0f 84 09 03 00 00    	je     8058bd0 <quotearg_buffer_restyled+0x4540>
 80588c7:	90                   	nop
 80588c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80588cc:	89 3c 24             	mov    %edi,(%esp)
 80588cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80588d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80588d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80588db:	b9 63 92 00 00       	mov    $0x9263,%ecx
 80588e0:	e8 83 1a 00 00       	call   805a368 <__afl_maybe_log>
 80588e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80588e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80588ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80588f1:	8b 3c 24             	mov    (%esp),%edi
 80588f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80588f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80588fc:	89 3c 24             	mov    %edi,(%esp)
 80588ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058903:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058907:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805890b:	b9 73 2a 00 00       	mov    $0x2a73,%ecx
 8058910:	e8 53 1a 00 00       	call   805a368 <__afl_maybe_log>
 8058915:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058919:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805891d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058921:	8b 3c 24             	mov    (%esp),%edi
 8058924:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058928:	8b 44 24 24          	mov    0x24(%esp),%eax
 805892c:	89 6c 24 20          	mov    %ebp,0x20(%esp)
                          m++;
 8058930:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058934:	89 3c 24             	mov    %edi,(%esp)
 8058937:	89 54 24 04          	mov    %edx,0x4(%esp)
 805893b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805893f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058943:	b9 62 eb 00 00       	mov    $0xeb62,%ecx
 8058948:	e8 1b 1a 00 00       	call   805a368 <__afl_maybe_log>
 805894d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058951:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058955:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058959:	8b 3c 24             	mov    (%esp),%edi
 805895c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058960:	8d 48 01             	lea    0x1(%eax),%ecx
 8058963:	8d 2c 0e             	lea    (%esi,%ecx,1),%ebp
 8058966:	89 c8                	mov    %ecx,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058968:	39 ef                	cmp    %ebp,%edi
 805896a:	0f 86 28 02 00 00    	jbe    8058b98 <quotearg_buffer_restyled+0x4508>
 8058970:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058974:	89 3c 24             	mov    %edi,(%esp)
 8058977:	89 54 24 04          	mov    %edx,0x4(%esp)
 805897b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805897f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058983:	b9 8d 52 00 00       	mov    $0x528d,%ecx
 8058988:	e8 db 19 00 00       	call   805a368 <__afl_maybe_log>
 805898d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058991:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058995:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058999:	8b 3c 24             	mov    (%esp),%edi
 805899c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80589a0:	80 3c 0b 00          	cmpb   $0x0,(%ebx,%ecx,1)
 80589a4:	0f 84 ee 01 00 00    	je     8058b98 <quotearg_buffer_restyled+0x4508>
 80589aa:	66 90                	xchg   %ax,%ax
 80589ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80589b0:	89 3c 24             	mov    %edi,(%esp)
 80589b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80589b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80589bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80589bf:	b9 13 f2 00 00       	mov    $0xf213,%ecx
 80589c4:	e8 9f 19 00 00       	call   805a368 <__afl_maybe_log>
 80589c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80589cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80589d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80589d5:	8b 3c 24             	mov    (%esp),%edi
 80589d8:	8d 64 24 10          	lea    0x10(%esp),%esp
                          m++;
 80589dc:	83 c0 01             	add    $0x1,%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 80589df:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
 80589e3:	0f 84 af 01 00 00    	je     8058b98 <quotearg_buffer_restyled+0x4508>
 80589e9:	8d 76 00             	lea    0x0(%esi),%esi
 80589ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80589f0:	89 3c 24             	mov    %edi,(%esp)
 80589f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80589f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80589fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80589ff:	b9 f0 52 00 00       	mov    $0x52f0,%ecx
 8058a04:	e8 5f 19 00 00       	call   805a368 <__afl_maybe_log>
 8058a09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058a0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058a11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058a15:	8b 3c 24             	mov    (%esp),%edi
 8058a18:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058a1c:	80 7c 0b 02 00       	cmpb   $0x0,0x2(%ebx,%ecx,1)
                          m++;
 8058a21:	8d 41 02             	lea    0x2(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058a24:	0f 84 6e 01 00 00    	je     8058b98 <quotearg_buffer_restyled+0x4508>
 8058a2a:	66 90                	xchg   %ax,%ax
 8058a2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058a30:	89 3c 24             	mov    %edi,(%esp)
 8058a33:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058a37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058a3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058a3f:	b9 70 4b 00 00       	mov    $0x4b70,%ecx
 8058a44:	e8 1f 19 00 00       	call   805a368 <__afl_maybe_log>
 8058a49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058a4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058a51:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058a55:	8b 3c 24             	mov    (%esp),%edi
 8058a58:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058a5c:	80 7c 0b 03 00       	cmpb   $0x0,0x3(%ebx,%ecx,1)
                          m++;
 8058a61:	8d 41 03             	lea    0x3(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058a64:	0f 84 2e 01 00 00    	je     8058b98 <quotearg_buffer_restyled+0x4508>
 8058a6a:	66 90                	xchg   %ax,%ax
 8058a6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058a70:	89 3c 24             	mov    %edi,(%esp)
 8058a73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058a77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058a7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058a7f:	b9 f3 c4 00 00       	mov    $0xc4f3,%ecx
 8058a84:	e8 df 18 00 00       	call   805a368 <__afl_maybe_log>
 8058a89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058a8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058a91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058a95:	8b 3c 24             	mov    (%esp),%edi
 8058a98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058a9c:	80 7c 0b 04 00       	cmpb   $0x0,0x4(%ebx,%ecx,1)
                          m++;
 8058aa1:	8d 41 04             	lea    0x4(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058aa4:	0f 84 ee 00 00 00    	je     8058b98 <quotearg_buffer_restyled+0x4508>
 8058aaa:	66 90                	xchg   %ax,%ax
 8058aac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058ab0:	89 3c 24             	mov    %edi,(%esp)
 8058ab3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058ab7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058abb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058abf:	b9 cf 2d 00 00       	mov    $0x2dcf,%ecx
 8058ac4:	e8 9f 18 00 00       	call   805a368 <__afl_maybe_log>
 8058ac9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058acd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058ad1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058ad5:	8b 3c 24             	mov    (%esp),%edi
 8058ad8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058adc:	80 7c 0b 05 00       	cmpb   $0x0,0x5(%ebx,%ecx,1)
                          m++;
 8058ae1:	8d 41 05             	lea    0x5(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058ae4:	0f 84 ae 00 00 00    	je     8058b98 <quotearg_buffer_restyled+0x4508>
 8058aea:	66 90                	xchg   %ax,%ax
 8058aec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058af0:	89 3c 24             	mov    %edi,(%esp)
 8058af3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058af7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058afb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058aff:	b9 92 59 00 00       	mov    $0x5992,%ecx
 8058b04:	e8 5f 18 00 00       	call   805a368 <__afl_maybe_log>
 8058b09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058b0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058b11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058b15:	8b 3c 24             	mov    (%esp),%edi
 8058b18:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058b1c:	80 7c 0b 06 00       	cmpb   $0x0,0x6(%ebx,%ecx,1)
                          m++;
 8058b21:	8d 41 06             	lea    0x6(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058b24:	74 72                	je     8058b98 <quotearg_buffer_restyled+0x4508>
 8058b26:	66 90                	xchg   %ax,%ax
 8058b28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058b2c:	89 3c 24             	mov    %edi,(%esp)
 8058b2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058b33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058b37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058b3b:	b9 c4 75 00 00       	mov    $0x75c4,%ecx
 8058b40:	e8 23 18 00 00       	call   805a368 <__afl_maybe_log>
 8058b45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058b49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058b4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058b51:	8b 3c 24             	mov    (%esp),%edi
 8058b54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058b58:	80 7c 0b 07 00       	cmpb   $0x0,0x7(%ebx,%ecx,1)
                          m++;
 8058b5d:	8d 41 07             	lea    0x7(%ecx),%eax
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
                        while (i + m < argsize && arg[i + m])
 8058b60:	0f 85 ca fd ff ff    	jne    8058930 <quotearg_buffer_restyled+0x42a0>
 8058b66:	66 90                	xchg   %ax,%ax
 8058b68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058b6c:	89 3c 24             	mov    %edi,(%esp)
 8058b6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058b73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058b77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058b7b:	b9 30 df 00 00       	mov    $0xdf30,%ecx
 8058b80:	e8 e3 17 00 00       	call   805a368 <__afl_maybe_log>
 8058b85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058b89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058b8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058b91:	8b 3c 24             	mov    (%esp),%edi
 8058b94:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058b98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058b9c:	89 3c 24             	mov    %edi,(%esp)
 8058b9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058ba3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058ba7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058bab:	b9 f1 e6 00 00       	mov    $0xe6f1,%ecx
 8058bb0:	e8 b3 17 00 00       	call   805a368 <__afl_maybe_log>
 8058bb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058bb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058bbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058bc1:	8b 3c 24             	mov    (%esp),%edi
 8058bc4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058bc8:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 8058bcc:	89 44 24 24          	mov    %eax,0x24(%esp)
                        printable = false;
                        break;
                      }
                    else if (bytes == (size_t) -2)
                      {
                        printable = false;
 8058bd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058bd4:	89 3c 24             	mov    %edi,(%esp)
 8058bd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058bdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058bdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058be3:	b9 03 15 00 00       	mov    $0x1503,%ecx
 8058be8:	e8 7b 17 00 00       	call   805a368 <__afl_maybe_log>
 8058bed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058bf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058bf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058bf9:	8b 3c 24             	mov    (%esp),%edi
 8058bfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058c00:	c6 44 24 20 00       	movb   $0x0,0x20(%esp)
 8058c05:	e9 97 ee ff ff       	jmp    8057aa1 <quotearg_buffer_restyled+0x3411>
 8058c0a:	66 90                	xchg   %ax,%ax
      elide_outer_quotes = true;
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
 8058c0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058c10:	89 3c 24             	mov    %edi,(%esp)
 8058c13:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058c17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058c1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058c1f:	b9 3f b0 00 00       	mov    $0xb03f,%ecx
 8058c24:	e8 3f 17 00 00       	call   805a368 <__afl_maybe_log>
 8058c29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058c2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058c31:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058c35:	8b 3c 24             	mov    (%esp),%edi
 8058c38:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058c3c:	c6 44 24 0f 01       	movb   $0x1,0xf(%esp)
      quote_string = "\"";
      quote_string_len = 1;
 8058c41:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8058c48:	00 
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 8058c49:	31 ed                	xor    %ebp,%ebp
      /* Fall through.  */
    case c_quoting_style:
      if (!elide_outer_quotes)
        STORE ('"');
      backslash_escapes = true;
      quote_string = "\"";
 8058c4b:	c7 44 24 28 55 38 06 	movl   $0x8063855,0x28(%esp)
 8058c52:	08 
 8058c53:	e9 00 bb ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
{
  size_t i;
  size_t len = 0;
  char const *quote_string = 0;
  size_t quote_string_len = 0;
  bool backslash_escapes = false;
 8058c58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058c5c:	89 3c 24             	mov    %edi,(%esp)
 8058c5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058c63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058c67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058c6b:	b9 9b 0a 00 00       	mov    $0xa9b,%ecx
 8058c70:	e8 f3 16 00 00       	call   805a368 <__afl_maybe_log>
 8058c75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058c79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058c7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058c81:	8b 3c 24             	mov    (%esp),%edi
 8058c84:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058c88:	c6 44 24 0f 00       	movb   $0x0,0xf(%esp)
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
      quote_string_len = 1;
 8058c8d:	c7 44 24 18 01 00 00 	movl   $0x1,0x18(%esp)
 8058c94:	00 
                          unsigned int const *quote_these_too,
                          char const *left_quote,
                          char const *right_quote)
{
  size_t i;
  size_t len = 0;
 8058c95:	31 ed                	xor    %ebp,%ebp
      elide_outer_quotes = true;
      /* Fall through.  */
    case shell_always_quoting_style:
      if (!elide_outer_quotes)
        STORE ('\'');
      quote_string = "'";
 8058c97:	c7 44 24 28 53 38 06 	movl   $0x8063853,0x28(%esp)
 8058c9e:	08 
 8058c9f:	e9 b4 ba ff ff       	jmp    8054758 <quotearg_buffer_restyled+0xc8>
 8058ca4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8058caa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

08058cb0 <quotearg_n_options>:
   N must be nonnegative.  N is deliberately declared with type "int"
   to allow for future extensions (using negative values).  */
static char *
quotearg_n_options (int n, char const *arg, size_t argsize,
                    struct quoting_options const *options)
{
 8058cb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058cb4:	89 3c 24             	mov    %edi,(%esp)
 8058cb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058cbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058cbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058cc3:	b9 a2 42 00 00       	mov    $0x42a2,%ecx
 8058cc8:	e8 9b 16 00 00       	call   805a368 <__afl_maybe_log>
 8058ccd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058cd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058cd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058cd9:	8b 3c 24             	mov    (%esp),%edi
 8058cdc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058ce0:	55                   	push   %ebp
 8058ce1:	57                   	push   %edi
 8058ce2:	89 c7                	mov    %eax,%edi
 8058ce4:	56                   	push   %esi
 8058ce5:	53                   	push   %ebx
 8058ce6:	83 ec 2c             	sub    $0x2c,%esp
 8058ce9:	89 54 24 08          	mov    %edx,0x8(%esp)
 8058ced:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  int e = errno;
 8058cf1:	e8 da 06 ff ff       	call   80493d0 <__errno_location@plt>
 8058cf6:	89 44 24 10          	mov    %eax,0x10(%esp)
 8058cfa:	8b 00                	mov    (%eax),%eax

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;

  if (n < 0)
 8058cfc:	85 ff                	test   %edi,%edi
   N must be nonnegative.  N is deliberately declared with type "int"
   to allow for future extensions (using negative values).  */
static char *
quotearg_n_options (int n, char const *arg, size_t argsize,
                    struct quoting_options const *options)
{
 8058cfe:	8b 5c 24 40          	mov    0x40(%esp),%ebx
  int e = errno;

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;
 8058d02:	8b 35 90 72 06 08    	mov    0x8067290,%esi
   to allow for future extensions (using negative values).  */
static char *
quotearg_n_options (int n, char const *arg, size_t argsize,
                    struct quoting_options const *options)
{
  int e = errno;
 8058d08:	89 44 24 14          	mov    %eax,0x14(%esp)

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;

  if (n < 0)
 8058d0c:	0f 88 28 03 00 00    	js     805903a <quotearg_n_options+0x38a>
 8058d12:	66 90                	xchg   %ax,%ax
 8058d14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058d18:	89 3c 24             	mov    %edi,(%esp)
 8058d1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058d1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058d23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058d27:	b9 0f 35 00 00       	mov    $0x350f,%ecx
 8058d2c:	e8 37 16 00 00       	call   805a368 <__afl_maybe_log>
 8058d31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058d35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058d39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058d3d:	8b 3c 24             	mov    (%esp),%edi
 8058d40:	8d 64 24 10          	lea    0x10(%esp),%esp
    abort ();

  if (nslots <= n0)
 8058d44:	3b 3d 9c 72 06 08    	cmp    0x806729c,%edi
 8058d4a:	0f 82 1d 01 00 00    	jb     8058e6d <quotearg_n_options+0x1bd>
 8058d50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058d54:	89 3c 24             	mov    %edi,(%esp)
 8058d57:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058d5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058d5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058d63:	b9 a9 7c 00 00       	mov    $0x7ca9,%ecx
 8058d68:	e8 fb 15 00 00       	call   805a368 <__afl_maybe_log>
 8058d6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058d71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058d75:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058d79:	8b 3c 24             	mov    (%esp),%edi
 8058d7c:	8d 64 24 10          	lea    0x10(%esp),%esp
      /* FIXME: technically, the type of n1 should be 'unsigned int',
         but that evokes an unsuppressible warning from gcc-4.0.1 and
         older.  If gcc ever provides an option to suppress that warning,
         revert to the original type, so that the test in xalloc_oversized
         is once again performed only at compile time.  */
      size_t n1 = n0 + 1;
 8058d80:	8d 6f 01             	lea    0x1(%edi),%ebp
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
 8058d83:	81 fd ff ff ff 1f    	cmp    $0x1fffffff,%ebp
 8058d89:	0f 87 e2 02 00 00    	ja     8059071 <quotearg_n_options+0x3c1>
 8058d8f:	90                   	nop
 8058d90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058d94:	89 3c 24             	mov    %edi,(%esp)
 8058d97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058d9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058d9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058da3:	b9 aa 11 00 00       	mov    $0x11aa,%ecx
 8058da8:	e8 bb 15 00 00       	call   805a368 <__afl_maybe_log>
 8058dad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058db1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058db5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058db9:	8b 3c 24             	mov    (%esp),%edi
 8058dbc:	8d 64 24 10          	lea    0x10(%esp),%esp
        xalloc_die ();

      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
 8058dc0:	81 fe 94 72 06 08    	cmp    $0x8067294,%esi
 8058dc6:	8d 14 ed 00 00 00 00 	lea    0x0(,%ebp,8),%edx
 8058dcd:	0f 84 3d 02 00 00    	je     8059010 <quotearg_n_options+0x360>
 8058dd3:	90                   	nop
 8058dd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058dd8:	89 3c 24             	mov    %edi,(%esp)
 8058ddb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058ddf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058de3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058de7:	b9 3c e9 00 00       	mov    $0xe93c,%ecx
 8058dec:	e8 77 15 00 00       	call   805a368 <__afl_maybe_log>
 8058df1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058df5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058df9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058dfd:	8b 3c 24             	mov    (%esp),%edi
 8058e00:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058e04:	83 ec 08             	sub    $0x8,%esp
 8058e07:	52                   	push   %edx
 8058e08:	56                   	push   %esi
 8058e09:	e8 b2 24 00 00       	call   805b2c0 <xrealloc>
 8058e0e:	83 c4 10             	add    $0x10,%esp
 8058e11:	89 c6                	mov    %eax,%esi
 8058e13:	a3 90 72 06 08       	mov    %eax,0x8067290
      if (preallocated)
        *sv = slotvec0;
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
 8058e18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058e1c:	89 3c 24             	mov    %edi,(%esp)
 8058e1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058e23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058e27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058e2b:	b9 ce 9a 00 00       	mov    $0x9ace,%ecx
 8058e30:	e8 33 15 00 00       	call   805a368 <__afl_maybe_log>
 8058e35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058e39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058e3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058e41:	8b 3c 24             	mov    (%esp),%edi
 8058e44:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058e48:	8b 15 9c 72 06 08    	mov    0x806729c,%edx
 8058e4e:	89 e9                	mov    %ebp,%ecx
 8058e50:	83 ec 04             	sub    $0x4,%esp
 8058e53:	29 d1                	sub    %edx,%ecx
 8058e55:	8d 04 d6             	lea    (%esi,%edx,8),%eax
 8058e58:	c1 e1 03             	shl    $0x3,%ecx
 8058e5b:	51                   	push   %ecx
 8058e5c:	6a 00                	push   $0x0
 8058e5e:	50                   	push   %eax
 8058e5f:	e8 4c 05 ff ff       	call   80493b0 <memset@plt>
      nslots = n1;
 8058e64:	89 2d 9c 72 06 08    	mov    %ebp,0x806729c
 8058e6a:	83 c4 10             	add    $0x10,%esp
 8058e6d:	8d 76 00             	lea    0x0(%esi),%esi

  {
    size_t size = sv[n].size;
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
 8058e70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058e74:	89 3c 24             	mov    %edi,(%esp)
 8058e77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058e7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058e7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058e83:	b9 df a6 00 00       	mov    $0xa6df,%ecx
 8058e88:	e8 db 14 00 00       	call   805a368 <__afl_maybe_log>
 8058e8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058e91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058e95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058e99:	8b 3c 24             	mov    (%esp),%edi
 8058e9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058ea0:	8b 53 04             	mov    0x4(%ebx),%edx
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
                                             options->style, flags,
                                             options->quote_these_too,
 8058ea3:	8d 4b 08             	lea    0x8(%ebx),%ecx
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
      nslots = n1;
    }

  {
    size_t size = sv[n].size;
 8058ea6:	8d 3c fe             	lea    (%esi,%edi,8),%edi
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
 8058ea9:	83 ec 08             	sub    $0x8,%esp
                                             options->style, flags,
                                             options->quote_these_too,
 8058eac:	89 4c 24 24          	mov    %ecx,0x24(%esp)
      memset (sv + nslots, 0, (n1 - nslots) * sizeof *sv);
      nslots = n1;
    }

  {
    size_t size = sv[n].size;
 8058eb0:	8b 2f                	mov    (%edi),%ebp
    char *val = sv[n].val;
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
 8058eb2:	83 ca 01             	or     $0x1,%edx
      nslots = n1;
    }

  {
    size_t size = sv[n].size;
    char *val = sv[n].val;
 8058eb5:	8b 77 04             	mov    0x4(%edi),%esi
    /* Elide embedded null bytes since we don't return a size.  */
    int flags = options->flags | QA_ELIDE_NULL_BYTES;
 8058eb8:	89 54 24 20          	mov    %edx,0x20(%esp)
    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,
 8058ebc:	ff 73 2c             	pushl  0x2c(%ebx)
 8058ebf:	ff 73 28             	pushl  0x28(%ebx)
 8058ec2:	51                   	push   %ecx
 8058ec3:	52                   	push   %edx
 8058ec4:	ff 33                	pushl  (%ebx)
 8058ec6:	89 ea                	mov    %ebp,%edx
 8058ec8:	ff 74 24 28          	pushl  0x28(%esp)
 8058ecc:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 8058ed0:	89 f0                	mov    %esi,%eax
 8058ed2:	e8 b9 b7 ff ff       	call   8054690 <quotearg_buffer_restyled>
                                             options->style, flags,
                                             options->quote_these_too,
                                             options->left_quote,
                                             options->right_quote);

    if (size <= qsize)
 8058ed7:	83 c4 20             	add    $0x20,%esp
 8058eda:	39 c5                	cmp    %eax,%ebp
 8058edc:	0f 87 e2 00 00 00    	ja     8058fc4 <quotearg_n_options+0x314>
 8058ee2:	66 90                	xchg   %ax,%ax
 8058ee4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058ee8:	89 3c 24             	mov    %edi,(%esp)
 8058eeb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058eef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058ef3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058ef7:	b9 dc 78 00 00       	mov    $0x78dc,%ecx
 8058efc:	e8 67 14 00 00       	call   805a368 <__afl_maybe_log>
 8058f01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058f05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058f09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058f0d:	8b 3c 24             	mov    (%esp),%edi
 8058f10:	8d 64 24 10          	lea    0x10(%esp),%esp
      {
        sv[n].size = size = qsize + 1;
 8058f14:	8d 68 01             	lea    0x1(%eax),%ebp
        if (val != slot0)
 8058f17:	81 fe 40 7c 43 08    	cmp    $0x8437c40,%esi
                                             options->left_quote,
                                             options->right_quote);

    if (size <= qsize)
      {
        sv[n].size = size = qsize + 1;
 8058f1d:	89 2f                	mov    %ebp,(%edi)
        if (val != slot0)
 8058f1f:	74 3f                	je     8058f60 <quotearg_n_options+0x2b0>
 8058f21:	8d 76 00             	lea    0x0(%esi),%esi
 8058f24:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058f28:	89 3c 24             	mov    %edi,(%esp)
 8058f2b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058f2f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058f33:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058f37:	b9 0e e0 00 00       	mov    $0xe00e,%ecx
 8058f3c:	e8 27 14 00 00       	call   805a368 <__afl_maybe_log>
 8058f41:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058f45:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058f49:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058f4d:	8b 3c 24             	mov    (%esp),%edi
 8058f50:	8d 64 24 10          	lea    0x10(%esp),%esp
          free (val);
 8058f54:	83 ec 0c             	sub    $0xc,%esp
 8058f57:	56                   	push   %esi
 8058f58:	e8 03 02 ff ff       	call   8049160 <free@plt>
 8058f5d:	83 c4 10             	add    $0x10,%esp
XALLOC_INLINE char *xcharalloc (size_t n)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1));
XALLOC_INLINE char *
xcharalloc (size_t n)
{
  return XNMALLOC (n, char);
 8058f60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058f64:	89 3c 24             	mov    %edi,(%esp)
 8058f67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058f6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058f6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058f73:	b9 9c c5 00 00       	mov    $0xc59c,%ecx
 8058f78:	e8 eb 13 00 00       	call   805a368 <__afl_maybe_log>
 8058f7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058f81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058f85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058f89:	8b 3c 24             	mov    (%esp),%edi
 8058f8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058f90:	83 ec 0c             	sub    $0xc,%esp
 8058f93:	55                   	push   %ebp
 8058f94:	e8 f7 20 00 00       	call   805b090 <xmalloc>
        sv[n].val = val = xcharalloc (size);
 8058f99:	89 47 04             	mov    %eax,0x4(%edi)
 8058f9c:	89 c6                	mov    %eax,%esi
        quotearg_buffer_restyled (val, size, arg, argsize, options->style,
 8058f9e:	58                   	pop    %eax
 8058f9f:	5a                   	pop    %edx
 8058fa0:	ff 73 2c             	pushl  0x2c(%ebx)
 8058fa3:	ff 73 28             	pushl  0x28(%ebx)
 8058fa6:	89 ea                	mov    %ebp,%edx
 8058fa8:	ff 74 24 2c          	pushl  0x2c(%esp)
 8058fac:	ff 74 24 2c          	pushl  0x2c(%esp)
 8058fb0:	89 f0                	mov    %esi,%eax
 8058fb2:	ff 33                	pushl  (%ebx)
 8058fb4:	ff 74 24 28          	pushl  0x28(%esp)
 8058fb8:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 8058fbc:	e8 cf b6 ff ff       	call   8054690 <quotearg_buffer_restyled>
 8058fc1:	83 c4 20             	add    $0x20,%esp
                                  flags, options->quote_these_too,
                                  options->left_quote,
                                  options->right_quote);
      }

    errno = e;
 8058fc4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8058fc8:	89 3c 24             	mov    %edi,(%esp)
 8058fcb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8058fcf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8058fd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8058fd7:	b9 90 1a 00 00       	mov    $0x1a90,%ecx
 8058fdc:	e8 87 13 00 00       	call   805a368 <__afl_maybe_log>
 8058fe1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8058fe5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8058fe9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8058fed:	8b 3c 24             	mov    (%esp),%edi
 8058ff0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8058ff4:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8058ff8:	8b 44 24 14          	mov    0x14(%esp),%eax
 8058ffc:	89 03                	mov    %eax,(%ebx)
    return val;
  }
}
 8058ffe:	83 c4 2c             	add    $0x2c,%esp
 8059001:	89 f0                	mov    %esi,%eax
 8059003:	5b                   	pop    %ebx
 8059004:	5e                   	pop    %esi
 8059005:	5f                   	pop    %edi
 8059006:	5d                   	pop    %ebp
 8059007:	c3                   	ret    
 8059008:	90                   	nop
 8059009:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
        xalloc_die ();

      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
 8059010:	83 ec 08             	sub    $0x8,%esp
 8059013:	52                   	push   %edx
 8059014:	6a 00                	push   $0x0
 8059016:	e8 a5 22 00 00       	call   805b2c0 <xrealloc>
      if (preallocated)
        *sv = slotvec0;
 805901b:	8b 0d 94 72 06 08    	mov    0x8067294,%ecx
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
        xalloc_die ();

      slotvec = sv = xrealloc (preallocated ? NULL : sv, n1 * sizeof *sv);
 8059021:	89 c6                	mov    %eax,%esi
 8059023:	a3 90 72 06 08       	mov    %eax,0x8067290
      if (preallocated)
        *sv = slotvec0;
 8059028:	a1 98 72 06 08       	mov    0x8067298,%eax
 805902d:	83 c4 10             	add    $0x10,%esp
 8059030:	89 0e                	mov    %ecx,(%esi)
 8059032:	89 46 04             	mov    %eax,0x4(%esi)
 8059035:	e9 de fd ff ff       	jmp    8058e18 <quotearg_n_options+0x168>
 805903a:	66 90                	xchg   %ax,%ax

  unsigned int n0 = n;
  struct slotvec *sv = slotvec;

  if (n < 0)
    abort ();
 805903c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059040:	89 3c 24             	mov    %edi,(%esp)
 8059043:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059047:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805904b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805904f:	b9 77 a6 00 00       	mov    $0xa677,%ecx
 8059054:	e8 0f 13 00 00       	call   805a368 <__afl_maybe_log>
 8059059:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805905d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059061:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059065:	8b 3c 24             	mov    (%esp),%edi
 8059068:	8d 64 24 10          	lea    0x10(%esp),%esp
 805906c:	e8 6f 04 ff ff       	call   80494e0 <abort@plt>
 8059071:	8d 76 00             	lea    0x0(%esi),%esi
         is once again performed only at compile time.  */
      size_t n1 = n0 + 1;
      bool preallocated = (sv == &slotvec0);

      if (xalloc_oversized (n1, sizeof *sv))
        xalloc_die ();
 8059074:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059078:	89 3c 24             	mov    %edi,(%esp)
 805907b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805907f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059083:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059087:	b9 5b ef 00 00       	mov    $0xef5b,%ecx
 805908c:	e8 d7 12 00 00       	call   805a368 <__afl_maybe_log>
 8059091:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059095:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059099:	8b 54 24 04          	mov    0x4(%esp),%edx
 805909d:	8b 3c 24             	mov    (%esp),%edi
 80590a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80590a4:	e8 c7 2a 00 00       	call   805bb70 <xalloc_die>
 80590a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

080590b0 <clone_quoting_options>:
/* Allocate a new set of quoting options, with contents initially identical
   to O if O is not null, or to the default if O is null.
   It is the caller's responsibility to free the result.  */
struct quoting_options *
clone_quoting_options (struct quoting_options *o)
{
 80590b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80590b4:	89 3c 24             	mov    %edi,(%esp)
 80590b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80590bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80590bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80590c3:	b9 7a bb 00 00       	mov    $0xbb7a,%ecx
 80590c8:	e8 9b 12 00 00       	call   805a368 <__afl_maybe_log>
 80590cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80590d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80590d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80590d9:	8b 3c 24             	mov    (%esp),%edi
 80590dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80590e0:	57                   	push   %edi
 80590e1:	56                   	push   %esi
 80590e2:	53                   	push   %ebx
 80590e3:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  int e = errno;
 80590e7:	e8 e4 02 ff ff       	call   80493d0 <__errno_location@plt>
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
 80590ec:	85 db                	test   %ebx,%ebx
   to O if O is not null, or to the default if O is null.
   It is the caller's responsibility to free the result.  */
struct quoting_options *
clone_quoting_options (struct quoting_options *o)
{
  int e = errno;
 80590ee:	8b 38                	mov    (%eax),%edi
 80590f0:	89 c6                	mov    %eax,%esi
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
 80590f2:	b8 40 7d 43 08       	mov    $0x8437d40,%eax
 80590f7:	0f 44 d8             	cmove  %eax,%ebx
 80590fa:	83 ec 08             	sub    $0x8,%esp
 80590fd:	6a 30                	push   $0x30
 80590ff:	53                   	push   %ebx
 8059100:	e8 6b 28 00 00       	call   805b970 <xmemdup>
                                       sizeof *o);
  errno = e;
  return p;
 8059105:	83 c4 10             	add    $0x10,%esp
clone_quoting_options (struct quoting_options *o)
{
  int e = errno;
  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,
                                       sizeof *o);
  errno = e;
 8059108:	89 3e                	mov    %edi,(%esi)
  return p;
}
 805910a:	5b                   	pop    %ebx
 805910b:	5e                   	pop    %esi
 805910c:	5f                   	pop    %edi
 805910d:	c3                   	ret    
 805910e:	66 90                	xchg   %ax,%ax

08059110 <get_quoting_style>:

/* Get the value of O's quoting style.  If O is null, use the default.  */
enum quoting_style
get_quoting_style (struct quoting_options *o)
{
 8059110:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059114:	89 3c 24             	mov    %edi,(%esp)
 8059117:	89 54 24 04          	mov    %edx,0x4(%esp)
 805911b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805911f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059123:	b9 ae 57 00 00       	mov    $0x57ae,%ecx
 8059128:	e8 3b 12 00 00       	call   805a368 <__afl_maybe_log>
 805912d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059131:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059135:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059139:	8b 3c 24             	mov    (%esp),%edi
 805913c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059140:	8b 44 24 04          	mov    0x4(%esp),%eax
  return (o ? o : &default_quoting_options)->style;
 8059144:	ba 40 7d 43 08       	mov    $0x8437d40,%edx
 8059149:	85 c0                	test   %eax,%eax
 805914b:	0f 44 c2             	cmove  %edx,%eax
 805914e:	8b 00                	mov    (%eax),%eax
}
 8059150:	c3                   	ret    
 8059151:	eb 0d                	jmp    8059160 <set_quoting_style>
 8059153:	90                   	nop
 8059154:	90                   	nop
 8059155:	90                   	nop
 8059156:	90                   	nop
 8059157:	90                   	nop
 8059158:	90                   	nop
 8059159:	90                   	nop
 805915a:	90                   	nop
 805915b:	90                   	nop
 805915c:	90                   	nop
 805915d:	90                   	nop
 805915e:	90                   	nop
 805915f:	90                   	nop

08059160 <set_quoting_style>:

/* In O (or in the default if O is null),
   set the value of the quoting style to S.  */
void
set_quoting_style (struct quoting_options *o, enum quoting_style s)
{
 8059160:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059164:	89 3c 24             	mov    %edi,(%esp)
 8059167:	89 54 24 04          	mov    %edx,0x4(%esp)
 805916b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805916f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059173:	b9 9b 9f 00 00       	mov    $0x9f9b,%ecx
 8059178:	e8 eb 11 00 00       	call   805a368 <__afl_maybe_log>
 805917d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059181:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059185:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059189:	8b 3c 24             	mov    (%esp),%edi
 805918c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059190:	8b 44 24 04          	mov    0x4(%esp),%eax
  (o ? o : &default_quoting_options)->style = s;
 8059194:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059198:	ba 40 7d 43 08       	mov    $0x8437d40,%edx
 805919d:	85 c0                	test   %eax,%eax
 805919f:	0f 44 c2             	cmove  %edx,%eax
 80591a2:	89 08                	mov    %ecx,(%eax)
 80591a4:	c3                   	ret    
 80591a5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80591a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080591b0 <set_char_quoting>:
   Return the old value.  Currently, the only values defined for I are
   0 (the default) and 1 (which means to quote the character even if
   it would not otherwise be quoted).  */
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
 80591b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80591b4:	89 3c 24             	mov    %edi,(%esp)
 80591b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80591bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80591bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80591c3:	b9 2d 04 00 00       	mov    $0x42d,%ecx
 80591c8:	e8 9b 11 00 00       	call   805a368 <__afl_maybe_log>
 80591cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80591d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80591d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80591d9:	8b 3c 24             	mov    (%esp),%edi
 80591dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80591e0:	56                   	push   %esi
 80591e1:	53                   	push   %ebx
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 80591e2:	b9 40 7d 43 08       	mov    $0x8437d40,%ecx
   Return the old value.  Currently, the only values defined for I are
   0 (the default) and 1 (which means to quote the character even if
   it would not otherwise be quoted).  */
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
 80591e7:	8b 54 24 0c          	mov    0xc(%esp),%edx
 80591eb:	8b 44 24 10          	mov    0x10(%esp),%eax
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 80591ef:	85 d2                	test   %edx,%edx
 80591f1:	0f 44 d1             	cmove  %ecx,%edx
  int shift = uc % INT_BITS;
 80591f4:	89 c1                	mov    %eax,%ecx
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 80591f6:	c0 e8 05             	shr    $0x5,%al
 80591f9:	0f b6 d8             	movzbl %al,%ebx
  int shift = uc % INT_BITS;
 80591fc:	83 e1 1f             	and    $0x1f,%ecx
 80591ff:	8d 34 9a             	lea    (%edx,%ebx,4),%esi
  int r = (*p >> shift) & 1;
  *p ^= ((i & 1) ^ r) << shift;
 8059202:	8b 54 24 14          	mov    0x14(%esp),%edx
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  int shift = uc % INT_BITS;
  int r = (*p >> shift) & 1;
 8059206:	8b 5e 08             	mov    0x8(%esi),%ebx
 8059209:	89 d8                	mov    %ebx,%eax
 805920b:	d3 e8                	shr    %cl,%eax
  *p ^= ((i & 1) ^ r) << shift;
 805920d:	31 c2                	xor    %eax,%edx
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  int shift = uc % INT_BITS;
  int r = (*p >> shift) & 1;
 805920f:	83 e0 01             	and    $0x1,%eax
  *p ^= ((i & 1) ^ r) << shift;
 8059212:	83 e2 01             	and    $0x1,%edx
 8059215:	d3 e2                	shl    %cl,%edx
 8059217:	31 da                	xor    %ebx,%edx
 8059219:	89 56 08             	mov    %edx,0x8(%esi)
  return r;
}
 805921c:	5b                   	pop    %ebx
 805921d:	5e                   	pop    %esi
 805921e:	c3                   	ret    
 805921f:	90                   	nop

08059220 <set_quoting_flags>:
   set the value of the quoting options flag to I, which can be a
   bitwise combination of enum quoting_flags, or 0 for default
   behavior.  Return the old value.  */
int
set_quoting_flags (struct quoting_options *o, int i)
{
 8059220:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059224:	89 3c 24             	mov    %edi,(%esp)
 8059227:	89 54 24 04          	mov    %edx,0x4(%esp)
 805922b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805922f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059233:	b9 49 62 00 00       	mov    $0x6249,%ecx
 8059238:	e8 2b 11 00 00       	call   805a368 <__afl_maybe_log>
 805923d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059241:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059245:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059249:	8b 3c 24             	mov    (%esp),%edi
 805924c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059250:	8b 44 24 04          	mov    0x4(%esp),%eax
  int r;
  if (!o)
    o = &default_quoting_options;
  r = o->flags;
  o->flags = i;
 8059254:	8b 4c 24 08          	mov    0x8(%esp),%ecx
int
set_quoting_flags (struct quoting_options *o, int i)
{
  int r;
  if (!o)
    o = &default_quoting_options;
 8059258:	ba 40 7d 43 08       	mov    $0x8437d40,%edx
 805925d:	85 c0                	test   %eax,%eax
 805925f:	0f 45 d0             	cmovne %eax,%edx
  r = o->flags;
 8059262:	8b 42 04             	mov    0x4(%edx),%eax
  o->flags = i;
 8059265:	89 4a 04             	mov    %ecx,0x4(%edx)
  return r;
}
 8059268:	c3                   	ret    
 8059269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08059270 <set_custom_quoting>:

void
set_custom_quoting (struct quoting_options *o,
                    char const *left_quote, char const *right_quote)
{
 8059270:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059274:	89 3c 24             	mov    %edi,(%esp)
 8059277:	89 54 24 04          	mov    %edx,0x4(%esp)
 805927b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805927f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059283:	b9 3d e2 00 00       	mov    $0xe23d,%ecx
 8059288:	e8 db 10 00 00       	call   805a368 <__afl_maybe_log>
 805928d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059291:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059295:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059299:	8b 3c 24             	mov    (%esp),%edi
 805929c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80592a0:	53                   	push   %ebx
  if (!o)
    o = &default_quoting_options;
 80592a1:	bb 40 7d 43 08       	mov    $0x8437d40,%ebx
}

void
set_custom_quoting (struct quoting_options *o,
                    char const *left_quote, char const *right_quote)
{
 80592a6:	83 ec 08             	sub    $0x8,%esp
 80592a9:	8b 44 24 10          	mov    0x10(%esp),%eax
 80592ad:	8b 54 24 14          	mov    0x14(%esp),%edx
 80592b1:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  if (!o)
    o = &default_quoting_options;
 80592b5:	85 c0                	test   %eax,%eax
 80592b7:	0f 44 c3             	cmove  %ebx,%eax
  o->style = custom_quoting_style;
  if (!left_quote || !right_quote)
 80592ba:	85 d2                	test   %edx,%edx
set_custom_quoting (struct quoting_options *o,
                    char const *left_quote, char const *right_quote)
{
  if (!o)
    o = &default_quoting_options;
  o->style = custom_quoting_style;
 80592bc:	c7 00 08 00 00 00    	movl   $0x8,(%eax)
  if (!left_quote || !right_quote)
 80592c2:	74 6f                	je     8059333 <set_custom_quoting+0xc3>
 80592c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80592c8:	89 3c 24             	mov    %edi,(%esp)
 80592cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80592cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80592d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80592d7:	b9 58 97 00 00       	mov    $0x9758,%ecx
 80592dc:	e8 87 10 00 00       	call   805a368 <__afl_maybe_log>
 80592e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80592e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80592e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80592ed:	8b 3c 24             	mov    (%esp),%edi
 80592f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80592f4:	85 c9                	test   %ecx,%ecx
 80592f6:	74 3b                	je     8059333 <set_custom_quoting+0xc3>
 80592f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80592fc:	89 3c 24             	mov    %edi,(%esp)
 80592ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059303:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059307:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805930b:	b9 1d 12 00 00       	mov    $0x121d,%ecx
 8059310:	e8 53 10 00 00       	call   805a368 <__afl_maybe_log>
 8059315:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059319:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805931d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059321:	8b 3c 24             	mov    (%esp),%edi
 8059324:	8d 64 24 10          	lea    0x10(%esp),%esp
    abort ();
  o->left_quote = left_quote;
 8059328:	89 50 28             	mov    %edx,0x28(%eax)
  o->right_quote = right_quote;
 805932b:	89 48 2c             	mov    %ecx,0x2c(%eax)
}
 805932e:	83 c4 08             	add    $0x8,%esp
 8059331:	5b                   	pop    %ebx
 8059332:	c3                   	ret    
 8059333:	90                   	nop
{
  if (!o)
    o = &default_quoting_options;
  o->style = custom_quoting_style;
  if (!left_quote || !right_quote)
    abort ();
 8059334:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059338:	89 3c 24             	mov    %edi,(%esp)
 805933b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805933f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059343:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059347:	b9 04 b3 00 00       	mov    $0xb304,%ecx
 805934c:	e8 17 10 00 00       	call   805a368 <__afl_maybe_log>
 8059351:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059355:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059359:	8b 54 24 04          	mov    0x4(%esp),%edx
 805935d:	8b 3c 24             	mov    (%esp),%edi
 8059360:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059364:	e8 77 01 ff ff       	call   80494e0 <abort@plt>
 8059369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08059370 <quotearg_buffer>:
   ARGSIZE.  */
size_t
quotearg_buffer (char *buffer, size_t buffersize,
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
 8059370:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059374:	89 3c 24             	mov    %edi,(%esp)
 8059377:	89 54 24 04          	mov    %edx,0x4(%esp)
 805937b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805937f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059383:	b9 fb 59 00 00       	mov    $0x59fb,%ecx
 8059388:	e8 db 0f 00 00       	call   805a368 <__afl_maybe_log>
 805938d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059391:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059395:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059399:	8b 3c 24             	mov    (%esp),%edi
 805939c:	8d 64 24 10          	lea    0x10(%esp),%esp
 80593a0:	57                   	push   %edi
 80593a1:	56                   	push   %esi
 80593a2:	53                   	push   %ebx
 80593a3:	8b 44 24 20          	mov    0x20(%esp),%eax
  struct quoting_options const *p = o ? o : &default_quoting_options;
 80593a7:	bb 40 7d 43 08       	mov    $0x8437d40,%ebx
 80593ac:	85 c0                	test   %eax,%eax
 80593ae:	0f 45 d8             	cmovne %eax,%ebx
  int e = errno;
 80593b1:	e8 1a 00 ff ff       	call   80493d0 <__errno_location@plt>
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                       p->style, p->flags, p->quote_these_too,
 80593b6:	8d 53 08             	lea    0x8(%ebx),%edx
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
 80593b9:	83 ec 08             	sub    $0x8,%esp
quotearg_buffer (char *buffer, size_t buffersize,
                 char const *arg, size_t argsize,
                 struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 80593bc:	8b 38                	mov    (%eax),%edi
 80593be:	89 c6                	mov    %eax,%esi
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
 80593c0:	ff 73 2c             	pushl  0x2c(%ebx)
 80593c3:	ff 73 28             	pushl  0x28(%ebx)
 80593c6:	52                   	push   %edx
 80593c7:	ff 73 04             	pushl  0x4(%ebx)
 80593ca:	ff 33                	pushl  (%ebx)
 80593cc:	ff 74 24 38          	pushl  0x38(%esp)
 80593d0:	8b 4c 24 38          	mov    0x38(%esp),%ecx
 80593d4:	8b 54 24 34          	mov    0x34(%esp),%edx
 80593d8:	8b 44 24 30          	mov    0x30(%esp),%eax
 80593dc:	e8 af b2 ff ff       	call   8054690 <quotearg_buffer_restyled>
                                       p->style, p->flags, p->quote_these_too,
                                       p->left_quote, p->right_quote);
  errno = e;
  return r;
 80593e1:	83 c4 20             	add    $0x20,%esp
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,
                                       p->style, p->flags, p->quote_these_too,
                                       p->left_quote, p->right_quote);
  errno = e;
 80593e4:	89 3e                	mov    %edi,(%esi)
  return r;
}
 80593e6:	5b                   	pop    %ebx
 80593e7:	5e                   	pop    %esi
 80593e8:	5f                   	pop    %edi
 80593e9:	c3                   	ret    
 80593ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080593f0 <quotearg_alloc_mem>:
   NULL, and set_quoting_flags has not set the null byte elision
   flag.  */
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
 80593f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80593f4:	89 3c 24             	mov    %edi,(%esp)
 80593f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80593fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80593ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059403:	b9 bd 77 00 00       	mov    $0x77bd,%ecx
 8059408:	e8 5b 0f 00 00       	call   805a368 <__afl_maybe_log>
 805940d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059411:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059415:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059419:	8b 3c 24             	mov    (%esp),%edi
 805941c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059420:	55                   	push   %ebp
 8059421:	57                   	push   %edi
 8059422:	56                   	push   %esi
 8059423:	53                   	push   %ebx
  struct quoting_options const *p = o ? o : &default_quoting_options;
 8059424:	bb 40 7d 43 08       	mov    $0x8437d40,%ebx
   NULL, and set_quoting_flags has not set the null byte elision
   flag.  */
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
 8059429:	83 ec 1c             	sub    $0x1c,%esp
 805942c:	8b 44 24 3c          	mov    0x3c(%esp),%eax
  struct quoting_options const *p = o ? o : &default_quoting_options;
 8059430:	85 c0                	test   %eax,%eax
 8059432:	0f 45 d8             	cmovne %eax,%ebx
  int e = errno;
 8059435:	e8 96 ff fe ff       	call   80493d0 <__errno_location@plt>
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 805943a:	8b 74 24 38          	mov    0x38(%esp),%esi
 805943e:	31 c9                	xor    %ecx,%ecx
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 8059440:	8b 10                	mov    (%eax),%edx
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
                                             flags, p->quote_these_too,
 8059442:	8d 6b 08             	lea    0x8(%ebx),%ebp
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 8059445:	89 c7                	mov    %eax,%edi
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 8059447:	85 f6                	test   %esi,%esi
char *
quotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
 8059449:	89 14 24             	mov    %edx,(%esp)
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 805944c:	0f 94 c1             	sete   %cl
 805944f:	0b 4b 04             	or     0x4(%ebx),%ecx
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
 8059452:	83 ec 08             	sub    $0x8,%esp
 8059455:	ff 73 2c             	pushl  0x2c(%ebx)
 8059458:	ff 73 28             	pushl  0x28(%ebx)
 805945b:	31 d2                	xor    %edx,%edx
 805945d:	55                   	push   %ebp
 805945e:	31 c0                	xor    %eax,%eax
 8059460:	51                   	push   %ecx
                    struct quoting_options const *o)
{
  struct quoting_options const *p = o ? o : &default_quoting_options;
  int e = errno;
  /* Elide embedded null bytes if we can't return a size.  */
  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);
 8059461:	89 ce                	mov    %ecx,%esi
  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,
 8059463:	ff 33                	pushl  (%ebx)
 8059465:	ff 74 24 50          	pushl  0x50(%esp)
 8059469:	8b 4c 24 50          	mov    0x50(%esp),%ecx
 805946d:	e8 1e b2 ff ff       	call   8054690 <quotearg_buffer_restyled>
 8059472:	89 44 24 2c          	mov    %eax,0x2c(%esp)
 8059476:	8d 40 01             	lea    0x1(%eax),%eax
 8059479:	83 c4 14             	add    $0x14,%esp
 805947c:	50                   	push   %eax
 805947d:	89 44 24 18          	mov    %eax,0x18(%esp)
 8059481:	e8 0a 1c 00 00       	call   805b090 <xmalloc>
 8059486:	89 44 24 14          	mov    %eax,0x14(%esp)
                                             flags, p->quote_these_too,
                                             p->left_quote,
                                             p->right_quote) + 1;
  char *buf = xcharalloc (bufsize);
  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,
 805948a:	59                   	pop    %ecx
 805948b:	5a                   	pop    %edx
 805948c:	ff 73 2c             	pushl  0x2c(%ebx)
 805948f:	ff 73 28             	pushl  0x28(%ebx)
 8059492:	55                   	push   %ebp
 8059493:	56                   	push   %esi
 8059494:	ff 33                	pushl  (%ebx)
 8059496:	ff 74 24 50          	pushl  0x50(%esp)
 805949a:	8b 4c 24 50          	mov    0x50(%esp),%ecx
 805949e:	8b 54 24 28          	mov    0x28(%esp),%edx
 80594a2:	e8 e9 b1 ff ff       	call   8054690 <quotearg_buffer_restyled>
                            p->quote_these_too,
                            p->left_quote, p->right_quote);
  errno = e;
 80594a7:	8b 5c 24 20          	mov    0x20(%esp),%ebx
  if (size)
 80594ab:	83 c4 20             	add    $0x20,%esp
                                             p->right_quote) + 1;
  char *buf = xcharalloc (bufsize);
  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,
                            p->quote_these_too,
                            p->left_quote, p->right_quote);
  errno = e;
 80594ae:	89 1f                	mov    %ebx,(%edi)
  if (size)
 80594b0:	8b 7c 24 38          	mov    0x38(%esp),%edi
 80594b4:	85 ff                	test   %edi,%edi
 80594b6:	74 3a                	je     80594f2 <quotearg_alloc_mem+0x102>
 80594b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80594bc:	89 3c 24             	mov    %edi,(%esp)
 80594bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80594c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80594c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80594cb:	b9 c9 f4 00 00       	mov    $0xf4c9,%ecx
 80594d0:	e8 93 0e 00 00       	call   805a368 <__afl_maybe_log>
 80594d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80594d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80594dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80594e1:	8b 3c 24             	mov    (%esp),%edi
 80594e4:	8d 64 24 10          	lea    0x10(%esp),%esp
    *size = bufsize - 1;
 80594e8:	8b 54 24 38          	mov    0x38(%esp),%edx
 80594ec:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 80594f0:	89 0a                	mov    %ecx,(%edx)
 80594f2:	66 90                	xchg   %ax,%ax
  return buf;
}
 80594f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80594f8:	89 3c 24             	mov    %edi,(%esp)
 80594fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80594ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059503:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059507:	b9 52 b5 00 00       	mov    $0xb552,%ecx
 805950c:	e8 57 0e 00 00       	call   805a368 <__afl_maybe_log>
 8059511:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059515:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059519:	8b 54 24 04          	mov    0x4(%esp),%edx
 805951d:	8b 3c 24             	mov    (%esp),%edi
 8059520:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059524:	8b 44 24 04          	mov    0x4(%esp),%eax
 8059528:	83 c4 1c             	add    $0x1c,%esp
 805952b:	5b                   	pop    %ebx
 805952c:	5e                   	pop    %esi
 805952d:	5f                   	pop    %edi
 805952e:	5d                   	pop    %ebp
 805952f:	c3                   	ret    

08059530 <quotearg_alloc>:

/* Equivalent to quotearg_alloc (ARG, ARGSIZE, NULL, O).  */
char *
quotearg_alloc (char const *arg, size_t argsize,
                struct quoting_options const *o)
{
 8059530:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059534:	89 3c 24             	mov    %edi,(%esp)
 8059537:	89 54 24 04          	mov    %edx,0x4(%esp)
 805953b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805953f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059543:	b9 08 a7 00 00       	mov    $0xa708,%ecx
 8059548:	e8 1b 0e 00 00       	call   805a368 <__afl_maybe_log>
 805954d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059551:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059555:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059559:	8b 3c 24             	mov    (%esp),%edi
 805955c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059560:	83 ec 0c             	sub    $0xc,%esp
  return quotearg_alloc_mem (arg, argsize, NULL, o);
 8059563:	ff 74 24 18          	pushl  0x18(%esp)
 8059567:	6a 00                	push   $0x0
 8059569:	ff 74 24 1c          	pushl  0x1c(%esp)
 805956d:	ff 74 24 1c          	pushl  0x1c(%esp)
 8059571:	e8 7a fe ff ff       	call   80593f0 <quotearg_alloc_mem>
}
 8059576:	83 c4 1c             	add    $0x1c,%esp
 8059579:	c3                   	ret    
 805957a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08059580 <quotearg_free>:
static struct slotvec slotvec0 = {sizeof slot0, slot0};
static struct slotvec *slotvec = &slotvec0;

void
quotearg_free (void)
{
 8059580:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059584:	89 3c 24             	mov    %edi,(%esp)
 8059587:	89 54 24 04          	mov    %edx,0x4(%esp)
 805958b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805958f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059593:	b9 83 a4 00 00       	mov    $0xa483,%ecx
 8059598:	e8 cb 0d 00 00       	call   805a368 <__afl_maybe_log>
 805959d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80595a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80595a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80595a9:	8b 3c 24             	mov    (%esp),%edi
 80595ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 80595b0:	55                   	push   %ebp
 80595b1:	57                   	push   %edi
 80595b2:	56                   	push   %esi
 80595b3:	53                   	push   %ebx
 80595b4:	83 ec 0c             	sub    $0xc,%esp
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80595b7:	8b 2d 9c 72 06 08    	mov    0x806729c,%ebp
static struct slotvec *slotvec = &slotvec0;

void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
 80595bd:	8b 35 90 72 06 08    	mov    0x8067290,%esi
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80595c3:	83 fd 01             	cmp    $0x1,%ebp
 80595c6:	0f 86 c4 04 00 00    	jbe    8059a90 <quotearg_free+0x510>
 80595cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80595d0:	89 3c 24             	mov    %edi,(%esp)
 80595d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80595d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80595db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80595df:	b9 16 87 00 00       	mov    $0x8716,%ecx
 80595e4:	e8 7f 0d 00 00       	call   805a368 <__afl_maybe_log>
 80595e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80595ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80595f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80595f5:	8b 3c 24             	mov    (%esp),%edi
 80595f8:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
 80595fc:	83 ec 0c             	sub    $0xc,%esp
 80595ff:	8d 7d fe             	lea    -0x2(%ebp),%edi
 8059602:	ff 76 0c             	pushl  0xc(%esi)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059605:	bb 02 00 00 00       	mov    $0x2,%ebx
    free (sv[i].val);
 805960a:	e8 51 fb fe ff       	call   8049160 <free@plt>
 805960f:	83 e7 07             	and    $0x7,%edi
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059612:	83 c4 10             	add    $0x10,%esp
 8059615:	39 eb                	cmp    %ebp,%ebx
 8059617:	0f 84 73 04 00 00    	je     8059a90 <quotearg_free+0x510>
 805961d:	8d 76 00             	lea    0x0(%esi),%esi
 8059620:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059624:	89 3c 24             	mov    %edi,(%esp)
 8059627:	89 54 24 04          	mov    %edx,0x4(%esp)
 805962b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805962f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059633:	b9 f7 e6 00 00       	mov    $0xe6f7,%ecx
 8059638:	e8 2b 0d 00 00       	call   805a368 <__afl_maybe_log>
 805963d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059641:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059645:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059649:	8b 3c 24             	mov    (%esp),%edi
 805964c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059650:	85 ff                	test   %edi,%edi
 8059652:	0f 84 78 03 00 00    	je     80599d0 <quotearg_free+0x450>
 8059658:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805965c:	89 3c 24             	mov    %edi,(%esp)
 805965f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059663:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059667:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805966b:	b9 df 63 00 00       	mov    $0x63df,%ecx
 8059670:	e8 f3 0c 00 00       	call   805a368 <__afl_maybe_log>
 8059675:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059679:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805967d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059681:	8b 3c 24             	mov    (%esp),%edi
 8059684:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059688:	83 ff 01             	cmp    $0x1,%edi
 805968b:	0f 84 c1 02 00 00    	je     8059952 <quotearg_free+0x3d2>
 8059691:	8d 76 00             	lea    0x0(%esi),%esi
 8059694:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059698:	89 3c 24             	mov    %edi,(%esp)
 805969b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805969f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80596a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80596a7:	b9 c8 fe 00 00       	mov    $0xfec8,%ecx
 80596ac:	e8 b7 0c 00 00       	call   805a368 <__afl_maybe_log>
 80596b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80596b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80596b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80596bd:	8b 3c 24             	mov    (%esp),%edi
 80596c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80596c4:	83 ff 02             	cmp    $0x2,%edi
 80596c7:	0f 84 41 02 00 00    	je     805990e <quotearg_free+0x38e>
 80596cd:	8d 76 00             	lea    0x0(%esi),%esi
 80596d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80596d4:	89 3c 24             	mov    %edi,(%esp)
 80596d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80596db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80596df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80596e3:	b9 a8 df 00 00       	mov    $0xdfa8,%ecx
 80596e8:	e8 7b 0c 00 00       	call   805a368 <__afl_maybe_log>
 80596ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80596f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80596f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80596f9:	8b 3c 24             	mov    (%esp),%edi
 80596fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059700:	83 ff 03             	cmp    $0x3,%edi
 8059703:	0f 84 c1 01 00 00    	je     80598ca <quotearg_free+0x34a>
 8059709:	8d 76 00             	lea    0x0(%esi),%esi
 805970c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059710:	89 3c 24             	mov    %edi,(%esp)
 8059713:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059717:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805971b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805971f:	b9 d1 c5 00 00       	mov    $0xc5d1,%ecx
 8059724:	e8 3f 0c 00 00       	call   805a368 <__afl_maybe_log>
 8059729:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805972d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059731:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059735:	8b 3c 24             	mov    (%esp),%edi
 8059738:	8d 64 24 10          	lea    0x10(%esp),%esp
 805973c:	83 ff 04             	cmp    $0x4,%edi
 805973f:	0f 84 41 01 00 00    	je     8059886 <quotearg_free+0x306>
 8059745:	8d 76 00             	lea    0x0(%esi),%esi
 8059748:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805974c:	89 3c 24             	mov    %edi,(%esp)
 805974f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059753:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059757:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805975b:	b9 bf 8d 00 00       	mov    $0x8dbf,%ecx
 8059760:	e8 03 0c 00 00       	call   805a368 <__afl_maybe_log>
 8059765:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059769:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805976d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059771:	8b 3c 24             	mov    (%esp),%edi
 8059774:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059778:	83 ff 05             	cmp    $0x5,%edi
 805977b:	0f 84 c1 00 00 00    	je     8059842 <quotearg_free+0x2c2>
 8059781:	8d 76 00             	lea    0x0(%esi),%esi
 8059784:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059788:	89 3c 24             	mov    %edi,(%esp)
 805978b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805978f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059793:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059797:	b9 9f 99 00 00       	mov    $0x999f,%ecx
 805979c:	e8 c7 0b 00 00       	call   805a368 <__afl_maybe_log>
 80597a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80597a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80597a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80597ad:	8b 3c 24             	mov    (%esp),%edi
 80597b0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80597b4:	83 ff 06             	cmp    $0x6,%edi
 80597b7:	74 47                	je     8059800 <quotearg_free+0x280>
 80597b9:	8d 76 00             	lea    0x0(%esi),%esi
 80597bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80597c0:	89 3c 24             	mov    %edi,(%esp)
 80597c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80597c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80597cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80597cf:	b9 73 5f 00 00       	mov    $0x5f73,%ecx
 80597d4:	e8 8f 0b 00 00       	call   805a368 <__afl_maybe_log>
 80597d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80597dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80597e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80597e5:	8b 3c 24             	mov    (%esp),%edi
 80597e8:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
 80597ec:	83 ec 0c             	sub    $0xc,%esp
 80597ef:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80597f3:	bb 03 00 00 00       	mov    $0x3,%ebx
    free (sv[i].val);
 80597f8:	e8 63 f9 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80597fd:	83 c4 10             	add    $0x10,%esp
    free (sv[i].val);
 8059800:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059804:	89 3c 24             	mov    %edi,(%esp)
 8059807:	89 54 24 04          	mov    %edx,0x4(%esp)
 805980b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805980f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059813:	b9 56 11 00 00       	mov    $0x1156,%ecx
 8059818:	e8 4b 0b 00 00       	call   805a368 <__afl_maybe_log>
 805981d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059821:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059825:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059829:	8b 3c 24             	mov    (%esp),%edi
 805982c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059830:	83 ec 0c             	sub    $0xc,%esp
 8059833:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059837:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805983a:	e8 21 f9 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805983f:	83 c4 10             	add    $0x10,%esp
 8059842:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 8059844:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059848:	89 3c 24             	mov    %edi,(%esp)
 805984b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805984f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059853:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059857:	b9 79 bf 00 00       	mov    $0xbf79,%ecx
 805985c:	e8 07 0b 00 00       	call   805a368 <__afl_maybe_log>
 8059861:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059865:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059869:	8b 54 24 04          	mov    0x4(%esp),%edx
 805986d:	8b 3c 24             	mov    (%esp),%edi
 8059870:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059874:	83 ec 0c             	sub    $0xc,%esp
 8059877:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805987b:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805987e:	e8 dd f8 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059883:	83 c4 10             	add    $0x10,%esp
 8059886:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 8059888:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805988c:	89 3c 24             	mov    %edi,(%esp)
 805988f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059893:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059897:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805989b:	b9 8c cb 00 00       	mov    $0xcb8c,%ecx
 80598a0:	e8 c3 0a 00 00       	call   805a368 <__afl_maybe_log>
 80598a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80598a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80598ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 80598b1:	8b 3c 24             	mov    (%esp),%edi
 80598b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80598b8:	83 ec 0c             	sub    $0xc,%esp
 80598bb:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80598bf:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 80598c2:	e8 99 f8 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 80598c7:	83 c4 10             	add    $0x10,%esp
 80598ca:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 80598cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80598d0:	89 3c 24             	mov    %edi,(%esp)
 80598d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80598d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80598db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80598df:	b9 cd d2 00 00       	mov    $0xd2cd,%ecx
 80598e4:	e8 7f 0a 00 00       	call   805a368 <__afl_maybe_log>
 80598e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80598ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80598f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80598f5:	8b 3c 24             	mov    (%esp),%edi
 80598f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80598fc:	83 ec 0c             	sub    $0xc,%esp
 80598ff:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059903:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 8059906:	e8 55 f8 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805990b:	83 c4 10             	add    $0x10,%esp
 805990e:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 8059910:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059914:	89 3c 24             	mov    %edi,(%esp)
 8059917:	89 54 24 04          	mov    %edx,0x4(%esp)
 805991b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805991f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059923:	b9 de 62 00 00       	mov    $0x62de,%ecx
 8059928:	e8 3b 0a 00 00       	call   805a368 <__afl_maybe_log>
 805992d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059931:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059935:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059939:	8b 3c 24             	mov    (%esp),%edi
 805993c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059940:	83 ec 0c             	sub    $0xc,%esp
 8059943:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059947:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805994a:	e8 11 f8 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805994f:	83 c4 10             	add    $0x10,%esp
 8059952:	66 90                	xchg   %ax,%ax
    free (sv[i].val);
 8059954:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059958:	89 3c 24             	mov    %edi,(%esp)
 805995b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805995f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059963:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059967:	b9 5e 67 00 00       	mov    $0x675e,%ecx
 805996c:	e8 f7 09 00 00       	call   805a368 <__afl_maybe_log>
 8059971:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059975:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059979:	8b 54 24 04          	mov    0x4(%esp),%edx
 805997d:	8b 3c 24             	mov    (%esp),%edi
 8059980:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059984:	83 ec 0c             	sub    $0xc,%esp
 8059987:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 805998b:	83 c3 01             	add    $0x1,%ebx
    free (sv[i].val);
 805998e:	e8 cd f7 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059993:	83 c4 10             	add    $0x10,%esp
 8059996:	39 eb                	cmp    %ebp,%ebx
 8059998:	0f 84 f2 00 00 00    	je     8059a90 <quotearg_free+0x510>
 805999e:	66 90                	xchg   %ax,%ax
 80599a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80599a4:	89 3c 24             	mov    %edi,(%esp)
 80599a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80599ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80599af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80599b3:	b9 7b a9 00 00       	mov    $0xa97b,%ecx
 80599b8:	e8 ab 09 00 00       	call   805a368 <__afl_maybe_log>
 80599bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80599c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80599c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80599c9:	8b 3c 24             	mov    (%esp),%edi
 80599cc:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
 80599d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80599d4:	89 3c 24             	mov    %edi,(%esp)
 80599d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80599db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80599df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80599e3:	b9 b1 50 00 00       	mov    $0x50b1,%ecx
 80599e8:	e8 7b 09 00 00       	call   805a368 <__afl_maybe_log>
 80599ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80599f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80599f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80599f9:	8b 3c 24             	mov    (%esp),%edi
 80599fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059a00:	83 ec 0c             	sub    $0xc,%esp
 8059a03:	ff 74 de 04          	pushl  0x4(%esi,%ebx,8)
 8059a07:	e8 54 f7 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059a0c:	58                   	pop    %eax
    free (sv[i].val);
 8059a0d:	ff 74 de 0c          	pushl  0xc(%esi,%ebx,8)
 8059a11:	e8 4a f7 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059a16:	5a                   	pop    %edx
    free (sv[i].val);
 8059a17:	ff 74 de 14          	pushl  0x14(%esi,%ebx,8)
 8059a1b:	e8 40 f7 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059a20:	59                   	pop    %ecx
    free (sv[i].val);
 8059a21:	ff 74 de 1c          	pushl  0x1c(%esi,%ebx,8)
 8059a25:	e8 36 f7 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059a2a:	5f                   	pop    %edi
    free (sv[i].val);
 8059a2b:	ff 74 de 24          	pushl  0x24(%esi,%ebx,8)
 8059a2f:	e8 2c f7 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059a34:	58                   	pop    %eax
    free (sv[i].val);
 8059a35:	ff 74 de 2c          	pushl  0x2c(%esi,%ebx,8)
 8059a39:	e8 22 f7 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059a3e:	58                   	pop    %eax
    free (sv[i].val);
 8059a3f:	ff 74 de 34          	pushl  0x34(%esi,%ebx,8)
 8059a43:	e8 18 f7 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059a48:	58                   	pop    %eax
    free (sv[i].val);
 8059a49:	ff 74 de 3c          	pushl  0x3c(%esi,%ebx,8)
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059a4d:	83 c3 08             	add    $0x8,%ebx
    free (sv[i].val);
 8059a50:	e8 0b f7 fe ff       	call   8049160 <free@plt>
void
quotearg_free (void)
{
  struct slotvec *sv = slotvec;
  unsigned int i;
  for (i = 1; i < nslots; i++)
 8059a55:	83 c4 10             	add    $0x10,%esp
 8059a58:	39 eb                	cmp    %ebp,%ebx
 8059a5a:	0f 85 70 ff ff ff    	jne    80599d0 <quotearg_free+0x450>
 8059a60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059a64:	89 3c 24             	mov    %edi,(%esp)
 8059a67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059a6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059a6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059a73:	b9 cc c1 00 00       	mov    $0xc1cc,%ecx
 8059a78:	e8 eb 08 00 00       	call   805a368 <__afl_maybe_log>
 8059a7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059a81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059a85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059a89:	8b 3c 24             	mov    (%esp),%edi
 8059a8c:	8d 64 24 10          	lea    0x10(%esp),%esp
    free (sv[i].val);
  if (sv[0].val != slot0)
 8059a90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059a94:	89 3c 24             	mov    %edi,(%esp)
 8059a97:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059a9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059a9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059aa3:	b9 49 00 00 00       	mov    $0x49,%ecx
 8059aa8:	e8 bb 08 00 00       	call   805a368 <__afl_maybe_log>
 8059aad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ab1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ab5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059ab9:	8b 3c 24             	mov    (%esp),%edi
 8059abc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059ac0:	8b 46 04             	mov    0x4(%esi),%eax
 8059ac3:	3d 40 7c 43 08       	cmp    $0x8437c40,%eax
 8059ac8:	74 52                	je     8059b1c <quotearg_free+0x59c>
 8059aca:	66 90                	xchg   %ax,%ax
 8059acc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059ad0:	89 3c 24             	mov    %edi,(%esp)
 8059ad3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059ad7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059adb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059adf:	b9 e7 be 00 00       	mov    $0xbee7,%ecx
 8059ae4:	e8 7f 08 00 00       	call   805a368 <__afl_maybe_log>
 8059ae9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059aed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059af1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059af5:	8b 3c 24             	mov    (%esp),%edi
 8059af8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      free (sv[0].val);
 8059afc:	83 ec 0c             	sub    $0xc,%esp
 8059aff:	50                   	push   %eax
 8059b00:	e8 5b f6 fe ff       	call   8049160 <free@plt>
      slotvec0.size = sizeof slot0;
 8059b05:	c7 05 94 72 06 08 00 	movl   $0x100,0x8067294
 8059b0c:	01 00 00 
      slotvec0.val = slot0;
 8059b0f:	c7 05 98 72 06 08 40 	movl   $0x8437c40,0x8067298
 8059b16:	7c 43 08 
 8059b19:	83 c4 10             	add    $0x10,%esp
    }
  if (sv != &slotvec0)
 8059b1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059b20:	89 3c 24             	mov    %edi,(%esp)
 8059b23:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059b27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059b2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059b2f:	b9 b9 ae 00 00       	mov    $0xaeb9,%ecx
 8059b34:	e8 2f 08 00 00       	call   805a368 <__afl_maybe_log>
 8059b39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059b3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059b41:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059b45:	8b 3c 24             	mov    (%esp),%edi
 8059b48:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059b4c:	81 fe 94 72 06 08    	cmp    $0x8067294,%esi
 8059b52:	74 46                	je     8059b9a <quotearg_free+0x61a>
 8059b54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059b58:	89 3c 24             	mov    %edi,(%esp)
 8059b5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059b5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059b63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059b67:	b9 47 17 00 00       	mov    $0x1747,%ecx
 8059b6c:	e8 f7 07 00 00       	call   805a368 <__afl_maybe_log>
 8059b71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059b75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059b79:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059b7d:	8b 3c 24             	mov    (%esp),%edi
 8059b80:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      free (sv);
 8059b84:	83 ec 0c             	sub    $0xc,%esp
 8059b87:	56                   	push   %esi
 8059b88:	e8 d3 f5 fe ff       	call   8049160 <free@plt>
      slotvec = &slotvec0;
 8059b8d:	c7 05 90 72 06 08 94 	movl   $0x8067294,0x8067290
 8059b94:	72 06 08 
 8059b97:	83 c4 10             	add    $0x10,%esp
 8059b9a:	66 90                	xchg   %ax,%ax
    }
  nslots = 1;
 8059b9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059ba0:	89 3c 24             	mov    %edi,(%esp)
 8059ba3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059ba7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059bab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059baf:	b9 b8 4e 00 00       	mov    $0x4eb8,%ecx
 8059bb4:	e8 af 07 00 00       	call   805a368 <__afl_maybe_log>
 8059bb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059bbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059bc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059bc5:	8b 3c 24             	mov    (%esp),%edi
 8059bc8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059bcc:	c7 05 9c 72 06 08 01 	movl   $0x1,0x806729c
 8059bd3:	00 00 00 
}
 8059bd6:	83 c4 0c             	add    $0xc,%esp
 8059bd9:	5b                   	pop    %ebx
 8059bda:	5e                   	pop    %esi
 8059bdb:	5f                   	pop    %edi
 8059bdc:	5d                   	pop    %ebp
 8059bdd:	c3                   	ret    
 8059bde:	66 90                	xchg   %ax,%ax

08059be0 <quotearg_n>:
  }
}

char *
quotearg_n (int n, char const *arg)
{
 8059be0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059be4:	89 3c 24             	mov    %edi,(%esp)
 8059be7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059beb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059bef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059bf3:	b9 e7 b0 00 00       	mov    $0xb0e7,%ecx
 8059bf8:	e8 6b 07 00 00       	call   805a368 <__afl_maybe_log>
 8059bfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059c01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059c05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059c09:	8b 3c 24             	mov    (%esp),%edi
 8059c0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059c10:	8b 44 24 04          	mov    0x4(%esp),%eax
  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);
 8059c14:	8b 54 24 08          	mov    0x8(%esp),%edx
 8059c18:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8059c1d:	c7 44 24 04 40 7d 43 	movl   $0x8437d40,0x4(%esp)
 8059c24:	08 
 8059c25:	e9 86 f0 ff ff       	jmp    8058cb0 <quotearg_n_options>
 8059c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08059c30 <quotearg_n_mem>:
}

char *
quotearg_n_mem (int n, char const *arg, size_t argsize)
{
 8059c30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059c34:	89 3c 24             	mov    %edi,(%esp)
 8059c37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059c3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059c3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059c43:	b9 74 ac 00 00       	mov    $0xac74,%ecx
 8059c48:	e8 1b 07 00 00       	call   805a368 <__afl_maybe_log>
 8059c4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059c51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059c55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059c59:	8b 3c 24             	mov    (%esp),%edi
 8059c5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059c60:	8b 44 24 04          	mov    0x4(%esp),%eax
  return quotearg_n_options (n, arg, argsize, &default_quoting_options);
 8059c64:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8059c68:	8b 54 24 08          	mov    0x8(%esp),%edx
 8059c6c:	c7 44 24 04 40 7d 43 	movl   $0x8437d40,0x4(%esp)
 8059c73:	08 
 8059c74:	e9 37 f0 ff ff       	jmp    8058cb0 <quotearg_n_options>
 8059c79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08059c80 <quotearg>:
}

char *
quotearg (char const *arg)
{
 8059c80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059c84:	89 3c 24             	mov    %edi,(%esp)
 8059c87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059c8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059c8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059c93:	b9 2b ae 00 00       	mov    $0xae2b,%ecx
 8059c98:	e8 cb 06 00 00       	call   805a368 <__afl_maybe_log>
 8059c9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ca1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ca5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059ca9:	8b 3c 24             	mov    (%esp),%edi
 8059cac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059cb0:	8b 54 24 04          	mov    0x4(%esp),%edx
}

char *
quotearg_n (int n, char const *arg)
{
  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);
 8059cb4:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8059cb9:	31 c0                	xor    %eax,%eax
 8059cbb:	c7 44 24 04 40 7d 43 	movl   $0x8437d40,0x4(%esp)
 8059cc2:	08 
 8059cc3:	e9 e8 ef ff ff       	jmp    8058cb0 <quotearg_n_options>
 8059cc8:	90                   	nop
 8059cc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08059cd0 <quotearg_mem>:
  return quotearg_n (0, arg);
}

char *
quotearg_mem (char const *arg, size_t argsize)
{
 8059cd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059cd4:	89 3c 24             	mov    %edi,(%esp)
 8059cd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059cdb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059cdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059ce3:	b9 df e1 00 00       	mov    $0xe1df,%ecx
 8059ce8:	e8 7b 06 00 00       	call   805a368 <__afl_maybe_log>
 8059ced:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059cf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059cf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059cf9:	8b 3c 24             	mov    (%esp),%edi
 8059cfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059d00:	8b 54 24 04          	mov    0x4(%esp),%edx
}

char *
quotearg_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &default_quoting_options);
 8059d04:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059d08:	31 c0                	xor    %eax,%eax
 8059d0a:	c7 44 24 04 40 7d 43 	movl   $0x8437d40,0x4(%esp)
 8059d11:	08 
 8059d12:	e9 99 ef ff ff       	jmp    8058cb0 <quotearg_n_options>
 8059d17:	89 f6                	mov    %esi,%esi
 8059d19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08059d20 <quotearg_n_style>:
  return quotearg_n_mem (0, arg, argsize);
}

char *
quotearg_n_style (int n, enum quoting_style s, char const *arg)
{
 8059d20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059d24:	89 3c 24             	mov    %edi,(%esp)
 8059d27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059d2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059d2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059d33:	b9 cb bd 00 00       	mov    $0xbdcb,%ecx
 8059d38:	e8 2b 06 00 00       	call   805a368 <__afl_maybe_log>
 8059d3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059d41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059d45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059d49:	8b 3c 24             	mov    (%esp),%edi
 8059d4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059d50:	53                   	push   %ebx
 8059d51:	83 ec 38             	sub    $0x38,%esp
  struct quoting_options const o = quoting_options_from_style (s);
 8059d54:	8b 54 24 44          	mov    0x44(%esp),%edx
 8059d58:	89 e0                	mov    %esp,%eax
 8059d5a:	89 e3                	mov    %esp,%ebx
 8059d5c:	e8 af a0 ff ff       	call   8053e10 <quoting_options_from_style>
  return quotearg_n_options (n, arg, SIZE_MAX, &o);
 8059d61:	83 ec 0c             	sub    $0xc,%esp
 8059d64:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8059d69:	53                   	push   %ebx
 8059d6a:	8b 54 24 58          	mov    0x58(%esp),%edx
 8059d6e:	8b 44 24 50          	mov    0x50(%esp),%eax
 8059d72:	e8 39 ef ff ff       	call   8058cb0 <quotearg_n_options>
}
 8059d77:	83 c4 48             	add    $0x48,%esp
 8059d7a:	5b                   	pop    %ebx
 8059d7b:	c3                   	ret    
 8059d7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08059d80 <quotearg_n_style_mem>:

char *
quotearg_n_style_mem (int n, enum quoting_style s,
                      char const *arg, size_t argsize)
{
 8059d80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059d84:	89 3c 24             	mov    %edi,(%esp)
 8059d87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059d8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059d8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059d93:	b9 bc 1f 00 00       	mov    $0x1fbc,%ecx
 8059d98:	e8 cb 05 00 00       	call   805a368 <__afl_maybe_log>
 8059d9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059da1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059da5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059da9:	8b 3c 24             	mov    (%esp),%edi
 8059dac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059db0:	53                   	push   %ebx
 8059db1:	83 ec 38             	sub    $0x38,%esp
  struct quoting_options const o = quoting_options_from_style (s);
 8059db4:	8b 54 24 44          	mov    0x44(%esp),%edx
 8059db8:	89 e0                	mov    %esp,%eax
 8059dba:	89 e3                	mov    %esp,%ebx
 8059dbc:	e8 4f a0 ff ff       	call   8053e10 <quoting_options_from_style>
  return quotearg_n_options (n, arg, argsize, &o);
 8059dc1:	83 ec 0c             	sub    $0xc,%esp
 8059dc4:	53                   	push   %ebx
 8059dc5:	8b 4c 24 5c          	mov    0x5c(%esp),%ecx
 8059dc9:	8b 54 24 58          	mov    0x58(%esp),%edx
 8059dcd:	8b 44 24 50          	mov    0x50(%esp),%eax
 8059dd1:	e8 da ee ff ff       	call   8058cb0 <quotearg_n_options>
}
 8059dd6:	83 c4 48             	add    $0x48,%esp
 8059dd9:	5b                   	pop    %ebx
 8059dda:	c3                   	ret    
 8059ddb:	90                   	nop
 8059ddc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08059de0 <quotearg_style>:

char *
quotearg_style (enum quoting_style s, char const *arg)
{
 8059de0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059de4:	89 3c 24             	mov    %edi,(%esp)
 8059de7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059deb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059def:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059df3:	b9 58 a1 00 00       	mov    $0xa158,%ecx
 8059df8:	e8 6b 05 00 00       	call   805a368 <__afl_maybe_log>
 8059dfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059e01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059e05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059e09:	8b 3c 24             	mov    (%esp),%edi
 8059e0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059e10:	83 ec 10             	sub    $0x10,%esp
  return quotearg_n_style (0, s, arg);
 8059e13:	ff 74 24 18          	pushl  0x18(%esp)
 8059e17:	ff 74 24 18          	pushl  0x18(%esp)
 8059e1b:	6a 00                	push   $0x0
 8059e1d:	e8 fe fe ff ff       	call   8059d20 <quotearg_n_style>
}
 8059e22:	83 c4 1c             	add    $0x1c,%esp
 8059e25:	c3                   	ret    
 8059e26:	8d 76 00             	lea    0x0(%esi),%esi
 8059e29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08059e30 <quotearg_style_mem>:

char *
quotearg_style_mem (enum quoting_style s, char const *arg, size_t argsize)
{
 8059e30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059e34:	89 3c 24             	mov    %edi,(%esp)
 8059e37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059e3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059e3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059e43:	b9 25 82 00 00       	mov    $0x8225,%ecx
 8059e48:	e8 1b 05 00 00       	call   805a368 <__afl_maybe_log>
 8059e4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059e51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059e55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059e59:	8b 3c 24             	mov    (%esp),%edi
 8059e5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059e60:	83 ec 0c             	sub    $0xc,%esp
  return quotearg_n_style_mem (0, s, arg, argsize);
 8059e63:	ff 74 24 18          	pushl  0x18(%esp)
 8059e67:	ff 74 24 18          	pushl  0x18(%esp)
 8059e6b:	ff 74 24 18          	pushl  0x18(%esp)
 8059e6f:	6a 00                	push   $0x0
 8059e71:	e8 0a ff ff ff       	call   8059d80 <quotearg_n_style_mem>
}
 8059e76:	83 c4 1c             	add    $0x1c,%esp
 8059e79:	c3                   	ret    
 8059e7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08059e80 <quotearg_char_mem>:

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
 8059e80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059e84:	89 3c 24             	mov    %edi,(%esp)
 8059e87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059e8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059e8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059e93:	b9 49 eb 00 00       	mov    $0xeb49,%ecx
 8059e98:	e8 cb 04 00 00       	call   805a368 <__afl_maybe_log>
 8059e9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059ea1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059ea5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059ea9:	8b 3c 24             	mov    (%esp),%edi
 8059eac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059eb0:	53                   	push   %ebx
 8059eb1:	83 ec 38             	sub    $0x38,%esp
  struct quoting_options options;
  options = default_quoting_options;
 8059eb4:	a1 40 7d 43 08       	mov    0x8437d40,%eax
 8059eb9:	8b 15 44 7d 43 08    	mov    0x8437d44,%edx
 8059ebf:	8b 1d 48 7d 43 08    	mov    0x8437d48,%ebx
  return quotearg_n_style_mem (0, s, arg, argsize);
}

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
 8059ec5:	8b 4c 24 48          	mov    0x48(%esp),%ecx
  struct quoting_options options;
  options = default_quoting_options;
 8059ec9:	89 04 24             	mov    %eax,(%esp)
 8059ecc:	a1 4c 7d 43 08       	mov    0x8437d4c,%eax
 8059ed1:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059ed5:	8b 15 50 7d 43 08    	mov    0x8437d50,%edx
 8059edb:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 8059edf:	8b 1d 54 7d 43 08    	mov    0x8437d54,%ebx
 8059ee5:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059ee9:	a1 58 7d 43 08       	mov    0x8437d58,%eax
 8059eee:	89 54 24 10          	mov    %edx,0x10(%esp)
 8059ef2:	8b 15 5c 7d 43 08    	mov    0x8437d5c,%edx
 8059ef8:	89 5c 24 14          	mov    %ebx,0x14(%esp)
 8059efc:	8b 1d 60 7d 43 08    	mov    0x8437d60,%ebx
 8059f02:	89 44 24 18          	mov    %eax,0x18(%esp)
 8059f06:	a1 64 7d 43 08       	mov    0x8437d64,%eax
 8059f0b:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 8059f0f:	8b 15 68 7d 43 08    	mov    0x8437d68,%edx
 8059f15:	89 5c 24 20          	mov    %ebx,0x20(%esp)
 8059f19:	8b 1d 6c 7d 43 08    	mov    0x8437d6c,%ebx
 8059f1f:	89 44 24 24          	mov    %eax,0x24(%esp)
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 8059f23:	89 c8                	mov    %ecx,%eax
  int shift = uc % INT_BITS;
 8059f25:	83 e1 1f             	and    $0x1f,%ecx
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 8059f28:	c0 e8 05             	shr    $0x5,%al

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  struct quoting_options options;
  options = default_quoting_options;
 8059f2b:	89 54 24 28          	mov    %edx,0x28(%esp)
int
set_char_quoting (struct quoting_options *o, char c, int i)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
 8059f2f:	0f b6 d0             	movzbl %al,%edx

char *
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  struct quoting_options options;
  options = default_quoting_options;
 8059f32:	89 5c 24 2c          	mov    %ebx,0x2c(%esp)
{
  unsigned char uc = c;
  unsigned int *p =
    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;
  int shift = uc % INT_BITS;
  int r = (*p >> shift) & 1;
 8059f36:	8b 5c 94 08          	mov    0x8(%esp,%edx,4),%ebx
 8059f3a:	89 d8                	mov    %ebx,%eax
 8059f3c:	d3 e8                	shr    %cl,%eax
  *p ^= ((i & 1) ^ r) << shift;
 8059f3e:	83 f0 01             	xor    $0x1,%eax
 8059f41:	83 e0 01             	and    $0x1,%eax
 8059f44:	d3 e0                	shl    %cl,%eax
 8059f46:	31 d8                	xor    %ebx,%eax
 8059f48:	89 44 94 08          	mov    %eax,0x8(%esp,%edx,4)
quotearg_char_mem (char const *arg, size_t argsize, char ch)
{
  struct quoting_options options;
  options = default_quoting_options;
  set_char_quoting (&options, ch, 1);
  return quotearg_n_options (0, arg, argsize, &options);
 8059f4c:	83 ec 0c             	sub    $0xc,%esp
 8059f4f:	31 c0                	xor    %eax,%eax
 8059f51:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
 8059f55:	51                   	push   %ecx
 8059f56:	8b 4c 24 54          	mov    0x54(%esp),%ecx
 8059f5a:	8b 54 24 50          	mov    0x50(%esp),%edx
 8059f5e:	e8 4d ed ff ff       	call   8058cb0 <quotearg_n_options>
}
 8059f63:	83 c4 48             	add    $0x48,%esp
 8059f66:	5b                   	pop    %ebx
 8059f67:	c3                   	ret    
 8059f68:	90                   	nop
 8059f69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08059f70 <quotearg_char>:

char *
quotearg_char (char const *arg, char ch)
{
 8059f70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059f74:	89 3c 24             	mov    %edi,(%esp)
 8059f77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059f7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059f7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059f83:	b9 8f d8 00 00       	mov    $0xd88f,%ecx
 8059f88:	e8 db 03 00 00       	call   805a368 <__afl_maybe_log>
 8059f8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059f91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059f95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059f99:	8b 3c 24             	mov    (%esp),%edi
 8059f9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059fa0:	83 ec 10             	sub    $0x10,%esp
  return quotearg_char_mem (arg, SIZE_MAX, ch);
 8059fa3:	0f be 44 24 18       	movsbl 0x18(%esp),%eax
 8059fa8:	50                   	push   %eax
 8059fa9:	6a ff                	push   $0xffffffff
 8059fab:	ff 74 24 1c          	pushl  0x1c(%esp)
 8059faf:	e8 cc fe ff ff       	call   8059e80 <quotearg_char_mem>
}
 8059fb4:	83 c4 1c             	add    $0x1c,%esp
 8059fb7:	c3                   	ret    
 8059fb8:	90                   	nop
 8059fb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08059fc0 <quotearg_colon>:

char *
quotearg_colon (char const *arg)
{
 8059fc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8059fc4:	89 3c 24             	mov    %edi,(%esp)
 8059fc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8059fcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8059fcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8059fd3:	b9 f3 54 00 00       	mov    $0x54f3,%ecx
 8059fd8:	e8 8b 03 00 00       	call   805a368 <__afl_maybe_log>
 8059fdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8059fe1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8059fe5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8059fe9:	8b 3c 24             	mov    (%esp),%edi
 8059fec:	8d 64 24 10          	lea    0x10(%esp),%esp
 8059ff0:	83 ec 10             	sub    $0x10,%esp
}

char *
quotearg_char (char const *arg, char ch)
{
  return quotearg_char_mem (arg, SIZE_MAX, ch);
 8059ff3:	6a 3a                	push   $0x3a
 8059ff5:	6a ff                	push   $0xffffffff
 8059ff7:	ff 74 24 1c          	pushl  0x1c(%esp)
 8059ffb:	e8 80 fe ff ff       	call   8059e80 <quotearg_char_mem>

char *
quotearg_colon (char const *arg)
{
  return quotearg_char (arg, ':');
}
 805a000:	83 c4 1c             	add    $0x1c,%esp
 805a003:	c3                   	ret    
 805a004:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805a00a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0805a010 <quotearg_colon_mem>:

char *
quotearg_colon_mem (char const *arg, size_t argsize)
{
 805a010:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a014:	89 3c 24             	mov    %edi,(%esp)
 805a017:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a01b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a01f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a023:	b9 9f ab 00 00       	mov    $0xab9f,%ecx
 805a028:	e8 3b 03 00 00       	call   805a368 <__afl_maybe_log>
 805a02d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a031:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a035:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a039:	8b 3c 24             	mov    (%esp),%edi
 805a03c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a040:	83 ec 10             	sub    $0x10,%esp
  return quotearg_char_mem (arg, argsize, ':');
 805a043:	6a 3a                	push   $0x3a
 805a045:	ff 74 24 1c          	pushl  0x1c(%esp)
 805a049:	ff 74 24 1c          	pushl  0x1c(%esp)
 805a04d:	e8 2e fe ff ff       	call   8059e80 <quotearg_char_mem>
}
 805a052:	83 c4 1c             	add    $0x1c,%esp
 805a055:	c3                   	ret    
 805a056:	8d 76 00             	lea    0x0(%esi),%esi
 805a059:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805a060 <quotearg_n_custom_mem>:

char *
quotearg_n_custom_mem (int n, char const *left_quote,
                       char const *right_quote,
                       char const *arg, size_t argsize)
{
 805a060:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a064:	89 3c 24             	mov    %edi,(%esp)
 805a067:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a06b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a06f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a073:	b9 6d 3b 00 00       	mov    $0x3b6d,%ecx
 805a078:	e8 eb 02 00 00       	call   805a368 <__afl_maybe_log>
 805a07d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a081:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a085:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a089:	8b 3c 24             	mov    (%esp),%edi
 805a08c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a090:	53                   	push   %ebx
 805a091:	83 ec 3c             	sub    $0x3c,%esp
  struct quoting_options o = default_quoting_options;
 805a094:	a1 40 7d 43 08       	mov    0x8437d40,%eax
 805a099:	8b 15 44 7d 43 08    	mov    0x8437d44,%edx
 805a09f:	8b 0d 48 7d 43 08    	mov    0x8437d48,%ecx
 805a0a5:	8b 1d 4c 7d 43 08    	mov    0x8437d4c,%ebx
 805a0ab:	89 44 24 04          	mov    %eax,0x4(%esp)
 805a0af:	89 54 24 08          	mov    %edx,0x8(%esp)
 805a0b3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 805a0b7:	89 5c 24 10          	mov    %ebx,0x10(%esp)
 805a0bb:	a1 50 7d 43 08       	mov    0x8437d50,%eax
 805a0c0:	8b 15 54 7d 43 08    	mov    0x8437d54,%edx
 805a0c6:	8b 0d 58 7d 43 08    	mov    0x8437d58,%ecx
 805a0cc:	8b 1d 5c 7d 43 08    	mov    0x8437d5c,%ebx
 805a0d2:	89 44 24 14          	mov    %eax,0x14(%esp)
 805a0d6:	89 54 24 18          	mov    %edx,0x18(%esp)
 805a0da:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 805a0de:	89 5c 24 20          	mov    %ebx,0x20(%esp)
 805a0e2:	a1 60 7d 43 08       	mov    0x8437d60,%eax
 805a0e7:	8b 15 64 7d 43 08    	mov    0x8437d64,%edx
 805a0ed:	8b 0d 68 7d 43 08    	mov    0x8437d68,%ecx
 805a0f3:	8b 1d 6c 7d 43 08    	mov    0x8437d6c,%ebx
 805a0f9:	89 44 24 24          	mov    %eax,0x24(%esp)
 805a0fd:	89 54 24 28          	mov    %edx,0x28(%esp)
 805a101:	89 4c 24 2c          	mov    %ecx,0x2c(%esp)
 805a105:	89 5c 24 30          	mov    %ebx,0x30(%esp)
  set_custom_quoting (&o, left_quote, right_quote);
 805a109:	ff 74 24 4c          	pushl  0x4c(%esp)
 805a10d:	ff 74 24 4c          	pushl  0x4c(%esp)
 805a111:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
 805a115:	53                   	push   %ebx
 805a116:	e8 55 f1 ff ff       	call   8059270 <set_custom_quoting>
  return quotearg_n_options (n, arg, argsize, &o);
 805a11b:	8b 4c 24 60          	mov    0x60(%esp),%ecx
 805a11f:	8b 54 24 5c          	mov    0x5c(%esp),%edx
 805a123:	8b 44 24 50          	mov    0x50(%esp),%eax
 805a127:	89 1c 24             	mov    %ebx,(%esp)
 805a12a:	e8 81 eb ff ff       	call   8058cb0 <quotearg_n_options>
}
 805a12f:	83 c4 48             	add    $0x48,%esp
 805a132:	5b                   	pop    %ebx
 805a133:	c3                   	ret    
 805a134:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805a13a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0805a140 <quotearg_n_custom>:
}

char *
quotearg_n_custom (int n, char const *left_quote,
                   char const *right_quote, char const *arg)
{
 805a140:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a144:	89 3c 24             	mov    %edi,(%esp)
 805a147:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a14b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a14f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a153:	b9 12 dd 00 00       	mov    $0xdd12,%ecx
 805a158:	e8 0b 02 00 00       	call   805a368 <__afl_maybe_log>
 805a15d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a161:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a165:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a169:	8b 3c 24             	mov    (%esp),%edi
 805a16c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a170:	83 ec 18             	sub    $0x18,%esp
  return quotearg_n_custom_mem (n, left_quote, right_quote, arg,
 805a173:	6a ff                	push   $0xffffffff
 805a175:	ff 74 24 2c          	pushl  0x2c(%esp)
 805a179:	ff 74 24 2c          	pushl  0x2c(%esp)
 805a17d:	ff 74 24 2c          	pushl  0x2c(%esp)
 805a181:	ff 74 24 2c          	pushl  0x2c(%esp)
 805a185:	e8 d6 fe ff ff       	call   805a060 <quotearg_n_custom_mem>
                                SIZE_MAX);
}
 805a18a:	83 c4 2c             	add    $0x2c,%esp
 805a18d:	c3                   	ret    
 805a18e:	66 90                	xchg   %ax,%ax

0805a190 <quotearg_custom>:
}

char *
quotearg_custom (char const *left_quote, char const *right_quote,
                 char const *arg)
{
 805a190:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a194:	89 3c 24             	mov    %edi,(%esp)
 805a197:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a19b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a19f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a1a3:	b9 fd 12 00 00       	mov    $0x12fd,%ecx
 805a1a8:	e8 bb 01 00 00       	call   805a368 <__afl_maybe_log>
 805a1ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a1b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a1b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a1b9:	8b 3c 24             	mov    (%esp),%edi
 805a1bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a1c0:	83 ec 18             	sub    $0x18,%esp

char *
quotearg_n_custom (int n, char const *left_quote,
                   char const *right_quote, char const *arg)
{
  return quotearg_n_custom_mem (n, left_quote, right_quote, arg,
 805a1c3:	6a ff                	push   $0xffffffff
 805a1c5:	ff 74 24 28          	pushl  0x28(%esp)
 805a1c9:	ff 74 24 28          	pushl  0x28(%esp)
 805a1cd:	ff 74 24 28          	pushl  0x28(%esp)
 805a1d1:	6a 00                	push   $0x0
 805a1d3:	e8 88 fe ff ff       	call   805a060 <quotearg_n_custom_mem>
char *
quotearg_custom (char const *left_quote, char const *right_quote,
                 char const *arg)
{
  return quotearg_n_custom (0, left_quote, right_quote, arg);
}
 805a1d8:	83 c4 2c             	add    $0x2c,%esp
 805a1db:	c3                   	ret    
 805a1dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

0805a1e0 <quotearg_custom_mem>:

char *
quotearg_custom_mem (char const *left_quote, char const *right_quote,
                     char const *arg, size_t argsize)
{
 805a1e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a1e4:	89 3c 24             	mov    %edi,(%esp)
 805a1e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a1eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a1ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a1f3:	b9 cf 42 00 00       	mov    $0x42cf,%ecx
 805a1f8:	e8 6b 01 00 00       	call   805a368 <__afl_maybe_log>
 805a1fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a201:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a205:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a209:	8b 3c 24             	mov    (%esp),%edi
 805a20c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a210:	83 ec 18             	sub    $0x18,%esp
  return quotearg_n_custom_mem (0, left_quote, right_quote, arg,
 805a213:	ff 74 24 28          	pushl  0x28(%esp)
 805a217:	ff 74 24 28          	pushl  0x28(%esp)
 805a21b:	ff 74 24 28          	pushl  0x28(%esp)
 805a21f:	ff 74 24 28          	pushl  0x28(%esp)
 805a223:	6a 00                	push   $0x0
 805a225:	e8 36 fe ff ff       	call   805a060 <quotearg_n_custom_mem>
                                argsize);
}
 805a22a:	83 c4 2c             	add    $0x2c,%esp
 805a22d:	c3                   	ret    
 805a22e:	66 90                	xchg   %ax,%ax

0805a230 <quote_n_mem>:
    NULL, NULL
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
 805a230:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a234:	89 3c 24             	mov    %edi,(%esp)
 805a237:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a23b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a23f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a243:	b9 8d 86 00 00       	mov    $0x868d,%ecx
 805a248:	e8 1b 01 00 00       	call   805a368 <__afl_maybe_log>
 805a24d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a251:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a255:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a259:	8b 3c 24             	mov    (%esp),%edi
 805a25c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a260:	8b 44 24 04          	mov    0x4(%esp),%eax
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 805a264:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 805a268:	8b 54 24 08          	mov    0x8(%esp),%edx
 805a26c:	c7 44 24 04 60 72 06 	movl   $0x8067260,0x4(%esp)
 805a273:	08 
 805a274:	e9 37 ea ff ff       	jmp    8058cb0 <quotearg_n_options>
 805a279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805a280 <quote_mem>:
}

char const *
quote_mem (char const *arg, size_t argsize)
{
 805a280:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a284:	89 3c 24             	mov    %edi,(%esp)
 805a287:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a28b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a28f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a293:	b9 72 01 00 00       	mov    $0x172,%ecx
 805a298:	e8 cb 00 00 00       	call   805a368 <__afl_maybe_log>
 805a29d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a2a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a2a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a2a9:	8b 3c 24             	mov    (%esp),%edi
 805a2ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a2b0:	8b 54 24 04          	mov    0x4(%esp),%edx
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 805a2b4:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a2b8:	31 c0                	xor    %eax,%eax
 805a2ba:	c7 44 24 04 60 72 06 	movl   $0x8067260,0x4(%esp)
 805a2c1:	08 
 805a2c2:	e9 e9 e9 ff ff       	jmp    8058cb0 <quotearg_n_options>
 805a2c7:	89 f6                	mov    %esi,%esi
 805a2c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805a2d0 <quote_n>:
  return quote_n_mem (0, arg, argsize);
}

char const *
quote_n (int n, char const *arg)
{
 805a2d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a2d4:	89 3c 24             	mov    %edi,(%esp)
 805a2d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a2db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a2df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a2e3:	b9 80 93 00 00       	mov    $0x9380,%ecx
 805a2e8:	e8 7b 00 00 00       	call   805a368 <__afl_maybe_log>
 805a2ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a2f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a2f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a2f9:	8b 3c 24             	mov    (%esp),%edi
 805a2fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a300:	8b 44 24 04          	mov    0x4(%esp),%eax
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 805a304:	8b 54 24 08          	mov    0x8(%esp),%edx
 805a308:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 805a30d:	c7 44 24 04 60 72 06 	movl   $0x8067260,0x4(%esp)
 805a314:	08 
 805a315:	e9 96 e9 ff ff       	jmp    8058cb0 <quotearg_n_options>
 805a31a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805a320 <quote>:
  return quote_n_mem (n, arg, SIZE_MAX);
}

char const *
quote (char const *arg)
{
 805a320:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a324:	89 3c 24             	mov    %edi,(%esp)
 805a327:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a32b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a32f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a333:	b9 00 17 00 00       	mov    $0x1700,%ecx
 805a338:	e8 2b 00 00 00       	call   805a368 <__afl_maybe_log>
 805a33d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a341:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a345:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a349:	8b 3c 24             	mov    (%esp),%edi
 805a34c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a350:	8b 54 24 04          	mov    0x4(%esp),%edx
  };

char const *
quote_n_mem (int n, char const *arg, size_t argsize)
{
  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);
 805a354:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 805a359:	31 c0                	xor    %eax,%eax
 805a35b:	c7 44 24 04 60 72 06 	movl   $0x8067260,0x4(%esp)
 805a362:	08 
 805a363:	e9 48 e9 ff ff       	jmp    8058cb0 <quotearg_n_options>

0805a368 <__afl_maybe_log>:
 805a368:	9f                   	lahf   
 805a369:	0f 90 c0             	seto   %al
 805a36c:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 805a372:	85 d2                	test   %edx,%edx
 805a374:	74 22                	je     805a398 <__afl_setup>

0805a376 <__afl_store>:
 805a376:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 805a37c:	31 cf                	xor    %ecx,%edi
 805a37e:	d1 e9                	shr    %ecx
 805a380:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 805a386:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805a38a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805a38e <__afl_return>:
 805a38e:	04 7f                	add    $0x7f,%al
 805a390:	9e                   	sahf   
 805a391:	c3                   	ret    
 805a392:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805a398 <__afl_setup>:
 805a398:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 805a39f:	75 ed                	jne    805a38e <__afl_return>
 805a3a1:	50                   	push   %eax
 805a3a2:	51                   	push   %ecx
 805a3a3:	68 a0 a4 05 08       	push   $0x805a4a0
 805a3a8:	e8 03 ef fe ff       	call   80492b0 <getenv@plt>
 805a3ad:	83 c4 04             	add    $0x4,%esp
 805a3b0:	85 c0                	test   %eax,%eax
 805a3b2:	0f 84 db 00 00 00    	je     805a493 <__afl_setup_abort>
 805a3b8:	50                   	push   %eax
 805a3b9:	e8 c2 f0 fe ff       	call   8049480 <atoi@plt>
 805a3be:	83 c4 04             	add    $0x4,%esp
 805a3c1:	6a 00                	push   $0x0
 805a3c3:	6a 00                	push   $0x0
 805a3c5:	50                   	push   %eax
 805a3c6:	e8 25 ee fe ff       	call   80491f0 <shmat@plt>
 805a3cb:	83 c4 0c             	add    $0xc,%esp
 805a3ce:	83 f8 ff             	cmp    $0xffffffff,%eax
 805a3d1:	0f 84 bc 00 00 00    	je     805a493 <__afl_setup_abort>
 805a3d7:	c6 00 01             	movb   $0x1,(%eax)
 805a3da:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 805a3df:	89 c2                	mov    %eax,%edx
 805a3e1:	59                   	pop    %ecx
 805a3e2:	58                   	pop    %eax

0805a3e3 <__afl_forkserver>:
 805a3e3:	50                   	push   %eax
 805a3e4:	51                   	push   %ecx
 805a3e5:	52                   	push   %edx
 805a3e6:	6a 04                	push   $0x4
 805a3e8:	68 a0 7d 43 08       	push   $0x8437da0
 805a3ed:	68 c7 00 00 00       	push   $0xc7
 805a3f2:	e8 99 ef fe ff       	call   8049390 <write@plt>
 805a3f7:	83 c4 0c             	add    $0xc,%esp
 805a3fa:	83 f8 04             	cmp    $0x4,%eax
 805a3fd:	75 6e                	jne    805a46d <__afl_fork_resume>

0805a3ff <__afl_fork_wait_loop>:
 805a3ff:	6a 04                	push   $0x4
 805a401:	68 a0 7d 43 08       	push   $0x8437da0
 805a406:	68 c6 00 00 00       	push   $0xc6
 805a40b:	e8 00 ed fe ff       	call   8049110 <read@plt>
 805a410:	83 c4 0c             	add    $0xc,%esp
 805a413:	83 f8 04             	cmp    $0x4,%eax
 805a416:	75 74                	jne    805a48c <__afl_die>
 805a418:	e8 03 f0 fe ff       	call   8049420 <fork@plt>
 805a41d:	83 f8 00             	cmp    $0x0,%eax
 805a420:	7c 6a                	jl     805a48c <__afl_die>
 805a422:	74 49                	je     805a46d <__afl_fork_resume>
 805a424:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 805a429:	6a 04                	push   $0x4
 805a42b:	68 00 7e 43 08       	push   $0x8437e00
 805a430:	68 c7 00 00 00       	push   $0xc7
 805a435:	e8 56 ef fe ff       	call   8049390 <write@plt>
 805a43a:	83 c4 0c             	add    $0xc,%esp
 805a43d:	6a 00                	push   $0x0
 805a43f:	68 a0 7d 43 08       	push   $0x8437da0
 805a444:	ff 35 00 7e 43 08    	pushl  0x8437e00
 805a44a:	e8 f1 ed fe ff       	call   8049240 <waitpid@plt>
 805a44f:	83 c4 0c             	add    $0xc,%esp
 805a452:	83 f8 00             	cmp    $0x0,%eax
 805a455:	7e 35                	jle    805a48c <__afl_die>
 805a457:	6a 04                	push   $0x4
 805a459:	68 a0 7d 43 08       	push   $0x8437da0
 805a45e:	68 c7 00 00 00       	push   $0xc7
 805a463:	e8 28 ef fe ff       	call   8049390 <write@plt>
 805a468:	83 c4 0c             	add    $0xc,%esp
 805a46b:	eb 92                	jmp    805a3ff <__afl_fork_wait_loop>

0805a46d <__afl_fork_resume>:
 805a46d:	68 c6 00 00 00       	push   $0xc6
 805a472:	e8 79 f0 fe ff       	call   80494f0 <close@plt>
 805a477:	68 c7 00 00 00       	push   $0xc7
 805a47c:	e8 6f f0 fe ff       	call   80494f0 <close@plt>
 805a481:	83 c4 08             	add    $0x8,%esp
 805a484:	5a                   	pop    %edx
 805a485:	59                   	pop    %ecx
 805a486:	58                   	pop    %eax
 805a487:	e9 ea fe ff ff       	jmp    805a376 <__afl_store>

0805a48c <__afl_die>:
 805a48c:	31 c0                	xor    %eax,%eax
 805a48e:	e8 ad ec fe ff       	call   8049140 <_exit@plt>

0805a493 <__afl_setup_abort>:
 805a493:	fe 05 20 7e 43 08    	incb   0x8437e20
 805a499:	59                   	pop    %ecx
 805a49a:	58                   	pop    %eax
 805a49b:	e9 ee fe ff ff       	jmp    805a38e <__afl_return>

0805a4a0 <.AFL_SHM_ENV>:
 805a4a0:	5f                   	pop    %edi
 805a4a1:	5f                   	pop    %edi
 805a4a2:	41                   	inc    %ecx
 805a4a3:	46                   	inc    %esi
 805a4a4:	4c                   	dec    %esp
 805a4a5:	5f                   	pop    %edi
 805a4a6:	53                   	push   %ebx
 805a4a7:	48                   	dec    %eax
 805a4a8:	4d                   	dec    %ebp
 805a4a9:	5f                   	pop    %edi
 805a4aa:	49                   	dec    %ecx
 805a4ab:	44                   	inc    %esp
 805a4ac:	00 66 90             	add    %ah,-0x70(%esi)
 805a4af:	90                   	nop

0805a4b0 <version_etc_arn>:
void
version_etc_arn (FILE *stream,
                 const char *command_name, const char *package,
                 const char *version,
                 const char * const * authors, size_t n_authors)
{
 805a4b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a4b4:	89 3c 24             	mov    %edi,(%esp)
 805a4b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a4bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a4bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a4c3:	b9 6e 37 00 00       	mov    $0x376e,%ecx
 805a4c8:	e8 73 0a 00 00       	call   805af40 <__afl_maybe_log>
 805a4cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a4d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a4d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a4d9:	8b 3c 24             	mov    (%esp),%edi
 805a4dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a4e0:	55                   	push   %ebp
 805a4e1:	57                   	push   %edi
 805a4e2:	56                   	push   %esi
 805a4e3:	53                   	push   %ebx
 805a4e4:	83 ec 2c             	sub    $0x2c,%esp
 805a4e7:	8b 44 24 44          	mov    0x44(%esp),%eax
 805a4eb:	8b 74 24 40          	mov    0x40(%esp),%esi
 805a4ef:	8b 54 24 48          	mov    0x48(%esp),%edx
 805a4f3:	8b 4c 24 4c          	mov    0x4c(%esp),%ecx
 805a4f7:	8b 5c 24 50          	mov    0x50(%esp),%ebx
 805a4fb:	8b 7c 24 54          	mov    0x54(%esp),%edi
  if (command_name)
 805a4ff:	85 c0                	test   %eax,%eax
 805a501:	0f 84 69 04 00 00    	je     805a970 <version_etc_arn+0x4c0>
 805a507:	90                   	nop
 805a508:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a50c:	89 3c 24             	mov    %edi,(%esp)
 805a50f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a513:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a517:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a51b:	b9 f8 a4 00 00       	mov    $0xa4f8,%ecx
 805a520:	e8 1b 0a 00 00       	call   805af40 <__afl_maybe_log>
 805a525:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a529:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a52d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a531:	8b 3c 24             	mov    (%esp),%edi
 805a534:	8d 64 24 10          	lea    0x10(%esp),%esp

# ifdef __va_arg_pack
__fortify_function int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
 805a538:	83 ec 08             	sub    $0x8,%esp
 805a53b:	51                   	push   %ecx
 805a53c:	52                   	push   %edx
 805a53d:	50                   	push   %eax
 805a53e:	68 a4 3b 06 08       	push   $0x8063ba4
 805a543:	6a 01                	push   $0x1
 805a545:	56                   	push   %esi
 805a546:	e8 55 ef fe ff       	call   80494a0 <__fprintf_chk@plt>
 805a54b:	83 c4 20             	add    $0x20,%esp
 805a54e:	66 90                	xchg   %ax,%ax
#endif

  /* TRANSLATORS: Translate "(C)" to the copyright symbol
     (C-in-a-circle), if this symbol is available in the user's
     locale.  Otherwise, do not translate "(C)"; leave it as-is.  */
  fprintf (stream, version_etc_copyright, _("(C)"), COPYRIGHT_YEAR);
 805a550:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a554:	89 3c 24             	mov    %edi,(%esp)
 805a557:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a55b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a55f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a563:	b9 42 8c 00 00       	mov    $0x8c42,%ecx
 805a568:	e8 d3 09 00 00       	call   805af40 <__afl_maybe_log>
 805a56d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a571:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a575:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a579:	8b 3c 24             	mov    (%esp),%edi
 805a57c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a580:	83 ec 04             	sub    $0x4,%esp
 805a583:	6a 05                	push   $0x5
 805a585:	68 b7 3b 06 08       	push   $0x8063bb7
 805a58a:	6a 00                	push   $0x0
 805a58c:	e8 4f ec fe ff       	call   80491e0 <dcgettext@plt>
 805a591:	c7 04 24 df 07 00 00 	movl   $0x7df,(%esp)
 805a598:	50                   	push   %eax
 805a599:	68 c0 3e 06 08       	push   $0x8063ec0
 805a59e:	6a 01                	push   $0x1
 805a5a0:	56                   	push   %esi
 805a5a1:	e8 fa ee fe ff       	call   80494a0 <__fprintf_chk@plt>

  fputs (_("\
 805a5a6:	83 c4 1c             	add    $0x1c,%esp
 805a5a9:	6a 05                	push   $0x5
 805a5ab:	68 40 3c 06 08       	push   $0x8063c40
 805a5b0:	6a 00                	push   $0x0
 805a5b2:	e8 29 ec fe ff       	call   80491e0 <dcgettext@plt>
 805a5b7:	5d                   	pop    %ebp
 805a5b8:	5a                   	pop    %edx
 805a5b9:	56                   	push   %esi
 805a5ba:	50                   	push   %eax
 805a5bb:	e8 60 ed fe ff       	call   8049320 <fputs_unlocked@plt>
There is NO WARRANTY, to the extent permitted by law.\n\
\n\
"),
         stream);

  switch (n_authors)
 805a5c0:	83 c4 10             	add    $0x10,%esp
 805a5c3:	83 ff 09             	cmp    $0x9,%edi
 805a5c6:	0f 87 c4 03 00 00    	ja     805a990 <version_etc_arn+0x4e0>
 805a5cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a5d0:	89 3c 24             	mov    %edi,(%esp)
 805a5d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a5d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a5db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a5df:	b9 d6 c6 00 00       	mov    $0xc6d6,%ecx
 805a5e4:	e8 57 09 00 00       	call   805af40 <__afl_maybe_log>
 805a5e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a5ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a5f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a5f5:	8b 3c 24             	mov    (%esp),%edi
 805a5f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a5fc:	ff 24 bd 84 3e 06 08 	jmp    *0x8063e84(,%edi,4)
 805a603:	90                   	nop
 805a604:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 8:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 805a608:	8b 6b 1c             	mov    0x1c(%ebx),%ebp
 805a60b:	8b 53 10             	mov    0x10(%ebx),%edx
 805a60e:	83 ec 04             	sub    $0x4,%esp
 805a611:	8b 4b 0c             	mov    0xc(%ebx),%ecx
 805a614:	8b 7b 08             	mov    0x8(%ebx),%edi
 805a617:	8b 43 18             	mov    0x18(%ebx),%eax
 805a61a:	89 6c 24 1c          	mov    %ebp,0x1c(%esp)
 805a61e:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805a622:	89 7c 24 14          	mov    %edi,0x14(%esp)
 805a626:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 805a62a:	89 44 24 18          	mov    %eax,0x18(%esp)
 805a62e:	8b 6b 14             	mov    0x14(%ebx),%ebp
 805a631:	8b 7b 04             	mov    0x4(%ebx),%edi
 805a634:	8b 1b                	mov    (%ebx),%ebx
 805a636:	6a 05                	push   $0x5
 805a638:	68 a4 3d 06 08       	push   $0x8063da4
 805a63d:	6a 00                	push   $0x0
 805a63f:	e8 9c eb fe ff       	call   80491e0 <dcgettext@plt>
 805a644:	83 c4 0c             	add    $0xc,%esp
 805a647:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805a64b:	52                   	push   %edx
 805a64c:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805a650:	51                   	push   %ecx
 805a651:	55                   	push   %ebp
 805a652:	ff 74 24 18          	pushl  0x18(%esp)
 805a656:	ff 74 24 20          	pushl  0x20(%esp)
 805a65a:	ff 74 24 28          	pushl  0x28(%esp)
 805a65e:	57                   	push   %edi
 805a65f:	90                   	nop
 805a660:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a664:	89 3c 24             	mov    %edi,(%esp)
 805a667:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a66b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a66f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a673:	b9 91 25 00 00       	mov    $0x2591,%ecx
 805a678:	e8 c3 08 00 00       	call   805af40 <__afl_maybe_log>
 805a67d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a681:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a685:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a689:	8b 3c 24             	mov    (%esp),%edi
 805a68c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a690:	53                   	push   %ebx
 805a691:	50                   	push   %eax
 805a692:	6a 01                	push   $0x1
 805a694:	56                   	push   %esi
 805a695:	e8 06 ee fe ff       	call   80494a0 <__fprintf_chk@plt>
 805a69a:	83 c4 30             	add    $0x30,%esp
 805a69d:	8d 76 00             	lea    0x0(%esi),%esi
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805a6a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a6a4:	89 3c 24             	mov    %edi,(%esp)
 805a6a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a6ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a6af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a6b3:	b9 5a 46 00 00       	mov    $0x465a,%ecx
 805a6b8:	e8 83 08 00 00       	call   805af40 <__afl_maybe_log>
 805a6bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a6c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a6c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a6c9:	8b 3c 24             	mov    (%esp),%edi
 805a6cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a6d0:	83 c4 2c             	add    $0x2c,%esp
 805a6d3:	5b                   	pop    %ebx
 805a6d4:	5e                   	pop    %esi
 805a6d5:	5f                   	pop    %edi
 805a6d6:	5d                   	pop    %ebp
 805a6d7:	c3                   	ret    
 805a6d8:	90                   	nop
 805a6d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 9:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 805a6e0:	8b 53 20             	mov    0x20(%ebx),%edx
 805a6e3:	8b 43 1c             	mov    0x1c(%ebx),%eax
 805a6e6:	83 ec 04             	sub    $0x4,%esp
 805a6e9:	8b 7b 10             	mov    0x10(%ebx),%edi
 805a6ec:	8b 4b 14             	mov    0x14(%ebx),%ecx
 805a6ef:	8b 6b 18             	mov    0x18(%ebx),%ebp
 805a6f2:	89 54 24 20          	mov    %edx,0x20(%esp)
 805a6f6:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 805a6fa:	8b 53 0c             	mov    0xc(%ebx),%edx
 805a6fd:	8b 43 08             	mov    0x8(%ebx),%eax
 805a700:	89 7c 24 10          	mov    %edi,0x10(%esp)
 805a704:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 805a708:	8b 7b 04             	mov    0x4(%ebx),%edi
 805a70b:	8b 1b                	mov    (%ebx),%ebx
 805a70d:	89 54 24 14          	mov    %edx,0x14(%esp)
 805a711:	89 44 24 18          	mov    %eax,0x18(%esp)
 805a715:	6a 05                	push   $0x5
 805a717:	68 d4 3d 06 08       	push   $0x8063dd4
      /* 10 or more authors.  Use an abbreviation, since the human reader
         will probably not want to read the entire list anyway.  */
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 805a71c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a720:	89 3c 24             	mov    %edi,(%esp)
 805a723:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a727:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a72b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a72f:	b9 b4 9a 00 00       	mov    $0x9ab4,%ecx
 805a734:	e8 07 08 00 00       	call   805af40 <__afl_maybe_log>
 805a739:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805a73d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805a741:	8b 54 24 04          	mov    0x4(%esp),%edx
 805a745:	8b 3c 24             	mov    (%esp),%edi
 805a748:	8d 64 24 10          	lea    0x10(%esp),%esp
 805a74c:	6a 00                	push   $0x0
 805a74e:	e8 8d ea fe ff       	call   80491e0 <dcgettext@plt>
 805a753:	8b 54 24 2c          	mov    0x2c(%esp),%edx
 805a757:	52                   	push   %edx
 805a758:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
 805a75c:	51                   	push   %ecx
 805a75d:	55                   	push   %ebp
 805a75e:	ff 74 24 24          	pushl  0x24(%esp)
 805a762:	ff 74 24 2c          	pushl  0x2c(%esp)
 805a766:	ff 74 24 34          	pushl  0x34(%esp)
 805a76a:	ff 74 24 3c          	pushl  0x3c(%esp)
 805a76e:	57                   	push   %edi
 805a76f:	53                   	push   %ebx
 805a770:	50                   	push   %eax
 805a771:	6a 01                	push   $0x1
 805a773:	56                   	push   %esi
 805a774:	e8 27 ed fe ff       	call   80494a0 <__fprintf_chk@plt>
 805a779:	83 c4 40             	add    $0x40,%esp
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805a77c:	83 c4 2c             	add    $0x2c,%esp
 805a77f:	5b                   	pop    %ebx
 805a780:	5e                   	pop    %esi
 805a781:	5f                   	pop    %edi
 805a782:	5d                   	pop    %ebp
 805a783:	c3                   	ret    
 805a784:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

  switch (n_authors)
    {
    case 0:
      /* The caller must provide at least one author name.  */
      abort ();
 805a788:	e8 53 ed fe ff       	call   80494e0 <abort@plt>
 805a78d:	8d 76 00             	lea    0x0(%esi),%esi
    case 1:
      /* TRANSLATORS: %s denotes an author name.  */
      fprintf (stream, _("Written by %s.\n"), authors[0]);
 805a790:	83 ec 04             	sub    $0x4,%esp
 805a793:	8b 1b                	mov    (%ebx),%ebx
 805a795:	6a 05                	push   $0x5
 805a797:	68 bb 3b 06 08       	push   $0x8063bbb
 805a79c:	6a 00                	push   $0x0
 805a79e:	e8 3d ea fe ff       	call   80491e0 <dcgettext@plt>
 805a7a3:	89 5c 24 5c          	mov    %ebx,0x5c(%esp)
 805a7a7:	89 74 24 50          	mov    %esi,0x50(%esp)
 805a7ab:	89 44 24 58          	mov    %eax,0x58(%esp)
 805a7af:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%esp)
 805a7b6:	00 
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805a7b7:	83 c4 3c             	add    $0x3c,%esp
 805a7ba:	5b                   	pop    %ebx
 805a7bb:	5e                   	pop    %esi
 805a7bc:	5f                   	pop    %edi
 805a7bd:	5d                   	pop    %ebp
 805a7be:	e9 dd ec fe ff       	jmp    80494a0 <__fprintf_chk@plt>
 805a7c3:	90                   	nop
 805a7c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      /* TRANSLATORS: %s denotes an author name.  */
      fprintf (stream, _("Written by %s.\n"), authors[0]);
      break;
    case 2:
      /* TRANSLATORS: Each %s denotes an author name.  */
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
 805a7c8:	83 ec 04             	sub    $0x4,%esp
 805a7cb:	8b 6b 04             	mov    0x4(%ebx),%ebp
 805a7ce:	8b 3b                	mov    (%ebx),%edi
 805a7d0:	6a 05                	push   $0x5
 805a7d2:	68 cb 3b 06 08       	push   $0x8063bcb
 805a7d7:	6a 00                	push   $0x0
 805a7d9:	e8 02 ea fe ff       	call   80491e0 <dcgettext@plt>
 805a7de:	89 6c 24 60          	mov    %ebp,0x60(%esp)
 805a7e2:	89 7c 24 5c          	mov    %edi,0x5c(%esp)
 805a7e6:	89 74 24 50          	mov    %esi,0x50(%esp)
 805a7ea:	89 44 24 58          	mov    %eax,0x58(%esp)
 805a7ee:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%esp)
 805a7f5:	00 
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805a7f6:	83 c4 3c             	add    $0x3c,%esp
 805a7f9:	5b                   	pop    %ebx
 805a7fa:	5e                   	pop    %esi
 805a7fb:	5f                   	pop    %edi
 805a7fc:	5d                   	pop    %ebp
 805a7fd:	e9 9e ec fe ff       	jmp    80494a0 <__fprintf_chk@plt>
 805a802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      /* TRANSLATORS: Each %s denotes an author name.  */
      fprintf (stream, _("Written by %s and %s.\n"), authors[0], authors[1]);
      break;
    case 3:
      /* TRANSLATORS: Each %s denotes an author name.  */
      fprintf (stream, _("Written by %s, %s, and %s.\n"),
 805a808:	83 ec 04             	sub    $0x4,%esp
 805a80b:	8b 6b 08             	mov    0x8(%ebx),%ebp
 805a80e:	8b 7b 04             	mov    0x4(%ebx),%edi
 805a811:	8b 1b                	mov    (%ebx),%ebx
 805a813:	6a 05                	push   $0x5
 805a815:	68 e2 3b 06 08       	push   $0x8063be2
 805a81a:	6a 00                	push   $0x0
 805a81c:	e8 bf e9 fe ff       	call   80491e0 <dcgettext@plt>
 805a821:	89 6c 24 64          	mov    %ebp,0x64(%esp)
 805a825:	89 7c 24 60          	mov    %edi,0x60(%esp)
 805a829:	89 5c 24 5c          	mov    %ebx,0x5c(%esp)
 805a82d:	89 74 24 50          	mov    %esi,0x50(%esp)
 805a831:	89 44 24 58          	mov    %eax,0x58(%esp)
 805a835:	c7 44 24 54 01 00 00 	movl   $0x1,0x54(%esp)
 805a83c:	00 
Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"),
                authors[0], authors[1], authors[2], authors[3], authors[4],
                authors[5], authors[6], authors[7], authors[8]);
      break;
    }
}
 805a83d:	83 c4 3c             	add    $0x3c,%esp
 805a840:	5b                   	pop    %ebx
 805a841:	5e                   	pop    %esi
 805a842:	5f                   	pop    %edi
 805a843:	5d                   	pop    %ebp
 805a844:	e9 57 ec fe ff       	jmp    80494a0 <__fprintf_chk@plt>
 805a849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 4:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\nand %s.\n"),
 805a850:	8b 43 0c             	mov    0xc(%ebx),%eax
 805a853:	83 ec 04             	sub    $0x4,%esp
 805a856:	8b 6b 08             	mov    0x8(%ebx),%ebp
 805a859:	8b 7b 04             	mov    0x4(%ebx),%edi
 805a85c:	8b 1b                	mov    (%ebx),%ebx
 805a85e:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a862:	6a 05                	push   $0x5
 805a864:	68 0c 3d 06 08       	push   $0x8063d0c
 805a869:	6a 00                	push   $0x0
 805a86b:	e8 70 e9 fe ff       	call   80491e0 <dcgettext@plt>
 805a870:	83 c4 0c             	add    $0xc,%esp
 805a873:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 805a877:	51                   	push   %ecx
 805a878:	55                   	push   %ebp
 805a879:	57                   	push   %edi
 805a87a:	53                   	push   %ebx
 805a87b:	50                   	push   %eax
 805a87c:	6a 01                	push   $0x1
 805a87e:	56                   	push   %esi
 805a87f:	e8 1c ec fe ff       	call   80494a0 <__fprintf_chk@plt>
 805a884:	83 c4 20             	add    $0x20,%esp
 805a887:	e9 11 fe ff ff       	jmp    805a69d <version_etc_arn+0x1ed>
 805a88c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      break;
    case 5:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\n%s, and %s.\n"),
 805a890:	8b 6b 0c             	mov    0xc(%ebx),%ebp
 805a893:	8b 43 10             	mov    0x10(%ebx),%eax
 805a896:	83 ec 04             	sub    $0x4,%esp
 805a899:	8b 7b 04             	mov    0x4(%ebx),%edi
 805a89c:	89 6c 24 0c          	mov    %ebp,0xc(%esp)
 805a8a0:	89 44 24 10          	mov    %eax,0x10(%esp)
 805a8a4:	8b 6b 08             	mov    0x8(%ebx),%ebp
 805a8a7:	8b 1b                	mov    (%ebx),%ebx
 805a8a9:	6a 05                	push   $0x5
 805a8ab:	68 2c 3d 06 08       	push   $0x8063d2c
 805a8b0:	6a 00                	push   $0x0
 805a8b2:	e8 29 e9 fe ff       	call   80491e0 <dcgettext@plt>
 805a8b7:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805a8bb:	51                   	push   %ecx
 805a8bc:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805a8c0:	52                   	push   %edx
 805a8c1:	55                   	push   %ebp
 805a8c2:	57                   	push   %edi
 805a8c3:	53                   	push   %ebx
 805a8c4:	50                   	push   %eax
 805a8c5:	6a 01                	push   $0x1
 805a8c7:	56                   	push   %esi
 805a8c8:	e8 d3 eb fe ff       	call   80494a0 <__fprintf_chk@plt>
 805a8cd:	83 c4 30             	add    $0x30,%esp
 805a8d0:	e9 c8 fd ff ff       	jmp    805a69d <version_etc_arn+0x1ed>
 805a8d5:	8d 76 00             	lea    0x0(%esi),%esi
      break;
    case 6:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, and %s.\n"),
 805a8d8:	8b 6b 10             	mov    0x10(%ebx),%ebp
 805a8db:	8b 53 04             	mov    0x4(%ebx),%edx
 805a8de:	83 ec 04             	sub    $0x4,%esp
 805a8e1:	8b 43 14             	mov    0x14(%ebx),%eax
 805a8e4:	8b 7b 08             	mov    0x8(%ebx),%edi
 805a8e7:	89 6c 24 10          	mov    %ebp,0x10(%esp)
 805a8eb:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805a8ef:	89 44 24 14          	mov    %eax,0x14(%esp)
 805a8f3:	8b 6b 0c             	mov    0xc(%ebx),%ebp
 805a8f6:	8b 1b                	mov    (%ebx),%ebx
 805a8f8:	6a 05                	push   $0x5
 805a8fa:	68 50 3d 06 08       	push   $0x8063d50
 805a8ff:	6a 00                	push   $0x0
 805a901:	e8 da e8 fe ff       	call   80491e0 <dcgettext@plt>
 805a906:	8b 4c 24 20          	mov    0x20(%esp),%ecx
 805a90a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805a90e:	89 0c 24             	mov    %ecx,(%esp)
 805a911:	52                   	push   %edx
 805a912:	55                   	push   %ebp
 805a913:	57                   	push   %edi
 805a914:	ff 74 24 24          	pushl  0x24(%esp)
 805a918:	e9 42 fd ff ff       	jmp    805a65f <version_etc_arn+0x1af>
 805a91d:	8d 76 00             	lea    0x0(%esi),%esi
      break;
    case 7:
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"),
 805a920:	8b 6b 14             	mov    0x14(%ebx),%ebp
 805a923:	8b 53 08             	mov    0x8(%ebx),%edx
 805a926:	83 ec 04             	sub    $0x4,%esp
 805a929:	8b 4b 04             	mov    0x4(%ebx),%ecx
 805a92c:	8b 43 18             	mov    0x18(%ebx),%eax
 805a92f:	8b 7b 0c             	mov    0xc(%ebx),%edi
 805a932:	89 6c 24 14          	mov    %ebp,0x14(%esp)
 805a936:	89 54 24 0c          	mov    %edx,0xc(%esp)
 805a93a:	89 44 24 18          	mov    %eax,0x18(%esp)
 805a93e:	89 4c 24 10          	mov    %ecx,0x10(%esp)
 805a942:	8b 6b 10             	mov    0x10(%ebx),%ebp
 805a945:	8b 1b                	mov    (%ebx),%ebx
 805a947:	6a 05                	push   $0x5
 805a949:	68 78 3d 06 08       	push   $0x8063d78
 805a94e:	6a 00                	push   $0x0
 805a950:	e8 8b e8 fe ff       	call   80491e0 <dcgettext@plt>
 805a955:	5a                   	pop    %edx
 805a956:	59                   	pop    %ecx
 805a957:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805a95b:	52                   	push   %edx
 805a95c:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
 805a960:	51                   	push   %ecx
 805a961:	55                   	push   %ebp
 805a962:	57                   	push   %edi
 805a963:	ff 74 24 20          	pushl  0x20(%esp)
 805a967:	ff 74 24 28          	pushl  0x28(%esp)
 805a96b:	e9 ef fc ff ff       	jmp    805a65f <version_etc_arn+0x1af>
 805a970:	83 ec 0c             	sub    $0xc,%esp
 805a973:	51                   	push   %ecx
 805a974:	52                   	push   %edx
 805a975:	68 b0 3b 06 08       	push   $0x8063bb0
 805a97a:	6a 01                	push   $0x1
 805a97c:	56                   	push   %esi
 805a97d:	e8 1e eb fe ff       	call   80494a0 <__fprintf_chk@plt>
 805a982:	83 c4 20             	add    $0x20,%esp
 805a985:	e9 c4 fb ff ff       	jmp    805a54e <version_etc_arn+0x9e>
 805a98a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      /* 10 or more authors.  Use an abbreviation, since the human reader
         will probably not want to read the entire list anyway.  */
      /* TRANSLATORS: Each %s denotes an author name.
         You can use line breaks, estimating that each author name occupies
         ca. 16 screen columns and that a screen line has ca. 80 columns.  */
      fprintf (stream, _("\
 805a990:	8b 4b 1c             	mov    0x1c(%ebx),%ecx
 805a993:	8b 6b 20             	mov    0x20(%ebx),%ebp
 805a996:	83 ec 04             	sub    $0x4,%esp
 805a999:	8b 7b 14             	mov    0x14(%ebx),%edi
 805a99c:	8b 53 10             	mov    0x10(%ebx),%edx
 805a99f:	8b 43 0c             	mov    0xc(%ebx),%eax
 805a9a2:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 805a9a6:	8b 4b 08             	mov    0x8(%ebx),%ecx
 805a9a9:	89 6c 24 20          	mov    %ebp,0x20(%esp)
 805a9ad:	89 7c 24 0c          	mov    %edi,0xc(%esp)
 805a9b1:	89 54 24 10          	mov    %edx,0x10(%esp)
 805a9b5:	89 44 24 14          	mov    %eax,0x14(%esp)
 805a9b9:	89 4c 24 18          	mov    %ecx,0x18(%esp)
 805a9bd:	8b 6b 18             	mov    0x18(%ebx),%ebp
 805a9c0:	8b 7b 04             	mov    0x4(%ebx),%edi
 805a9c3:	8b 1b                	mov    (%ebx),%ebx
 805a9c5:	6a 05                	push   $0x5
 805a9c7:	68 08 3e 06 08       	push   $0x8063e08
 805a9cc:	e9 4b fd ff ff       	jmp    805a71c <version_etc_arn+0x26c>
 805a9d1:	eb 0d                	jmp    805a9e0 <version_etc_ar>
 805a9d3:	90                   	nop
 805a9d4:	90                   	nop
 805a9d5:	90                   	nop
 805a9d6:	90                   	nop
 805a9d7:	90                   	nop
 805a9d8:	90                   	nop
 805a9d9:	90                   	nop
 805a9da:	90                   	nop
 805a9db:	90                   	nop
 805a9dc:	90                   	nop
 805a9dd:	90                   	nop
 805a9de:	90                   	nop
 805a9df:	90                   	nop

0805a9e0 <version_etc_ar>:
   Author names are given in the NULL-terminated array AUTHORS. */
void
version_etc_ar (FILE *stream,
                const char *command_name, const char *package,
                const char *version, const char * const * authors)
{
 805a9e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805a9e4:	89 3c 24             	mov    %edi,(%esp)
 805a9e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805a9eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805a9ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805a9f3:	b9 9b b1 00 00       	mov    $0xb19b,%ecx
 805a9f8:	e8 43 05 00 00       	call   805af40 <__afl_maybe_log>
 805a9fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aa01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aa05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aa09:	8b 3c 24             	mov    (%esp),%edi
 805aa0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aa10:	83 ec 0c             	sub    $0xc,%esp
  size_t n_authors;

  for (n_authors = 0; authors[n_authors]; n_authors++)
 805aa13:	31 c0                	xor    %eax,%eax
   Author names are given in the NULL-terminated array AUTHORS. */
void
version_etc_ar (FILE *stream,
                const char *command_name, const char *package,
                const char *version, const char * const * authors)
{
 805aa15:	8b 54 24 20          	mov    0x20(%esp),%edx
  size_t n_authors;

  for (n_authors = 0; authors[n_authors]; n_authors++)
 805aa19:	8b 0a                	mov    (%edx),%ecx
 805aa1b:	85 c9                	test   %ecx,%ecx
 805aa1d:	74 6d                	je     805aa8c <version_etc_ar+0xac>
 805aa1f:	90                   	nop
 805aa20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aa24:	89 3c 24             	mov    %edi,(%esp)
 805aa27:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aa2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aa2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aa33:	b9 9e 04 00 00       	mov    $0x49e,%ecx
 805aa38:	e8 03 05 00 00       	call   805af40 <__afl_maybe_log>
 805aa3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aa41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aa45:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aa49:	8b 3c 24             	mov    (%esp),%edi
 805aa4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aa50:	83 c0 01             	add    $0x1,%eax
 805aa53:	8b 0c 82             	mov    (%edx,%eax,4),%ecx
 805aa56:	85 c9                	test   %ecx,%ecx
 805aa58:	75 f6                	jne    805aa50 <version_etc_ar+0x70>
 805aa5a:	66 90                	xchg   %ax,%ax
 805aa5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aa60:	89 3c 24             	mov    %edi,(%esp)
 805aa63:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aa67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aa6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aa6f:	b9 14 54 00 00       	mov    $0x5414,%ecx
 805aa74:	e8 c7 04 00 00       	call   805af40 <__afl_maybe_log>
 805aa79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aa7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aa81:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aa85:	8b 3c 24             	mov    (%esp),%edi
 805aa88:	8d 64 24 10          	lea    0x10(%esp),%esp
    ;
  version_etc_arn (stream, command_name, package, version, authors, n_authors);
 805aa8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aa90:	89 3c 24             	mov    %edi,(%esp)
 805aa93:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aa97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aa9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aa9f:	b9 85 3e 00 00       	mov    $0x3e85,%ecx
 805aaa4:	e8 97 04 00 00       	call   805af40 <__afl_maybe_log>
 805aaa9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aaad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aab1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aab5:	8b 3c 24             	mov    (%esp),%edi
 805aab8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aabc:	83 ec 08             	sub    $0x8,%esp
 805aabf:	50                   	push   %eax
 805aac0:	52                   	push   %edx
 805aac1:	ff 74 24 2c          	pushl  0x2c(%esp)
 805aac5:	ff 74 24 2c          	pushl  0x2c(%esp)
 805aac9:	ff 74 24 2c          	pushl  0x2c(%esp)
 805aacd:	ff 74 24 2c          	pushl  0x2c(%esp)
 805aad1:	e8 da f9 ff ff       	call   805a4b0 <version_etc_arn>
}
 805aad6:	83 c4 2c             	add    $0x2c,%esp
 805aad9:	c3                   	ret    
 805aada:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805aae0 <version_etc_va>:
   Author names are given in the NULL-terminated va_list AUTHORS. */
void
version_etc_va (FILE *stream,
                const char *command_name, const char *package,
                const char *version, va_list authors)
{
 805aae0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aae4:	89 3c 24             	mov    %edi,(%esp)
 805aae7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aaeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aaef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aaf3:	b9 0c f9 00 00       	mov    $0xf90c,%ecx
 805aaf8:	e8 43 04 00 00       	call   805af40 <__afl_maybe_log>
 805aafd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ab01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ab05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ab09:	8b 3c 24             	mov    (%esp),%edi
 805ab0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ab10:	83 ec 3c             	sub    $0x3c,%esp
 805ab13:	8b 44 24 50          	mov    0x50(%esp),%eax
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
 805ab17:	8b 10                	mov    (%eax),%edx
 805ab19:	85 d2                	test   %edx,%edx
 805ab1b:	89 54 24 08          	mov    %edx,0x8(%esp)
 805ab1f:	0f 84 9b 02 00 00    	je     805adc0 <version_etc_va+0x2e0>
 805ab25:	8d 76 00             	lea    0x0(%esi),%esi
 805ab28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ab2c:	89 3c 24             	mov    %edi,(%esp)
 805ab2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ab33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ab37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ab3b:	b9 c7 ca 00 00       	mov    $0xcac7,%ecx
 805ab40:	e8 fb 03 00 00       	call   805af40 <__afl_maybe_log>
 805ab45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ab49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ab4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ab51:	8b 3c 24             	mov    (%esp),%edi
 805ab54:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ab58:	8b 48 04             	mov    0x4(%eax),%ecx
 805ab5b:	85 c9                	test   %ecx,%ecx
 805ab5d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 805ab61:	0f 84 61 02 00 00    	je     805adc8 <version_etc_va+0x2e8>
 805ab67:	90                   	nop
 805ab68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ab6c:	89 3c 24             	mov    %edi,(%esp)
 805ab6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ab73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ab77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ab7b:	b9 f4 a2 00 00       	mov    $0xa2f4,%ecx
 805ab80:	e8 bb 03 00 00       	call   805af40 <__afl_maybe_log>
 805ab85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ab89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ab8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ab91:	8b 3c 24             	mov    (%esp),%edi
 805ab94:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ab98:	8b 50 08             	mov    0x8(%eax),%edx
 805ab9b:	85 d2                	test   %edx,%edx
 805ab9d:	89 54 24 10          	mov    %edx,0x10(%esp)
 805aba1:	0f 84 29 02 00 00    	je     805add0 <version_etc_va+0x2f0>
 805aba7:	90                   	nop
 805aba8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805abac:	89 3c 24             	mov    %edi,(%esp)
 805abaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805abb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805abb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805abbb:	b9 dd f4 00 00       	mov    $0xf4dd,%ecx
 805abc0:	e8 7b 03 00 00       	call   805af40 <__afl_maybe_log>
 805abc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805abc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805abcd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805abd1:	8b 3c 24             	mov    (%esp),%edi
 805abd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805abd8:	8b 48 0c             	mov    0xc(%eax),%ecx
 805abdb:	85 c9                	test   %ecx,%ecx
 805abdd:	89 4c 24 14          	mov    %ecx,0x14(%esp)
 805abe1:	0f 84 f9 01 00 00    	je     805ade0 <version_etc_va+0x300>
 805abe7:	90                   	nop
 805abe8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805abec:	89 3c 24             	mov    %edi,(%esp)
 805abef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805abf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805abf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805abfb:	b9 fa e3 00 00       	mov    $0xe3fa,%ecx
 805ac00:	e8 3b 03 00 00       	call   805af40 <__afl_maybe_log>
 805ac05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ac09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ac0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ac11:	8b 3c 24             	mov    (%esp),%edi
 805ac14:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ac18:	8b 50 10             	mov    0x10(%eax),%edx
 805ac1b:	85 d2                	test   %edx,%edx
 805ac1d:	89 54 24 18          	mov    %edx,0x18(%esp)
 805ac21:	0f 84 c9 01 00 00    	je     805adf0 <version_etc_va+0x310>
 805ac27:	90                   	nop
 805ac28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ac2c:	89 3c 24             	mov    %edi,(%esp)
 805ac2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ac33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ac37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ac3b:	b9 71 8b 00 00       	mov    $0x8b71,%ecx
 805ac40:	e8 fb 02 00 00       	call   805af40 <__afl_maybe_log>
 805ac45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ac49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ac4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ac51:	8b 3c 24             	mov    (%esp),%edi
 805ac54:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ac58:	8b 48 14             	mov    0x14(%eax),%ecx
 805ac5b:	85 c9                	test   %ecx,%ecx
 805ac5d:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 805ac61:	0f 84 99 01 00 00    	je     805ae00 <version_etc_va+0x320>
 805ac67:	90                   	nop
 805ac68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ac6c:	89 3c 24             	mov    %edi,(%esp)
 805ac6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ac73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ac77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ac7b:	b9 ec d5 00 00       	mov    $0xd5ec,%ecx
 805ac80:	e8 bb 02 00 00       	call   805af40 <__afl_maybe_log>
 805ac85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ac89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ac8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ac91:	8b 3c 24             	mov    (%esp),%edi
 805ac94:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ac98:	8b 50 18             	mov    0x18(%eax),%edx
 805ac9b:	85 d2                	test   %edx,%edx
 805ac9d:	89 54 24 20          	mov    %edx,0x20(%esp)
 805aca1:	0f 84 69 01 00 00    	je     805ae10 <version_etc_va+0x330>
 805aca7:	90                   	nop
 805aca8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805acac:	89 3c 24             	mov    %edi,(%esp)
 805acaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805acb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805acb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805acbb:	b9 99 d3 00 00       	mov    $0xd399,%ecx
 805acc0:	e8 7b 02 00 00       	call   805af40 <__afl_maybe_log>
 805acc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805acc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805accd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805acd1:	8b 3c 24             	mov    (%esp),%edi
 805acd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805acd8:	8b 48 1c             	mov    0x1c(%eax),%ecx
 805acdb:	85 c9                	test   %ecx,%ecx
 805acdd:	89 4c 24 24          	mov    %ecx,0x24(%esp)
 805ace1:	0f 84 39 01 00 00    	je     805ae20 <version_etc_va+0x340>
 805ace7:	90                   	nop
 805ace8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805acec:	89 3c 24             	mov    %edi,(%esp)
 805acef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805acf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805acf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805acfb:	b9 eb fa 00 00       	mov    $0xfaeb,%ecx
 805ad00:	e8 3b 02 00 00       	call   805af40 <__afl_maybe_log>
 805ad05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ad09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ad0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ad11:	8b 3c 24             	mov    (%esp),%edi
 805ad14:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ad18:	8b 50 20             	mov    0x20(%eax),%edx
 805ad1b:	85 d2                	test   %edx,%edx
 805ad1d:	89 54 24 28          	mov    %edx,0x28(%esp)
 805ad21:	0f 84 09 01 00 00    	je     805ae30 <version_etc_va+0x350>
 805ad27:	90                   	nop
 805ad28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ad2c:	89 3c 24             	mov    %edi,(%esp)
 805ad2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ad33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ad37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ad3b:	b9 ed ac 00 00       	mov    $0xaced,%ecx
 805ad40:	e8 fb 01 00 00       	call   805af40 <__afl_maybe_log>
 805ad45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ad49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ad4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ad51:	8b 3c 24             	mov    (%esp),%edi
 805ad54:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ad58:	8b 48 24             	mov    0x24(%eax),%ecx
       n_authors++)
 805ad5b:	83 f9 01             	cmp    $0x1,%ecx
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
 805ad5e:	89 4c 24 2c          	mov    %ecx,0x2c(%esp)
       n_authors++)
 805ad62:	19 c0                	sbb    %eax,%eax
 805ad64:	83 c0 0a             	add    $0xa,%eax
 805ad67:	90                   	nop
    ;
  version_etc_arn (stream, command_name, package, version,
 805ad68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ad6c:	89 3c 24             	mov    %edi,(%esp)
 805ad6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ad73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ad77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ad7b:	b9 de c9 00 00       	mov    $0xc9de,%ecx
 805ad80:	e8 bb 01 00 00       	call   805af40 <__afl_maybe_log>
 805ad85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ad89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ad8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ad91:	8b 3c 24             	mov    (%esp),%edi
 805ad94:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ad98:	83 ec 08             	sub    $0x8,%esp
 805ad9b:	50                   	push   %eax
 805ad9c:	8d 54 24 14          	lea    0x14(%esp),%edx
 805ada0:	52                   	push   %edx
 805ada1:	ff 74 24 5c          	pushl  0x5c(%esp)
 805ada5:	ff 74 24 5c          	pushl  0x5c(%esp)
 805ada9:	ff 74 24 5c          	pushl  0x5c(%esp)
 805adad:	ff 74 24 5c          	pushl  0x5c(%esp)
 805adb1:	e8 fa f6 ff ff       	call   805a4b0 <version_etc_arn>
                   authtab, n_authors);
}
 805adb6:	83 c4 5c             	add    $0x5c,%esp
 805adb9:	c3                   	ret    
 805adba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
                const char *version, va_list authors)
{
  size_t n_authors;
  const char *authtab[10];

  for (n_authors = 0;
 805adc0:	31 c0                	xor    %eax,%eax
 805adc2:	eb a3                	jmp    805ad67 <version_etc_va+0x287>
 805adc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       n_authors < 10
         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;
       n_authors++)
 805adc8:	b8 01 00 00 00       	mov    $0x1,%eax
 805adcd:	eb 98                	jmp    805ad67 <version_etc_va+0x287>
 805adcf:	90                   	nop
 805add0:	b8 02 00 00 00       	mov    $0x2,%eax
 805add5:	eb 90                	jmp    805ad67 <version_etc_va+0x287>
 805add7:	89 f6                	mov    %esi,%esi
 805add9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 805ade0:	b8 03 00 00 00       	mov    $0x3,%eax
 805ade5:	eb 80                	jmp    805ad67 <version_etc_va+0x287>
 805ade7:	89 f6                	mov    %esi,%esi
 805ade9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 805adf0:	b8 04 00 00 00       	mov    $0x4,%eax
 805adf5:	e9 6d ff ff ff       	jmp    805ad67 <version_etc_va+0x287>
 805adfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805ae00:	b8 05 00 00 00       	mov    $0x5,%eax
 805ae05:	e9 5d ff ff ff       	jmp    805ad67 <version_etc_va+0x287>
 805ae0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805ae10:	b8 06 00 00 00       	mov    $0x6,%eax
 805ae15:	e9 4d ff ff ff       	jmp    805ad67 <version_etc_va+0x287>
 805ae1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805ae20:	b8 07 00 00 00       	mov    $0x7,%eax
 805ae25:	e9 3d ff ff ff       	jmp    805ad67 <version_etc_va+0x287>
 805ae2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805ae30:	b8 08 00 00 00       	mov    $0x8,%eax
 805ae35:	e9 2d ff ff ff       	jmp    805ad67 <version_etc_va+0x287>
 805ae3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805ae40 <version_etc>:
   NULL argument at the end.  */
void
version_etc (FILE *stream,
             const char *command_name, const char *package,
             const char *version, /* const char *author1, ...*/ ...)
{
 805ae40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ae44:	89 3c 24             	mov    %edi,(%esp)
 805ae47:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ae4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ae4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ae53:	b9 ed 51 00 00       	mov    $0x51ed,%ecx
 805ae58:	e8 e3 00 00 00       	call   805af40 <__afl_maybe_log>
 805ae5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ae61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ae65:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ae69:	8b 3c 24             	mov    (%esp),%edi
 805ae6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ae70:	83 ec 0c             	sub    $0xc,%esp
  va_list authors;

  va_start (authors, version);
 805ae73:	8d 44 24 20          	lea    0x20(%esp),%eax
  version_etc_va (stream, command_name, package, version, authors);
 805ae77:	83 ec 0c             	sub    $0xc,%esp
 805ae7a:	50                   	push   %eax
 805ae7b:	ff 74 24 2c          	pushl  0x2c(%esp)
 805ae7f:	ff 74 24 2c          	pushl  0x2c(%esp)
 805ae83:	ff 74 24 2c          	pushl  0x2c(%esp)
 805ae87:	ff 74 24 2c          	pushl  0x2c(%esp)
 805ae8b:	e8 50 fc ff ff       	call   805aae0 <version_etc_va>
  va_end (authors);
}
 805ae90:	83 c4 2c             	add    $0x2c,%esp
 805ae93:	c3                   	ret    
 805ae94:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 805ae9a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

0805aea0 <emit_bug_reporting_address>:

void
emit_bug_reporting_address (void)
{
 805aea0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805aea4:	89 3c 24             	mov    %edi,(%esp)
 805aea7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805aeab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805aeaf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805aeb3:	b9 c6 61 00 00       	mov    $0x61c6,%ecx
 805aeb8:	e8 83 00 00 00       	call   805af40 <__afl_maybe_log>
 805aebd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805aec1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805aec5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805aec9:	8b 3c 24             	mov    (%esp),%edi
 805aecc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805aed0:	53                   	push   %ebx
 805aed1:	83 ec 0c             	sub    $0xc,%esp
  /* TRANSLATORS: The placeholder indicates the bug-reporting address
     for this package.  Please add _another line_ saying
     "Report translation bugs to <...>\n" with the address for translation
     bugs (typically your translation team's web or email address).  */
  printf (_("\nReport bugs to: %s\n"), PACKAGE_BUGREPORT);
 805aed4:	6a 05                	push   $0x5
 805aed6:	68 fe 3b 06 08       	push   $0x8063bfe
 805aedb:	6a 00                	push   $0x0
 805aedd:	e8 fe e2 fe ff       	call   80491e0 <dcgettext@plt>
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 805aee2:	83 c4 0c             	add    $0xc,%esp
 805aee5:	68 13 3c 06 08       	push   $0x8063c13
 805aeea:	50                   	push   %eax
 805aeeb:	6a 01                	push   $0x1
 805aeed:	e8 1e e5 fe ff       	call   8049410 <__printf_chk@plt>
#ifdef PACKAGE_PACKAGER_BUG_REPORTS
  printf (_("Report %s bugs to: %s\n"), PACKAGE_PACKAGER,
          PACKAGE_PACKAGER_BUG_REPORTS);
#endif
#ifdef PACKAGE_URL
  printf (_("%s home page: <%s>\n"), PACKAGE_NAME, PACKAGE_URL);
 805aef2:	83 c4 0c             	add    $0xc,%esp
 805aef5:	6a 05                	push   $0x5
 805aef7:	68 29 3c 06 08       	push   $0x8063c29
 805aefc:	6a 00                	push   $0x0
 805aefe:	e8 dd e2 fe ff       	call   80491e0 <dcgettext@plt>
 805af03:	68 58 35 06 08       	push   $0x8063558
 805af08:	68 fe 30 06 08       	push   $0x80630fe
 805af0d:	50                   	push   %eax
 805af0e:	6a 01                	push   $0x1
 805af10:	e8 fb e4 fe ff       	call   8049410 <__printf_chk@plt>
#else
  printf (_("%s home page: <http://www.gnu.org/software/%s/>\n"),
          PACKAGE_NAME, PACKAGE);
#endif
  fputs (_("General help using GNU software: <http://www.gnu.org/gethelp/>\n"),
 805af15:	83 c4 1c             	add    $0x1c,%esp
 805af18:	8b 1d d8 72 06 08    	mov    0x80672d8,%ebx
 805af1e:	6a 05                	push   $0x5
 805af20:	68 44 3e 06 08       	push   $0x8063e44
 805af25:	6a 00                	push   $0x0
 805af27:	e8 b4 e2 fe ff       	call   80491e0 <dcgettext@plt>
 805af2c:	5a                   	pop    %edx
 805af2d:	59                   	pop    %ecx
 805af2e:	53                   	push   %ebx
 805af2f:	50                   	push   %eax
 805af30:	e8 eb e3 fe ff       	call   8049320 <fputs_unlocked@plt>
         stdout);
}
 805af35:	83 c4 18             	add    $0x18,%esp
 805af38:	5b                   	pop    %ebx
 805af39:	c3                   	ret    
 805af3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805af40 <__afl_maybe_log>:
 805af40:	9f                   	lahf   
 805af41:	0f 90 c0             	seto   %al
 805af44:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 805af4a:	85 d2                	test   %edx,%edx
 805af4c:	74 22                	je     805af70 <__afl_setup>

0805af4e <__afl_store>:
 805af4e:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 805af54:	31 cf                	xor    %ecx,%edi
 805af56:	d1 e9                	shr    %ecx
 805af58:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 805af5e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805af62:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805af66 <__afl_return>:
 805af66:	04 7f                	add    $0x7f,%al
 805af68:	9e                   	sahf   
 805af69:	c3                   	ret    
 805af6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805af70 <__afl_setup>:
 805af70:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 805af77:	75 ed                	jne    805af66 <__afl_return>
 805af79:	50                   	push   %eax
 805af7a:	51                   	push   %ecx
 805af7b:	68 78 b0 05 08       	push   $0x805b078
 805af80:	e8 2b e3 fe ff       	call   80492b0 <getenv@plt>
 805af85:	83 c4 04             	add    $0x4,%esp
 805af88:	85 c0                	test   %eax,%eax
 805af8a:	0f 84 db 00 00 00    	je     805b06b <__afl_setup_abort>
 805af90:	50                   	push   %eax
 805af91:	e8 ea e4 fe ff       	call   8049480 <atoi@plt>
 805af96:	83 c4 04             	add    $0x4,%esp
 805af99:	6a 00                	push   $0x0
 805af9b:	6a 00                	push   $0x0
 805af9d:	50                   	push   %eax
 805af9e:	e8 4d e2 fe ff       	call   80491f0 <shmat@plt>
 805afa3:	83 c4 0c             	add    $0xc,%esp
 805afa6:	83 f8 ff             	cmp    $0xffffffff,%eax
 805afa9:	0f 84 bc 00 00 00    	je     805b06b <__afl_setup_abort>
 805afaf:	c6 00 01             	movb   $0x1,(%eax)
 805afb2:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 805afb7:	89 c2                	mov    %eax,%edx
 805afb9:	59                   	pop    %ecx
 805afba:	58                   	pop    %eax

0805afbb <__afl_forkserver>:
 805afbb:	50                   	push   %eax
 805afbc:	51                   	push   %ecx
 805afbd:	52                   	push   %edx
 805afbe:	6a 04                	push   $0x4
 805afc0:	68 a0 7d 43 08       	push   $0x8437da0
 805afc5:	68 c7 00 00 00       	push   $0xc7
 805afca:	e8 c1 e3 fe ff       	call   8049390 <write@plt>
 805afcf:	83 c4 0c             	add    $0xc,%esp
 805afd2:	83 f8 04             	cmp    $0x4,%eax
 805afd5:	75 6e                	jne    805b045 <__afl_fork_resume>

0805afd7 <__afl_fork_wait_loop>:
 805afd7:	6a 04                	push   $0x4
 805afd9:	68 a0 7d 43 08       	push   $0x8437da0
 805afde:	68 c6 00 00 00       	push   $0xc6
 805afe3:	e8 28 e1 fe ff       	call   8049110 <read@plt>
 805afe8:	83 c4 0c             	add    $0xc,%esp
 805afeb:	83 f8 04             	cmp    $0x4,%eax
 805afee:	75 74                	jne    805b064 <__afl_die>
 805aff0:	e8 2b e4 fe ff       	call   8049420 <fork@plt>
 805aff5:	83 f8 00             	cmp    $0x0,%eax
 805aff8:	7c 6a                	jl     805b064 <__afl_die>
 805affa:	74 49                	je     805b045 <__afl_fork_resume>
 805affc:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 805b001:	6a 04                	push   $0x4
 805b003:	68 00 7e 43 08       	push   $0x8437e00
 805b008:	68 c7 00 00 00       	push   $0xc7
 805b00d:	e8 7e e3 fe ff       	call   8049390 <write@plt>
 805b012:	83 c4 0c             	add    $0xc,%esp
 805b015:	6a 00                	push   $0x0
 805b017:	68 a0 7d 43 08       	push   $0x8437da0
 805b01c:	ff 35 00 7e 43 08    	pushl  0x8437e00
 805b022:	e8 19 e2 fe ff       	call   8049240 <waitpid@plt>
 805b027:	83 c4 0c             	add    $0xc,%esp
 805b02a:	83 f8 00             	cmp    $0x0,%eax
 805b02d:	7e 35                	jle    805b064 <__afl_die>
 805b02f:	6a 04                	push   $0x4
 805b031:	68 a0 7d 43 08       	push   $0x8437da0
 805b036:	68 c7 00 00 00       	push   $0xc7
 805b03b:	e8 50 e3 fe ff       	call   8049390 <write@plt>
 805b040:	83 c4 0c             	add    $0xc,%esp
 805b043:	eb 92                	jmp    805afd7 <__afl_fork_wait_loop>

0805b045 <__afl_fork_resume>:
 805b045:	68 c6 00 00 00       	push   $0xc6
 805b04a:	e8 a1 e4 fe ff       	call   80494f0 <close@plt>
 805b04f:	68 c7 00 00 00       	push   $0xc7
 805b054:	e8 97 e4 fe ff       	call   80494f0 <close@plt>
 805b059:	83 c4 08             	add    $0x8,%esp
 805b05c:	5a                   	pop    %edx
 805b05d:	59                   	pop    %ecx
 805b05e:	58                   	pop    %eax
 805b05f:	e9 ea fe ff ff       	jmp    805af4e <__afl_store>

0805b064 <__afl_die>:
 805b064:	31 c0                	xor    %eax,%eax
 805b066:	e8 d5 e0 fe ff       	call   8049140 <_exit@plt>

0805b06b <__afl_setup_abort>:
 805b06b:	fe 05 20 7e 43 08    	incb   0x8437e20
 805b071:	59                   	pop    %ecx
 805b072:	58                   	pop    %eax
 805b073:	e9 ee fe ff ff       	jmp    805af66 <__afl_return>

0805b078 <.AFL_SHM_ENV>:
 805b078:	5f                   	pop    %edi
 805b079:	5f                   	pop    %edi
 805b07a:	41                   	inc    %ecx
 805b07b:	46                   	inc    %esi
 805b07c:	4c                   	dec    %esp
 805b07d:	5f                   	pop    %edi
 805b07e:	53                   	push   %ebx
 805b07f:	48                   	dec    %eax
 805b080:	4d                   	dec    %ebp
 805b081:	5f                   	pop    %edi
 805b082:	49                   	dec    %ecx
 805b083:	44                   	inc    %esp
 805b084:	00 66 90             	add    %ah,-0x70(%esi)
 805b087:	90                   	nop
 805b088:	66 90                	xchg   %ax,%ax
 805b08a:	66 90                	xchg   %ax,%ax
 805b08c:	66 90                	xchg   %ax,%ax
 805b08e:	66 90                	xchg   %ax,%ax

0805b090 <xmalloc>:

/* Allocate N bytes of memory dynamically, with error checking.  */

void *
xmalloc (size_t n)
{
 805b090:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b094:	89 3c 24             	mov    %edi,(%esp)
 805b097:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b09b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b09f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b0a3:	b9 3c 48 00 00       	mov    $0x483c,%ecx
 805b0a8:	e8 73 09 00 00       	call   805ba20 <__afl_maybe_log>
 805b0ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b0b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b0b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b0b9:	8b 3c 24             	mov    (%esp),%edi
 805b0bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b0c0:	53                   	push   %ebx
 805b0c1:	83 ec 14             	sub    $0x14,%esp
 805b0c4:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  void *p = malloc (n);
 805b0c8:	53                   	push   %ebx
 805b0c9:	e8 02 e2 fe ff       	call   80492d0 <malloc@plt>
  if (!p && n != 0)
 805b0ce:	83 c4 10             	add    $0x10,%esp
 805b0d1:	85 c0                	test   %eax,%eax
 805b0d3:	75 67                	jne    805b13c <xmalloc+0xac>
 805b0d5:	8d 76 00             	lea    0x0(%esi),%esi
 805b0d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b0dc:	89 3c 24             	mov    %edi,(%esp)
 805b0df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b0e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b0e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b0eb:	b9 46 9b 00 00       	mov    $0x9b46,%ecx
 805b0f0:	e8 2b 09 00 00       	call   805ba20 <__afl_maybe_log>
 805b0f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b0f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b0fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b101:	8b 3c 24             	mov    (%esp),%edi
 805b104:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b108:	85 db                	test   %ebx,%ebx
 805b10a:	75 65                	jne    805b171 <xmalloc+0xe1>
 805b10c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b110:	89 3c 24             	mov    %edi,(%esp)
 805b113:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b117:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b11b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b11f:	b9 e0 f3 00 00       	mov    $0xf3e0,%ecx
 805b124:	e8 f7 08 00 00       	call   805ba20 <__afl_maybe_log>
 805b129:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b12d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b131:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b135:	8b 3c 24             	mov    (%esp),%edi
 805b138:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return p;
}
 805b13c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b140:	89 3c 24             	mov    %edi,(%esp)
 805b143:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b147:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b14b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b14f:	b9 1e 2e 00 00       	mov    $0x2e1e,%ecx
 805b154:	e8 c7 08 00 00       	call   805ba20 <__afl_maybe_log>
 805b159:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b15d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b161:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b165:	8b 3c 24             	mov    (%esp),%edi
 805b168:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b16c:	83 c4 08             	add    $0x8,%esp
 805b16f:	5b                   	pop    %ebx
 805b170:	c3                   	ret    
 805b171:	8d 76 00             	lea    0x0(%esi),%esi
void *
xmalloc (size_t n)
{
  void *p = malloc (n);
  if (!p && n != 0)
    xalloc_die ();
 805b174:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b178:	89 3c 24             	mov    %edi,(%esp)
 805b17b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b17f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b183:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b187:	b9 6a 08 00 00       	mov    $0x86a,%ecx
 805b18c:	e8 8f 08 00 00       	call   805ba20 <__afl_maybe_log>
 805b191:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b195:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b199:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b19d:	8b 3c 24             	mov    (%esp),%edi
 805b1a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b1a4:	e8 c7 09 00 00       	call   805bb70 <xalloc_die>
 805b1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

0805b1b0 <xnmalloc>:

XALLOC_INLINE void *xnmalloc (size_t n, size_t s)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1, 2));
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
 805b1b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b1b4:	89 3c 24             	mov    %edi,(%esp)
 805b1b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b1bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b1bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b1c3:	b9 c5 6d 00 00       	mov    $0x6dc5,%ecx
 805b1c8:	e8 53 08 00 00       	call   805ba20 <__afl_maybe_log>
 805b1cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b1d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b1d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b1d9:	8b 3c 24             	mov    (%esp),%edi
 805b1dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b1e0:	53                   	push   %ebx
  if (xalloc_oversized (n, s))
 805b1e1:	31 d2                	xor    %edx,%edx
 805b1e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

XALLOC_INLINE void *xnmalloc (size_t n, size_t s)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1, 2));
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
 805b1e8:	83 ec 08             	sub    $0x8,%esp
 805b1eb:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 805b1ef:	8b 4c 24 10          	mov    0x10(%esp),%ecx
  if (xalloc_oversized (n, s))
 805b1f3:	f7 f3                	div    %ebx
 805b1f5:	39 c8                	cmp    %ecx,%eax
 805b1f7:	72 43                	jb     805b23c <xnmalloc+0x8c>
 805b1f9:	8d 76 00             	lea    0x0(%esi),%esi
 805b1fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b200:	89 3c 24             	mov    %edi,(%esp)
 805b203:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b207:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b20b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b20f:	b9 32 dd 00 00       	mov    $0xdd32,%ecx
 805b214:	e8 07 08 00 00       	call   805ba20 <__afl_maybe_log>
 805b219:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b21d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b221:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b225:	8b 3c 24             	mov    (%esp),%edi
 805b228:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return xmalloc (n * s);
 805b22c:	0f af cb             	imul   %ebx,%ecx
 805b22f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
}
 805b233:	83 c4 08             	add    $0x8,%esp
 805b236:	5b                   	pop    %ebx
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
  return xmalloc (n * s);
 805b237:	e9 54 fe ff ff       	jmp    805b090 <xmalloc>
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1, 2));
XALLOC_INLINE void *
xnmalloc (size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
 805b23c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b240:	89 3c 24             	mov    %edi,(%esp)
 805b243:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b247:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b24b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b24f:	b9 6d 0e 00 00       	mov    $0xe6d,%ecx
 805b254:	e8 c7 07 00 00       	call   805ba20 <__afl_maybe_log>
 805b259:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b25d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b261:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b265:	8b 3c 24             	mov    (%esp),%edi
 805b268:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b26c:	e8 ff 08 00 00       	call   805bb70 <xalloc_die>
 805b271:	eb 0d                	jmp    805b280 <xcharalloc>
 805b273:	90                   	nop
 805b274:	90                   	nop
 805b275:	90                   	nop
 805b276:	90                   	nop
 805b277:	90                   	nop
 805b278:	90                   	nop
 805b279:	90                   	nop
 805b27a:	90                   	nop
 805b27b:	90                   	nop
 805b27c:	90                   	nop
 805b27d:	90                   	nop
 805b27e:	90                   	nop
 805b27f:	90                   	nop

0805b280 <xcharalloc>:
XALLOC_INLINE char *xcharalloc (size_t n)
                    _GL_ATTRIBUTE_MALLOC _GL_ATTRIBUTE_ALLOC_SIZE ((1));
XALLOC_INLINE char *
xcharalloc (size_t n)
{
  return XNMALLOC (n, char);
 805b280:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b284:	89 3c 24             	mov    %edi,(%esp)
 805b287:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b28b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b28f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b293:	b9 4a 2e 00 00       	mov    $0x2e4a,%ecx
 805b298:	e8 83 07 00 00       	call   805ba20 <__afl_maybe_log>
 805b29d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b2a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b2a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b2a9:	8b 3c 24             	mov    (%esp),%edi
 805b2ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b2b0:	e9 db fd ff ff       	jmp    805b090 <xmalloc>
 805b2b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 805b2b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

0805b2c0 <xrealloc>:
/* Change the size of an allocated block of memory P to N bytes,
   with error checking.  */

void *
xrealloc (void *p, size_t n)
{
 805b2c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b2c4:	89 3c 24             	mov    %edi,(%esp)
 805b2c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b2cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b2cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b2d3:	b9 7b 6e 00 00       	mov    $0x6e7b,%ecx
 805b2d8:	e8 43 07 00 00       	call   805ba20 <__afl_maybe_log>
 805b2dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b2e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b2e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b2e9:	8b 3c 24             	mov    (%esp),%edi
 805b2ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b2f0:	53                   	push   %ebx
 805b2f1:	83 ec 08             	sub    $0x8,%esp
 805b2f4:	8b 5c 24 14          	mov    0x14(%esp),%ebx
 805b2f8:	8b 44 24 10          	mov    0x10(%esp),%eax
  if (!n && p)
 805b2fc:	85 db                	test   %ebx,%ebx
 805b2fe:	75 68                	jne    805b368 <xrealloc+0xa8>
 805b300:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b304:	89 3c 24             	mov    %edi,(%esp)
 805b307:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b30b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b30f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b313:	b9 c6 32 00 00       	mov    $0x32c6,%ecx
 805b318:	e8 03 07 00 00       	call   805ba20 <__afl_maybe_log>
 805b31d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b321:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b325:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b329:	8b 3c 24             	mov    (%esp),%edi
 805b32c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b330:	85 c0                	test   %eax,%eax
 805b332:	0f 85 10 01 00 00    	jne    805b448 <xrealloc+0x188>
 805b338:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b33c:	89 3c 24             	mov    %edi,(%esp)
 805b33f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b343:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b347:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b34b:	b9 cb 16 00 00       	mov    $0x16cb,%ecx
 805b350:	e8 cb 06 00 00       	call   805ba20 <__afl_maybe_log>
 805b355:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b359:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b35d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b361:	8b 3c 24             	mov    (%esp),%edi
 805b364:	8d 64 24 10          	lea    0x10(%esp),%esp
         GNU, even if the underlying realloc is C99.  */
      free (p);
      return NULL;
    }

  p = realloc (p, n);
 805b368:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b36c:	89 3c 24             	mov    %edi,(%esp)
 805b36f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b373:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b377:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b37b:	b9 e7 6d 00 00       	mov    $0x6de7,%ecx
 805b380:	e8 9b 06 00 00       	call   805ba20 <__afl_maybe_log>
 805b385:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b389:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b38d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b391:	8b 3c 24             	mov    (%esp),%edi
 805b394:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b398:	83 ec 08             	sub    $0x8,%esp
 805b39b:	53                   	push   %ebx
 805b39c:	50                   	push   %eax
 805b39d:	e8 1e df fe ff       	call   80492c0 <realloc@plt>
  if (!p && n)
 805b3a2:	83 c4 10             	add    $0x10,%esp
 805b3a5:	85 c0                	test   %eax,%eax
 805b3a7:	75 67                	jne    805b410 <xrealloc+0x150>
 805b3a9:	8d 76 00             	lea    0x0(%esi),%esi
 805b3ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b3b0:	89 3c 24             	mov    %edi,(%esp)
 805b3b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b3b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b3bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b3bf:	b9 3c 33 00 00       	mov    $0x333c,%ecx
 805b3c4:	e8 57 06 00 00       	call   805ba20 <__afl_maybe_log>
 805b3c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b3cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b3d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b3d5:	8b 3c 24             	mov    (%esp),%edi
 805b3d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b3dc:	85 db                	test   %ebx,%ebx
 805b3de:	75 7b                	jne    805b45b <xrealloc+0x19b>
 805b3e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b3e4:	89 3c 24             	mov    %edi,(%esp)
 805b3e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b3eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b3ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b3f3:	b9 23 46 00 00       	mov    $0x4623,%ecx
 805b3f8:	e8 23 06 00 00       	call   805ba20 <__afl_maybe_log>
 805b3fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b401:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b405:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b409:	8b 3c 24             	mov    (%esp),%edi
 805b40c:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return p;
}
 805b410:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b414:	89 3c 24             	mov    %edi,(%esp)
 805b417:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b41b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b41f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b423:	b9 0f 85 00 00       	mov    $0x850f,%ecx
 805b428:	e8 f3 05 00 00       	call   805ba20 <__afl_maybe_log>
 805b42d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b431:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b435:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b439:	8b 3c 24             	mov    (%esp),%edi
 805b43c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b440:	83 c4 08             	add    $0x8,%esp
 805b443:	5b                   	pop    %ebx
 805b444:	c3                   	ret    
 805b445:	8d 76 00             	lea    0x0(%esi),%esi
{
  if (!n && p)
    {
      /* The GNU and C99 realloc behaviors disagree here.  Act like
         GNU, even if the underlying realloc is C99.  */
      free (p);
 805b448:	83 ec 0c             	sub    $0xc,%esp
 805b44b:	50                   	push   %eax
 805b44c:	e8 0f dd fe ff       	call   8049160 <free@plt>
      return NULL;
 805b451:	83 c4 10             	add    $0x10,%esp
 805b454:	31 c0                	xor    %eax,%eax

  p = realloc (p, n);
  if (!p && n)
    xalloc_die ();
  return p;
}
 805b456:	83 c4 08             	add    $0x8,%esp
 805b459:	5b                   	pop    %ebx
 805b45a:	c3                   	ret    
 805b45b:	90                   	nop
      return NULL;
    }

  p = realloc (p, n);
  if (!p && n)
    xalloc_die ();
 805b45c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b460:	89 3c 24             	mov    %edi,(%esp)
 805b463:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b467:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b46b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b46f:	b9 28 58 00 00       	mov    $0x5828,%ecx
 805b474:	e8 a7 05 00 00       	call   805ba20 <__afl_maybe_log>
 805b479:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b47d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b481:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b485:	8b 3c 24             	mov    (%esp),%edi
 805b488:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b48c:	e8 df 06 00 00       	call   805bb70 <xalloc_die>
 805b491:	eb 0d                	jmp    805b4a0 <xnrealloc>
 805b493:	90                   	nop
 805b494:	90                   	nop
 805b495:	90                   	nop
 805b496:	90                   	nop
 805b497:	90                   	nop
 805b498:	90                   	nop
 805b499:	90                   	nop
 805b49a:	90                   	nop
 805b49b:	90                   	nop
 805b49c:	90                   	nop
 805b49d:	90                   	nop
 805b49e:	90                   	nop
 805b49f:	90                   	nop

0805b4a0 <xnrealloc>:

XALLOC_INLINE void *xnrealloc (void *p, size_t n, size_t s)
                    _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
 805b4a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b4a4:	89 3c 24             	mov    %edi,(%esp)
 805b4a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b4ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b4af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b4b3:	b9 cf 00 00 00       	mov    $0xcf,%ecx
 805b4b8:	e8 63 05 00 00       	call   805ba20 <__afl_maybe_log>
 805b4bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b4c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b4c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b4c9:	8b 3c 24             	mov    (%esp),%edi
 805b4cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b4d0:	56                   	push   %esi
 805b4d1:	53                   	push   %ebx
  if (xalloc_oversized (n, s))
 805b4d2:	31 d2                	xor    %edx,%edx
 805b4d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

XALLOC_INLINE void *xnrealloc (void *p, size_t n, size_t s)
                    _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
 805b4d9:	83 ec 04             	sub    $0x4,%esp
 805b4dc:	8b 74 24 18          	mov    0x18(%esp),%esi
 805b4e0:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 805b4e4:	8b 5c 24 10          	mov    0x10(%esp),%ebx
  if (xalloc_oversized (n, s))
 805b4e8:	f7 f6                	div    %esi
 805b4ea:	39 c8                	cmp    %ecx,%eax
 805b4ec:	72 47                	jb     805b535 <xnrealloc+0x95>
 805b4ee:	66 90                	xchg   %ax,%ax
 805b4f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b4f4:	89 3c 24             	mov    %edi,(%esp)
 805b4f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b4fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b4ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b503:	b9 6e f3 00 00       	mov    $0xf36e,%ecx
 805b508:	e8 13 05 00 00       	call   805ba20 <__afl_maybe_log>
 805b50d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b511:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b515:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b519:	8b 3c 24             	mov    (%esp),%edi
 805b51c:	8d 64 24 10          	lea    0x10(%esp),%esp
    xalloc_die ();
  return xrealloc (p, n * s);
 805b520:	0f af ce             	imul   %esi,%ecx
 805b523:	89 5c 24 10          	mov    %ebx,0x10(%esp)
 805b527:	89 4c 24 14          	mov    %ecx,0x14(%esp)
}
 805b52b:	83 c4 04             	add    $0x4,%esp
 805b52e:	5b                   	pop    %ebx
 805b52f:	5e                   	pop    %esi
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
  return xrealloc (p, n * s);
 805b530:	e9 8b fd ff ff       	jmp    805b2c0 <xrealloc>
 805b535:	8d 76 00             	lea    0x0(%esi),%esi
                    _GL_ATTRIBUTE_ALLOC_SIZE ((2, 3));
XALLOC_INLINE void *
xnrealloc (void *p, size_t n, size_t s)
{
  if (xalloc_oversized (n, s))
    xalloc_die ();
 805b538:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b53c:	89 3c 24             	mov    %edi,(%esp)
 805b53f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b543:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b547:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b54b:	b9 80 83 00 00       	mov    $0x8380,%ecx
 805b550:	e8 cb 04 00 00       	call   805ba20 <__afl_maybe_log>
 805b555:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b559:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b55d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b561:	8b 3c 24             	mov    (%esp),%edi
 805b564:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b568:	e8 03 06 00 00       	call   805bb70 <xalloc_die>
 805b56d:	8d 76 00             	lea    0x0(%esi),%esi

0805b570 <x2nrealloc>:

   */

XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
 805b570:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b574:	89 3c 24             	mov    %edi,(%esp)
 805b577:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b57b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b57f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b583:	b9 0c ab 00 00       	mov    $0xab0c,%ecx
 805b588:	e8 93 04 00 00       	call   805ba20 <__afl_maybe_log>
 805b58d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b591:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b595:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b599:	8b 3c 24             	mov    (%esp),%edi
 805b59c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b5a0:	57                   	push   %edi
 805b5a1:	56                   	push   %esi
 805b5a2:	53                   	push   %ebx
 805b5a3:	8b 74 24 10          	mov    0x10(%esp),%esi
 805b5a7:	8b 7c 24 14          	mov    0x14(%esp),%edi
 805b5ab:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  size_t n = *pn;

  if (! p)
 805b5af:	85 f6                	test   %esi,%esi
   */

XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  size_t n = *pn;
 805b5b1:	8b 0f                	mov    (%edi),%ecx

  if (! p)
 805b5b3:	0f 84 c7 00 00 00    	je     805b680 <x2nrealloc+0x110>
 805b5b9:	8d 76 00             	lea    0x0(%esi),%esi
 805b5bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b5c0:	89 3c 24             	mov    %edi,(%esp)
 805b5c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b5c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b5cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b5cf:	b9 de 03 00 00       	mov    $0x3de,%ecx
 805b5d4:	e8 47 04 00 00       	call   805ba20 <__afl_maybe_log>
 805b5d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b5dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b5e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b5e5:	8b 3c 24             	mov    (%esp),%edi
 805b5e8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
 805b5ec:	31 d2                	xor    %edx,%edx
 805b5ee:	b8 aa aa aa aa       	mov    $0xaaaaaaaa,%eax
 805b5f3:	f7 f3                	div    %ebx
 805b5f5:	39 c1                	cmp    %eax,%ecx
 805b5f7:	0f 83 ce 00 00 00    	jae    805b6cb <x2nrealloc+0x15b>
 805b5fd:	8d 76 00             	lea    0x0(%esi),%esi
 805b600:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b604:	89 3c 24             	mov    %edi,(%esp)
 805b607:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b60b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b60f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b613:	b9 4b 4a 00 00       	mov    $0x4a4b,%ecx
 805b618:	e8 03 04 00 00       	call   805ba20 <__afl_maybe_log>
 805b61d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b621:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b625:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b629:	8b 3c 24             	mov    (%esp),%edi
 805b62c:	8d 64 24 10          	lea    0x10(%esp),%esp
        xalloc_die ();
      n += n / 2 + 1;
 805b630:	89 c8                	mov    %ecx,%eax
 805b632:	d1 e8                	shr    %eax
 805b634:	8d 4c 01 01          	lea    0x1(%ecx,%eax,1),%ecx
    }

  *pn = n;
 805b638:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b63c:	89 3c 24             	mov    %edi,(%esp)
 805b63f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b643:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b647:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b64b:	b9 a9 90 00 00       	mov    $0x90a9,%ecx
 805b650:	e8 cb 03 00 00       	call   805ba20 <__afl_maybe_log>
 805b655:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b659:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b65d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b661:	8b 3c 24             	mov    (%esp),%edi
 805b664:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b668:	89 0f                	mov    %ecx,(%edi)
  return xrealloc (p, n * s);
 805b66a:	89 74 24 10          	mov    %esi,0x10(%esp)
 805b66e:	0f af cb             	imul   %ebx,%ecx
 805b671:	89 4c 24 14          	mov    %ecx,0x14(%esp)
}
 805b675:	5b                   	pop    %ebx
 805b676:	5e                   	pop    %esi
 805b677:	5f                   	pop    %edi
        xalloc_die ();
      n += n / 2 + 1;
    }

  *pn = n;
  return xrealloc (p, n * s);
 805b678:	e9 43 fc ff ff       	jmp    805b2c0 <xrealloc>
 805b67d:	8d 76 00             	lea    0x0(%esi),%esi
{
  size_t n = *pn;

  if (! p)
    {
      if (! n)
 805b680:	85 c9                	test   %ecx,%ecx
 805b682:	75 b4                	jne    805b638 <x2nrealloc+0xc8>
 805b684:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b688:	89 3c 24             	mov    %edi,(%esp)
 805b68b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b68f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b693:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b697:	b9 f3 be 00 00       	mov    $0xbef3,%ecx
 805b69c:	e8 7f 03 00 00       	call   805ba20 <__afl_maybe_log>
 805b6a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b6a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b6a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b6ad:	8b 3c 24             	mov    (%esp),%edi
 805b6b0:	8d 64 24 10          	lea    0x10(%esp),%esp
             requests, when the invoking code specifies an old size of
             zero.  This is the largest "small" request for the GNU C
             library malloc.  */
          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };

          n = DEFAULT_MXFAST / s;
 805b6b4:	31 d2                	xor    %edx,%edx
 805b6b6:	b8 40 00 00 00       	mov    $0x40,%eax
          n += !n;
 805b6bb:	31 c9                	xor    %ecx,%ecx
             requests, when the invoking code specifies an old size of
             zero.  This is the largest "small" request for the GNU C
             library malloc.  */
          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };

          n = DEFAULT_MXFAST / s;
 805b6bd:	f7 f3                	div    %ebx
          n += !n;
 805b6bf:	85 c0                	test   %eax,%eax
 805b6c1:	0f 94 c1             	sete   %cl
 805b6c4:	01 c1                	add    %eax,%ecx
 805b6c6:	e9 6d ff ff ff       	jmp    805b638 <x2nrealloc+0xc8>
 805b6cb:	90                   	nop
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
        xalloc_die ();
 805b6cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b6d0:	89 3c 24             	mov    %edi,(%esp)
 805b6d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b6d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b6db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b6df:	b9 4b 20 00 00       	mov    $0x204b,%ecx
 805b6e4:	e8 37 03 00 00       	call   805ba20 <__afl_maybe_log>
 805b6e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b6ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b6f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b6f5:	8b 3c 24             	mov    (%esp),%edi
 805b6f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b6fc:	e8 6f 04 00 00       	call   805bb70 <xalloc_die>
 805b701:	eb 0d                	jmp    805b710 <x2realloc>
 805b703:	90                   	nop
 805b704:	90                   	nop
 805b705:	90                   	nop
 805b706:	90                   	nop
 805b707:	90                   	nop
 805b708:	90                   	nop
 805b709:	90                   	nop
 805b70a:	90                   	nop
 805b70b:	90                   	nop
 805b70c:	90                   	nop
 805b70d:	90                   	nop
 805b70e:	90                   	nop
 805b70f:	90                   	nop

0805b710 <x2realloc>:
   return the pointer to the new block.  *PN is never set to zero, and
   the returned pointer is never null.  */

void *
x2realloc (void *p, size_t *pn)
{
 805b710:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b714:	89 3c 24             	mov    %edi,(%esp)
 805b717:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b71b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b71f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b723:	b9 b9 f1 00 00       	mov    $0xf1b9,%ecx
 805b728:	e8 f3 02 00 00       	call   805ba20 <__afl_maybe_log>
 805b72d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b731:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b735:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b739:	8b 3c 24             	mov    (%esp),%edi
 805b73c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b740:	53                   	push   %ebx
 805b741:	83 ec 08             	sub    $0x8,%esp
 805b744:	8b 54 24 10          	mov    0x10(%esp),%edx
 805b748:	8b 4c 24 14          	mov    0x14(%esp),%ecx
XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  size_t n = *pn;

  if (! p)
 805b74c:	85 d2                	test   %edx,%edx
   */

XALLOC_INLINE void *
x2nrealloc (void *p, size_t *pn, size_t s)
{
  size_t n = *pn;
 805b74e:	8b 01                	mov    (%ecx),%eax

  if (! p)
 805b750:	0f 84 ba 00 00 00    	je     805b810 <x2realloc+0x100>
 805b756:	66 90                	xchg   %ax,%ax
 805b758:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b75c:	89 3c 24             	mov    %edi,(%esp)
 805b75f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b763:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b767:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b76b:	b9 16 37 00 00       	mov    $0x3716,%ecx
 805b770:	e8 ab 02 00 00       	call   805ba20 <__afl_maybe_log>
 805b775:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b779:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b77d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b781:	8b 3c 24             	mov    (%esp),%edi
 805b784:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
 805b788:	3d a9 aa aa aa       	cmp    $0xaaaaaaa9,%eax
 805b78d:	0f 87 89 00 00 00    	ja     805b81c <x2realloc+0x10c>
 805b793:	90                   	nop
 805b794:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b798:	89 3c 24             	mov    %edi,(%esp)
 805b79b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b79f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b7a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b7a7:	b9 06 4b 00 00       	mov    $0x4b06,%ecx
 805b7ac:	e8 6f 02 00 00       	call   805ba20 <__afl_maybe_log>
 805b7b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b7b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b7b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b7bd:	8b 3c 24             	mov    (%esp),%edi
 805b7c0:	8d 64 24 10          	lea    0x10(%esp),%esp
        xalloc_die ();
      n += n / 2 + 1;
 805b7c4:	89 c3                	mov    %eax,%ebx
 805b7c6:	d1 eb                	shr    %ebx
 805b7c8:	8d 44 03 01          	lea    0x1(%ebx,%eax,1),%eax
    }

  *pn = n;
 805b7cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b7d0:	89 3c 24             	mov    %edi,(%esp)
 805b7d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b7d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b7db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b7df:	b9 8d 30 00 00       	mov    $0x308d,%ecx
 805b7e4:	e8 37 02 00 00       	call   805ba20 <__afl_maybe_log>
 805b7e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b7ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b7f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b7f5:	8b 3c 24             	mov    (%esp),%edi
 805b7f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b7fc:	89 01                	mov    %eax,(%ecx)
  return xrealloc (p, n * s);
 805b7fe:	89 44 24 14          	mov    %eax,0x14(%esp)
 805b802:	89 54 24 10          	mov    %edx,0x10(%esp)
  return x2nrealloc (p, pn, 1);
}
 805b806:	83 c4 08             	add    $0x8,%esp
 805b809:	5b                   	pop    %ebx
 805b80a:	e9 b1 fa ff ff       	jmp    805b2c0 <xrealloc>
 805b80f:	90                   	nop
             zero.  This is the largest "small" request for the GNU C
             library malloc.  */
          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };

          n = DEFAULT_MXFAST / s;
          n += !n;
 805b810:	85 c0                	test   %eax,%eax
 805b812:	bb 40 00 00 00       	mov    $0x40,%ebx
 805b817:	0f 44 c3             	cmove  %ebx,%eax
 805b81a:	eb b0                	jmp    805b7cc <x2realloc+0xbc>
      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.
         Check for overflow, so that N * S stays in size_t range.
         The check may be slightly conservative, but an exact check isn't
         worth the trouble.  */
      if ((size_t) -1 / 3 * 2 / s <= n)
        xalloc_die ();
 805b81c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b820:	89 3c 24             	mov    %edi,(%esp)
 805b823:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b827:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b82b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b82f:	b9 3a 46 00 00       	mov    $0x463a,%ecx
 805b834:	e8 e7 01 00 00       	call   805ba20 <__afl_maybe_log>
 805b839:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b83d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b841:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b845:	8b 3c 24             	mov    (%esp),%edi
 805b848:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b84c:	e8 1f 03 00 00       	call   805bb70 <xalloc_die>
 805b851:	eb 0d                	jmp    805b860 <xzalloc>
 805b853:	90                   	nop
 805b854:	90                   	nop
 805b855:	90                   	nop
 805b856:	90                   	nop
 805b857:	90                   	nop
 805b858:	90                   	nop
 805b859:	90                   	nop
 805b85a:	90                   	nop
 805b85b:	90                   	nop
 805b85c:	90                   	nop
 805b85d:	90                   	nop
 805b85e:	90                   	nop
 805b85f:	90                   	nop

0805b860 <xzalloc>:
   There's no need for xnzalloc (N, S), since it would be equivalent
   to xcalloc (N, S).  */

void *
xzalloc (size_t s)
{
 805b860:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b864:	89 3c 24             	mov    %edi,(%esp)
 805b867:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b86b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b86f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b873:	b9 2e 98 00 00       	mov    $0x982e,%ecx
 805b878:	e8 a3 01 00 00       	call   805ba20 <__afl_maybe_log>
 805b87d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b881:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b885:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b889:	8b 3c 24             	mov    (%esp),%edi
 805b88c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b890:	53                   	push   %ebx
 805b891:	83 ec 14             	sub    $0x14,%esp
 805b894:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  return memset (xmalloc (s), 0, s);
 805b898:	53                   	push   %ebx
 805b899:	e8 f2 f7 ff ff       	call   805b090 <xmalloc>
 805b89e:	83 c4 0c             	add    $0xc,%esp
 805b8a1:	53                   	push   %ebx
 805b8a2:	6a 00                	push   $0x0
 805b8a4:	50                   	push   %eax
 805b8a5:	e8 06 db fe ff       	call   80493b0 <memset@plt>
}
 805b8aa:	83 c4 18             	add    $0x18,%esp
 805b8ad:	5b                   	pop    %ebx
 805b8ae:	c3                   	ret    
 805b8af:	90                   	nop

0805b8b0 <xcalloc>:
/* Allocate zeroed memory for N elements of S bytes, with error
   checking.  S must be nonzero.  */

void *
xcalloc (size_t n, size_t s)
{
 805b8b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b8b4:	89 3c 24             	mov    %edi,(%esp)
 805b8b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b8bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b8bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b8c3:	b9 0e d3 00 00       	mov    $0xd30e,%ecx
 805b8c8:	e8 53 01 00 00       	call   805ba20 <__afl_maybe_log>
 805b8cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b8d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b8d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b8d9:	8b 3c 24             	mov    (%esp),%edi
 805b8dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b8e0:	83 ec 14             	sub    $0x14,%esp
  void *p;
  /* Test for overflow, since some calloc implementations don't have
     proper overflow checks.  But omit overflow and size-zero tests if
     HAVE_GNU_CALLOC, since GNU calloc catches overflow and never
     returns NULL if successful.  */
  if ((! HAVE_GNU_CALLOC && xalloc_oversized (n, s))
 805b8e3:	ff 74 24 1c          	pushl  0x1c(%esp)
 805b8e7:	ff 74 24 1c          	pushl  0x1c(%esp)
 805b8eb:	e8 30 dc fe ff       	call   8049520 <calloc@plt>
 805b8f0:	83 c4 10             	add    $0x10,%esp
 805b8f3:	85 c0                	test   %eax,%eax
 805b8f5:	74 35                	je     805b92c <xcalloc+0x7c>
 805b8f7:	90                   	nop
 805b8f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b8fc:	89 3c 24             	mov    %edi,(%esp)
 805b8ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b903:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b907:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b90b:	b9 56 f0 00 00       	mov    $0xf056,%ecx
 805b910:	e8 0b 01 00 00       	call   805ba20 <__afl_maybe_log>
 805b915:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b919:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b91d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b921:	8b 3c 24             	mov    (%esp),%edi
 805b924:	8d 64 24 10          	lea    0x10(%esp),%esp
      || (! (p = calloc (n, s)) && (HAVE_GNU_CALLOC || n != 0)))
    xalloc_die ();
  return p;
}
 805b928:	83 c4 0c             	add    $0xc,%esp
 805b92b:	c3                   	ret    
     proper overflow checks.  But omit overflow and size-zero tests if
     HAVE_GNU_CALLOC, since GNU calloc catches overflow and never
     returns NULL if successful.  */
  if ((! HAVE_GNU_CALLOC && xalloc_oversized (n, s))
      || (! (p = calloc (n, s)) && (HAVE_GNU_CALLOC || n != 0)))
    xalloc_die ();
 805b92c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b930:	89 3c 24             	mov    %edi,(%esp)
 805b933:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b937:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b93b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b93f:	b9 c2 43 00 00       	mov    $0x43c2,%ecx
 805b944:	e8 d7 00 00 00       	call   805ba20 <__afl_maybe_log>
 805b949:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b94d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b951:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b955:	8b 3c 24             	mov    (%esp),%edi
 805b958:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b95c:	e8 0f 02 00 00       	call   805bb70 <xalloc_die>
 805b961:	eb 0d                	jmp    805b970 <xmemdup>
 805b963:	90                   	nop
 805b964:	90                   	nop
 805b965:	90                   	nop
 805b966:	90                   	nop
 805b967:	90                   	nop
 805b968:	90                   	nop
 805b969:	90                   	nop
 805b96a:	90                   	nop
 805b96b:	90                   	nop
 805b96c:	90                   	nop
 805b96d:	90                   	nop
 805b96e:	90                   	nop
 805b96f:	90                   	nop

0805b970 <xmemdup>:
   for xnmemdup (P, N, S), since xmemdup (P, N * S) works without any
   need for an arithmetic overflow check.  */

void *
xmemdup (void const *p, size_t s)
{
 805b970:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b974:	89 3c 24             	mov    %edi,(%esp)
 805b977:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b97b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b97f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b983:	b9 c4 e3 00 00       	mov    $0xe3c4,%ecx
 805b988:	e8 93 00 00 00       	call   805ba20 <__afl_maybe_log>
 805b98d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b991:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b995:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b999:	8b 3c 24             	mov    (%esp),%edi
 805b99c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805b9a0:	53                   	push   %ebx
 805b9a1:	83 ec 14             	sub    $0x14,%esp
 805b9a4:	8b 5c 24 20          	mov    0x20(%esp),%ebx
  return memcpy (xmalloc (s), p, s);
 805b9a8:	53                   	push   %ebx
 805b9a9:	e8 e2 f6 ff ff       	call   805b090 <xmalloc>

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 805b9ae:	83 c4 0c             	add    $0xc,%esp
 805b9b1:	53                   	push   %ebx
 805b9b2:	ff 74 24 18          	pushl  0x18(%esp)
 805b9b6:	50                   	push   %eax
 805b9b7:	e8 b4 d7 fe ff       	call   8049170 <memcpy@plt>
}
 805b9bc:	83 c4 18             	add    $0x18,%esp
 805b9bf:	5b                   	pop    %ebx
 805b9c0:	c3                   	ret    
 805b9c1:	eb 0d                	jmp    805b9d0 <xstrdup>
 805b9c3:	90                   	nop
 805b9c4:	90                   	nop
 805b9c5:	90                   	nop
 805b9c6:	90                   	nop
 805b9c7:	90                   	nop
 805b9c8:	90                   	nop
 805b9c9:	90                   	nop
 805b9ca:	90                   	nop
 805b9cb:	90                   	nop
 805b9cc:	90                   	nop
 805b9cd:	90                   	nop
 805b9ce:	90                   	nop
 805b9cf:	90                   	nop

0805b9d0 <xstrdup>:

/* Clone STRING.  */

char *
xstrdup (char const *string)
{
 805b9d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805b9d4:	89 3c 24             	mov    %edi,(%esp)
 805b9d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805b9db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805b9df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805b9e3:	b9 46 82 00 00       	mov    $0x8246,%ecx
 805b9e8:	e8 33 00 00 00       	call   805ba20 <__afl_maybe_log>
 805b9ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805b9f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805b9f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805b9f9:	8b 3c 24             	mov    (%esp),%edi
 805b9fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ba00:	53                   	push   %ebx
 805ba01:	83 ec 14             	sub    $0x14,%esp
 805ba04:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
  return xmemdup (string, strlen (string) + 1);
 805ba08:	53                   	push   %ebx
 805ba09:	e8 52 d9 fe ff       	call   8049360 <strlen@plt>
 805ba0e:	5a                   	pop    %edx
 805ba0f:	59                   	pop    %ecx
 805ba10:	83 c0 01             	add    $0x1,%eax
 805ba13:	50                   	push   %eax
 805ba14:	53                   	push   %ebx
 805ba15:	e8 56 ff ff ff       	call   805b970 <xmemdup>
}
 805ba1a:	83 c4 18             	add    $0x18,%esp
 805ba1d:	5b                   	pop    %ebx
 805ba1e:	c3                   	ret    
 805ba1f:	90                   	nop

0805ba20 <__afl_maybe_log>:
 805ba20:	9f                   	lahf   
 805ba21:	0f 90 c0             	seto   %al
 805ba24:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 805ba2a:	85 d2                	test   %edx,%edx
 805ba2c:	74 22                	je     805ba50 <__afl_setup>

0805ba2e <__afl_store>:
 805ba2e:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 805ba34:	31 cf                	xor    %ecx,%edi
 805ba36:	d1 e9                	shr    %ecx
 805ba38:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 805ba3e:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805ba42:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805ba46 <__afl_return>:
 805ba46:	04 7f                	add    $0x7f,%al
 805ba48:	9e                   	sahf   
 805ba49:	c3                   	ret    
 805ba4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805ba50 <__afl_setup>:
 805ba50:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 805ba57:	75 ed                	jne    805ba46 <__afl_return>
 805ba59:	50                   	push   %eax
 805ba5a:	51                   	push   %ecx
 805ba5b:	68 58 bb 05 08       	push   $0x805bb58
 805ba60:	e8 4b d8 fe ff       	call   80492b0 <getenv@plt>
 805ba65:	83 c4 04             	add    $0x4,%esp
 805ba68:	85 c0                	test   %eax,%eax
 805ba6a:	0f 84 db 00 00 00    	je     805bb4b <__afl_setup_abort>
 805ba70:	50                   	push   %eax
 805ba71:	e8 0a da fe ff       	call   8049480 <atoi@plt>
 805ba76:	83 c4 04             	add    $0x4,%esp
 805ba79:	6a 00                	push   $0x0
 805ba7b:	6a 00                	push   $0x0
 805ba7d:	50                   	push   %eax
 805ba7e:	e8 6d d7 fe ff       	call   80491f0 <shmat@plt>
 805ba83:	83 c4 0c             	add    $0xc,%esp
 805ba86:	83 f8 ff             	cmp    $0xffffffff,%eax
 805ba89:	0f 84 bc 00 00 00    	je     805bb4b <__afl_setup_abort>
 805ba8f:	c6 00 01             	movb   $0x1,(%eax)
 805ba92:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 805ba97:	89 c2                	mov    %eax,%edx
 805ba99:	59                   	pop    %ecx
 805ba9a:	58                   	pop    %eax

0805ba9b <__afl_forkserver>:
 805ba9b:	50                   	push   %eax
 805ba9c:	51                   	push   %ecx
 805ba9d:	52                   	push   %edx
 805ba9e:	6a 04                	push   $0x4
 805baa0:	68 a0 7d 43 08       	push   $0x8437da0
 805baa5:	68 c7 00 00 00       	push   $0xc7
 805baaa:	e8 e1 d8 fe ff       	call   8049390 <write@plt>
 805baaf:	83 c4 0c             	add    $0xc,%esp
 805bab2:	83 f8 04             	cmp    $0x4,%eax
 805bab5:	75 6e                	jne    805bb25 <__afl_fork_resume>

0805bab7 <__afl_fork_wait_loop>:
 805bab7:	6a 04                	push   $0x4
 805bab9:	68 a0 7d 43 08       	push   $0x8437da0
 805babe:	68 c6 00 00 00       	push   $0xc6
 805bac3:	e8 48 d6 fe ff       	call   8049110 <read@plt>
 805bac8:	83 c4 0c             	add    $0xc,%esp
 805bacb:	83 f8 04             	cmp    $0x4,%eax
 805bace:	75 74                	jne    805bb44 <__afl_die>
 805bad0:	e8 4b d9 fe ff       	call   8049420 <fork@plt>
 805bad5:	83 f8 00             	cmp    $0x0,%eax
 805bad8:	7c 6a                	jl     805bb44 <__afl_die>
 805bada:	74 49                	je     805bb25 <__afl_fork_resume>
 805badc:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 805bae1:	6a 04                	push   $0x4
 805bae3:	68 00 7e 43 08       	push   $0x8437e00
 805bae8:	68 c7 00 00 00       	push   $0xc7
 805baed:	e8 9e d8 fe ff       	call   8049390 <write@plt>
 805baf2:	83 c4 0c             	add    $0xc,%esp
 805baf5:	6a 00                	push   $0x0
 805baf7:	68 a0 7d 43 08       	push   $0x8437da0
 805bafc:	ff 35 00 7e 43 08    	pushl  0x8437e00
 805bb02:	e8 39 d7 fe ff       	call   8049240 <waitpid@plt>
 805bb07:	83 c4 0c             	add    $0xc,%esp
 805bb0a:	83 f8 00             	cmp    $0x0,%eax
 805bb0d:	7e 35                	jle    805bb44 <__afl_die>
 805bb0f:	6a 04                	push   $0x4
 805bb11:	68 a0 7d 43 08       	push   $0x8437da0
 805bb16:	68 c7 00 00 00       	push   $0xc7
 805bb1b:	e8 70 d8 fe ff       	call   8049390 <write@plt>
 805bb20:	83 c4 0c             	add    $0xc,%esp
 805bb23:	eb 92                	jmp    805bab7 <__afl_fork_wait_loop>

0805bb25 <__afl_fork_resume>:
 805bb25:	68 c6 00 00 00       	push   $0xc6
 805bb2a:	e8 c1 d9 fe ff       	call   80494f0 <close@plt>
 805bb2f:	68 c7 00 00 00       	push   $0xc7
 805bb34:	e8 b7 d9 fe ff       	call   80494f0 <close@plt>
 805bb39:	83 c4 08             	add    $0x8,%esp
 805bb3c:	5a                   	pop    %edx
 805bb3d:	59                   	pop    %ecx
 805bb3e:	58                   	pop    %eax
 805bb3f:	e9 ea fe ff ff       	jmp    805ba2e <__afl_store>

0805bb44 <__afl_die>:
 805bb44:	31 c0                	xor    %eax,%eax
 805bb46:	e8 f5 d5 fe ff       	call   8049140 <_exit@plt>

0805bb4b <__afl_setup_abort>:
 805bb4b:	fe 05 20 7e 43 08    	incb   0x8437e20
 805bb51:	59                   	pop    %ecx
 805bb52:	58                   	pop    %eax
 805bb53:	e9 ee fe ff ff       	jmp    805ba46 <__afl_return>

0805bb58 <.AFL_SHM_ENV>:
 805bb58:	5f                   	pop    %edi
 805bb59:	5f                   	pop    %edi
 805bb5a:	41                   	inc    %ecx
 805bb5b:	46                   	inc    %esi
 805bb5c:	4c                   	dec    %esp
 805bb5d:	5f                   	pop    %edi
 805bb5e:	53                   	push   %ebx
 805bb5f:	48                   	dec    %eax
 805bb60:	4d                   	dec    %ebp
 805bb61:	5f                   	pop    %edi
 805bb62:	49                   	dec    %ecx
 805bb63:	44                   	inc    %esp
 805bb64:	00 66 90             	add    %ah,-0x70(%esi)
 805bb67:	66 90                	xchg   %ax,%ax
 805bb69:	66 90                	xchg   %ax,%ax
 805bb6b:	66 90                	xchg   %ax,%ax
 805bb6d:	66 90                	xchg   %ax,%ax
 805bb6f:	90                   	nop

0805bb70 <xalloc_die>:
#include "gettext.h"
#define _(msgid) gettext (msgid)

void
xalloc_die (void)
{
 805bb70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bb74:	89 3c 24             	mov    %edi,(%esp)
 805bb77:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bb7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bb7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bb83:	b9 f7 c4 00 00       	mov    $0xc4f7,%ecx
 805bb88:	e8 43 00 00 00       	call   805bbd0 <__afl_maybe_log>
 805bb8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bb91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bb95:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bb99:	8b 3c 24             	mov    (%esp),%edi
 805bb9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bba0:	83 ec 10             	sub    $0x10,%esp
  error (exit_failure, 0, "%s", _("memory exhausted"));
 805bba3:	6a 05                	push   $0x5
 805bba5:	68 ef 3e 06 08       	push   $0x8063eef
 805bbaa:	6a 00                	push   $0x0
 805bbac:	e8 2f d6 fe ff       	call   80491e0 <dcgettext@plt>
 805bbb1:	8b 15 4c 72 06 08    	mov    0x806724c,%edx
 805bbb7:	50                   	push   %eax
 805bbb8:	68 40 31 06 08       	push   $0x8063140
 805bbbd:	6a 00                	push   $0x0
 805bbbf:	52                   	push   %edx
 805bbc0:	e8 cb d6 fe ff       	call   8049290 <error@plt>

  /* _Noreturn cannot be given to error, since it may return if
     its first argument is 0.  To help compilers understand the
     xalloc_die does not return, call abort.  Also, the abort is a
     safety feature if exit_failure is 0 (which shouldn't happen).  */
  abort ();
 805bbc5:	83 c4 20             	add    $0x20,%esp
 805bbc8:	e8 13 d9 fe ff       	call   80494e0 <abort@plt>
 805bbcd:	8d 76 00             	lea    0x0(%esi),%esi

0805bbd0 <__afl_maybe_log>:
 805bbd0:	9f                   	lahf   
 805bbd1:	0f 90 c0             	seto   %al
 805bbd4:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 805bbda:	85 d2                	test   %edx,%edx
 805bbdc:	74 22                	je     805bc00 <__afl_setup>

0805bbde <__afl_store>:
 805bbde:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 805bbe4:	31 cf                	xor    %ecx,%edi
 805bbe6:	d1 e9                	shr    %ecx
 805bbe8:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 805bbee:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805bbf2:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805bbf6 <__afl_return>:
 805bbf6:	04 7f                	add    $0x7f,%al
 805bbf8:	9e                   	sahf   
 805bbf9:	c3                   	ret    
 805bbfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805bc00 <__afl_setup>:
 805bc00:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 805bc07:	75 ed                	jne    805bbf6 <__afl_return>
 805bc09:	50                   	push   %eax
 805bc0a:	51                   	push   %ecx
 805bc0b:	68 08 bd 05 08       	push   $0x805bd08
 805bc10:	e8 9b d6 fe ff       	call   80492b0 <getenv@plt>
 805bc15:	83 c4 04             	add    $0x4,%esp
 805bc18:	85 c0                	test   %eax,%eax
 805bc1a:	0f 84 db 00 00 00    	je     805bcfb <__afl_setup_abort>
 805bc20:	50                   	push   %eax
 805bc21:	e8 5a d8 fe ff       	call   8049480 <atoi@plt>
 805bc26:	83 c4 04             	add    $0x4,%esp
 805bc29:	6a 00                	push   $0x0
 805bc2b:	6a 00                	push   $0x0
 805bc2d:	50                   	push   %eax
 805bc2e:	e8 bd d5 fe ff       	call   80491f0 <shmat@plt>
 805bc33:	83 c4 0c             	add    $0xc,%esp
 805bc36:	83 f8 ff             	cmp    $0xffffffff,%eax
 805bc39:	0f 84 bc 00 00 00    	je     805bcfb <__afl_setup_abort>
 805bc3f:	c6 00 01             	movb   $0x1,(%eax)
 805bc42:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 805bc47:	89 c2                	mov    %eax,%edx
 805bc49:	59                   	pop    %ecx
 805bc4a:	58                   	pop    %eax

0805bc4b <__afl_forkserver>:
 805bc4b:	50                   	push   %eax
 805bc4c:	51                   	push   %ecx
 805bc4d:	52                   	push   %edx
 805bc4e:	6a 04                	push   $0x4
 805bc50:	68 a0 7d 43 08       	push   $0x8437da0
 805bc55:	68 c7 00 00 00       	push   $0xc7
 805bc5a:	e8 31 d7 fe ff       	call   8049390 <write@plt>
 805bc5f:	83 c4 0c             	add    $0xc,%esp
 805bc62:	83 f8 04             	cmp    $0x4,%eax
 805bc65:	75 6e                	jne    805bcd5 <__afl_fork_resume>

0805bc67 <__afl_fork_wait_loop>:
 805bc67:	6a 04                	push   $0x4
 805bc69:	68 a0 7d 43 08       	push   $0x8437da0
 805bc6e:	68 c6 00 00 00       	push   $0xc6
 805bc73:	e8 98 d4 fe ff       	call   8049110 <read@plt>
 805bc78:	83 c4 0c             	add    $0xc,%esp
 805bc7b:	83 f8 04             	cmp    $0x4,%eax
 805bc7e:	75 74                	jne    805bcf4 <__afl_die>
 805bc80:	e8 9b d7 fe ff       	call   8049420 <fork@plt>
 805bc85:	83 f8 00             	cmp    $0x0,%eax
 805bc88:	7c 6a                	jl     805bcf4 <__afl_die>
 805bc8a:	74 49                	je     805bcd5 <__afl_fork_resume>
 805bc8c:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 805bc91:	6a 04                	push   $0x4
 805bc93:	68 00 7e 43 08       	push   $0x8437e00
 805bc98:	68 c7 00 00 00       	push   $0xc7
 805bc9d:	e8 ee d6 fe ff       	call   8049390 <write@plt>
 805bca2:	83 c4 0c             	add    $0xc,%esp
 805bca5:	6a 00                	push   $0x0
 805bca7:	68 a0 7d 43 08       	push   $0x8437da0
 805bcac:	ff 35 00 7e 43 08    	pushl  0x8437e00
 805bcb2:	e8 89 d5 fe ff       	call   8049240 <waitpid@plt>
 805bcb7:	83 c4 0c             	add    $0xc,%esp
 805bcba:	83 f8 00             	cmp    $0x0,%eax
 805bcbd:	7e 35                	jle    805bcf4 <__afl_die>
 805bcbf:	6a 04                	push   $0x4
 805bcc1:	68 a0 7d 43 08       	push   $0x8437da0
 805bcc6:	68 c7 00 00 00       	push   $0xc7
 805bccb:	e8 c0 d6 fe ff       	call   8049390 <write@plt>
 805bcd0:	83 c4 0c             	add    $0xc,%esp
 805bcd3:	eb 92                	jmp    805bc67 <__afl_fork_wait_loop>

0805bcd5 <__afl_fork_resume>:
 805bcd5:	68 c6 00 00 00       	push   $0xc6
 805bcda:	e8 11 d8 fe ff       	call   80494f0 <close@plt>
 805bcdf:	68 c7 00 00 00       	push   $0xc7
 805bce4:	e8 07 d8 fe ff       	call   80494f0 <close@plt>
 805bce9:	83 c4 08             	add    $0x8,%esp
 805bcec:	5a                   	pop    %edx
 805bced:	59                   	pop    %ecx
 805bcee:	58                   	pop    %eax
 805bcef:	e9 ea fe ff ff       	jmp    805bbde <__afl_store>

0805bcf4 <__afl_die>:
 805bcf4:	31 c0                	xor    %eax,%eax
 805bcf6:	e8 45 d4 fe ff       	call   8049140 <_exit@plt>

0805bcfb <__afl_setup_abort>:
 805bcfb:	fe 05 20 7e 43 08    	incb   0x8437e20
 805bd01:	59                   	pop    %ecx
 805bd02:	58                   	pop    %eax
 805bd03:	e9 ee fe ff ff       	jmp    805bbf6 <__afl_return>

0805bd08 <.AFL_SHM_ENV>:
 805bd08:	5f                   	pop    %edi
 805bd09:	5f                   	pop    %edi
 805bd0a:	41                   	inc    %ecx
 805bd0b:	46                   	inc    %esi
 805bd0c:	4c                   	dec    %esp
 805bd0d:	5f                   	pop    %edi
 805bd0e:	53                   	push   %ebx
 805bd0f:	48                   	dec    %eax
 805bd10:	4d                   	dec    %ebp
 805bd11:	5f                   	pop    %edi
 805bd12:	49                   	dec    %ecx
 805bd13:	44                   	inc    %esp
 805bd14:	00 66 90             	add    %ah,-0x70(%esi)
 805bd17:	66 90                	xchg   %ax,%ax
 805bd19:	66 90                	xchg   %ax,%ax
 805bd1b:	66 90                	xchg   %ax,%ax
 805bd1d:	66 90                	xchg   %ax,%ax
 805bd1f:	90                   	nop

0805bd20 <xstrtoumax>:
/* FIXME: comment.  */

strtol_error
__xstrtol (const char *s, char **ptr, int strtol_base,
           __strtol_t *val, const char *valid_suffixes)
{
 805bd20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bd24:	89 3c 24             	mov    %edi,(%esp)
 805bd27:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bd2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bd2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bd33:	b9 3a 4e 00 00       	mov    $0x4e3a,%ecx
 805bd38:	e8 6b 38 00 00       	call   805f5a8 <__afl_maybe_log>
 805bd3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bd41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bd45:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bd49:	8b 3c 24             	mov    (%esp),%edi
 805bd4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bd50:	55                   	push   %ebp
 805bd51:	57                   	push   %edi
 805bd52:	56                   	push   %esi
 805bd53:	53                   	push   %ebx
 805bd54:	83 ec 3c             	sub    $0x3c,%esp
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;

  assure (0 <= strtol_base && strtol_base <= 36);
 805bd57:	83 7c 24 58 24       	cmpl   $0x24,0x58(%esp)
/* FIXME: comment.  */

strtol_error
__xstrtol (const char *s, char **ptr, int strtol_base,
           __strtol_t *val, const char *valid_suffixes)
{
 805bd5c:	8b 44 24 54          	mov    0x54(%esp),%eax
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;

  assure (0 <= strtol_base && strtol_base <= 36);
 805bd60:	0f 87 f7 37 00 00    	ja     805f55d <xstrtoumax+0x383d>
 805bd66:	66 90                	xchg   %ax,%ax
 805bd68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bd6c:	89 3c 24             	mov    %edi,(%esp)
 805bd6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bd73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bd77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bd7b:	b9 08 ab 00 00       	mov    $0xab08,%ecx
 805bd80:	e8 23 38 00 00       	call   805f5a8 <__afl_maybe_log>
 805bd85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bd89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bd8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bd91:	8b 3c 24             	mov    (%esp),%edi
 805bd94:	8d 64 24 10          	lea    0x10(%esp),%esp

  p = (ptr ? ptr : &t_ptr);
 805bd98:	8d 54 24 2c          	lea    0x2c(%esp),%edx
 805bd9c:	85 c0                	test   %eax,%eax
 805bd9e:	89 d6                	mov    %edx,%esi
 805bda0:	0f 45 f0             	cmovne %eax,%esi

  errno = 0;
 805bda3:	e8 28 d6 fe ff       	call   80493d0 <__errno_location@plt>

  if (! TYPE_SIGNED (__strtol_t))
    {
      const char *q = s;
      unsigned char ch = *q;
 805bda8:	8b 4c 24 50          	mov    0x50(%esp),%ecx

  assure (0 <= strtol_base && strtol_base <= 36);

  p = (ptr ? ptr : &t_ptr);

  errno = 0;
 805bdac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 805bdb2:	89 c7                	mov    %eax,%edi

  if (! TYPE_SIGNED (__strtol_t))
    {
      const char *q = s;
      unsigned char ch = *q;
 805bdb4:	0f b6 19             	movzbl (%ecx),%ebx
 805bdb7:	e8 54 d7 fe ff       	call   8049510 <__ctype_b_loc@plt>
      while (isspace (ch))
 805bdbc:	8b 4c 24 50          	mov    0x50(%esp),%ecx
 805bdc0:	8b 28                	mov    (%eax),%ebp
 805bdc2:	eb 0a                	jmp    805bdce <xstrtoumax+0xae>
 805bdc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
        ch = *++q;
 805bdc8:	83 c1 01             	add    $0x1,%ecx
 805bdcb:	0f b6 19             	movzbl (%ecx),%ebx
 805bdce:	66 90                	xchg   %ax,%ax

  if (! TYPE_SIGNED (__strtol_t))
    {
      const char *q = s;
      unsigned char ch = *q;
      while (isspace (ch))
 805bdd0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bdd4:	89 3c 24             	mov    %edi,(%esp)
 805bdd7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bddb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bddf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bde3:	b9 eb 33 00 00       	mov    $0x33eb,%ecx
 805bde8:	e8 bb 37 00 00       	call   805f5a8 <__afl_maybe_log>
 805bded:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bdf1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bdf5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bdf9:	8b 3c 24             	mov    (%esp),%edi
 805bdfc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805be00:	0f b6 c3             	movzbl %bl,%eax
 805be03:	f6 44 45 01 20       	testb  $0x20,0x1(%ebp,%eax,2)
 805be08:	75 be                	jne    805bdc8 <xstrtoumax+0xa8>
 805be0a:	66 90                	xchg   %ax,%ax
 805be0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805be10:	89 3c 24             	mov    %edi,(%esp)
 805be13:	89 54 24 04          	mov    %edx,0x4(%esp)
 805be17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805be1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805be1f:	b9 e0 01 00 00       	mov    $0x1e0,%ecx
 805be24:	e8 7f 37 00 00       	call   805f5a8 <__afl_maybe_log>
 805be29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805be2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805be31:	8b 54 24 04          	mov    0x4(%esp),%edx
 805be35:	8b 3c 24             	mov    (%esp),%edi
 805be38:	8d 64 24 10          	lea    0x10(%esp),%esp
        ch = *++q;
      if (ch == '-')
 805be3c:	80 fb 2d             	cmp    $0x2d,%bl
 805be3f:	0f 85 ab 00 00 00    	jne    805bef0 <xstrtoumax+0x1d0>
 805be45:	8d 76 00             	lea    0x0(%esi),%esi
 805be48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805be4c:	89 3c 24             	mov    %edi,(%esp)
 805be4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805be53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805be57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805be5b:	b9 b3 ea 00 00       	mov    $0xeab3,%ecx
 805be60:	e8 43 37 00 00       	call   805f5a8 <__afl_maybe_log>
 805be65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805be69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805be6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805be71:	8b 3c 24             	mov    (%esp),%edi
 805be74:	8d 64 24 10          	lea    0x10(%esp),%esp
        return LONGINT_INVALID;
 805be78:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805be7c:	89 3c 24             	mov    %edi,(%esp)
 805be7f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805be83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805be87:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805be8b:	b9 52 a0 00 00       	mov    $0xa052,%ecx
 805be90:	e8 13 37 00 00       	call   805f5a8 <__afl_maybe_log>
 805be95:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805be99:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805be9d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bea1:	8b 3c 24             	mov    (%esp),%edi
 805bea4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bea8:	b8 04 00 00 00       	mov    $0x4,%eax
 805bead:	8d 76 00             	lea    0x0(%esi),%esi
        err |= LONGINT_INVALID_SUFFIX_CHAR;
    }

  *val = tmp;
  return err;
}
 805beb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805beb4:	89 3c 24             	mov    %edi,(%esp)
 805beb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bebb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bebf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bec3:	b9 ee 36 00 00       	mov    $0x36ee,%ecx
 805bec8:	e8 db 36 00 00       	call   805f5a8 <__afl_maybe_log>
 805becd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bed1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bed5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bed9:	8b 3c 24             	mov    (%esp),%edi
 805bedc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bee0:	83 c4 3c             	add    $0x3c,%esp
 805bee3:	5b                   	pop    %ebx
 805bee4:	5e                   	pop    %esi
 805bee5:	5f                   	pop    %edi
 805bee6:	5d                   	pop    %ebp
 805bee7:	c3                   	ret    
 805bee8:	90                   	nop
 805bee9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
/* Like `strtoul' but convert to `uintmax_t'.  */
__extern_inline uintmax_t
__NTH (strtoumax (const char *__restrict nptr, char **__restrict endptr,
		  int base))
{
  return __strtoull_internal (nptr, endptr, base, 0);
 805bef0:	6a 00                	push   $0x0
 805bef2:	ff 74 24 5c          	pushl  0x5c(%esp)
 805bef6:	56                   	push   %esi
 805bef7:	ff 74 24 5c          	pushl  0x5c(%esp)
 805befb:	e8 90 d2 fe ff       	call   8049190 <__strtoull_internal@plt>
        return LONGINT_INVALID;
    }

  tmp = __strtol (s, p, strtol_base);

  if (*p == s)
 805bf00:	8b 1e                	mov    (%esi),%ebx
 805bf02:	89 44 24 10          	mov    %eax,0x10(%esp)
 805bf06:	89 54 24 14          	mov    %edx,0x14(%esp)
 805bf0a:	89 5c 24 18          	mov    %ebx,0x18(%esp)
 805bf0e:	83 c4 10             	add    $0x10,%esp
 805bf11:	3b 5c 24 50          	cmp    0x50(%esp),%ebx
 805bf15:	0f 84 23 04 00 00    	je     805c33e <xstrtoumax+0x61e>
 805bf1b:	90                   	nop
 805bf1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bf20:	89 3c 24             	mov    %edi,(%esp)
 805bf23:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bf27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bf2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bf2f:	b9 95 84 00 00       	mov    $0x8495,%ecx
 805bf34:	e8 6f 36 00 00       	call   805f5a8 <__afl_maybe_log>
 805bf39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bf3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bf41:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bf45:	8b 3c 24             	mov    (%esp),%edi
 805bf48:	8d 64 24 10          	lea    0x10(%esp),%esp
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
        tmp = 1;
      else
        return LONGINT_INVALID;
    }
  else if (errno != 0)
 805bf4c:	8b 3f                	mov    (%edi),%edi
 805bf4e:	85 ff                	test   %edi,%edi
 805bf50:	0f 85 32 01 00 00    	jne    805c088 <xstrtoumax+0x368>
 805bf56:	66 90                	xchg   %ax,%ax
 805bf58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bf5c:	89 3c 24             	mov    %edi,(%esp)
 805bf5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bf63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bf67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bf6b:	b9 16 af 00 00       	mov    $0xaf16,%ecx
 805bf70:	e8 33 36 00 00       	call   805f5a8 <__afl_maybe_log>
 805bf75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bf79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bf7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bf81:	8b 3c 24             	mov    (%esp),%edi
 805bf84:	8d 64 24 10          	lea    0x10(%esp),%esp
           __strtol_t *val, const char *valid_suffixes)
{
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;
 805bf88:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 805bf8f:	00 
    }

  /* Let valid_suffixes == NULL mean "allow any suffix".  */
  /* FIXME: update all callers except the ones that allow suffixes
     after the number, changing last parameter NULL to "".  */
  if (!valid_suffixes)
 805bf90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bf94:	89 3c 24             	mov    %edi,(%esp)
 805bf97:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bf9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bf9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bfa3:	b9 5f 81 00 00       	mov    $0x815f,%ecx
 805bfa8:	e8 fb 35 00 00       	call   805f5a8 <__afl_maybe_log>
 805bfad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bfb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bfb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bfb9:	8b 3c 24             	mov    (%esp),%edi
 805bfbc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805bfc0:	8b 6c 24 60          	mov    0x60(%esp),%ebp
 805bfc4:	85 ed                	test   %ebp,%ebp
 805bfc6:	74 70                	je     805c038 <xstrtoumax+0x318>
 805bfc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805bfcc:	89 3c 24             	mov    %edi,(%esp)
 805bfcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805bfd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805bfd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805bfdb:	b9 9d 53 00 00       	mov    $0x539d,%ecx
 805bfe0:	e8 c3 35 00 00       	call   805f5a8 <__afl_maybe_log>
 805bfe5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805bfe9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805bfed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805bff1:	8b 3c 24             	mov    (%esp),%edi
 805bff4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *val = tmp;
      return err;
    }

  if (**p != '\0')
 805bff8:	8b 54 24 08          	mov    0x8(%esp),%edx
 805bffc:	0f b6 1a             	movzbl (%edx),%ebx
 805bfff:	84 db                	test   %bl,%bl
 805c001:	0f 85 ca 00 00 00    	jne    805c0d1 <xstrtoumax+0x3b1>
 805c007:	90                   	nop
 805c008:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c00c:	89 3c 24             	mov    %edi,(%esp)
 805c00f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c013:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c017:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c01b:	b9 fd b1 00 00       	mov    $0xb1fd,%ecx
 805c020:	e8 83 35 00 00       	call   805f5a8 <__afl_maybe_log>
 805c025:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c029:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c02d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c031:	8b 3c 24             	mov    (%esp),%edi
 805c034:	8d 64 24 10          	lea    0x10(%esp),%esp
      *p += suffixes;
      if (**p)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
    }

  *val = tmp;
 805c038:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c03c:	89 3c 24             	mov    %edi,(%esp)
 805c03f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c043:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c047:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c04b:	b9 47 fd 00 00       	mov    $0xfd47,%ecx
 805c050:	e8 53 35 00 00       	call   805f5a8 <__afl_maybe_log>
 805c055:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c059:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c05d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c061:	8b 3c 24             	mov    (%esp),%edi
 805c064:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c068:	8b 4c 24 5c          	mov    0x5c(%esp),%ecx
 805c06c:	8b 1c 24             	mov    (%esp),%ebx
 805c06f:	8b 7c 24 04          	mov    0x4(%esp),%edi
  return err;
 805c073:	8b 44 24 0c          	mov    0xc(%esp),%eax
      *p += suffixes;
      if (**p)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
    }

  *val = tmp;
 805c077:	89 19                	mov    %ebx,(%ecx)
 805c079:	89 79 04             	mov    %edi,0x4(%ecx)
  return err;
}
 805c07c:	83 c4 3c             	add    $0x3c,%esp
 805c07f:	5b                   	pop    %ebx
 805c080:	5e                   	pop    %esi
 805c081:	5f                   	pop    %edi
 805c082:	5d                   	pop    %ebp
 805c083:	c3                   	ret    
 805c084:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      else
        return LONGINT_INVALID;
    }
  else if (errno != 0)
    {
      if (errno != ERANGE)
 805c088:	83 ff 22             	cmp    $0x22,%edi
 805c08b:	0f 85 e7 fd ff ff    	jne    805be78 <xstrtoumax+0x158>
 805c091:	8d 76 00             	lea    0x0(%esi),%esi
 805c094:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c098:	89 3c 24             	mov    %edi,(%esp)
 805c09b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c09f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c0a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c0a7:	b9 39 21 00 00       	mov    $0x2139,%ecx
 805c0ac:	e8 f7 34 00 00       	call   805f5a8 <__afl_maybe_log>
 805c0b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c0b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c0b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c0bd:	8b 3c 24             	mov    (%esp),%edi
 805c0c0:	8d 64 24 10          	lea    0x10(%esp),%esp
        return LONGINT_INVALID;
      err = LONGINT_OVERFLOW;
 805c0c4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
 805c0cb:	00 
 805c0cc:	e9 bf fe ff ff       	jmp    805bf90 <xstrtoumax+0x270>
 805c0d1:	8d 76 00             	lea    0x0(%esi),%esi
 805c0d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c0d8:	89 3c 24             	mov    %edi,(%esp)
 805c0db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c0df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c0e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c0e7:	b9 92 36 00 00       	mov    $0x3692,%ecx
 805c0ec:	e8 b7 34 00 00       	call   805f5a8 <__afl_maybe_log>
 805c0f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c0f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c0f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c0fd:	8b 3c 24             	mov    (%esp),%edi
 805c100:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c104:	83 ec 08             	sub    $0x8,%esp
 805c107:	0f be c3             	movsbl %bl,%eax
 805c10a:	50                   	push   %eax
 805c10b:	ff 74 24 6c          	pushl  0x6c(%esp)
 805c10f:	e8 2c d2 fe ff       	call   8049340 <strchr@plt>
 805c114:	83 c4 10             	add    $0x10,%esp
    {
      int base = 1024;
      int suffixes = 1;
      strtol_error overflow;

      if (!strchr (valid_suffixes, **p))
 805c117:	85 c0                	test   %eax,%eax
 805c119:	0f 84 39 03 00 00    	je     805c458 <xstrtoumax+0x738>
 805c11f:	90                   	nop
 805c120:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c124:	89 3c 24             	mov    %edi,(%esp)
 805c127:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c12b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c12f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c133:	b9 16 30 00 00       	mov    $0x3016,%ecx
 805c138:	e8 6b 34 00 00       	call   805f5a8 <__afl_maybe_log>
 805c13d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c141:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c145:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c149:	8b 3c 24             	mov    (%esp),%edi
 805c14c:	8d 64 24 10          	lea    0x10(%esp),%esp
        {
          *val = tmp;
          return err | LONGINT_INVALID_SUFFIX_CHAR;
        }

      if (strchr (valid_suffixes, '0'))
 805c150:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c154:	89 3c 24             	mov    %edi,(%esp)
 805c157:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c15b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c15f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c163:	b9 29 71 00 00       	mov    $0x7129,%ecx
 805c168:	e8 3b 34 00 00       	call   805f5a8 <__afl_maybe_log>
 805c16d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c171:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c175:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c179:	8b 3c 24             	mov    (%esp),%edi
 805c17c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c180:	83 ec 08             	sub    $0x8,%esp
 805c183:	6a 30                	push   $0x30
 805c185:	ff 74 24 6c          	pushl  0x6c(%esp)
 805c189:	e8 b2 d1 fe ff       	call   8049340 <strchr@plt>
 805c18e:	83 c4 10             	add    $0x10,%esp
 805c191:	85 c0                	test   %eax,%eax
 805c193:	0f 84 ef 00 00 00    	je     805c288 <xstrtoumax+0x568>
 805c199:	8d 76 00             	lea    0x0(%esi),%esi
 805c19c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c1a0:	89 3c 24             	mov    %edi,(%esp)
 805c1a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c1a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c1ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c1af:	b9 6d d3 00 00       	mov    $0xd36d,%ecx
 805c1b4:	e8 ef 33 00 00       	call   805f5a8 <__afl_maybe_log>
 805c1b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c1bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c1c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c1c5:	8b 3c 24             	mov    (%esp),%edi
 805c1c8:	8d 64 24 10          	lea    0x10(%esp),%esp
             the base.  A suffix "B" (e.g. "100MB") stands for a power
             of 1000, whereas a suffix "iB" (e.g. "100MiB") stands for
             a power of 1024.  If no suffix (e.g. "100M"), assume
             power-of-1024.  */

          switch (p[0][1])
 805c1cc:	8b 44 24 08          	mov    0x8(%esp),%eax
 805c1d0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
 805c1d4:	80 fa 44             	cmp    $0x44,%dl
 805c1d7:	0f 84 33 17 00 00    	je     805d910 <xstrtoumax+0x1bf0>
 805c1dd:	8d 76 00             	lea    0x0(%esi),%esi
 805c1e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c1e4:	89 3c 24             	mov    %edi,(%esp)
 805c1e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c1eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c1ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c1f3:	b9 fb 56 00 00       	mov    $0x56fb,%ecx
 805c1f8:	e8 ab 33 00 00       	call   805f5a8 <__afl_maybe_log>
 805c1fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c201:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c205:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c209:	8b 3c 24             	mov    (%esp),%edi
 805c20c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c210:	80 fa 69             	cmp    $0x69,%dl
 805c213:	0f 84 a7 16 00 00    	je     805d8c0 <xstrtoumax+0x1ba0>
 805c219:	8d 76 00             	lea    0x0(%esi),%esi
 805c21c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c220:	89 3c 24             	mov    %edi,(%esp)
 805c223:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c227:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c22b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c22f:	b9 ae 79 00 00       	mov    $0x79ae,%ecx
 805c234:	e8 6f 33 00 00       	call   805f5a8 <__afl_maybe_log>
 805c239:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c23d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c241:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c245:	8b 3c 24             	mov    (%esp),%edi
 805c248:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c24c:	80 fa 42             	cmp    $0x42,%dl
 805c24f:	0f 84 bb 16 00 00    	je     805d910 <xstrtoumax+0x1bf0>
 805c255:	8d 76 00             	lea    0x0(%esi),%esi
 805c258:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c25c:	89 3c 24             	mov    %edi,(%esp)
 805c25f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c263:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c267:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c26b:	b9 3e ea 00 00       	mov    $0xea3e,%ecx
 805c270:	e8 33 33 00 00       	call   805f5a8 <__afl_maybe_log>
 805c275:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c279:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c27d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c281:	8b 3c 24             	mov    (%esp),%edi
 805c284:	8d 64 24 10          	lea    0x10(%esp),%esp
    }

  if (**p != '\0')
    {
      int base = 1024;
      int suffixes = 1;
 805c288:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c28c:	89 3c 24             	mov    %edi,(%esp)
 805c28f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c293:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c297:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c29b:	b9 d4 57 00 00       	mov    $0x57d4,%ecx
 805c2a0:	e8 03 33 00 00       	call   805f5a8 <__afl_maybe_log>
 805c2a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c2a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c2ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c2b1:	8b 3c 24             	mov    (%esp),%edi
 805c2b4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c2b8:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
 805c2bf:	00 
      return err;
    }

  if (**p != '\0')
    {
      int base = 1024;
 805c2c0:	bf 00 04 00 00       	mov    $0x400,%edi
 805c2c5:	8d 76 00             	lea    0x0(%esi),%esi
              suffixes++;
              break;
            }
        }

      switch (**p)
 805c2c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c2cc:	89 3c 24             	mov    %edi,(%esp)
 805c2cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c2d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c2d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c2db:	b9 31 35 00 00       	mov    $0x3531,%ecx
 805c2e0:	e8 c3 32 00 00       	call   805f5a8 <__afl_maybe_log>
 805c2e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c2e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c2ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c2f1:	8b 3c 24             	mov    (%esp),%edi
 805c2f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c2f8:	8d 5b be             	lea    -0x42(%ebx),%ebx
 805c2fb:	80 fb 35             	cmp    $0x35,%bl
 805c2fe:	0f 87 54 01 00 00    	ja     805c458 <xstrtoumax+0x738>
 805c304:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c308:	89 3c 24             	mov    %edi,(%esp)
 805c30b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c30f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c313:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c317:	b9 02 fa 00 00       	mov    $0xfa02,%ecx
 805c31c:	e8 87 32 00 00       	call   805f5a8 <__afl_maybe_log>
 805c321:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c325:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c329:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c32d:	8b 3c 24             	mov    (%esp),%edi
 805c330:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c334:	0f b6 d3             	movzbl %bl,%edx
 805c337:	ff 24 95 58 3f 06 08 	jmp    *0x8063f58(,%edx,4)
 805c33e:	66 90                	xchg   %ax,%ax

  if (*p == s)
    {
      /* If there is no number but there is a valid suffix, assume the
         number is 1.  The string is invalid otherwise.  */
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
 805c340:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c344:	89 3c 24             	mov    %edi,(%esp)
 805c347:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c34b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c34f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c353:	b9 df 1b 00 00       	mov    $0x1bdf,%ecx
 805c358:	e8 4b 32 00 00       	call   805f5a8 <__afl_maybe_log>
 805c35d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c361:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c365:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c369:	8b 3c 24             	mov    (%esp),%edi
 805c36c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c370:	8b 7c 24 60          	mov    0x60(%esp),%edi
 805c374:	85 ff                	test   %edi,%edi
 805c376:	0f 84 fc fa ff ff    	je     805be78 <xstrtoumax+0x158>
 805c37c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c380:	89 3c 24             	mov    %edi,(%esp)
 805c383:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c387:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c38b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c38f:	b9 3d 88 00 00       	mov    $0x883d,%ecx
 805c394:	e8 0f 32 00 00       	call   805f5a8 <__afl_maybe_log>
 805c399:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c39d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c3a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c3a5:	8b 3c 24             	mov    (%esp),%edi
 805c3a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c3ac:	8b 6c 24 50          	mov    0x50(%esp),%ebp
 805c3b0:	0f b6 5d 00          	movzbl 0x0(%ebp),%ebx
 805c3b4:	84 db                	test   %bl,%bl
 805c3b6:	0f 84 bc fa ff ff    	je     805be78 <xstrtoumax+0x158>
 805c3bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c3c0:	89 3c 24             	mov    %edi,(%esp)
 805c3c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c3c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c3cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c3cf:	b9 71 27 00 00       	mov    $0x2771,%ecx
 805c3d4:	e8 cf 31 00 00       	call   805f5a8 <__afl_maybe_log>
 805c3d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c3dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c3e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c3e5:	8b 3c 24             	mov    (%esp),%edi
 805c3e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c3ec:	83 ec 08             	sub    $0x8,%esp
 805c3ef:	0f be cb             	movsbl %bl,%ecx
 805c3f2:	51                   	push   %ecx
 805c3f3:	ff 74 24 6c          	pushl  0x6c(%esp)
 805c3f7:	e8 44 cf fe ff       	call   8049340 <strchr@plt>
 805c3fc:	83 c4 10             	add    $0x10,%esp
 805c3ff:	85 c0                	test   %eax,%eax
        tmp = 1;
 805c401:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 805c408:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 805c40f:	00 
           __strtol_t *val, const char *valid_suffixes)
{
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;
 805c410:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 805c417:	00 

  if (*p == s)
    {
      /* If there is no number but there is a valid suffix, assume the
         number is 1.  The string is invalid otherwise.  */
      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
 805c418:	0f 85 32 fd ff ff    	jne    805c150 <xstrtoumax+0x430>
 805c41e:	66 90                	xchg   %ax,%ax
 805c420:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c424:	89 3c 24             	mov    %edi,(%esp)
 805c427:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c42b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c42f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c433:	b9 37 8c 00 00       	mov    $0x8c37,%ecx
 805c438:	e8 6b 31 00 00       	call   805f5a8 <__afl_maybe_log>
 805c43d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c441:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c445:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c449:	8b 3c 24             	mov    (%esp),%edi
 805c44c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c450:	e9 23 fa ff ff       	jmp    805be78 <xstrtoumax+0x158>
 805c455:	8d 76 00             	lea    0x0(%esi),%esi
        case 'Z': /* zetta or 2**70 */
          overflow = bkm_scale_by_power (&tmp, base, 7);
          break;

        default:
          *val = tmp;
 805c458:	8b 6c 24 5c          	mov    0x5c(%esp),%ebp
 805c45c:	8b 04 24             	mov    (%esp),%eax
 805c45f:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c463:	89 45 00             	mov    %eax,0x0(%ebp)
          return err | LONGINT_INVALID_SUFFIX_CHAR;
 805c466:	8b 44 24 0c          	mov    0xc(%esp),%eax
        case 'Z': /* zetta or 2**70 */
          overflow = bkm_scale_by_power (&tmp, base, 7);
          break;

        default:
          *val = tmp;
 805c46a:	89 55 04             	mov    %edx,0x4(%ebp)
          return err | LONGINT_INVALID_SUFFIX_CHAR;
 805c46d:	83 c8 02             	or     $0x2,%eax
 805c470:	e9 38 fa ff ff       	jmp    805bead <xstrtoumax+0x18d>
 805c475:	8d 76 00             	lea    0x0(%esi),%esi
        case 'B':
          overflow = bkm_scale (&tmp, 1024);
          break;

        case 'c':
          overflow = LONGINT_OK;
 805c478:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c47c:	89 3c 24             	mov    %edi,(%esp)
 805c47f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c483:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c487:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c48b:	b9 71 ad 00 00       	mov    $0xad71,%ecx
 805c490:	e8 13 31 00 00       	call   805f5a8 <__afl_maybe_log>
 805c495:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c499:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c49d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c4a1:	8b 3c 24             	mov    (%esp),%edi
 805c4a4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c4a8:	31 c9                	xor    %ecx,%ecx
 805c4aa:	66 90                	xchg   %ax,%ax
        default:
          *val = tmp;
          return err | LONGINT_INVALID_SUFFIX_CHAR;
        }

      err |= overflow;
 805c4ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c4b0:	89 3c 24             	mov    %edi,(%esp)
 805c4b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c4b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c4bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c4bf:	b9 8a b6 00 00       	mov    $0xb68a,%ecx
 805c4c4:	e8 df 30 00 00       	call   805f5a8 <__afl_maybe_log>
 805c4c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c4cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c4d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c4d5:	8b 3c 24             	mov    (%esp),%edi
 805c4d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c4dc:	0b 4c 24 0c          	or     0xc(%esp),%ecx
      *p += suffixes;
 805c4e0:	8b 44 24 08          	mov    0x8(%esp),%eax
 805c4e4:	03 44 24 14          	add    0x14(%esp),%eax
 805c4e8:	89 06                	mov    %eax,(%esi)
      if (**p)
        err |= LONGINT_INVALID_SUFFIX_CHAR;
 805c4ea:	89 ce                	mov    %ecx,%esi
 805c4ec:	83 ce 02             	or     $0x2,%esi
 805c4ef:	80 38 00             	cmpb   $0x0,(%eax)
 805c4f2:	0f 45 ce             	cmovne %esi,%ecx
 805c4f5:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 805c4f9:	e9 3a fb ff ff       	jmp    805c038 <xstrtoumax+0x318>
 805c4fe:	66 90                	xchg   %ax,%ax
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805c500:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c504:	89 3c 24             	mov    %edi,(%esp)
 805c507:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c50b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c50f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c513:	b9 df 3f 00 00       	mov    $0x3fdf,%ecx
 805c518:	e8 8b 30 00 00       	call   805f5a8 <__afl_maybe_log>
 805c51d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c521:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c525:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c529:	8b 3c 24             	mov    (%esp),%edi
 805c52c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c530:	81 7c 24 04 ff ff ff 	cmpl   $0x7fffffff,0x4(%esp)
 805c537:	7f 
 805c538:	0f 87 14 14 00 00    	ja     805d952 <xstrtoumax+0x1c32>
 805c53e:	66 90                	xchg   %ax,%ax
 805c540:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c544:	89 3c 24             	mov    %edi,(%esp)
 805c547:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c54b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c54f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c553:	b9 90 a4 00 00       	mov    $0xa490,%ecx
 805c558:	e8 4b 30 00 00       	call   805f5a8 <__afl_maybe_log>
 805c55d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c561:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c565:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c569:	8b 3c 24             	mov    (%esp),%edi
 805c56c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805c570:	8b 3c 24             	mov    (%esp),%edi
 805c573:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805c577:	0f a4 f9 01          	shld   $0x1,%edi,%ecx
 805c57b:	01 ff                	add    %edi,%edi
 805c57d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
 805c581:	89 3c 24             	mov    %edi,(%esp)
  return LONGINT_OK;
 805c584:	31 c9                	xor    %ecx,%ecx
 805c586:	e9 1f ff ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805c58b:	90                   	nop
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805c58c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c590:	89 3c 24             	mov    %edi,(%esp)
 805c593:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c597:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c59b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c59f:	b9 5b bb 00 00       	mov    $0xbb5b,%ecx
 805c5a4:	e8 ff 2f 00 00       	call   805f5a8 <__afl_maybe_log>
 805c5a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c5ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c5b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c5b5:	8b 3c 24             	mov    (%esp),%edi
 805c5b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c5bc:	81 7c 24 04 ff ff 7f 	cmpl   $0x7fffff,0x4(%esp)
 805c5c3:	00 
 805c5c4:	0f 87 88 13 00 00    	ja     805d952 <xstrtoumax+0x1c32>
 805c5ca:	66 90                	xchg   %ax,%ax
 805c5cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c5d0:	89 3c 24             	mov    %edi,(%esp)
 805c5d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c5d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c5db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c5df:	b9 dc fa 00 00       	mov    $0xfadc,%ecx
 805c5e4:	e8 bf 2f 00 00       	call   805f5a8 <__afl_maybe_log>
 805c5e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c5ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c5f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c5f5:	8b 3c 24             	mov    (%esp),%edi
 805c5f8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805c5fc:	8b 2c 24             	mov    (%esp),%ebp
 805c5ff:	8b 44 24 04          	mov    0x4(%esp),%eax
  return LONGINT_OK;
 805c603:	31 c9                	xor    %ecx,%ecx
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805c605:	0f a4 e8 09          	shld   $0x9,%ebp,%eax
 805c609:	c1 e5 09             	shl    $0x9,%ebp
 805c60c:	89 2c 24             	mov    %ebp,(%esp)
 805c60f:	89 44 24 04          	mov    %eax,0x4(%esp)
 805c613:	e9 92 fe ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805c618:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c61c:	89 3c 24             	mov    %edi,(%esp)
 805c61f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c623:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c627:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c62b:	b9 47 91 00 00       	mov    $0x9147,%ecx
 805c630:	e8 73 2f 00 00       	call   805f5a8 <__afl_maybe_log>
 805c635:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c639:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c63d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c641:	8b 3c 24             	mov    (%esp),%edi
 805c644:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c648:	89 fd                	mov    %edi,%ebp
 805c64a:	c1 fd 1f             	sar    $0x1f,%ebp
 805c64d:	55                   	push   %ebp
 805c64e:	57                   	push   %edi
 805c64f:	6a ff                	push   $0xffffffff
 805c651:	6a ff                	push   $0xffffffff
 805c653:	e8 e8 67 00 00       	call   8062e40 <__udivdi3>
 805c658:	83 c4 10             	add    $0x10,%esp
 805c65b:	89 44 24 10          	mov    %eax,0x10(%esp)
 805c65f:	89 54 24 18          	mov    %edx,0x18(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805c663:	39 54 24 04          	cmp    %edx,0x4(%esp)
 805c667:	0f 87 e5 13 00 00    	ja     805da52 <xstrtoumax+0x1d32>
 805c66d:	8d 76 00             	lea    0x0(%esi),%esi
 805c670:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c674:	89 3c 24             	mov    %edi,(%esp)
 805c677:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c67b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c67f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c683:	b9 b9 63 00 00       	mov    $0x63b9,%ecx
 805c688:	e8 1b 2f 00 00       	call   805f5a8 <__afl_maybe_log>
 805c68d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c691:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c695:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c699:	8b 3c 24             	mov    (%esp),%edi
 805c69c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c6a0:	72 72                	jb     805c714 <xstrtoumax+0x9f4>
 805c6a2:	66 90                	xchg   %ax,%ax
 805c6a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c6a8:	89 3c 24             	mov    %edi,(%esp)
 805c6ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c6af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c6b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c6b7:	b9 fd 49 00 00       	mov    $0x49fd,%ecx
 805c6bc:	e8 e7 2e 00 00       	call   805f5a8 <__afl_maybe_log>
 805c6c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c6c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c6c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c6cd:	8b 3c 24             	mov    (%esp),%edi
 805c6d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c6d4:	8b 54 24 10          	mov    0x10(%esp),%edx
 805c6d8:	39 14 24             	cmp    %edx,(%esp)
 805c6db:	0f 87 71 13 00 00    	ja     805da52 <xstrtoumax+0x1d32>
 805c6e1:	8d 76 00             	lea    0x0(%esi),%esi
 805c6e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c6e8:	89 3c 24             	mov    %edi,(%esp)
 805c6eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c6ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c6f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c6f7:	b9 15 77 00 00       	mov    $0x7715,%ecx
 805c6fc:	e8 a7 2e 00 00       	call   805f5a8 <__afl_maybe_log>
 805c701:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c705:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c709:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c70d:	8b 3c 24             	mov    (%esp),%edi
 805c710:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805c714:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c718:	89 3c 24             	mov    %edi,(%esp)
 805c71b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c71f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c723:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c727:	b9 a8 a8 00 00       	mov    $0xa8a8,%ecx
 805c72c:	e8 77 2e 00 00       	call   805f5a8 <__afl_maybe_log>
 805c731:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c735:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c739:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c73d:	8b 3c 24             	mov    (%esp),%edi
 805c740:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c744:	8b 0c 24             	mov    (%esp),%ecx
 805c747:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 805c74b:	89 ca                	mov    %ecx,%edx
 805c74d:	89 d8                	mov    %ebx,%eax
 805c74f:	0f af d5             	imul   %ebp,%edx
 805c752:	0f af c7             	imul   %edi,%eax
 805c755:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
 805c758:	8b 04 24             	mov    (%esp),%eax
 805c75b:	f7 e7                	mul    %edi
 805c75d:	01 ca                	add    %ecx,%edx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805c75f:	39 54 24 18          	cmp    %edx,0x18(%esp)
 805c763:	0f 83 df 27 00 00    	jae    805ef48 <xstrtoumax+0x3228>
 805c769:	8d 76 00             	lea    0x0(%esi),%esi
 805c76c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c770:	89 3c 24             	mov    %edi,(%esp)
 805c773:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c777:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c77b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c77f:	b9 5d 00 00 00       	mov    $0x5d,%ecx
 805c784:	e8 1f 2e 00 00       	call   805f5a8 <__afl_maybe_log>
 805c789:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c78d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c791:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c795:	8b 3c 24             	mov    (%esp),%edi
 805c798:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
  return LONGINT_OK;
 805c79c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c7a0:	89 3c 24             	mov    %edi,(%esp)
 805c7a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c7a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c7ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c7af:	b9 f3 33 00 00       	mov    $0x33f3,%ecx
 805c7b4:	e8 ef 2d 00 00       	call   805f5a8 <__afl_maybe_log>
 805c7b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c7bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c7c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c7c5:	8b 3c 24             	mov    (%esp),%edi
 805c7c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c7cc:	31 c9                	xor    %ecx,%ecx
 805c7ce:	66 90                	xchg   %ax,%ax
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805c7d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c7d4:	89 3c 24             	mov    %edi,(%esp)
 805c7d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c7db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c7df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c7e3:	b9 8e 45 00 00       	mov    $0x458e,%ecx
 805c7e8:	e8 bb 2d 00 00       	call   805f5a8 <__afl_maybe_log>
 805c7ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c7f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c7f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c7f9:	8b 3c 24             	mov    (%esp),%edi
 805c7fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c800:	83 c9 01             	or     $0x1,%ecx
 805c803:	90                   	nop
 805c804:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c808:	89 3c 24             	mov    %edi,(%esp)
 805c80b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c80f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c813:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c817:	b9 85 1b 00 00       	mov    $0x1b85,%ecx
 805c81c:	e8 87 2d 00 00       	call   805f5a8 <__afl_maybe_log>
 805c821:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c825:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c829:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c82d:	8b 3c 24             	mov    (%esp),%edi
 805c830:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c834:	83 c9 01             	or     $0x1,%ecx
 805c837:	90                   	nop
 805c838:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c83c:	89 3c 24             	mov    %edi,(%esp)
 805c83f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c843:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c847:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c84b:	b9 8c 4b 00 00       	mov    $0x4b8c,%ecx
 805c850:	e8 53 2d 00 00       	call   805f5a8 <__afl_maybe_log>
 805c855:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c859:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c85d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c861:	8b 3c 24             	mov    (%esp),%edi
 805c864:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c868:	83 c9 01             	or     $0x1,%ecx
 805c86b:	90                   	nop
 805c86c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c870:	89 3c 24             	mov    %edi,(%esp)
 805c873:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c87b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c87f:	b9 12 e0 00 00       	mov    $0xe012,%ecx
 805c884:	e8 1f 2d 00 00       	call   805f5a8 <__afl_maybe_log>
 805c889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c88d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c891:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c895:	8b 3c 24             	mov    (%esp),%edi
 805c898:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c89c:	83 c9 01             	or     $0x1,%ecx
 805c89f:	90                   	nop
 805c8a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c8a4:	89 3c 24             	mov    %edi,(%esp)
 805c8a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c8ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c8af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c8b3:	b9 5d fc 00 00       	mov    $0xfc5d,%ecx
 805c8b8:	e8 eb 2c 00 00       	call   805f5a8 <__afl_maybe_log>
 805c8bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c8c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c8c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c8c9:	8b 3c 24             	mov    (%esp),%edi
 805c8cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c8d0:	83 c9 01             	or     $0x1,%ecx
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 805c8d3:	b8 01 00 00 00       	mov    $0x1,%eax
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 805c8d8:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805c8df:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805c8e6:	ff 
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805c8e7:	09 c1                	or     %eax,%ecx
          overflow = bkm_scale_by_power (&tmp, base, 8);
          break;

        case 'Z': /* zetta or 2**70 */
          overflow = bkm_scale_by_power (&tmp, base, 7);
          break;
 805c8e9:	e9 bc fb ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805c8ee:	66 90                	xchg   %ax,%ax
 805c8f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c8f4:	89 3c 24             	mov    %edi,(%esp)
 805c8f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c8fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c8ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c903:	b9 05 ea 00 00       	mov    $0xea05,%ecx
 805c908:	e8 9b 2c 00 00       	call   805f5a8 <__afl_maybe_log>
 805c90d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c911:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c915:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c919:	8b 3c 24             	mov    (%esp),%edi
 805c91c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c920:	89 fd                	mov    %edi,%ebp
 805c922:	c1 fd 1f             	sar    $0x1f,%ebp
 805c925:	55                   	push   %ebp
 805c926:	57                   	push   %edi
 805c927:	6a ff                	push   $0xffffffff
 805c929:	6a ff                	push   $0xffffffff
 805c92b:	e8 10 65 00 00       	call   8062e40 <__udivdi3>
 805c930:	83 c4 10             	add    $0x10,%esp
 805c933:	89 44 24 10          	mov    %eax,0x10(%esp)
 805c937:	89 54 24 18          	mov    %edx,0x18(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805c93b:	39 54 24 04          	cmp    %edx,0x4(%esp)
 805c93f:	0f 87 d1 10 00 00    	ja     805da16 <xstrtoumax+0x1cf6>
 805c945:	8d 76 00             	lea    0x0(%esi),%esi
 805c948:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c94c:	89 3c 24             	mov    %edi,(%esp)
 805c94f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c953:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c957:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c95b:	b9 d2 c3 00 00       	mov    $0xc3d2,%ecx
 805c960:	e8 43 2c 00 00       	call   805f5a8 <__afl_maybe_log>
 805c965:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c969:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c96d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c971:	8b 3c 24             	mov    (%esp),%edi
 805c974:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c978:	72 72                	jb     805c9ec <xstrtoumax+0xccc>
 805c97a:	66 90                	xchg   %ax,%ax
 805c97c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c980:	89 3c 24             	mov    %edi,(%esp)
 805c983:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c987:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c98b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c98f:	b9 86 b8 00 00       	mov    $0xb886,%ecx
 805c994:	e8 0f 2c 00 00       	call   805f5a8 <__afl_maybe_log>
 805c999:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c99d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c9a1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c9a5:	8b 3c 24             	mov    (%esp),%edi
 805c9a8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805c9ac:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 805c9b0:	39 1c 24             	cmp    %ebx,(%esp)
 805c9b3:	0f 87 5d 10 00 00    	ja     805da16 <xstrtoumax+0x1cf6>
 805c9b9:	8d 76 00             	lea    0x0(%esi),%esi
 805c9bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c9c0:	89 3c 24             	mov    %edi,(%esp)
 805c9c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c9c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c9cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c9cf:	b9 dc 1e 00 00       	mov    $0x1edc,%ecx
 805c9d4:	e8 cf 2b 00 00       	call   805f5a8 <__afl_maybe_log>
 805c9d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805c9dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805c9e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805c9e5:	8b 3c 24             	mov    (%esp),%edi
 805c9e8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805c9ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805c9f0:	89 3c 24             	mov    %edi,(%esp)
 805c9f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805c9f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805c9fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805c9ff:	b9 d8 b0 00 00       	mov    $0xb0d8,%ecx
 805ca04:	e8 9f 2b 00 00       	call   805f5a8 <__afl_maybe_log>
 805ca09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ca0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ca11:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ca15:	8b 3c 24             	mov    (%esp),%edi
 805ca18:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ca1c:	8b 0c 24             	mov    (%esp),%ecx
 805ca1f:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 805ca23:	89 ca                	mov    %ecx,%edx
 805ca25:	89 d8                	mov    %ebx,%eax
 805ca27:	0f af d5             	imul   %ebp,%edx
 805ca2a:	0f af c7             	imul   %edi,%eax
 805ca2d:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
 805ca30:	8b 04 24             	mov    (%esp),%eax
 805ca33:	f7 e7                	mul    %edi
 805ca35:	01 ca                	add    %ecx,%edx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805ca37:	39 54 24 18          	cmp    %edx,0x18(%esp)
 805ca3b:	0f 83 60 1e 00 00    	jae    805e8a1 <xstrtoumax+0x2b81>
 805ca41:	8d 76 00             	lea    0x0(%esi),%esi
 805ca44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ca48:	89 3c 24             	mov    %edi,(%esp)
 805ca4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ca4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ca53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ca57:	b9 b2 8b 00 00       	mov    $0x8bb2,%ecx
 805ca5c:	e8 47 2b 00 00       	call   805f5a8 <__afl_maybe_log>
 805ca61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ca65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ca69:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ca6d:	8b 3c 24             	mov    (%esp),%edi
 805ca70:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
  return LONGINT_OK;
 805ca74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ca78:	89 3c 24             	mov    %edi,(%esp)
 805ca7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ca7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ca83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ca87:	b9 3b 31 00 00       	mov    $0x313b,%ecx
 805ca8c:	e8 17 2b 00 00       	call   805f5a8 <__afl_maybe_log>
 805ca91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ca95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ca99:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ca9d:	8b 3c 24             	mov    (%esp),%edi
 805caa0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805caa4:	31 c9                	xor    %ecx,%ecx
 805caa6:	66 90                	xchg   %ax,%ax
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805caa8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805caac:	89 3c 24             	mov    %edi,(%esp)
 805caaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cab3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cab7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cabb:	b9 53 df 00 00       	mov    $0xdf53,%ecx
 805cac0:	e8 e3 2a 00 00       	call   805f5a8 <__afl_maybe_log>
 805cac5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cac9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cacd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cad1:	8b 3c 24             	mov    (%esp),%edi
 805cad4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cad8:	83 c9 01             	or     $0x1,%ecx
 805cadb:	e9 ee fc ff ff       	jmp    805c7ce <xstrtoumax+0xaae>
 805cae0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cae4:	89 3c 24             	mov    %edi,(%esp)
 805cae7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805caeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805caef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805caf3:	b9 7d ae 00 00       	mov    $0xae7d,%ecx
 805caf8:	e8 ab 2a 00 00       	call   805f5a8 <__afl_maybe_log>
 805cafd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cb01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cb05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cb09:	8b 3c 24             	mov    (%esp),%edi
 805cb0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cb10:	89 fd                	mov    %edi,%ebp
 805cb12:	c1 fd 1f             	sar    $0x1f,%ebp
 805cb15:	55                   	push   %ebp
 805cb16:	57                   	push   %edi
 805cb17:	6a ff                	push   $0xffffffff
 805cb19:	6a ff                	push   $0xffffffff
 805cb1b:	e8 20 63 00 00       	call   8062e40 <__udivdi3>
 805cb20:	83 c4 10             	add    $0x10,%esp
 805cb23:	89 44 24 10          	mov    %eax,0x10(%esp)
 805cb27:	89 54 24 18          	mov    %edx,0x18(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805cb2b:	39 54 24 04          	cmp    %edx,0x4(%esp)
 805cb2f:	0f 87 a5 0e 00 00    	ja     805d9da <xstrtoumax+0x1cba>
 805cb35:	8d 76 00             	lea    0x0(%esi),%esi
 805cb38:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cb3c:	89 3c 24             	mov    %edi,(%esp)
 805cb3f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cb43:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cb47:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cb4b:	b9 00 f8 00 00       	mov    $0xf800,%ecx
 805cb50:	e8 53 2a 00 00       	call   805f5a8 <__afl_maybe_log>
 805cb55:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cb59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cb5d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cb61:	8b 3c 24             	mov    (%esp),%edi
 805cb64:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cb68:	72 72                	jb     805cbdc <xstrtoumax+0xebc>
 805cb6a:	66 90                	xchg   %ax,%ax
 805cb6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cb70:	89 3c 24             	mov    %edi,(%esp)
 805cb73:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cb77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cb7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cb7f:	b9 fd 6e 00 00       	mov    $0x6efd,%ecx
 805cb84:	e8 1f 2a 00 00       	call   805f5a8 <__afl_maybe_log>
 805cb89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cb8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cb91:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cb95:	8b 3c 24             	mov    (%esp),%edi
 805cb98:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cb9c:	8b 54 24 10          	mov    0x10(%esp),%edx
 805cba0:	39 14 24             	cmp    %edx,(%esp)
 805cba3:	0f 87 31 0e 00 00    	ja     805d9da <xstrtoumax+0x1cba>
 805cba9:	8d 76 00             	lea    0x0(%esi),%esi
 805cbac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cbb0:	89 3c 24             	mov    %edi,(%esp)
 805cbb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cbb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cbbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cbbf:	b9 03 ae 00 00       	mov    $0xae03,%ecx
 805cbc4:	e8 df 29 00 00       	call   805f5a8 <__afl_maybe_log>
 805cbc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cbcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cbd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cbd5:	8b 3c 24             	mov    (%esp),%edi
 805cbd8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805cbdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cbe0:	89 3c 24             	mov    %edi,(%esp)
 805cbe3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cbe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cbeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cbef:	b9 d7 0d 00 00       	mov    $0xdd7,%ecx
 805cbf4:	e8 af 29 00 00       	call   805f5a8 <__afl_maybe_log>
 805cbf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cbfd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cc01:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cc05:	8b 3c 24             	mov    (%esp),%edi
 805cc08:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cc0c:	8b 0c 24             	mov    (%esp),%ecx
 805cc0f:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 805cc13:	89 ca                	mov    %ecx,%edx
 805cc15:	89 d8                	mov    %ebx,%eax
 805cc17:	0f af d5             	imul   %ebp,%edx
 805cc1a:	0f af c7             	imul   %edi,%eax
 805cc1d:	01 d0                	add    %edx,%eax
 805cc1f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 805cc23:	89 c8                	mov    %ecx,%eax
 805cc25:	f7 e7                	mul    %edi
 805cc27:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc2b:	89 04 24             	mov    %eax,(%esp)
 805cc2e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805cc32:	01 44 24 04          	add    %eax,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805cc36:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805cc3a:	39 4c 24 18          	cmp    %ecx,0x18(%esp)
 805cc3e:	0f 83 1e 1b 00 00    	jae    805e762 <xstrtoumax+0x2a42>
 805cc44:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cc48:	89 3c 24             	mov    %edi,(%esp)
 805cc4b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cc53:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cc57:	b9 78 53 00 00       	mov    $0x5378,%ecx
 805cc5c:	e8 47 29 00 00       	call   805f5a8 <__afl_maybe_log>
 805cc61:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cc65:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cc69:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cc6d:	8b 3c 24             	mov    (%esp),%edi
 805cc70:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
  return LONGINT_OK;
 805cc74:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cc78:	89 3c 24             	mov    %edi,(%esp)
 805cc7b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cc7f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cc83:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cc87:	b9 a6 fb 00 00       	mov    $0xfba6,%ecx
 805cc8c:	e8 17 29 00 00       	call   805f5a8 <__afl_maybe_log>
 805cc91:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cc95:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cc99:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cc9d:	8b 3c 24             	mov    (%esp),%edi
 805cca0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cca4:	31 ff                	xor    %edi,%edi
 805cca6:	66 90                	xchg   %ax,%ax
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805cca8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ccac:	89 3c 24             	mov    %edi,(%esp)
 805ccaf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ccb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ccb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ccbb:	b9 db 0d 00 00       	mov    $0xddb,%ecx
 805ccc0:	e8 e3 28 00 00       	call   805f5a8 <__afl_maybe_log>
 805ccc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ccc9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cccd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ccd1:	8b 3c 24             	mov    (%esp),%edi
 805ccd4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ccd8:	83 cf 01             	or     $0x1,%edi
 805ccdb:	89 fb                	mov    %edi,%ebx
 805ccdd:	8d 76 00             	lea    0x0(%esi),%esi
 805cce0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cce4:	89 3c 24             	mov    %edi,(%esp)
 805cce7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cceb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ccef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ccf3:	b9 c2 f0 00 00       	mov    $0xf0c2,%ecx
 805ccf8:	e8 ab 28 00 00       	call   805f5a8 <__afl_maybe_log>
 805ccfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cd01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cd05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cd09:	8b 3c 24             	mov    (%esp),%edi
 805cd0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cd10:	83 cb 01             	or     $0x1,%ebx
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 805cd13:	b9 01 00 00 00       	mov    $0x1,%ecx
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 805cd18:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805cd1f:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805cd26:	ff 
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805cd27:	09 d9                	or     %ebx,%ecx
          break;

        case 'T': /* tera or tebi */
        case 't': /* 't' is undocumented; for compatibility only */
          overflow = bkm_scale_by_power (&tmp, base, 4);
          break;
 805cd29:	e9 7c f7 ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805cd2e:	66 90                	xchg   %ax,%ax
 805cd30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cd34:	89 3c 24             	mov    %edi,(%esp)
 805cd37:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cd3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cd3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cd43:	b9 0b 8b 00 00       	mov    $0x8b0b,%ecx
 805cd48:	e8 5b 28 00 00       	call   805f5a8 <__afl_maybe_log>
 805cd4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cd51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cd55:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cd59:	8b 3c 24             	mov    (%esp),%edi
 805cd5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cd60:	89 fd                	mov    %edi,%ebp
 805cd62:	c1 fd 1f             	sar    $0x1f,%ebp
 805cd65:	55                   	push   %ebp
 805cd66:	57                   	push   %edi
 805cd67:	6a ff                	push   $0xffffffff
 805cd69:	6a ff                	push   $0xffffffff
 805cd6b:	e8 d0 60 00 00       	call   8062e40 <__udivdi3>
 805cd70:	83 c4 10             	add    $0x10,%esp
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805cd73:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805cd77:	89 44 24 10          	mov    %eax,0x10(%esp)
 805cd7b:	89 54 24 18          	mov    %edx,0x18(%esp)
 805cd7f:	39 ca                	cmp    %ecx,%edx
 805cd81:	0f 82 07 0d 00 00    	jb     805da8e <xstrtoumax+0x1d6e>
 805cd87:	90                   	nop
 805cd88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cd8c:	89 3c 24             	mov    %edi,(%esp)
 805cd8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cd93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cd97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cd9b:	b9 5c 90 00 00       	mov    $0x905c,%ecx
 805cda0:	e8 03 28 00 00       	call   805f5a8 <__afl_maybe_log>
 805cda5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cda9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cdad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cdb1:	8b 3c 24             	mov    (%esp),%edi
 805cdb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cdb8:	77 72                	ja     805ce2c <xstrtoumax+0x110c>
 805cdba:	66 90                	xchg   %ax,%ax
 805cdbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cdc0:	89 3c 24             	mov    %edi,(%esp)
 805cdc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cdc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cdcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cdcf:	b9 17 f3 00 00       	mov    $0xf317,%ecx
 805cdd4:	e8 cf 27 00 00       	call   805f5a8 <__afl_maybe_log>
 805cdd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cddd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cde1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cde5:	8b 3c 24             	mov    (%esp),%edi
 805cde8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cdec:	8b 14 24             	mov    (%esp),%edx
 805cdef:	39 54 24 10          	cmp    %edx,0x10(%esp)
 805cdf3:	0f 82 95 0c 00 00    	jb     805da8e <xstrtoumax+0x1d6e>
 805cdf9:	8d 76 00             	lea    0x0(%esi),%esi
 805cdfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ce00:	89 3c 24             	mov    %edi,(%esp)
 805ce03:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ce0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ce0f:	b9 7d 2c 00 00       	mov    $0x2c7d,%ecx
 805ce14:	e8 8f 27 00 00       	call   805f5a8 <__afl_maybe_log>
 805ce19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ce1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ce21:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ce25:	8b 3c 24             	mov    (%esp),%edi
 805ce28:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805ce2c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ce30:	89 3c 24             	mov    %edi,(%esp)
 805ce33:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ce3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ce3f:	b9 09 3c 00 00       	mov    $0x3c09,%ecx
 805ce44:	e8 5f 27 00 00       	call   805f5a8 <__afl_maybe_log>
 805ce49:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ce4d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ce51:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ce55:	8b 3c 24             	mov    (%esp),%edi
 805ce58:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ce5c:	8b 0c 24             	mov    (%esp),%ecx
 805ce5f:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 805ce63:	89 ca                	mov    %ecx,%edx
 805ce65:	89 d8                	mov    %ebx,%eax
 805ce67:	0f af d5             	imul   %ebp,%edx
 805ce6a:	0f af c7             	imul   %edi,%eax
 805ce6d:	01 d0                	add    %edx,%eax
 805ce6f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 805ce73:	89 c8                	mov    %ecx,%eax
 805ce75:	f7 e7                	mul    %edi
 805ce77:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce7b:	89 04 24             	mov    %eax,(%esp)
 805ce7e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 805ce82:	01 44 24 04          	add    %eax,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805ce86:	8b 44 24 18          	mov    0x18(%esp),%eax
 805ce8a:	39 44 24 04          	cmp    %eax,0x4(%esp)
 805ce8e:	0f 86 bd 0c 00 00    	jbe    805db51 <xstrtoumax+0x1e31>
 805ce94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ce98:	89 3c 24             	mov    %edi,(%esp)
 805ce9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ce9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cea3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cea7:	b9 90 81 00 00       	mov    $0x8190,%ecx
 805ceac:	e8 f7 26 00 00       	call   805f5a8 <__afl_maybe_log>
 805ceb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ceb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ceb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cebd:	8b 3c 24             	mov    (%esp),%edi
 805cec0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
  return LONGINT_OK;
 805cec4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cec8:	89 3c 24             	mov    %edi,(%esp)
 805cecb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cecf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ced3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ced7:	b9 9c 37 00 00       	mov    $0x379c,%ecx
 805cedc:	e8 c7 26 00 00       	call   805f5a8 <__afl_maybe_log>
 805cee1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cee5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cee9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ceed:	8b 3c 24             	mov    (%esp),%edi
 805cef0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cef4:	31 ed                	xor    %ebp,%ebp
 805cef6:	66 90                	xchg   %ax,%ax
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805cef8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cefc:	89 3c 24             	mov    %edi,(%esp)
 805ceff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cf03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cf07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cf0b:	b9 0c fb 00 00       	mov    $0xfb0c,%ecx
 805cf10:	e8 93 26 00 00       	call   805f5a8 <__afl_maybe_log>
 805cf15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cf19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cf1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cf21:	8b 3c 24             	mov    (%esp),%edi
 805cf24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cf28:	83 cd 01             	or     $0x1,%ebp
 805cf2b:	89 eb                	mov    %ebp,%ebx
 805cf2d:	8d 76 00             	lea    0x0(%esi),%esi
 805cf30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cf34:	89 3c 24             	mov    %edi,(%esp)
 805cf37:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cf3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cf3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cf43:	b9 7d 12 00 00       	mov    $0x127d,%ecx
 805cf48:	e8 5b 26 00 00       	call   805f5a8 <__afl_maybe_log>
 805cf4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cf51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cf55:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cf59:	8b 3c 24             	mov    (%esp),%edi
 805cf5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cf60:	89 df                	mov    %ebx,%edi
 805cf62:	83 cf 01             	or     $0x1,%edi
 805cf65:	89 fb                	mov    %edi,%ebx
 805cf67:	e9 71 fd ff ff       	jmp    805ccdd <xstrtoumax+0xfbd>
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805cf6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cf70:	89 3c 24             	mov    %edi,(%esp)
 805cf73:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cf77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cf7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cf7f:	b9 2b 6d 00 00       	mov    $0x6d2b,%ecx
 805cf84:	e8 1f 26 00 00       	call   805f5a8 <__afl_maybe_log>
 805cf89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cf8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cf91:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cf95:	8b 3c 24             	mov    (%esp),%edi
 805cf98:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cf9c:	89 fd                	mov    %edi,%ebp
 805cf9e:	c1 fd 1f             	sar    $0x1f,%ebp
 805cfa1:	55                   	push   %ebp
 805cfa2:	57                   	push   %edi
 805cfa3:	6a ff                	push   $0xffffffff
 805cfa5:	6a ff                	push   $0xffffffff
 805cfa7:	e8 94 5e 00 00       	call   8062e40 <__udivdi3>
 805cfac:	83 c4 10             	add    $0x10,%esp
 805cfaf:	89 c1                	mov    %eax,%ecx
 805cfb1:	89 54 24 10          	mov    %edx,0x10(%esp)
 805cfb5:	39 54 24 04          	cmp    %edx,0x4(%esp)
 805cfb9:	0f 87 47 0b 00 00    	ja     805db06 <xstrtoumax+0x1de6>
 805cfbf:	90                   	nop
 805cfc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cfc4:	89 3c 24             	mov    %edi,(%esp)
 805cfc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cfcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805cfcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805cfd3:	b9 8c f4 00 00       	mov    $0xf48c,%ecx
 805cfd8:	e8 cb 25 00 00       	call   805f5a8 <__afl_maybe_log>
 805cfdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805cfe1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805cfe5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805cfe9:	8b 3c 24             	mov    (%esp),%edi
 805cfec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805cff0:	72 6e                	jb     805d060 <xstrtoumax+0x1340>
 805cff2:	66 90                	xchg   %ax,%ax
 805cff4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805cff8:	89 3c 24             	mov    %edi,(%esp)
 805cffb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805cfff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d003:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d007:	b9 10 ba 00 00       	mov    $0xba10,%ecx
 805d00c:	e8 97 25 00 00       	call   805f5a8 <__afl_maybe_log>
 805d011:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d015:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d019:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d01d:	8b 3c 24             	mov    (%esp),%edi
 805d020:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d024:	39 0c 24             	cmp    %ecx,(%esp)
 805d027:	0f 87 d9 0a 00 00    	ja     805db06 <xstrtoumax+0x1de6>
 805d02d:	8d 76 00             	lea    0x0(%esi),%esi
 805d030:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d034:	89 3c 24             	mov    %edi,(%esp)
 805d037:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d03b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d03f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d043:	b9 ec 68 00 00       	mov    $0x68ec,%ecx
 805d048:	e8 5b 25 00 00       	call   805f5a8 <__afl_maybe_log>
 805d04d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d051:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d055:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d059:	8b 3c 24             	mov    (%esp),%edi
 805d05c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805d060:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d064:	89 3c 24             	mov    %edi,(%esp)
 805d067:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d06b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d06f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d073:	b9 da 97 00 00       	mov    $0x97da,%ecx
 805d078:	e8 2b 25 00 00       	call   805f5a8 <__afl_maybe_log>
 805d07d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d081:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d085:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d089:	8b 3c 24             	mov    (%esp),%edi
 805d08c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d090:	8b 44 24 04          	mov    0x4(%esp),%eax
 805d094:	8b 14 24             	mov    (%esp),%edx
 805d097:	0f af c7             	imul   %edi,%eax
 805d09a:	0f af d5             	imul   %ebp,%edx
 805d09d:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
 805d0a0:	8b 04 24             	mov    (%esp),%eax
 805d0a3:	f7 e7                	mul    %edi
 805d0a5:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d0a9:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805d0ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d0b1:	39 54 24 10          	cmp    %edx,0x10(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805d0b5:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805d0b8:	0f 82 48 0a 00 00    	jb     805db06 <xstrtoumax+0x1de6>
 805d0be:	66 90                	xchg   %ax,%ax
 805d0c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d0c4:	89 3c 24             	mov    %edi,(%esp)
 805d0c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d0cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d0cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d0d3:	b9 61 9b 00 00       	mov    $0x9b61,%ecx
 805d0d8:	e8 cb 24 00 00       	call   805f5a8 <__afl_maybe_log>
 805d0dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d0e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d0e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d0e9:	8b 3c 24             	mov    (%esp),%edi
 805d0ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d0f0:	77 6e                	ja     805d160 <xstrtoumax+0x1440>
 805d0f2:	66 90                	xchg   %ax,%ax
 805d0f4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d0f8:	89 3c 24             	mov    %edi,(%esp)
 805d0fb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d0ff:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d103:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d107:	b9 75 48 00 00       	mov    $0x4875,%ecx
 805d10c:	e8 97 24 00 00       	call   805f5a8 <__afl_maybe_log>
 805d111:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d115:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d119:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d11d:	8b 3c 24             	mov    (%esp),%edi
 805d120:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d124:	3b 0c 24             	cmp    (%esp),%ecx
 805d127:	0f 82 d9 09 00 00    	jb     805db06 <xstrtoumax+0x1de6>
 805d12d:	8d 76 00             	lea    0x0(%esi),%esi
 805d130:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d134:	89 3c 24             	mov    %edi,(%esp)
 805d137:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d13b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d13f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d143:	b9 e6 31 00 00       	mov    $0x31e6,%ecx
 805d148:	e8 5b 24 00 00       	call   805f5a8 <__afl_maybe_log>
 805d14d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d151:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d155:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d159:	8b 3c 24             	mov    (%esp),%edi
 805d15c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805d160:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d164:	89 3c 24             	mov    %edi,(%esp)
 805d167:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d16b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d16f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d173:	b9 54 d0 00 00       	mov    $0xd054,%ecx
 805d178:	e8 2b 24 00 00       	call   805f5a8 <__afl_maybe_log>
 805d17d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d181:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d185:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d189:	8b 3c 24             	mov    (%esp),%edi
 805d18c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d190:	8b 44 24 04          	mov    0x4(%esp),%eax
 805d194:	8b 0c 24             	mov    (%esp),%ecx
 805d197:	0f af c7             	imul   %edi,%eax
 805d19a:	0f af cd             	imul   %ebp,%ecx
 805d19d:	01 c1                	add    %eax,%ecx
 805d19f:	8b 04 24             	mov    (%esp),%eax
 805d1a2:	f7 e7                	mul    %edi
 805d1a4:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d1a8:	89 04 24             	mov    %eax,(%esp)
 805d1ab:	01 4c 24 04          	add    %ecx,0x4(%esp)
 805d1af:	31 c9                	xor    %ecx,%ecx
 805d1b1:	e9 f4 f2 ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805d1b6:	66 90                	xchg   %ax,%ax
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805d1b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d1bc:	89 3c 24             	mov    %edi,(%esp)
 805d1bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d1c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d1c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d1cb:	b9 05 1a 00 00       	mov    $0x1a05,%ecx
 805d1d0:	e8 d3 23 00 00       	call   805f5a8 <__afl_maybe_log>
 805d1d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d1d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d1dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d1e1:	8b 3c 24             	mov    (%esp),%edi
 805d1e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d1e8:	89 fd                	mov    %edi,%ebp
 805d1ea:	c1 fd 1f             	sar    $0x1f,%ebp
 805d1ed:	55                   	push   %ebp
 805d1ee:	57                   	push   %edi
 805d1ef:	6a ff                	push   $0xffffffff
 805d1f1:	6a ff                	push   $0xffffffff
 805d1f3:	e8 48 5c 00 00       	call   8062e40 <__udivdi3>
 805d1f8:	83 c4 10             	add    $0x10,%esp
 805d1fb:	39 54 24 04          	cmp    %edx,0x4(%esp)
 805d1ff:	0f 87 4d 07 00 00    	ja     805d952 <xstrtoumax+0x1c32>
 805d205:	8d 76 00             	lea    0x0(%esi),%esi
 805d208:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d20c:	89 3c 24             	mov    %edi,(%esp)
 805d20f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d213:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d217:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d21b:	b9 c6 a3 00 00       	mov    $0xa3c6,%ecx
 805d220:	e8 83 23 00 00       	call   805f5a8 <__afl_maybe_log>
 805d225:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d229:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d22d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d231:	8b 3c 24             	mov    (%esp),%edi
 805d234:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d238:	72 6e                	jb     805d2a8 <xstrtoumax+0x1588>
 805d23a:	66 90                	xchg   %ax,%ax
 805d23c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d240:	89 3c 24             	mov    %edi,(%esp)
 805d243:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d247:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d24b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d24f:	b9 8a 5a 00 00       	mov    $0x5a8a,%ecx
 805d254:	e8 4f 23 00 00       	call   805f5a8 <__afl_maybe_log>
 805d259:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d25d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d261:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d265:	8b 3c 24             	mov    (%esp),%edi
 805d268:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d26c:	39 04 24             	cmp    %eax,(%esp)
 805d26f:	0f 87 dd 06 00 00    	ja     805d952 <xstrtoumax+0x1c32>
 805d275:	8d 76 00             	lea    0x0(%esi),%esi
 805d278:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d27c:	89 3c 24             	mov    %edi,(%esp)
 805d27f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d283:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d287:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d28b:	b9 6b 71 00 00       	mov    $0x716b,%ecx
 805d290:	e8 13 23 00 00       	call   805f5a8 <__afl_maybe_log>
 805d295:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d299:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d29d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d2a1:	8b 3c 24             	mov    (%esp),%edi
 805d2a4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805d2a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d2ac:	89 3c 24             	mov    %edi,(%esp)
 805d2af:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d2b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d2b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d2bb:	b9 64 55 00 00       	mov    $0x5564,%ecx
 805d2c0:	e8 e3 22 00 00       	call   805f5a8 <__afl_maybe_log>
 805d2c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d2c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d2cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d2d1:	8b 3c 24             	mov    (%esp),%edi
 805d2d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d2d8:	8b 0c 24             	mov    (%esp),%ecx
 805d2db:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 805d2df:	89 c8                	mov    %ecx,%eax
 805d2e1:	89 da                	mov    %ebx,%edx
 805d2e3:	0f af d7             	imul   %edi,%edx
 805d2e6:	0f af c5             	imul   %ebp,%eax
 805d2e9:	01 d0                	add    %edx,%eax
 805d2eb:	89 44 24 10          	mov    %eax,0x10(%esp)
 805d2ef:	89 c8                	mov    %ecx,%eax
  return LONGINT_OK;
 805d2f1:	31 c9                	xor    %ecx,%ecx
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805d2f3:	f7 e7                	mul    %edi
 805d2f5:	89 04 24             	mov    %eax,(%esp)
 805d2f8:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d2fc:	8b 44 24 10          	mov    0x10(%esp),%eax
 805d300:	01 44 24 04          	add    %eax,0x4(%esp)
 805d304:	e9 a1 f1 ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805d309:	8d 76 00             	lea    0x0(%esi),%esi
 805d30c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d310:	89 3c 24             	mov    %edi,(%esp)
 805d313:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d317:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d31b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d31f:	b9 c3 c1 00 00       	mov    $0xc1c3,%ecx
 805d324:	e8 7f 22 00 00       	call   805f5a8 <__afl_maybe_log>
 805d329:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d32d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d331:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d335:	8b 3c 24             	mov    (%esp),%edi
 805d338:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d33c:	89 fd                	mov    %edi,%ebp
 805d33e:	c1 fd 1f             	sar    $0x1f,%ebp
 805d341:	55                   	push   %ebp
 805d342:	57                   	push   %edi
 805d343:	6a ff                	push   $0xffffffff
 805d345:	6a ff                	push   $0xffffffff
 805d347:	e8 f4 5a 00 00       	call   8062e40 <__udivdi3>
 805d34c:	83 c4 10             	add    $0x10,%esp
 805d34f:	89 c3                	mov    %eax,%ebx
 805d351:	89 54 24 18          	mov    %edx,0x18(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805d355:	39 54 24 04          	cmp    %edx,0x4(%esp)
 805d359:	0f 87 6b 07 00 00    	ja     805daca <xstrtoumax+0x1daa>
 805d35f:	90                   	nop
 805d360:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d364:	89 3c 24             	mov    %edi,(%esp)
 805d367:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d36b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d36f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d373:	b9 81 d6 00 00       	mov    $0xd681,%ecx
 805d378:	e8 2b 22 00 00       	call   805f5a8 <__afl_maybe_log>
 805d37d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d381:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d385:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d389:	8b 3c 24             	mov    (%esp),%edi
 805d38c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d390:	72 6e                	jb     805d400 <xstrtoumax+0x16e0>
 805d392:	66 90                	xchg   %ax,%ax
 805d394:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d398:	89 3c 24             	mov    %edi,(%esp)
 805d39b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d39f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d3a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d3a7:	b9 62 28 00 00       	mov    $0x2862,%ecx
 805d3ac:	e8 f7 21 00 00       	call   805f5a8 <__afl_maybe_log>
 805d3b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d3b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d3b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d3bd:	8b 3c 24             	mov    (%esp),%edi
 805d3c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d3c4:	39 1c 24             	cmp    %ebx,(%esp)
 805d3c7:	0f 87 fd 06 00 00    	ja     805daca <xstrtoumax+0x1daa>
 805d3cd:	8d 76 00             	lea    0x0(%esi),%esi
 805d3d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d3d4:	89 3c 24             	mov    %edi,(%esp)
 805d3d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d3db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d3df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d3e3:	b9 f2 a9 00 00       	mov    $0xa9f2,%ecx
 805d3e8:	e8 bb 21 00 00       	call   805f5a8 <__afl_maybe_log>
 805d3ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d3f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d3f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d3f9:	8b 3c 24             	mov    (%esp),%edi
 805d3fc:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805d400:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d404:	89 3c 24             	mov    %edi,(%esp)
 805d407:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d40b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d40f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d413:	b9 13 13 00 00       	mov    $0x1313,%ecx
 805d418:	e8 8b 21 00 00       	call   805f5a8 <__afl_maybe_log>
 805d41d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d421:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d425:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d429:	8b 3c 24             	mov    (%esp),%edi
 805d42c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d430:	8b 44 24 04          	mov    0x4(%esp),%eax
 805d434:	8b 14 24             	mov    (%esp),%edx
 805d437:	0f af c7             	imul   %edi,%eax
 805d43a:	0f af d5             	imul   %ebp,%edx
 805d43d:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
 805d440:	8b 04 24             	mov    (%esp),%eax
 805d443:	f7 e7                	mul    %edi
 805d445:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d449:	01 4c 24 04          	add    %ecx,0x4(%esp)
 805d44d:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805d450:	8b 44 24 18          	mov    0x18(%esp),%eax
 805d454:	39 44 24 04          	cmp    %eax,0x4(%esp)
 805d458:	0f 86 80 0b 00 00    	jbe    805dfde <xstrtoumax+0x22be>
 805d45e:	66 90                	xchg   %ax,%ax
 805d460:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d464:	89 3c 24             	mov    %edi,(%esp)
 805d467:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d46b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d46f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d473:	b9 29 98 00 00       	mov    $0x9829,%ecx
 805d478:	e8 2b 21 00 00       	call   805f5a8 <__afl_maybe_log>
 805d47d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d481:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d485:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d489:	8b 3c 24             	mov    (%esp),%edi
 805d48c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
  return LONGINT_OK;
 805d490:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d494:	89 3c 24             	mov    %edi,(%esp)
 805d497:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d49b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d49f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d4a3:	b9 a6 89 00 00       	mov    $0x89a6,%ecx
 805d4a8:	e8 fb 20 00 00       	call   805f5a8 <__afl_maybe_log>
 805d4ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d4b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d4b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d4b9:	8b 3c 24             	mov    (%esp),%edi
 805d4bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d4c0:	31 ed                	xor    %ebp,%ebp
 805d4c2:	66 90                	xchg   %ax,%ax
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805d4c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d4c8:	89 3c 24             	mov    %edi,(%esp)
 805d4cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d4cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d4d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d4d7:	b9 8a 33 00 00       	mov    $0x338a,%ecx
 805d4dc:	e8 c7 20 00 00       	call   805f5a8 <__afl_maybe_log>
 805d4e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d4e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d4e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d4ed:	8b 3c 24             	mov    (%esp),%edi
 805d4f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d4f4:	83 cd 01             	or     $0x1,%ebp
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 805d4f7:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805d4fe:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805d505:	ff 
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805d506:	89 6c 24 10          	mov    %ebp,0x10(%esp)
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 805d50a:	b9 01 00 00 00       	mov    $0x1,%ecx
 805d50f:	90                   	nop
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805d510:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d514:	89 3c 24             	mov    %edi,(%esp)
 805d517:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d51b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d51f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d523:	b9 f8 59 00 00       	mov    $0x59f8,%ecx
 805d528:	e8 7b 20 00 00       	call   805f5a8 <__afl_maybe_log>
 805d52d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d531:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d535:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d539:	8b 3c 24             	mov    (%esp),%edi
 805d53c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d540:	0b 4c 24 10          	or     0x10(%esp),%ecx
          break;

        case 'G': /* giga or gibi */
        case 'g': /* 'g' is undocumented; for compatibility only */
          overflow = bkm_scale_by_power (&tmp, base, 3);
          break;
 805d544:	e9 61 ef ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805d549:	8d 76 00             	lea    0x0(%esi),%esi
 805d54c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d550:	89 3c 24             	mov    %edi,(%esp)
 805d553:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d557:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d55b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d55f:	b9 ec aa 00 00       	mov    $0xaaec,%ecx
 805d564:	e8 3f 20 00 00       	call   805f5a8 <__afl_maybe_log>
 805d569:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d56d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d571:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d575:	8b 3c 24             	mov    (%esp),%edi
 805d578:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d57c:	89 fd                	mov    %edi,%ebp
 805d57e:	c1 fd 1f             	sar    $0x1f,%ebp
 805d581:	55                   	push   %ebp
 805d582:	57                   	push   %edi
 805d583:	6a ff                	push   $0xffffffff
 805d585:	6a ff                	push   $0xffffffff
 805d587:	e8 b4 58 00 00       	call   8062e40 <__udivdi3>
 805d58c:	83 c4 10             	add    $0x10,%esp
 805d58f:	89 44 24 10          	mov    %eax,0x10(%esp)
 805d593:	89 54 24 1c          	mov    %edx,0x1c(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805d597:	39 54 24 04          	cmp    %edx,0x4(%esp)
 805d59b:	0f 87 fc 03 00 00    	ja     805d99d <xstrtoumax+0x1c7d>
 805d5a1:	8d 76 00             	lea    0x0(%esi),%esi
 805d5a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d5a8:	89 3c 24             	mov    %edi,(%esp)
 805d5ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d5af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d5b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d5b7:	b9 6d 8a 00 00       	mov    $0x8a6d,%ecx
 805d5bc:	e8 e7 1f 00 00       	call   805f5a8 <__afl_maybe_log>
 805d5c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d5c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d5c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d5cd:	8b 3c 24             	mov    (%esp),%edi
 805d5d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d5d4:	72 72                	jb     805d648 <xstrtoumax+0x1928>
 805d5d6:	66 90                	xchg   %ax,%ax
 805d5d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d5dc:	89 3c 24             	mov    %edi,(%esp)
 805d5df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d5e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d5e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d5eb:	b9 1e 27 00 00       	mov    $0x271e,%ecx
 805d5f0:	e8 b3 1f 00 00       	call   805f5a8 <__afl_maybe_log>
 805d5f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d5f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d5fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d601:	8b 3c 24             	mov    (%esp),%edi
 805d604:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d608:	8b 44 24 10          	mov    0x10(%esp),%eax
 805d60c:	39 04 24             	cmp    %eax,(%esp)
 805d60f:	0f 87 88 03 00 00    	ja     805d99d <xstrtoumax+0x1c7d>
 805d615:	8d 76 00             	lea    0x0(%esi),%esi
 805d618:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d61c:	89 3c 24             	mov    %edi,(%esp)
 805d61f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d623:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d627:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d62b:	b9 ff 1a 00 00       	mov    $0x1aff,%ecx
 805d630:	e8 73 1f 00 00       	call   805f5a8 <__afl_maybe_log>
 805d635:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d639:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d63d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d641:	8b 3c 24             	mov    (%esp),%edi
 805d644:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805d648:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d64c:	89 3c 24             	mov    %edi,(%esp)
 805d64f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d653:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d657:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d65b:	b9 8a 53 00 00       	mov    $0x538a,%ecx
 805d660:	e8 43 1f 00 00       	call   805f5a8 <__afl_maybe_log>
 805d665:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d669:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d66d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d671:	8b 3c 24             	mov    (%esp),%edi
 805d674:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d678:	8b 0c 24             	mov    (%esp),%ecx
 805d67b:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 805d67f:	89 ca                	mov    %ecx,%edx
 805d681:	89 d8                	mov    %ebx,%eax
 805d683:	0f af d5             	imul   %ebp,%edx
 805d686:	0f af c7             	imul   %edi,%eax
 805d689:	01 d0                	add    %edx,%eax
 805d68b:	89 c1                	mov    %eax,%ecx
 805d68d:	8b 04 24             	mov    (%esp),%eax
 805d690:	f7 e7                	mul    %edi
 805d692:	01 ca                	add    %ecx,%edx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805d694:	3b 54 24 1c          	cmp    0x1c(%esp),%edx
 805d698:	0f 86 ca 0a 00 00    	jbe    805e168 <xstrtoumax+0x2448>
 805d69e:	66 90                	xchg   %ax,%ax
 805d6a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d6a4:	89 3c 24             	mov    %edi,(%esp)
 805d6a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d6ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d6af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d6b3:	b9 ce 13 00 00       	mov    $0x13ce,%ecx
 805d6b8:	e8 eb 1e 00 00       	call   805f5a8 <__afl_maybe_log>
 805d6bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d6c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d6c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d6c9:	8b 3c 24             	mov    (%esp),%edi
 805d6cc:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
  return LONGINT_OK;
 805d6d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d6d4:	89 3c 24             	mov    %edi,(%esp)
 805d6d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d6db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d6df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d6e3:	b9 e2 f8 00 00       	mov    $0xf8e2,%ecx
 805d6e8:	e8 bb 1e 00 00       	call   805f5a8 <__afl_maybe_log>
 805d6ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d6f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d6f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d6f9:	8b 3c 24             	mov    (%esp),%edi
 805d6fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d700:	31 ff                	xor    %edi,%edi
 805d702:	66 90                	xchg   %ax,%ax
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805d704:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d708:	89 3c 24             	mov    %edi,(%esp)
 805d70b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d70f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d713:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d717:	b9 cf 10 00 00       	mov    $0x10cf,%ecx
 805d71c:	e8 87 1e 00 00       	call   805f5a8 <__afl_maybe_log>
 805d721:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d725:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d729:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d72d:	8b 3c 24             	mov    (%esp),%edi
 805d730:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d734:	83 cf 01             	or     $0x1,%edi
 805d737:	89 7c 24 18          	mov    %edi,0x18(%esp)
 805d73b:	90                   	nop
 805d73c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d740:	89 3c 24             	mov    %edi,(%esp)
 805d743:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d747:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d74b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d74f:	b9 81 04 00 00       	mov    $0x481,%ecx
 805d754:	e8 4f 1e 00 00       	call   805f5a8 <__afl_maybe_log>
 805d759:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d75d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d761:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d765:	8b 3c 24             	mov    (%esp),%edi
 805d768:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d76c:	83 4c 24 18 01       	orl    $0x1,0x18(%esp)
 805d771:	8d 76 00             	lea    0x0(%esi),%esi
 805d774:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d778:	89 3c 24             	mov    %edi,(%esp)
 805d77b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d77f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d783:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d787:	b9 71 9a 00 00       	mov    $0x9a71,%ecx
 805d78c:	e8 17 1e 00 00       	call   805f5a8 <__afl_maybe_log>
 805d791:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d795:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d799:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d79d:	8b 3c 24             	mov    (%esp),%edi
 805d7a0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d7a4:	83 4c 24 18 01       	orl    $0x1,0x18(%esp)
 805d7a9:	8d 76 00             	lea    0x0(%esi),%esi
 805d7ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d7b0:	89 3c 24             	mov    %edi,(%esp)
 805d7b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d7b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d7bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d7bf:	b9 a5 1b 00 00       	mov    $0x1ba5,%ecx
 805d7c4:	e8 df 1d 00 00       	call   805f5a8 <__afl_maybe_log>
 805d7c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d7cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d7d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d7d5:	8b 3c 24             	mov    (%esp),%edi
 805d7d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d7dc:	83 4c 24 18 01       	orl    $0x1,0x18(%esp)
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 805d7e1:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
      return LONGINT_OVERFLOW;
 805d7e8:	b9 01 00 00 00       	mov    $0x1,%ecx
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 805d7ed:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805d7f4:	ff 
 805d7f5:	8d 76 00             	lea    0x0(%esi),%esi
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805d7f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d7fc:	89 3c 24             	mov    %edi,(%esp)
 805d7ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d803:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d807:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d80b:	b9 51 c1 00 00       	mov    $0xc151,%ecx
 805d810:	e8 93 1d 00 00       	call   805f5a8 <__afl_maybe_log>
 805d815:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d819:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d81d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d821:	8b 3c 24             	mov    (%esp),%edi
 805d824:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d828:	0b 4c 24 18          	or     0x18(%esp),%ecx
          overflow = LONGINT_OK;
          break;

        case 'E': /* exa or exbi */
          overflow = bkm_scale_by_power (&tmp, base, 6);
          break;
 805d82c:	e9 79 ec ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805d831:	8d 76 00             	lea    0x0(%esi),%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805d834:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d838:	89 3c 24             	mov    %edi,(%esp)
 805d83b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d83f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d843:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d847:	b9 72 58 00 00       	mov    $0x5872,%ecx
 805d84c:	e8 57 1d 00 00       	call   805f5a8 <__afl_maybe_log>
 805d851:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d855:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d859:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d85d:	8b 3c 24             	mov    (%esp),%edi
 805d860:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d864:	81 7c 24 04 ff ff 3f 	cmpl   $0x3fffff,0x4(%esp)
 805d86b:	00 
 805d86c:	0f 87 e0 00 00 00    	ja     805d952 <xstrtoumax+0x1c32>
 805d872:	66 90                	xchg   %ax,%ax
 805d874:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d878:	89 3c 24             	mov    %edi,(%esp)
 805d87b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d87f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d883:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d887:	b9 59 e7 00 00       	mov    $0xe759,%ecx
 805d88c:	e8 17 1d 00 00       	call   805f5a8 <__afl_maybe_log>
 805d891:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d895:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d899:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d89d:	8b 3c 24             	mov    (%esp),%edi
 805d8a0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805d8a4:	8b 2c 24             	mov    (%esp),%ebp
 805d8a7:	8b 54 24 04          	mov    0x4(%esp),%edx
  return LONGINT_OK;
 805d8ab:	31 c9                	xor    %ecx,%ecx
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805d8ad:	0f a4 ea 0a          	shld   $0xa,%ebp,%edx
 805d8b1:	c1 e5 0a             	shl    $0xa,%ebp
 805d8b4:	89 2c 24             	mov    %ebp,(%esp)
 805d8b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d8bb:	e9 ea eb ff ff       	jmp    805c4aa <xstrtoumax+0x78a>

          switch (p[0][1])
            {
            case 'i':
              if (p[0][2] == 'B')
                suffixes += 2;
 805d8c0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d8c4:	89 3c 24             	mov    %edi,(%esp)
 805d8c7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d8cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d8cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d8d3:	b9 12 1d 00 00       	mov    $0x1d12,%ecx
 805d8d8:	e8 cb 1c 00 00       	call   805f5a8 <__afl_maybe_log>
 805d8dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d8e1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d8e5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d8e9:	8b 3c 24             	mov    (%esp),%edi
 805d8ec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d8f0:	8b 7c 24 08          	mov    0x8(%esp),%edi
 805d8f4:	80 7f 02 42          	cmpb   $0x42,0x2(%edi)
 805d8f8:	bf 00 04 00 00       	mov    $0x400,%edi
 805d8fd:	0f 94 c1             	sete   %cl
 805d900:	0f b6 e9             	movzbl %cl,%ebp
 805d903:	8d 44 2d 01          	lea    0x1(%ebp,%ebp,1),%eax
 805d907:	89 44 24 14          	mov    %eax,0x14(%esp)
 805d90b:	e9 b5 e9 ff ff       	jmp    805c2c5 <xstrtoumax+0x5a5>
              break;

            case 'B':
            case 'D': /* 'D' is obsolescent */
              base = 1000;
              suffixes++;
 805d910:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d914:	89 3c 24             	mov    %edi,(%esp)
 805d917:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d91b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d91f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d923:	b9 6d f1 00 00       	mov    $0xf16d,%ecx
 805d928:	e8 7b 1c 00 00       	call   805f5a8 <__afl_maybe_log>
 805d92d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d931:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d935:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d939:	8b 3c 24             	mov    (%esp),%edi
 805d93c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d940:	c7 44 24 14 02 00 00 	movl   $0x2,0x14(%esp)
 805d947:	00 
                suffixes += 2;
              break;

            case 'B':
            case 'D': /* 'D' is obsolescent */
              base = 1000;
 805d948:	bf e8 03 00 00       	mov    $0x3e8,%edi
 805d94d:	e9 73 e9 ff ff       	jmp    805c2c5 <xstrtoumax+0x5a5>
 805d952:	66 90                	xchg   %ax,%ax
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 805d954:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d958:	89 3c 24             	mov    %edi,(%esp)
 805d95b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d95f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d963:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d967:	b9 9e 6b 00 00       	mov    $0x6b9e,%ecx
 805d96c:	e8 37 1c 00 00       	call   805f5a8 <__afl_maybe_log>
 805d971:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d975:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d979:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d97d:	8b 3c 24             	mov    (%esp),%edi
 805d980:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d984:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805d98b:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805d992:	ff 
      return LONGINT_OVERFLOW;
 805d993:	b9 01 00 00 00       	mov    $0x1,%ecx
 805d998:	e9 0d eb ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805d99d:	8d 76 00             	lea    0x0(%esi),%esi
 805d9a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d9a4:	89 3c 24             	mov    %edi,(%esp)
 805d9a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d9ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d9af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d9b3:	b9 ef 8c 00 00       	mov    $0x8cef,%ecx
 805d9b8:	e8 eb 1b 00 00       	call   805f5a8 <__afl_maybe_log>
 805d9bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d9c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805d9c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805d9c9:	8b 3c 24             	mov    (%esp),%edi
 805d9cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805d9d0:	bf 01 00 00 00       	mov    $0x1,%edi
 805d9d5:	e9 28 fd ff ff       	jmp    805d702 <xstrtoumax+0x19e2>
 805d9da:	66 90                	xchg   %ax,%ax
 805d9dc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805d9e0:	89 3c 24             	mov    %edi,(%esp)
 805d9e3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805d9e7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805d9eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805d9ef:	b9 0e aa 00 00       	mov    $0xaa0e,%ecx
 805d9f4:	e8 af 1b 00 00       	call   805f5a8 <__afl_maybe_log>
 805d9f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805d9fd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805da01:	8b 54 24 04          	mov    0x4(%esp),%edx
 805da05:	8b 3c 24             	mov    (%esp),%edi
 805da08:	8d 64 24 10          	lea    0x10(%esp),%esp
 805da0c:	bf 01 00 00 00       	mov    $0x1,%edi
 805da11:	e9 90 f2 ff ff       	jmp    805cca6 <xstrtoumax+0xf86>
 805da16:	66 90                	xchg   %ax,%ax
 805da18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805da1c:	89 3c 24             	mov    %edi,(%esp)
 805da1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805da23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805da27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805da2b:	b9 64 14 00 00       	mov    $0x1464,%ecx
 805da30:	e8 73 1b 00 00       	call   805f5a8 <__afl_maybe_log>
 805da35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805da39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805da3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805da41:	8b 3c 24             	mov    (%esp),%edi
 805da44:	8d 64 24 10          	lea    0x10(%esp),%esp
 805da48:	b9 01 00 00 00       	mov    $0x1,%ecx
 805da4d:	e9 54 f0 ff ff       	jmp    805caa6 <xstrtoumax+0xd86>
 805da52:	66 90                	xchg   %ax,%ax
 805da54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805da58:	89 3c 24             	mov    %edi,(%esp)
 805da5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805da5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805da63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805da67:	b9 59 34 00 00       	mov    $0x3459,%ecx
 805da6c:	e8 37 1b 00 00       	call   805f5a8 <__afl_maybe_log>
 805da71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805da75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805da79:	8b 54 24 04          	mov    0x4(%esp),%edx
 805da7d:	8b 3c 24             	mov    (%esp),%edi
 805da80:	8d 64 24 10          	lea    0x10(%esp),%esp
 805da84:	b9 01 00 00 00       	mov    $0x1,%ecx
 805da89:	e9 40 ed ff ff       	jmp    805c7ce <xstrtoumax+0xaae>
 805da8e:	66 90                	xchg   %ax,%ax
 805da90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805da94:	89 3c 24             	mov    %edi,(%esp)
 805da97:	89 54 24 04          	mov    %edx,0x4(%esp)
 805da9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805da9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805daa3:	b9 86 a6 00 00       	mov    $0xa686,%ecx
 805daa8:	e8 fb 1a 00 00       	call   805f5a8 <__afl_maybe_log>
 805daad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dab1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dab5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dab9:	8b 3c 24             	mov    (%esp),%edi
 805dabc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dac0:	bd 01 00 00 00       	mov    $0x1,%ebp
 805dac5:	e9 2c f4 ff ff       	jmp    805cef6 <xstrtoumax+0x11d6>
 805daca:	66 90                	xchg   %ax,%ax
 805dacc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dad0:	89 3c 24             	mov    %edi,(%esp)
 805dad3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dad7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dadb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dadf:	b9 c4 fd 00 00       	mov    $0xfdc4,%ecx
 805dae4:	e8 bf 1a 00 00       	call   805f5a8 <__afl_maybe_log>
 805dae9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805daed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805daf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805daf5:	8b 3c 24             	mov    (%esp),%edi
 805daf8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dafc:	bd 01 00 00 00       	mov    $0x1,%ebp
 805db01:	e9 bc f9 ff ff       	jmp    805d4c2 <xstrtoumax+0x17a2>
 805db06:	66 90                	xchg   %ax,%ax
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805db08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805db0c:	89 3c 24             	mov    %edi,(%esp)
 805db0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805db13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805db17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805db1b:	b9 9f fc 00 00       	mov    $0xfc9f,%ecx
 805db20:	e8 83 1a 00 00       	call   805f5a8 <__afl_maybe_log>
 805db25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805db29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805db2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805db31:	8b 3c 24             	mov    (%esp),%edi
 805db34:	8d 64 24 10          	lea    0x10(%esp),%esp
 805db38:	b9 01 00 00 00       	mov    $0x1,%ecx
    {
      *x = STRTOL_T_MAXIMUM;
 805db3d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805db44:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805db4b:	ff 
          break;

        case 'M': /* mega or mebi */
        case 'm': /* 'm' is undocumented; for compatibility only */
          overflow = bkm_scale_by_power (&tmp, base, 2);
          break;
 805db4c:	e9 59 e9 ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805db51:	8d 76 00             	lea    0x0(%esi),%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805db54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805db58:	89 3c 24             	mov    %edi,(%esp)
 805db5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805db5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805db63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805db67:	b9 87 f0 00 00       	mov    $0xf087,%ecx
 805db6c:	e8 37 1a 00 00       	call   805f5a8 <__afl_maybe_log>
 805db71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805db75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805db79:	8b 54 24 04          	mov    0x4(%esp),%edx
 805db7d:	8b 3c 24             	mov    (%esp),%edi
 805db80:	8d 64 24 10          	lea    0x10(%esp),%esp
 805db84:	72 72                	jb     805dbf8 <xstrtoumax+0x1ed8>
 805db86:	66 90                	xchg   %ax,%ax
 805db88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805db8c:	89 3c 24             	mov    %edi,(%esp)
 805db8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805db93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805db97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805db9b:	b9 b8 b0 00 00       	mov    $0xb0b8,%ecx
 805dba0:	e8 03 1a 00 00       	call   805f5a8 <__afl_maybe_log>
 805dba5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dba9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dbad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dbb1:	8b 3c 24             	mov    (%esp),%edi
 805dbb4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dbb8:	8b 44 24 10          	mov    0x10(%esp),%eax
 805dbbc:	39 04 24             	cmp    %eax,(%esp)
 805dbbf:	0f 87 ff f2 ff ff    	ja     805cec4 <xstrtoumax+0x11a4>
 805dbc5:	8d 76 00             	lea    0x0(%esi),%esi
 805dbc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dbcc:	89 3c 24             	mov    %edi,(%esp)
 805dbcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dbd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dbd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dbdb:	b9 95 44 00 00       	mov    $0x4495,%ecx
 805dbe0:	e8 c3 19 00 00       	call   805f5a8 <__afl_maybe_log>
 805dbe5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dbe9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dbed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dbf1:	8b 3c 24             	mov    (%esp),%edi
 805dbf4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805dbf8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dbfc:	89 3c 24             	mov    %edi,(%esp)
 805dbff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dc03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dc07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dc0b:	b9 fb bf 00 00       	mov    $0xbffb,%ecx
 805dc10:	e8 93 19 00 00       	call   805f5a8 <__afl_maybe_log>
 805dc15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dc19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dc1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dc21:	8b 3c 24             	mov    (%esp),%edi
 805dc24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dc28:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805dc2c:	8b 04 24             	mov    (%esp),%eax
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805dc2f:	31 db                	xor    %ebx,%ebx
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805dc31:	0f af c5             	imul   %ebp,%eax
 805dc34:	0f af cf             	imul   %edi,%ecx
 805dc37:	01 c1                	add    %eax,%ecx
 805dc39:	8b 04 24             	mov    (%esp),%eax
 805dc3c:	f7 e7                	mul    %edi
 805dc3e:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dc42:	01 4c 24 04          	add    %ecx,0x4(%esp)
 805dc46:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805dc49:	8b 44 24 18          	mov    0x18(%esp),%eax
 805dc4d:	39 44 24 04          	cmp    %eax,0x4(%esp)
 805dc51:	0f 87 d6 f2 ff ff    	ja     805cf2d <xstrtoumax+0x120d>
 805dc57:	90                   	nop
 805dc58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dc5c:	89 3c 24             	mov    %edi,(%esp)
 805dc5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dc63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dc67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dc6b:	b9 01 bd 00 00       	mov    $0xbd01,%ecx
 805dc70:	e8 33 19 00 00       	call   805f5a8 <__afl_maybe_log>
 805dc75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dc79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dc7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dc81:	8b 3c 24             	mov    (%esp),%edi
 805dc84:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dc88:	72 72                	jb     805dcfc <xstrtoumax+0x1fdc>
 805dc8a:	66 90                	xchg   %ax,%ax
 805dc8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dc90:	89 3c 24             	mov    %edi,(%esp)
 805dc93:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dc97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dc9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dc9f:	b9 03 29 00 00       	mov    $0x2903,%ecx
 805dca4:	e8 ff 18 00 00       	call   805f5a8 <__afl_maybe_log>
 805dca9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dcad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dcb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dcb5:	8b 3c 24             	mov    (%esp),%edi
 805dcb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dcbc:	8b 4c 24 10          	mov    0x10(%esp),%ecx
 805dcc0:	39 0c 24             	cmp    %ecx,(%esp)
 805dcc3:	0f 87 64 f2 ff ff    	ja     805cf2d <xstrtoumax+0x120d>
 805dcc9:	8d 76 00             	lea    0x0(%esi),%esi
 805dccc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dcd0:	89 3c 24             	mov    %edi,(%esp)
 805dcd3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dcd7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dcdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dcdf:	b9 a6 e8 00 00       	mov    $0xe8a6,%ecx
 805dce4:	e8 bf 18 00 00       	call   805f5a8 <__afl_maybe_log>
 805dce9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dced:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dcf1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dcf5:	8b 3c 24             	mov    (%esp),%edi
 805dcf8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805dcfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dd00:	89 3c 24             	mov    %edi,(%esp)
 805dd03:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dd0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dd0f:	b9 12 a2 00 00       	mov    $0xa212,%ecx
 805dd14:	e8 8f 18 00 00       	call   805f5a8 <__afl_maybe_log>
 805dd19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dd1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dd21:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dd25:	8b 3c 24             	mov    (%esp),%edi
 805dd28:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dd2c:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805dd30:	8b 04 24             	mov    (%esp),%eax
 805dd33:	0f af cf             	imul   %edi,%ecx
 805dd36:	0f af c5             	imul   %ebp,%eax
 805dd39:	01 c1                	add    %eax,%ecx
 805dd3b:	8b 04 24             	mov    (%esp),%eax
 805dd3e:	f7 e7                	mul    %edi
 805dd40:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd44:	01 4c 24 04          	add    %ecx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805dd48:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805dd4c:	39 4c 24 18          	cmp    %ecx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805dd50:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805dd53:	0f 82 84 ef ff ff    	jb     805ccdd <xstrtoumax+0xfbd>
 805dd59:	8d 76 00             	lea    0x0(%esi),%esi
 805dd5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dd60:	89 3c 24             	mov    %edi,(%esp)
 805dd63:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dd6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dd6f:	b9 4b 96 00 00       	mov    $0x964b,%ecx
 805dd74:	e8 2f 18 00 00       	call   805f5a8 <__afl_maybe_log>
 805dd79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dd7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dd81:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dd85:	8b 3c 24             	mov    (%esp),%edi
 805dd88:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dd8c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dd90:	89 3c 24             	mov    %edi,(%esp)
 805dd93:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dd97:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dd9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dd9f:	b9 00 e7 00 00       	mov    $0xe700,%ecx
 805dda4:	e8 ff 17 00 00       	call   805f5a8 <__afl_maybe_log>
 805dda9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ddad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ddb1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ddb5:	8b 3c 24             	mov    (%esp),%edi
 805ddb8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ddbc:	77 72                	ja     805de30 <xstrtoumax+0x2110>
 805ddbe:	66 90                	xchg   %ax,%ax
 805ddc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ddc4:	89 3c 24             	mov    %edi,(%esp)
 805ddc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ddcb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ddcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ddd3:	b9 f1 d6 00 00       	mov    $0xd6f1,%ecx
 805ddd8:	e8 cb 17 00 00       	call   805f5a8 <__afl_maybe_log>
 805dddd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dde1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dde5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dde9:	8b 3c 24             	mov    (%esp),%edi
 805ddec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ddf0:	8b 14 24             	mov    (%esp),%edx
 805ddf3:	39 54 24 10          	cmp    %edx,0x10(%esp)
 805ddf7:	0f 82 e0 ee ff ff    	jb     805ccdd <xstrtoumax+0xfbd>
 805ddfd:	8d 76 00             	lea    0x0(%esi),%esi
 805de00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805de04:	89 3c 24             	mov    %edi,(%esp)
 805de07:	89 54 24 04          	mov    %edx,0x4(%esp)
 805de0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805de0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805de13:	b9 f1 3d 00 00       	mov    $0x3df1,%ecx
 805de18:	e8 8b 17 00 00       	call   805f5a8 <__afl_maybe_log>
 805de1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805de21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805de25:	8b 54 24 04          	mov    0x4(%esp),%edx
 805de29:	8b 3c 24             	mov    (%esp),%edi
 805de2c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805de30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805de34:	89 3c 24             	mov    %edi,(%esp)
 805de37:	89 54 24 04          	mov    %edx,0x4(%esp)
 805de3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805de3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805de43:	b9 96 23 00 00       	mov    $0x2396,%ecx
 805de48:	e8 5b 17 00 00       	call   805f5a8 <__afl_maybe_log>
 805de4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805de51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805de55:	8b 54 24 04          	mov    0x4(%esp),%edx
 805de59:	8b 3c 24             	mov    (%esp),%edi
 805de5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805de60:	8b 04 24             	mov    (%esp),%eax
 805de63:	0f af c5             	imul   %ebp,%eax
 805de66:	89 c1                	mov    %eax,%ecx
 805de68:	8b 44 24 04          	mov    0x4(%esp),%eax
 805de6c:	0f af c7             	imul   %edi,%eax
 805de6f:	01 c1                	add    %eax,%ecx
 805de71:	8b 04 24             	mov    (%esp),%eax
 805de74:	f7 e7                	mul    %edi
 805de76:	89 54 24 04          	mov    %edx,0x4(%esp)
 805de7a:	01 4c 24 04          	add    %ecx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805de7e:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805de82:	39 4c 24 18          	cmp    %ecx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805de86:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805de89:	0f 83 81 00 00 00    	jae    805df10 <xstrtoumax+0x21f0>
 805de8f:	90                   	nop
 805de90:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805de94:	89 3c 24             	mov    %edi,(%esp)
 805de97:	89 54 24 04          	mov    %edx,0x4(%esp)
 805de9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805de9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dea3:	b9 86 38 00 00       	mov    $0x3886,%ecx
 805dea8:	e8 fb 16 00 00       	call   805f5a8 <__afl_maybe_log>
 805dead:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805deb1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805deb5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805deb9:	8b 3c 24             	mov    (%esp),%edi
 805debc:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 805dec0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dec4:	89 3c 24             	mov    %edi,(%esp)
 805dec7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805decb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805decf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ded3:	b9 cc 9b 00 00       	mov    $0x9bcc,%ecx
 805ded8:	e8 cb 16 00 00       	call   805f5a8 <__afl_maybe_log>
 805dedd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dee1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dee5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dee9:	8b 3c 24             	mov    (%esp),%edi
 805deec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805def0:	b9 01 00 00 00       	mov    $0x1,%ecx
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 805def5:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805defc:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805df03:	ff 
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805df04:	09 d9                	or     %ebx,%ecx
 805df06:	e9 9f e5 ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805df0b:	90                   	nop
 805df0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805df10:	77 72                	ja     805df84 <xstrtoumax+0x2264>
 805df12:	66 90                	xchg   %ax,%ax
 805df14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805df18:	89 3c 24             	mov    %edi,(%esp)
 805df1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805df1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805df23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805df27:	b9 54 8c 00 00       	mov    $0x8c54,%ecx
 805df2c:	e8 77 16 00 00       	call   805f5a8 <__afl_maybe_log>
 805df31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805df35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805df39:	8b 54 24 04          	mov    0x4(%esp),%edx
 805df3d:	8b 3c 24             	mov    (%esp),%edi
 805df40:	8d 64 24 10          	lea    0x10(%esp),%esp
 805df44:	8b 04 24             	mov    (%esp),%eax
 805df47:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805df4b:	0f 82 6f ff ff ff    	jb     805dec0 <xstrtoumax+0x21a0>
 805df51:	8d 76 00             	lea    0x0(%esi),%esi
 805df54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805df58:	89 3c 24             	mov    %edi,(%esp)
 805df5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805df5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805df63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805df67:	b9 59 d4 00 00       	mov    $0xd459,%ecx
 805df6c:	e8 37 16 00 00       	call   805f5a8 <__afl_maybe_log>
 805df71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805df75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805df79:	8b 54 24 04          	mov    0x4(%esp),%edx
 805df7d:	8b 3c 24             	mov    (%esp),%edi
 805df80:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805df84:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805df88:	89 3c 24             	mov    %edi,(%esp)
 805df8b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805df8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805df93:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805df97:	b9 ca 10 00 00       	mov    $0x10ca,%ecx
 805df9c:	e8 07 16 00 00       	call   805f5a8 <__afl_maybe_log>
 805dfa1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805dfa5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805dfa9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805dfad:	8b 3c 24             	mov    (%esp),%edi
 805dfb0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805dfb4:	8b 14 24             	mov    (%esp),%edx
 805dfb7:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805dfbb:	89 e8                	mov    %ebp,%eax
 805dfbd:	0f af c2             	imul   %edx,%eax
 805dfc0:	0f af cf             	imul   %edi,%ecx
 805dfc3:	01 c1                	add    %eax,%ecx
 805dfc5:	8b 04 24             	mov    (%esp),%eax
 805dfc8:	f7 e7                	mul    %edi
 805dfca:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dfce:	01 4c 24 04          	add    %ecx,0x4(%esp)
  return LONGINT_OK;
 805dfd2:	31 c9                	xor    %ecx,%ecx
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805dfd4:	89 04 24             	mov    %eax,(%esp)
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805dfd7:	09 d9                	or     %ebx,%ecx
 805dfd9:	e9 cc e4 ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805dfde:	66 90                	xchg   %ax,%ax
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805dfe0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805dfe4:	89 3c 24             	mov    %edi,(%esp)
 805dfe7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805dfeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805dfef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805dff3:	b9 7b 58 00 00       	mov    $0x587b,%ecx
 805dff8:	e8 ab 15 00 00       	call   805f5a8 <__afl_maybe_log>
 805dffd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e001:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e005:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e009:	8b 3c 24             	mov    (%esp),%edi
 805e00c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e010:	72 6e                	jb     805e080 <xstrtoumax+0x2360>
 805e012:	66 90                	xchg   %ax,%ax
 805e014:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e018:	89 3c 24             	mov    %edi,(%esp)
 805e01b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e01f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e023:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e027:	b9 64 03 00 00       	mov    $0x364,%ecx
 805e02c:	e8 77 15 00 00       	call   805f5a8 <__afl_maybe_log>
 805e031:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e035:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e039:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e03d:	8b 3c 24             	mov    (%esp),%edi
 805e040:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e044:	39 1c 24             	cmp    %ebx,(%esp)
 805e047:	0f 87 43 f4 ff ff    	ja     805d490 <xstrtoumax+0x1770>
 805e04d:	8d 76 00             	lea    0x0(%esi),%esi
 805e050:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e054:	89 3c 24             	mov    %edi,(%esp)
 805e057:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e05b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e05f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e063:	b9 d5 d6 00 00       	mov    $0xd6d5,%ecx
 805e068:	e8 3b 15 00 00       	call   805f5a8 <__afl_maybe_log>
 805e06d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e071:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e075:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e079:	8b 3c 24             	mov    (%esp),%edi
 805e07c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e080:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e084:	89 3c 24             	mov    %edi,(%esp)
 805e087:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e08b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e08f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e093:	b9 76 e8 00 00       	mov    $0xe876,%ecx
 805e098:	e8 0b 15 00 00       	call   805f5a8 <__afl_maybe_log>
 805e09d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e0a1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e0a5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e0a9:	8b 3c 24             	mov    (%esp),%edi
 805e0ac:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e0b0:	8b 04 24             	mov    (%esp),%eax
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805e0b3:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 805e0ba:	00 
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e0bb:	0f af c5             	imul   %ebp,%eax
 805e0be:	89 c1                	mov    %eax,%ecx
 805e0c0:	8b 44 24 04          	mov    0x4(%esp),%eax
 805e0c4:	0f af c7             	imul   %edi,%eax
 805e0c7:	01 c1                	add    %eax,%ecx
 805e0c9:	8b 04 24             	mov    (%esp),%eax
 805e0cc:	f7 e7                	mul    %edi
 805e0ce:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e0d2:	01 4c 24 04          	add    %ecx,0x4(%esp)
 805e0d6:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e0d9:	8b 44 24 18          	mov    0x18(%esp),%eax
 805e0dd:	39 44 24 04          	cmp    %eax,0x4(%esp)
 805e0e1:	0f 86 b1 04 00 00    	jbe    805e598 <xstrtoumax+0x2878>
 805e0e7:	90                   	nop
 805e0e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e0ec:	89 3c 24             	mov    %edi,(%esp)
 805e0ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e0f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e0f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e0fb:	b9 8b 7f 00 00       	mov    $0x7f8b,%ecx
 805e100:	e8 a3 14 00 00       	call   805f5a8 <__afl_maybe_log>
 805e105:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e109:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e10d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e111:	8b 3c 24             	mov    (%esp),%edi
 805e114:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
 805e118:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e11c:	89 3c 24             	mov    %edi,(%esp)
 805e11f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e123:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e127:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e12b:	b9 90 87 00 00       	mov    $0x8790,%ecx
 805e130:	e8 73 14 00 00       	call   805f5a8 <__afl_maybe_log>
 805e135:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e139:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e13d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e141:	8b 3c 24             	mov    (%esp),%edi
 805e144:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e148:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805e14f:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805e156:	ff 
      return LONGINT_OVERFLOW;
 805e157:	b9 01 00 00 00       	mov    $0x1,%ecx
 805e15c:	e9 ae f3 ff ff       	jmp    805d50f <xstrtoumax+0x17ef>
 805e161:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e168:	72 6e                	jb     805e1d8 <xstrtoumax+0x24b8>
 805e16a:	66 90                	xchg   %ax,%ax
 805e16c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e170:	89 3c 24             	mov    %edi,(%esp)
 805e173:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e177:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e17b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e17f:	b9 e9 c7 00 00       	mov    $0xc7e9,%ecx
 805e184:	e8 1f 14 00 00       	call   805f5a8 <__afl_maybe_log>
 805e189:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e18d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e191:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e195:	8b 3c 24             	mov    (%esp),%edi
 805e198:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e19c:	3b 44 24 10          	cmp    0x10(%esp),%eax
 805e1a0:	0f 87 2a f5 ff ff    	ja     805d6d0 <xstrtoumax+0x19b0>
 805e1a6:	66 90                	xchg   %ax,%ax
 805e1a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e1ac:	89 3c 24             	mov    %edi,(%esp)
 805e1af:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e1b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e1b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e1bb:	b9 1e 1f 00 00       	mov    $0x1f1e,%ecx
 805e1c0:	e8 e3 13 00 00       	call   805f5a8 <__afl_maybe_log>
 805e1c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e1c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e1cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e1d1:	8b 3c 24             	mov    (%esp),%edi
 805e1d4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e1d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e1dc:	89 3c 24             	mov    %edi,(%esp)
 805e1df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e1e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e1e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e1eb:	b9 c8 90 00 00       	mov    $0x90c8,%ecx
 805e1f0:	e8 b3 13 00 00       	call   805f5a8 <__afl_maybe_log>
 805e1f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e1f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e1fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e201:	8b 3c 24             	mov    (%esp),%edi
 805e204:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e208:	89 d3                	mov    %edx,%ebx
 805e20a:	89 e9                	mov    %ebp,%ecx
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805e20c:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 805e213:	00 
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e214:	0f af c8             	imul   %eax,%ecx
 805e217:	0f af df             	imul   %edi,%ebx
 805e21a:	f7 e7                	mul    %edi
 805e21c:	01 d9                	add    %ebx,%ecx
 805e21e:	01 ca                	add    %ecx,%edx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e220:	3b 54 24 1c          	cmp    0x1c(%esp),%edx
 805e224:	0f 87 11 f5 ff ff    	ja     805d73b <xstrtoumax+0x1a1b>
 805e22a:	66 90                	xchg   %ax,%ax
 805e22c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e230:	89 3c 24             	mov    %edi,(%esp)
 805e233:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e237:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e23b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e23f:	b9 51 ea 00 00       	mov    $0xea51,%ecx
 805e244:	e8 5f 13 00 00       	call   805f5a8 <__afl_maybe_log>
 805e249:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e24d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e251:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e255:	8b 3c 24             	mov    (%esp),%edi
 805e258:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e25c:	72 6e                	jb     805e2cc <xstrtoumax+0x25ac>
 805e25e:	66 90                	xchg   %ax,%ax
 805e260:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e264:	89 3c 24             	mov    %edi,(%esp)
 805e267:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e26b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e26f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e273:	b9 0f 64 00 00       	mov    $0x640f,%ecx
 805e278:	e8 2b 13 00 00       	call   805f5a8 <__afl_maybe_log>
 805e27d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e281:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e285:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e289:	8b 3c 24             	mov    (%esp),%edi
 805e28c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e290:	3b 44 24 10          	cmp    0x10(%esp),%eax
 805e294:	0f 87 a1 f4 ff ff    	ja     805d73b <xstrtoumax+0x1a1b>
 805e29a:	66 90                	xchg   %ax,%ax
 805e29c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e2a0:	89 3c 24             	mov    %edi,(%esp)
 805e2a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e2a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e2ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e2af:	b9 73 fe 00 00       	mov    $0xfe73,%ecx
 805e2b4:	e8 ef 12 00 00       	call   805f5a8 <__afl_maybe_log>
 805e2b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e2bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e2c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e2c5:	8b 3c 24             	mov    (%esp),%edi
 805e2c8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e2cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e2d0:	89 3c 24             	mov    %edi,(%esp)
 805e2d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e2d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e2db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e2df:	b9 72 12 00 00       	mov    $0x1272,%ecx
 805e2e4:	e8 bf 12 00 00       	call   805f5a8 <__afl_maybe_log>
 805e2e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e2ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e2f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e2f5:	8b 3c 24             	mov    (%esp),%edi
 805e2f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e2fc:	89 d1                	mov    %edx,%ecx
 805e2fe:	89 eb                	mov    %ebp,%ebx
 805e300:	0f af d8             	imul   %eax,%ebx
 805e303:	0f af cf             	imul   %edi,%ecx
 805e306:	f7 e7                	mul    %edi
 805e308:	01 cb                	add    %ecx,%ebx
 805e30a:	01 da                	add    %ebx,%edx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e30c:	3b 54 24 1c          	cmp    0x1c(%esp),%edx
 805e310:	0f 87 5b f4 ff ff    	ja     805d771 <xstrtoumax+0x1a51>
 805e316:	66 90                	xchg   %ax,%ax
 805e318:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e31c:	89 3c 24             	mov    %edi,(%esp)
 805e31f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e323:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e327:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e32b:	b9 09 5c 00 00       	mov    $0x5c09,%ecx
 805e330:	e8 73 12 00 00       	call   805f5a8 <__afl_maybe_log>
 805e335:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e339:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e33d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e341:	8b 3c 24             	mov    (%esp),%edi
 805e344:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e348:	72 6e                	jb     805e3b8 <xstrtoumax+0x2698>
 805e34a:	66 90                	xchg   %ax,%ax
 805e34c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e350:	89 3c 24             	mov    %edi,(%esp)
 805e353:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e357:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e35b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e35f:	b9 73 db 00 00       	mov    $0xdb73,%ecx
 805e364:	e8 3f 12 00 00       	call   805f5a8 <__afl_maybe_log>
 805e369:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e36d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e371:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e375:	8b 3c 24             	mov    (%esp),%edi
 805e378:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e37c:	3b 44 24 10          	cmp    0x10(%esp),%eax
 805e380:	0f 87 eb f3 ff ff    	ja     805d771 <xstrtoumax+0x1a51>
 805e386:	66 90                	xchg   %ax,%ax
 805e388:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e38c:	89 3c 24             	mov    %edi,(%esp)
 805e38f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e393:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e397:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e39b:	b9 6e 03 00 00       	mov    $0x36e,%ecx
 805e3a0:	e8 03 12 00 00       	call   805f5a8 <__afl_maybe_log>
 805e3a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e3a9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e3ad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e3b1:	8b 3c 24             	mov    (%esp),%edi
 805e3b4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e3b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e3bc:	89 3c 24             	mov    %edi,(%esp)
 805e3bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e3c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e3c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e3cb:	b9 d0 a5 00 00       	mov    $0xa5d0,%ecx
 805e3d0:	e8 d3 11 00 00       	call   805f5a8 <__afl_maybe_log>
 805e3d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e3d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e3dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e3e1:	8b 3c 24             	mov    (%esp),%edi
 805e3e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e3e8:	89 d1                	mov    %edx,%ecx
 805e3ea:	89 eb                	mov    %ebp,%ebx
 805e3ec:	0f af cf             	imul   %edi,%ecx
 805e3ef:	0f af d8             	imul   %eax,%ebx
 805e3f2:	f7 e7                	mul    %edi
 805e3f4:	01 cb                	add    %ecx,%ebx
 805e3f6:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e3fa:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e3fe:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805e402:	39 4c 24 1c          	cmp    %ecx,0x1c(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e406:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e409:	0f 82 9a f3 ff ff    	jb     805d7a9 <xstrtoumax+0x1a89>
 805e40f:	90                   	nop
 805e410:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e414:	89 3c 24             	mov    %edi,(%esp)
 805e417:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e41b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e41f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e423:	b9 1a 60 00 00       	mov    $0x601a,%ecx
 805e428:	e8 7b 11 00 00       	call   805f5a8 <__afl_maybe_log>
 805e42d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e431:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e435:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e439:	8b 3c 24             	mov    (%esp),%edi
 805e43c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e440:	77 72                	ja     805e4b4 <xstrtoumax+0x2794>
 805e442:	66 90                	xchg   %ax,%ax
 805e444:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e448:	89 3c 24             	mov    %edi,(%esp)
 805e44b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e44f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e453:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e457:	b9 b4 eb 00 00       	mov    $0xebb4,%ecx
 805e45c:	e8 47 11 00 00       	call   805f5a8 <__afl_maybe_log>
 805e461:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e465:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e469:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e46d:	8b 3c 24             	mov    (%esp),%edi
 805e470:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e474:	8b 0c 24             	mov    (%esp),%ecx
 805e477:	39 4c 24 10          	cmp    %ecx,0x10(%esp)
 805e47b:	0f 82 28 f3 ff ff    	jb     805d7a9 <xstrtoumax+0x1a89>
 805e481:	8d 76 00             	lea    0x0(%esi),%esi
 805e484:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e488:	89 3c 24             	mov    %edi,(%esp)
 805e48b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e48f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e493:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e497:	b9 d4 02 00 00       	mov    $0x2d4,%ecx
 805e49c:	e8 07 11 00 00       	call   805f5a8 <__afl_maybe_log>
 805e4a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e4a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e4a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e4ad:	8b 3c 24             	mov    (%esp),%edi
 805e4b0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e4b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e4b8:	89 3c 24             	mov    %edi,(%esp)
 805e4bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e4bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e4c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e4c7:	b9 f0 d8 00 00       	mov    $0xd8f0,%ecx
 805e4cc:	e8 d7 10 00 00       	call   805f5a8 <__afl_maybe_log>
 805e4d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e4d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e4d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e4dd:	8b 3c 24             	mov    (%esp),%edi
 805e4e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e4e4:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 805e4e8:	8b 0c 24             	mov    (%esp),%ecx
 805e4eb:	89 e8                	mov    %ebp,%eax
 805e4ed:	89 da                	mov    %ebx,%edx
 805e4ef:	0f af c1             	imul   %ecx,%eax
 805e4f2:	0f af d7             	imul   %edi,%edx
 805e4f5:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
 805e4f8:	8b 04 24             	mov    (%esp),%eax
 805e4fb:	f7 e7                	mul    %edi
 805e4fd:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e501:	01 4c 24 04          	add    %ecx,0x4(%esp)
 805e505:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e508:	8b 44 24 04          	mov    0x4(%esp),%eax
 805e50c:	3b 44 24 1c          	cmp    0x1c(%esp),%eax
 805e510:	0f 86 4c 01 00 00    	jbe    805e662 <xstrtoumax+0x2942>
 805e516:	66 90                	xchg   %ax,%ax
 805e518:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e51c:	89 3c 24             	mov    %edi,(%esp)
 805e51f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e523:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e527:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e52b:	b9 28 4c 00 00       	mov    $0x4c28,%ecx
 805e530:	e8 73 10 00 00       	call   805f5a8 <__afl_maybe_log>
 805e535:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e539:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e53d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e541:	8b 3c 24             	mov    (%esp),%edi
 805e544:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
 805e548:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e54c:	89 3c 24             	mov    %edi,(%esp)
 805e54f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e553:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e557:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e55b:	b9 df 36 00 00       	mov    $0x36df,%ecx
 805e560:	e8 43 10 00 00       	call   805f5a8 <__afl_maybe_log>
 805e565:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e569:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e56d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e571:	8b 3c 24             	mov    (%esp),%edi
 805e574:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e578:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805e57f:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805e586:	ff 
      return LONGINT_OVERFLOW;
 805e587:	b9 01 00 00 00       	mov    $0x1,%ecx
 805e58c:	e9 64 f2 ff ff       	jmp    805d7f5 <xstrtoumax+0x1ad5>
 805e591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e598:	72 6e                	jb     805e608 <xstrtoumax+0x28e8>
 805e59a:	66 90                	xchg   %ax,%ax
 805e59c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e5a0:	89 3c 24             	mov    %edi,(%esp)
 805e5a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e5a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e5ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e5af:	b9 a7 c7 00 00       	mov    $0xc7a7,%ecx
 805e5b4:	e8 ef 0f 00 00       	call   805f5a8 <__afl_maybe_log>
 805e5b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e5bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e5c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e5c5:	8b 3c 24             	mov    (%esp),%edi
 805e5c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e5cc:	39 1c 24             	cmp    %ebx,(%esp)
 805e5cf:	0f 87 43 fb ff ff    	ja     805e118 <xstrtoumax+0x23f8>
 805e5d5:	8d 76 00             	lea    0x0(%esi),%esi
 805e5d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e5dc:	89 3c 24             	mov    %edi,(%esp)
 805e5df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e5e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e5e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e5eb:	b9 05 91 00 00       	mov    $0x9105,%ecx
 805e5f0:	e8 b3 0f 00 00       	call   805f5a8 <__afl_maybe_log>
 805e5f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e5f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e5fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e601:	8b 3c 24             	mov    (%esp),%edi
 805e604:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e608:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e60c:	89 3c 24             	mov    %edi,(%esp)
 805e60f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e613:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e617:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e61b:	b9 0a 12 00 00       	mov    $0x120a,%ecx
 805e620:	e8 83 0f 00 00       	call   805f5a8 <__afl_maybe_log>
 805e625:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e629:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e62d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e631:	8b 3c 24             	mov    (%esp),%edi
 805e634:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e638:	8b 0c 24             	mov    (%esp),%ecx
 805e63b:	8b 5c 24 04          	mov    0x4(%esp),%ebx
 805e63f:	89 e8                	mov    %ebp,%eax
 805e641:	0f af c1             	imul   %ecx,%eax
 805e644:	89 d9                	mov    %ebx,%ecx
 805e646:	0f af cf             	imul   %edi,%ecx
 805e649:	01 c1                	add    %eax,%ecx
 805e64b:	8b 04 24             	mov    (%esp),%eax
 805e64e:	f7 e7                	mul    %edi
 805e650:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e654:	89 04 24             	mov    %eax,(%esp)
 805e657:	01 4c 24 04          	add    %ecx,0x4(%esp)
  return LONGINT_OK;
 805e65b:	31 c9                	xor    %ecx,%ecx
 805e65d:	e9 ad ee ff ff       	jmp    805d50f <xstrtoumax+0x17ef>
 805e662:	66 90                	xchg   %ax,%ax
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e664:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e668:	89 3c 24             	mov    %edi,(%esp)
 805e66b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e66f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e673:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e677:	b9 69 8f 00 00       	mov    $0x8f69,%ecx
 805e67c:	e8 27 0f 00 00       	call   805f5a8 <__afl_maybe_log>
 805e681:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e685:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e689:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e68d:	8b 3c 24             	mov    (%esp),%edi
 805e690:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e694:	72 72                	jb     805e708 <xstrtoumax+0x29e8>
 805e696:	66 90                	xchg   %ax,%ax
 805e698:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e69c:	89 3c 24             	mov    %edi,(%esp)
 805e69f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e6a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e6a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e6ab:	b9 95 29 00 00       	mov    $0x2995,%ecx
 805e6b0:	e8 f3 0e 00 00       	call   805f5a8 <__afl_maybe_log>
 805e6b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e6b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e6bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e6c1:	8b 3c 24             	mov    (%esp),%edi
 805e6c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e6c8:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 805e6cc:	39 1c 24             	cmp    %ebx,(%esp)
 805e6cf:	0f 87 73 fe ff ff    	ja     805e548 <xstrtoumax+0x2828>
 805e6d5:	8d 76 00             	lea    0x0(%esi),%esi
 805e6d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e6dc:	89 3c 24             	mov    %edi,(%esp)
 805e6df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e6e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e6e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e6eb:	b9 c3 f5 00 00       	mov    $0xf5c3,%ecx
 805e6f0:	e8 b3 0e 00 00       	call   805f5a8 <__afl_maybe_log>
 805e6f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e6f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e6fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e701:	8b 3c 24             	mov    (%esp),%edi
 805e704:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e708:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e70c:	89 3c 24             	mov    %edi,(%esp)
 805e70f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e713:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e717:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e71b:	b9 86 35 00 00       	mov    $0x3586,%ecx
 805e720:	e8 83 0e 00 00       	call   805f5a8 <__afl_maybe_log>
 805e725:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e729:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e72d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e731:	8b 3c 24             	mov    (%esp),%edi
 805e734:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e738:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805e73c:	8b 14 24             	mov    (%esp),%edx
 805e73f:	89 c8                	mov    %ecx,%eax
 805e741:	89 d1                	mov    %edx,%ecx
 805e743:	0f af c7             	imul   %edi,%eax
 805e746:	0f af cd             	imul   %ebp,%ecx
 805e749:	01 c1                	add    %eax,%ecx
 805e74b:	8b 04 24             	mov    (%esp),%eax
 805e74e:	f7 e7                	mul    %edi
 805e750:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e754:	89 04 24             	mov    %eax,(%esp)
 805e757:	01 4c 24 04          	add    %ecx,0x4(%esp)
  return LONGINT_OK;
 805e75b:	31 c9                	xor    %ecx,%ecx
 805e75d:	e9 93 f0 ff ff       	jmp    805d7f5 <xstrtoumax+0x1ad5>
 805e762:	66 90                	xchg   %ax,%ax
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e764:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e768:	89 3c 24             	mov    %edi,(%esp)
 805e76b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e76f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e773:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e777:	b9 f6 d7 00 00       	mov    $0xd7f6,%ecx
 805e77c:	e8 27 0e 00 00       	call   805f5a8 <__afl_maybe_log>
 805e781:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e785:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e789:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e78d:	8b 3c 24             	mov    (%esp),%edi
 805e790:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e794:	77 72                	ja     805e808 <xstrtoumax+0x2ae8>
 805e796:	66 90                	xchg   %ax,%ax
 805e798:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e79c:	89 3c 24             	mov    %edi,(%esp)
 805e79f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e7a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e7a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e7ab:	b9 ff 3d 00 00       	mov    $0x3dff,%ecx
 805e7b0:	e8 f3 0d 00 00       	call   805f5a8 <__afl_maybe_log>
 805e7b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e7b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e7bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e7c1:	8b 3c 24             	mov    (%esp),%edi
 805e7c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e7c8:	8b 04 24             	mov    (%esp),%eax
 805e7cb:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805e7cf:	0f 82 9f e4 ff ff    	jb     805cc74 <xstrtoumax+0xf54>
 805e7d5:	8d 76 00             	lea    0x0(%esi),%esi
 805e7d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e7dc:	89 3c 24             	mov    %edi,(%esp)
 805e7df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e7e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e7e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e7eb:	b9 e5 1e 00 00       	mov    $0x1ee5,%ecx
 805e7f0:	e8 b3 0d 00 00       	call   805f5a8 <__afl_maybe_log>
 805e7f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e7f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e7fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e801:	8b 3c 24             	mov    (%esp),%edi
 805e804:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e808:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e80c:	89 3c 24             	mov    %edi,(%esp)
 805e80f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e813:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e817:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e81b:	b9 e8 c6 00 00       	mov    $0xc6e8,%ecx
 805e820:	e8 83 0d 00 00       	call   805f5a8 <__afl_maybe_log>
 805e825:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e829:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e82d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e831:	8b 3c 24             	mov    (%esp),%edi
 805e834:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e838:	8b 04 24             	mov    (%esp),%eax
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805e83b:	31 db                	xor    %ebx,%ebx
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e83d:	0f af c5             	imul   %ebp,%eax
 805e840:	89 c1                	mov    %eax,%ecx
 805e842:	8b 44 24 04          	mov    0x4(%esp),%eax
 805e846:	0f af c7             	imul   %edi,%eax
 805e849:	01 c1                	add    %eax,%ecx
 805e84b:	8b 04 24             	mov    (%esp),%eax
 805e84e:	f7 e7                	mul    %edi
 805e850:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e854:	01 4c 24 04          	add    %ecx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e858:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 805e85c:	39 4c 24 18          	cmp    %ecx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e860:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e863:	0f 82 74 e4 ff ff    	jb     805ccdd <xstrtoumax+0xfbd>
 805e869:	8d 76 00             	lea    0x0(%esi),%esi
 805e86c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e870:	89 3c 24             	mov    %edi,(%esp)
 805e873:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e877:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e87b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e87f:	b9 1c c4 00 00       	mov    $0xc41c,%ecx
 805e884:	e8 1f 0d 00 00       	call   805f5a8 <__afl_maybe_log>
 805e889:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e88d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e891:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e895:	8b 3c 24             	mov    (%esp),%edi
 805e898:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e89c:	e9 eb f4 ff ff       	jmp    805dd8c <xstrtoumax+0x206c>
 805e8a1:	8d 76 00             	lea    0x0(%esi),%esi
 805e8a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e8a8:	89 3c 24             	mov    %edi,(%esp)
 805e8ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e8af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e8b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e8b7:	b9 34 49 00 00       	mov    $0x4934,%ecx
 805e8bc:	e8 e7 0c 00 00       	call   805f5a8 <__afl_maybe_log>
 805e8c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e8c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e8c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e8cd:	8b 3c 24             	mov    (%esp),%edi
 805e8d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e8d4:	77 6e                	ja     805e944 <xstrtoumax+0x2c24>
 805e8d6:	66 90                	xchg   %ax,%ax
 805e8d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e8dc:	89 3c 24             	mov    %edi,(%esp)
 805e8df:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e8e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e8e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e8eb:	b9 7e 3b 00 00       	mov    $0x3b7e,%ecx
 805e8f0:	e8 b3 0c 00 00       	call   805f5a8 <__afl_maybe_log>
 805e8f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e8f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e8fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e901:	8b 3c 24             	mov    (%esp),%edi
 805e904:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e908:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805e90c:	0f 82 62 e1 ff ff    	jb     805ca74 <xstrtoumax+0xd54>
 805e912:	66 90                	xchg   %ax,%ax
 805e914:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e918:	89 3c 24             	mov    %edi,(%esp)
 805e91b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e91f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e923:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e927:	b9 5c ac 00 00       	mov    $0xac5c,%ecx
 805e92c:	e8 77 0c 00 00       	call   805f5a8 <__afl_maybe_log>
 805e931:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e935:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e939:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e93d:	8b 3c 24             	mov    (%esp),%edi
 805e940:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e944:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e948:	89 3c 24             	mov    %edi,(%esp)
 805e94b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e94f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e953:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e957:	b9 c2 90 00 00       	mov    $0x90c2,%ecx
 805e95c:	e8 47 0c 00 00       	call   805f5a8 <__afl_maybe_log>
 805e961:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e965:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e969:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e96d:	8b 3c 24             	mov    (%esp),%edi
 805e970:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e974:	89 e9                	mov    %ebp,%ecx
 805e976:	0f af c8             	imul   %eax,%ecx
 805e979:	0f af d7             	imul   %edi,%edx
 805e97c:	01 d1                	add    %edx,%ecx
 805e97e:	f7 e7                	mul    %edi
 805e980:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e984:	01 4c 24 04          	add    %ecx,0x4(%esp)
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805e988:	31 c9                	xor    %ecx,%ecx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e98a:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e98e:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805e992:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805e995:	0f 82 33 de ff ff    	jb     805c7ce <xstrtoumax+0xaae>
 805e99b:	90                   	nop
 805e99c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e9a0:	89 3c 24             	mov    %edi,(%esp)
 805e9a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e9a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e9ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e9af:	b9 be 54 00 00       	mov    $0x54be,%ecx
 805e9b4:	e8 ef 0b 00 00       	call   805f5a8 <__afl_maybe_log>
 805e9b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e9bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e9c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e9c5:	8b 3c 24             	mov    (%esp),%edi
 805e9c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805e9cc:	77 72                	ja     805ea40 <xstrtoumax+0x2d20>
 805e9ce:	66 90                	xchg   %ax,%ax
 805e9d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805e9d4:	89 3c 24             	mov    %edi,(%esp)
 805e9d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805e9db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805e9df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805e9e3:	b9 fa 04 00 00       	mov    $0x4fa,%ecx
 805e9e8:	e8 bb 0b 00 00       	call   805f5a8 <__afl_maybe_log>
 805e9ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805e9f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805e9f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805e9f9:	8b 3c 24             	mov    (%esp),%edi
 805e9fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ea00:	8b 14 24             	mov    (%esp),%edx
 805ea03:	39 54 24 10          	cmp    %edx,0x10(%esp)
 805ea07:	0f 82 c1 dd ff ff    	jb     805c7ce <xstrtoumax+0xaae>
 805ea0d:	8d 76 00             	lea    0x0(%esi),%esi
 805ea10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ea14:	89 3c 24             	mov    %edi,(%esp)
 805ea17:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ea1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ea1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ea23:	b9 eb 38 00 00       	mov    $0x38eb,%ecx
 805ea28:	e8 7b 0b 00 00       	call   805f5a8 <__afl_maybe_log>
 805ea2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ea31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ea35:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ea39:	8b 3c 24             	mov    (%esp),%edi
 805ea3c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805ea40:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ea44:	89 3c 24             	mov    %edi,(%esp)
 805ea47:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ea4b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ea4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ea53:	b9 82 00 00 00       	mov    $0x82,%ecx
 805ea58:	e8 4b 0b 00 00       	call   805f5a8 <__afl_maybe_log>
 805ea5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ea61:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ea65:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ea69:	8b 3c 24             	mov    (%esp),%edi
 805ea6c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ea70:	8b 04 24             	mov    (%esp),%eax
 805ea73:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ea77:	89 eb                	mov    %ebp,%ebx
 805ea79:	0f af d8             	imul   %eax,%ebx
 805ea7c:	8b 04 24             	mov    (%esp),%eax
 805ea7f:	0f af d7             	imul   %edi,%edx
 805ea82:	01 da                	add    %ebx,%edx
 805ea84:	89 d3                	mov    %edx,%ebx
 805ea86:	f7 e7                	mul    %edi
 805ea88:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ea8c:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805ea90:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ea94:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805ea98:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805ea9b:	0f 82 62 dd ff ff    	jb     805c803 <xstrtoumax+0xae3>
 805eaa1:	8d 76 00             	lea    0x0(%esi),%esi
 805eaa4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eaa8:	89 3c 24             	mov    %edi,(%esp)
 805eaab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eaaf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eab3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eab7:	b9 76 ee 00 00       	mov    $0xee76,%ecx
 805eabc:	e8 e7 0a 00 00       	call   805f5a8 <__afl_maybe_log>
 805eac1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eac5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eac9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eacd:	8b 3c 24             	mov    (%esp),%edi
 805ead0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ead4:	77 72                	ja     805eb48 <xstrtoumax+0x2e28>
 805ead6:	66 90                	xchg   %ax,%ax
 805ead8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eadc:	89 3c 24             	mov    %edi,(%esp)
 805eadf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eae3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eae7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eaeb:	b9 08 37 00 00       	mov    $0x3708,%ecx
 805eaf0:	e8 b3 0a 00 00       	call   805f5a8 <__afl_maybe_log>
 805eaf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eaf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eafd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eb01:	8b 3c 24             	mov    (%esp),%edi
 805eb04:	8d 64 24 10          	lea    0x10(%esp),%esp
 805eb08:	8b 04 24             	mov    (%esp),%eax
 805eb0b:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805eb0f:	0f 82 ee dc ff ff    	jb     805c803 <xstrtoumax+0xae3>
 805eb15:	8d 76 00             	lea    0x0(%esi),%esi
 805eb18:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eb1c:	89 3c 24             	mov    %edi,(%esp)
 805eb1f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eb23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eb27:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eb2b:	b9 74 8e 00 00       	mov    $0x8e74,%ecx
 805eb30:	e8 73 0a 00 00       	call   805f5a8 <__afl_maybe_log>
 805eb35:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eb39:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eb3d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eb41:	8b 3c 24             	mov    (%esp),%edi
 805eb44:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805eb48:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eb4c:	89 3c 24             	mov    %edi,(%esp)
 805eb4f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eb53:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eb57:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eb5b:	b9 c7 e2 00 00       	mov    $0xe2c7,%ecx
 805eb60:	e8 43 0a 00 00       	call   805f5a8 <__afl_maybe_log>
 805eb65:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eb69:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eb6d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eb71:	8b 3c 24             	mov    (%esp),%edi
 805eb74:	8d 64 24 10          	lea    0x10(%esp),%esp
 805eb78:	8b 04 24             	mov    (%esp),%eax
 805eb7b:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eb7f:	89 eb                	mov    %ebp,%ebx
 805eb81:	0f af d8             	imul   %eax,%ebx
 805eb84:	8b 04 24             	mov    (%esp),%eax
 805eb87:	0f af d7             	imul   %edi,%edx
 805eb8a:	01 da                	add    %ebx,%edx
 805eb8c:	89 d3                	mov    %edx,%ebx
 805eb8e:	f7 e7                	mul    %edi
 805eb90:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eb94:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805eb98:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eb9c:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805eba0:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805eba3:	0f 82 8e dc ff ff    	jb     805c837 <xstrtoumax+0xb17>
 805eba9:	8d 76 00             	lea    0x0(%esi),%esi
 805ebac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ebb0:	89 3c 24             	mov    %edi,(%esp)
 805ebb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ebb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ebbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ebbf:	b9 32 ea 00 00       	mov    $0xea32,%ecx
 805ebc4:	e8 df 09 00 00       	call   805f5a8 <__afl_maybe_log>
 805ebc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ebcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ebd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ebd5:	8b 3c 24             	mov    (%esp),%edi
 805ebd8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ebdc:	77 72                	ja     805ec50 <xstrtoumax+0x2f30>
 805ebde:	66 90                	xchg   %ax,%ax
 805ebe0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ebe4:	89 3c 24             	mov    %edi,(%esp)
 805ebe7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ebeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ebef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ebf3:	b9 bc 8d 00 00       	mov    $0x8dbc,%ecx
 805ebf8:	e8 ab 09 00 00       	call   805f5a8 <__afl_maybe_log>
 805ebfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ec01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ec05:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ec09:	8b 3c 24             	mov    (%esp),%edi
 805ec0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ec10:	8b 1c 24             	mov    (%esp),%ebx
 805ec13:	39 5c 24 10          	cmp    %ebx,0x10(%esp)
 805ec17:	0f 82 1a dc ff ff    	jb     805c837 <xstrtoumax+0xb17>
 805ec1d:	8d 76 00             	lea    0x0(%esi),%esi
 805ec20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ec24:	89 3c 24             	mov    %edi,(%esp)
 805ec27:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ec2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ec2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ec33:	b9 f0 71 00 00       	mov    $0x71f0,%ecx
 805ec38:	e8 6b 09 00 00       	call   805f5a8 <__afl_maybe_log>
 805ec3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ec41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ec45:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ec49:	8b 3c 24             	mov    (%esp),%edi
 805ec4c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805ec50:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ec54:	89 3c 24             	mov    %edi,(%esp)
 805ec57:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ec5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ec5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ec63:	b9 70 a0 00 00       	mov    $0xa070,%ecx
 805ec68:	e8 3b 09 00 00       	call   805f5a8 <__afl_maybe_log>
 805ec6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ec71:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ec75:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ec79:	8b 3c 24             	mov    (%esp),%edi
 805ec7c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ec80:	8b 04 24             	mov    (%esp),%eax
 805ec83:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ec87:	89 eb                	mov    %ebp,%ebx
 805ec89:	0f af d8             	imul   %eax,%ebx
 805ec8c:	8b 04 24             	mov    (%esp),%eax
 805ec8f:	0f af d7             	imul   %edi,%edx
 805ec92:	01 da                	add    %ebx,%edx
 805ec94:	89 d3                	mov    %edx,%ebx
 805ec96:	f7 e7                	mul    %edi
 805ec98:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ec9c:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805eca0:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eca4:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805eca8:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805ecab:	0f 82 ba db ff ff    	jb     805c86b <xstrtoumax+0xb4b>
 805ecb1:	8d 76 00             	lea    0x0(%esi),%esi
 805ecb4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ecb8:	89 3c 24             	mov    %edi,(%esp)
 805ecbb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ecbf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ecc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ecc7:	b9 56 c7 00 00       	mov    $0xc756,%ecx
 805eccc:	e8 d7 08 00 00       	call   805f5a8 <__afl_maybe_log>
 805ecd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ecd5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ecd9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ecdd:	8b 3c 24             	mov    (%esp),%edi
 805ece0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ece4:	77 72                	ja     805ed58 <xstrtoumax+0x3038>
 805ece6:	66 90                	xchg   %ax,%ax
 805ece8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ecec:	89 3c 24             	mov    %edi,(%esp)
 805ecef:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ecf3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ecf7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ecfb:	b9 33 a5 00 00       	mov    $0xa533,%ecx
 805ed00:	e8 a3 08 00 00       	call   805f5a8 <__afl_maybe_log>
 805ed05:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ed09:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ed0d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ed11:	8b 3c 24             	mov    (%esp),%edi
 805ed14:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ed18:	8b 14 24             	mov    (%esp),%edx
 805ed1b:	39 54 24 10          	cmp    %edx,0x10(%esp)
 805ed1f:	0f 82 46 db ff ff    	jb     805c86b <xstrtoumax+0xb4b>
 805ed25:	8d 76 00             	lea    0x0(%esi),%esi
 805ed28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ed2c:	89 3c 24             	mov    %edi,(%esp)
 805ed2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ed33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ed37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ed3b:	b9 b2 82 00 00       	mov    $0x82b2,%ecx
 805ed40:	e8 63 08 00 00       	call   805f5a8 <__afl_maybe_log>
 805ed45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ed49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ed4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ed51:	8b 3c 24             	mov    (%esp),%edi
 805ed54:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805ed58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ed5c:	89 3c 24             	mov    %edi,(%esp)
 805ed5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ed63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ed67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ed6b:	b9 b7 e7 00 00       	mov    $0xe7b7,%ecx
 805ed70:	e8 33 08 00 00       	call   805f5a8 <__afl_maybe_log>
 805ed75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ed79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ed7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ed81:	8b 3c 24             	mov    (%esp),%edi
 805ed84:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ed88:	8b 04 24             	mov    (%esp),%eax
 805ed8b:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ed8f:	89 eb                	mov    %ebp,%ebx
 805ed91:	0f af d8             	imul   %eax,%ebx
 805ed94:	8b 04 24             	mov    (%esp),%eax
 805ed97:	0f af d7             	imul   %edi,%edx
 805ed9a:	01 da                	add    %ebx,%edx
 805ed9c:	89 d3                	mov    %edx,%ebx
 805ed9e:	f7 e7                	mul    %edi
 805eda0:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eda4:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805eda8:	8b 54 24 04          	mov    0x4(%esp),%edx
 805edac:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805edb0:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805edb3:	0f 82 e6 da ff ff    	jb     805c89f <xstrtoumax+0xb7f>
 805edb9:	8d 76 00             	lea    0x0(%esi),%esi
 805edbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805edc0:	89 3c 24             	mov    %edi,(%esp)
 805edc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805edc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805edcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805edcf:	b9 bc 57 00 00       	mov    $0x57bc,%ecx
 805edd4:	e8 cf 07 00 00       	call   805f5a8 <__afl_maybe_log>
 805edd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eddd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ede1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ede5:	8b 3c 24             	mov    (%esp),%edi
 805ede8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805edec:	77 72                	ja     805ee60 <xstrtoumax+0x3140>
 805edee:	66 90                	xchg   %ax,%ax
 805edf0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805edf4:	89 3c 24             	mov    %edi,(%esp)
 805edf7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805edfb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805edff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ee03:	b9 39 3e 00 00       	mov    $0x3e39,%ecx
 805ee08:	e8 9b 07 00 00       	call   805f5a8 <__afl_maybe_log>
 805ee0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ee11:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ee15:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ee19:	8b 3c 24             	mov    (%esp),%edi
 805ee1c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ee20:	8b 04 24             	mov    (%esp),%eax
 805ee23:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805ee27:	0f 82 72 da ff ff    	jb     805c89f <xstrtoumax+0xb7f>
 805ee2d:	8d 76 00             	lea    0x0(%esi),%esi
 805ee30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ee34:	89 3c 24             	mov    %edi,(%esp)
 805ee37:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ee3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ee3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ee43:	b9 14 81 00 00       	mov    $0x8114,%ecx
 805ee48:	e8 5b 07 00 00       	call   805f5a8 <__afl_maybe_log>
 805ee4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ee51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ee55:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ee59:	8b 3c 24             	mov    (%esp),%edi
 805ee5c:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805ee60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ee64:	89 3c 24             	mov    %edi,(%esp)
 805ee67:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ee6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ee6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ee73:	b9 28 f3 00 00       	mov    $0xf328,%ecx
 805ee78:	e8 2b 07 00 00       	call   805f5a8 <__afl_maybe_log>
 805ee7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ee81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ee85:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ee89:	8b 3c 24             	mov    (%esp),%edi
 805ee8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ee90:	8b 04 24             	mov    (%esp),%eax
 805ee93:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ee97:	89 eb                	mov    %ebp,%ebx
 805ee99:	0f af d8             	imul   %eax,%ebx
 805ee9c:	8b 04 24             	mov    (%esp),%eax
 805ee9f:	0f af d7             	imul   %edi,%edx
 805eea2:	01 da                	add    %ebx,%edx
 805eea4:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 805eea8:	f7 e7                	mul    %edi
 805eeaa:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eeae:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 805eeb2:	01 54 24 04          	add    %edx,0x4(%esp)
 805eeb6:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805eeb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eebd:	39 54 24 18          	cmp    %edx,0x18(%esp)
 805eec1:	0f 83 99 05 00 00    	jae    805f460 <xstrtoumax+0x3740>
 805eec7:	90                   	nop
 805eec8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eecc:	89 3c 24             	mov    %edi,(%esp)
 805eecf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eed3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805eed7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805eedb:	b9 01 35 00 00       	mov    $0x3501,%ecx
 805eee0:	e8 c3 06 00 00       	call   805f5a8 <__afl_maybe_log>
 805eee5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805eee9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805eeed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805eef1:	8b 3c 24             	mov    (%esp),%edi
 805eef4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
 805eef8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805eefc:	89 3c 24             	mov    %edi,(%esp)
 805eeff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ef03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ef07:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ef0b:	b9 86 93 00 00       	mov    $0x9386,%ecx
 805ef10:	e8 93 06 00 00       	call   805f5a8 <__afl_maybe_log>
 805ef15:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ef19:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ef1d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ef21:	8b 3c 24             	mov    (%esp),%edi
 805ef24:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ef28:	b8 01 00 00 00       	mov    $0x1,%eax
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
 805ef2d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 805ef34:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
 805ef3b:	ff 
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805ef3c:	09 c1                	or     %eax,%ecx
 805ef3e:	e9 67 d5 ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805ef43:	90                   	nop
 805ef44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805ef48:	77 6e                	ja     805efb8 <xstrtoumax+0x3298>
 805ef4a:	66 90                	xchg   %ax,%ax
 805ef4c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ef50:	89 3c 24             	mov    %edi,(%esp)
 805ef53:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ef57:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ef5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ef5f:	b9 4d 76 00 00       	mov    $0x764d,%ecx
 805ef64:	e8 3f 06 00 00       	call   805f5a8 <__afl_maybe_log>
 805ef69:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ef6d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ef71:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ef75:	8b 3c 24             	mov    (%esp),%edi
 805ef78:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ef7c:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805ef80:	0f 82 16 d8 ff ff    	jb     805c79c <xstrtoumax+0xa7c>
 805ef86:	66 90                	xchg   %ax,%ax
 805ef88:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ef8c:	89 3c 24             	mov    %edi,(%esp)
 805ef8f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ef93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ef97:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ef9b:	b9 61 23 00 00       	mov    $0x2361,%ecx
 805efa0:	e8 03 06 00 00       	call   805f5a8 <__afl_maybe_log>
 805efa5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805efa9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805efad:	8b 54 24 04          	mov    0x4(%esp),%edx
 805efb1:	8b 3c 24             	mov    (%esp),%edi
 805efb4:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805efb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805efbc:	89 3c 24             	mov    %edi,(%esp)
 805efbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805efc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805efc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805efcb:	b9 a6 1d 00 00       	mov    $0x1da6,%ecx
 805efd0:	e8 d3 05 00 00       	call   805f5a8 <__afl_maybe_log>
 805efd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805efd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805efdd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805efe1:	8b 3c 24             	mov    (%esp),%edi
 805efe4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805efe8:	89 e9                	mov    %ebp,%ecx
 805efea:	0f af c8             	imul   %eax,%ecx
 805efed:	0f af d7             	imul   %edi,%edx
 805eff0:	01 d1                	add    %edx,%ecx
 805eff2:	f7 e7                	mul    %edi
 805eff4:	89 54 24 04          	mov    %edx,0x4(%esp)
 805eff8:	01 4c 24 04          	add    %ecx,0x4(%esp)
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805effc:	31 c9                	xor    %ecx,%ecx
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805effe:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f002:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f006:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805f009:	0f 82 f4 d7 ff ff    	jb     805c803 <xstrtoumax+0xae3>
 805f00f:	90                   	nop
 805f010:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f014:	89 3c 24             	mov    %edi,(%esp)
 805f017:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f01b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f01f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f023:	b9 ea e9 00 00       	mov    $0xe9ea,%ecx
 805f028:	e8 7b 05 00 00       	call   805f5a8 <__afl_maybe_log>
 805f02d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f031:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f035:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f039:	8b 3c 24             	mov    (%esp),%edi
 805f03c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f040:	77 72                	ja     805f0b4 <xstrtoumax+0x3394>
 805f042:	66 90                	xchg   %ax,%ax
 805f044:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f048:	89 3c 24             	mov    %edi,(%esp)
 805f04b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f04f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f053:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f057:	b9 ec 74 00 00       	mov    $0x74ec,%ecx
 805f05c:	e8 47 05 00 00       	call   805f5a8 <__afl_maybe_log>
 805f061:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f065:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f069:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f06d:	8b 3c 24             	mov    (%esp),%edi
 805f070:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f074:	8b 04 24             	mov    (%esp),%eax
 805f077:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805f07b:	0f 82 82 d7 ff ff    	jb     805c803 <xstrtoumax+0xae3>
 805f081:	8d 76 00             	lea    0x0(%esi),%esi
 805f084:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f088:	89 3c 24             	mov    %edi,(%esp)
 805f08b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f08f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f093:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f097:	b9 d6 36 00 00       	mov    $0x36d6,%ecx
 805f09c:	e8 07 05 00 00       	call   805f5a8 <__afl_maybe_log>
 805f0a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f0a5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f0a9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f0ad:	8b 3c 24             	mov    (%esp),%edi
 805f0b0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f0b4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f0b8:	89 3c 24             	mov    %edi,(%esp)
 805f0bb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f0bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f0c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f0c7:	b9 42 4a 00 00       	mov    $0x4a42,%ecx
 805f0cc:	e8 d7 04 00 00       	call   805f5a8 <__afl_maybe_log>
 805f0d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f0d5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f0d9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f0dd:	8b 3c 24             	mov    (%esp),%edi
 805f0e0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f0e4:	8b 04 24             	mov    (%esp),%eax
 805f0e7:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f0eb:	89 eb                	mov    %ebp,%ebx
 805f0ed:	0f af d8             	imul   %eax,%ebx
 805f0f0:	8b 04 24             	mov    (%esp),%eax
 805f0f3:	0f af d7             	imul   %edi,%edx
 805f0f6:	01 da                	add    %ebx,%edx
 805f0f8:	89 d3                	mov    %edx,%ebx
 805f0fa:	f7 e7                	mul    %edi
 805f0fc:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f100:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805f104:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f108:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f10c:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805f10f:	0f 82 22 d7 ff ff    	jb     805c837 <xstrtoumax+0xb17>
 805f115:	8d 76 00             	lea    0x0(%esi),%esi
 805f118:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f11c:	89 3c 24             	mov    %edi,(%esp)
 805f11f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f123:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f127:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f12b:	b9 8d d3 00 00       	mov    $0xd38d,%ecx
 805f130:	e8 73 04 00 00       	call   805f5a8 <__afl_maybe_log>
 805f135:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f139:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f13d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f141:	8b 3c 24             	mov    (%esp),%edi
 805f144:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f148:	77 72                	ja     805f1bc <xstrtoumax+0x349c>
 805f14a:	66 90                	xchg   %ax,%ax
 805f14c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f150:	89 3c 24             	mov    %edi,(%esp)
 805f153:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f15b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f15f:	b9 40 92 00 00       	mov    $0x9240,%ecx
 805f164:	e8 3f 04 00 00       	call   805f5a8 <__afl_maybe_log>
 805f169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f16d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f171:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f175:	8b 3c 24             	mov    (%esp),%edi
 805f178:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f17c:	8b 1c 24             	mov    (%esp),%ebx
 805f17f:	39 5c 24 10          	cmp    %ebx,0x10(%esp)
 805f183:	0f 82 ae d6 ff ff    	jb     805c837 <xstrtoumax+0xb17>
 805f189:	8d 76 00             	lea    0x0(%esi),%esi
 805f18c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f190:	89 3c 24             	mov    %edi,(%esp)
 805f193:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f197:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f19b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f19f:	b9 f3 d7 00 00       	mov    $0xd7f3,%ecx
 805f1a4:	e8 ff 03 00 00       	call   805f5a8 <__afl_maybe_log>
 805f1a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f1ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f1b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f1b5:	8b 3c 24             	mov    (%esp),%edi
 805f1b8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f1bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f1c0:	89 3c 24             	mov    %edi,(%esp)
 805f1c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f1c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f1cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f1cf:	b9 38 e9 00 00       	mov    $0xe938,%ecx
 805f1d4:	e8 cf 03 00 00       	call   805f5a8 <__afl_maybe_log>
 805f1d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f1dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f1e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f1e5:	8b 3c 24             	mov    (%esp),%edi
 805f1e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f1ec:	8b 04 24             	mov    (%esp),%eax
 805f1ef:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f1f3:	89 eb                	mov    %ebp,%ebx
 805f1f5:	0f af d8             	imul   %eax,%ebx
 805f1f8:	8b 04 24             	mov    (%esp),%eax
 805f1fb:	0f af d7             	imul   %edi,%edx
 805f1fe:	01 da                	add    %ebx,%edx
 805f200:	89 d3                	mov    %edx,%ebx
 805f202:	f7 e7                	mul    %edi
 805f204:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f208:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805f20c:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f210:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f214:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805f217:	0f 82 4e d6 ff ff    	jb     805c86b <xstrtoumax+0xb4b>
 805f21d:	8d 76 00             	lea    0x0(%esi),%esi
 805f220:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f224:	89 3c 24             	mov    %edi,(%esp)
 805f227:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f22b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f22f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f233:	b9 05 00 00 00       	mov    $0x5,%ecx
 805f238:	e8 6b 03 00 00       	call   805f5a8 <__afl_maybe_log>
 805f23d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f241:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f245:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f249:	8b 3c 24             	mov    (%esp),%edi
 805f24c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f250:	77 72                	ja     805f2c4 <xstrtoumax+0x35a4>
 805f252:	66 90                	xchg   %ax,%ax
 805f254:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f258:	89 3c 24             	mov    %edi,(%esp)
 805f25b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f25f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f263:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f267:	b9 c3 5b 00 00       	mov    $0x5bc3,%ecx
 805f26c:	e8 37 03 00 00       	call   805f5a8 <__afl_maybe_log>
 805f271:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f275:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f279:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f27d:	8b 3c 24             	mov    (%esp),%edi
 805f280:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f284:	8b 14 24             	mov    (%esp),%edx
 805f287:	39 54 24 10          	cmp    %edx,0x10(%esp)
 805f28b:	0f 82 da d5 ff ff    	jb     805c86b <xstrtoumax+0xb4b>
 805f291:	8d 76 00             	lea    0x0(%esi),%esi
 805f294:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f298:	89 3c 24             	mov    %edi,(%esp)
 805f29b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f29f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f2a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f2a7:	b9 f5 5c 00 00       	mov    $0x5cf5,%ecx
 805f2ac:	e8 f7 02 00 00       	call   805f5a8 <__afl_maybe_log>
 805f2b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f2b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f2b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f2bd:	8b 3c 24             	mov    (%esp),%edi
 805f2c0:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f2c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f2c8:	89 3c 24             	mov    %edi,(%esp)
 805f2cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f2cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f2d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f2d7:	b9 16 03 00 00       	mov    $0x316,%ecx
 805f2dc:	e8 c7 02 00 00       	call   805f5a8 <__afl_maybe_log>
 805f2e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f2e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f2e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f2ed:	8b 3c 24             	mov    (%esp),%edi
 805f2f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f2f4:	8b 04 24             	mov    (%esp),%eax
 805f2f7:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f2fb:	89 eb                	mov    %ebp,%ebx
 805f2fd:	0f af d8             	imul   %eax,%ebx
 805f300:	8b 04 24             	mov    (%esp),%eax
 805f303:	0f af d7             	imul   %edi,%edx
 805f306:	01 da                	add    %ebx,%edx
 805f308:	89 d3                	mov    %edx,%ebx
 805f30a:	f7 e7                	mul    %edi
 805f30c:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f310:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805f314:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f318:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f31c:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805f31f:	0f 82 7a d5 ff ff    	jb     805c89f <xstrtoumax+0xb7f>
 805f325:	8d 76 00             	lea    0x0(%esi),%esi
 805f328:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f32c:	89 3c 24             	mov    %edi,(%esp)
 805f32f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f333:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f337:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f33b:	b9 22 bf 00 00       	mov    $0xbf22,%ecx
 805f340:	e8 63 02 00 00       	call   805f5a8 <__afl_maybe_log>
 805f345:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f349:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f34d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f351:	8b 3c 24             	mov    (%esp),%edi
 805f354:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f358:	77 72                	ja     805f3cc <xstrtoumax+0x36ac>
 805f35a:	66 90                	xchg   %ax,%ax
 805f35c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f360:	89 3c 24             	mov    %edi,(%esp)
 805f363:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f367:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f36b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f36f:	b9 55 b0 00 00       	mov    $0xb055,%ecx
 805f374:	e8 2f 02 00 00       	call   805f5a8 <__afl_maybe_log>
 805f379:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f37d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f381:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f385:	8b 3c 24             	mov    (%esp),%edi
 805f388:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f38c:	8b 04 24             	mov    (%esp),%eax
 805f38f:	39 44 24 10          	cmp    %eax,0x10(%esp)
 805f393:	0f 82 06 d5 ff ff    	jb     805c89f <xstrtoumax+0xb7f>
 805f399:	8d 76 00             	lea    0x0(%esi),%esi
 805f39c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f3a0:	89 3c 24             	mov    %edi,(%esp)
 805f3a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f3a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f3ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f3af:	b9 5d f1 00 00       	mov    $0xf15d,%ecx
 805f3b4:	e8 ef 01 00 00       	call   805f5a8 <__afl_maybe_log>
 805f3b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f3bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f3c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f3c5:	8b 3c 24             	mov    (%esp),%edi
 805f3c8:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f3cc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f3d0:	89 3c 24             	mov    %edi,(%esp)
 805f3d3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f3d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f3db:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f3df:	b9 00 b7 00 00       	mov    $0xb700,%ecx
 805f3e4:	e8 bf 01 00 00       	call   805f5a8 <__afl_maybe_log>
 805f3e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f3ed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f3f1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f3f5:	8b 3c 24             	mov    (%esp),%edi
 805f3f8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f3fc:	8b 04 24             	mov    (%esp),%eax
 805f3ff:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f403:	89 eb                	mov    %ebp,%ebx
 805f405:	0f af d8             	imul   %eax,%ebx
 805f408:	8b 04 24             	mov    (%esp),%eax
 805f40b:	0f af d7             	imul   %edi,%edx
 805f40e:	01 da                	add    %ebx,%edx
 805f410:	89 d3                	mov    %edx,%ebx
 805f412:	f7 e7                	mul    %edi
 805f414:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f418:	01 5c 24 04          	add    %ebx,0x4(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805f41c:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f420:	39 54 24 18          	cmp    %edx,0x18(%esp)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f424:	89 04 24             	mov    %eax,(%esp)
  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
    {
      *x = STRTOL_T_MINIMUM;
      return LONGINT_OVERFLOW;
    }
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
 805f427:	0f 82 cb fa ff ff    	jb     805eef8 <xstrtoumax+0x31d8>
 805f42d:	8d 76 00             	lea    0x0(%esi),%esi
 805f430:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f434:	89 3c 24             	mov    %edi,(%esp)
 805f437:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f43b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f43f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f443:	b9 7b 3d 00 00       	mov    $0x3d7b,%ecx
 805f448:	e8 5b 01 00 00       	call   805f5a8 <__afl_maybe_log>
 805f44d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f451:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f455:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f459:	8b 3c 24             	mov    (%esp),%edi
 805f45c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f460:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f464:	89 3c 24             	mov    %edi,(%esp)
 805f467:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f46b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f46f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f473:	b9 56 80 00 00       	mov    $0x8056,%ecx
 805f478:	e8 2b 01 00 00       	call   805f5a8 <__afl_maybe_log>
 805f47d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f481:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f485:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f489:	8b 3c 24             	mov    (%esp),%edi
 805f48c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f490:	77 72                	ja     805f504 <xstrtoumax+0x37e4>
 805f492:	66 90                	xchg   %ax,%ax
 805f494:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f498:	89 3c 24             	mov    %edi,(%esp)
 805f49b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f49f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f4a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f4a7:	b9 c7 7c 00 00       	mov    $0x7cc7,%ecx
 805f4ac:	e8 f7 00 00 00       	call   805f5a8 <__afl_maybe_log>
 805f4b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f4b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f4b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f4bd:	8b 3c 24             	mov    (%esp),%edi
 805f4c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f4c4:	8b 1c 24             	mov    (%esp),%ebx
 805f4c7:	39 5c 24 10          	cmp    %ebx,0x10(%esp)
 805f4cb:	0f 82 27 fa ff ff    	jb     805eef8 <xstrtoumax+0x31d8>
 805f4d1:	8d 76 00             	lea    0x0(%esi),%esi
 805f4d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f4d8:	89 3c 24             	mov    %edi,(%esp)
 805f4db:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f4df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f4e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f4e7:	b9 da 1e 00 00       	mov    $0x1eda,%ecx
 805f4ec:	e8 b7 00 00 00       	call   805f5a8 <__afl_maybe_log>
 805f4f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f4f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f4f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f4fd:	8b 3c 24             	mov    (%esp),%edi
 805f500:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f504:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f508:	89 3c 24             	mov    %edi,(%esp)
 805f50b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f50f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f513:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f517:	b9 cf 4a 00 00       	mov    $0x4acf,%ecx
 805f51c:	e8 87 00 00 00       	call   805f5a8 <__afl_maybe_log>
 805f521:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f525:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f529:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f52d:	8b 3c 24             	mov    (%esp),%edi
 805f530:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f534:	8b 04 24             	mov    (%esp),%eax
 805f537:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f53b:	0f af e8             	imul   %eax,%ebp
 805f53e:	8b 04 24             	mov    (%esp),%eax
 805f541:	0f af d7             	imul   %edi,%edx
 805f544:	8d 1c 2a             	lea    (%edx,%ebp,1),%ebx
 805f547:	f7 e7                	mul    %edi
 805f549:	89 04 24             	mov    %eax,(%esp)
  return LONGINT_OK;
 805f54c:	31 c0                	xor    %eax,%eax
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f54e:	89 54 24 04          	mov    %edx,0x4(%esp)
static strtol_error
bkm_scale_by_power (__strtol_t *x, int base, int power)
{
  strtol_error err = LONGINT_OK;
  while (power--)
    err |= bkm_scale (x, base);
 805f552:	09 c1                	or     %eax,%ecx
  if (STRTOL_T_MAXIMUM / scale_factor < *x)
    {
      *x = STRTOL_T_MAXIMUM;
      return LONGINT_OVERFLOW;
    }
  *x *= scale_factor;
 805f554:	01 5c 24 04          	add    %ebx,0x4(%esp)
 805f558:	e9 4d cf ff ff       	jmp    805c4aa <xstrtoumax+0x78a>
 805f55d:	8d 76 00             	lea    0x0(%esi),%esi
  char *t_ptr;
  char **p;
  __strtol_t tmp;
  strtol_error err = LONGINT_OK;

  assure (0 <= strtol_base && strtol_base <= 36);
 805f560:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f564:	89 3c 24             	mov    %edi,(%esp)
 805f567:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f56b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f56f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f573:	b9 53 fb 00 00       	mov    $0xfb53,%ecx
 805f578:	e8 2b 00 00 00       	call   805f5a8 <__afl_maybe_log>
 805f57d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f581:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f585:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f589:	8b 3c 24             	mov    (%esp),%edi
 805f58c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f590:	68 30 40 06 08       	push   $0x8064030
 805f595:	6a 60                	push   $0x60
 805f597:	68 00 3f 06 08       	push   $0x8063f00
 805f59c:	68 30 3f 06 08       	push   $0x8063f30
 805f5a1:	e8 5a 9f fe ff       	call   8049500 <__assert_fail@plt>
 805f5a6:	66 90                	xchg   %ax,%ax

0805f5a8 <__afl_maybe_log>:
 805f5a8:	9f                   	lahf   
 805f5a9:	0f 90 c0             	seto   %al
 805f5ac:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 805f5b2:	85 d2                	test   %edx,%edx
 805f5b4:	74 22                	je     805f5d8 <__afl_setup>

0805f5b6 <__afl_store>:
 805f5b6:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 805f5bc:	31 cf                	xor    %ecx,%edi
 805f5be:	d1 e9                	shr    %ecx
 805f5c0:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 805f5c6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 805f5ca:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0805f5ce <__afl_return>:
 805f5ce:	04 7f                	add    $0x7f,%al
 805f5d0:	9e                   	sahf   
 805f5d1:	c3                   	ret    
 805f5d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

0805f5d8 <__afl_setup>:
 805f5d8:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 805f5df:	75 ed                	jne    805f5ce <__afl_return>
 805f5e1:	50                   	push   %eax
 805f5e2:	51                   	push   %ecx
 805f5e3:	68 e0 f6 05 08       	push   $0x805f6e0
 805f5e8:	e8 c3 9c fe ff       	call   80492b0 <getenv@plt>
 805f5ed:	83 c4 04             	add    $0x4,%esp
 805f5f0:	85 c0                	test   %eax,%eax
 805f5f2:	0f 84 db 00 00 00    	je     805f6d3 <__afl_setup_abort>
 805f5f8:	50                   	push   %eax
 805f5f9:	e8 82 9e fe ff       	call   8049480 <atoi@plt>
 805f5fe:	83 c4 04             	add    $0x4,%esp
 805f601:	6a 00                	push   $0x0
 805f603:	6a 00                	push   $0x0
 805f605:	50                   	push   %eax
 805f606:	e8 e5 9b fe ff       	call   80491f0 <shmat@plt>
 805f60b:	83 c4 0c             	add    $0xc,%esp
 805f60e:	83 f8 ff             	cmp    $0xffffffff,%eax
 805f611:	0f 84 bc 00 00 00    	je     805f6d3 <__afl_setup_abort>
 805f617:	c6 00 01             	movb   $0x1,(%eax)
 805f61a:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 805f61f:	89 c2                	mov    %eax,%edx
 805f621:	59                   	pop    %ecx
 805f622:	58                   	pop    %eax

0805f623 <__afl_forkserver>:
 805f623:	50                   	push   %eax
 805f624:	51                   	push   %ecx
 805f625:	52                   	push   %edx
 805f626:	6a 04                	push   $0x4
 805f628:	68 a0 7d 43 08       	push   $0x8437da0
 805f62d:	68 c7 00 00 00       	push   $0xc7
 805f632:	e8 59 9d fe ff       	call   8049390 <write@plt>
 805f637:	83 c4 0c             	add    $0xc,%esp
 805f63a:	83 f8 04             	cmp    $0x4,%eax
 805f63d:	75 6e                	jne    805f6ad <__afl_fork_resume>

0805f63f <__afl_fork_wait_loop>:
 805f63f:	6a 04                	push   $0x4
 805f641:	68 a0 7d 43 08       	push   $0x8437da0
 805f646:	68 c6 00 00 00       	push   $0xc6
 805f64b:	e8 c0 9a fe ff       	call   8049110 <read@plt>
 805f650:	83 c4 0c             	add    $0xc,%esp
 805f653:	83 f8 04             	cmp    $0x4,%eax
 805f656:	75 74                	jne    805f6cc <__afl_die>
 805f658:	e8 c3 9d fe ff       	call   8049420 <fork@plt>
 805f65d:	83 f8 00             	cmp    $0x0,%eax
 805f660:	7c 6a                	jl     805f6cc <__afl_die>
 805f662:	74 49                	je     805f6ad <__afl_fork_resume>
 805f664:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 805f669:	6a 04                	push   $0x4
 805f66b:	68 00 7e 43 08       	push   $0x8437e00
 805f670:	68 c7 00 00 00       	push   $0xc7
 805f675:	e8 16 9d fe ff       	call   8049390 <write@plt>
 805f67a:	83 c4 0c             	add    $0xc,%esp
 805f67d:	6a 00                	push   $0x0
 805f67f:	68 a0 7d 43 08       	push   $0x8437da0
 805f684:	ff 35 00 7e 43 08    	pushl  0x8437e00
 805f68a:	e8 b1 9b fe ff       	call   8049240 <waitpid@plt>
 805f68f:	83 c4 0c             	add    $0xc,%esp
 805f692:	83 f8 00             	cmp    $0x0,%eax
 805f695:	7e 35                	jle    805f6cc <__afl_die>
 805f697:	6a 04                	push   $0x4
 805f699:	68 a0 7d 43 08       	push   $0x8437da0
 805f69e:	68 c7 00 00 00       	push   $0xc7
 805f6a3:	e8 e8 9c fe ff       	call   8049390 <write@plt>
 805f6a8:	83 c4 0c             	add    $0xc,%esp
 805f6ab:	eb 92                	jmp    805f63f <__afl_fork_wait_loop>

0805f6ad <__afl_fork_resume>:
 805f6ad:	68 c6 00 00 00       	push   $0xc6
 805f6b2:	e8 39 9e fe ff       	call   80494f0 <close@plt>
 805f6b7:	68 c7 00 00 00       	push   $0xc7
 805f6bc:	e8 2f 9e fe ff       	call   80494f0 <close@plt>
 805f6c1:	83 c4 08             	add    $0x8,%esp
 805f6c4:	5a                   	pop    %edx
 805f6c5:	59                   	pop    %ecx
 805f6c6:	58                   	pop    %eax
 805f6c7:	e9 ea fe ff ff       	jmp    805f5b6 <__afl_store>

0805f6cc <__afl_die>:
 805f6cc:	31 c0                	xor    %eax,%eax
 805f6ce:	e8 6d 9a fe ff       	call   8049140 <_exit@plt>

0805f6d3 <__afl_setup_abort>:
 805f6d3:	fe 05 20 7e 43 08    	incb   0x8437e20
 805f6d9:	59                   	pop    %ecx
 805f6da:	58                   	pop    %eax
 805f6db:	e9 ee fe ff ff       	jmp    805f5ce <__afl_return>

0805f6e0 <.AFL_SHM_ENV>:
 805f6e0:	5f                   	pop    %edi
 805f6e1:	5f                   	pop    %edi
 805f6e2:	41                   	inc    %ecx
 805f6e3:	46                   	inc    %esi
 805f6e4:	4c                   	dec    %esp
 805f6e5:	5f                   	pop    %edi
 805f6e6:	53                   	push   %ebx
 805f6e7:	48                   	dec    %eax
 805f6e8:	4d                   	dec    %ebp
 805f6e9:	5f                   	pop    %edi
 805f6ea:	49                   	dec    %ecx
 805f6eb:	44                   	inc    %esp
 805f6ec:	00 66 90             	add    %ah,-0x70(%esi)
 805f6ef:	90                   	nop

0805f6f0 <rpl_fclose>:

/* Override fclose() to call the overridden fflush() or close().  */

int
rpl_fclose (FILE *fp)
{
 805f6f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f6f4:	89 3c 24             	mov    %edi,(%esp)
 805f6f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f6fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f6ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f703:	b9 ba ec 00 00       	mov    $0xecba,%ecx
 805f708:	e8 3b 0a 00 00       	call   8060148 <__afl_maybe_log>
 805f70d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f711:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f715:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f719:	8b 3c 24             	mov    (%esp),%edi
 805f71c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f720:	55                   	push   %ebp
 805f721:	57                   	push   %edi
 805f722:	56                   	push   %esi
 805f723:	53                   	push   %ebx
 805f724:	83 ec 18             	sub    $0x18,%esp
 805f727:	8b 74 24 2c          	mov    0x2c(%esp),%esi
  int saved_errno = 0;
  int fd;
  int result = 0;

  /* Don't change behavior on memstreams.  */
  fd = fileno (fp+(lava_get(554))*(0x6c617437==(lava_get(554))||0x3774616c==(lava_get(554)))+(lava_get(556))*(0x6c617435==(lava_get(556))||0x3574616c==(lava_get(556)))+(lava_get(558))*(0x6c617433==(lava_get(558))||0x3374616c==(lava_get(558)))+(lava_get(560))*(0x6c617431==(lava_get(560))||0x3174616c==(lava_get(560)))+(lava_get(562))*(0x6c61742f==(lava_get(562))||0x2f74616c==(lava_get(562)))+(lava_get(566))*(0x6c61742b==(lava_get(566))||0x2b74616c==(lava_get(566)))+(lava_get(572))*(0x6c617425==(lava_get(572))||0x2574616c==(lava_get(572)))+(lava_get(573))*(0x6c617424==(lava_get(573))||0x2474616c==(lava_get(573)))+(lava_get(576))*(0x6c617421==(lava_get(576))||0x2174616c==(lava_get(576)))+(lava_get(582))*(0x6c61741b==(lava_get(582))||0x1b74616c==(lava_get(582)))+(lava_get(583))*(0x6c61741a==(lava_get(583))||0x1a74616c==(lava_get(583)))+(lava_get(584))*(0x6c617419==(lava_get(584))||0x1974616c==(lava_get(584))));
 805f72b:	68 2a 02 00 00       	push   $0x22a
 805f730:	e8 2b ce fe ff       	call   804c560 <lava_get>
 805f735:	c7 04 24 2a 02 00 00 	movl   $0x22a,(%esp)
 805f73c:	89 c7                	mov    %eax,%edi
 805f73e:	e8 1d ce fe ff       	call   804c560 <lava_get>
 805f743:	83 c4 10             	add    $0x10,%esp
 805f746:	3d 37 74 61 6c       	cmp    $0x6c617437,%eax
 805f74b:	ba 01 00 00 00       	mov    $0x1,%edx
 805f750:	74 4c                	je     805f79e <rpl_fclose+0xae>
 805f752:	66 90                	xchg   %ax,%ax
 805f754:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f758:	89 3c 24             	mov    %edi,(%esp)
 805f75b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f75f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f763:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f767:	b9 03 76 00 00       	mov    $0x7603,%ecx
 805f76c:	e8 d7 09 00 00       	call   8060148 <__afl_maybe_log>
 805f771:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f775:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f779:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f77d:	8b 3c 24             	mov    (%esp),%edi
 805f780:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f784:	83 ec 0c             	sub    $0xc,%esp
 805f787:	68 2a 02 00 00       	push   $0x22a
 805f78c:	e8 cf cd fe ff       	call   804c560 <lava_get>
 805f791:	31 d2                	xor    %edx,%edx
 805f793:	83 c4 10             	add    $0x10,%esp
 805f796:	3d 6c 61 74 37       	cmp    $0x3774616c,%eax
 805f79b:	0f 94 c2             	sete   %dl
 805f79e:	66 90                	xchg   %ax,%ax
 805f7a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f7a4:	89 3c 24             	mov    %edi,(%esp)
 805f7a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f7ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f7af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f7b3:	b9 56 30 00 00       	mov    $0x3056,%ecx
 805f7b8:	e8 8b 09 00 00       	call   8060148 <__afl_maybe_log>
 805f7bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f7c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f7c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f7c9:	8b 3c 24             	mov    (%esp),%edi
 805f7cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f7d0:	83 ec 0c             	sub    $0xc,%esp
 805f7d3:	0f af d7             	imul   %edi,%edx
 805f7d6:	68 2c 02 00 00       	push   $0x22c
 805f7db:	89 d5                	mov    %edx,%ebp
 805f7dd:	e8 7e cd fe ff       	call   804c560 <lava_get>
 805f7e2:	c7 04 24 2c 02 00 00 	movl   $0x22c,(%esp)
 805f7e9:	89 c3                	mov    %eax,%ebx
 805f7eb:	e8 70 cd fe ff       	call   804c560 <lava_get>
 805f7f0:	83 c4 10             	add    $0x10,%esp
 805f7f3:	3d 35 74 61 6c       	cmp    $0x6c617435,%eax
 805f7f8:	b9 01 00 00 00       	mov    $0x1,%ecx
 805f7fd:	74 4b                	je     805f84a <rpl_fclose+0x15a>
 805f7ff:	90                   	nop
 805f800:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f804:	89 3c 24             	mov    %edi,(%esp)
 805f807:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f80b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f80f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f813:	b9 3d f2 00 00       	mov    $0xf23d,%ecx
 805f818:	e8 2b 09 00 00       	call   8060148 <__afl_maybe_log>
 805f81d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f821:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f825:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f829:	8b 3c 24             	mov    (%esp),%edi
 805f82c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f830:	83 ec 0c             	sub    $0xc,%esp
 805f833:	68 2c 02 00 00       	push   $0x22c
 805f838:	e8 23 cd fe ff       	call   804c560 <lava_get>
 805f83d:	31 c9                	xor    %ecx,%ecx
 805f83f:	83 c4 10             	add    $0x10,%esp
 805f842:	3d 6c 61 74 35       	cmp    $0x3574616c,%eax
 805f847:	0f 94 c1             	sete   %cl
 805f84a:	66 90                	xchg   %ax,%ax
 805f84c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f850:	89 3c 24             	mov    %edi,(%esp)
 805f853:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f857:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f85b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f85f:	b9 06 f2 00 00       	mov    $0xf206,%ecx
 805f864:	e8 df 08 00 00       	call   8060148 <__afl_maybe_log>
 805f869:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f86d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f871:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f875:	8b 3c 24             	mov    (%esp),%edi
 805f878:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f87c:	83 ec 0c             	sub    $0xc,%esp
 805f87f:	0f af d9             	imul   %ecx,%ebx
 805f882:	68 30 02 00 00       	push   $0x230
 805f887:	e8 d4 cc fe ff       	call   804c560 <lava_get>
 805f88c:	8d 3c 2b             	lea    (%ebx,%ebp,1),%edi
 805f88f:	c7 04 24 30 02 00 00 	movl   $0x230,(%esp)
 805f896:	89 c3                	mov    %eax,%ebx
 805f898:	e8 c3 cc fe ff       	call   804c560 <lava_get>
 805f89d:	83 c4 10             	add    $0x10,%esp
 805f8a0:	3d 31 74 61 6c       	cmp    $0x6c617431,%eax
 805f8a5:	ba 01 00 00 00       	mov    $0x1,%edx
 805f8aa:	74 4a                	je     805f8f6 <rpl_fclose+0x206>
 805f8ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f8b0:	89 3c 24             	mov    %edi,(%esp)
 805f8b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f8b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f8bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f8bf:	b9 9f 09 00 00       	mov    $0x99f,%ecx
 805f8c4:	e8 7f 08 00 00       	call   8060148 <__afl_maybe_log>
 805f8c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f8cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f8d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f8d5:	8b 3c 24             	mov    (%esp),%edi
 805f8d8:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f8dc:	83 ec 0c             	sub    $0xc,%esp
 805f8df:	68 30 02 00 00       	push   $0x230
 805f8e4:	e8 77 cc fe ff       	call   804c560 <lava_get>
 805f8e9:	31 d2                	xor    %edx,%edx
 805f8eb:	83 c4 10             	add    $0x10,%esp
 805f8ee:	3d 6c 61 74 31       	cmp    $0x3174616c,%eax
 805f8f3:	0f 94 c2             	sete   %dl
 805f8f6:	66 90                	xchg   %ax,%ax
 805f8f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f8fc:	89 3c 24             	mov    %edi,(%esp)
 805f8ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f903:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f907:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f90b:	b9 35 4b 00 00       	mov    $0x4b35,%ecx
 805f910:	e8 33 08 00 00       	call   8060148 <__afl_maybe_log>
 805f915:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f919:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f91d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f921:	8b 3c 24             	mov    (%esp),%edi
 805f924:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f928:	83 ec 0c             	sub    $0xc,%esp
 805f92b:	68 2e 02 00 00       	push   $0x22e
 805f930:	0f af da             	imul   %edx,%ebx
 805f933:	e8 28 cc fe ff       	call   804c560 <lava_get>
 805f938:	c7 04 24 2e 02 00 00 	movl   $0x22e,(%esp)
 805f93f:	89 c5                	mov    %eax,%ebp
 805f941:	e8 1a cc fe ff       	call   804c560 <lava_get>
 805f946:	83 c4 10             	add    $0x10,%esp
 805f949:	3d 33 74 61 6c       	cmp    $0x6c617433,%eax
 805f94e:	b9 01 00 00 00       	mov    $0x1,%ecx
 805f953:	74 4d                	je     805f9a2 <rpl_fclose+0x2b2>
 805f955:	8d 76 00             	lea    0x0(%esi),%esi
 805f958:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f95c:	89 3c 24             	mov    %edi,(%esp)
 805f95f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f963:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f967:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f96b:	b9 a3 e8 00 00       	mov    $0xe8a3,%ecx
 805f970:	e8 d3 07 00 00       	call   8060148 <__afl_maybe_log>
 805f975:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f979:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f97d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f981:	8b 3c 24             	mov    (%esp),%edi
 805f984:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f988:	83 ec 0c             	sub    $0xc,%esp
 805f98b:	68 2e 02 00 00       	push   $0x22e
 805f990:	e8 cb cb fe ff       	call   804c560 <lava_get>
 805f995:	31 c9                	xor    %ecx,%ecx
 805f997:	83 c4 10             	add    $0x10,%esp
 805f99a:	3d 6c 61 74 33       	cmp    $0x3374616c,%eax
 805f99f:	0f 94 c1             	sete   %cl
 805f9a2:	66 90                	xchg   %ax,%ax
 805f9a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805f9a8:	89 3c 24             	mov    %edi,(%esp)
 805f9ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 805f9af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805f9b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805f9b7:	b9 3b 48 00 00       	mov    $0x483b,%ecx
 805f9bc:	e8 87 07 00 00       	call   8060148 <__afl_maybe_log>
 805f9c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805f9c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805f9c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805f9cd:	8b 3c 24             	mov    (%esp),%edi
 805f9d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805f9d4:	83 ec 0c             	sub    $0xc,%esp
 805f9d7:	01 fb                	add    %edi,%ebx
 805f9d9:	0f af e9             	imul   %ecx,%ebp
 805f9dc:	68 36 02 00 00       	push   $0x236
 805f9e1:	e8 7a cb fe ff       	call   804c560 <lava_get>
 805f9e6:	01 eb                	add    %ebp,%ebx
 805f9e8:	c7 04 24 36 02 00 00 	movl   $0x236,(%esp)
 805f9ef:	89 c7                	mov    %eax,%edi
 805f9f1:	e8 6a cb fe ff       	call   804c560 <lava_get>
 805f9f6:	83 c4 10             	add    $0x10,%esp
 805f9f9:	3d 2b 74 61 6c       	cmp    $0x6c61742b,%eax
 805f9fe:	ba 01 00 00 00       	mov    $0x1,%edx
 805fa03:	74 4d                	je     805fa52 <rpl_fclose+0x362>
 805fa05:	8d 76 00             	lea    0x0(%esi),%esi
 805fa08:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fa0c:	89 3c 24             	mov    %edi,(%esp)
 805fa0f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fa13:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fa17:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fa1b:	b9 da 22 00 00       	mov    $0x22da,%ecx
 805fa20:	e8 23 07 00 00       	call   8060148 <__afl_maybe_log>
 805fa25:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fa29:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fa2d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fa31:	8b 3c 24             	mov    (%esp),%edi
 805fa34:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fa38:	83 ec 0c             	sub    $0xc,%esp
 805fa3b:	68 36 02 00 00       	push   $0x236
 805fa40:	e8 1b cb fe ff       	call   804c560 <lava_get>
 805fa45:	31 d2                	xor    %edx,%edx
 805fa47:	83 c4 10             	add    $0x10,%esp
 805fa4a:	3d 6c 61 74 2b       	cmp    $0x2b74616c,%eax
 805fa4f:	0f 94 c2             	sete   %dl
 805fa52:	66 90                	xchg   %ax,%ax
 805fa54:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fa58:	89 3c 24             	mov    %edi,(%esp)
 805fa5b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fa5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fa63:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fa67:	b9 ea 05 00 00       	mov    $0x5ea,%ecx
 805fa6c:	e8 d7 06 00 00       	call   8060148 <__afl_maybe_log>
 805fa71:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fa75:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fa79:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fa7d:	8b 3c 24             	mov    (%esp),%edi
 805fa80:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fa84:	83 ec 0c             	sub    $0xc,%esp
 805fa87:	68 32 02 00 00       	push   $0x232
 805fa8c:	0f af fa             	imul   %edx,%edi
 805fa8f:	e8 cc ca fe ff       	call   804c560 <lava_get>
 805fa94:	c7 04 24 32 02 00 00 	movl   $0x232,(%esp)
 805fa9b:	89 c5                	mov    %eax,%ebp
 805fa9d:	e8 be ca fe ff       	call   804c560 <lava_get>
 805faa2:	83 c4 10             	add    $0x10,%esp
 805faa5:	3d 2f 74 61 6c       	cmp    $0x6c61742f,%eax
 805faaa:	b9 01 00 00 00       	mov    $0x1,%ecx
 805faaf:	74 4d                	je     805fafe <rpl_fclose+0x40e>
 805fab1:	8d 76 00             	lea    0x0(%esi),%esi
 805fab4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fab8:	89 3c 24             	mov    %edi,(%esp)
 805fabb:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fabf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fac3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fac7:	b9 19 0f 00 00       	mov    $0xf19,%ecx
 805facc:	e8 77 06 00 00       	call   8060148 <__afl_maybe_log>
 805fad1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fad5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fad9:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fadd:	8b 3c 24             	mov    (%esp),%edi
 805fae0:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fae4:	83 ec 0c             	sub    $0xc,%esp
 805fae7:	68 32 02 00 00       	push   $0x232
 805faec:	e8 6f ca fe ff       	call   804c560 <lava_get>
 805faf1:	31 c9                	xor    %ecx,%ecx
 805faf3:	83 c4 10             	add    $0x10,%esp
 805faf6:	3d 6c 61 74 2f       	cmp    $0x2f74616c,%eax
 805fafb:	0f 94 c1             	sete   %cl
 805fafe:	66 90                	xchg   %ax,%ax
 805fb00:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fb04:	89 3c 24             	mov    %edi,(%esp)
 805fb07:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fb0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fb0f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fb13:	b9 95 97 00 00       	mov    $0x9795,%ecx
 805fb18:	e8 2b 06 00 00       	call   8060148 <__afl_maybe_log>
 805fb1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fb21:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fb25:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fb29:	8b 3c 24             	mov    (%esp),%edi
 805fb2c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fb30:	83 ec 0c             	sub    $0xc,%esp
 805fb33:	01 fb                	add    %edi,%ebx
 805fb35:	0f af e9             	imul   %ecx,%ebp
 805fb38:	68 3d 02 00 00       	push   $0x23d
 805fb3d:	e8 1e ca fe ff       	call   804c560 <lava_get>
 805fb42:	8d 3c 2b             	lea    (%ebx,%ebp,1),%edi
 805fb45:	c7 04 24 3d 02 00 00 	movl   $0x23d,(%esp)
 805fb4c:	89 c3                	mov    %eax,%ebx
 805fb4e:	e8 0d ca fe ff       	call   804c560 <lava_get>
 805fb53:	83 c4 10             	add    $0x10,%esp
 805fb56:	3d 24 74 61 6c       	cmp    $0x6c617424,%eax
 805fb5b:	ba 01 00 00 00       	mov    $0x1,%edx
 805fb60:	74 4c                	je     805fbae <rpl_fclose+0x4be>
 805fb62:	66 90                	xchg   %ax,%ax
 805fb64:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fb68:	89 3c 24             	mov    %edi,(%esp)
 805fb6b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fb6f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fb73:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fb77:	b9 9d 70 00 00       	mov    $0x709d,%ecx
 805fb7c:	e8 c7 05 00 00       	call   8060148 <__afl_maybe_log>
 805fb81:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fb85:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fb89:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fb8d:	8b 3c 24             	mov    (%esp),%edi
 805fb90:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fb94:	83 ec 0c             	sub    $0xc,%esp
 805fb97:	68 3d 02 00 00       	push   $0x23d
 805fb9c:	e8 bf c9 fe ff       	call   804c560 <lava_get>
 805fba1:	31 d2                	xor    %edx,%edx
 805fba3:	83 c4 10             	add    $0x10,%esp
 805fba6:	3d 6c 61 74 24       	cmp    $0x2474616c,%eax
 805fbab:	0f 94 c2             	sete   %dl
 805fbae:	66 90                	xchg   %ax,%ax
 805fbb0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fbb4:	89 3c 24             	mov    %edi,(%esp)
 805fbb7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fbbb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fbbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fbc3:	b9 4f 2d 00 00       	mov    $0x2d4f,%ecx
 805fbc8:	e8 7b 05 00 00       	call   8060148 <__afl_maybe_log>
 805fbcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fbd1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fbd5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fbd9:	8b 3c 24             	mov    (%esp),%edi
 805fbdc:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fbe0:	83 ec 0c             	sub    $0xc,%esp
 805fbe3:	68 3c 02 00 00       	push   $0x23c
 805fbe8:	0f af da             	imul   %edx,%ebx
 805fbeb:	e8 70 c9 fe ff       	call   804c560 <lava_get>
 805fbf0:	c7 04 24 3c 02 00 00 	movl   $0x23c,(%esp)
 805fbf7:	89 c5                	mov    %eax,%ebp
 805fbf9:	e8 62 c9 fe ff       	call   804c560 <lava_get>
 805fbfe:	83 c4 10             	add    $0x10,%esp
 805fc01:	3d 25 74 61 6c       	cmp    $0x6c617425,%eax
 805fc06:	b9 01 00 00 00       	mov    $0x1,%ecx
 805fc0b:	74 4d                	je     805fc5a <rpl_fclose+0x56a>
 805fc0d:	8d 76 00             	lea    0x0(%esi),%esi
 805fc10:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fc14:	89 3c 24             	mov    %edi,(%esp)
 805fc17:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fc1b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fc1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fc23:	b9 cb ef 00 00       	mov    $0xefcb,%ecx
 805fc28:	e8 1b 05 00 00       	call   8060148 <__afl_maybe_log>
 805fc2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fc31:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fc35:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fc39:	8b 3c 24             	mov    (%esp),%edi
 805fc3c:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fc40:	83 ec 0c             	sub    $0xc,%esp
 805fc43:	68 3c 02 00 00       	push   $0x23c
 805fc48:	e8 13 c9 fe ff       	call   804c560 <lava_get>
 805fc4d:	31 c9                	xor    %ecx,%ecx
 805fc4f:	83 c4 10             	add    $0x10,%esp
 805fc52:	3d 6c 61 74 25       	cmp    $0x2574616c,%eax
 805fc57:	0f 94 c1             	sete   %cl
 805fc5a:	66 90                	xchg   %ax,%ax
 805fc5c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fc60:	89 3c 24             	mov    %edi,(%esp)
 805fc63:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fc67:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fc6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fc6f:	b9 d6 34 00 00       	mov    $0x34d6,%ecx
 805fc74:	e8 cf 04 00 00       	call   8060148 <__afl_maybe_log>
 805fc79:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fc7d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fc81:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fc85:	8b 3c 24             	mov    (%esp),%edi
 805fc88:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fc8c:	83 ec 0c             	sub    $0xc,%esp
 805fc8f:	01 fb                	add    %edi,%ebx
 805fc91:	0f af e9             	imul   %ecx,%ebp
 805fc94:	68 46 02 00 00       	push   $0x246
 805fc99:	e8 c2 c8 fe ff       	call   804c560 <lava_get>
 805fc9e:	01 dd                	add    %ebx,%ebp
 805fca0:	c7 04 24 46 02 00 00 	movl   $0x246,(%esp)
 805fca7:	89 c7                	mov    %eax,%edi
 805fca9:	e8 b2 c8 fe ff       	call   804c560 <lava_get>
 805fcae:	83 c4 10             	add    $0x10,%esp
 805fcb1:	3d 1b 74 61 6c       	cmp    $0x6c61741b,%eax
 805fcb6:	bb 01 00 00 00       	mov    $0x1,%ebx
 805fcbb:	74 4d                	je     805fd0a <rpl_fclose+0x61a>
 805fcbd:	8d 76 00             	lea    0x0(%esi),%esi
 805fcc0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fcc4:	89 3c 24             	mov    %edi,(%esp)
 805fcc7:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fccb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fccf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fcd3:	b9 d8 5c 00 00       	mov    $0x5cd8,%ecx
 805fcd8:	e8 6b 04 00 00       	call   8060148 <__afl_maybe_log>
 805fcdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fce1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fce5:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fce9:	8b 3c 24             	mov    (%esp),%edi
 805fcec:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fcf0:	83 ec 0c             	sub    $0xc,%esp
 805fcf3:	31 db                	xor    %ebx,%ebx
 805fcf5:	68 46 02 00 00       	push   $0x246
 805fcfa:	e8 61 c8 fe ff       	call   804c560 <lava_get>
 805fcff:	83 c4 10             	add    $0x10,%esp
 805fd02:	3d 6c 61 74 1b       	cmp    $0x1b74616c,%eax
 805fd07:	0f 94 c3             	sete   %bl
 805fd0a:	66 90                	xchg   %ax,%ax
 805fd0c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fd10:	89 3c 24             	mov    %edi,(%esp)
 805fd13:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fd17:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fd1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fd1f:	b9 15 a2 00 00       	mov    $0xa215,%ecx
 805fd24:	e8 1f 04 00 00       	call   8060148 <__afl_maybe_log>
 805fd29:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fd2d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fd31:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fd35:	8b 3c 24             	mov    (%esp),%edi
 805fd38:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fd3c:	83 ec 0c             	sub    $0xc,%esp
 805fd3f:	68 40 02 00 00       	push   $0x240
 805fd44:	0f af fb             	imul   %ebx,%edi
 805fd47:	e8 14 c8 fe ff       	call   804c560 <lava_get>
 805fd4c:	c7 04 24 40 02 00 00 	movl   $0x240,(%esp)
 805fd53:	89 c3                	mov    %eax,%ebx
 805fd55:	e8 06 c8 fe ff       	call   804c560 <lava_get>
 805fd5a:	83 c4 10             	add    $0x10,%esp
 805fd5d:	3d 21 74 61 6c       	cmp    $0x6c617421,%eax
 805fd62:	ba 01 00 00 00       	mov    $0x1,%edx
 805fd67:	74 4d                	je     805fdb6 <rpl_fclose+0x6c6>
 805fd69:	8d 76 00             	lea    0x0(%esi),%esi
 805fd6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fd70:	89 3c 24             	mov    %edi,(%esp)
 805fd73:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fd77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fd7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fd7f:	b9 a4 21 00 00       	mov    $0x21a4,%ecx
 805fd84:	e8 bf 03 00 00       	call   8060148 <__afl_maybe_log>
 805fd89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fd8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fd91:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fd95:	8b 3c 24             	mov    (%esp),%edi
 805fd98:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fd9c:	83 ec 0c             	sub    $0xc,%esp
 805fd9f:	68 40 02 00 00       	push   $0x240
 805fda4:	e8 b7 c7 fe ff       	call   804c560 <lava_get>
 805fda9:	31 d2                	xor    %edx,%edx
 805fdab:	83 c4 10             	add    $0x10,%esp
 805fdae:	3d 6c 61 74 21       	cmp    $0x2174616c,%eax
 805fdb3:	0f 94 c2             	sete   %dl
 805fdb6:	66 90                	xchg   %ax,%ax
 805fdb8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fdbc:	89 3c 24             	mov    %edi,(%esp)
 805fdbf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fdc3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fdc7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fdcb:	b9 a2 55 00 00       	mov    $0x55a2,%ecx
 805fdd0:	e8 73 03 00 00       	call   8060148 <__afl_maybe_log>
 805fdd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fdd9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fddd:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fde1:	8b 3c 24             	mov    (%esp),%edi
 805fde4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fde8:	83 ec 0c             	sub    $0xc,%esp
 805fdeb:	01 ef                	add    %ebp,%edi
 805fded:	0f af da             	imul   %edx,%ebx
 805fdf0:	68 48 02 00 00       	push   $0x248
 805fdf5:	e8 66 c7 fe ff       	call   804c560 <lava_get>
 805fdfa:	8d 2c 1f             	lea    (%edi,%ebx,1),%ebp
 805fdfd:	c7 04 24 48 02 00 00 	movl   $0x248,(%esp)
 805fe04:	89 c7                	mov    %eax,%edi
 805fe06:	e8 55 c7 fe ff       	call   804c560 <lava_get>
 805fe0b:	83 c4 10             	add    $0x10,%esp
 805fe0e:	3d 19 74 61 6c       	cmp    $0x6c617419,%eax
 805fe13:	b9 01 00 00 00       	mov    $0x1,%ecx
 805fe18:	74 4c                	je     805fe66 <rpl_fclose+0x776>
 805fe1a:	66 90                	xchg   %ax,%ax
 805fe1c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fe20:	89 3c 24             	mov    %edi,(%esp)
 805fe23:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fe27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fe2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fe2f:	b9 79 0f 00 00       	mov    $0xf79,%ecx
 805fe34:	e8 0f 03 00 00       	call   8060148 <__afl_maybe_log>
 805fe39:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fe3d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fe41:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fe45:	8b 3c 24             	mov    (%esp),%edi
 805fe48:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fe4c:	83 ec 0c             	sub    $0xc,%esp
 805fe4f:	68 48 02 00 00       	push   $0x248
 805fe54:	e8 07 c7 fe ff       	call   804c560 <lava_get>
 805fe59:	31 c9                	xor    %ecx,%ecx
 805fe5b:	83 c4 10             	add    $0x10,%esp
 805fe5e:	3d 6c 61 74 19       	cmp    $0x1974616c,%eax
 805fe63:	0f 94 c1             	sete   %cl
 805fe66:	66 90                	xchg   %ax,%ax
 805fe68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fe6c:	89 3c 24             	mov    %edi,(%esp)
 805fe6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fe73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fe77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fe7b:	b9 e7 2c 00 00       	mov    $0x2ce7,%ecx
 805fe80:	e8 c3 02 00 00       	call   8060148 <__afl_maybe_log>
 805fe85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fe89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805fe8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fe91:	8b 3c 24             	mov    (%esp),%edi
 805fe94:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fe98:	83 ec 0c             	sub    $0xc,%esp
 805fe9b:	68 47 02 00 00       	push   $0x247
 805fea0:	0f af f9             	imul   %ecx,%edi
 805fea3:	e8 b8 c6 fe ff       	call   804c560 <lava_get>
 805fea8:	c7 04 24 47 02 00 00 	movl   $0x247,(%esp)
 805feaf:	89 c3                	mov    %eax,%ebx
 805feb1:	e8 aa c6 fe ff       	call   804c560 <lava_get>
 805feb6:	83 c4 10             	add    $0x10,%esp
 805feb9:	3d 1a 74 61 6c       	cmp    $0x6c61741a,%eax
 805febe:	ba 01 00 00 00       	mov    $0x1,%edx
 805fec3:	74 4d                	je     805ff12 <rpl_fclose+0x822>
 805fec5:	8d 76 00             	lea    0x0(%esi),%esi
 805fec8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805fecc:	89 3c 24             	mov    %edi,(%esp)
 805fecf:	89 54 24 04          	mov    %edx,0x4(%esp)
 805fed3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805fed7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805fedb:	b9 2d 00 00 00       	mov    $0x2d,%ecx
 805fee0:	e8 63 02 00 00       	call   8060148 <__afl_maybe_log>
 805fee5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fee9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805feed:	8b 54 24 04          	mov    0x4(%esp),%edx
 805fef1:	8b 3c 24             	mov    (%esp),%edi
 805fef4:	8d 64 24 10          	lea    0x10(%esp),%esp
 805fef8:	83 ec 0c             	sub    $0xc,%esp
 805fefb:	68 47 02 00 00       	push   $0x247
 805ff00:	e8 5b c6 fe ff       	call   804c560 <lava_get>
 805ff05:	31 d2                	xor    %edx,%edx
 805ff07:	83 c4 10             	add    $0x10,%esp
 805ff0a:	3d 6c 61 74 1a       	cmp    $0x1a74616c,%eax
 805ff0f:	0f 94 c2             	sete   %dl
 805ff12:	66 90                	xchg   %ax,%ax
 805ff14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ff18:	89 3c 24             	mov    %edi,(%esp)
 805ff1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ff1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ff23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ff27:	b9 7a c2 00 00       	mov    $0xc27a,%ecx
 805ff2c:	e8 17 02 00 00       	call   8060148 <__afl_maybe_log>
 805ff31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ff35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ff39:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ff3d:	8b 3c 24             	mov    (%esp),%edi
 805ff40:	8d 64 24 10          	lea    0x10(%esp),%esp
 805ff44:	0f af da             	imul   %edx,%ebx
 805ff47:	01 ef                	add    %ebp,%edi
 805ff49:	83 ec 0c             	sub    $0xc,%esp
 805ff4c:	01 fb                	add    %edi,%ebx
 805ff4e:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
 805ff54:	01 f0                	add    %esi,%eax
 805ff56:	50                   	push   %eax
 805ff57:	e8 94 94 fe ff       	call   80493f0 <fileno@plt>
  if (fd < 0)
 805ff5c:	83 c4 10             	add    $0x10,%esp
 805ff5f:	85 c0                	test   %eax,%eax
 805ff61:	0f 88 d1 01 00 00    	js     8060138 <rpl_fclose+0xa48>
 805ff67:	90                   	nop
 805ff68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ff6c:	89 3c 24             	mov    %edi,(%esp)
 805ff6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ff73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ff77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ff7b:	b9 ac 72 00 00       	mov    $0x72ac,%ecx
 805ff80:	e8 c3 01 00 00       	call   8060148 <__afl_maybe_log>
 805ff85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ff89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ff8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ff91:	8b 3c 24             	mov    (%esp),%edi
 805ff94:	8d 64 24 10          	lea    0x10(%esp),%esp
    return fclose_nothrow (fp);

  /* We only need to flush the file if it is not reading or if it is
     seekable.  This only guarantees the file position of input files
     if the fflush module is also in use.  */
  if ((!freading (fp) || lseek (fileno (fp), 0, SEEK_CUR) != -1)
 805ff98:	83 ec 0c             	sub    $0xc,%esp
 805ff9b:	56                   	push   %esi
 805ff9c:	e8 3f 93 fe ff       	call   80492e0 <__freading@plt>
 805ffa1:	83 c4 10             	add    $0x10,%esp
 805ffa4:	85 c0                	test   %eax,%eax
 805ffa6:	0f 85 34 01 00 00    	jne    80600e0 <rpl_fclose+0x9f0>
 805ffac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ffb0:	89 3c 24             	mov    %edi,(%esp)
 805ffb3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ffb7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ffbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ffbf:	b9 2b 88 00 00       	mov    $0x882b,%ecx
 805ffc4:	e8 7f 01 00 00       	call   8060148 <__afl_maybe_log>
 805ffc9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805ffcd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 805ffd1:	8b 54 24 04          	mov    0x4(%esp),%edx
 805ffd5:	8b 3c 24             	mov    (%esp),%edi
 805ffd8:	8d 64 24 10          	lea    0x10(%esp),%esp
      && fflush (fp))
 805ffdc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 805ffe0:	89 3c 24             	mov    %edi,(%esp)
 805ffe3:	89 54 24 04          	mov    %edx,0x4(%esp)
 805ffe7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 805ffeb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 805ffef:	b9 69 6b 00 00       	mov    $0x6b69,%ecx
 805fff4:	e8 4f 01 00 00       	call   8060148 <__afl_maybe_log>
 805fff9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 805fffd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060001:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060005:	8b 3c 24             	mov    (%esp),%edi
 8060008:	8d 64 24 10          	lea    0x10(%esp),%esp
 806000c:	83 ec 0c             	sub    $0xc,%esp
 806000f:	56                   	push   %esi
 8060010:	e8 7b 02 00 00       	call   8060290 <rpl_fflush>
 8060015:	83 c4 10             	add    $0x10,%esp
 8060018:	85 c0                	test   %eax,%eax
 806001a:	0f 84 18 01 00 00    	je     8060138 <rpl_fclose+0xa48>
 8060020:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060024:	89 3c 24             	mov    %edi,(%esp)
 8060027:	89 54 24 04          	mov    %edx,0x4(%esp)
 806002b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806002f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060033:	b9 59 25 00 00       	mov    $0x2559,%ecx
 8060038:	e8 0b 01 00 00       	call   8060148 <__afl_maybe_log>
 806003d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060041:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060045:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060049:	8b 3c 24             	mov    (%esp),%edi
 806004c:	8d 64 24 10          	lea    0x10(%esp),%esp
    saved_errno = errno;
 8060050:	e8 7b 93 fe ff       	call   80493d0 <__errno_location@plt>
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8060055:	83 ec 0c             	sub    $0xc,%esp
  /* We only need to flush the file if it is not reading or if it is
     seekable.  This only guarantees the file position of input files
     if the fflush module is also in use.  */
  if ((!freading (fp) || lseek (fileno (fp), 0, SEEK_CUR) != -1)
      && fflush (fp))
    saved_errno = errno;
 8060058:	8b 38                	mov    (%eax),%edi
 806005a:	89 c5                	mov    %eax,%ebp
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 806005c:	56                   	push   %esi
 806005d:	e8 3e 91 fe ff       	call   80491a0 <fclose@plt>
# endif

#endif /* !WINDOWS_SOCKETS */

  if (saved_errno != 0)
 8060062:	83 c4 10             	add    $0x10,%esp
 8060065:	85 ff                	test   %edi,%edi
 8060067:	74 3b                	je     80600a4 <rpl_fclose+0x9b4>
 8060069:	8d 76 00             	lea    0x0(%esi),%esi
 806006c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060070:	89 3c 24             	mov    %edi,(%esp)
 8060073:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060077:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806007b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806007f:	b9 16 cd 00 00       	mov    $0xcd16,%ecx
 8060084:	e8 bf 00 00 00       	call   8060148 <__afl_maybe_log>
 8060089:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806008d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060091:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060095:	8b 3c 24             	mov    (%esp),%edi
 8060098:	8d 64 24 10          	lea    0x10(%esp),%esp
    {
      errno = saved_errno;
 806009c:	89 7d 00             	mov    %edi,0x0(%ebp)
      result = EOF;
 806009f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    }

  return result;
}
 80600a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80600a8:	89 3c 24             	mov    %edi,(%esp)
 80600ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80600af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80600b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80600b7:	b9 ac 41 00 00       	mov    $0x41ac,%ecx
 80600bc:	e8 87 00 00 00       	call   8060148 <__afl_maybe_log>
 80600c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80600c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80600c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80600cd:	8b 3c 24             	mov    (%esp),%edi
 80600d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80600d4:	83 c4 0c             	add    $0xc,%esp
 80600d7:	5b                   	pop    %ebx
 80600d8:	5e                   	pop    %esi
 80600d9:	5f                   	pop    %edi
 80600da:	5d                   	pop    %ebp
 80600db:	c3                   	ret    
 80600dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    return fclose_nothrow (fp);

  /* We only need to flush the file if it is not reading or if it is
     seekable.  This only guarantees the file position of input files
     if the fflush module is also in use.  */
  if ((!freading (fp) || lseek (fileno (fp), 0, SEEK_CUR) != -1)
 80600e0:	83 ec 0c             	sub    $0xc,%esp
 80600e3:	56                   	push   %esi
 80600e4:	e8 07 93 fe ff       	call   80493f0 <fileno@plt>
 80600e9:	6a 01                	push   $0x1
 80600eb:	6a 00                	push   $0x0
 80600ed:	6a 00                	push   $0x0
 80600ef:	50                   	push   %eax
 80600f0:	e8 9b 93 fe ff       	call   8049490 <lseek64@plt>
 80600f5:	21 d0                	and    %edx,%eax
 80600f7:	83 c4 20             	add    $0x20,%esp
 80600fa:	83 f8 ff             	cmp    $0xffffffff,%eax
 80600fd:	0f 85 d9 fe ff ff    	jne    805ffdc <rpl_fclose+0x8ec>
 8060103:	90                   	nop
 8060104:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060108:	89 3c 24             	mov    %edi,(%esp)
 806010b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806010f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060113:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060117:	b9 82 76 00 00       	mov    $0x7682,%ecx
 806011c:	e8 27 00 00 00       	call   8060148 <__afl_maybe_log>
 8060121:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060125:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060129:	8b 54 24 04          	mov    0x4(%esp),%edx
 806012d:	8b 3c 24             	mov    (%esp),%edi
 8060130:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060134:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8060138:	89 74 24 20          	mov    %esi,0x20(%esp)
      errno = saved_errno;
      result = EOF;
    }

  return result;
}
 806013c:	83 c4 0c             	add    $0xc,%esp
 806013f:	5b                   	pop    %ebx
 8060140:	5e                   	pop    %esi
 8060141:	5f                   	pop    %edi
 8060142:	5d                   	pop    %ebp
  result = fclose_nothrow (fp);
  if (result == 0)
    _gl_unregister_fd (fd);
# else
  /* No race condition here.  */
  result = fclose_nothrow (fp);
 8060143:	e9 58 90 fe ff       	jmp    80491a0 <fclose@plt>

08060148 <__afl_maybe_log>:
 8060148:	9f                   	lahf   
 8060149:	0f 90 c0             	seto   %al
 806014c:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 8060152:	85 d2                	test   %edx,%edx
 8060154:	74 22                	je     8060178 <__afl_setup>

08060156 <__afl_store>:
 8060156:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 806015c:	31 cf                	xor    %ecx,%edi
 806015e:	d1 e9                	shr    %ecx
 8060160:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 8060166:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 806016a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

0806016e <__afl_return>:
 806016e:	04 7f                	add    $0x7f,%al
 8060170:	9e                   	sahf   
 8060171:	c3                   	ret    
 8060172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08060178 <__afl_setup>:
 8060178:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 806017f:	75 ed                	jne    806016e <__afl_return>
 8060181:	50                   	push   %eax
 8060182:	51                   	push   %ecx
 8060183:	68 80 02 06 08       	push   $0x8060280
 8060188:	e8 23 91 fe ff       	call   80492b0 <getenv@plt>
 806018d:	83 c4 04             	add    $0x4,%esp
 8060190:	85 c0                	test   %eax,%eax
 8060192:	0f 84 db 00 00 00    	je     8060273 <__afl_setup_abort>
 8060198:	50                   	push   %eax
 8060199:	e8 e2 92 fe ff       	call   8049480 <atoi@plt>
 806019e:	83 c4 04             	add    $0x4,%esp
 80601a1:	6a 00                	push   $0x0
 80601a3:	6a 00                	push   $0x0
 80601a5:	50                   	push   %eax
 80601a6:	e8 45 90 fe ff       	call   80491f0 <shmat@plt>
 80601ab:	83 c4 0c             	add    $0xc,%esp
 80601ae:	83 f8 ff             	cmp    $0xffffffff,%eax
 80601b1:	0f 84 bc 00 00 00    	je     8060273 <__afl_setup_abort>
 80601b7:	c6 00 01             	movb   $0x1,(%eax)
 80601ba:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 80601bf:	89 c2                	mov    %eax,%edx
 80601c1:	59                   	pop    %ecx
 80601c2:	58                   	pop    %eax

080601c3 <__afl_forkserver>:
 80601c3:	50                   	push   %eax
 80601c4:	51                   	push   %ecx
 80601c5:	52                   	push   %edx
 80601c6:	6a 04                	push   $0x4
 80601c8:	68 a0 7d 43 08       	push   $0x8437da0
 80601cd:	68 c7 00 00 00       	push   $0xc7
 80601d2:	e8 b9 91 fe ff       	call   8049390 <write@plt>
 80601d7:	83 c4 0c             	add    $0xc,%esp
 80601da:	83 f8 04             	cmp    $0x4,%eax
 80601dd:	75 6e                	jne    806024d <__afl_fork_resume>

080601df <__afl_fork_wait_loop>:
 80601df:	6a 04                	push   $0x4
 80601e1:	68 a0 7d 43 08       	push   $0x8437da0
 80601e6:	68 c6 00 00 00       	push   $0xc6
 80601eb:	e8 20 8f fe ff       	call   8049110 <read@plt>
 80601f0:	83 c4 0c             	add    $0xc,%esp
 80601f3:	83 f8 04             	cmp    $0x4,%eax
 80601f6:	75 74                	jne    806026c <__afl_die>
 80601f8:	e8 23 92 fe ff       	call   8049420 <fork@plt>
 80601fd:	83 f8 00             	cmp    $0x0,%eax
 8060200:	7c 6a                	jl     806026c <__afl_die>
 8060202:	74 49                	je     806024d <__afl_fork_resume>
 8060204:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 8060209:	6a 04                	push   $0x4
 806020b:	68 00 7e 43 08       	push   $0x8437e00
 8060210:	68 c7 00 00 00       	push   $0xc7
 8060215:	e8 76 91 fe ff       	call   8049390 <write@plt>
 806021a:	83 c4 0c             	add    $0xc,%esp
 806021d:	6a 00                	push   $0x0
 806021f:	68 a0 7d 43 08       	push   $0x8437da0
 8060224:	ff 35 00 7e 43 08    	pushl  0x8437e00
 806022a:	e8 11 90 fe ff       	call   8049240 <waitpid@plt>
 806022f:	83 c4 0c             	add    $0xc,%esp
 8060232:	83 f8 00             	cmp    $0x0,%eax
 8060235:	7e 35                	jle    806026c <__afl_die>
 8060237:	6a 04                	push   $0x4
 8060239:	68 a0 7d 43 08       	push   $0x8437da0
 806023e:	68 c7 00 00 00       	push   $0xc7
 8060243:	e8 48 91 fe ff       	call   8049390 <write@plt>
 8060248:	83 c4 0c             	add    $0xc,%esp
 806024b:	eb 92                	jmp    80601df <__afl_fork_wait_loop>

0806024d <__afl_fork_resume>:
 806024d:	68 c6 00 00 00       	push   $0xc6
 8060252:	e8 99 92 fe ff       	call   80494f0 <close@plt>
 8060257:	68 c7 00 00 00       	push   $0xc7
 806025c:	e8 8f 92 fe ff       	call   80494f0 <close@plt>
 8060261:	83 c4 08             	add    $0x8,%esp
 8060264:	5a                   	pop    %edx
 8060265:	59                   	pop    %ecx
 8060266:	58                   	pop    %eax
 8060267:	e9 ea fe ff ff       	jmp    8060156 <__afl_store>

0806026c <__afl_die>:
 806026c:	31 c0                	xor    %eax,%eax
 806026e:	e8 cd 8e fe ff       	call   8049140 <_exit@plt>

08060273 <__afl_setup_abort>:
 8060273:	fe 05 20 7e 43 08    	incb   0x8437e20
 8060279:	59                   	pop    %ecx
 806027a:	58                   	pop    %eax
 806027b:	e9 ee fe ff ff       	jmp    806016e <__afl_return>

08060280 <.AFL_SHM_ENV>:
 8060280:	5f                   	pop    %edi
 8060281:	5f                   	pop    %edi
 8060282:	41                   	inc    %ecx
 8060283:	46                   	inc    %esi
 8060284:	4c                   	dec    %esp
 8060285:	5f                   	pop    %edi
 8060286:	53                   	push   %ebx
 8060287:	48                   	dec    %eax
 8060288:	4d                   	dec    %ebp
 8060289:	5f                   	pop    %edi
 806028a:	49                   	dec    %ecx
 806028b:	44                   	inc    %esp
 806028c:	00 66 90             	add    %ah,-0x70(%esi)
 806028f:	90                   	nop

08060290 <rpl_fflush>:

/* Flush all pending data on STREAM according to POSIX rules.  Both
   output and seekable input streams are supported.  */
int
rpl_fflush (FILE *stream)
{
 8060290:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060294:	89 3c 24             	mov    %edi,(%esp)
 8060297:	89 54 24 04          	mov    %edx,0x4(%esp)
 806029b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806029f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80602a3:	b9 bc 58 00 00       	mov    $0x58bc,%ecx
 80602a8:	e8 8b 07 00 00       	call   8060a38 <__afl_maybe_log>
 80602ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80602b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80602b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80602b9:	8b 3c 24             	mov    (%esp),%edi
 80602bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80602c0:	55                   	push   %ebp
 80602c1:	57                   	push   %edi
 80602c2:	56                   	push   %esi
 80602c3:	53                   	push   %ebx
 80602c4:	83 ec 0c             	sub    $0xc,%esp
 80602c7:	8b 74 24 20          	mov    0x20(%esp),%esi
     fflush in this case.

     We test ! freading (stream) here, rather than fwriting (stream), because
     what we need to know is whether the stream holds a "read buffer", and on
     mingw this is indicated by _IOREAD, regardless of _IOWRT.  */
  if (stream == NULL || ! freading (stream))
 80602cb:	85 f6                	test   %esi,%esi
 80602cd:	74 75                	je     8060344 <rpl_fflush+0xb4>
 80602cf:	90                   	nop
 80602d0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80602d4:	89 3c 24             	mov    %edi,(%esp)
 80602d7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80602db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80602df:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80602e3:	b9 db 68 00 00       	mov    $0x68db,%ecx
 80602e8:	e8 4b 07 00 00       	call   8060a38 <__afl_maybe_log>
 80602ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80602f1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80602f5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80602f9:	8b 3c 24             	mov    (%esp),%edi
 80602fc:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060300:	83 ec 0c             	sub    $0xc,%esp
 8060303:	56                   	push   %esi
 8060304:	e8 d7 8f fe ff       	call   80492e0 <__freading@plt>
 8060309:	83 c4 10             	add    $0x10,%esp
 806030c:	85 c0                	test   %eax,%eax
 806030e:	0f 85 94 06 00 00    	jne    80609a8 <rpl_fflush+0x718>
 8060314:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060318:	89 3c 24             	mov    %edi,(%esp)
 806031b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806031f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060323:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060327:	b9 f3 25 00 00       	mov    $0x25f3,%ecx
 806032c:	e8 07 07 00 00       	call   8060a38 <__afl_maybe_log>
 8060331:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060335:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060339:	8b 54 24 04          	mov    0x4(%esp),%edx
 806033d:	8b 3c 24             	mov    (%esp),%edi
 8060340:	8d 64 24 10          	lea    0x10(%esp),%esp
    return fflush (stream+(lava_get(813))*(0x6c617334==(lava_get(813))||0x3473616c==(lava_get(813)))+(lava_get(815))*(0x6c617332==(lava_get(815))||0x3273616c==(lava_get(815)))+(lava_get(817))*(0x6c617330==(lava_get(817))||0x3073616c==(lava_get(817)))+(lava_get(831))*(0x6c617322==(lava_get(831))||0x2273616c==(lava_get(831)))+(lava_get(832))*(0x6c617321==(lava_get(832))||0x2173616c==(lava_get(832)))+(lava_get(835))*(0x6c61731e==(lava_get(835))||0x1e73616c==(lava_get(835)))+(lava_get(841))*(0x6c617318==(lava_get(841))||0x1873616c==(lava_get(841)))+(lava_get(842))*(0x6c617317==(lava_get(842))||0x1773616c==(lava_get(842)))+(lava_get(843))*(0x6c617316==(lava_get(843))||0x1673616c==(lava_get(843))));
 8060344:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060348:	89 3c 24             	mov    %edi,(%esp)
 806034b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806034f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060353:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060357:	b9 b9 4e 00 00       	mov    $0x4eb9,%ecx
 806035c:	e8 d7 06 00 00       	call   8060a38 <__afl_maybe_log>
 8060361:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060365:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060369:	8b 54 24 04          	mov    0x4(%esp),%edx
 806036d:	8b 3c 24             	mov    (%esp),%edi
 8060370:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060374:	83 ec 0c             	sub    $0xc,%esp
 8060377:	68 2d 03 00 00       	push   $0x32d
 806037c:	e8 df c1 fe ff       	call   804c560 <lava_get>
 8060381:	c7 04 24 2d 03 00 00 	movl   $0x32d,(%esp)
 8060388:	89 c5                	mov    %eax,%ebp
 806038a:	e8 d1 c1 fe ff       	call   804c560 <lava_get>
 806038f:	83 c4 10             	add    $0x10,%esp
 8060392:	3d 34 73 61 6c       	cmp    $0x6c617334,%eax
 8060397:	ba 01 00 00 00       	mov    $0x1,%edx
 806039c:	74 4c                	je     80603ea <rpl_fflush+0x15a>
 806039e:	66 90                	xchg   %ax,%ax
 80603a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80603a4:	89 3c 24             	mov    %edi,(%esp)
 80603a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80603ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80603af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80603b3:	b9 7e 12 00 00       	mov    $0x127e,%ecx
 80603b8:	e8 7b 06 00 00       	call   8060a38 <__afl_maybe_log>
 80603bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80603c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80603c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80603c9:	8b 3c 24             	mov    (%esp),%edi
 80603cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80603d0:	83 ec 0c             	sub    $0xc,%esp
 80603d3:	68 2d 03 00 00       	push   $0x32d
 80603d8:	e8 83 c1 fe ff       	call   804c560 <lava_get>
 80603dd:	31 d2                	xor    %edx,%edx
 80603df:	83 c4 10             	add    $0x10,%esp
 80603e2:	3d 6c 61 73 34       	cmp    $0x3473616c,%eax
 80603e7:	0f 94 c2             	sete   %dl
 80603ea:	66 90                	xchg   %ax,%ax
 80603ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80603f0:	89 3c 24             	mov    %edi,(%esp)
 80603f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80603f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80603fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80603ff:	b9 5f 0c 00 00       	mov    $0xc5f,%ecx
 8060404:	e8 2f 06 00 00       	call   8060a38 <__afl_maybe_log>
 8060409:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806040d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060411:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060415:	8b 3c 24             	mov    (%esp),%edi
 8060418:	8d 64 24 10          	lea    0x10(%esp),%esp
 806041c:	83 ec 0c             	sub    $0xc,%esp
 806041f:	89 d7                	mov    %edx,%edi
 8060421:	68 2f 03 00 00       	push   $0x32f
 8060426:	0f af fd             	imul   %ebp,%edi
 8060429:	e8 32 c1 fe ff       	call   804c560 <lava_get>
 806042e:	c7 04 24 2f 03 00 00 	movl   $0x32f,(%esp)
 8060435:	89 c3                	mov    %eax,%ebx
 8060437:	e8 24 c1 fe ff       	call   804c560 <lava_get>
 806043c:	83 c4 10             	add    $0x10,%esp
 806043f:	3d 32 73 61 6c       	cmp    $0x6c617332,%eax
 8060444:	b9 01 00 00 00       	mov    $0x1,%ecx
 8060449:	74 4b                	je     8060496 <rpl_fflush+0x206>
 806044b:	90                   	nop
 806044c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060450:	89 3c 24             	mov    %edi,(%esp)
 8060453:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060457:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806045b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806045f:	b9 76 f9 00 00       	mov    $0xf976,%ecx
 8060464:	e8 cf 05 00 00       	call   8060a38 <__afl_maybe_log>
 8060469:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806046d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060471:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060475:	8b 3c 24             	mov    (%esp),%edi
 8060478:	8d 64 24 10          	lea    0x10(%esp),%esp
 806047c:	83 ec 0c             	sub    $0xc,%esp
 806047f:	68 2f 03 00 00       	push   $0x32f
 8060484:	e8 d7 c0 fe ff       	call   804c560 <lava_get>
 8060489:	31 c9                	xor    %ecx,%ecx
 806048b:	83 c4 10             	add    $0x10,%esp
 806048e:	3d 6c 61 73 32       	cmp    $0x3273616c,%eax
 8060493:	0f 94 c1             	sete   %cl
 8060496:	66 90                	xchg   %ax,%ax
 8060498:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806049c:	89 3c 24             	mov    %edi,(%esp)
 806049f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80604a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80604a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80604ab:	b9 a4 0d 00 00       	mov    $0xda4,%ecx
 80604b0:	e8 83 05 00 00       	call   8060a38 <__afl_maybe_log>
 80604b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80604b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80604bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80604c1:	8b 3c 24             	mov    (%esp),%edi
 80604c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80604c8:	83 ec 0c             	sub    $0xc,%esp
 80604cb:	0f af d9             	imul   %ecx,%ebx
 80604ce:	68 3f 03 00 00       	push   $0x33f
 80604d3:	e8 88 c0 fe ff       	call   804c560 <lava_get>
 80604d8:	8d 2c 3b             	lea    (%ebx,%edi,1),%ebp
 80604db:	c7 04 24 3f 03 00 00 	movl   $0x33f,(%esp)
 80604e2:	89 c3                	mov    %eax,%ebx
 80604e4:	e8 77 c0 fe ff       	call   804c560 <lava_get>
 80604e9:	83 c4 10             	add    $0x10,%esp
 80604ec:	3d 22 73 61 6c       	cmp    $0x6c617322,%eax
 80604f1:	ba 01 00 00 00       	mov    $0x1,%edx
 80604f6:	74 4a                	je     8060542 <rpl_fflush+0x2b2>
 80604f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80604fc:	89 3c 24             	mov    %edi,(%esp)
 80604ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060503:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060507:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806050b:	b9 9d a9 00 00       	mov    $0xa99d,%ecx
 8060510:	e8 23 05 00 00       	call   8060a38 <__afl_maybe_log>
 8060515:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060519:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806051d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060521:	8b 3c 24             	mov    (%esp),%edi
 8060524:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060528:	83 ec 0c             	sub    $0xc,%esp
 806052b:	68 3f 03 00 00       	push   $0x33f
 8060530:	e8 2b c0 fe ff       	call   804c560 <lava_get>
 8060535:	31 d2                	xor    %edx,%edx
 8060537:	83 c4 10             	add    $0x10,%esp
 806053a:	3d 6c 61 73 22       	cmp    $0x2273616c,%eax
 806053f:	0f 94 c2             	sete   %dl
 8060542:	66 90                	xchg   %ax,%ax
 8060544:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060548:	89 3c 24             	mov    %edi,(%esp)
 806054b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806054f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060553:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060557:	b9 05 94 00 00       	mov    $0x9405,%ecx
 806055c:	e8 d7 04 00 00       	call   8060a38 <__afl_maybe_log>
 8060561:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060565:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060569:	8b 54 24 04          	mov    0x4(%esp),%edx
 806056d:	8b 3c 24             	mov    (%esp),%edi
 8060570:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060574:	83 ec 0c             	sub    $0xc,%esp
 8060577:	68 31 03 00 00       	push   $0x331
 806057c:	0f af da             	imul   %edx,%ebx
 806057f:	e8 dc bf fe ff       	call   804c560 <lava_get>
 8060584:	c7 04 24 31 03 00 00 	movl   $0x331,(%esp)
 806058b:	89 c7                	mov    %eax,%edi
 806058d:	e8 ce bf fe ff       	call   804c560 <lava_get>
 8060592:	83 c4 10             	add    $0x10,%esp
 8060595:	3d 30 73 61 6c       	cmp    $0x6c617330,%eax
 806059a:	b9 01 00 00 00       	mov    $0x1,%ecx
 806059f:	74 4d                	je     80605ee <rpl_fflush+0x35e>
 80605a1:	8d 76 00             	lea    0x0(%esi),%esi
 80605a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80605a8:	89 3c 24             	mov    %edi,(%esp)
 80605ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80605af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80605b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80605b7:	b9 71 aa 00 00       	mov    $0xaa71,%ecx
 80605bc:	e8 77 04 00 00       	call   8060a38 <__afl_maybe_log>
 80605c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80605c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80605c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80605cd:	8b 3c 24             	mov    (%esp),%edi
 80605d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80605d4:	83 ec 0c             	sub    $0xc,%esp
 80605d7:	68 31 03 00 00       	push   $0x331
 80605dc:	e8 7f bf fe ff       	call   804c560 <lava_get>
 80605e1:	31 c9                	xor    %ecx,%ecx
 80605e3:	83 c4 10             	add    $0x10,%esp
 80605e6:	3d 6c 61 73 30       	cmp    $0x3073616c,%eax
 80605eb:	0f 94 c1             	sete   %cl
 80605ee:	66 90                	xchg   %ax,%ax
 80605f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80605f4:	89 3c 24             	mov    %edi,(%esp)
 80605f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80605fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80605ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060603:	b9 f2 81 00 00       	mov    $0x81f2,%ecx
 8060608:	e8 2b 04 00 00       	call   8060a38 <__afl_maybe_log>
 806060d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060611:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060615:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060619:	8b 3c 24             	mov    (%esp),%edi
 806061c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060620:	83 ec 0c             	sub    $0xc,%esp
 8060623:	01 eb                	add    %ebp,%ebx
 8060625:	0f af f9             	imul   %ecx,%edi
 8060628:	68 43 03 00 00       	push   $0x343
 806062d:	e8 2e bf fe ff       	call   804c560 <lava_get>
 8060632:	01 fb                	add    %edi,%ebx
 8060634:	c7 04 24 43 03 00 00 	movl   $0x343,(%esp)
 806063b:	89 c5                	mov    %eax,%ebp
 806063d:	e8 1e bf fe ff       	call   804c560 <lava_get>
 8060642:	83 c4 10             	add    $0x10,%esp
 8060645:	3d 1e 73 61 6c       	cmp    $0x6c61731e,%eax
 806064a:	ba 01 00 00 00       	mov    $0x1,%edx
 806064f:	74 4d                	je     806069e <rpl_fflush+0x40e>
 8060651:	8d 76 00             	lea    0x0(%esi),%esi
 8060654:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060658:	89 3c 24             	mov    %edi,(%esp)
 806065b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806065f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060663:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060667:	b9 5a 37 00 00       	mov    $0x375a,%ecx
 806066c:	e8 c7 03 00 00       	call   8060a38 <__afl_maybe_log>
 8060671:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060675:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060679:	8b 54 24 04          	mov    0x4(%esp),%edx
 806067d:	8b 3c 24             	mov    (%esp),%edi
 8060680:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060684:	83 ec 0c             	sub    $0xc,%esp
 8060687:	68 43 03 00 00       	push   $0x343
 806068c:	e8 cf be fe ff       	call   804c560 <lava_get>
 8060691:	31 d2                	xor    %edx,%edx
 8060693:	83 c4 10             	add    $0x10,%esp
 8060696:	3d 6c 61 73 1e       	cmp    $0x1e73616c,%eax
 806069b:	0f 94 c2             	sete   %dl
 806069e:	66 90                	xchg   %ax,%ax
 80606a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80606a4:	89 3c 24             	mov    %edi,(%esp)
 80606a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80606ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80606af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80606b3:	b9 2a cc 00 00       	mov    $0xcc2a,%ecx
 80606b8:	e8 7b 03 00 00       	call   8060a38 <__afl_maybe_log>
 80606bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80606c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80606c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80606c9:	8b 3c 24             	mov    (%esp),%edi
 80606cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80606d0:	83 ec 0c             	sub    $0xc,%esp
 80606d3:	68 40 03 00 00       	push   $0x340
 80606d8:	0f af ea             	imul   %edx,%ebp
 80606db:	e8 80 be fe ff       	call   804c560 <lava_get>
 80606e0:	c7 04 24 40 03 00 00 	movl   $0x340,(%esp)
 80606e7:	89 c7                	mov    %eax,%edi
 80606e9:	e8 72 be fe ff       	call   804c560 <lava_get>
 80606ee:	83 c4 10             	add    $0x10,%esp
 80606f1:	3d 21 73 61 6c       	cmp    $0x6c617321,%eax
 80606f6:	b9 01 00 00 00       	mov    $0x1,%ecx
 80606fb:	74 4d                	je     806074a <rpl_fflush+0x4ba>
 80606fd:	8d 76 00             	lea    0x0(%esi),%esi
 8060700:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060704:	89 3c 24             	mov    %edi,(%esp)
 8060707:	89 54 24 04          	mov    %edx,0x4(%esp)
 806070b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806070f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060713:	b9 56 2a 00 00       	mov    $0x2a56,%ecx
 8060718:	e8 1b 03 00 00       	call   8060a38 <__afl_maybe_log>
 806071d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060721:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060725:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060729:	8b 3c 24             	mov    (%esp),%edi
 806072c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060730:	83 ec 0c             	sub    $0xc,%esp
 8060733:	68 40 03 00 00       	push   $0x340
 8060738:	e8 23 be fe ff       	call   804c560 <lava_get>
 806073d:	31 c9                	xor    %ecx,%ecx
 806073f:	83 c4 10             	add    $0x10,%esp
 8060742:	3d 6c 61 73 21       	cmp    $0x2173616c,%eax
 8060747:	0f 94 c1             	sete   %cl
 806074a:	66 90                	xchg   %ax,%ax
 806074c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060750:	89 3c 24             	mov    %edi,(%esp)
 8060753:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060757:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806075b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806075f:	b9 58 00 00 00       	mov    $0x58,%ecx
 8060764:	e8 cf 02 00 00       	call   8060a38 <__afl_maybe_log>
 8060769:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806076d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060771:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060775:	8b 3c 24             	mov    (%esp),%edi
 8060778:	8d 64 24 10          	lea    0x10(%esp),%esp
 806077c:	83 ec 0c             	sub    $0xc,%esp
 806077f:	01 dd                	add    %ebx,%ebp
 8060781:	0f af f9             	imul   %ecx,%edi
 8060784:	68 4a 03 00 00       	push   $0x34a
 8060789:	e8 d2 bd fe ff       	call   804c560 <lava_get>
 806078e:	8d 5c 3d 00          	lea    0x0(%ebp,%edi,1),%ebx
 8060792:	c7 04 24 4a 03 00 00 	movl   $0x34a,(%esp)
 8060799:	89 c7                	mov    %eax,%edi
 806079b:	e8 c0 bd fe ff       	call   804c560 <lava_get>
 80607a0:	83 c4 10             	add    $0x10,%esp
 80607a3:	3d 17 73 61 6c       	cmp    $0x6c617317,%eax
 80607a8:	ba 01 00 00 00       	mov    $0x1,%edx
 80607ad:	74 4b                	je     80607fa <rpl_fflush+0x56a>
 80607af:	90                   	nop
 80607b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80607b4:	89 3c 24             	mov    %edi,(%esp)
 80607b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80607bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80607bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80607c3:	b9 8d a1 00 00       	mov    $0xa18d,%ecx
 80607c8:	e8 6b 02 00 00       	call   8060a38 <__afl_maybe_log>
 80607cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80607d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80607d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80607d9:	8b 3c 24             	mov    (%esp),%edi
 80607dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80607e0:	83 ec 0c             	sub    $0xc,%esp
 80607e3:	68 4a 03 00 00       	push   $0x34a
 80607e8:	e8 73 bd fe ff       	call   804c560 <lava_get>
 80607ed:	31 d2                	xor    %edx,%edx
 80607ef:	83 c4 10             	add    $0x10,%esp
 80607f2:	3d 6c 61 73 17       	cmp    $0x1773616c,%eax
 80607f7:	0f 94 c2             	sete   %dl
 80607fa:	66 90                	xchg   %ax,%ax
 80607fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060800:	89 3c 24             	mov    %edi,(%esp)
 8060803:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060807:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806080b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806080f:	b9 b8 43 00 00       	mov    $0x43b8,%ecx
 8060814:	e8 1f 02 00 00       	call   8060a38 <__afl_maybe_log>
 8060819:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806081d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060821:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060825:	8b 3c 24             	mov    (%esp),%edi
 8060828:	8d 64 24 10          	lea    0x10(%esp),%esp
 806082c:	83 ec 0c             	sub    $0xc,%esp
 806082f:	68 49 03 00 00       	push   $0x349
 8060834:	0f af fa             	imul   %edx,%edi
 8060837:	e8 24 bd fe ff       	call   804c560 <lava_get>
 806083c:	c7 04 24 49 03 00 00 	movl   $0x349,(%esp)
 8060843:	89 c5                	mov    %eax,%ebp
 8060845:	e8 16 bd fe ff       	call   804c560 <lava_get>
 806084a:	83 c4 10             	add    $0x10,%esp
 806084d:	3d 18 73 61 6c       	cmp    $0x6c617318,%eax
 8060852:	b9 01 00 00 00       	mov    $0x1,%ecx
 8060857:	74 4d                	je     80608a6 <rpl_fflush+0x616>
 8060859:	8d 76 00             	lea    0x0(%esi),%esi
 806085c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060860:	89 3c 24             	mov    %edi,(%esp)
 8060863:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060867:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806086b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806086f:	b9 2f e5 00 00       	mov    $0xe52f,%ecx
 8060874:	e8 bf 01 00 00       	call   8060a38 <__afl_maybe_log>
 8060879:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806087d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060881:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060885:	8b 3c 24             	mov    (%esp),%edi
 8060888:	8d 64 24 10          	lea    0x10(%esp),%esp
 806088c:	83 ec 0c             	sub    $0xc,%esp
 806088f:	68 49 03 00 00       	push   $0x349
 8060894:	e8 c7 bc fe ff       	call   804c560 <lava_get>
 8060899:	31 c9                	xor    %ecx,%ecx
 806089b:	83 c4 10             	add    $0x10,%esp
 806089e:	3d 6c 61 73 18       	cmp    $0x1873616c,%eax
 80608a3:	0f 94 c1             	sete   %cl
 80608a6:	66 90                	xchg   %ax,%ax
 80608a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80608ac:	89 3c 24             	mov    %edi,(%esp)
 80608af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80608b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80608b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80608bb:	b9 bb 6f 00 00       	mov    $0x6fbb,%ecx
 80608c0:	e8 73 01 00 00       	call   8060a38 <__afl_maybe_log>
 80608c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80608c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80608cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80608d1:	8b 3c 24             	mov    (%esp),%edi
 80608d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80608d8:	83 ec 0c             	sub    $0xc,%esp
 80608db:	01 fb                	add    %edi,%ebx
 80608dd:	0f af e9             	imul   %ecx,%ebp
 80608e0:	68 4b 03 00 00       	push   $0x34b
 80608e5:	e8 76 bc fe ff       	call   804c560 <lava_get>
 80608ea:	8d 3c 2b             	lea    (%ebx,%ebp,1),%edi
 80608ed:	c7 04 24 4b 03 00 00 	movl   $0x34b,(%esp)
 80608f4:	89 c3                	mov    %eax,%ebx
 80608f6:	e8 65 bc fe ff       	call   804c560 <lava_get>
 80608fb:	83 c4 10             	add    $0x10,%esp
 80608fe:	3d 16 73 61 6c       	cmp    $0x6c617316,%eax
 8060903:	ba 01 00 00 00       	mov    $0x1,%edx
 8060908:	74 4c                	je     8060956 <rpl_fflush+0x6c6>
 806090a:	66 90                	xchg   %ax,%ax
 806090c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060910:	89 3c 24             	mov    %edi,(%esp)
 8060913:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806091b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806091f:	b9 03 69 00 00       	mov    $0x6903,%ecx
 8060924:	e8 0f 01 00 00       	call   8060a38 <__afl_maybe_log>
 8060929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806092d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060931:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060935:	8b 3c 24             	mov    (%esp),%edi
 8060938:	8d 64 24 10          	lea    0x10(%esp),%esp
 806093c:	83 ec 0c             	sub    $0xc,%esp
 806093f:	68 4b 03 00 00       	push   $0x34b
 8060944:	e8 17 bc fe ff       	call   804c560 <lava_get>
 8060949:	31 d2                	xor    %edx,%edx
 806094b:	83 c4 10             	add    $0x10,%esp
 806094e:	3d 6c 61 73 16       	cmp    $0x1673616c,%eax
 8060953:	0f 94 c2             	sete   %dl
 8060956:	66 90                	xchg   %ax,%ax
 8060958:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806095c:	89 3c 24             	mov    %edi,(%esp)
 806095f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060963:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060967:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806096b:	b9 bb 77 00 00       	mov    $0x77bb,%ecx
 8060970:	e8 c3 00 00 00       	call   8060a38 <__afl_maybe_log>
 8060975:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060979:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806097d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060981:	8b 3c 24             	mov    (%esp),%edi
 8060984:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060988:	0f af da             	imul   %edx,%ebx
 806098b:	01 fb                	add    %edi,%ebx
 806098d:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
 8060993:	01 f0                	add    %esi,%eax
 8060995:	89 44 24 20          	mov    %eax,0x20(%esp)
    return 0;

# endif
  }
#endif
}
 8060999:	83 c4 0c             	add    $0xc,%esp
 806099c:	5b                   	pop    %ebx
 806099d:	5e                   	pop    %esi
 806099e:	5f                   	pop    %edi
 806099f:	5d                   	pop    %ebp

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream);

  return fflush (stream);
 80609a0:	e9 8b 87 fe ff       	jmp    8049130 <fflush@plt>
 80609a5:	8d 76 00             	lea    0x0(%esi),%esi

/* Clear the stream's ungetc buffer, preserving the value of ftello (fp).  */
static void
clear_ungetc_buffer_preserving_position (FILE *fp)
{
  if (fp->_flags & _IO_IN_BACKUP)
 80609a8:	f7 06 00 01 00 00    	testl  $0x100,(%esi)
 80609ae:	75 70                	jne    8060a20 <rpl_fflush+0x790>
 80609b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80609b4:	89 3c 24             	mov    %edi,(%esp)
 80609b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80609bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80609bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80609c3:	b9 5f 85 00 00       	mov    $0x855f,%ecx
 80609c8:	e8 6b 00 00 00       	call   8060a38 <__afl_maybe_log>
 80609cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80609d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80609d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80609d9:	8b 3c 24             	mov    (%esp),%edi
 80609dc:	8d 64 24 10          	lea    0x10(%esp),%esp

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream);

  return fflush (stream);
 80609e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80609e4:	89 3c 24             	mov    %edi,(%esp)
 80609e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80609eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80609ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80609f3:	b9 6e 32 00 00       	mov    $0x326e,%ecx
 80609f8:	e8 3b 00 00 00       	call   8060a38 <__afl_maybe_log>
 80609fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060a01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060a05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060a09:	8b 3c 24             	mov    (%esp),%edi
 8060a0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060a10:	89 74 24 20          	mov    %esi,0x20(%esp)
    return 0;

# endif
  }
#endif
}
 8060a14:	83 c4 0c             	add    $0xc,%esp
 8060a17:	5b                   	pop    %ebx
 8060a18:	5e                   	pop    %esi
 8060a19:	5f                   	pop    %edi
 8060a1a:	5d                   	pop    %ebp

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

  clear_ungetc_buffer_preserving_position (stream);

  return fflush (stream);
 8060a1b:	e9 10 87 fe ff       	jmp    8049130 <fflush@plt>
static void
clear_ungetc_buffer_preserving_position (FILE *fp)
{
  if (fp->_flags & _IO_IN_BACKUP)
    /* _IO_free_backup_area is a bit complicated.  Simply call fseek.  */
    fseeko (fp, 0, SEEK_CUR);
 8060a20:	6a 01                	push   $0x1
 8060a22:	6a 00                	push   $0x0
 8060a24:	6a 00                	push   $0x0
 8060a26:	56                   	push   %esi
 8060a27:	e8 54 01 00 00       	call   8060b80 <rpl_fseeko>
 8060a2c:	83 c4 10             	add    $0x10,%esp
 8060a2f:	eb af                	jmp    80609e0 <rpl_fflush+0x750>
 8060a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08060a38 <__afl_maybe_log>:
 8060a38:	9f                   	lahf   
 8060a39:	0f 90 c0             	seto   %al
 8060a3c:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 8060a42:	85 d2                	test   %edx,%edx
 8060a44:	74 22                	je     8060a68 <__afl_setup>

08060a46 <__afl_store>:
 8060a46:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 8060a4c:	31 cf                	xor    %ecx,%edi
 8060a4e:	d1 e9                	shr    %ecx
 8060a50:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 8060a56:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8060a5a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08060a5e <__afl_return>:
 8060a5e:	04 7f                	add    $0x7f,%al
 8060a60:	9e                   	sahf   
 8060a61:	c3                   	ret    
 8060a62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08060a68 <__afl_setup>:
 8060a68:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 8060a6f:	75 ed                	jne    8060a5e <__afl_return>
 8060a71:	50                   	push   %eax
 8060a72:	51                   	push   %ecx
 8060a73:	68 70 0b 06 08       	push   $0x8060b70
 8060a78:	e8 33 88 fe ff       	call   80492b0 <getenv@plt>
 8060a7d:	83 c4 04             	add    $0x4,%esp
 8060a80:	85 c0                	test   %eax,%eax
 8060a82:	0f 84 db 00 00 00    	je     8060b63 <__afl_setup_abort>
 8060a88:	50                   	push   %eax
 8060a89:	e8 f2 89 fe ff       	call   8049480 <atoi@plt>
 8060a8e:	83 c4 04             	add    $0x4,%esp
 8060a91:	6a 00                	push   $0x0
 8060a93:	6a 00                	push   $0x0
 8060a95:	50                   	push   %eax
 8060a96:	e8 55 87 fe ff       	call   80491f0 <shmat@plt>
 8060a9b:	83 c4 0c             	add    $0xc,%esp
 8060a9e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8060aa1:	0f 84 bc 00 00 00    	je     8060b63 <__afl_setup_abort>
 8060aa7:	c6 00 01             	movb   $0x1,(%eax)
 8060aaa:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 8060aaf:	89 c2                	mov    %eax,%edx
 8060ab1:	59                   	pop    %ecx
 8060ab2:	58                   	pop    %eax

08060ab3 <__afl_forkserver>:
 8060ab3:	50                   	push   %eax
 8060ab4:	51                   	push   %ecx
 8060ab5:	52                   	push   %edx
 8060ab6:	6a 04                	push   $0x4
 8060ab8:	68 a0 7d 43 08       	push   $0x8437da0
 8060abd:	68 c7 00 00 00       	push   $0xc7
 8060ac2:	e8 c9 88 fe ff       	call   8049390 <write@plt>
 8060ac7:	83 c4 0c             	add    $0xc,%esp
 8060aca:	83 f8 04             	cmp    $0x4,%eax
 8060acd:	75 6e                	jne    8060b3d <__afl_fork_resume>

08060acf <__afl_fork_wait_loop>:
 8060acf:	6a 04                	push   $0x4
 8060ad1:	68 a0 7d 43 08       	push   $0x8437da0
 8060ad6:	68 c6 00 00 00       	push   $0xc6
 8060adb:	e8 30 86 fe ff       	call   8049110 <read@plt>
 8060ae0:	83 c4 0c             	add    $0xc,%esp
 8060ae3:	83 f8 04             	cmp    $0x4,%eax
 8060ae6:	75 74                	jne    8060b5c <__afl_die>
 8060ae8:	e8 33 89 fe ff       	call   8049420 <fork@plt>
 8060aed:	83 f8 00             	cmp    $0x0,%eax
 8060af0:	7c 6a                	jl     8060b5c <__afl_die>
 8060af2:	74 49                	je     8060b3d <__afl_fork_resume>
 8060af4:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 8060af9:	6a 04                	push   $0x4
 8060afb:	68 00 7e 43 08       	push   $0x8437e00
 8060b00:	68 c7 00 00 00       	push   $0xc7
 8060b05:	e8 86 88 fe ff       	call   8049390 <write@plt>
 8060b0a:	83 c4 0c             	add    $0xc,%esp
 8060b0d:	6a 00                	push   $0x0
 8060b0f:	68 a0 7d 43 08       	push   $0x8437da0
 8060b14:	ff 35 00 7e 43 08    	pushl  0x8437e00
 8060b1a:	e8 21 87 fe ff       	call   8049240 <waitpid@plt>
 8060b1f:	83 c4 0c             	add    $0xc,%esp
 8060b22:	83 f8 00             	cmp    $0x0,%eax
 8060b25:	7e 35                	jle    8060b5c <__afl_die>
 8060b27:	6a 04                	push   $0x4
 8060b29:	68 a0 7d 43 08       	push   $0x8437da0
 8060b2e:	68 c7 00 00 00       	push   $0xc7
 8060b33:	e8 58 88 fe ff       	call   8049390 <write@plt>
 8060b38:	83 c4 0c             	add    $0xc,%esp
 8060b3b:	eb 92                	jmp    8060acf <__afl_fork_wait_loop>

08060b3d <__afl_fork_resume>:
 8060b3d:	68 c6 00 00 00       	push   $0xc6
 8060b42:	e8 a9 89 fe ff       	call   80494f0 <close@plt>
 8060b47:	68 c7 00 00 00       	push   $0xc7
 8060b4c:	e8 9f 89 fe ff       	call   80494f0 <close@plt>
 8060b51:	83 c4 08             	add    $0x8,%esp
 8060b54:	5a                   	pop    %edx
 8060b55:	59                   	pop    %ecx
 8060b56:	58                   	pop    %eax
 8060b57:	e9 ea fe ff ff       	jmp    8060a46 <__afl_store>

08060b5c <__afl_die>:
 8060b5c:	31 c0                	xor    %eax,%eax
 8060b5e:	e8 dd 85 fe ff       	call   8049140 <_exit@plt>

08060b63 <__afl_setup_abort>:
 8060b63:	fe 05 20 7e 43 08    	incb   0x8437e20
 8060b69:	59                   	pop    %ecx
 8060b6a:	58                   	pop    %eax
 8060b6b:	e9 ee fe ff ff       	jmp    8060a5e <__afl_return>

08060b70 <.AFL_SHM_ENV>:
 8060b70:	5f                   	pop    %edi
 8060b71:	5f                   	pop    %edi
 8060b72:	41                   	inc    %ecx
 8060b73:	46                   	inc    %esi
 8060b74:	4c                   	dec    %esp
 8060b75:	5f                   	pop    %edi
 8060b76:	53                   	push   %ebx
 8060b77:	48                   	dec    %eax
 8060b78:	4d                   	dec    %ebp
 8060b79:	5f                   	pop    %edi
 8060b7a:	49                   	dec    %ecx
 8060b7b:	44                   	inc    %esp
 8060b7c:	00 66 90             	add    %ah,-0x70(%esi)
 8060b7f:	90                   	nop

08060b80 <rpl_fseeko>:
#  define fseeko _fseeki64
# else /* mingw */
#  define fseeko fseeko64
# endif
#endif
{
 8060b80:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060b84:	89 3c 24             	mov    %edi,(%esp)
 8060b87:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060b8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060b8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060b93:	b9 72 7b 00 00       	mov    $0x7b72,%ecx
 8060b98:	e8 f3 01 00 00       	call   8060d90 <__afl_maybe_log>
 8060b9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060ba1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060ba5:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060ba9:	8b 3c 24             	mov    (%esp),%edi
 8060bac:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060bb0:	55                   	push   %ebp
 8060bb1:	57                   	push   %edi
 8060bb2:	56                   	push   %esi
 8060bb3:	53                   	push   %ebx
 8060bb4:	83 ec 0c             	sub    $0xc,%esp
 8060bb7:	8b 5c 24 20          	mov    0x20(%esp),%ebx
 8060bbb:	8b 74 24 24          	mov    0x24(%esp),%esi
 8060bbf:	8b 7c 24 28          	mov    0x28(%esp),%edi
 8060bc3:	8b 6c 24 2c          	mov    0x2c(%esp),%ebp
    return EOF;
#endif

  /* These tests are based on fpurge.c.  */
#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
  if (fp->_IO_read_end == fp->_IO_read_ptr
 8060bc7:	8b 43 04             	mov    0x4(%ebx),%eax
 8060bca:	39 43 08             	cmp    %eax,0x8(%ebx)
 8060bcd:	0f 84 7d 00 00 00    	je     8060c50 <rpl_fseeko+0xd0>
 8060bd3:	90                   	nop
 8060bd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060bd8:	89 3c 24             	mov    %edi,(%esp)
 8060bdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060bdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060be3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060be7:	b9 32 3a 00 00       	mov    $0x3a32,%ecx
 8060bec:	e8 9f 01 00 00       	call   8060d90 <__afl_maybe_log>
 8060bf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060bf5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060bf9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060bfd:	8b 3c 24             	mov    (%esp),%edi
 8060c00:	8d 64 24 10          	lea    0x10(%esp),%esp
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
 8060c04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060c08:	89 3c 24             	mov    %edi,(%esp)
 8060c0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060c0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060c13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060c17:	b9 7d 01 00 00       	mov    $0x17d,%ecx
 8060c1c:	e8 6f 01 00 00       	call   8060d90 <__afl_maybe_log>
 8060c21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060c25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060c29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060c2d:	8b 3c 24             	mov    (%esp),%edi
 8060c30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060c34:	89 6c 24 2c          	mov    %ebp,0x2c(%esp)
 8060c38:	89 74 24 24          	mov    %esi,0x24(%esp)
 8060c3c:	89 7c 24 28          	mov    %edi,0x28(%esp)
 8060c40:	89 5c 24 20          	mov    %ebx,0x20(%esp)
}
 8060c44:	83 c4 0c             	add    $0xc,%esp
 8060c47:	5b                   	pop    %ebx
 8060c48:	5e                   	pop    %esi
 8060c49:	5f                   	pop    %edi
 8060c4a:	5d                   	pop    %ebp
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
 8060c4b:	e9 60 85 fe ff       	jmp    80491b0 <fseeko64@plt>
#endif

  /* These tests are based on fpurge.c.  */
#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
  if (fp->_IO_read_end == fp->_IO_read_ptr
      && fp->_IO_write_ptr == fp->_IO_write_base
 8060c50:	8b 53 10             	mov    0x10(%ebx),%edx
 8060c53:	39 53 14             	cmp    %edx,0x14(%ebx)
 8060c56:	75 ac                	jne    8060c04 <rpl_fseeko+0x84>
 8060c58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060c5c:	89 3c 24             	mov    %edi,(%esp)
 8060c5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060c63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060c67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060c6b:	b9 5b 56 00 00       	mov    $0x565b,%ecx
 8060c70:	e8 1b 01 00 00       	call   8060d90 <__afl_maybe_log>
 8060c75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060c79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060c7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060c81:	8b 3c 24             	mov    (%esp),%edi
 8060c84:	8d 64 24 10          	lea    0x10(%esp),%esp
      && fp->_IO_save_base == NULL)
 8060c88:	8b 4b 24             	mov    0x24(%ebx),%ecx
 8060c8b:	85 c9                	test   %ecx,%ecx
 8060c8d:	0f 85 71 ff ff ff    	jne    8060c04 <rpl_fseeko+0x84>
 8060c93:	90                   	nop
 8060c94:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060c98:	89 3c 24             	mov    %edi,(%esp)
 8060c9b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060c9f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060ca3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060ca7:	b9 ec 87 00 00       	mov    $0x87ec,%ecx
 8060cac:	e8 df 00 00 00       	call   8060d90 <__afl_maybe_log>
 8060cb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060cb5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060cb9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060cbd:	8b 3c 24             	mov    (%esp),%edi
 8060cc0:	8d 64 24 10          	lea    0x10(%esp),%esp
#endif
    {
      /* We get here when an fflush() call immediately preceded this one (or
         if ftell() has created buffers but no I/O has occurred on a
         newly-opened stream).  We know there are no buffers.  */
      off_t pos = lseek (fileno (fp), offset, whence);
 8060cc4:	83 ec 0c             	sub    $0xc,%esp
 8060cc7:	53                   	push   %ebx
 8060cc8:	e8 23 87 fe ff       	call   80493f0 <fileno@plt>
 8060ccd:	55                   	push   %ebp
 8060cce:	57                   	push   %edi
 8060ccf:	56                   	push   %esi
 8060cd0:	50                   	push   %eax
 8060cd1:	e8 ba 87 fe ff       	call   8049490 <lseek64@plt>
      if (pos == -1)
 8060cd6:	89 c6                	mov    %eax,%esi
 8060cd8:	83 c4 20             	add    $0x20,%esp
 8060cdb:	21 d6                	and    %edx,%esi
 8060cdd:	83 fe ff             	cmp    $0xffffffff,%esi
 8060ce0:	74 76                	je     8060d58 <rpl_fseeko+0x1d8>
 8060ce2:	66 90                	xchg   %ax,%ax
 8060ce4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060ce8:	89 3c 24             	mov    %edi,(%esp)
 8060ceb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060cef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060cf3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060cf7:	b9 53 e7 00 00       	mov    $0xe753,%ecx
 8060cfc:	e8 8f 00 00 00       	call   8060d90 <__afl_maybe_log>
 8060d01:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060d05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060d09:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060d0d:	8b 3c 24             	mov    (%esp),%edi
 8060d10:	8d 64 24 10          	lea    0x10(%esp),%esp
#endif
          return -1;
        }

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
      fp->_flags &= ~_IO_EOF_SEEN;
 8060d14:	83 23 ef             	andl   $0xffffffef,(%ebx)
      fp->_offset = pos;
 8060d17:	89 43 4c             	mov    %eax,0x4c(%ebx)
      fp->_flag &= ~_IOEOF;
#elif defined __MINT__              /* Atari FreeMiNT */
      fp->__offset = pos;
      fp->__eof = 0;
#endif
      return 0;
 8060d1a:	31 c0                	xor    %eax,%eax
          return -1;
        }

#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
      fp->_flags &= ~_IO_EOF_SEEN;
      fp->_offset = pos;
 8060d1c:	89 53 50             	mov    %edx,0x50(%ebx)
 8060d1f:	90                   	nop
      fp->__eof = 0;
#endif
      return 0;
    }
  return fseeko (fp, offset, whence);
}
 8060d20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060d24:	89 3c 24             	mov    %edi,(%esp)
 8060d27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060d2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060d2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060d33:	b9 c4 d7 00 00       	mov    $0xd7c4,%ecx
 8060d38:	e8 53 00 00 00       	call   8060d90 <__afl_maybe_log>
 8060d3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060d41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060d45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060d49:	8b 3c 24             	mov    (%esp),%edi
 8060d4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060d50:	83 c4 0c             	add    $0xc,%esp
 8060d53:	5b                   	pop    %ebx
 8060d54:	5e                   	pop    %esi
 8060d55:	5f                   	pop    %edi
 8060d56:	5d                   	pop    %ebp
 8060d57:	c3                   	ret    
        {
#if defined __sferror || defined __DragonFly__ || defined __ANDROID__
          /* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin, Android */
          fp_->_flags &= ~__SOFF;
#endif
          return -1;
 8060d58:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060d5c:	89 3c 24             	mov    %edi,(%esp)
 8060d5f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060d63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060d67:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060d6b:	b9 d0 10 00 00       	mov    $0x10d0,%ecx
 8060d70:	e8 1b 00 00 00       	call   8060d90 <__afl_maybe_log>
 8060d75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060d79:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060d7d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060d81:	8b 3c 24             	mov    (%esp),%edi
 8060d84:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060d88:	83 c8 ff             	or     $0xffffffff,%eax
 8060d8b:	eb 92                	jmp    8060d1f <rpl_fseeko+0x19f>
 8060d8d:	8d 76 00             	lea    0x0(%esi),%esi

08060d90 <__afl_maybe_log>:
 8060d90:	9f                   	lahf   
 8060d91:	0f 90 c0             	seto   %al
 8060d94:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 8060d9a:	85 d2                	test   %edx,%edx
 8060d9c:	74 22                	je     8060dc0 <__afl_setup>

08060d9e <__afl_store>:
 8060d9e:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 8060da4:	31 cf                	xor    %ecx,%edi
 8060da6:	d1 e9                	shr    %ecx
 8060da8:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 8060dae:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8060db2:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08060db6 <__afl_return>:
 8060db6:	04 7f                	add    $0x7f,%al
 8060db8:	9e                   	sahf   
 8060db9:	c3                   	ret    
 8060dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08060dc0 <__afl_setup>:
 8060dc0:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 8060dc7:	75 ed                	jne    8060db6 <__afl_return>
 8060dc9:	50                   	push   %eax
 8060dca:	51                   	push   %ecx
 8060dcb:	68 c8 0e 06 08       	push   $0x8060ec8
 8060dd0:	e8 db 84 fe ff       	call   80492b0 <getenv@plt>
 8060dd5:	83 c4 04             	add    $0x4,%esp
 8060dd8:	85 c0                	test   %eax,%eax
 8060dda:	0f 84 db 00 00 00    	je     8060ebb <__afl_setup_abort>
 8060de0:	50                   	push   %eax
 8060de1:	e8 9a 86 fe ff       	call   8049480 <atoi@plt>
 8060de6:	83 c4 04             	add    $0x4,%esp
 8060de9:	6a 00                	push   $0x0
 8060deb:	6a 00                	push   $0x0
 8060ded:	50                   	push   %eax
 8060dee:	e8 fd 83 fe ff       	call   80491f0 <shmat@plt>
 8060df3:	83 c4 0c             	add    $0xc,%esp
 8060df6:	83 f8 ff             	cmp    $0xffffffff,%eax
 8060df9:	0f 84 bc 00 00 00    	je     8060ebb <__afl_setup_abort>
 8060dff:	c6 00 01             	movb   $0x1,(%eax)
 8060e02:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 8060e07:	89 c2                	mov    %eax,%edx
 8060e09:	59                   	pop    %ecx
 8060e0a:	58                   	pop    %eax

08060e0b <__afl_forkserver>:
 8060e0b:	50                   	push   %eax
 8060e0c:	51                   	push   %ecx
 8060e0d:	52                   	push   %edx
 8060e0e:	6a 04                	push   $0x4
 8060e10:	68 a0 7d 43 08       	push   $0x8437da0
 8060e15:	68 c7 00 00 00       	push   $0xc7
 8060e1a:	e8 71 85 fe ff       	call   8049390 <write@plt>
 8060e1f:	83 c4 0c             	add    $0xc,%esp
 8060e22:	83 f8 04             	cmp    $0x4,%eax
 8060e25:	75 6e                	jne    8060e95 <__afl_fork_resume>

08060e27 <__afl_fork_wait_loop>:
 8060e27:	6a 04                	push   $0x4
 8060e29:	68 a0 7d 43 08       	push   $0x8437da0
 8060e2e:	68 c6 00 00 00       	push   $0xc6
 8060e33:	e8 d8 82 fe ff       	call   8049110 <read@plt>
 8060e38:	83 c4 0c             	add    $0xc,%esp
 8060e3b:	83 f8 04             	cmp    $0x4,%eax
 8060e3e:	75 74                	jne    8060eb4 <__afl_die>
 8060e40:	e8 db 85 fe ff       	call   8049420 <fork@plt>
 8060e45:	83 f8 00             	cmp    $0x0,%eax
 8060e48:	7c 6a                	jl     8060eb4 <__afl_die>
 8060e4a:	74 49                	je     8060e95 <__afl_fork_resume>
 8060e4c:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 8060e51:	6a 04                	push   $0x4
 8060e53:	68 00 7e 43 08       	push   $0x8437e00
 8060e58:	68 c7 00 00 00       	push   $0xc7
 8060e5d:	e8 2e 85 fe ff       	call   8049390 <write@plt>
 8060e62:	83 c4 0c             	add    $0xc,%esp
 8060e65:	6a 00                	push   $0x0
 8060e67:	68 a0 7d 43 08       	push   $0x8437da0
 8060e6c:	ff 35 00 7e 43 08    	pushl  0x8437e00
 8060e72:	e8 c9 83 fe ff       	call   8049240 <waitpid@plt>
 8060e77:	83 c4 0c             	add    $0xc,%esp
 8060e7a:	83 f8 00             	cmp    $0x0,%eax
 8060e7d:	7e 35                	jle    8060eb4 <__afl_die>
 8060e7f:	6a 04                	push   $0x4
 8060e81:	68 a0 7d 43 08       	push   $0x8437da0
 8060e86:	68 c7 00 00 00       	push   $0xc7
 8060e8b:	e8 00 85 fe ff       	call   8049390 <write@plt>
 8060e90:	83 c4 0c             	add    $0xc,%esp
 8060e93:	eb 92                	jmp    8060e27 <__afl_fork_wait_loop>

08060e95 <__afl_fork_resume>:
 8060e95:	68 c6 00 00 00       	push   $0xc6
 8060e9a:	e8 51 86 fe ff       	call   80494f0 <close@plt>
 8060e9f:	68 c7 00 00 00       	push   $0xc7
 8060ea4:	e8 47 86 fe ff       	call   80494f0 <close@plt>
 8060ea9:	83 c4 08             	add    $0x8,%esp
 8060eac:	5a                   	pop    %edx
 8060ead:	59                   	pop    %ecx
 8060eae:	58                   	pop    %eax
 8060eaf:	e9 ea fe ff ff       	jmp    8060d9e <__afl_store>

08060eb4 <__afl_die>:
 8060eb4:	31 c0                	xor    %eax,%eax
 8060eb6:	e8 85 82 fe ff       	call   8049140 <_exit@plt>

08060ebb <__afl_setup_abort>:
 8060ebb:	fe 05 20 7e 43 08    	incb   0x8437e20
 8060ec1:	59                   	pop    %ecx
 8060ec2:	58                   	pop    %eax
 8060ec3:	e9 ee fe ff ff       	jmp    8060db6 <__afl_return>

08060ec8 <.AFL_SHM_ENV>:
 8060ec8:	5f                   	pop    %edi
 8060ec9:	5f                   	pop    %edi
 8060eca:	41                   	inc    %ecx
 8060ecb:	46                   	inc    %esi
 8060ecc:	4c                   	dec    %esp
 8060ecd:	5f                   	pop    %edi
 8060ece:	53                   	push   %ebx
 8060ecf:	48                   	dec    %eax
 8060ed0:	4d                   	dec    %ebp
 8060ed1:	5f                   	pop    %edi
 8060ed2:	49                   	dec    %ecx
 8060ed3:	44                   	inc    %esp
 8060ed4:	00 66 90             	add    %ah,-0x70(%esi)
 8060ed7:	66 90                	xchg   %ax,%ax
 8060ed9:	66 90                	xchg   %ax,%ax
 8060edb:	66 90                	xchg   %ax,%ax
 8060edd:	66 90                	xchg   %ax,%ax
 8060edf:	90                   	nop

08060ee0 <c_strcasecmp>:

#include "c-ctype.h"

int
c_strcasecmp (const char *s1, const char *s2)
{
 8060ee0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060ee4:	89 3c 24             	mov    %edi,(%esp)
 8060ee7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060eeb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060eef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060ef3:	b9 f1 4c 00 00       	mov    $0x4cf1,%ecx
 8060ef8:	e8 9b 01 00 00       	call   8061098 <__afl_maybe_log>
 8060efd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060f01:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060f05:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060f09:	8b 3c 24             	mov    (%esp),%edi
 8060f0c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060f10:	55                   	push   %ebp
 8060f11:	57                   	push   %edi
 8060f12:	56                   	push   %esi
 8060f13:	53                   	push   %ebx
 8060f14:	8b 74 24 14          	mov    0x14(%esp),%esi
 8060f18:	8b 5c 24 18          	mov    0x18(%esp),%ebx
  register const unsigned char *p1 = (const unsigned char *) s1;
  register const unsigned char *p2 = (const unsigned char *) s2;
  unsigned char c1, c2;

  if (p1 == p2)
 8060f1c:	39 de                	cmp    %ebx,%esi
 8060f1e:	75 78                	jne    8060f98 <c_strcasecmp+0xb8>
 8060f20:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060f24:	89 3c 24             	mov    %edi,(%esp)
 8060f27:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060f2b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060f2f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060f33:	b9 9b d6 00 00       	mov    $0xd69b,%ecx
 8060f38:	e8 5b 01 00 00       	call   8061098 <__afl_maybe_log>
 8060f3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060f41:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060f45:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060f49:	8b 3c 24             	mov    (%esp),%edi
 8060f4c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060f50:	e9 08 01 00 00       	jmp    806105d <c_strcasecmp+0x17d>
 8060f55:	8d 76 00             	lea    0x0(%esi),%esi
      c2 = c_tolower (*p2);

      if (c1 == '\0')
        break;

      ++p1;
 8060f58:	83 c6 01             	add    $0x1,%esi
      ++p2;
 8060f5b:	83 c3 01             	add    $0x1,%ebx
    }
  while (c1 == c2);
 8060f5e:	38 d0                	cmp    %dl,%al
 8060f60:	0f 85 ba 00 00 00    	jne    8061020 <c_strcasecmp+0x140>
 8060f66:	66 90                	xchg   %ax,%ax
 8060f68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060f6c:	89 3c 24             	mov    %edi,(%esp)
 8060f6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060f73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060f77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060f7b:	b9 9f 2a 00 00       	mov    $0x2a9f,%ecx
 8060f80:	e8 13 01 00 00       	call   8061098 <__afl_maybe_log>
 8060f85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060f89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060f8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060f91:	8b 3c 24             	mov    (%esp),%edi
 8060f94:	8d 64 24 10          	lea    0x10(%esp),%esp
  if (p1 == p2)
    return 0;

  do
    {
      c1 = c_tolower (*p1);
 8060f98:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060f9c:	89 3c 24             	mov    %edi,(%esp)
 8060f9f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060fa3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060fa7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8060fab:	b9 6b 58 00 00       	mov    $0x586b,%ecx
 8060fb0:	e8 e3 00 00 00       	call   8061098 <__afl_maybe_log>
 8060fb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8060fb9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8060fbd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8060fc1:	8b 3c 24             	mov    (%esp),%edi
 8060fc4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8060fc8:	0f b6 06             	movzbl (%esi),%eax
 8060fcb:	8d 48 bf             	lea    -0x41(%eax),%ecx
 8060fce:	8d 50 20             	lea    0x20(%eax),%edx
 8060fd1:	83 f9 19             	cmp    $0x19,%ecx
      c2 = c_tolower (*p2);
 8060fd4:	0f b6 0b             	movzbl (%ebx),%ecx
  if (p1 == p2)
    return 0;

  do
    {
      c1 = c_tolower (*p1);
 8060fd7:	0f 46 c2             	cmovbe %edx,%eax
      c2 = c_tolower (*p2);
 8060fda:	8d 69 bf             	lea    -0x41(%ecx),%ebp
 8060fdd:	8d 51 20             	lea    0x20(%ecx),%edx
 8060fe0:	83 fd 19             	cmp    $0x19,%ebp
 8060fe3:	0f 47 d1             	cmova  %ecx,%edx

      if (c1 == '\0')
 8060fe6:	84 c0                	test   %al,%al
 8060fe8:	0f 85 6a ff ff ff    	jne    8060f58 <c_strcasecmp+0x78>
 8060fee:	66 90                	xchg   %ax,%ax
 8060ff0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8060ff4:	89 3c 24             	mov    %edi,(%esp)
 8060ff7:	89 54 24 04          	mov    %edx,0x4(%esp)
 8060ffb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8060fff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061003:	b9 17 9b 00 00       	mov    $0x9b17,%ecx
 8061008:	e8 8b 00 00 00       	call   8061098 <__afl_maybe_log>
 806100d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061011:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061015:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061019:	8b 3c 24             	mov    (%esp),%edi
 806101c:	8d 64 24 10          	lea    0x10(%esp),%esp
      ++p2;
    }
  while (c1 == c2);

  if (UCHAR_MAX <= INT_MAX)
    return c1 - c2;
 8061020:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061024:	89 3c 24             	mov    %edi,(%esp)
 8061027:	89 54 24 04          	mov    %edx,0x4(%esp)
 806102b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806102f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061033:	b9 fe e6 00 00       	mov    $0xe6fe,%ecx
 8061038:	e8 5b 00 00 00       	call   8061098 <__afl_maybe_log>
 806103d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061041:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061045:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061049:	8b 3c 24             	mov    (%esp),%edi
 806104c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061050:	0f b6 f2             	movzbl %dl,%esi
 8061053:	0f b6 c0             	movzbl %al,%eax
  else
    /* On machines where 'char' and 'int' are types of the same size, the
       difference of two 'unsigned char' values - including the sign bit -
       doesn't fit in an 'int'.  */
    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
}
 8061056:	5b                   	pop    %ebx
      ++p2;
    }
  while (c1 == c2);

  if (UCHAR_MAX <= INT_MAX)
    return c1 - c2;
 8061057:	29 f0                	sub    %esi,%eax
  else
    /* On machines where 'char' and 'int' are types of the same size, the
       difference of two 'unsigned char' values - including the sign bit -
       doesn't fit in an 'int'.  */
    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
}
 8061059:	5e                   	pop    %esi
 806105a:	5f                   	pop    %edi
 806105b:	5d                   	pop    %ebp
 806105c:	c3                   	ret    
 806105d:	8d 76 00             	lea    0x0(%esi),%esi
 8061060:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061064:	89 3c 24             	mov    %edi,(%esp)
 8061067:	89 54 24 04          	mov    %edx,0x4(%esp)
 806106b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806106f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061073:	b9 b9 f7 00 00       	mov    $0xf7b9,%ecx
 8061078:	e8 1b 00 00 00       	call   8061098 <__afl_maybe_log>
 806107d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061081:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061085:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061089:	8b 3c 24             	mov    (%esp),%edi
 806108c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061090:	5b                   	pop    %ebx
  register const unsigned char *p1 = (const unsigned char *) s1;
  register const unsigned char *p2 = (const unsigned char *) s2;
  unsigned char c1, c2;

  if (p1 == p2)
    return 0;
 8061091:	31 c0                	xor    %eax,%eax
  else
    /* On machines where 'char' and 'int' are types of the same size, the
       difference of two 'unsigned char' values - including the sign bit -
       doesn't fit in an 'int'.  */
    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);
}
 8061093:	5e                   	pop    %esi
 8061094:	5f                   	pop    %edi
 8061095:	5d                   	pop    %ebp
 8061096:	c3                   	ret    
 8061097:	90                   	nop

08061098 <__afl_maybe_log>:
 8061098:	9f                   	lahf   
 8061099:	0f 90 c0             	seto   %al
 806109c:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 80610a2:	85 d2                	test   %edx,%edx
 80610a4:	74 22                	je     80610c8 <__afl_setup>

080610a6 <__afl_store>:
 80610a6:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 80610ac:	31 cf                	xor    %ecx,%edi
 80610ae:	d1 e9                	shr    %ecx
 80610b0:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 80610b6:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 80610ba:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

080610be <__afl_return>:
 80610be:	04 7f                	add    $0x7f,%al
 80610c0:	9e                   	sahf   
 80610c1:	c3                   	ret    
 80610c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080610c8 <__afl_setup>:
 80610c8:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 80610cf:	75 ed                	jne    80610be <__afl_return>
 80610d1:	50                   	push   %eax
 80610d2:	51                   	push   %ecx
 80610d3:	68 d0 11 06 08       	push   $0x80611d0
 80610d8:	e8 d3 81 fe ff       	call   80492b0 <getenv@plt>
 80610dd:	83 c4 04             	add    $0x4,%esp
 80610e0:	85 c0                	test   %eax,%eax
 80610e2:	0f 84 db 00 00 00    	je     80611c3 <__afl_setup_abort>
 80610e8:	50                   	push   %eax
 80610e9:	e8 92 83 fe ff       	call   8049480 <atoi@plt>
 80610ee:	83 c4 04             	add    $0x4,%esp
 80610f1:	6a 00                	push   $0x0
 80610f3:	6a 00                	push   $0x0
 80610f5:	50                   	push   %eax
 80610f6:	e8 f5 80 fe ff       	call   80491f0 <shmat@plt>
 80610fb:	83 c4 0c             	add    $0xc,%esp
 80610fe:	83 f8 ff             	cmp    $0xffffffff,%eax
 8061101:	0f 84 bc 00 00 00    	je     80611c3 <__afl_setup_abort>
 8061107:	c6 00 01             	movb   $0x1,(%eax)
 806110a:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 806110f:	89 c2                	mov    %eax,%edx
 8061111:	59                   	pop    %ecx
 8061112:	58                   	pop    %eax

08061113 <__afl_forkserver>:
 8061113:	50                   	push   %eax
 8061114:	51                   	push   %ecx
 8061115:	52                   	push   %edx
 8061116:	6a 04                	push   $0x4
 8061118:	68 a0 7d 43 08       	push   $0x8437da0
 806111d:	68 c7 00 00 00       	push   $0xc7
 8061122:	e8 69 82 fe ff       	call   8049390 <write@plt>
 8061127:	83 c4 0c             	add    $0xc,%esp
 806112a:	83 f8 04             	cmp    $0x4,%eax
 806112d:	75 6e                	jne    806119d <__afl_fork_resume>

0806112f <__afl_fork_wait_loop>:
 806112f:	6a 04                	push   $0x4
 8061131:	68 a0 7d 43 08       	push   $0x8437da0
 8061136:	68 c6 00 00 00       	push   $0xc6
 806113b:	e8 d0 7f fe ff       	call   8049110 <read@plt>
 8061140:	83 c4 0c             	add    $0xc,%esp
 8061143:	83 f8 04             	cmp    $0x4,%eax
 8061146:	75 74                	jne    80611bc <__afl_die>
 8061148:	e8 d3 82 fe ff       	call   8049420 <fork@plt>
 806114d:	83 f8 00             	cmp    $0x0,%eax
 8061150:	7c 6a                	jl     80611bc <__afl_die>
 8061152:	74 49                	je     806119d <__afl_fork_resume>
 8061154:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 8061159:	6a 04                	push   $0x4
 806115b:	68 00 7e 43 08       	push   $0x8437e00
 8061160:	68 c7 00 00 00       	push   $0xc7
 8061165:	e8 26 82 fe ff       	call   8049390 <write@plt>
 806116a:	83 c4 0c             	add    $0xc,%esp
 806116d:	6a 00                	push   $0x0
 806116f:	68 a0 7d 43 08       	push   $0x8437da0
 8061174:	ff 35 00 7e 43 08    	pushl  0x8437e00
 806117a:	e8 c1 80 fe ff       	call   8049240 <waitpid@plt>
 806117f:	83 c4 0c             	add    $0xc,%esp
 8061182:	83 f8 00             	cmp    $0x0,%eax
 8061185:	7e 35                	jle    80611bc <__afl_die>
 8061187:	6a 04                	push   $0x4
 8061189:	68 a0 7d 43 08       	push   $0x8437da0
 806118e:	68 c7 00 00 00       	push   $0xc7
 8061193:	e8 f8 81 fe ff       	call   8049390 <write@plt>
 8061198:	83 c4 0c             	add    $0xc,%esp
 806119b:	eb 92                	jmp    806112f <__afl_fork_wait_loop>

0806119d <__afl_fork_resume>:
 806119d:	68 c6 00 00 00       	push   $0xc6
 80611a2:	e8 49 83 fe ff       	call   80494f0 <close@plt>
 80611a7:	68 c7 00 00 00       	push   $0xc7
 80611ac:	e8 3f 83 fe ff       	call   80494f0 <close@plt>
 80611b1:	83 c4 08             	add    $0x8,%esp
 80611b4:	5a                   	pop    %edx
 80611b5:	59                   	pop    %ecx
 80611b6:	58                   	pop    %eax
 80611b7:	e9 ea fe ff ff       	jmp    80610a6 <__afl_store>

080611bc <__afl_die>:
 80611bc:	31 c0                	xor    %eax,%eax
 80611be:	e8 7d 7f fe ff       	call   8049140 <_exit@plt>

080611c3 <__afl_setup_abort>:
 80611c3:	fe 05 20 7e 43 08    	incb   0x8437e20
 80611c9:	59                   	pop    %ecx
 80611ca:	58                   	pop    %eax
 80611cb:	e9 ee fe ff ff       	jmp    80610be <__afl_return>

080611d0 <.AFL_SHM_ENV>:
 80611d0:	5f                   	pop    %edi
 80611d1:	5f                   	pop    %edi
 80611d2:	41                   	inc    %ecx
 80611d3:	46                   	inc    %esi
 80611d4:	4c                   	dec    %esp
 80611d5:	5f                   	pop    %edi
 80611d6:	53                   	push   %ebx
 80611d7:	48                   	dec    %eax
 80611d8:	4d                   	dec    %ebp
 80611d9:	5f                   	pop    %edi
 80611da:	49                   	dec    %ecx
 80611db:	44                   	inc    %esp
 80611dc:	00 66 90             	add    %ah,-0x70(%esi)
 80611df:	90                   	nop

080611e0 <close_stream>:
   that writes to STREAM -- just let the internal stream state record
   the failure.  That's what the ferror test is checking below.  */

int
close_stream (FILE *stream)
{
 80611e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80611e4:	89 3c 24             	mov    %edi,(%esp)
 80611e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80611eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80611ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80611f3:	b9 28 13 00 00       	mov    $0x1328,%ecx
 80611f8:	e8 2b 0b 00 00       	call   8061d28 <__afl_maybe_log>
 80611fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061201:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061205:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061209:	8b 3c 24             	mov    (%esp),%edi
 806120c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061210:	55                   	push   %ebp
 8061211:	57                   	push   %edi
 8061212:	56                   	push   %esi
 8061213:	53                   	push   %ebx
 8061214:	83 ec 18             	sub    $0x18,%esp
 8061217:	8b 74 24 2c          	mov    0x2c(%esp),%esi
  const bool some_pending = (__fpending (stream+(lava_get(774))*(0x6c61735b==(lava_get(774))||0x5b73616c==(lava_get(774)))+(lava_get(776))*(0x6c617359==(lava_get(776))||0x5973616c==(lava_get(776)))+(lava_get(778))*(0x6c617357==(lava_get(778))||0x5773616c==(lava_get(778)))+(lava_get(780))*(0x6c617355==(lava_get(780))||0x5573616c==(lava_get(780)))+(lava_get(782))*(0x6c617353==(lava_get(782))||0x5373616c==(lava_get(782)))+(lava_get(784))*(0x6c617351==(lava_get(784))||0x5173616c==(lava_get(784)))+(lava_get(786))*(0x6c61734f==(lava_get(786))||0x4f73616c==(lava_get(786)))+(lava_get(788))*(0x6c61734d==(lava_get(788))||0x4d73616c==(lava_get(788)))+(lava_get(790))*(0x6c61734b==(lava_get(790))||0x4b73616c==(lava_get(790)))+(lava_get(792))*(0x6c617349==(lava_get(792))||0x4973616c==(lava_get(792)))+(lava_get(798))*(0x6c617343==(lava_get(798))||0x4373616c==(lava_get(798)))+(lava_get(804))*(0x6c61733d==(lava_get(804))||0x3d73616c==(lava_get(804)))+(lava_get(805))*(0x6c61733c==(lava_get(805))||0x3c73616c==(lava_get(805)))+(lava_get(806))*(0x6c61733b==(lava_get(806))||0x3b73616c==(lava_get(806)))) != 0);
 806121b:	68 06 03 00 00       	push   $0x306
 8061220:	e8 3b b3 fe ff       	call   804c560 <lava_get>
 8061225:	c7 04 24 06 03 00 00 	movl   $0x306,(%esp)
 806122c:	89 c3                	mov    %eax,%ebx
 806122e:	e8 2d b3 fe ff       	call   804c560 <lava_get>
 8061233:	83 c4 10             	add    $0x10,%esp
 8061236:	3d 5b 73 61 6c       	cmp    $0x6c61735b,%eax
 806123b:	ba 01 00 00 00       	mov    $0x1,%edx
 8061240:	74 4c                	je     806128e <close_stream+0xae>
 8061242:	66 90                	xchg   %ax,%ax
 8061244:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061248:	89 3c 24             	mov    %edi,(%esp)
 806124b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806124f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061253:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061257:	b9 90 97 00 00       	mov    $0x9790,%ecx
 806125c:	e8 c7 0a 00 00       	call   8061d28 <__afl_maybe_log>
 8061261:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061265:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061269:	8b 54 24 04          	mov    0x4(%esp),%edx
 806126d:	8b 3c 24             	mov    (%esp),%edi
 8061270:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061274:	83 ec 0c             	sub    $0xc,%esp
 8061277:	68 06 03 00 00       	push   $0x306
 806127c:	e8 df b2 fe ff       	call   804c560 <lava_get>
 8061281:	31 d2                	xor    %edx,%edx
 8061283:	83 c4 10             	add    $0x10,%esp
 8061286:	3d 6c 61 73 5b       	cmp    $0x5b73616c,%eax
 806128b:	0f 94 c2             	sete   %dl
 806128e:	66 90                	xchg   %ax,%ax
 8061290:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061294:	89 3c 24             	mov    %edi,(%esp)
 8061297:	89 54 24 04          	mov    %edx,0x4(%esp)
 806129b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806129f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80612a3:	b9 66 33 00 00       	mov    $0x3366,%ecx
 80612a8:	e8 7b 0a 00 00       	call   8061d28 <__afl_maybe_log>
 80612ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80612b1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80612b5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80612b9:	8b 3c 24             	mov    (%esp),%edi
 80612bc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80612c0:	83 ec 0c             	sub    $0xc,%esp
 80612c3:	0f af d3             	imul   %ebx,%edx
 80612c6:	68 08 03 00 00       	push   $0x308
 80612cb:	89 d5                	mov    %edx,%ebp
 80612cd:	e8 8e b2 fe ff       	call   804c560 <lava_get>
 80612d2:	c7 04 24 08 03 00 00 	movl   $0x308,(%esp)
 80612d9:	89 c3                	mov    %eax,%ebx
 80612db:	e8 80 b2 fe ff       	call   804c560 <lava_get>
 80612e0:	83 c4 10             	add    $0x10,%esp
 80612e3:	3d 59 73 61 6c       	cmp    $0x6c617359,%eax
 80612e8:	b9 01 00 00 00       	mov    $0x1,%ecx
 80612ed:	74 4b                	je     806133a <close_stream+0x15a>
 80612ef:	90                   	nop
 80612f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80612f4:	89 3c 24             	mov    %edi,(%esp)
 80612f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80612fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80612ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061303:	b9 7d cf 00 00       	mov    $0xcf7d,%ecx
 8061308:	e8 1b 0a 00 00       	call   8061d28 <__afl_maybe_log>
 806130d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061311:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061315:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061319:	8b 3c 24             	mov    (%esp),%edi
 806131c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061320:	83 ec 0c             	sub    $0xc,%esp
 8061323:	68 08 03 00 00       	push   $0x308
 8061328:	e8 33 b2 fe ff       	call   804c560 <lava_get>
 806132d:	31 c9                	xor    %ecx,%ecx
 806132f:	83 c4 10             	add    $0x10,%esp
 8061332:	3d 6c 61 73 59       	cmp    $0x5973616c,%eax
 8061337:	0f 94 c1             	sete   %cl
 806133a:	66 90                	xchg   %ax,%ax
 806133c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061340:	89 3c 24             	mov    %edi,(%esp)
 8061343:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061347:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806134b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806134f:	b9 05 1f 00 00       	mov    $0x1f05,%ecx
 8061354:	e8 cf 09 00 00       	call   8061d28 <__afl_maybe_log>
 8061359:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806135d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061361:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061365:	8b 3c 24             	mov    (%esp),%edi
 8061368:	8d 64 24 10          	lea    0x10(%esp),%esp
 806136c:	83 ec 0c             	sub    $0xc,%esp
 806136f:	0f af d9             	imul   %ecx,%ebx
 8061372:	68 0c 03 00 00       	push   $0x30c
 8061377:	e8 e4 b1 fe ff       	call   804c560 <lava_get>
 806137c:	01 eb                	add    %ebp,%ebx
 806137e:	c7 04 24 0c 03 00 00 	movl   $0x30c,(%esp)
 8061385:	89 c7                	mov    %eax,%edi
 8061387:	e8 d4 b1 fe ff       	call   804c560 <lava_get>
 806138c:	83 c4 10             	add    $0x10,%esp
 806138f:	3d 55 73 61 6c       	cmp    $0x6c617355,%eax
 8061394:	ba 01 00 00 00       	mov    $0x1,%edx
 8061399:	74 4b                	je     80613e6 <close_stream+0x206>
 806139b:	90                   	nop
 806139c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80613a0:	89 3c 24             	mov    %edi,(%esp)
 80613a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80613a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80613ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80613af:	b9 a1 99 00 00       	mov    $0x99a1,%ecx
 80613b4:	e8 6f 09 00 00       	call   8061d28 <__afl_maybe_log>
 80613b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80613bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80613c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80613c5:	8b 3c 24             	mov    (%esp),%edi
 80613c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80613cc:	83 ec 0c             	sub    $0xc,%esp
 80613cf:	68 0c 03 00 00       	push   $0x30c
 80613d4:	e8 87 b1 fe ff       	call   804c560 <lava_get>
 80613d9:	31 d2                	xor    %edx,%edx
 80613db:	83 c4 10             	add    $0x10,%esp
 80613de:	3d 6c 61 73 55       	cmp    $0x5573616c,%eax
 80613e3:	0f 94 c2             	sete   %dl
 80613e6:	66 90                	xchg   %ax,%ax
 80613e8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80613ec:	89 3c 24             	mov    %edi,(%esp)
 80613ef:	89 54 24 04          	mov    %edx,0x4(%esp)
 80613f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80613f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80613fb:	b9 f0 af 00 00       	mov    $0xaff0,%ecx
 8061400:	e8 23 09 00 00       	call   8061d28 <__afl_maybe_log>
 8061405:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061409:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806140d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061411:	8b 3c 24             	mov    (%esp),%edi
 8061414:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061418:	83 ec 0c             	sub    $0xc,%esp
 806141b:	68 0a 03 00 00       	push   $0x30a
 8061420:	0f af fa             	imul   %edx,%edi
 8061423:	e8 38 b1 fe ff       	call   804c560 <lava_get>
 8061428:	c7 04 24 0a 03 00 00 	movl   $0x30a,(%esp)
 806142f:	89 c5                	mov    %eax,%ebp
 8061431:	e8 2a b1 fe ff       	call   804c560 <lava_get>
 8061436:	83 c4 10             	add    $0x10,%esp
 8061439:	3d 57 73 61 6c       	cmp    $0x6c617357,%eax
 806143e:	b9 01 00 00 00       	mov    $0x1,%ecx
 8061443:	74 4d                	je     8061492 <close_stream+0x2b2>
 8061445:	8d 76 00             	lea    0x0(%esi),%esi
 8061448:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806144c:	89 3c 24             	mov    %edi,(%esp)
 806144f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061453:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061457:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806145b:	b9 4b 92 00 00       	mov    $0x924b,%ecx
 8061460:	e8 c3 08 00 00       	call   8061d28 <__afl_maybe_log>
 8061465:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061469:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806146d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061471:	8b 3c 24             	mov    (%esp),%edi
 8061474:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061478:	83 ec 0c             	sub    $0xc,%esp
 806147b:	68 0a 03 00 00       	push   $0x30a
 8061480:	e8 db b0 fe ff       	call   804c560 <lava_get>
 8061485:	31 c9                	xor    %ecx,%ecx
 8061487:	83 c4 10             	add    $0x10,%esp
 806148a:	3d 6c 61 73 57       	cmp    $0x5773616c,%eax
 806148f:	0f 94 c1             	sete   %cl
 8061492:	66 90                	xchg   %ax,%ax
 8061494:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061498:	89 3c 24             	mov    %edi,(%esp)
 806149b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806149f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80614a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80614a7:	b9 d4 f4 00 00       	mov    $0xf4d4,%ecx
 80614ac:	e8 77 08 00 00       	call   8061d28 <__afl_maybe_log>
 80614b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80614b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80614b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80614bd:	8b 3c 24             	mov    (%esp),%edi
 80614c0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80614c4:	83 ec 0c             	sub    $0xc,%esp
 80614c7:	01 fb                	add    %edi,%ebx
 80614c9:	0f af e9             	imul   %ecx,%ebp
 80614cc:	68 10 03 00 00       	push   $0x310
 80614d1:	e8 8a b0 fe ff       	call   804c560 <lava_get>
 80614d6:	8d 3c 2b             	lea    (%ebx,%ebp,1),%edi
 80614d9:	c7 04 24 10 03 00 00 	movl   $0x310,(%esp)
 80614e0:	89 c3                	mov    %eax,%ebx
 80614e2:	e8 79 b0 fe ff       	call   804c560 <lava_get>
 80614e7:	83 c4 10             	add    $0x10,%esp
 80614ea:	3d 51 73 61 6c       	cmp    $0x6c617351,%eax
 80614ef:	ba 01 00 00 00       	mov    $0x1,%edx
 80614f4:	74 4c                	je     8061542 <close_stream+0x362>
 80614f6:	66 90                	xchg   %ax,%ax
 80614f8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80614fc:	89 3c 24             	mov    %edi,(%esp)
 80614ff:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061503:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061507:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806150b:	b9 27 e8 00 00       	mov    $0xe827,%ecx
 8061510:	e8 13 08 00 00       	call   8061d28 <__afl_maybe_log>
 8061515:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061519:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806151d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061521:	8b 3c 24             	mov    (%esp),%edi
 8061524:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061528:	83 ec 0c             	sub    $0xc,%esp
 806152b:	68 10 03 00 00       	push   $0x310
 8061530:	e8 2b b0 fe ff       	call   804c560 <lava_get>
 8061535:	31 d2                	xor    %edx,%edx
 8061537:	83 c4 10             	add    $0x10,%esp
 806153a:	3d 6c 61 73 51       	cmp    $0x5173616c,%eax
 806153f:	0f 94 c2             	sete   %dl
 8061542:	66 90                	xchg   %ax,%ax
 8061544:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061548:	89 3c 24             	mov    %edi,(%esp)
 806154b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806154f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061553:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061557:	b9 f1 1a 00 00       	mov    $0x1af1,%ecx
 806155c:	e8 c7 07 00 00       	call   8061d28 <__afl_maybe_log>
 8061561:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061565:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061569:	8b 54 24 04          	mov    0x4(%esp),%edx
 806156d:	8b 3c 24             	mov    (%esp),%edi
 8061570:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061574:	83 ec 0c             	sub    $0xc,%esp
 8061577:	68 0e 03 00 00       	push   $0x30e
 806157c:	0f af da             	imul   %edx,%ebx
 806157f:	e8 dc af fe ff       	call   804c560 <lava_get>
 8061584:	c7 04 24 0e 03 00 00 	movl   $0x30e,(%esp)
 806158b:	89 c5                	mov    %eax,%ebp
 806158d:	e8 ce af fe ff       	call   804c560 <lava_get>
 8061592:	83 c4 10             	add    $0x10,%esp
 8061595:	3d 53 73 61 6c       	cmp    $0x6c617353,%eax
 806159a:	b9 01 00 00 00       	mov    $0x1,%ecx
 806159f:	74 4d                	je     80615ee <close_stream+0x40e>
 80615a1:	8d 76 00             	lea    0x0(%esi),%esi
 80615a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80615a8:	89 3c 24             	mov    %edi,(%esp)
 80615ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80615af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80615b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80615b7:	b9 f2 96 00 00       	mov    $0x96f2,%ecx
 80615bc:	e8 67 07 00 00       	call   8061d28 <__afl_maybe_log>
 80615c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80615c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80615c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80615cd:	8b 3c 24             	mov    (%esp),%edi
 80615d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80615d4:	83 ec 0c             	sub    $0xc,%esp
 80615d7:	68 0e 03 00 00       	push   $0x30e
 80615dc:	e8 7f af fe ff       	call   804c560 <lava_get>
 80615e1:	31 c9                	xor    %ecx,%ecx
 80615e3:	83 c4 10             	add    $0x10,%esp
 80615e6:	3d 6c 61 73 53       	cmp    $0x5373616c,%eax
 80615eb:	0f 94 c1             	sete   %cl
 80615ee:	66 90                	xchg   %ax,%ax
 80615f0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80615f4:	89 3c 24             	mov    %edi,(%esp)
 80615f7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80615fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80615ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061603:	b9 6a 38 00 00       	mov    $0x386a,%ecx
 8061608:	e8 1b 07 00 00       	call   8061d28 <__afl_maybe_log>
 806160d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061611:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061615:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061619:	8b 3c 24             	mov    (%esp),%edi
 806161c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061620:	83 ec 0c             	sub    $0xc,%esp
 8061623:	01 fb                	add    %edi,%ebx
 8061625:	0f af e9             	imul   %ecx,%ebp
 8061628:	68 14 03 00 00       	push   $0x314
 806162d:	e8 2e af fe ff       	call   804c560 <lava_get>
 8061632:	01 eb                	add    %ebp,%ebx
 8061634:	c7 04 24 14 03 00 00 	movl   $0x314,(%esp)
 806163b:	89 c7                	mov    %eax,%edi
 806163d:	e8 1e af fe ff       	call   804c560 <lava_get>
 8061642:	83 c4 10             	add    $0x10,%esp
 8061645:	3d 4d 73 61 6c       	cmp    $0x6c61734d,%eax
 806164a:	ba 01 00 00 00       	mov    $0x1,%edx
 806164f:	74 4d                	je     806169e <close_stream+0x4be>
 8061651:	8d 76 00             	lea    0x0(%esi),%esi
 8061654:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061658:	89 3c 24             	mov    %edi,(%esp)
 806165b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806165f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061663:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061667:	b9 2b 4f 00 00       	mov    $0x4f2b,%ecx
 806166c:	e8 b7 06 00 00       	call   8061d28 <__afl_maybe_log>
 8061671:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061675:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061679:	8b 54 24 04          	mov    0x4(%esp),%edx
 806167d:	8b 3c 24             	mov    (%esp),%edi
 8061680:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061684:	83 ec 0c             	sub    $0xc,%esp
 8061687:	68 14 03 00 00       	push   $0x314
 806168c:	e8 cf ae fe ff       	call   804c560 <lava_get>
 8061691:	31 d2                	xor    %edx,%edx
 8061693:	83 c4 10             	add    $0x10,%esp
 8061696:	3d 6c 61 73 4d       	cmp    $0x4d73616c,%eax
 806169b:	0f 94 c2             	sete   %dl
 806169e:	66 90                	xchg   %ax,%ax
 80616a0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80616a4:	89 3c 24             	mov    %edi,(%esp)
 80616a7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80616ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80616af:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80616b3:	b9 fc f9 00 00       	mov    $0xf9fc,%ecx
 80616b8:	e8 6b 06 00 00       	call   8061d28 <__afl_maybe_log>
 80616bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80616c1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80616c5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80616c9:	8b 3c 24             	mov    (%esp),%edi
 80616cc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80616d0:	83 ec 0c             	sub    $0xc,%esp
 80616d3:	68 12 03 00 00       	push   $0x312
 80616d8:	0f af fa             	imul   %edx,%edi
 80616db:	e8 80 ae fe ff       	call   804c560 <lava_get>
 80616e0:	c7 04 24 12 03 00 00 	movl   $0x312,(%esp)
 80616e7:	89 c5                	mov    %eax,%ebp
 80616e9:	e8 72 ae fe ff       	call   804c560 <lava_get>
 80616ee:	83 c4 10             	add    $0x10,%esp
 80616f1:	3d 4f 73 61 6c       	cmp    $0x6c61734f,%eax
 80616f6:	b9 01 00 00 00       	mov    $0x1,%ecx
 80616fb:	74 4d                	je     806174a <close_stream+0x56a>
 80616fd:	8d 76 00             	lea    0x0(%esi),%esi
 8061700:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061704:	89 3c 24             	mov    %edi,(%esp)
 8061707:	89 54 24 04          	mov    %edx,0x4(%esp)
 806170b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806170f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061713:	b9 c3 ea 00 00       	mov    $0xeac3,%ecx
 8061718:	e8 0b 06 00 00       	call   8061d28 <__afl_maybe_log>
 806171d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061721:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061725:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061729:	8b 3c 24             	mov    (%esp),%edi
 806172c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061730:	83 ec 0c             	sub    $0xc,%esp
 8061733:	68 12 03 00 00       	push   $0x312
 8061738:	e8 23 ae fe ff       	call   804c560 <lava_get>
 806173d:	31 c9                	xor    %ecx,%ecx
 806173f:	83 c4 10             	add    $0x10,%esp
 8061742:	3d 6c 61 73 4f       	cmp    $0x4f73616c,%eax
 8061747:	0f 94 c1             	sete   %cl
 806174a:	66 90                	xchg   %ax,%ax
 806174c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061750:	89 3c 24             	mov    %edi,(%esp)
 8061753:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061757:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806175b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806175f:	b9 c1 20 00 00       	mov    $0x20c1,%ecx
 8061764:	e8 bf 05 00 00       	call   8061d28 <__afl_maybe_log>
 8061769:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806176d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061771:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061775:	8b 3c 24             	mov    (%esp),%edi
 8061778:	8d 64 24 10          	lea    0x10(%esp),%esp
 806177c:	83 ec 0c             	sub    $0xc,%esp
 806177f:	01 fb                	add    %edi,%ebx
 8061781:	0f af e9             	imul   %ecx,%ebp
 8061784:	68 18 03 00 00       	push   $0x318
 8061789:	e8 d2 ad fe ff       	call   804c560 <lava_get>
 806178e:	8d 3c 2b             	lea    (%ebx,%ebp,1),%edi
 8061791:	c7 04 24 18 03 00 00 	movl   $0x318,(%esp)
 8061798:	89 c3                	mov    %eax,%ebx
 806179a:	e8 c1 ad fe ff       	call   804c560 <lava_get>
 806179f:	83 c4 10             	add    $0x10,%esp
 80617a2:	3d 49 73 61 6c       	cmp    $0x6c617349,%eax
 80617a7:	ba 01 00 00 00       	mov    $0x1,%edx
 80617ac:	74 4c                	je     80617fa <close_stream+0x61a>
 80617ae:	66 90                	xchg   %ax,%ax
 80617b0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80617b4:	89 3c 24             	mov    %edi,(%esp)
 80617b7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80617bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80617bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80617c3:	b9 1e 6a 00 00       	mov    $0x6a1e,%ecx
 80617c8:	e8 5b 05 00 00       	call   8061d28 <__afl_maybe_log>
 80617cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80617d1:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80617d5:	8b 54 24 04          	mov    0x4(%esp),%edx
 80617d9:	8b 3c 24             	mov    (%esp),%edi
 80617dc:	8d 64 24 10          	lea    0x10(%esp),%esp
 80617e0:	83 ec 0c             	sub    $0xc,%esp
 80617e3:	68 18 03 00 00       	push   $0x318
 80617e8:	e8 73 ad fe ff       	call   804c560 <lava_get>
 80617ed:	31 d2                	xor    %edx,%edx
 80617ef:	83 c4 10             	add    $0x10,%esp
 80617f2:	3d 6c 61 73 49       	cmp    $0x4973616c,%eax
 80617f7:	0f 94 c2             	sete   %dl
 80617fa:	66 90                	xchg   %ax,%ax
 80617fc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061800:	89 3c 24             	mov    %edi,(%esp)
 8061803:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061807:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806180b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806180f:	b9 b0 d2 00 00       	mov    $0xd2b0,%ecx
 8061814:	e8 0f 05 00 00       	call   8061d28 <__afl_maybe_log>
 8061819:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806181d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061821:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061825:	8b 3c 24             	mov    (%esp),%edi
 8061828:	8d 64 24 10          	lea    0x10(%esp),%esp
 806182c:	83 ec 0c             	sub    $0xc,%esp
 806182f:	68 16 03 00 00       	push   $0x316
 8061834:	0f af da             	imul   %edx,%ebx
 8061837:	e8 24 ad fe ff       	call   804c560 <lava_get>
 806183c:	c7 04 24 16 03 00 00 	movl   $0x316,(%esp)
 8061843:	89 c5                	mov    %eax,%ebp
 8061845:	e8 16 ad fe ff       	call   804c560 <lava_get>
 806184a:	83 c4 10             	add    $0x10,%esp
 806184d:	3d 4b 73 61 6c       	cmp    $0x6c61734b,%eax
 8061852:	b9 01 00 00 00       	mov    $0x1,%ecx
 8061857:	74 4d                	je     80618a6 <close_stream+0x6c6>
 8061859:	8d 76 00             	lea    0x0(%esi),%esi
 806185c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061860:	89 3c 24             	mov    %edi,(%esp)
 8061863:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061867:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806186b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806186f:	b9 e1 ee 00 00       	mov    $0xeee1,%ecx
 8061874:	e8 af 04 00 00       	call   8061d28 <__afl_maybe_log>
 8061879:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806187d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061881:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061885:	8b 3c 24             	mov    (%esp),%edi
 8061888:	8d 64 24 10          	lea    0x10(%esp),%esp
 806188c:	83 ec 0c             	sub    $0xc,%esp
 806188f:	68 16 03 00 00       	push   $0x316
 8061894:	e8 c7 ac fe ff       	call   804c560 <lava_get>
 8061899:	31 c9                	xor    %ecx,%ecx
 806189b:	83 c4 10             	add    $0x10,%esp
 806189e:	3d 6c 61 73 4b       	cmp    $0x4b73616c,%eax
 80618a3:	0f 94 c1             	sete   %cl
 80618a6:	66 90                	xchg   %ax,%ax
 80618a8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80618ac:	89 3c 24             	mov    %edi,(%esp)
 80618af:	89 54 24 04          	mov    %edx,0x4(%esp)
 80618b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80618b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80618bb:	b9 63 52 00 00       	mov    $0x5263,%ecx
 80618c0:	e8 63 04 00 00       	call   8061d28 <__afl_maybe_log>
 80618c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80618c9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80618cd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80618d1:	8b 3c 24             	mov    (%esp),%edi
 80618d4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80618d8:	83 ec 0c             	sub    $0xc,%esp
 80618db:	01 fb                	add    %edi,%ebx
 80618dd:	0f af e9             	imul   %ecx,%ebp
 80618e0:	68 24 03 00 00       	push   $0x324
 80618e5:	e8 76 ac fe ff       	call   804c560 <lava_get>
 80618ea:	01 dd                	add    %ebx,%ebp
 80618ec:	c7 04 24 24 03 00 00 	movl   $0x324,(%esp)
 80618f3:	89 c7                	mov    %eax,%edi
 80618f5:	e8 66 ac fe ff       	call   804c560 <lava_get>
 80618fa:	83 c4 10             	add    $0x10,%esp
 80618fd:	3d 3d 73 61 6c       	cmp    $0x6c61733d,%eax
 8061902:	bb 01 00 00 00       	mov    $0x1,%ebx
 8061907:	74 4d                	je     8061956 <close_stream+0x776>
 8061909:	8d 76 00             	lea    0x0(%esi),%esi
 806190c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061910:	89 3c 24             	mov    %edi,(%esp)
 8061913:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061917:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806191b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806191f:	b9 bc 7a 00 00       	mov    $0x7abc,%ecx
 8061924:	e8 ff 03 00 00       	call   8061d28 <__afl_maybe_log>
 8061929:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806192d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061931:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061935:	8b 3c 24             	mov    (%esp),%edi
 8061938:	8d 64 24 10          	lea    0x10(%esp),%esp
 806193c:	83 ec 0c             	sub    $0xc,%esp
 806193f:	31 db                	xor    %ebx,%ebx
 8061941:	68 24 03 00 00       	push   $0x324
 8061946:	e8 15 ac fe ff       	call   804c560 <lava_get>
 806194b:	83 c4 10             	add    $0x10,%esp
 806194e:	3d 6c 61 73 3d       	cmp    $0x3d73616c,%eax
 8061953:	0f 94 c3             	sete   %bl
 8061956:	66 90                	xchg   %ax,%ax
 8061958:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806195c:	89 3c 24             	mov    %edi,(%esp)
 806195f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061963:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061967:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806196b:	b9 81 d6 00 00       	mov    $0xd681,%ecx
 8061970:	e8 b3 03 00 00       	call   8061d28 <__afl_maybe_log>
 8061975:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061979:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806197d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061981:	8b 3c 24             	mov    (%esp),%edi
 8061984:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061988:	83 ec 0c             	sub    $0xc,%esp
 806198b:	68 1e 03 00 00       	push   $0x31e
 8061990:	0f af fb             	imul   %ebx,%edi
 8061993:	e8 c8 ab fe ff       	call   804c560 <lava_get>
 8061998:	c7 04 24 1e 03 00 00 	movl   $0x31e,(%esp)
 806199f:	89 c3                	mov    %eax,%ebx
 80619a1:	e8 ba ab fe ff       	call   804c560 <lava_get>
 80619a6:	83 c4 10             	add    $0x10,%esp
 80619a9:	3d 43 73 61 6c       	cmp    $0x6c617343,%eax
 80619ae:	ba 01 00 00 00       	mov    $0x1,%edx
 80619b3:	74 4d                	je     8061a02 <close_stream+0x822>
 80619b5:	8d 76 00             	lea    0x0(%esi),%esi
 80619b8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80619bc:	89 3c 24             	mov    %edi,(%esp)
 80619bf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80619c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80619c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80619cb:	b9 7b d8 00 00       	mov    $0xd87b,%ecx
 80619d0:	e8 53 03 00 00       	call   8061d28 <__afl_maybe_log>
 80619d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80619d9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80619dd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80619e1:	8b 3c 24             	mov    (%esp),%edi
 80619e4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80619e8:	83 ec 0c             	sub    $0xc,%esp
 80619eb:	68 1e 03 00 00       	push   $0x31e
 80619f0:	e8 6b ab fe ff       	call   804c560 <lava_get>
 80619f5:	31 d2                	xor    %edx,%edx
 80619f7:	83 c4 10             	add    $0x10,%esp
 80619fa:	3d 6c 61 73 43       	cmp    $0x4373616c,%eax
 80619ff:	0f 94 c2             	sete   %dl
 8061a02:	66 90                	xchg   %ax,%ax
 8061a04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061a08:	89 3c 24             	mov    %edi,(%esp)
 8061a0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061a0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061a13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061a17:	b9 6d 47 00 00       	mov    $0x476d,%ecx
 8061a1c:	e8 07 03 00 00       	call   8061d28 <__afl_maybe_log>
 8061a21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061a25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061a29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061a2d:	8b 3c 24             	mov    (%esp),%edi
 8061a30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061a34:	83 ec 0c             	sub    $0xc,%esp
 8061a37:	01 ef                	add    %ebp,%edi
 8061a39:	0f af da             	imul   %edx,%ebx
 8061a3c:	68 26 03 00 00       	push   $0x326
 8061a41:	e8 1a ab fe ff       	call   804c560 <lava_get>
 8061a46:	8d 2c 1f             	lea    (%edi,%ebx,1),%ebp
 8061a49:	c7 04 24 26 03 00 00 	movl   $0x326,(%esp)
 8061a50:	89 c7                	mov    %eax,%edi
 8061a52:	e8 09 ab fe ff       	call   804c560 <lava_get>
 8061a57:	83 c4 10             	add    $0x10,%esp
 8061a5a:	3d 3b 73 61 6c       	cmp    $0x6c61733b,%eax
 8061a5f:	b9 01 00 00 00       	mov    $0x1,%ecx
 8061a64:	74 4c                	je     8061ab2 <close_stream+0x8d2>
 8061a66:	66 90                	xchg   %ax,%ax
 8061a68:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061a6c:	89 3c 24             	mov    %edi,(%esp)
 8061a6f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061a73:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061a77:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061a7b:	b9 ba 2b 00 00       	mov    $0x2bba,%ecx
 8061a80:	e8 a3 02 00 00       	call   8061d28 <__afl_maybe_log>
 8061a85:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061a89:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061a8d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061a91:	8b 3c 24             	mov    (%esp),%edi
 8061a94:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061a98:	83 ec 0c             	sub    $0xc,%esp
 8061a9b:	68 26 03 00 00       	push   $0x326
 8061aa0:	e8 bb aa fe ff       	call   804c560 <lava_get>
 8061aa5:	31 c9                	xor    %ecx,%ecx
 8061aa7:	83 c4 10             	add    $0x10,%esp
 8061aaa:	3d 6c 61 73 3b       	cmp    $0x3b73616c,%eax
 8061aaf:	0f 94 c1             	sete   %cl
 8061ab2:	66 90                	xchg   %ax,%ax
 8061ab4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061ab8:	89 3c 24             	mov    %edi,(%esp)
 8061abb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061abf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061ac3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061ac7:	b9 61 95 00 00       	mov    $0x9561,%ecx
 8061acc:	e8 57 02 00 00       	call   8061d28 <__afl_maybe_log>
 8061ad1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061ad5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061ad9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061add:	8b 3c 24             	mov    (%esp),%edi
 8061ae0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061ae4:	83 ec 0c             	sub    $0xc,%esp
 8061ae7:	68 25 03 00 00       	push   $0x325
 8061aec:	0f af f9             	imul   %ecx,%edi
 8061aef:	e8 6c aa fe ff       	call   804c560 <lava_get>
 8061af4:	c7 04 24 25 03 00 00 	movl   $0x325,(%esp)
 8061afb:	89 c3                	mov    %eax,%ebx
 8061afd:	e8 5e aa fe ff       	call   804c560 <lava_get>
 8061b02:	83 c4 10             	add    $0x10,%esp
 8061b05:	3d 3c 73 61 6c       	cmp    $0x6c61733c,%eax
 8061b0a:	ba 01 00 00 00       	mov    $0x1,%edx
 8061b0f:	74 4d                	je     8061b5e <close_stream+0x97e>
 8061b11:	8d 76 00             	lea    0x0(%esi),%esi
 8061b14:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061b18:	89 3c 24             	mov    %edi,(%esp)
 8061b1b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061b1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061b23:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061b27:	b9 28 eb 00 00       	mov    $0xeb28,%ecx
 8061b2c:	e8 f7 01 00 00       	call   8061d28 <__afl_maybe_log>
 8061b31:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061b35:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061b39:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061b3d:	8b 3c 24             	mov    (%esp),%edi
 8061b40:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061b44:	83 ec 0c             	sub    $0xc,%esp
 8061b47:	68 25 03 00 00       	push   $0x325
 8061b4c:	e8 0f aa fe ff       	call   804c560 <lava_get>
 8061b51:	31 d2                	xor    %edx,%edx
 8061b53:	83 c4 10             	add    $0x10,%esp
 8061b56:	3d 6c 61 73 3c       	cmp    $0x3c73616c,%eax
 8061b5b:	0f 94 c2             	sete   %dl
 8061b5e:	66 90                	xchg   %ax,%ax
 8061b60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061b64:	89 3c 24             	mov    %edi,(%esp)
 8061b67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061b6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061b6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061b73:	b9 c7 a9 00 00       	mov    $0xa9c7,%ecx
 8061b78:	e8 ab 01 00 00       	call   8061d28 <__afl_maybe_log>
 8061b7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061b81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061b85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061b89:	8b 3c 24             	mov    (%esp),%edi
 8061b8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061b90:	0f af da             	imul   %edx,%ebx
 8061b93:	01 ef                	add    %ebp,%edi
 8061b95:	83 ec 0c             	sub    $0xc,%esp
 8061b98:	01 fb                	add    %edi,%ebx
 8061b9a:	69 c3 94 00 00 00    	imul   $0x94,%ebx,%eax
 8061ba0:	01 f0                	add    %esi,%eax
 8061ba2:	50                   	push   %eax
 8061ba3:	e8 b8 76 fe ff       	call   8049260 <__fpending@plt>

/* Faster versions when locking is not required.  */
__STDIO_INLINE int
__NTH (ferror_unlocked (FILE *__stream))
{
  return _IO_ferror_unlocked (__stream);
 8061ba8:	8b 1e                	mov    (%esi),%ebx
 8061baa:	89 c5                	mov    %eax,%ebp
  const bool prev_fail = (ferror (stream) != 0);
  const bool fclose_fail = (fclose (stream) != 0);
 8061bac:	89 34 24             	mov    %esi,(%esp)
 8061baf:	e8 3c db ff ff       	call   805f6f0 <rpl_fclose>
 8061bb4:	83 c4 10             	add    $0x10,%esp
 8061bb7:	83 e3 20             	and    $0x20,%ebx
 8061bba:	85 c0                	test   %eax,%eax
 8061bbc:	0f 95 c1             	setne  %cl
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8061bbf:	85 db                	test   %ebx,%ebx
 8061bc1:	0f 85 e9 00 00 00    	jne    8061cb0 <close_stream+0xad0>
 8061bc7:	90                   	nop
 8061bc8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061bcc:	89 3c 24             	mov    %edi,(%esp)
 8061bcf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061bd3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061bd7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061bdb:	b9 fa b5 00 00       	mov    $0xb5fa,%ecx
 8061be0:	e8 43 01 00 00       	call   8061d28 <__afl_maybe_log>
 8061be5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061be9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061bed:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061bf1:	8b 3c 24             	mov    (%esp),%edi
 8061bf4:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061bf8:	84 c9                	test   %cl,%cl
 8061bfa:	74 70                	je     8061c6c <close_stream+0xa8c>
 8061bfc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061c00:	89 3c 24             	mov    %edi,(%esp)
 8061c03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061c07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061c0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061c0f:	b9 39 16 00 00       	mov    $0x1639,%ecx
 8061c14:	e8 0f 01 00 00       	call   8061d28 <__afl_maybe_log>
 8061c19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061c1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061c21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061c25:	8b 3c 24             	mov    (%esp),%edi
 8061c28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061c2c:	85 ed                	test   %ebp,%ebp
    {
      if (! fclose_fail)
        errno = 0;
      return EOF;
 8061c2e:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8061c33:	0f 84 cf 00 00 00    	je     8061d08 <close_stream+0xb28>
 8061c39:	8d 76 00             	lea    0x0(%esi),%esi
 8061c3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061c40:	89 3c 24             	mov    %edi,(%esp)
 8061c43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061c47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061c4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061c4f:	b9 e7 b0 00 00       	mov    $0xb0e7,%ecx
 8061c54:	e8 cf 00 00 00       	call   8061d28 <__afl_maybe_log>
 8061c59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061c5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061c61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061c65:	8b 3c 24             	mov    (%esp),%edi
 8061c68:	8d 64 24 10          	lea    0x10(%esp),%esp
        errno = 0;
      return EOF;
    }

  return 0;
}
 8061c6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061c70:	89 3c 24             	mov    %edi,(%esp)
 8061c73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061c77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061c7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061c7f:	b9 11 23 00 00       	mov    $0x2311,%ecx
 8061c84:	e8 9f 00 00 00       	call   8061d28 <__afl_maybe_log>
 8061c89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061c8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061c91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061c95:	8b 3c 24             	mov    (%esp),%edi
 8061c98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061c9c:	83 c4 0c             	add    $0xc,%esp
 8061c9f:	89 d8                	mov    %ebx,%eax
 8061ca1:	5b                   	pop    %ebx
 8061ca2:	5e                   	pop    %esi
 8061ca3:	5f                   	pop    %edi
 8061ca4:	5d                   	pop    %ebp
 8061ca5:	c3                   	ret    
 8061ca6:	8d 76 00             	lea    0x0(%esi),%esi
 8061ca9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
    {
      if (! fclose_fail)
 8061cb0:	84 c9                	test   %cl,%cl
        errno = 0;
      return EOF;
 8061cb2:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
    {
      if (! fclose_fail)
 8061cb7:	75 b3                	jne    8061c6c <close_stream+0xa8c>
 8061cb9:	8d 76 00             	lea    0x0(%esi),%esi
 8061cbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061cc0:	89 3c 24             	mov    %edi,(%esp)
 8061cc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061cc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061ccb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061ccf:	b9 c1 f5 00 00       	mov    $0xf5c1,%ecx
 8061cd4:	e8 4f 00 00 00       	call   8061d28 <__afl_maybe_log>
 8061cd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061cdd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061ce1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061ce5:	8b 3c 24             	mov    (%esp),%edi
 8061ce8:	8d 64 24 10          	lea    0x10(%esp),%esp
        errno = 0;
 8061cec:	e8 df 76 fe ff       	call   80493d0 <__errno_location@plt>
 8061cf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      return EOF;
    }

  return 0;
}
 8061cf7:	83 c4 0c             	add    $0xc,%esp
 8061cfa:	89 d8                	mov    %ebx,%eax
 8061cfc:	5b                   	pop    %ebx
 8061cfd:	5e                   	pop    %esi
 8061cfe:	5f                   	pop    %edi
 8061cff:	5d                   	pop    %ebp
 8061d00:	c3                   	ret    
 8061d01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8061d08:	e8 c3 76 fe ff       	call   80493d0 <__errno_location@plt>
 8061d0d:	31 db                	xor    %ebx,%ebx
 8061d0f:	83 38 09             	cmpl   $0x9,(%eax)
 8061d12:	0f 95 c3             	setne  %bl
        errno = 0;
      return EOF;
    }

  return 0;
}
 8061d15:	83 c4 0c             	add    $0xc,%esp
     fclose failed with EBADF.  That can happen when a program like cp
     is invoked like this 'cp a b >&-' (i.e., with standard output
     closed) and doesn't generate any output (hence no previous error
     and nothing to be flushed).  */

  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))
 8061d18:	f7 db                	neg    %ebx
        errno = 0;
      return EOF;
    }

  return 0;
}
 8061d1a:	89 d8                	mov    %ebx,%eax
 8061d1c:	5b                   	pop    %ebx
 8061d1d:	5e                   	pop    %esi
 8061d1e:	5f                   	pop    %edi
 8061d1f:	5d                   	pop    %ebp
 8061d20:	c3                   	ret    
 8061d21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08061d28 <__afl_maybe_log>:
 8061d28:	9f                   	lahf   
 8061d29:	0f 90 c0             	seto   %al
 8061d2c:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 8061d32:	85 d2                	test   %edx,%edx
 8061d34:	74 22                	je     8061d58 <__afl_setup>

08061d36 <__afl_store>:
 8061d36:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 8061d3c:	31 cf                	xor    %ecx,%edi
 8061d3e:	d1 e9                	shr    %ecx
 8061d40:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 8061d46:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8061d4a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08061d4e <__afl_return>:
 8061d4e:	04 7f                	add    $0x7f,%al
 8061d50:	9e                   	sahf   
 8061d51:	c3                   	ret    
 8061d52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08061d58 <__afl_setup>:
 8061d58:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 8061d5f:	75 ed                	jne    8061d4e <__afl_return>
 8061d61:	50                   	push   %eax
 8061d62:	51                   	push   %ecx
 8061d63:	68 60 1e 06 08       	push   $0x8061e60
 8061d68:	e8 43 75 fe ff       	call   80492b0 <getenv@plt>
 8061d6d:	83 c4 04             	add    $0x4,%esp
 8061d70:	85 c0                	test   %eax,%eax
 8061d72:	0f 84 db 00 00 00    	je     8061e53 <__afl_setup_abort>
 8061d78:	50                   	push   %eax
 8061d79:	e8 02 77 fe ff       	call   8049480 <atoi@plt>
 8061d7e:	83 c4 04             	add    $0x4,%esp
 8061d81:	6a 00                	push   $0x0
 8061d83:	6a 00                	push   $0x0
 8061d85:	50                   	push   %eax
 8061d86:	e8 65 74 fe ff       	call   80491f0 <shmat@plt>
 8061d8b:	83 c4 0c             	add    $0xc,%esp
 8061d8e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8061d91:	0f 84 bc 00 00 00    	je     8061e53 <__afl_setup_abort>
 8061d97:	c6 00 01             	movb   $0x1,(%eax)
 8061d9a:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 8061d9f:	89 c2                	mov    %eax,%edx
 8061da1:	59                   	pop    %ecx
 8061da2:	58                   	pop    %eax

08061da3 <__afl_forkserver>:
 8061da3:	50                   	push   %eax
 8061da4:	51                   	push   %ecx
 8061da5:	52                   	push   %edx
 8061da6:	6a 04                	push   $0x4
 8061da8:	68 a0 7d 43 08       	push   $0x8437da0
 8061dad:	68 c7 00 00 00       	push   $0xc7
 8061db2:	e8 d9 75 fe ff       	call   8049390 <write@plt>
 8061db7:	83 c4 0c             	add    $0xc,%esp
 8061dba:	83 f8 04             	cmp    $0x4,%eax
 8061dbd:	75 6e                	jne    8061e2d <__afl_fork_resume>

08061dbf <__afl_fork_wait_loop>:
 8061dbf:	6a 04                	push   $0x4
 8061dc1:	68 a0 7d 43 08       	push   $0x8437da0
 8061dc6:	68 c6 00 00 00       	push   $0xc6
 8061dcb:	e8 40 73 fe ff       	call   8049110 <read@plt>
 8061dd0:	83 c4 0c             	add    $0xc,%esp
 8061dd3:	83 f8 04             	cmp    $0x4,%eax
 8061dd6:	75 74                	jne    8061e4c <__afl_die>
 8061dd8:	e8 43 76 fe ff       	call   8049420 <fork@plt>
 8061ddd:	83 f8 00             	cmp    $0x0,%eax
 8061de0:	7c 6a                	jl     8061e4c <__afl_die>
 8061de2:	74 49                	je     8061e2d <__afl_fork_resume>
 8061de4:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 8061de9:	6a 04                	push   $0x4
 8061deb:	68 00 7e 43 08       	push   $0x8437e00
 8061df0:	68 c7 00 00 00       	push   $0xc7
 8061df5:	e8 96 75 fe ff       	call   8049390 <write@plt>
 8061dfa:	83 c4 0c             	add    $0xc,%esp
 8061dfd:	6a 00                	push   $0x0
 8061dff:	68 a0 7d 43 08       	push   $0x8437da0
 8061e04:	ff 35 00 7e 43 08    	pushl  0x8437e00
 8061e0a:	e8 31 74 fe ff       	call   8049240 <waitpid@plt>
 8061e0f:	83 c4 0c             	add    $0xc,%esp
 8061e12:	83 f8 00             	cmp    $0x0,%eax
 8061e15:	7e 35                	jle    8061e4c <__afl_die>
 8061e17:	6a 04                	push   $0x4
 8061e19:	68 a0 7d 43 08       	push   $0x8437da0
 8061e1e:	68 c7 00 00 00       	push   $0xc7
 8061e23:	e8 68 75 fe ff       	call   8049390 <write@plt>
 8061e28:	83 c4 0c             	add    $0xc,%esp
 8061e2b:	eb 92                	jmp    8061dbf <__afl_fork_wait_loop>

08061e2d <__afl_fork_resume>:
 8061e2d:	68 c6 00 00 00       	push   $0xc6
 8061e32:	e8 b9 76 fe ff       	call   80494f0 <close@plt>
 8061e37:	68 c7 00 00 00       	push   $0xc7
 8061e3c:	e8 af 76 fe ff       	call   80494f0 <close@plt>
 8061e41:	83 c4 08             	add    $0x8,%esp
 8061e44:	5a                   	pop    %edx
 8061e45:	59                   	pop    %ecx
 8061e46:	58                   	pop    %eax
 8061e47:	e9 ea fe ff ff       	jmp    8061d36 <__afl_store>

08061e4c <__afl_die>:
 8061e4c:	31 c0                	xor    %eax,%eax
 8061e4e:	e8 ed 72 fe ff       	call   8049140 <_exit@plt>

08061e53 <__afl_setup_abort>:
 8061e53:	fe 05 20 7e 43 08    	incb   0x8437e20
 8061e59:	59                   	pop    %ecx
 8061e5a:	58                   	pop    %eax
 8061e5b:	e9 ee fe ff ff       	jmp    8061d4e <__afl_return>

08061e60 <.AFL_SHM_ENV>:
 8061e60:	5f                   	pop    %edi
 8061e61:	5f                   	pop    %edi
 8061e62:	41                   	inc    %ecx
 8061e63:	46                   	inc    %esi
 8061e64:	4c                   	dec    %esp
 8061e65:	5f                   	pop    %edi
 8061e66:	53                   	push   %ebx
 8061e67:	48                   	dec    %eax
 8061e68:	4d                   	dec    %ebp
 8061e69:	5f                   	pop    %edi
 8061e6a:	49                   	dec    %ecx
 8061e6b:	44                   	inc    %esp
 8061e6c:	00 66 90             	add    %ah,-0x70(%esi)
 8061e6f:	90                   	nop

08061e70 <locale_charset>:
#ifdef STATIC
STATIC
#endif
const char *
locale_charset (void)
{
 8061e70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061e74:	89 3c 24             	mov    %edi,(%esp)
 8061e77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061e7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061e7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061e83:	b9 c8 07 00 00       	mov    $0x7c8,%ecx
 8061e88:	e8 6b 0e 00 00       	call   8062cf8 <__afl_maybe_log>
 8061e8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061e91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061e95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061e99:	8b 3c 24             	mov    (%esp),%edi
 8061e9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061ea0:	55                   	push   %ebp
 8061ea1:	57                   	push   %edi
 8061ea2:	56                   	push   %esi
 8061ea3:	53                   	push   %ebx

#endif

  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";
 8061ea4:	be fd 3b 06 08       	mov    $0x8063bfd,%esi
#ifdef STATIC
STATIC
#endif
const char *
locale_charset (void)
{
 8061ea9:	81 ec 98 00 00 00    	sub    $0x98,%esp
#if !(defined WINDOWS_NATIVE || defined OS2)

# if HAVE_LANGINFO_CODESET

  /* Most systems support nl_langinfo (CODESET) nowadays.  */
  codeset = nl_langinfo (CODESET);
 8061eaf:	6a 0e                	push   $0xe
 8061eb1:	e8 8a 75 fe ff       	call   8049440 <nl_langinfo@plt>
static const char *
get_charset_aliases (void)
{
  const char *cp;

  cp = charset_aliases;
 8061eb6:	8b 1d 70 7d 43 08    	mov    0x8437d70,%ebx
        }
    }

#endif

  if (codeset == NULL)
 8061ebc:	83 c4 10             	add    $0x10,%esp
    /* The canonical name cannot be determined.  */
    codeset = "";
 8061ebf:	85 c0                	test   %eax,%eax
 8061ec1:	0f 45 f0             	cmovne %eax,%esi
get_charset_aliases (void)
{
  const char *cp;

  cp = charset_aliases;
  if (cp == NULL)
 8061ec4:	85 db                	test   %ebx,%ebx
 8061ec6:	0f 84 7e 02 00 00    	je     806214a <locale_charset+0x2da>
 8061ecc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061ed0:	89 3c 24             	mov    %edi,(%esp)
 8061ed3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061ed7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061edb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061edf:	b9 fe 72 00 00       	mov    $0x72fe,%ecx
 8061ee4:	e8 0f 0e 00 00       	call   8062cf8 <__afl_maybe_log>
 8061ee9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061eed:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061ef1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061ef5:	8b 3c 24             	mov    (%esp),%edi
 8061ef8:	8d 64 24 10          	lea    0x10(%esp),%esp
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
       *aliases != '\0';
 8061efc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061f00:	89 3c 24             	mov    %edi,(%esp)
 8061f03:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061f07:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061f0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061f0f:	b9 ac 55 00 00       	mov    $0x55ac,%ecx
 8061f14:	e8 df 0d 00 00       	call   8062cf8 <__afl_maybe_log>
 8061f19:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061f1d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061f21:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061f25:	8b 3c 24             	mov    (%esp),%edi
 8061f28:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061f2c:	0f b6 2b             	movzbl (%ebx),%ebp
  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
 8061f2f:	89 ea                	mov    %ebp,%edx
 8061f31:	84 d2                	test   %dl,%dl
 8061f33:	0f 85 9b 00 00 00    	jne    8061fd4 <locale_charset+0x164>
 8061f39:	8d 76 00             	lea    0x0(%esi),%esi
 8061f3c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061f40:	89 3c 24             	mov    %edi,(%esp)
 8061f43:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061f47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061f4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061f4f:	b9 12 6a 00 00       	mov    $0x6a12,%ecx
 8061f54:	e8 9f 0d 00 00       	call   8062cf8 <__afl_maybe_log>
 8061f59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061f5d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061f61:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061f65:	8b 3c 24             	mov    (%esp),%edi
 8061f68:	8d 64 24 10          	lea    0x10(%esp),%esp
 8061f6c:	e9 93 01 00 00       	jmp    8062104 <locale_charset+0x294>
 8061f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *aliases != '\0';
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
 8061f78:	83 ec 0c             	sub    $0xc,%esp
 8061f7b:	53                   	push   %ebx
 8061f7c:	e8 df 73 fe ff       	call   8049360 <strlen@plt>
 8061f81:	8d 5c 03 01          	lea    0x1(%ebx,%eax,1),%ebx
 8061f85:	89 1c 24             	mov    %ebx,(%esp)
 8061f88:	e8 d3 73 fe ff       	call   8049360 <strlen@plt>
 8061f8d:	8d 5c 03 01          	lea    0x1(%ebx,%eax,1),%ebx
 8061f91:	83 c4 10             	add    $0x10,%esp
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
       *aliases != '\0';
 8061f94:	0f b6 2b             	movzbl (%ebx),%ebp
  if (codeset == NULL)
    /* The canonical name cannot be determined.  */
    codeset = "";

  /* Resolve alias. */
  for (aliases = get_charset_aliases ();
 8061f97:	89 e9                	mov    %ebp,%ecx
 8061f99:	84 c9                	test   %cl,%cl
 8061f9b:	0f 84 63 01 00 00    	je     8062104 <locale_charset+0x294>
 8061fa1:	8d 76 00             	lea    0x0(%esi),%esi
 8061fa4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061fa8:	89 3c 24             	mov    %edi,(%esp)
 8061fab:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061faf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061fb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061fb7:	b9 25 63 00 00       	mov    $0x6325,%ecx
 8061fbc:	e8 37 0d 00 00       	call   8062cf8 <__afl_maybe_log>
 8061fc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061fc5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061fc9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061fcd:	8b 3c 24             	mov    (%esp),%edi
 8061fd0:	8d 64 24 10          	lea    0x10(%esp),%esp
       *aliases != '\0';
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
    if (strcmp (codeset, aliases) == 0
 8061fd4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8061fd8:	89 3c 24             	mov    %edi,(%esp)
 8061fdb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8061fdf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8061fe3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8061fe7:	b9 1d ff 00 00       	mov    $0xff1d,%ecx
 8061fec:	e8 07 0d 00 00       	call   8062cf8 <__afl_maybe_log>
 8061ff1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8061ff5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8061ff9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8061ffd:	8b 3c 24             	mov    (%esp),%edi
 8062000:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062004:	83 ec 08             	sub    $0x8,%esp
 8062007:	53                   	push   %ebx
 8062008:	56                   	push   %esi
 8062009:	e8 e2 70 fe ff       	call   80490f0 <strcmp@plt>
 806200e:	83 c4 10             	add    $0x10,%esp
 8062011:	85 c0                	test   %eax,%eax
 8062013:	0f 84 ab 00 00 00    	je     80620c4 <locale_charset+0x254>
 8062019:	8d 76 00             	lea    0x0(%esi),%esi
 806201c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062020:	89 3c 24             	mov    %edi,(%esp)
 8062023:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062027:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806202b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806202f:	b9 4d 93 00 00       	mov    $0x934d,%ecx
 8062034:	e8 bf 0c 00 00       	call   8062cf8 <__afl_maybe_log>
 8062039:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806203d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062041:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062045:	8b 3c 24             	mov    (%esp),%edi
 8062048:	8d 64 24 10          	lea    0x10(%esp),%esp
        || (aliases[0] == '*' && aliases[1] == '\0'))
 806204c:	89 e8                	mov    %ebp,%eax
 806204e:	3c 2a                	cmp    $0x2a,%al
 8062050:	0f 85 22 ff ff ff    	jne    8061f78 <locale_charset+0x108>
 8062056:	66 90                	xchg   %ax,%ax
 8062058:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806205c:	89 3c 24             	mov    %edi,(%esp)
 806205f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062063:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062067:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806206b:	b9 dd 1c 00 00       	mov    $0x1cdd,%ecx
 8062070:	e8 83 0c 00 00       	call   8062cf8 <__afl_maybe_log>
 8062075:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062079:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 806207d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062081:	8b 3c 24             	mov    (%esp),%edi
 8062084:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062088:	80 7b 01 00          	cmpb   $0x0,0x1(%ebx)
 806208c:	0f 85 e6 fe ff ff    	jne    8061f78 <locale_charset+0x108>
 8062092:	66 90                	xchg   %ax,%ax
 8062094:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062098:	89 3c 24             	mov    %edi,(%esp)
 806209b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806209f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80620a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80620a7:	b9 eb f7 00 00       	mov    $0xf7eb,%ecx
 80620ac:	e8 47 0c 00 00       	call   8062cf8 <__afl_maybe_log>
 80620b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80620b5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80620b9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80620bd:	8b 3c 24             	mov    (%esp),%edi
 80620c0:	8d 64 24 10          	lea    0x10(%esp),%esp
      {
        codeset = aliases + strlen (aliases) + 1;
 80620c4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80620c8:	89 3c 24             	mov    %edi,(%esp)
 80620cb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80620cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80620d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80620d7:	b9 6d 9e 00 00       	mov    $0x9e6d,%ecx
 80620dc:	e8 17 0c 00 00       	call   8062cf8 <__afl_maybe_log>
 80620e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80620e5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80620e9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80620ed:	8b 3c 24             	mov    (%esp),%edi
 80620f0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80620f4:	83 ec 0c             	sub    $0xc,%esp
 80620f7:	53                   	push   %ebx
 80620f8:	e8 63 72 fe ff       	call   8049360 <strlen@plt>
 80620fd:	8d 74 03 01          	lea    0x1(%ebx,%eax,1),%esi
 8062101:	83 c4 10             	add    $0x10,%esp

  /* Don't return an empty string.  GNU libc and GNU libiconv interpret
     the empty string as denoting "the locale's character encoding",
     thus GNU libiconv would call this function a second time.  */
  if (codeset[0] == '\0')
    codeset = "ASCII";
 8062104:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062108:	89 3c 24             	mov    %edi,(%esp)
 806210b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806210f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062113:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062117:	b9 2d 30 00 00       	mov    $0x302d,%ecx
 806211c:	e8 d7 0b 00 00       	call   8062cf8 <__afl_maybe_log>
 8062121:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062125:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062129:	8b 54 24 04          	mov    0x4(%esp),%edx
 806212d:	8b 3c 24             	mov    (%esp),%edi
 8062130:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062134:	80 3e 00             	cmpb   $0x0,(%esi)
 8062137:	b8 4a 40 06 08       	mov    $0x806404a,%eax
 806213c:	0f 45 c6             	cmovne %esi,%eax
  if (strcmp (codeset, "UTF-8") == 0 && MB_CUR_MAX_L (uselocale (NULL)) <= 1)
    codeset = "ASCII";
#endif

  return codeset;
}
 806213f:	81 c4 8c 00 00 00    	add    $0x8c,%esp
 8062145:	5b                   	pop    %ebx
 8062146:	5e                   	pop    %esi
 8062147:	5f                   	pop    %edi
 8062148:	5d                   	pop    %ebp
 8062149:	c3                   	ret    
 806214a:	66 90                	xchg   %ax,%ax
      const char *base = "charset.alias";
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
 806214c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062150:	89 3c 24             	mov    %edi,(%esp)
 8062153:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062157:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806215b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806215f:	b9 74 17 00 00       	mov    $0x1774,%ecx
 8062164:	e8 8f 0b 00 00       	call   8062cf8 <__afl_maybe_log>
 8062169:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806216d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062171:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062175:	8b 3c 24             	mov    (%esp),%edi
 8062178:	8d 64 24 10          	lea    0x10(%esp),%esp
 806217c:	83 ec 0c             	sub    $0xc,%esp
 806217f:	68 50 40 06 08       	push   $0x8064050
 8062184:	e8 27 71 fe ff       	call   80492b0 <getenv@plt>
      if (dir == NULL || dir[0] == '\0')
 8062189:	83 c4 10             	add    $0x10,%esp
 806218c:	85 c0                	test   %eax,%eax
      const char *base = "charset.alias";
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
 806218e:	89 c5                	mov    %eax,%ebp
      if (dir == NULL || dir[0] == '\0')
 8062190:	0f 84 c5 06 00 00    	je     806285b <locale_charset+0x9eb>
 8062196:	66 90                	xchg   %ax,%ax
 8062198:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 806219c:	89 3c 24             	mov    %edi,(%esp)
 806219f:	89 54 24 04          	mov    %edx,0x4(%esp)
 80621a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80621a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80621ab:	b9 e8 93 00 00       	mov    $0x93e8,%ecx
 80621b0:	e8 43 0b 00 00       	call   8062cf8 <__afl_maybe_log>
 80621b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80621b9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80621bd:	8b 54 24 04          	mov    0x4(%esp),%edx
 80621c1:	8b 3c 24             	mov    (%esp),%edi
 80621c4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80621c8:	80 38 00             	cmpb   $0x0,(%eax)
 80621cb:	0f 84 8a 06 00 00    	je     806285b <locale_charset+0x9eb>
 80621d1:	8d 76 00             	lea    0x0(%esi),%esi
 80621d4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80621d8:	89 3c 24             	mov    %edi,(%esp)
 80621db:	89 54 24 04          	mov    %edx,0x4(%esp)
 80621df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80621e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80621e7:	b9 6e 55 00 00       	mov    $0x556e,%ecx
 80621ec:	e8 07 0b 00 00       	call   8062cf8 <__afl_maybe_log>
 80621f1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80621f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80621f9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80621fd:	8b 3c 24             	mov    (%esp),%edi
 8062200:	8d 64 24 10          	lea    0x10(%esp),%esp
        dir = relocate (LIBDIR);

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
 8062204:	83 ec 0c             	sub    $0xc,%esp
 8062207:	50                   	push   %eax
 8062208:	e8 53 71 fe ff       	call   8049360 <strlen@plt>
 806220d:	83 c4 10             	add    $0x10,%esp
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
 8062210:	85 c0                	test   %eax,%eax
      if (dir == NULL || dir[0] == '\0')
        dir = relocate (LIBDIR);

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
 8062212:	89 c7                	mov    %eax,%edi
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
 8062214:	0f 85 a0 0a 00 00    	jne    8062cba <locale_charset+0xe4a>
 806221a:	66 90                	xchg   %ax,%ax
 806221c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062220:	89 3c 24             	mov    %edi,(%esp)
 8062223:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062227:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806222b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806222f:	b9 b0 1e 00 00       	mov    $0x1eb0,%ecx
 8062234:	e8 bf 0a 00 00       	call   8062cf8 <__afl_maybe_log>
 8062239:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806223d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062241:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062245:	8b 3c 24             	mov    (%esp),%edi
 8062248:	8d 64 24 10          	lea    0x10(%esp),%esp
 806224c:	b8 0e 00 00 00       	mov    $0xe,%eax
 8062251:	8d 76 00             	lea    0x0(%esi),%esi
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
 8062254:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062258:	89 3c 24             	mov    %edi,(%esp)
 806225b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806225f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062263:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062267:	b9 00 88 00 00       	mov    $0x8800,%ecx
 806226c:	e8 87 0a 00 00       	call   8062cf8 <__afl_maybe_log>
 8062271:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062275:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062279:	8b 54 24 04          	mov    0x4(%esp),%edx
 806227d:	8b 3c 24             	mov    (%esp),%edi
 8062280:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062284:	83 ec 0c             	sub    $0xc,%esp
 8062287:	50                   	push   %eax
 8062288:	e8 43 70 fe ff       	call   80492d0 <malloc@plt>
 806228d:	89 44 24 14          	mov    %eax,0x14(%esp)
        if (file_name != NULL)
 8062291:	83 c4 10             	add    $0x10,%esp
 8062294:	85 c0                	test   %eax,%eax
 8062296:	0f 84 91 09 00 00    	je     8062c2d <locale_charset+0xdbd>
 806229c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80622a0:	89 3c 24             	mov    %edi,(%esp)
 80622a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80622a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80622ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80622af:	b9 a6 61 00 00       	mov    $0x61a6,%ecx
 80622b4:	e8 3f 0a 00 00       	call   8062cf8 <__afl_maybe_log>
 80622b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80622bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80622c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80622c5:	8b 3c 24             	mov    (%esp),%edi
 80622c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80622cc:	83 ec 04             	sub    $0x4,%esp
 80622cf:	57                   	push   %edi
 80622d0:	55                   	push   %ebp
 80622d1:	ff 74 24 10          	pushl  0x10(%esp)
 80622d5:	e8 96 6e fe ff       	call   8049170 <memcpy@plt>
 80622da:	83 c4 10             	add    $0x10,%esp
 80622dd:	8d 76 00             	lea    0x0(%esi),%esi
          {
            memcpy (file_name, dir, dir_len);
            if (add_slash)
              file_name[dir_len] = DIRECTORY_SEPARATOR;
            memcpy (file_name + dir_len + add_slash, base, base_len + 1);
 80622e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80622e4:	89 3c 24             	mov    %edi,(%esp)
 80622e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80622eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80622ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80622f3:	b9 87 9d 00 00       	mov    $0x9d87,%ecx
 80622f8:	e8 fb 09 00 00       	call   8062cf8 <__afl_maybe_log>
 80622fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062301:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062305:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062309:	8b 3c 24             	mov    (%esp),%edi
 806230c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062310:	8b 4c 24 04          	mov    0x4(%esp),%ecx
 8062314:	bd 73 00 00 00       	mov    $0x73,%ebp
      if (__OPEN_NEEDS_MODE (__oflag) && __va_arg_pack_len () < 1)
	{
	  __open_missing_mode ();
	  return __open_2 (__path, __oflag);
	}
      return __open_alias (__path, __oflag, __va_arg_pack ());
 8062319:	83 ec 08             	sub    $0x8,%esp
 806231c:	89 c8                	mov    %ecx,%eax
 806231e:	01 f8                	add    %edi,%eax
 8062320:	66 89 68 0c          	mov    %bp,0xc(%eax)
 8062324:	c7 00 63 68 61 72    	movl   $0x72616863,(%eax)
 806232a:	c7 40 04 73 65 74 2e 	movl   $0x2e746573,0x4(%eax)
 8062331:	c7 40 08 61 6c 69 61 	movl   $0x61696c61,0x8(%eax)
 8062338:	68 00 00 02 00       	push   $0x20000
 806233d:	51                   	push   %ecx
 806233e:	e8 bd 6d fe ff       	call   8049100 <open64@plt>
             a symbolic link to that file under the name "charset.alias" in
             some writable directory and defining the environment variable
             CHARSETALIASDIR to point to that directory.  */
          fd = open (file_name,
                     O_RDONLY | (HAVE_WORKING_O_NOFOLLOW ? O_NOFOLLOW : 0));
          if (fd < 0)
 8062343:	83 c4 10             	add    $0x10,%esp
 8062346:	85 c0                	test   %eax,%eax
 8062348:	89 c5                	mov    %eax,%ebp
 806234a:	0f 88 4c 08 00 00    	js     8062b9c <locale_charset+0xd2c>
 8062350:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062354:	89 3c 24             	mov    %edi,(%esp)
 8062357:	89 54 24 04          	mov    %edx,0x4(%esp)
 806235b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806235f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062363:	b9 a8 82 00 00       	mov    $0x82a8,%ecx
 8062368:	e8 8b 09 00 00       	call   8062cf8 <__afl_maybe_log>
 806236d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062371:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062375:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062379:	8b 3c 24             	mov    (%esp),%edi
 806237c:	8d 64 24 10          	lea    0x10(%esp),%esp
            cp = "";
          else
            {
              FILE *fp;

              fp = fdopen (fd, "r");
 8062380:	83 ec 08             	sub    $0x8,%esp
 8062383:	68 71 30 06 08       	push   $0x8063071
 8062388:	50                   	push   %eax
 8062389:	e8 82 6f fe ff       	call   8049310 <fdopen@plt>
              if (fp == NULL)
 806238e:	83 c4 10             	add    $0x10,%esp
 8062391:	85 c0                	test   %eax,%eax
            cp = "";
          else
            {
              FILE *fp;

              fp = fdopen (fd, "r");
 8062393:	89 c7                	mov    %eax,%edi
              if (fp == NULL)
 8062395:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 806239c:	0f 84 bb 07 00 00    	je     8062b5d <locale_charset+0xced>
 80623a2:	66 90                	xchg   %ax,%ax
 80623a4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80623a8:	89 3c 24             	mov    %edi,(%esp)
 80623ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80623af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80623b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80623b7:	b9 6d be 00 00       	mov    $0xbe6d,%ecx
 80623bc:	e8 37 09 00 00       	call   8062cf8 <__afl_maybe_log>
 80623c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80623c5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80623c9:	8b 54 24 04          	mov    0x4(%esp),%edx
 80623cd:	8b 3c 24             	mov    (%esp),%edi
 80623d0:	8d 64 24 10          	lea    0x10(%esp),%esp
 80623d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
# ifdef __USE_POSIX
/* This is defined in POSIX.1:1996.  */
__STDIO_INLINE int
getc_unlocked (FILE *__fp)
{
  return _IO_getc_unlocked (__fp);
 80623d8:	8b 4f 04             	mov    0x4(%edi),%ecx
 80623db:	3b 4f 08             	cmp    0x8(%edi),%ecx
 80623de:	0f 83 08 03 00 00    	jae    80626ec <locale_charset+0x87c>
 80623e4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80623e8:	89 3c 24             	mov    %edi,(%esp)
 80623eb:	89 54 24 04          	mov    %edx,0x4(%esp)
 80623ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80623f3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80623f7:	b9 8a bd 00 00       	mov    $0xbd8a,%ecx
 80623fc:	e8 f7 08 00 00       	call   8062cf8 <__afl_maybe_log>
 8062401:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062405:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062409:	8b 54 24 04          	mov    0x4(%esp),%edx
 806240d:	8b 3c 24             	mov    (%esp),%edi
 8062410:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062414:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062418:	89 3c 24             	mov    %edi,(%esp)
 806241b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806241f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062423:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062427:	b9 99 86 00 00       	mov    $0x8699,%ecx
 806242c:	e8 c7 08 00 00       	call   8062cf8 <__afl_maybe_log>
 8062431:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062435:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062439:	8b 54 24 04          	mov    0x4(%esp),%edx
 806243d:	8b 3c 24             	mov    (%esp),%edi
 8062440:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062444:	8d 51 01             	lea    0x1(%ecx),%edx
 8062447:	89 57 04             	mov    %edx,0x4(%edi)
 806244a:	0f b6 01             	movzbl (%ecx),%eax
 806244d:	8d 76 00             	lea    0x0(%esi),%esi
                      char *old_res_ptr;

                      c = getc (fp);
                      if (c == EOF)
                        break;
                      if (c == '\n' || c == ' ' || c == '\t')
 8062450:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062454:	89 3c 24             	mov    %edi,(%esp)
 8062457:	89 54 24 04          	mov    %edx,0x4(%esp)
 806245b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806245f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062463:	b9 5a e5 00 00       	mov    $0xe55a,%ecx
 8062468:	e8 8b 08 00 00       	call   8062cf8 <__afl_maybe_log>
 806246d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062471:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062475:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062479:	8b 3c 24             	mov    (%esp),%edi
 806247c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062480:	8d 68 f7             	lea    -0x9(%eax),%ebp
 8062483:	83 fd 01             	cmp    $0x1,%ebp
 8062486:	0f 86 4c ff ff ff    	jbe    80623d8 <locale_charset+0x568>
 806248c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062490:	89 3c 24             	mov    %edi,(%esp)
 8062493:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062497:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806249b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806249f:	b9 00 6b 00 00       	mov    $0x6b00,%ecx
 80624a4:	e8 4f 08 00 00       	call   8062cf8 <__afl_maybe_log>
 80624a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80624ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80624b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80624b5:	8b 3c 24             	mov    (%esp),%edi
 80624b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80624bc:	83 f8 20             	cmp    $0x20,%eax
 80624bf:	0f 84 13 ff ff ff    	je     80623d8 <locale_charset+0x568>
 80624c5:	8d 76 00             	lea    0x0(%esi),%esi
 80624c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80624cc:	89 3c 24             	mov    %edi,(%esp)
 80624cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80624d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80624d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80624db:	b9 a9 e8 00 00       	mov    $0xe8a9,%ecx
 80624e0:	e8 13 08 00 00       	call   8062cf8 <__afl_maybe_log>
 80624e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80624e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80624ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80624f1:	8b 3c 24             	mov    (%esp),%edi
 80624f4:	8d 64 24 10          	lea    0x10(%esp),%esp
                        continue;
                      if (c == '#')
 80624f8:	83 f8 23             	cmp    $0x23,%eax
 80624fb:	0f 84 33 05 00 00    	je     8062a34 <locale_charset+0xbc4>
 8062501:	8d 76 00             	lea    0x0(%esi),%esi
 8062504:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062508:	89 3c 24             	mov    %edi,(%esp)
 806250b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806250f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062513:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062517:	b9 55 5e 00 00       	mov    $0x5e55,%ecx
 806251c:	e8 d7 07 00 00       	call   8062cf8 <__afl_maybe_log>
 8062521:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062525:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062529:	8b 54 24 04          	mov    0x4(%esp),%edx
 806252d:	8b 3c 24             	mov    (%esp),%edi
 8062530:	8d 64 24 10          	lea    0x10(%esp),%esp
                          while (!(c == EOF || c == '\n'));
                          if (c == EOF)
                            break;
                          continue;
                        }
                      ungetc (c, fp);
 8062534:	83 ec 08             	sub    $0x8,%esp
 8062537:	57                   	push   %edi
 8062538:	50                   	push   %eax
 8062539:	e8 82 6e fe ff       	call   80493c0 <ungetc@plt>
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
 806253e:	8d 44 24 5d          	lea    0x5d(%esp),%eax
 8062542:	50                   	push   %eax
 8062543:	8d 4c 24 2e          	lea    0x2e(%esp),%ecx
 8062547:	51                   	push   %ecx
 8062548:	68 60 40 06 08       	push   $0x8064060
 806254d:	57                   	push   %edi
 806254e:	e8 fd 6d fe ff       	call   8049350 <fscanf@plt>
 8062553:	83 c4 20             	add    $0x20,%esp
 8062556:	83 f8 01             	cmp    $0x1,%eax
 8062559:	0f 8e 05 02 00 00    	jle    8062764 <locale_charset+0x8f4>
 806255f:	90                   	nop
 8062560:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062564:	89 3c 24             	mov    %edi,(%esp)
 8062567:	89 54 24 04          	mov    %edx,0x4(%esp)
 806256b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806256f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062573:	b9 6f e3 00 00       	mov    $0xe36f,%ecx
 8062578:	e8 7b 07 00 00       	call   8062cf8 <__afl_maybe_log>
 806257d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062581:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062585:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062589:	8b 3c 24             	mov    (%esp),%edi
 806258c:	8d 64 24 10          	lea    0x10(%esp),%esp
                        break;
                      l1 = strlen (buf1);
 8062590:	83 ec 0c             	sub    $0xc,%esp
 8062593:	8d 54 24 26          	lea    0x26(%esp),%edx
 8062597:	52                   	push   %edx
 8062598:	e8 c3 6d fe ff       	call   8049360 <strlen@plt>
 806259d:	59                   	pop    %ecx
                      l2 = strlen (buf2);
 806259e:	8d 6c 24 59          	lea    0x59(%esp),%ebp
                          continue;
                        }
                      ungetc (c, fp);
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
                        break;
                      l1 = strlen (buf1);
 80625a2:	89 44 24 14          	mov    %eax,0x14(%esp)
                      l2 = strlen (buf2);
 80625a6:	55                   	push   %ebp
 80625a7:	e8 b4 6d fe ff       	call   8049360 <strlen@plt>
 80625ac:	83 c4 10             	add    $0x10,%esp
 80625af:	89 c1                	mov    %eax,%ecx
                      old_res_ptr = res_ptr;
                      if (res_size == 0)
 80625b1:	8b 14 24             	mov    (%esp),%edx
                        {
                          res_size = l1 + 1 + l2 + 1;
 80625b4:	8b 44 24 08          	mov    0x8(%esp),%eax
 80625b8:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 80625bc:	01 c8                	add    %ecx,%eax
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
                        break;
                      l1 = strlen (buf1);
                      l2 = strlen (buf2);
                      old_res_ptr = res_ptr;
                      if (res_size == 0)
 80625be:	85 d2                	test   %edx,%edx
 80625c0:	0f 85 10 06 00 00    	jne    8062bd6 <locale_charset+0xd66>
 80625c6:	66 90                	xchg   %ax,%ax
 80625c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80625cc:	89 3c 24             	mov    %edi,(%esp)
 80625cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80625d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80625d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80625db:	b9 da 41 00 00       	mov    $0x41da,%ecx
 80625e0:	e8 13 07 00 00       	call   8062cf8 <__afl_maybe_log>
 80625e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80625e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80625ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80625f1:	8b 3c 24             	mov    (%esp),%edi
 80625f4:	8d 64 24 10          	lea    0x10(%esp),%esp
                        {
                          res_size = l1 + 1 + l2 + 1;
 80625f8:	8d 50 02             	lea    0x2(%eax),%edx
                          res_ptr = (char *) malloc (res_size + 1);
 80625fb:	83 ec 0c             	sub    $0xc,%esp
 80625fe:	83 c0 03             	add    $0x3,%eax
                      l1 = strlen (buf1);
                      l2 = strlen (buf2);
                      old_res_ptr = res_ptr;
                      if (res_size == 0)
                        {
                          res_size = l1 + 1 + l2 + 1;
 8062601:	89 54 24 0c          	mov    %edx,0xc(%esp)
                          res_ptr = (char *) malloc (res_size + 1);
 8062605:	50                   	push   %eax
 8062606:	e8 c5 6c fe ff       	call   80492d0 <malloc@plt>
 806260b:	83 c4 10             	add    $0x10,%esp
 806260e:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8062612:	89 c5                	mov    %eax,%ebp
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
                        }
                      if (res_ptr == NULL)
 8062614:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062618:	89 3c 24             	mov    %edi,(%esp)
 806261b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806261f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062623:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062627:	b9 cf 64 00 00       	mov    $0x64cf,%ecx
 806262c:	e8 c7 06 00 00       	call   8062cf8 <__afl_maybe_log>
 8062631:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062635:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062639:	8b 54 24 04          	mov    0x4(%esp),%edx
 806263d:	8b 3c 24             	mov    (%esp),%edi
 8062640:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062644:	85 ed                	test   %ebp,%ebp
 8062646:	0f 84 1e 06 00 00    	je     8062c6a <locale_charset+0xdfa>
 806264c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062650:	89 3c 24             	mov    %edi,(%esp)
 8062653:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062657:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806265b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806265f:	b9 e4 dc 00 00       	mov    $0xdce4,%ecx
 8062664:	e8 8f 06 00 00       	call   8062cf8 <__afl_maybe_log>
 8062669:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806266d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062671:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062675:	8b 3c 24             	mov    (%esp),%edi
 8062678:	8d 64 24 10          	lea    0x10(%esp),%esp
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
 806267c:	8b 1c 24             	mov    (%esp),%ebx
#endif

__fortify_function char *
__NTH (strcpy (char *__restrict __dest, const char *__restrict __src))
{
  return __builtin___strcpy_chk (__dest, __src, __bos (__dest));
 806267f:	83 ec 08             	sub    $0x8,%esp
 8062682:	8d 44 24 22          	lea    0x22(%esp),%eax
 8062686:	29 cb                	sub    %ecx,%ebx
 8062688:	50                   	push   %eax
 8062689:	89 d9                	mov    %ebx,%ecx
 806268b:	2b 4c 24 14          	sub    0x14(%esp),%ecx
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
 806268f:	8d 5c 1d ff          	lea    -0x1(%ebp,%ebx,1),%ebx
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
 8062693:	8d 54 0d fe          	lea    -0x2(%ebp,%ecx,1),%edx
 8062697:	52                   	push   %edx
 8062698:	e8 b3 6b fe ff       	call   8049250 <strcpy@plt>
 806269d:	58                   	pop    %eax
 806269e:	5a                   	pop    %edx
 806269f:	8d 44 24 55          	lea    0x55(%esp),%eax
 80626a3:	50                   	push   %eax
 80626a4:	53                   	push   %ebx
 80626a5:	89 eb                	mov    %ebp,%ebx
 80626a7:	e8 a4 6b fe ff       	call   8049250 <strcpy@plt>
 80626ac:	83 c4 10             	add    $0x10,%esp
 80626af:	8b 4f 04             	mov    0x4(%edi),%ecx
 80626b2:	3b 4f 08             	cmp    0x8(%edi),%ecx
 80626b5:	0f 82 59 fd ff ff    	jb     8062414 <locale_charset+0x5a4>
 80626bb:	90                   	nop
 80626bc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80626c0:	89 3c 24             	mov    %edi,(%esp)
 80626c3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80626c7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80626cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80626cf:	b9 12 4a 00 00       	mov    $0x4a12,%ecx
 80626d4:	e8 1f 06 00 00       	call   8062cf8 <__afl_maybe_log>
 80626d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80626dd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80626e1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80626e5:	8b 3c 24             	mov    (%esp),%edi
 80626e8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80626ec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80626f0:	89 3c 24             	mov    %edi,(%esp)
 80626f3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80626f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80626fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80626ff:	b9 1e b5 00 00       	mov    $0xb51e,%ecx
 8062704:	e8 ef 05 00 00       	call   8062cf8 <__afl_maybe_log>
 8062709:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806270d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062711:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062715:	8b 3c 24             	mov    (%esp),%edi
 8062718:	8d 64 24 10          	lea    0x10(%esp),%esp
 806271c:	83 ec 0c             	sub    $0xc,%esp
 806271f:	57                   	push   %edi
 8062720:	e8 0b 6d fe ff       	call   8049430 <__uflow@plt>
                      char buf2[50+1];
                      size_t l1, l2;
                      char *old_res_ptr;

                      c = getc (fp);
                      if (c == EOF)
 8062725:	83 c4 10             	add    $0x10,%esp
 8062728:	83 f8 ff             	cmp    $0xffffffff,%eax
 806272b:	0f 85 1c fd ff ff    	jne    806244d <locale_charset+0x5dd>
 8062731:	8d 76 00             	lea    0x0(%esi),%esi
 8062734:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062738:	89 3c 24             	mov    %edi,(%esp)
 806273b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806273f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062743:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062747:	b9 46 c2 00 00       	mov    $0xc246,%ecx
 806274c:	e8 a7 05 00 00       	call   8062cf8 <__afl_maybe_log>
 8062751:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062755:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062759:	8b 54 24 04          	mov    0x4(%esp),%edx
 806275d:	8b 3c 24             	mov    (%esp),%edi
 8062760:	8d 64 24 10          	lea    0x10(%esp),%esp
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
                    }
                  fclose (fp);
 8062764:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062768:	89 3c 24             	mov    %edi,(%esp)
 806276b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806276f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062773:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062777:	b9 51 e5 00 00       	mov    $0xe551,%ecx
 806277c:	e8 77 05 00 00       	call   8062cf8 <__afl_maybe_log>
 8062781:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062785:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062789:	8b 54 24 04          	mov    0x4(%esp),%edx
 806278d:	8b 3c 24             	mov    (%esp),%edi
 8062790:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062794:	83 ec 0c             	sub    $0xc,%esp
 8062797:	57                   	push   %edi
 8062798:	e8 53 cf ff ff       	call   805f6f0 <rpl_fclose>
                  if (res_size == 0)
 806279d:	83 c4 10             	add    $0x10,%esp
 80627a0:	8b 3c 24             	mov    (%esp),%edi
 80627a3:	85 ff                	test   %edi,%edi
 80627a5:	0f 84 f1 03 00 00    	je     8062b9c <locale_charset+0xd2c>
 80627ab:	90                   	nop
 80627ac:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80627b0:	89 3c 24             	mov    %edi,(%esp)
 80627b3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80627b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80627bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80627bf:	b9 ed 5f 00 00       	mov    $0x5fed,%ecx
 80627c4:	e8 2f 05 00 00       	call   8062cf8 <__afl_maybe_log>
 80627c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80627cd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80627d1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80627d5:	8b 3c 24             	mov    (%esp),%edi
 80627d8:	8d 64 24 10          	lea    0x10(%esp),%esp
                    cp = "";
                  else
                    {
                      *(res_ptr + res_size) = '\0';
 80627dc:	c6 04 3b 00          	movb   $0x0,(%ebx,%edi,1)
                      cp = res_ptr;
                    }
                }
            }

          free (file_name);
 80627e0:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80627e4:	89 3c 24             	mov    %edi,(%esp)
 80627e7:	89 54 24 04          	mov    %edx,0x4(%esp)
 80627eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80627ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80627f3:	b9 05 f2 00 00       	mov    $0xf205,%ecx
 80627f8:	e8 fb 04 00 00       	call   8062cf8 <__afl_maybe_log>
 80627fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062801:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062805:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062809:	8b 3c 24             	mov    (%esp),%edi
 806280c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062810:	83 ec 0c             	sub    $0xc,%esp
 8062813:	ff 74 24 10          	pushl  0x10(%esp)
 8062817:	e8 44 69 fe ff       	call   8049160 <free@plt>
 806281c:	83 c4 10             	add    $0x10,%esp
 806281f:	90                   	nop
           "CP1386" "\0" "GBK" "\0"
           "CP3372" "\0" "EUC-JP" "\0";
# endif
#endif

      charset_aliases = cp;
 8062820:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062824:	89 3c 24             	mov    %edi,(%esp)
 8062827:	89 54 24 04          	mov    %edx,0x4(%esp)
 806282b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806282f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062833:	b9 9b 93 00 00       	mov    $0x939b,%ecx
 8062838:	e8 bb 04 00 00       	call   8062cf8 <__afl_maybe_log>
 806283d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062841:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062845:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062849:	8b 3c 24             	mov    (%esp),%edi
 806284c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062850:	89 1d 70 7d 43 08    	mov    %ebx,0x8437d70
 8062856:	e9 a1 f6 ff ff       	jmp    8061efc <locale_charset+0x8c>
 806285b:	90                   	nop
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
      if (dir == NULL || dir[0] == '\0')
 806285c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062860:	89 3c 24             	mov    %edi,(%esp)
 8062863:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062867:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806286b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806286f:	b9 8d 90 00 00       	mov    $0x908d,%ecx
 8062874:	e8 7f 04 00 00       	call   8062cf8 <__afl_maybe_log>
 8062879:	8b 44 24 0c          	mov    0xc(%esp),%eax
 806287d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062881:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062885:	8b 3c 24             	mov    (%esp),%edi
 8062888:	8d 64 24 10          	lea    0x10(%esp),%esp
 806288c:	ba 0d 00 00 00       	mov    $0xd,%edx
        dir = relocate (LIBDIR);

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
 8062891:	bf 0e 00 00 00       	mov    $0xe,%edi
      char *file_name;

      /* Make it possible to override the charset.alias location.  This is
         necessary for running the testsuite before "make install".  */
      dir = getenv ("CHARSETALIASDIR");
      if (dir == NULL || dir[0] == '\0')
 8062896:	bd 3b 40 06 08       	mov    $0x806403b,%ebp
 806289b:	90                   	nop

      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
 806289c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80628a0:	89 3c 24             	mov    %edi,(%esp)
 80628a3:	89 54 24 04          	mov    %edx,0x4(%esp)
 80628a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80628ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80628af:	b9 da c2 00 00       	mov    $0xc2da,%ecx
 80628b4:	e8 3f 04 00 00       	call   8062cf8 <__afl_maybe_log>
 80628b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80628bd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80628c1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80628c5:	8b 3c 24             	mov    (%esp),%edi
 80628c8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80628cc:	80 7c 15 00 2f       	cmpb   $0x2f,0x0(%ebp,%edx,1)
 80628d1:	0f 84 da 01 00 00    	je     8062ab1 <locale_charset+0xc41>
 80628d7:	90                   	nop
 80628d8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80628dc:	89 3c 24             	mov    %edi,(%esp)
 80628df:	89 54 24 04          	mov    %edx,0x4(%esp)
 80628e3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80628e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80628eb:	b9 1e a7 00 00       	mov    $0xa71e,%ecx
 80628f0:	e8 03 04 00 00       	call   8062cf8 <__afl_maybe_log>
 80628f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80628f9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80628fd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062901:	8b 3c 24             	mov    (%esp),%edi
 8062904:	8d 64 24 10          	lea    0x10(%esp),%esp
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
 8062908:	8d 4f 0f             	lea    0xf(%edi),%ecx
 806290b:	83 ec 0c             	sub    $0xc,%esp
 806290e:	51                   	push   %ecx
 806290f:	e8 bc 69 fe ff       	call   80492d0 <malloc@plt>
 8062914:	89 44 24 14          	mov    %eax,0x14(%esp)
        if (file_name != NULL)
 8062918:	83 c4 10             	add    $0x10,%esp
 806291b:	85 c0                	test   %eax,%eax
 806291d:	0f 84 0a 03 00 00    	je     8062c2d <locale_charset+0xdbd>
 8062923:	90                   	nop
 8062924:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062928:	89 3c 24             	mov    %edi,(%esp)
 806292b:	89 54 24 04          	mov    %edx,0x4(%esp)
 806292f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062933:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062937:	b9 88 c7 00 00       	mov    $0xc788,%ecx
 806293c:	e8 b7 03 00 00       	call   8062cf8 <__afl_maybe_log>
 8062941:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062945:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062949:	8b 54 24 04          	mov    0x4(%esp),%edx
 806294d:	8b 3c 24             	mov    (%esp),%edi
 8062950:	8d 64 24 10          	lea    0x10(%esp),%esp
      /* Concatenate dir and base into freshly allocated file_name.  */
      {
        size_t dir_len = strlen (dir);
        size_t base_len = strlen (base);
        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));
        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);
 8062954:	8d 47 01             	lea    0x1(%edi),%eax

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 8062957:	83 ec 04             	sub    $0x4,%esp
 806295a:	89 44 24 04          	mov    %eax,0x4(%esp)
 806295e:	57                   	push   %edi
 806295f:	55                   	push   %ebp
 8062960:	8b 6c 24 10          	mov    0x10(%esp),%ebp
 8062964:	55                   	push   %ebp
 8062965:	e8 06 68 fe ff       	call   8049170 <memcpy@plt>
        if (file_name != NULL)
          {
            memcpy (file_name, dir, dir_len);
            if (add_slash)
              file_name[dir_len] = DIRECTORY_SEPARATOR;
 806296a:	83 c4 10             	add    $0x10,%esp
 806296d:	c6 44 3d 00 2f       	movb   $0x2f,0x0(%ebp,%edi,1)
 8062972:	8b 3c 24             	mov    (%esp),%edi
 8062975:	e9 63 f9 ff ff       	jmp    80622dd <locale_charset+0x46d>
 806297a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8062980:	8d 4d 01             	lea    0x1(%ebp),%ecx
 8062983:	89 4f 04             	mov    %ecx,0x4(%edi)
 8062986:	0f b6 45 00          	movzbl 0x0(%ebp),%eax
 806298a:	66 90                	xchg   %ax,%ax
                      if (c == '#')
                        {
                          /* Skip comment, to end of line.  */
                          do
                            c = getc (fp);
                          while (!(c == EOF || c == '\n'));
 806298c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062990:	89 3c 24             	mov    %edi,(%esp)
 8062993:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062997:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 806299b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 806299f:	b9 f7 aa 00 00       	mov    $0xaaf7,%ecx
 80629a4:	e8 4f 03 00 00       	call   8062cf8 <__afl_maybe_log>
 80629a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80629ad:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80629b1:	8b 54 24 04          	mov    0x4(%esp),%edx
 80629b5:	8b 3c 24             	mov    (%esp),%edi
 80629b8:	8d 64 24 10          	lea    0x10(%esp),%esp
 80629bc:	83 f8 0a             	cmp    $0xa,%eax
 80629bf:	0f 84 27 01 00 00    	je     8062aec <locale_charset+0xc7c>
 80629c5:	8d 76 00             	lea    0x0(%esi),%esi
 80629c8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 80629cc:	89 3c 24             	mov    %edi,(%esp)
 80629cf:	89 54 24 04          	mov    %edx,0x4(%esp)
 80629d3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80629d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80629db:	b9 51 9b 00 00       	mov    $0x9b51,%ecx
 80629e0:	e8 13 03 00 00       	call   8062cf8 <__afl_maybe_log>
 80629e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 80629e9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 80629ed:	8b 54 24 04          	mov    0x4(%esp),%edx
 80629f1:	8b 3c 24             	mov    (%esp),%edi
 80629f4:	8d 64 24 10          	lea    0x10(%esp),%esp
 80629f8:	83 f8 ff             	cmp    $0xffffffff,%eax
 80629fb:	0f 84 eb 00 00 00    	je     8062aec <locale_charset+0xc7c>
 8062a01:	8d 76 00             	lea    0x0(%esi),%esi
 8062a04:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062a08:	89 3c 24             	mov    %edi,(%esp)
 8062a0b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062a0f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062a13:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062a17:	b9 a4 79 00 00       	mov    $0x79a4,%ecx
 8062a1c:	e8 d7 02 00 00       	call   8062cf8 <__afl_maybe_log>
 8062a21:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062a25:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062a29:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062a2d:	8b 3c 24             	mov    (%esp),%edi
 8062a30:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062a34:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062a38:	89 3c 24             	mov    %edi,(%esp)
 8062a3b:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062a3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062a43:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062a47:	b9 0f 46 00 00       	mov    $0x460f,%ecx
 8062a4c:	e8 a7 02 00 00       	call   8062cf8 <__afl_maybe_log>
 8062a51:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062a55:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062a59:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062a5d:	8b 3c 24             	mov    (%esp),%edi
 8062a60:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062a64:	8b 6f 04             	mov    0x4(%edi),%ebp
 8062a67:	3b 6f 08             	cmp    0x8(%edi),%ebp
 8062a6a:	0f 82 10 ff ff ff    	jb     8062980 <locale_charset+0xb10>
 8062a70:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062a74:	89 3c 24             	mov    %edi,(%esp)
 8062a77:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062a7b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062a7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062a83:	b9 76 a7 00 00       	mov    $0xa776,%ecx
 8062a88:	e8 6b 02 00 00       	call   8062cf8 <__afl_maybe_log>
 8062a8d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062a91:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062a95:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062a99:	8b 3c 24             	mov    (%esp),%edi
 8062a9c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062aa0:	83 ec 0c             	sub    $0xc,%esp
 8062aa3:	57                   	push   %edi
 8062aa4:	e8 87 69 fe ff       	call   8049430 <__uflow@plt>
 8062aa9:	83 c4 10             	add    $0x10,%esp
 8062aac:	e9 d9 fe ff ff       	jmp    806298a <locale_charset+0xb1a>
 8062ab1:	8d 76 00             	lea    0x0(%esi),%esi
 8062ab4:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062ab8:	89 3c 24             	mov    %edi,(%esp)
 8062abb:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062abf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062ac3:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062ac7:	b9 3a 82 00 00       	mov    $0x823a,%ecx
 8062acc:	e8 27 02 00 00       	call   8062cf8 <__afl_maybe_log>
 8062ad1:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062ad5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062ad9:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062add:	8b 3c 24             	mov    (%esp),%edi
 8062ae0:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062ae4:	8d 47 0e             	lea    0xe(%edi),%eax
 8062ae7:	e9 65 f7 ff ff       	jmp    8062251 <locale_charset+0x3e1>
                          if (c == EOF)
 8062aec:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062af0:	89 3c 24             	mov    %edi,(%esp)
 8062af3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062af7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062afb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062aff:	b9 14 2d 00 00       	mov    $0x2d14,%ecx
 8062b04:	e8 ef 01 00 00       	call   8062cf8 <__afl_maybe_log>
 8062b09:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062b0d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062b11:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062b15:	8b 3c 24             	mov    (%esp),%edi
 8062b18:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062b1c:	83 f8 ff             	cmp    $0xffffffff,%eax
 8062b1f:	0f 85 b3 f8 ff ff    	jne    80623d8 <locale_charset+0x568>
 8062b25:	8d 76 00             	lea    0x0(%esi),%esi
 8062b28:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062b2c:	89 3c 24             	mov    %edi,(%esp)
 8062b2f:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062b33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062b37:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062b3b:	b9 6f ef 00 00       	mov    $0xef6f,%ecx
 8062b40:	e8 b3 01 00 00       	call   8062cf8 <__afl_maybe_log>
 8062b45:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062b49:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062b4d:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062b51:	8b 3c 24             	mov    (%esp),%edi
 8062b54:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062b58:	e9 07 fc ff ff       	jmp    8062764 <locale_charset+0x8f4>
 8062b5d:	8d 76 00             	lea    0x0(%esi),%esi

              fp = fdopen (fd, "r");
              if (fp == NULL)
                {
                  /* Out of memory.  Treat the file as empty.  */
                  close (fd);
 8062b60:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062b64:	89 3c 24             	mov    %edi,(%esp)
 8062b67:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062b6b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062b6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062b73:	b9 a8 83 00 00       	mov    $0x83a8,%ecx
 8062b78:	e8 7b 01 00 00       	call   8062cf8 <__afl_maybe_log>
 8062b7d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062b81:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062b85:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062b89:	8b 3c 24             	mov    (%esp),%edi
 8062b8c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062b90:	83 ec 0c             	sub    $0xc,%esp
 8062b93:	55                   	push   %ebp
 8062b94:	e8 57 69 fe ff       	call   80494f0 <close@plt>
 8062b99:	83 c4 10             	add    $0x10,%esp
                  cp = "";
 8062b9c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062ba0:	89 3c 24             	mov    %edi,(%esp)
 8062ba3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062ba7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062bab:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062baf:	b9 d4 1d 00 00       	mov    $0x1dd4,%ecx
 8062bb4:	e8 3f 01 00 00       	call   8062cf8 <__afl_maybe_log>
 8062bb9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062bbd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062bc1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062bc5:	8b 3c 24             	mov    (%esp),%edi
 8062bc8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062bcc:	bb fd 3b 06 08       	mov    $0x8063bfd,%ebx
 8062bd1:	e9 0a fc ff ff       	jmp    80627e0 <locale_charset+0x970>
 8062bd6:	66 90                	xchg   %ax,%ax
                          res_size = l1 + 1 + l2 + 1;
                          res_ptr = (char *) malloc (res_size + 1);
                        }
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
 8062bd8:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062bdc:	89 3c 24             	mov    %edi,(%esp)
 8062bdf:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062be3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062be7:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062beb:	b9 29 4e 00 00       	mov    $0x4e29,%ecx
 8062bf0:	e8 03 01 00 00       	call   8062cf8 <__afl_maybe_log>
 8062bf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062bf9:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062bfd:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062c01:	8b 3c 24             	mov    (%esp),%edi
 8062c04:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062c08:	03 04 24             	add    (%esp),%eax
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
 8062c0b:	83 ec 08             	sub    $0x8,%esp
                          res_size = l1 + 1 + l2 + 1;
                          res_ptr = (char *) malloc (res_size + 1);
                        }
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
 8062c0e:	8d 68 02             	lea    0x2(%eax),%ebp
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
 8062c11:	83 c0 03             	add    $0x3,%eax
                          res_size = l1 + 1 + l2 + 1;
                          res_ptr = (char *) malloc (res_size + 1);
                        }
                      else
                        {
                          res_size += l1 + 1 + l2 + 1;
 8062c14:	89 6c 24 08          	mov    %ebp,0x8(%esp)
                          res_ptr = (char *) realloc (res_ptr, res_size + 1);
 8062c18:	50                   	push   %eax
 8062c19:	53                   	push   %ebx
 8062c1a:	e8 a1 66 fe ff       	call   80492c0 <realloc@plt>
 8062c1f:	83 c4 10             	add    $0x10,%esp
 8062c22:	89 c5                	mov    %eax,%ebp
 8062c24:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
 8062c28:	e9 e7 f9 ff ff       	jmp    8062614 <locale_charset+0x7a4>
 8062c2d:	8d 76 00             	lea    0x0(%esi),%esi
          }
      }

      if (file_name == NULL)
        /* Out of memory.  Treat the file as empty.  */
        cp = "";
 8062c30:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062c34:	89 3c 24             	mov    %edi,(%esp)
 8062c37:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062c3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062c3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062c43:	b9 ac 31 00 00       	mov    $0x31ac,%ecx
 8062c48:	e8 ab 00 00 00       	call   8062cf8 <__afl_maybe_log>
 8062c4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062c51:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062c55:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062c59:	8b 3c 24             	mov    (%esp),%edi
 8062c5c:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062c60:	bb fd 3b 06 08       	mov    $0x8063bfd,%ebx
 8062c65:	e9 b5 fb ff ff       	jmp    806281f <locale_charset+0x9af>
 8062c6a:	66 90                	xchg   %ax,%ax
                        }
                      if (res_ptr == NULL)
                        {
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
 8062c6c:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062c70:	89 3c 24             	mov    %edi,(%esp)
 8062c73:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062c77:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062c7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062c7f:	b9 4d 59 00 00       	mov    $0x594d,%ecx
 8062c84:	e8 6f 00 00 00       	call   8062cf8 <__afl_maybe_log>
 8062c89:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062c8d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062c91:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062c95:	8b 3c 24             	mov    (%esp),%edi
 8062c98:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062c9c:	83 ec 0c             	sub    $0xc,%esp
 8062c9f:	53                   	push   %ebx
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
                    }
                  fclose (fp);
                  if (res_size == 0)
                    cp = "";
 8062ca0:	bb fd 3b 06 08       	mov    $0x8063bfd,%ebx
                        }
                      if (res_ptr == NULL)
                        {
                          /* Out of memory. */
                          res_size = 0;
                          free (old_res_ptr);
 8062ca5:	e8 b6 64 fe ff       	call   8049160 <free@plt>
                          break;
                        }
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
                    }
                  fclose (fp);
 8062caa:	89 3c 24             	mov    %edi,(%esp)
 8062cad:	e8 3e ca ff ff       	call   805f6f0 <rpl_fclose>
 8062cb2:	83 c4 10             	add    $0x10,%esp
 8062cb5:	e9 26 fb ff ff       	jmp    80627e0 <locale_charset+0x970>
 8062cba:	66 90                	xchg   %ax,%ax
 8062cbc:	8d 64 24 f0          	lea    -0x10(%esp),%esp
 8062cc0:	89 3c 24             	mov    %edi,(%esp)
 8062cc3:	89 54 24 04          	mov    %edx,0x4(%esp)
 8062cc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8062ccb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062ccf:	b9 3e 6e 00 00       	mov    $0x6e3e,%ecx
 8062cd4:	e8 1f 00 00 00       	call   8062cf8 <__afl_maybe_log>
 8062cd9:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8062cdd:	8b 4c 24 08          	mov    0x8(%esp),%ecx
 8062ce1:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062ce5:	8b 3c 24             	mov    (%esp),%edi
 8062ce8:	8d 64 24 10          	lea    0x10(%esp),%esp
 8062cec:	8d 50 ff             	lea    -0x1(%eax),%edx
 8062cef:	e9 a7 fb ff ff       	jmp    806289b <locale_charset+0xa2b>
 8062cf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08062cf8 <__afl_maybe_log>:
 8062cf8:	9f                   	lahf   
 8062cf9:	0f 90 c0             	seto   %al
 8062cfc:	8b 15 80 7d 43 08    	mov    0x8437d80,%edx
 8062d02:	85 d2                	test   %edx,%edx
 8062d04:	74 22                	je     8062d28 <__afl_setup>

08062d06 <__afl_store>:
 8062d06:	8b 3d e0 7d 43 08    	mov    0x8437de0,%edi
 8062d0c:	31 cf                	xor    %ecx,%edi
 8062d0e:	d1 e9                	shr    %ecx
 8062d10:	89 0d e0 7d 43 08    	mov    %ecx,0x8437de0
 8062d16:	80 04 3a 01          	addb   $0x1,(%edx,%edi,1)
 8062d1a:	80 14 3a 00          	adcb   $0x0,(%edx,%edi,1)

08062d1e <__afl_return>:
 8062d1e:	04 7f                	add    $0x7f,%al
 8062d20:	9e                   	sahf   
 8062d21:	c3                   	ret    
 8062d22:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08062d28 <__afl_setup>:
 8062d28:	80 3d 20 7e 43 08 00 	cmpb   $0x0,0x8437e20
 8062d2f:	75 ed                	jne    8062d1e <__afl_return>
 8062d31:	50                   	push   %eax
 8062d32:	51                   	push   %ecx
 8062d33:	68 30 2e 06 08       	push   $0x8062e30
 8062d38:	e8 73 65 fe ff       	call   80492b0 <getenv@plt>
 8062d3d:	83 c4 04             	add    $0x4,%esp
 8062d40:	85 c0                	test   %eax,%eax
 8062d42:	0f 84 db 00 00 00    	je     8062e23 <__afl_setup_abort>
 8062d48:	50                   	push   %eax
 8062d49:	e8 32 67 fe ff       	call   8049480 <atoi@plt>
 8062d4e:	83 c4 04             	add    $0x4,%esp
 8062d51:	6a 00                	push   $0x0
 8062d53:	6a 00                	push   $0x0
 8062d55:	50                   	push   %eax
 8062d56:	e8 95 64 fe ff       	call   80491f0 <shmat@plt>
 8062d5b:	83 c4 0c             	add    $0xc,%esp
 8062d5e:	83 f8 ff             	cmp    $0xffffffff,%eax
 8062d61:	0f 84 bc 00 00 00    	je     8062e23 <__afl_setup_abort>
 8062d67:	c6 00 01             	movb   $0x1,(%eax)
 8062d6a:	a3 80 7d 43 08       	mov    %eax,0x8437d80
 8062d6f:	89 c2                	mov    %eax,%edx
 8062d71:	59                   	pop    %ecx
 8062d72:	58                   	pop    %eax

08062d73 <__afl_forkserver>:
 8062d73:	50                   	push   %eax
 8062d74:	51                   	push   %ecx
 8062d75:	52                   	push   %edx
 8062d76:	6a 04                	push   $0x4
 8062d78:	68 a0 7d 43 08       	push   $0x8437da0
 8062d7d:	68 c7 00 00 00       	push   $0xc7
 8062d82:	e8 09 66 fe ff       	call   8049390 <write@plt>
 8062d87:	83 c4 0c             	add    $0xc,%esp
 8062d8a:	83 f8 04             	cmp    $0x4,%eax
 8062d8d:	75 6e                	jne    8062dfd <__afl_fork_resume>

08062d8f <__afl_fork_wait_loop>:
 8062d8f:	6a 04                	push   $0x4
 8062d91:	68 a0 7d 43 08       	push   $0x8437da0
 8062d96:	68 c6 00 00 00       	push   $0xc6
 8062d9b:	e8 70 63 fe ff       	call   8049110 <read@plt>
 8062da0:	83 c4 0c             	add    $0xc,%esp
 8062da3:	83 f8 04             	cmp    $0x4,%eax
 8062da6:	75 74                	jne    8062e1c <__afl_die>
 8062da8:	e8 73 66 fe ff       	call   8049420 <fork@plt>
 8062dad:	83 f8 00             	cmp    $0x0,%eax
 8062db0:	7c 6a                	jl     8062e1c <__afl_die>
 8062db2:	74 49                	je     8062dfd <__afl_fork_resume>
 8062db4:	a3 00 7e 43 08       	mov    %eax,0x8437e00
 8062db9:	6a 04                	push   $0x4
 8062dbb:	68 00 7e 43 08       	push   $0x8437e00
 8062dc0:	68 c7 00 00 00       	push   $0xc7
 8062dc5:	e8 c6 65 fe ff       	call   8049390 <write@plt>
 8062dca:	83 c4 0c             	add    $0xc,%esp
 8062dcd:	6a 00                	push   $0x0
 8062dcf:	68 a0 7d 43 08       	push   $0x8437da0
 8062dd4:	ff 35 00 7e 43 08    	pushl  0x8437e00
 8062dda:	e8 61 64 fe ff       	call   8049240 <waitpid@plt>
 8062ddf:	83 c4 0c             	add    $0xc,%esp
 8062de2:	83 f8 00             	cmp    $0x0,%eax
 8062de5:	7e 35                	jle    8062e1c <__afl_die>
 8062de7:	6a 04                	push   $0x4
 8062de9:	68 a0 7d 43 08       	push   $0x8437da0
 8062dee:	68 c7 00 00 00       	push   $0xc7
 8062df3:	e8 98 65 fe ff       	call   8049390 <write@plt>
 8062df8:	83 c4 0c             	add    $0xc,%esp
 8062dfb:	eb 92                	jmp    8062d8f <__afl_fork_wait_loop>

08062dfd <__afl_fork_resume>:
 8062dfd:	68 c6 00 00 00       	push   $0xc6
 8062e02:	e8 e9 66 fe ff       	call   80494f0 <close@plt>
 8062e07:	68 c7 00 00 00       	push   $0xc7
 8062e0c:	e8 df 66 fe ff       	call   80494f0 <close@plt>
 8062e11:	83 c4 08             	add    $0x8,%esp
 8062e14:	5a                   	pop    %edx
 8062e15:	59                   	pop    %ecx
 8062e16:	58                   	pop    %eax
 8062e17:	e9 ea fe ff ff       	jmp    8062d06 <__afl_store>

08062e1c <__afl_die>:
 8062e1c:	31 c0                	xor    %eax,%eax
 8062e1e:	e8 1d 63 fe ff       	call   8049140 <_exit@plt>

08062e23 <__afl_setup_abort>:
 8062e23:	fe 05 20 7e 43 08    	incb   0x8437e20
 8062e29:	59                   	pop    %ecx
 8062e2a:	58                   	pop    %eax
 8062e2b:	e9 ee fe ff ff       	jmp    8062d1e <__afl_return>

08062e30 <.AFL_SHM_ENV>:
 8062e30:	5f                   	pop    %edi
 8062e31:	5f                   	pop    %edi
 8062e32:	41                   	inc    %ecx
 8062e33:	46                   	inc    %esi
 8062e34:	4c                   	dec    %esp
 8062e35:	5f                   	pop    %edi
 8062e36:	53                   	push   %ebx
 8062e37:	48                   	dec    %eax
 8062e38:	4d                   	dec    %ebp
 8062e39:	5f                   	pop    %edi
 8062e3a:	49                   	dec    %ecx
 8062e3b:	44                   	inc    %esp
 8062e3c:	00 66 90             	add    %ah,-0x70(%esi)
 8062e3f:	90                   	nop

08062e40 <__udivdi3>:
 8062e40:	55                   	push   %ebp
 8062e41:	57                   	push   %edi
 8062e42:	56                   	push   %esi
 8062e43:	83 ec 10             	sub    $0x10,%esp
 8062e46:	8b 54 24 2c          	mov    0x2c(%esp),%edx
 8062e4a:	8b 7c 24 20          	mov    0x20(%esp),%edi
 8062e4e:	8b 74 24 24          	mov    0x24(%esp),%esi
 8062e52:	8b 4c 24 28          	mov    0x28(%esp),%ecx
 8062e56:	85 d2                	test   %edx,%edx
 8062e58:	89 7c 24 04          	mov    %edi,0x4(%esp)
 8062e5c:	89 34 24             	mov    %esi,(%esp)
 8062e5f:	89 c8                	mov    %ecx,%eax
 8062e61:	75 35                	jne    8062e98 <__udivdi3+0x58>
 8062e63:	39 f1                	cmp    %esi,%ecx
 8062e65:	0f 87 bd 00 00 00    	ja     8062f28 <__udivdi3+0xe8>
 8062e6b:	85 c9                	test   %ecx,%ecx
 8062e6d:	89 cd                	mov    %ecx,%ebp
 8062e6f:	75 0b                	jne    8062e7c <__udivdi3+0x3c>
 8062e71:	b8 01 00 00 00       	mov    $0x1,%eax
 8062e76:	31 d2                	xor    %edx,%edx
 8062e78:	f7 f1                	div    %ecx
 8062e7a:	89 c5                	mov    %eax,%ebp
 8062e7c:	89 f0                	mov    %esi,%eax
 8062e7e:	31 d2                	xor    %edx,%edx
 8062e80:	f7 f5                	div    %ebp
 8062e82:	89 c6                	mov    %eax,%esi
 8062e84:	89 f8                	mov    %edi,%eax
 8062e86:	f7 f5                	div    %ebp
 8062e88:	89 f2                	mov    %esi,%edx
 8062e8a:	83 c4 10             	add    $0x10,%esp
 8062e8d:	5e                   	pop    %esi
 8062e8e:	5f                   	pop    %edi
 8062e8f:	5d                   	pop    %ebp
 8062e90:	c3                   	ret    
 8062e91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8062e98:	3b 14 24             	cmp    (%esp),%edx
 8062e9b:	77 7b                	ja     8062f18 <__udivdi3+0xd8>
 8062e9d:	0f bd f2             	bsr    %edx,%esi
 8062ea0:	83 f6 1f             	xor    $0x1f,%esi
 8062ea3:	0f 84 97 00 00 00    	je     8062f40 <__udivdi3+0x100>
 8062ea9:	bd 20 00 00 00       	mov    $0x20,%ebp
 8062eae:	89 d7                	mov    %edx,%edi
 8062eb0:	89 f1                	mov    %esi,%ecx
 8062eb2:	29 f5                	sub    %esi,%ebp
 8062eb4:	d3 e7                	shl    %cl,%edi
 8062eb6:	89 c2                	mov    %eax,%edx
 8062eb8:	89 e9                	mov    %ebp,%ecx
 8062eba:	d3 ea                	shr    %cl,%edx
 8062ebc:	89 f1                	mov    %esi,%ecx
 8062ebe:	09 fa                	or     %edi,%edx
 8062ec0:	8b 3c 24             	mov    (%esp),%edi
 8062ec3:	d3 e0                	shl    %cl,%eax
 8062ec5:	89 54 24 08          	mov    %edx,0x8(%esp)
 8062ec9:	89 e9                	mov    %ebp,%ecx
 8062ecb:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8062ecf:	8b 44 24 04          	mov    0x4(%esp),%eax
 8062ed3:	89 fa                	mov    %edi,%edx
 8062ed5:	d3 ea                	shr    %cl,%edx
 8062ed7:	89 f1                	mov    %esi,%ecx
 8062ed9:	d3 e7                	shl    %cl,%edi
 8062edb:	89 e9                	mov    %ebp,%ecx
 8062edd:	d3 e8                	shr    %cl,%eax
 8062edf:	09 c7                	or     %eax,%edi
 8062ee1:	89 f8                	mov    %edi,%eax
 8062ee3:	f7 74 24 08          	divl   0x8(%esp)
 8062ee7:	89 d5                	mov    %edx,%ebp
 8062ee9:	89 c7                	mov    %eax,%edi
 8062eeb:	f7 64 24 0c          	mull   0xc(%esp)
 8062eef:	39 d5                	cmp    %edx,%ebp
 8062ef1:	89 14 24             	mov    %edx,(%esp)
 8062ef4:	72 11                	jb     8062f07 <__udivdi3+0xc7>
 8062ef6:	8b 54 24 04          	mov    0x4(%esp),%edx
 8062efa:	89 f1                	mov    %esi,%ecx
 8062efc:	d3 e2                	shl    %cl,%edx
 8062efe:	39 c2                	cmp    %eax,%edx
 8062f00:	73 5e                	jae    8062f60 <__udivdi3+0x120>
 8062f02:	3b 2c 24             	cmp    (%esp),%ebp
 8062f05:	75 59                	jne    8062f60 <__udivdi3+0x120>
 8062f07:	8d 47 ff             	lea    -0x1(%edi),%eax
 8062f0a:	31 f6                	xor    %esi,%esi
 8062f0c:	89 f2                	mov    %esi,%edx
 8062f0e:	83 c4 10             	add    $0x10,%esp
 8062f11:	5e                   	pop    %esi
 8062f12:	5f                   	pop    %edi
 8062f13:	5d                   	pop    %ebp
 8062f14:	c3                   	ret    
 8062f15:	8d 76 00             	lea    0x0(%esi),%esi
 8062f18:	31 f6                	xor    %esi,%esi
 8062f1a:	31 c0                	xor    %eax,%eax
 8062f1c:	89 f2                	mov    %esi,%edx
 8062f1e:	83 c4 10             	add    $0x10,%esp
 8062f21:	5e                   	pop    %esi
 8062f22:	5f                   	pop    %edi
 8062f23:	5d                   	pop    %ebp
 8062f24:	c3                   	ret    
 8062f25:	8d 76 00             	lea    0x0(%esi),%esi
 8062f28:	89 f2                	mov    %esi,%edx
 8062f2a:	31 f6                	xor    %esi,%esi
 8062f2c:	89 f8                	mov    %edi,%eax
 8062f2e:	f7 f1                	div    %ecx
 8062f30:	89 f2                	mov    %esi,%edx
 8062f32:	83 c4 10             	add    $0x10,%esp
 8062f35:	5e                   	pop    %esi
 8062f36:	5f                   	pop    %edi
 8062f37:	5d                   	pop    %ebp
 8062f38:	c3                   	ret    
 8062f39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8062f40:	3b 4c 24 04          	cmp    0x4(%esp),%ecx
 8062f44:	76 0b                	jbe    8062f51 <__udivdi3+0x111>
 8062f46:	31 c0                	xor    %eax,%eax
 8062f48:	3b 14 24             	cmp    (%esp),%edx
 8062f4b:	0f 83 37 ff ff ff    	jae    8062e88 <__udivdi3+0x48>
 8062f51:	b8 01 00 00 00       	mov    $0x1,%eax
 8062f56:	e9 2d ff ff ff       	jmp    8062e88 <__udivdi3+0x48>
 8062f5b:	90                   	nop
 8062f5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8062f60:	89 f8                	mov    %edi,%eax
 8062f62:	31 f6                	xor    %esi,%esi
 8062f64:	e9 1f ff ff ff       	jmp    8062e88 <__udivdi3+0x48>
 8062f69:	66 90                	xchg   %ax,%ax
 8062f6b:	66 90                	xchg   %ax,%ax
 8062f6d:	66 90                	xchg   %ax,%ax
 8062f6f:	90                   	nop

08062f70 <__libc_csu_init>:
 8062f70:	55                   	push   %ebp
 8062f71:	57                   	push   %edi
 8062f72:	31 ff                	xor    %edi,%edi
 8062f74:	56                   	push   %esi
 8062f75:	53                   	push   %ebx
 8062f76:	e8 65 79 fe ff       	call   804a8e0 <__x86.get_pc_thunk.bx>
 8062f7b:	81 c3 91 41 00 00    	add    $0x4191,%ebx
 8062f81:	83 ec 1c             	sub    $0x1c,%esp
 8062f84:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8062f88:	8d b3 f8 fe ff ff    	lea    -0x108(%ebx),%esi
 8062f8e:	e8 29 61 fe ff       	call   80490bc <_init>
 8062f93:	8d 83 f4 fe ff ff    	lea    -0x10c(%ebx),%eax
 8062f99:	29 c6                	sub    %eax,%esi
 8062f9b:	c1 fe 02             	sar    $0x2,%esi
 8062f9e:	85 f6                	test   %esi,%esi
 8062fa0:	74 27                	je     8062fc9 <__libc_csu_init+0x59>
 8062fa2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8062fa8:	8b 44 24 38          	mov    0x38(%esp),%eax
 8062fac:	89 2c 24             	mov    %ebp,(%esp)
 8062faf:	89 44 24 08          	mov    %eax,0x8(%esp)
 8062fb3:	8b 44 24 34          	mov    0x34(%esp),%eax
 8062fb7:	89 44 24 04          	mov    %eax,0x4(%esp)
 8062fbb:	ff 94 bb f4 fe ff ff 	call   *-0x10c(%ebx,%edi,4)
 8062fc2:	83 c7 01             	add    $0x1,%edi
 8062fc5:	39 f7                	cmp    %esi,%edi
 8062fc7:	75 df                	jne    8062fa8 <__libc_csu_init+0x38>
 8062fc9:	83 c4 1c             	add    $0x1c,%esp
 8062fcc:	5b                   	pop    %ebx
 8062fcd:	5e                   	pop    %esi
 8062fce:	5f                   	pop    %edi
 8062fcf:	5d                   	pop    %ebp
 8062fd0:	c3                   	ret    
 8062fd1:	eb 0d                	jmp    8062fe0 <__libc_csu_fini>
 8062fd3:	90                   	nop
 8062fd4:	90                   	nop
 8062fd5:	90                   	nop
 8062fd6:	90                   	nop
 8062fd7:	90                   	nop
 8062fd8:	90                   	nop
 8062fd9:	90                   	nop
 8062fda:	90                   	nop
 8062fdb:	90                   	nop
 8062fdc:	90                   	nop
 8062fdd:	90                   	nop
 8062fde:	90                   	nop
 8062fdf:	90                   	nop

08062fe0 <__libc_csu_fini>:
 8062fe0:	f3 c3                	repz ret 
 8062fe2:	66 90                	xchg   %ax,%ax
 8062fe4:	66 90                	xchg   %ax,%ax
 8062fe6:	66 90                	xchg   %ax,%ax
 8062fe8:	66 90                	xchg   %ax,%ax
 8062fea:	66 90                	xchg   %ax,%ax
 8062fec:	66 90                	xchg   %ax,%ax
 8062fee:	66 90                	xchg   %ax,%ax

08062ff0 <atexit>:
 8062ff0:	53                   	push   %ebx
 8062ff1:	e8 ea 78 fe ff       	call   804a8e0 <__x86.get_pc_thunk.bx>
 8062ff6:	81 c3 16 41 00 00    	add    $0x4116,%ebx
 8062ffc:	83 ec 18             	sub    $0x18,%esp
 8062fff:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8063005:	85 c0                	test   %eax,%eax
 8063007:	74 1f                	je     8063028 <atexit+0x38>
 8063009:	8b 00                	mov    (%eax),%eax
 806300b:	89 44 24 08          	mov    %eax,0x8(%esp)
 806300f:	8b 44 24 20          	mov    0x20(%esp),%eax
 8063013:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 806301a:	00 
 806301b:	89 04 24             	mov    %eax,(%esp)
 806301e:	e8 5d 62 fe ff       	call   8049280 <__cxa_atexit@plt>
 8063023:	83 c4 18             	add    $0x18,%esp
 8063026:	5b                   	pop    %ebx
 8063027:	c3                   	ret    
 8063028:	31 c0                	xor    %eax,%eax
 806302a:	eb df                	jmp    806300b <atexit+0x1b>

Disassembly of section .fini:

0806302c <_fini>:
 806302c:	53                   	push   %ebx
 806302d:	83 ec 08             	sub    $0x8,%esp
 8063030:	e8 ab 78 fe ff       	call   804a8e0 <__x86.get_pc_thunk.bx>
 8063035:	81 c3 d7 40 00 00    	add    $0x40d7,%ebx
 806303b:	83 c4 08             	add    $0x8,%esp
 806303e:	5b                   	pop    %ebx
 806303f:	c3                   	ret    
